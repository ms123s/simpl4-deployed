{
	"title": "Camel",
	"namespace": "http://b3mn.org/stencilset/camel#",
	"idIsCaseSensitiv": true,
	"prefix": "sw",
	"propertyPackages": [ {
		"name": "baseProperties",
		"properties": [ {
			"id": "overrideid",
			"type": "String",
			"title": "Id",
			"value": "",
			"include": false,
			"popular": true
		}, {
			"id": "name",
			"type": "String",
			"title": "Name",
			"value": "",
			"description": "The descriptive name.",
			"description_de": "Bezeichnung.",
			"optional": true,
			"length": "32",
			"include": false,
			"refToView": "text1"
		}, {
			"id": "documentation",
			"type": "Text",
			"title": "Documentation",
			"title_de": "Dokumentation",
			"value": "",
			"readonly": false,
			"optional": true,
			"length": "",
			"wrapLines": true,
			"popular": true
		} ]
	}, {
		"name": "routeBaseAttributes",
		"properties": [ {
			"id": "overrideid",
			"type": "String",
			"title": "Id",
			"value": "",
			"include": true,
			"popular": true
		}, {
			"id": "documentation",
			"type": "Text",
			"title": "Documentation",
			"title_de": "Dokumentation",
			"value": "",
			"readonly": false,
			"optional": true,
			"length": "",
			"wrapLines": true,
			"popular": true
		}, {
			"id": "autostart",
			"title": "Autostart",
			"type": "boolean",
			"value": true,
			"visible": true
		}, {
			"id": "enabled",
			"title": "Enabled",
			"title_de": "Aktiviert",
			"type": "boolean",
			"value": true,
			"visible": true
		}, {
			"id": "logExceptionsOnly",
			"title": "Log exceptions only",
			"title_de": "Nur Ausnah. loggen",
			"description": "Log exceptions only",
			"description_de": "Nur Ausnahmen loggen",
			"type": "boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "endpointProperties",
		"properties": [ {
			"id": "shared",
			"title": "Shared",
			"title_de": "Geteilt",
			"description_de": "Wenn 'Ursprung' ausgewählt ist,  kann der Endpunkt an anderen Stellen verwendet werden.<br />Die Verbindung wird über den 'Linkname' hergstellt.Beliebig viele Links können auf einen Ursprung verweisen.<br />Die Einstellungen des Ursprungs werden verwendet.",
			"description": "If 'origin' is selected,one endpoint can be used elsewhere<br/> The link is established via the 'linkname'.<br/>Any number of links can point to the 'origin'.<br /> The 'origin' settings will be used.",
			"type": "Choice",
			"popular": true,
			"visible": true,
			"value": "no",
			"items": [ {
				"id": "c1",
				"title": "No",
				"title_de": "Nein",
				"value": "no"
			}, {
				"id": "c2",
				"title": "Origin",
				"title_de": "Ursprung",
				"value": "origin"
			}, {
				"id": "c3",
				"title": "Link",
				"value": "link"
			} ]
		}, {
			"id": "shareRef",
			"type": "String",
			"title": "Linkname",
			"visible": "shared!='no'",
			"value": null,
			"readonly": false,
			"optional": true,
			"popular": true
		}, {
			"id": "enrich",
			"title": "Enrich",
			"description": "Apache Camel supports two kinds of content enricher, as follows:<ul><li> enrich()—obtains additional data from the resource by sending a copy of the current exchange to a producer endpoint and then using the data from the resulting reply (the exchange created by the enricher is always an InOut exchange).</li><li> pollEnrich()—obtains the additional data by polling a consumer endpoint for data. Effectively, the consumer endpoint from the main service and the consumer endpoint in pollEnrich() are coupled, such that exchanges incoming on the main service trigger a poll of the pollEnrich() endpoint.</li></ul>",
			"type": "Choice",
			"popular": true,
			"visible": true,
			"value": "no",
			"items": [ {
				"id": "c1",
				"title": "No",
				"title_de": "Nein",
				"value": "no"
			}, {
				"id": "c2",
				"title": "Enrich",
				"value": "enrich"
			}, {
				"id": "c3",
				"title": "PollEnrich",
				"value": "pollEnrich"
			} ]
		}, {
			"id": "enrich_timeout",
			"type": "String",
			"title": "Timeout",
			"description": "<ul><li>Timeout is 0, receiveNoWait is called. </li><li>Timeout is negative, receive is called. </li><li>Otherwise, receive(timeout) is called.</li></ul>",
			"visible": "enrich=='pollEnrich'",
			"value": 0,
			"readonly": false,
			"optional": true,
			"popular": true
		} ]
	}, {
		"name": "colorProperties",
		"properties": [ {
			"id": "bgcolor",
			"type": "Color",
			"title": "BackgroundColor",
			"title_de": "Hintergrundfarbe",
			"value": "white",
			"readonly": false,
			"optional": false,
			"refToView": "fill_el",
			"include": "stencil !='simpleconnection' && stencil != 'whenconnection'",
			"fill": true,
			"stroke": false
		}, {
			"id": "bordercolor",
			"type": "Color",
			"title": "Border color",
			"title_de": "Rahmenfarbe",
			"value": "#000000",
			"description": "Change the border color for a visual differentiation.",
			"description_de": "Ändern Sie die Rahmenfarbe für eine visuelle Unterscheidung.",
			"readonly": false,
			"optional": false,
			"include": "stencil !='simpleconnection' && stencil != 'whenconnection'",
			"refToView": [ "bg_frame" ],
			"fill": false,
			"stroke": true
		}, {
			"id": "caption",
			"type": "String",
			"title": "Caption",
			"title_de": "Beschriftung",
			"value": null,
			"readonly": false,
			"optional": true,
			"refToView": [ "text2" ]
		} ]
	}, {
		"name": "expressionProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Available vars: exchange <br/> access headerfields: <b>exchange.in.headers.header1</b><br/> access properties: <b>exchange.properties.prop1</b>",
			"description_de": "Verfügbare Variablen: exchange <br/> Zugriff auf Headerfelder: <b>exchange.in.headers.header1</b><br/> Zugriff auf Properties: <b>exchange.properties.prop1</b>",
			"type": "Text",
			"value": "",
			"popular": false,
			"visible": "defaultflow=='none'"
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"visible": "defaultflow=='none'",
			"items": "###language_items",
			"width": 80,
			"optional": true
		} ]
	}, {
		"name": "assignmentProperties",
		"properties": [{
			"id": "uriparam_assignments",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Assignments",
			"title_de": "Zuweisungen",
			"description": "Assigning message headers and properties to a variablesMap.<br><ul><li> <b>header.header1</b> or short: <b>h.header1</b> => Source is the headerfield <b>header1</b></li><li><b>property.prop1</b> or short <b>p.prop1</b> => Source is property <b>prop1</b></li>",
			"description_de": "Zuweisung von Message Headers und Properties zu einer VariablenMap.<ul><li> <b>header.header1</b> oder kurz: <b>h.header1</b> => Quelle ist das Headerfeld <b>header1</b></li><li><b>property.prop1</b> oder kurz <b>p.prop1</b> =>  Quelle ist Property <b>prop1</b></li>",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "expr",
				"name_de": "Quell-Ausdruck",
				"name": "Source-Expression",
				"type": "String",
				"value": null,
				"width": 250
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 180
			}, {
				"id": "variable",
				"name_de": "Variable",
				"name": "Variable",
				"type": "String",
				"value": null,
				"width": 250
			}]
		}]
	}, {
		"name": "marshalProperties",
		"properties": [ {
			"id": "format",
			"title": "Dataformattype",
			"type": "Choice",
			"popular": false,
			"refToView": [ "text2" ],
			"value": "csv",
			"items": [ {
				"id": "c1",
				"title": "csv",
				"value": "csv"
			}, {
				"id": "c2",
				"title": "fixed",
				"value": "univocity-fixed"
			}, {
				"id": "c3",
				"title": "json",
				"value": "json"
			}, {
				"id": "c4",
				"title": "base64",
				"value": "base64"
			}, {
				"id": "c5",
				"title": "zip",
				"value": "zip"
			} ],
			"visible": true
		}, {
			"id": "csv_configRef",
			"title": "ConfigRef",
			"type": "String",
			"value": "",
			"popular": false,
			"visible": "format=='csv'"
		}, {
			"id": "csv_strategyRef",
			"title": "StrategyRef",
			"type": "String",
			"value": "",
			"popular": false,
			"visible": "format=='csv'"
		}, {
			"id": "csv_delimiter",
			"title": "Delimiter",
			"title_de": "Begrenzer",
			"description": "The column delimiter to use.",
			"type": "String",
			"value": ",",
			"popular": false,
			"visible": "format=='csv'"
		}, {
			"id": "csv_skipFirstLine",
			"title": "Skip first line",
			"title_": "Erste Zeile überg.",
			"description": "Whether or not to skip the first line of CSV input when unmarshalling<br/> (e.g. if the content has headers on the first line)",
			"type": "boolean",
			"value": false,
			"popular": false,
			"visible": "format=='csv'"
		}, {
			"id": "csv_lazyLoad",
			"title": "LazyLoad",
			"description": "Whether or not to Sequential access CSV input through an iterator<br/> which could avoid OOM exception when processing huge CSV file.",
			"type": "boolean",
			"value": false,
			"popular": false,
			"visible": "format=='csv'"
		}, {
			"id": "csv_useMaps",
			"title": "UseMaps",
			"description": "Whether to use List<Map> when unmarshalling instead of List<List>.",
			"type": "boolean",
			"value": false,
			"popular": false,
			"visible": "format=='csv' && func=='unmarshal'"
		}, {
			"id": "univocity-fixed_headersDisabled",
			"title": "Ignore header",
			"title_de": "Ignoriere Kopfzeile",
			"type": "boolean",
			"value": false,
			"popular": false,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_skipTrailingCharsUntilNewline",
			"title": "Skip trailing chars",
			"title_de": "überspringe überfl. Zeichen",
			"description": "Whether or not the trailing characters until new line must be ignored.",
			"description_de": "Überflüssigen Zeichen bis zum Newline ignorieren.",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_recordEndsOnNewLine",
			"title": "Record ends on newline",
			"title_de": "Newline ist Satzende",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_ignoreLeadingWhitespaces",
			"title": "Ign. leading whitespaces, also see padding",
			"title_de": "Ign. führende Leerzeichen,siehe auch Füllzeichen",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_ignoreTrailingWhitespaces",
			"title": "Ign. trailing whitespaces",
			"title_de": "Ign. angehängte Leerz.",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_padding",
			"title": "Padding char",
			"title_de": "Füllzeichen",
			"description": "if you nead leading whitespaces, then set this to char other then ' '",
			"description_de": "Wenn führende Leerzeichen benötig werden, dann muss das Füllzeichen auf einen anderen Wert als  ' ' gesetzt werden.",
			"type": "string",
			"value": ' ',
			"popular": false,
			"length": 1,
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_fieldLengths",
			"type": "Complex",
			"title": "FieldLengths",
			"title_de": "Feldlängen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			}, {
				"id": "length",
				"name": "Length",
				"name_de": "Länge",
				"type": "Integer",
				"value": "",
				"width": 100,
				"optional": false
			} ],
			"visible": "format=='univocity-fixed'"
		}, {
			"id": "univocity-fixed_asMap",
			"title": "Result as map",
			"title_de": "Ergebnis als Map",
			"description": "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected).",
			"type": "boolean",
			"value": false,
			"popular": false,
			"visible": "format=='univocity-fixed' && func=='unmarshal'"
		}, {
			"id": "zip_pattern",
			"title": "Pattern",
			"title_de": "Muster",
			"description": "Only entries with the matching pattern are extracted.",
			"description_de": "Nur Einträge mit dem passenden Muster werden extrahiert.",
			"type": "string",
			"value": null,
			"popular": false,
			"visible": "format=='zip' && func=='unmarshal'"
		}, {
			"id": "zip_oneToBody",
			"title": "Extract one to body",
			"title_de": "Extrakt in den Body",
			"description": "Extract one entry to the body, otherwise the body contains a map with the matching entries,even at one entry.",
			"description_de": "Einen Eintrag in den Body extrahieren, ansonsten enthält der Body eine Map mit den Einträgen auch bei einem Eintrag.",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='zip' && func=='unmarshal'"
		}, {
			"id": "json_prettyPrint",
			"title": "PrettyPrint",
			"description": "Enables pretty printing, which adds white space as needed to tidy up the resulting XML for easy reading.",
			"type": "boolean",
			"value": true,
			"popular": false,
			"visible": "format=='json' && func=='marshal'"
		}, {
			"id": "json_library",
			"title": "Library",
			"description": "",
			"type": "Choice",
			"value": "flexjson",
			"popular": false,
			"items": [ {
				"id": "c1",
				"title": "flexjson",
				"value": "flexjson"
			}, {
				"id": "c2",
				"title": "xstream",
				"value": "xstream"
			}, {
				"id": "c3",
				"title": "gson",
				"value": "gson"
			} ],
			"visible": "format=='json'"
		}, {
			"id": "extraOptions",
			"type": "Complex",
			"title": "Extra Options",
			"description": "Extra Options",
			"description_de": "Zusätzliche Optionen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "delayProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Expression defining the length of the delay",
			"optional": false;
			"type": "Text",
			"value": ""
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"width": 80,
			"optional": true
		}, {
			"id": "async",
			"title": "Async delayed",
			"description": "If enabled then delayed messages happens asynchronously using a scheduled thread pool.",
			"type": "boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "loopProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Expression defining the number of loops",
			"optional": false;
			"type": "Text",
			"value": ""
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"width": 80,
			"optional": true
		} ]
	}, {
		"name": "messageFilterProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Specifies the expression used to determine if the message is to be filtered from the service.",
			"type": "Text",
			"value": ""
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items"
		} ]
	}, {
		"name": "recipientListProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Specifies the expression used to generate the list of recipients.",
			"optional": false;
			"type": "Text"
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"width": 80,
			"optional": true
		}, {
			"id": "option_ignoreInvalidEndpoints",
			"title": "Ignore invalid EP",
			"description": "Whether to ignore an endpoint URI that could not be resolved.<br/>If disabled, Camel will throw an exception identifying the invalid endpoint URI.",
			"type": "boolean",
			"value": false,
			"visible": true
		}, {
			"id": "option_delimiter",
			"title": "Delimiter",
			"description": "Delimiter used if the Expression returned multiple endpoints.",
			"type": "String",
			"value": ",",
			"optional": true
		}, {
			"id": "extraOptions",
			"type": "Complex",
			"title": "Extra Options",
			"description": "Extra Options",
			"description_de": "Zusätzliche Optionen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "splitterProperties",
		"properties": [ {
			"id": "expression",
			"title": "Expression",
			"title_de": "Ausdruck",
			"description": "Specifies the expression used to split the message.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "language",
			"title": "Language",
			"title_de": "Sprache",
			"description": "Specifies the expression language used to process the expression.",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"width": 80,
			"optional": true
		}, {
			"id": "option_onPrepareRef",
			"title": "On Prepare ref",
			"description": "Specifies a reference to a bean implementing a custom onPrepare processor<br/> that processes the original message before it is split up and passed to the next step in the service<br/> This property enables you to deep clone mutable message bodies, so the splitter creates separate, self-contained fragments of the message<br/> You can use this property to execute any kind of logic on a message exchange<br/>",
			"type": "String",
			"value": "",
			"visible": true
		}, {
			"id": "extraOptions",
			"type": "Complex",
			"title": "Extra Options",
			"description": "Extra Options",
			"description_de": "Zusätzliche Optionen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		}, {
			"id": "loggingOff",
			"title": "Logging off",
			"title_": "Logging aus",
			"description": "",
			"type": "boolean",
			"readonly": false,
			"value": false
		} ]
	}, {
		"name": "aggregateProperties",
		"properties": [ {
			"id": "correlationExpression",
			"title": "Correlation Expression",
			"description": "Specifies the expression used to correlate the messages that are aggregated.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "correlationLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the correlation expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "completionPredicate",
			"title": "Completion Predicate",
			"description": "Specifies the expression used to determine when the aggregated message is complete based on it's contents.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "completionLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the completion predicate expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "completionSizeExpression",
			"title": "Completion Size",
			"description": "Specifies an expression used to determine when aggregation is complete based on the number of exchanges processed.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "completionSizeLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the completion size expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "completionTimeoutExpression",
			"title": "Completion Timeout",
			"description": "Specifies an expression used to determine when aggregation is complete based on the amount of time,<br/> in milliseconds, the aggregator has been inactive.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "completionTimeoutLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the completion timeout expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "option_strategyRef",
			"title": "StrategyRef",
			"description": "Specifies a reference for looking up the AggregationStrategy in the registry.",
			"type": "String",
			"value": null,
			"optional": false
		}, {
			"id": "extraOptions",
			"type": "Complex",
			"title": "Extra Options",
			"description": "Extra Options",
			"description_de": "Zusätzliche Optionen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "extraParamsProperties",
		"properties": [ {
			"id": "extraParams",
			"type": "Complex",
			"title": "Extra Parameter",
			"description": "Extra Parameter",
			"description_de": "Zusätzliche Parameter",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "genericEndpointProperties",
		"properties": [ {
			"id": "uri",
			"title": "Uri",
			"value": "",
			"type": "String",
			"visible": true
		}, {
			"id": "extraParams",
			"type": "Complex",
			"title": "UriParameter",
			"description": "UriParameter",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "headersProperties",
		"properties": [ {
			"id": "headers",
			"type": "Complex",
			"title": "Headers",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "language",
				"name": "Language",
				"name_de": "Sprache",
				"readonly": false,
				"type": "Choice",
				"value": "constant",
				"items": "###language_items",
				"width": 80,
				"optional": true
			} ]
		} ]
	}, {
		"name": "propertiesProperties",
		"properties": [ {
			"id": "properties",
			"type": "Complex",
			"title": "Properties",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "language",
				"name": "Language",
				"name_de": "Sprache",
				"readonly": false,
				"type": "Choice",
				"value": "groovy",
				"items": "###language_items",
				"width": 80,
				"optional": true
			} ]
		} ]
	}, {
		"name": "transactedProperties",
		"properties": [ {
			"id": "propagationBehavior",
			"type": "Choice",
			"title": "PropagationBehavior",
			"value": "PROPAGATION_REQUIRED",
			"items": [ {
				"id": "c1",
				"title": "Propagation requires new",
				"value": "PROPAGATION_REQUIRES_NEW"
			}, {
				"id": "c2",
				"title": "Propagation required",
				"value": "PROPAGATION_REQUIRED"
			}, {
				"id": "c3",
				"title": "Propagation never",
				"value": "PROPAGATION_NEVER"
			} ]
		} ]
	}, {
		"name": "onExceptionProperties",
		"properties": [ {
			"id": "continued",
			"title": "Continued",
			"description": "Specifies an expression that determines whether the exception is ignored and<br/> processing of the original service continues after the onException service completes.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "continuedLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the continued expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "handled",
			"title": "Handled",
			"description": "Specifies an expression that determines if the exception is marked as handled.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "handledLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the handled expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "retryWhile",
			"title": "RetryWhile",
			"description": "Specifies an expression that determines if the message causing the exception should be redelivered.<br/>The message is redelivered until the expression evaluates to false.",
			"optional": false,
			"type": "Text"
		}, {
			"id": "retryWhileLanguage",
			"title": "Language",
			"description": "Specifies the expression language used to process the retryWhile expression.",
			"type": "Choice",
			"value": "groovy",
			"items": "###language_items",
			"optional": true
		}, {
			"id": "exceptions",
			"type": "Complex",
			"title": "Exceptions",
			"value": "{ \"totalCount\": 1, \"items\": [ { \"exception\": \"java.lang.Exception\" } ] }",
			"description": "Specifies the list of exceptions the node handles.<br/>The Add button adds an entry typed in the field.<br/>The Delete button removes the selected entry from the list.",
			"popular": false,
			"complexItems": [ {
				"id": "exception",
				"name": "Name",
				"type": "String",
				"value": "",
				"width": 200,
				"optional": false
			} ]
		} ]
	}, {
		"name": "rollbackProperties",
		"properties": [ {
			"id": "markRollbackOnly",
			"title": "RollbackOnly",
			"description": "Specifies whether the entire transaction is rolled back, without throwing a RollbackExchangeException.<br/>This property cannot be enabled when Rollback Only Last is enabled.",
			"type": "boolean",
			"readonly": "markRollbackOnlyLast!=false",
			"value": false
		}, {
			"id": "markRollbackOnlyLast",
			"title": "RollbackOnlyLast",
			"description": "Specifies whether the current transaction is rolled back, without throwing a RollbackExchangeException.<br/>This property cannot be enabled when Rollback Only is enabled..",
			"type": "boolean",
			"readonly": "markRollbackOnly!=false",
			"value": false
		} ]
	}, {
		"name": "wawidocProperties",
		"properties": [ {
			"id": "type_wawidoc",
			"type": "String",
			"value": "WawiDoc",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "wawidoc:dummy",
			"visible": false
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"value": "-",
			"description": "Namespace",
			"description_de": "Namespace",
			"config": {
				type: "ms123.util.RepoList"
			},
			"type": "Combo",
			"items": [],
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Quelle des Templates, z.B. <ul><li> <b>header.template</b> oder kurz: <b>h.template</b> => Quelle ist das Headerfeld <b>template</b></li><li><b>property.template</b> oder kurz <b>p.template</b> =>  Quelle ist Property <b>template</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Source of the template, e.g. <ul><li> <b>header.template</b> or short: <b>h.template</b> => Source is the headerfield <b>template</b></li><li><b>property.template</b> or short <b>p.template</b> => Source is property <b>template</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.doc</b> oder kurz: <b>h.doc</b> => Ziel ist das Headerfeld <b>doc</b></li><li><b>property.doc</b> oder kurz <b>p.doc</b> => Ziel ist Property <b>doc</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.doc</b> or short: <b>h.doc</b> => Destination is headerfield <b>doc</b></li><li><b>property.doc</b> or short <b>p.doc</b> Destination is property <b>doc</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_outputformat",
			"title": "Outputformat",
			"type": "Choice",
			"value": "pdf",
			"items": [ {
				"id": "c1",
				"title": "XSL-FO",
				"value": "fo"
			}, {
				"id": "c2",
				"title": "PDF",
				"value": "pdf"
			} ]
		} ]
	}, {
		"name": "scriptconsumerProperties",
		"properties": [ {
			"id": "type_scriptconsumer",
			"type": "String",
			"value": "ScriptConsumer",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "scriptconsumer:dummy",
			"visible": false
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"value": "-",
			"description": "Namespace",
			"description_de": "Namespace",
			"config": {
				type: "ms123.util.RepoList"
			},
			"type": "Combo",
			"items": [],
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_scriptfile",
			"type": "ResourceSelector",
			"config": {
				"type": "sw.groovy"
			},
			"title": "Scriptfile",
			"title_de": "Scriptdatei",
			"description": "The file which contains the script",
			"description_de": "Die Datei welche das Script beinhaltet",
			"value": "",
			"optional": true
		} ]
	}, {
		"name": "xdocreportProperties",
		"properties": [ {
			"id": "type_xdocreport",
			"type": "String",
			"value": "XdocReport",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "xdocreport:${kind}",
			"visible": false
		}, {
			"id": "urivalue_kind",
			"title": "TemplateEngine",
			"type": "Choice",
			"value": "Velocity",
			"items": [ {
				"id": "c1",
				"title": "Freemarker",
				"value": "Freemarker"
			}, {
				"id": "c2",
				"title": "Velocity",
				"value": "Velocity"
			} ]
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Quelle des Templates, z.B. <ul><li> <b>header.template</b> oder kurz: <b>h.template</b> => Quelle ist das Headerfeld <b>template</b></li><li><b>property.template</b> oder kurz <b>p.template</b> =>  Quelle ist Property <b>template</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Source of the template, e.g. <ul><li> <b>header.template</b> or short: <b>h.template</b> => Source is the headerfield <b>template</b></li><li><b>property.template</b> or short <b>p.template</b> => Source is property <b>template</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.odf</b> oder kurz: <b>h.odf</b> => Ziel ist das Headerfeld <b>odf</b></li><li><b>property.odf</b> oder kurz <b>p.odf</b> => Ziel ist Property <b>odf</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.odf</b> or short: <b>h.odf</b> => Destination is headerfield <b>odf</b></li><li><b>property.odf</b> or short <b>p.odf</b> Destination is property <b>odf</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_outputformat",
			"title": "Outputformat",
			"type": "Choice",
			"value": "odf",
			"items": [ {
				"id": "c1",
				"title": "ODF",
				"value": "odf"
			}, {
				"id": "c2",
				"title": "PDF",
				"value": "pdf"
			} ]
		}, {
			"id": "uriparam_headerfields",
			"title_de": "Headerfelder",
			"title": "Headerfields",
			"description_de": "<b>Deprecated, use assignments! </b><br> Angebene Headerfelder in das Datenmodell des Reports kopieren, oder alle wenn nichts angeben ist.<br/>Komma getrennt.<ul><li>Maps werden ohne Headernamen ins Datenmodell übernommen, dataModel.putAll(Map).</li> <li>Maps werden unter dem Headernamen ins Datenmodell übernommen,wenn der Modifier :asMap angegehängt ist, dataModel.put(headerName, Map).</li><li>Alles andere wird unter dem Headernamen gespeichert,<br/> dataModel.put(headername,List) oder dataModell.put(headername,String)</li></ul>",
			"description": "<b>Veraltet. Verwende \"Assignments\"! </b><br>  Copy specified headerfields into the data model of the report, or all if nothing is specified.<br/>separated by commas.<ul><li>Maps will be transferred to the data model without header name, dataModel.putAll(Map).</li> <li>Maps will be transferred to the data model with the header name,if the modifier :asMap is appended, dataModel.put(headerName, Map).</li> <li>Everything else is stored under the header name,<br/> dataModel.put(headername,List) or dataModell.put(headername,String)</li></ul>",
			"type": "String",
			"value": null,
			"readonly": false,
		} ]
	}, {
		"name": "templateProperties",
		"properties": [ {
			"id": "type_template",
			"type": "String",
			"value": "Template",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "template:${type}",
			"visible": false
		}, {
			"id": "urivalue_type",
			"title": "Enginetype",
			"title_de": "Type der Engine",
			"type": "Choice",
			"value": "groovy",
			"items": [ {
				"id": "c1",
				"title": "GroovyStreaming",
				"value": "groovy"
			}, {
				"id": "c2",
				"title": "GroovyMarkup",
				"value": "groovymarkup"
			}, {
				"id": "c3",
				"title": "Freemarker",
				"value": "freemarker"
			} ]
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Quelle des Templates, z.B. <ul><li> <b>header.template</b> oder kurz: <b>h.template</b> => Quelle ist das Headerfeld <b>template</b></li><li><b>property.template</b> oder kurz <b>p.template</b> =>  Quelle ist Property <b>template</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Source of the template, e.g. <ul><li> <b>header.template</b> or short: <b>h.template</b> => Source is the headerfield <b>template</b></li><li><b>property.template</b> or short <b>p.template</b> => Source is property <b>template</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.result</b> oder kurz: <b>h.result</b> => Ziel ist das Headerfeld <b>result</b></li><li><b>property.result</b> oder kurz <b>p.result</b> => Ziel ist Property <b>result</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.result</b> or short: <b>h.result</b> => Destination is headerfield <b>result</b></li><li><b>property.result</b> or short <b>p.result</b> Destination is property <b>result</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_headerfields",
			"title_de": "Headerfelder",
			"title": "Headerfields",
			"description_de": "<b>Veraltet. Verwende \"Assignments\"! </b><br> Angebene Headerfelder in das Datenmodell des Templates kopieren, oder alle wenn nichts angeben ist.<br/>Komma getrennt.<ul><li>Maps werden ohne Headernamen ins Datenmodell übernommen, dataModel.putAll(Map).</li> <li>Maps werden unter dem Headernamen ins Datenmodell übernommen,wenn der Modifier :asMap angegehängt ist, dataModel.put(headerName, Map).</li><li>Alles andere wird unter dem Headernamen gespeichert,<br/> dataModel.put(headername,List) oder dataModell.put(headername,String)</li></ul>",
			"description": "<b>Deprecated, use Assignments! </b> <br>Copy specified headerfields into the data model of the templates, or all if nothing is specified.<br/>separated by commas.<ul><li>Maps will be transferred to the data model without header name, dataModel.putAll(Map).</li> <li>Maps will be transferred to the data model with the header name,if the modifier :asMap is appended, dataModel.put(headerName, Map).</li><li>Everything else is stored under the header name,<br/> dataModel.put(headername,List) or dataModell.put(headername,String)</li></ul>",
			"type": "String",
			"value": null,
			"readonly": false
		} ]
	}, {
		"name": "zeebeProperties",
		"properties": [ {
			"id": "type_zeebe",
			"type": "String",
			"value": "Zeebe",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "zeebe:dummy",
			"visible": false
		}, {
			"id": "uriparam_operation",
			"title": "Operation",
			"title_de": "Operation",
			"type": "Choice",
			"value": "executeJobs",
			"items": [ {
				"id": "c1",
				"title": "publishEvents",
				"value": "publishEvents"
			}, {
				"id": "c2",
				"title": "executeJobs",
				"value": "executeJobs"
			} ],
			"visible": true
		}, {
			"id": "uriparam_events",
			"type": "MultiSelect",
			"config": [
				{"value":"instance_activating",      "label":"Instance activating"},
				{"value":"instance_activated",      "label":"Instance activated"},
				{"value":"instance_completed",      "label":"Instance completed"},
				{"value":"instance_terminated",     "label":"Instance terminated"},
				{"value":"job_created",             "label":"Job created"},
				{"value":"job_activated",           "label":"Job activated"},
				{"value":"job_failed",              "label":"Job failed"},
				{"value":"job_error_thrown",        "label":"Job error thrown"},
				{"value":"job_completed",           "label":"Job completed"},
				{"value":"job_canceled",            "label":"Job canceled"},
				{"value":"timer_created",           "label":"Timer created"},
				{"value":"timer_triggered",         "label":"Timer triggered"},
				{"value":"timer_canceled",          "label":"Timer canceled"},
				{"value":"message_published",       "label":"Message published"},
				{"value":"message_deleted",         "label":"Message deleted"},
				{"value":"messagesubscription_opened",       "label":"Messagesubscription opened"},
				{"value":"messagesubscription_closed",       "label":"Messagesubscription closed"},
				{"value":"messagesubscription_correlated",         "label":"Messagesubscription correlated"},
				{"value":"incident_created",        "label":"Incident created"},
				{"value":"incident_resolved",       "label":"Incident resolved"},
				{"value":"variable_created",        "label":"Variable created"},
				{"value":"variable_deleted",        "label":"Variable deleted"},
				{"value":"variable_updated",        "label":"Variable updated"}
			],
			"title": "Events",
			"title_de": "Ereignisse",
			"description": "Which events are to be published?",
			"description_de": "Welche Ereignisse sollen veröffentlicht werden?",
			"value": "",
			"visible": "uriparam_operation=='publishEvents'",
			"length": "50"
		}, {
			"id": "uriparam_includeExpr",
			"title": "Include Expression",
			"description": "An expression that determines whether an event is published:<br/>Variablen:     <br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"visible": "uriparam_operation== 'publishEvents'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_excludeExpr",
			"title": "Exclude Expression",
			"description": "An expression that determines whether an event is not published:<br/>Variablen: <br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"visible": "uriparam_operation== 'publishEvents'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_variableNames",
			"title": "VariableNames",
			"description_de": "VariableNames, die angefragt werden.Komma getrennt",
			"description": "VariableNames that are requested. separated by commas",
			"visible": "uriparam_operation== 'publishEvents'",
			"type": "String",
			"value": null,
			"readonly": false
    }, {
			"id": "uriparam_jobTypes",
      "visible": "uriparam_operation=='executeJobs'",
			"type": "String",
			"title": "JobTypes",
			"description": "Comma separated list of jobtypes",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_inputParameter",
			"type": "Complex",
			"title": "Input mapping",
			"value": "",
			"visible": "uriparam_operation=='executeJobs'",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "destname",
				"name": "Destinationname",
				"name_de": "Zielname",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "defaultvalue",
				"name_de": "Defaultwert",
				"name": "Defaultvalue",
				"type": "String",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "optional",
				"name_de": "Optional",
				"name": "Optional",
				"type": "boolean",
				"value": false,
				"width": 50,
				"optional": false
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 80,
				"optional": true
			}, {
				"id": "destination",
				"name": "Destination",
				"name_de": "Ziel",
				"readonly": false,
				"type": "Choice",
				"value": "property",
				"items": "###destination_items",
				"width": 80,
				"optional": true
			} ]
    }, {
			"id": "uriparam_outputParameter",
			"type": "Complex",
			"title": "Output mapping",
			"value": "",
			"visible": "uriparam_operation=='executeJobs'",
			"include": "stencil =='zeebeendpoint'",
			"readonly": false,
			"optional": true,
			"complexItems": [{
				"id": "source",
				"name": "Source",
				"readonly": false,
				"type": "Choice",
				"value": "property",
				"items": "###destination_items",
				"width": 80,
				"optional": true
			},{
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "destname",
				"name": "Destinationname",
				"name_de": "Zielname",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "defaultvalue",
				"name_de": "Defaultwert",
				"name": "Defaultvalue",
				"type": "String",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "optional",
				"name_de": "Optional",
				"name": "Optional",
				"type": "boolean",
				"value": false,
				"width": 50,
				"optional": false
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 80,
				"optional": true
			} ]
		} ]
	}, {
		"name": "processProperties",
		"properties": [ {
			"id": "type_process",
			"type": "String",
			"value": "Process",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "process:${operation}",
			"visible": false
		}, {
			"id": "urivalue_operation",
			"title": "Operation",
			"title_de": "Operation",
			"type": "Choice",
			"value": "sendSignalEvent",
			"items": [ {
				"id": "c1",
				"title": "sendSignalEvent",
				"value": "sendSignalEvent"
			}, {
				"id": "c2",
				"title": "sendMessageEvent",
				"value": "sendMessageEvent"
			}, {
				"id": "c3",
				"title": "sendSignalToReceiveTask",
				"value": "sendSignalToReceiveTask"
			}, {
				"id": "c4",
				"title": "startProcess",
				"value": "startProcess"
			}, {
				"id": "c5",
				"title": "getProcessVariables",
				"value": "getProcessVariables"
			}, {
				"id": "c6",
				"title": "queryProcessInstances",
				"value": "queryProcessInstances"
			}, {
				"id": "c7",
				"title": "queryTasks",
				"value": "queryTasks"
			}, {
				"id": "c8",
				"title": "getTaskVariables",
				"value": "getTaskVariables"
			}, {
				"id": "c9",
				"title": "executeTaskOperation",
				"value": "executeTaskOperation"
			}, {
				"id": "c10",
				"title": "publishEvents",
				"value": "publishEvents"
			}, {
				"id": "c11",
				"title": "deleteProcessInstance",
				"value": "deleteProcessInstance"
			}, {
				"id": "c12",
				"title": "setProcessVariables",
				"value": "setProcessVariables"
			} ],
			"visible": true
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"value": "-",
			"description": "Namespace where the process is",
			"description_de": "Namespace in dem der Prozess ist",
			"config": {
				type: "ms123.util.RepoList"
			},
			"type": "Combo",
			"items": [],
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_sendSignal",
			"visible": "urivalue_operation.startsWith('startProcess')",
			"description": "If the process is already running, then send a signal",
			"description_de": "Wenn der Prozess schon läuft, dann sende ein Signal",
			"type": "Boolean",
			"title": "Send signal",
			"title_de": "Sende Signal",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_signalName",
			"visible": "urivalue_operation.startsWith('sendSignalEvent') || uriparam_sendSignal",
			"type": "String",
			"title": "Signalname",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_checkAssignments",
			"visible": "urivalue_operation=='executeTaskOperation' && uriparam_taskOperation=='complete'",
			"description": "Allow only assignments that are defined in the Task Form.<br>In addition, the values are checked for plausibility.",
			"description_de": "Erlaube nur Zuweisungen die in der  Taskform definiert sind.<br>Außerdem werden die Werte auf Plausibilität überprüft.",
			"type": "Boolean",
			"title": "Check assignments",
			"title_de": "Zuweisungsprüfung",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_sendMessage",
			"visible": "urivalue_operation.startsWith('startProcess')",
			"description": "If the process is already running, then send a message",
			"description_de": "Wenn der Prozess schon läuft, dann sende eine Message",
			"type": "Boolean",
			"title": "Send message",
			"title_de": "Sende Message",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_messageName",
			"visible": "urivalue_operation.startsWith('sendMessageEvent') || uriparam_sendMessage",
			"type": "String",
			"title": "Messagename",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_deleteReason",
			"visible": "urivalue_operation.startsWith('deleteProcessInstance')",
			"type": "String",
			"title": "DeleteReason",
			"title_de": "Grund",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_businessKey",
			"visible": "!urivalue_operation.startsWith('publishEvents') && urivalue_operation!='queryTasks' && urivalue_operation!='getTaskVariables' && urivalue_operation!='executeTaskOperation'",
			"type": "String",
			"title": "BusinessKey",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_events",
			"type": "MultiSelect",
			"config": [
				{"value":"activity_cancelled",                     "label":"Activity cancelled"},
				{"value":"activity_compensate",                    "label":"Activity compensate"},
				{"value":"activity_completed",                     "label":"Activity completed"},
				{"value":"activity_error_received",                "label":"Activity error received"},
				{"value":"activity_message_received",              "label":"Activity message received"},
				{"value":"activity_signaled",                      "label":"Activity signaled"},
				{"value":"activity_started",                       "label":"Activity started"},
				{"value":"process_cancelled",                      "label":"Process cancelled"},
				{"value":"process_completed",                      "label":"Process completed"},
				{"value":"process_completed_with_error_end_event", "label":"Process completed with error end event"},
				{"value":"process_started",                        "label":"Process started"},
				{"value":"sequenceflow_taken",                     "label":"Sequenceflow taken"},
				{"value":"task_assigned",                          "label":"Task assigned"},
				{"value":"task_completed",                         "label":"Task completed"},
				{"value":"task_created",                           "label":"Task created"},
				{"value":"timer_fired",                            "label":"Timer fired"},
				{"value":"variable_created",                       "label":"Variable created"},
				{"value":"variable_deleted",                       "label":"Variable deleted"},
				{"value":"variable_updated",                       "label":"Variable updated"}
			],
			"title": "Events",
			"title_de": "Ereignisse",
			"description": "Which events are to be published?",
			"description_de": "Welche Ereignisse sollen veröffentlicht werden?",
			"value": "",
			"visible": "urivalue_operation=='publishEvents'",
			"length": "50"
		}, {
			"id": "uriparam_taskOperation",
			"visible": "urivalue_operation=='executeTaskOperation'",
			"type": "Choice",
			"title": "Operation",
			"title_de": "Operation",
			"prefix": "oryx",
			"value": "claim",
			"popular": false,
			"readonly": false,
			"optional": true,
			"items": [ {
				"id": "c1",
				"title": "claim",
				"value": "claim"
			}, {
				"id": "c2",
				"title": "unclaim",
				"value": "unclaim"
			}, {
				"id": "c3",
				"title": "complete",
				"value": "complete"
			}, {
				"id": "c4",
				"title": "assign",
				"value": "assign"
			}, {
				"id": "c5",
				"title": "setVariables",
				"value": "setVariables"
			} ]
		}, {
			"id": "uriparam_taskId",
			"visible": "urivalue_operation=='executeTaskOperation'",
			"type": "String",
			"title": "TaskId",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_metadata",
			"visible": "urivalue_operation.startsWith('getProcessVariables')",
			"description": "In addition to the data, deliver process metadata",
			"description_de": "Zusätzlich zu den eigentlichen Daten, Prozess Metadata zurückliefern",
			"type": "Boolean",
			"title": "With Metadata",
			"title_de": "Mit Metadata",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_headerFields",
			"title_de": "Headerfelder",
			"title": "Headerfields",
			"description_de": "<b>Veraltet. Verwende \"Assignments\"! </b><br>Angebene Headerfelder in den Variablenbereich des Prozesses kopieren, oder alle wenn nichts angeben ist.<br/>Komma getrennt.<ul><li>Maps werden ohne Headernamen ins Datenmodell übernommen, dataModel.putAll(Map).</li> <li>Maps werden unter dem Headernamen ins Datenmodell übernommen,wenn der Modifier :asMap angegehängt ist, dataModel.put(headerName, Map).</li><li>Alles andere wird unter dem Headernamen gespeichert,<br/> dataModel.put(headername,List) oder dataModell.put(headername,String)</li></ul>",
			"description": "<b>Deprecated, use Assignments! </b> <br>Copy specified headerfields into the variables space of the process, or all if nothing is specified.<br/>separated by commas.<ul><li>Maps will be transferred to the data model without header name, dataModel.putAll(Map).</li> <li>Maps will be transferred to the data model with the header name,if the modifier :asMap is appended, dataModel.put(headerName, Map).</li><li>Everything else is stored under the header name,<br/> dataModel.put(headername,List) or dataModell.put(headername,String)</li></ul>",
			"visible": "urivalue_operation!='getProcessVariables' && urivalue_operation!='publishEvents' && urivalue_operation!='queryProcessInstances' && urivalue_operation!='queryTasks' && urivalue_operation!='getTaskVariables' && (urivalue_operation!='executeTaskOperation' || uriparam_taskOperation!='complete')",
			"type": "String",
			"value": "-",
			"readonly": false
		}, {
			"id": "uriparam_variableNames",
			"title": "VariableNames",
			"description_de": "VariableNames, die angefragt werden.Komma getrennt. Wenn leer dann alle",
			"description": "VariableNames that are requested. separated by commas.if empty then alle",
			"visible": "urivalue_operation== 'queryProcessInstances' || urivalue_operation=='getProcessVariables' || urivalue_operation=='publishEvents' || urivalue_operation=='queryTasks' || urivalue_operation=='getTaskVariables'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_includeExpr",
			"title": "Include Expression",
			"description_de": "Ein Expression der bestimmt ob ein Event published wird:<br/>Variablen:      <br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"description": "An expression that determines whether an event is published:<br/>Variablen:     <br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"visible": "urivalue_operation== 'publishEvents'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_excludeExpr",
			"title": "Exclude Expression",
			"description_de": "Ein Expression der bestimmt ob ein Event nicht published wird:<br/>Variablen:<br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"description": "An expression that determines whether an event is not published:<br/>Variablen: <br/><ul><li>processDefinitionId</li><li>taskDefinitionKey</li><li>formKey</li></ul>",
			"visible": "urivalue_operation== 'publishEvents'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.html</b> oder kurz: <b>h.html</b> => Ziel ist das Headerfeld <b>html</b></li><li><b>property.html</b> oder kurz <b>p.html</b> => Ziel ist Property <b>html</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.html</b> or short: <b>h.html</b> => Destination is headerfield <b>html</b></li><li><b>property.html</b> or short <b>p.html</b> Destination is property <b>html</b></li><li> default is <b>body</b></li></ul>",
			"visible": "urivalue_operation== 'queryProcessInstances' || urivalue_operation=='getProcessVariables' || urivalue_operation=='startProcess' || urivalue_operation=='queryTasks' || urivalue_operation=='getTaskVariables'",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_assignments",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Assignments",
			"title_de": "Zuweisungen",
			"description": "Assigning message headers and properties to process variables.<br>Alternate to headerfields.<br><ul><li> <b>header.header1</b> or short: <b>h.header1</b> => Source is the headerfield <b>header1</b></li><li><b>property.prop1</b> or short <b>p.prop1</b> => Source is property <b>prop1</b></li>",
			"description_de": "Zuweisung von Message Headers und Properties zu Prozessvariablen. <br>Alternative zu Headerfields.<br><ul><li> <b>header.header1</b> oder kurz: <b>h.header1</b> => Quelle ist das Headerfeld <b>header1</b></li><li><b>property.prop1</b> oder kurz <b>p.prop1</b> =>  Quelle ist Property <b>prop1</b></li>",
			"visible": "urivalue_operation!='getProcessVariables' && urivalue_operation!='publishEvents' && urivalue_operation!='queryProcessInstances' && urivalue_operation!='queryTasks' && urivalue_operation!='getTaskVariables' && (urivalue_operation!='executeTaskOperation' || uriparam_taskOperation!='xomplete')",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "expr",
				"name_de": "Quell-Ausdruck",
				"name": "Source-Expression",
				"type": "String",
				"value": null,
				"width": 250
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 180
			}, {
				"id": "variable",
				"name_de": "Prozess/Taskvariable",
				"name": "Process/Taskvariable",
				"type": "String",
				"value": null,
				"width": 250
			}, {
				"id": "local",
				"name": "Scope",
				"name_de": "Scope",
				"type": "Choice",
				"value": "false",
				"items": "###yesno_items",
				"readonly": "urivalue_operation!='executeTaskOperation'",
				"width": 180
			} ]
		}, {
			"id": "uriparam_processCriteria",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Processcriteria",
			"title_de": "Prozesskriterien",
			"description": "Criteria of the process",
			"description_de": "Kriterien des Prozesses",
			"visible": "urivalue_operation!='publishEvents' && urivalue_operation!='queryTasks' && urivalue_operation!='getTaskVariables' && urivalue_operation!='executeTaskOperation'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "Choice",
				"value": "processDefinitionKey",
				"items": "###processcriteria_items",
				"width": 180
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		}, {
			"id": "uriparam_taskCriteria",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Taskcriteria",
			"title_de": "Taskkriterien",
			"description": "Criteria of  tasks, which are queried",
			"description_de": "Kriterien der Tasks, die abgefragt werden",
			"visible": "urivalue_operation=='queryTasks' || urivalue_operation=='getTaskVariables'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "Choice",
				"value": null,
				"items": "###taskcriteria_items",
				"width": 180
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		} ]
	}, {
		"name": "activitiProperties",
		"properties": [ {
			"id": "type_activiti",
			"type": "String",
			"value": "Workflow",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "activiti:${operation}",
			"visible": false
		}, {
			"id": "urivalue_operation",
			"title": "Operation",
			"title_de": "Operation",
			"type": "Choice",
			"value": "sendSignalEvent",
			"items": [ {
				"id": "c1",
				"title": "sendSignalEvent",
				"value": "sendSignalEvent"
			}, {
				"id": "c2",
				"title": "sendMessageEvent",
				"value": "sendMessageEvent"
			}, {
				"id": "c3",
				"title": "sendSignalToReceiveTask",
				"value": "sendSignalToReceiveTask"
			}, {
				"id": "c4",
				"title": "startProcess",
				"value": "startProcess"
			}, {
				"id": "c5",
				"title": "getProcessVariables",
				"value": "getProcessVariables"
			}, {
				"id": "c6",
				"title": "queryProcessInstances",
				"value": "queryProcessInstances"
			}, {
				"id": "c7",
				"title": "queryTasks",
				"value": "queryTasks"
			}, {
				"id": "c8",
				"title": "executeTaskOperation",
				"value": "executeTaskOperation"
			}, {
				"id": "c9",
				"title": "publishEvents",
				"value": "publishEvents"
			} ],
			"visible": true
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"value": "-",
			"description": "Namespace where the process is",
			"description_de": "Namespace in dem der Prozess ist",
			"config": {
				"type": "ms123.util.RepoList"
			},
			"type": "Combo",
			"items": [],
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_sendSignal",
			"visible": "urivalue_operation.startsWith('startProcess')",
			"description": "If the process is already running, then send a signal",
			"description_de": "Wenn der Prozess schon läuft, dann sende ein Signal",
			"type": "Boolean",
			"title": "Send signal",
			"title_de": "Sende Signal",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_signalName",
			"visible": "urivalue_operation.startsWith('sendSignalEvent') || uriparam_sendSignal",
			"type": "String",
			"title": "Signalname",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_checkAssignments",
			"visible": "urivalue_operation=='executeTaskOperation' && uriparam_taskOperation=='complete'",
			"description": "Allow only assignments that are defined in the Task Form.<br>In addition, the values are checked for plausibility.",
			"description_de": "Erlaube nur Zuweisungen die in der  Taskform definiert sind.<br>Außerdem werden die Werte auf Plausibilität überprüft.",
			"type": "Boolean",
			"title": "Check assignments",
			"title_de": "Zuweisungsprüfung",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_sendMessage",
			"visible": "urivalue_operation.startsWith('startProcess')",
			"description": "If the process is already running, then send a message",
			"description_de": "Wenn der Prozess schon läuft, dann sende eine Message",
			"type": "Boolean",
			"title": "Send message",
			"title_de": "Sende Message",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_messageName",
			"visible": "urivalue_operation.startsWith('sendMessageEvent') || uriparam_sendMessage",
			"type": "String",
			"title": "Messagename",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_businessKey",
			"visible": "!urivalue_operation.startsWith('publishEvents') && urivalue_operation!='queryTasks' && urivalue_operation!='executeTaskOperation'",
			"type": "String",
			"title": "BusinessKey",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_events",
			"type": "MultiSelect",
			"config": [
				{"value":"activity_cancelled",                     "label":"Activity cancelled"},
				{"value":"activity_compensate",                    "label":"Activity compensate"},
				{"value":"activity_completed",                     "label":"Activity completed"},
				{"value":"activity_error_received",                "label":"Activity error received"},
				{"value":"activity_message_received",              "label":"Activity message received"},
				{"value":"activity_signaled",                      "label":"Activity signaled"},
				{"value":"activity_started",                       "label":"Activity started"},
				{"value":"process_cancelled",                      "label":"Process cancelled"},
				{"value":"process_completed",                      "label":"Process completed"},
				{"value":"process_completed_with_error_end_event", "label":"Process completed with error end event"},
				{"value":"process_started",                        "label":"Process started"},
				{"value":"sequenceflow_taken",                     "label":"Sequenceflow taken"},
				{"value":"task_assigned",                          "label":"Task assigned"},
				{"value":"task_completed",                         "label":"Task completed"},
				{"value":"task_created",                           "label":"Task created"},
				{"value":"timer_fired",                            "label":"Timer fired"},
				{"value":"variable_created",                       "label":"Variable created"},
				{"value":"variable_deleted",                       "label":"Variable deleted"},
				{"value":"variable_updated",                       "label":"Variable updated"}
			],
			"title": "Events",
			"title_de": "Ereignisse",
			"description": "Which events are to be published?",
			"description_de": "Welche Ereignisse sollen veröffentlicht werden?",
			"value": "",
			"visible": "urivalue_operation=='publishEvents'",
			"length": "50"
		}, {
			"id": "uriparam_taskOperation",
			"visible": "urivalue_operation=='executeTaskOperation'",
			"type": "Choice",
			"title": "Operation",
			"title_de": "Operation",
			"prefix": "oryx",
			"value": "claim",
			"popular": false,
			"readonly": false,
			"optional": true,
			"items": [ {
				"id": "c1",
				"title": "claim",
				"value": "claim"
			}, {
				"id": "c2",
				"title": "unclaim",
				"value": "unclaim"
			}, {
				"id": "c3",
				"title": "complete",
				"value": "complete"
			}, {
				"id": "c4",
				"title": "assign",
				"value": "assign"
			}, {
				"id": "c5",
				"title": "setVariables",
				"value": "setVariables"
			} ]
		}, {
			"id": "uriparam_taskId",
			"visible": "urivalue_operation=='executeTaskOperation'",
			"type": "String",
			"title": "TaskId",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_metadata",
			"visible": "urivalue_operation.startsWith('getProcessVariables')",
			"description": "In addition to the data, deliver process metadata",
			"description_de": "Zusätzlich zu den eigentlichen Daten, Prozess Metadata zurückliefern",
			"type": "Boolean",
			"title": "With Metadata",
			"title_de": "Mit Metadata",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_headerFields",
			"title_de": "Headerfelder",
			"title": "Headerfields",
			"description_de": "<b>Veraltet. Verwende \"Assignments\"! </b><br>Angebene Headerfelder in den Variablenbereich des Prozesses kopieren, oder alle wenn nichts angeben ist.<br/>Komma getrennt.<ul><li>Maps werden ohne Headernamen ins Datenmodell übernommen, dataModel.putAll(Map).</li> <li>Maps werden unter dem Headernamen ins Datenmodell übernommen,wenn der Modifier :asMap angegehängt ist, dataModel.put(headerName, Map).</li><li>Alles andere wird unter dem Headernamen gespeichert,<br/> dataModel.put(headername,List) oder dataModell.put(headername,String)</li></ul>",
			"description": "<b>Deprecated, use Assignments! </b> <br>Copy specified headerfields into the variables space of the process, or all if nothing is specified.<br/>separated by commas.<ul><li>Maps will be transferred to the data model without header name, dataModel.putAll(Map).</li> <li>Maps will be transferred to the data model with the header name,if the modifier :asMap is appended, dataModel.put(headerName, Map).</li><li>Everything else is stored under the header name,<br/> dataModel.put(headername,List) or dataModell.put(headername,String)</li></ul>",
			"visible": "urivalue_operation!='getProcessVariables' && urivalue_operation!='publishEvents' && urivalue_operation!='queryProcessInstances' && urivalue_operation!='queryTasks' && (urivalue_operation!='executeTaskOperation' || uriparam_taskOperation=='complete')",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_variableNames",
			"title": "VariableNames",
			"description_de": "VariableNames, die angefragt werden.Komma getrennt. Wenn leer dann alle(nicht bei queryProcessInstances)",
			"description": "VariableNames that are requested. separated by commas.if empty then alle( not by queryProcessInstances)",
			"visible": "urivalue_operation== 'queryProcessInstances' || urivalue_operation=='getProcessVariables' || urivalue_operation=='publishEvents' && urivalue_operation!='queryTasks'",
			"type": "String",
			"value": null,
			"readonly": false
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.html</b> oder kurz: <b>h.html</b> => Ziel ist das Headerfeld <b>html</b></li><li><b>property.html</b> oder kurz <b>p.html</b> => Ziel ist Property <b>html</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.html</b> or short: <b>h.html</b> => Destination is headerfield <b>html</b></li><li><b>property.html</b> or short <b>p.html</b> Destination is property <b>html</b></li><li> default is <b>body</b></li></ul>",
			"visible": "urivalue_operation== 'queryProcessInstances' || urivalue_operation=='getProcessVariables' || urivalue_operation=='startProcess' || urivalue_operation=='queryTasks'",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_assignments",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Assignments",
			"title_de": "Zuweisungen",
			"description": "Assigning message headers and properties to process variables.<br>Alternate to headerfields.<br><ul><li> <b>header.header1</b> or short: <b>h.header1</b> => Source is the headerfield <b>header1</b></li><li><b>property.prop1</b> or short <b>p.prop1</b> => Source is property <b>prop1</b></li>",
			"description_de": "Zuweisung von Message Headers und Properties zu Prozessvariablen. <br>Alternative zu Headerfields.<br><ul><li> <b>header.header1</b> oder kurz: <b>h.header1</b> => Quelle ist das Headerfeld <b>header1</b></li><li><b>property.prop1</b> oder kurz <b>p.prop1</b> =>  Quelle ist Property <b>prop1</b></li>",
			"visible": "urivalue_operation!='getProcessVariables' && urivalue_operation!='publishEvents' && urivalue_operation!='queryProcessInstances' && urivalue_operation!='queryTasks' && (urivalue_operation!='executeTaskOperation' || uriparam_taskOperation=='complete')",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "expr",
				"name_de": "Quell-Ausdruck",
				"name": "Source-Expression",
				"type": "String",
				"value": null,
				"width": 250
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 180
			}, {
				"id": "variable",
				"name_de": "Prozessvariable",
				"name": "Processvariable",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		}, {
			"id": "uriparam_processCriteria",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Processcriteria",
			"title_de": "Prozesskriterien",
			"description": "Criteria of the process",
			"description_de": "Kriterien des Prozesses",
			"visible": "urivalue_operation!='publishEvents' && urivalue_operation!='queryTasks' && urivalue_operation!='executeTaskOperation'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "Choice",
				"value": "processDefinitionKey",
				"items": "###processcriteria_items",
				"width": 180
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		}, {
			"id": "uriparam_taskCriteria",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Taskcriteria",
			"title_de": "Taskkriterien",
			"description": "Criteria of  tasks, which are queried",
			"description_de": "Kriterien der Tasks, die abgefragt werden",
			"visible": "urivalue_operation=='queryTasks'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "Choice",
				"value": null,
				"items": "###taskcriteria_items",
				"width": 180
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		} ]
	}, {
		"name": "asciidoctorProperties",
		"properties": [ {
			"id": "type_asciidoctor",
			"type": "String",
			"value": "Asciidoctor",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "asciidoctor:dummy",
			"visible": false
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Quelle der Eingabe, z.B. <ul><li> <b>header.adoc</b> oder kurz: <b>h.adoc</b> => Quelle ist das Headerfeld <b>adoc</b></li><li><b>property.adoc</b> oder kurz <b>p.adoc</b> =>  Quelle ist Property <b>adoc</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Source of the input, e.g. <ul><li> <b>header.adoc</b> or short: <b>h.adoc</b> => Source is the headerfield <b>adoc</b></li><li><b>property.adoc</b> or short <b>p.adoc</b> => Source is property <b>adoc</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_output",
			"title": "Output",
			"title_de": "Ausgabe",
			"type": "Choice",
			"value": "html",
			"items": [ {
				"id": "c1",
				"title": "HTML",
				"value": "html"
			}, {
				"id": "c2",
				"title": "Docbook",
				"value": "docbook"
			} ],
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.html</b> oder kurz: <b>h.html</b> => Ziel ist das Headerfeld <b>html</b></li><li><b>property.html</b> oder kurz <b>p.html</b> => Ziel ist Property <b>html</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.html</b> or short: <b>h.html</b> => Destination is headerfield <b>html</b></li><li><b>property.html</b> or short <b>p.html</b> Destination is property <b>html</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_enclosingDiv",
			"title": "Enclosing div",
			"title_de": "Einschließendes Div",
			"description": "If HTML output, then  enclose the content with an extra div",
			"description_de": "Bei Html Ausgabe den Inhalt mit einen extra Div einschließen",
			"type": "boolean",
			"value": false,
			"visible": "uriparam_output=='html'"
		} ]
	}, {
		"name": "docbookProperties",
		"properties": [ {
			"id": "type_docbook",
			"type": "String",
			"value": "Docbook",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "docbook:dummy",
			"visible": false
		}, {
			"id": "uriparam_input",
			"title": "Input",
			"title_de": "Eingabe",
			"type": "Choice",
			"value": "docbook",
			"items": [ {
				"id": "c1",
				"title": "Docbook-xml",
				"value": "docbook"
			}, {
				"id": "c2",
				"title": "simpl4-Document",
				"value": "document"
			} ]
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Quelle der Eingabe, z.B. <ul><li> <b>header.docbook</b> oder kurz: <b>h.docbook</b> => Quelle ist das Headerfeld <b>docbook</b></li><li><b>property.docbook</b> oder kurz <b>p.docbook</b> =>  Quelle ist Property <b>docbook</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Source of the input, e.g. <ul><li> <b>header.docbook</b> or short: <b>h.docbook</b> => Source is the headerfield <b>docbook</b></li><li><b>property.docbook</b> or short <b>p.docbook</b> => Source is property <b>docbook</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_output",
			"title": "Output",
			"title_de": "Ausgabe",
			"type": "Choice",
			"value": "pdf",
			"items": [ {
				"id": "c1",
				"title": "PDF",
				"value": "pdf"
			} ]
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Ausgabe. z.B. <ul><li> <b>header.pdf</b> oder kurz: <b>h.pdf</b> => Ziel ist das Headerfeld <b>pdf</b></li><li><b>property.pdf</b> oder kurz <b>p.pdf</b> => Ziel ist Property <b>pdf</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the output. e.g. <ul><li> <b>header.pdf</b> or short: <b>h.pdf</b> => Destination is headerfield <b>pdf</b></li><li><b>property.pdf</b> or short <b>p.pdf</b> Destination is property <b>pdf</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"description": "optional",
			"config": {
				"type": "ms123.util.RepoList"
			},
			"type": "Choice",
			"value": null,
			"items": []
		}, {
			"id": "uriparam_headerfields",
			"title_de": "Headerfelder",
			"title": "Headerfields",
			"description_de": "<b>Veraltet. Verwende \"Assignments\"! </b><br>Angebene Headerfelder in das Datenmodell von Docbook kopieren, oder alle wenn nichts angeben ist.<br/>Komma getrennt.<ul><li>Maps werden ohne Headernamen ins Datenmodell übernommen, dataModel.putAll(Map).</li> <li>Maps werden unter dem Headernamen ins Datenmodell übernommen,wenn der Modifier :asMap angegehängt ist, dataModel.put(headerName, Map).</li><li>Alles andere wird unter dem Headernamen gespeichert,<br/> dataModel.put(headername,List) oder dataModell.put(headername,String)</li></ul>",
			"description": "<b>Deprecated, use Assignments! </b> <br>Copy specified headerfields into the data model of docbook, or all if nothing is specified.<br/>separated by commas.<ul><li>Maps will be transferred to the data model without header name, dataModel.putAll(Map).</li> <li>Maps will be transferred to the data model with the header name,if the modifier :asMap is appended, dataModel.put(headerName, Map).</li><li>Everything else is stored under the header name,<br/> dataModel.put(headername,List) or dataModell.put(headername,String)</li></ul>",
			"type": "String",
			"value": null,
			"visible": "uriparam_input=='document'",
			"readonly": false
		}, {
			"id": "uriparam_paper.type",
			"type": "Choice",
			"title": "Papertype",
			"title_de": "Papierformat",
			"prefix": "oryx",
			"value": "A4",
			"popular": false,
			"readonly": false,
			"optional": true,
			"visible": "uriparam_input=='docbook'",
			"refToView": "",
			"items": [ {
				"id": "c1",
				"title": "A4",
				"value": "A4",
				"refToView": ""
			}, {
				"id": "c2",
				"title": "USletter",
				"value": "USletter",
				"refToView": ""
			}, {
				"id": "c3",
				"title": "A5",
				"value": "A5",
				"refToView": ""
			}, {
				"id": "c4",
				"title": "A3",
				"value": "A3",
				"refToView": ""
			} ]
		}, {
			"id": "uriparam_page.orientation",
			"visible": "uriparam_input=='docbook'",
			"type": "Choice",
			"title": "Orientation",
			"title_de": "Orientierung",
			"prefix": "oryx",
			"value": "portrait",
			"popular": false,
			"readonly": false,
			"optional": true,
			"refToView": "",
			"items": [ {
				"id": "c1",
				"title": "Portrait",
				"value": "portrait",
				"refToView": ""
			}, {
				"id": "c2",
				"title": "Landscape",
				"value": "landscape",
				"refToView": ""
			} ]
		}, {
			"id": "uriparam_generate.toc",
			"visible": "uriparam_input=='docbook'",
			"type": "Text",
			"title": "generate.toc",
			"title_de": "Inhaltsverzeichnis",
			"prefix": "oryx",
			"value": null,
			"readonly": false,
			"optional": true
		}, {
			"id": "uriparam_l10n.gentext.language",
			"visible": "uriparam_input=='docbook'",
			"type": "Combo",
			"title": "Language",
			"title_de": "Sprache",
			"prefix": "oryx",
			"value": "de",
			"popular": false,
			"readonly": false,
			"optional": true,
			"items": [ {
				"id": "c1",
				"title": "de",
				"value": "de"
			}, {
				"id": "c2",
				"title": "en",
				"value": "en"
			}, {
				"id": "c3",
				"title": "it",
				"value": "it"
			}, {
				"id": "c4",
				"title": "es",
				"value": "es"
			}, {
				"id": "c4",
				"title": "fr",
				"value": "fr"
			} ]
		}, {
			"id": "uriparam_body.font.master",
			"visible": "uriparam_input=='docbook'",
			"type": "Combo",
			"title": "Basic fontsize",
			"title_de": "Basisfontgröße",
			"prefix": "oryx",
			"value": "8",
			"popular": false,
			"readonly": false,
			"optional": true,
			"refToView": "",
			"items": [ {
				"id": "c1",
				"title": "8",
				"value": "8",
				"refToView": ""
			}, {
				"id": "c2",
				"title": "9",
				"value": "9",
				"refToView": ""
			}, {
				"id": "c3",
				"title": "10",
				"value": "10",
				"refToView": ""
			}, {
				"id": "c4",
				"title": "11",
				"value": "11",
				"refToView": ""
			}, {
				"id": "c5",
				"title": "12",
				"value": "12",
				"refToView": ""
			} ]
		}, {
			"id": "uriparam_page.margin.top",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "page.margin.top",
			"title_de": "Seitenabstand(o.)",
			"prefix": "oryx",
			"value": "5mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_body.margin.top",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "body.margin.top",
			"title_de": "Textabstand(o.)",
			"prefix": "oryx",
			"value": "20mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_region.before.extent",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "page.margin.top",
			"title_de": "Texthöhe(o.)",
			"prefix": "oryx",
			"value": "0mm",
			"readonly": false,
			"include": false,
			"length": "50"
		}, {
			"id": "uriparam_page.margin.bottom",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "page.margin.bottom",
			"title_de": "Seitenabstand(u.)",
			"prefix": "oryx",
			"value": "5mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_body.margin.bottom",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Textabstand(unten)",
			"title_de": "Textabstand(u.)",
			"prefix": "oryx",
			"value": "20mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_region.after.extent",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Texthöhe(unten)",
			"title_de": "Texthöhe(u.)",
			"prefix": "oryx",
			"value": "20mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_page.margin.inner",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Left margin",
			"title_de": "Linker Rand",
			"prefix": "oryx",
			"value": "20mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_page.margin.outer",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Right margin",
			"title_de": "Rechter Rand",
			"prefix": "oryx",
			"value": "20mm",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_table.frame.border.color",
			"visible": "uriparam_input=='docbook'",
			"type": "Color",
			"title": "Framecolor",
			"title_de": "Rahmenfarbe",
			"prefix": "oryx",
			"value": "#777777",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_table.frame.border.thickness",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Framethickness",
			"title_de": "Rahmenstärke",
			"prefix": "oryx",
			"value": "0.4pt",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_table.frame.border.style",
			"visible": "uriparam_input=='docbook'",
			"type": "Choice",
			"title": "Framestyle",
			"title_de": "Rahmenstyle",
			"prefix": "oryx",
			"value": "solid",
			"popular": false,
			"readonly": false,
			"optional": true,
			"refToView": "",
			"items": [ {
				"id": "c1",
				"title": "Solid",
				"value": "solid",
				"refToView": ""
			}, {
				"id": "c2",
				"title": "Dotted",
				"value": "dotted",
				"refToView": ""
			}, {
				"id": "c3",
				"title": "Dashed",
				"value": "dashed",
				"refToView": ""
			}, {
				"id": "c4",
				"title": "Double",
				"value": "double",
				"refToView": ""
			}, {
				"id": "c5",
				"title": "Ridge",
				"value": "ridge",
				"refToView": ""
			}, {
				"id": "c6",
				"title": "Groove",
				"value": "groove",
				"refToView": ""
			}, {
				"id": "c7",
				"title": "Outset",
				"value": "outset",
				"refToView": ""
			}, {
				"id": "c8",
				"title": "Inset",
				"value": "inset",
				"refToView": ""
			} ]
		}, {
			"id": "uriparam_table.cell.border.color",
			"visible": "uriparam_input=='docbook'",
			"type": "Color",
			"title": "Cellcolor",
			"title_de": "Zellenrahmenfarbe",
			"prefix": "oryx",
			"value": "#777777",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_table.cell.border.thickness",
			"visible": "uriparam_input=='docbook'",
			"type": "String",
			"title": "Cellthickness",
			"title_de": "Zellenrahmenstärke",
			"prefix": "oryx",
			"value": "0.4pt",
			"readonly": false,
			"optional": true,
			"length": "50"
		}, {
			"id": "uriparam_table.cell.border.style",
			"visible": "uriparam_input=='docbook'",
			"type": "Choice",
			"title": "Tablecellestyle",
			"title_de": "Zellenrahmenstyle",
			"prefix": "oryx",
			"value": "solid",
			"popular": false,
			"readonly": false,
			"optional": true,
			"refToView": "",
			"items": [ {
				"id": "c1",
				"title": "Solid",
				"value": "solid",
				"refToView": ""
			}, {
				"id": "c2",
				"title": "Dotted",
				"value": "dotted",
				"refToView": ""
			}, {
				"id": "c3",
				"title": "Dashed",
				"value": "dashed",
				"refToView": ""
			}, {
				"id": "c4",
				"title": "Double",
				"value": "double",
				"refToView": ""
			}, {
				"id": "c5",
				"title": "Ridge",
				"value": "ridge",
				"refToView": ""
			}, {
				"id": "c6",
				"title": "Groove",
				"value": "groove",
				"refToView": ""
			}, {
				"id": "c7",
				"title": "Outset",
				"value": "outset",
				"refToView": ""
			}, {
				"id": "c8",
				"title": "Inset",
				"value": "inset",
				"refToView": ""
			} ]
		} ]
	}, {
		"name": "execProperties",
		"properties": [ {
			"id": "type_exec",
			"type": "String",
			"value": "EXEC",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "exec:${executable}",
			"visible": false
		}, {
			"id": "urivalue_executable",
			"title": "Executable",
			"type": "string",
			"description": "where executable is the name, or file path, of the system command that will be executed.<br />If executable name is used (e.g. exec:java), the executable must in the system path.",
			"value": "",
			"optional": false,
			"visible": true
		}, {
			"id": "uriparam_args",
			"title_de": "Argumente",
			"title": "Arguments",
			"description": "The arguments of the executable.<br /> The arguments may be one or many whitespace-separated tokens,that can be quoted with <br />\" - e.g. args=\"arg 1\" arg2 will use two arguments arg 1 and arg2.<br />To include the quotes use \"\" - e.g. args=\"\"arg 1\"\" arg2 will use the arguments \"arg 1\" and arg2.",
			"optional": false,
			"type": "string",
			"value": null
		}, {
			"id": "uriparam_workingDir",
			"title_de": "Arbeitsverzeichnis",
			"title": "Workingdirectory",
			"description": "The directory in which the command should be executed.<br />If null, the working directory of the current process will be used.",
			"optional": false,
			"type": "string",
			"value": null
		}, {
			"id": "uriparam_outFile",
			"title_de": "Ausgabedatei",
			"title": "Outputfile",
			"description": "The name of a file, created by the executable, that should be considered as its output.<br />If no outFile is set, the standard output (stdout) of the executable will be used instead.",
			"optional": false,
			"type": "string",
			"value": null
		} ]
	}, {
		"name": "quartzProperties",
		"properties": [ {
			"id": "type_quartz",
			"type": "String",
			"value": "QUARTZ",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "quartz2:dummy",
			"visible": false
		}, {
			"id": "uriparam_cron",
			"title": "Cron",
			"type": "string",
			"description": "<b>Specifies a cron expression</b><br />0 0 12 * * ?  Fire at 12:00 PM (noon) every day <br />0 15 10 ? * * Fire at 10:15 AM every day <br />0 15 10 * * ? Fire at 10:15 AM every day <br />0 15 10 * * ? * Fire at 10:15 AM every day <br />0 15 10 * * ? 2005  Fire at 10:15 AM every day during the year 2005 <br />0 * 14 * * ?  Fire every minute starting at 2:00 PM and ending at 2:59 PM, every day <br />0 0/5 14 * * ?  Fire every 5 minutes starting at 2:00 PM and ending at 2:55 PM, every day <br />0 0/5 14,18 * * ? Fire every 5 minutes starting at 2:00 PM and ending at 2:55 PM, AND fire every 5 minutes starting at 6:00 PM and ending at 6:55 PM, every day <br />0 0-5 14 * * ?  Fire every minute starting at 2:00 PM and ending at 2:05 PM, every day <br />0 10,44 14 ? 3 WED  Fire at 2:10 PM and at 2:44 PM every Wednesday in the month of March <br />0 15 10 ? * MON-FRI Fire at 10:15 AM every Monday, Tuesday, Wednesday, Thursday and Friday <br />0 15 10 15 * ?  Fire at 10:15 AM on the 15th day of every month <br />0 15 10 L * ? Fire at 10:15 AM on the last day of every month <br />0 15 10 ? * 6L  Fire at 10:15 AM on the last Friday of every month <br />0 15 10 ? * 6L  Fire at 10:15 AM on the last Friday of every month <br />0 15 10 ? * 6L 2002-2005  Fire at 10:15 AM on every last friday of every month during the years 2002, 2003, 2004, and 2005 <br />0 15 10 ? * 6#3 Fire at 10:15 AM on the third Friday of every month <br />0 0 12 1/5 * ?  Fire at 12 PM (noon) every 5 days every month, starting on the first day of the month <br />0 11 11 11 11 ? Fire every November 11 at 11:11 AM",
			"value": "",
			"optional": false,
			"visible": true
		}, {
			"id": "uriparam_trigger.repeatCount",
			"title_de": "Wiederholungen",
			"title": "Repeat count",
			"description": "How many times should the timer repeat?",
			"optional": false,
			"type": "Integer",
			"value": 0
		}, {
			"id": "uriparam_trigger.repeatInterval",
			"title": "Repeat interval",
			"description": "The amount of time in milliseconds between repeated triggers.",
			"optional": false,
			"type": "Integer",
			"value": 0
		} ]
	}, {
		"name": "sqlProperties",
		"properties": [ {
			"id": "type_sql",
			"type": "String",
			"value": "SQL",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "sql://${statement}",
			"visible": false
		}, {
			"id": "urivalue_statement",
			"title": "SQL Statement",
			"type": "text",
			"value": "",
			"optional": false,
			"visible": true
		}, {
			"id": "uriparam_dataSource",
			"title": "Datasource",
			"description": "Reference to a DataSource",
			"description_de": "Referenz zur Datenquelle",
			"optional": false,
			"type": "string",
			"value": null
		}, {
			"id": "uriparam_template.maxRows",
			"title": "Max. rows",
			"title_de": "Max. Zeilen",
			"description": "Set the maximum number of rows",
			"description_de": "Maximale Anzahl Zeilen",
			"type": "Integer",
			"value": null
		}, {
			"id": "uriparam_outputClass",
			"title": "OutputClass",
			"description": "Fill this object with values from resultset.one line per object",
			"type": "string",
			"value": null
		} ]
	}, {
		"name": "localdataProperties",
		"properties": [ {
			"id": "type_localdata",
			"type": "String",
			"value": "Localdata",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
     "id": "uriparam_orientdb",
     "title": "OrientDb",
     "title_de": "OrientDb",
     "type": "boolean",
     "value": false
   }, {
			"id": "uri_template",
			"type": "String",
			"value": "localdata:${operation}",
			"visible": false
		}, {
			"id": "urivalue_operation",
			"title": "Operation",
			"title_de": "Operation",
			"description_de": "Folgende Operationen sind verfügbar:<ul><li>findBy [ Id | Filter | Where | Criteria ] → finde Objekte, das Ergebnis ist immer eine Liste</li><li>deleteBy [ Id | Filter | Where | Criteria ] → lösche Objekte</li><li>updateBy [ Id | Filter | Where | Criteria ] → update Objekte</li><li>upsertBy [ Id | Filter | Where | Criteria ] → Eine Kombination zwischen insert und update, wenn ein Objekt existiert, wird  'update' ausgeführt, andererseits 'insert'</li><li>insert → Erzeuge ein neues Objekt</li><li>findOneBy [ Id | Filter | Where | Criteria ] → Finde ein Objekt, gibt es mehr als eins ,wird das erste Gefundene zurückgeliefert</li></ul>",
			"description": "Following operation are available<ul><li>findBy [ Id | Filter | Where | Criteria ] → find object(s), the result is always a list</li><li>deleteBy [ Id | Filter | Where | Criteria ] → delete object(s)</li><li>updateBy [ Id | Filter | Where | Criteria ] → update object(s)</li><li>upsertBy [ Id | Filter | Where | Criteria ] → combination between insert and update, if an object exists perform 'update', otherwise 'insert'</li><li>insert → insert a new object</li><li>findOneBy [ Id | Filter | Where | Criteria ] → find one object, if more objects exists, the first is returned</li></ul>",
			"type": "Choice",
			"value": "insert",
			"items": [ {
				"id": "c1",
				"title": "Insert",
				"value": "insert"
			}, {
				"id": "c2",
				"title": "UpdateById",
				"value": "updateById"
			}, {
				"id": "c2",
				"title": "UpdateByFilter",
				"value": "updateByFilter"
			}, {
				"id": "c2",
				"title": "UpdateByWhere",
				"value": "updateByWhere"
			}, {
				"id": "c2",
				"title": "UpdateByCriteria",
				"value": "updateByCriteria"
			}, {
				"id": "c3",
				"title": "UpsertById",
				"value": "upsertById"
			}, {
				"id": "c3",
				"title": "UpsertByFilter",
				"value": "upsertByFilter"
			}, {
				"id": "c3",
				"title": "UpsertByWhere",
				"value": "upsertByWhere"
			}, {
				"id": "c3",
				"title": "UpsertByCriteria",
				"value": "upsertByCriteria"
			}, {
				"id": "c4",
				"title": "DeleteById",
				"value": "deleteById"
			}, {
				"id": "c4",
				"title": "DeleteByFilter",
				"value": "deleteByFilter"
			}, {
				"id": "c4",
				"title": "DeleteByWhere",
				"value": "deleteByWhere"
			}, {
				"id": "c4",
				"title": "DeleteByCriteria",
				"value": "deleteByCriteria"
			}, {
				"id": "c5",
				"title": "FindById",
				"value": "findById"
			}, {
				"id": "c6",
				"title": "FindByFilter",
				"value": "findByFilter"
			}, {
				"id": "c6",
				"title": "FindByWhere",
				"value": "findByWhere"
			}, {
				"id": "c6",
				"title": "FindByCriteria",
				"value": "findByCriteria"
			}, {
				"id": "c7",
				"title": "FindOneById",
				"value": "findOneById"
			}, {
				"id": "c7",
				"title": "FindOneByFilter",
				"value": "findOneByFilter"
			}, {
				"id": "c7",
				"title": "FindOneByWhere",
				"value": "findOneByWhere"
			}, {
				"id": "c7",
				"title": "FindOneByCriteria",
				"value": "findOneByCriteria"
			}, {
				"id": "c8",
				"title": "MultiInsertUpdate",
				"value": "multiInsertUpdate"
			} ],
			"visible": true
		}, {
			"id": "uriparam_relation",
			"title": "Relation",
			"title_de": "Relation",
			"config": {
				type: "ms123.util.RelationList"
			},
			"type": "Choice",
			"value": null,
			"items": [],
			"visible": "urivalue_operation=='multiInsertUpdate'"
		}, {
			"id": "uriparam_lookupRelationObjectExpr",
			"title": "Object lookup",
			"title_de": "Objekt lookup",
			"description_de": "Relation Objekt lookup, Möglichkeiten der Eingabe<ul><li>feldname: Bei einem Feld muß das Vergleichsfeld in Parent und Child gleich sein </li><li>parentfeld,childfeld</li><li>countryId==${countryId}: JDO-Filterausdruck</li></ul>",
			"description": "Relation object lookup, ways of entering<ul><li>fieldname: One field, comparison field has the same name in parent and child</li><li>parentfield,childfield</li><li>countryId==${countryId}: JDO-Filterexpression</li></ul>",
			"type": "String",
			"value": null,
			"visible": "urivalue_operation=='multiInsertUpdate' && uriparam_relation!='-'"
		}, {
			"id": "isupdate",
			"title": "Update",
			"title_de": "Update",
			"description": "<b>Update Object</b>, when exist, insteed create always a new one",
			"description_de": "<b>Update Objekt</b>, wenn vorhanden, ansonsten erzeuge immer ein Neues",
			"type": "boolean",
			"value": false,
			"visible": "urivalue_operation=='multiInsertUpdate'"
		}, {
			"id": "uriparam_lookupUpdateObjectExpr",
			"title": "Object lookup",
			"title_de": "Objekt lookup",
			"description_de": "Update Objekt lookup:, Möglichkeiten der Eingabe<ul><li>Feldname</li><li>JDO-Filterausdruck<br/>Integer: <b>countryId==${countryId}</b><br/>String: <b>countryId=='${countryId}'</b></li></ul>",
			"description": "Update object lookup:, ways of entering<ul><li>Fieldname</li><li>JDO-Filterexpression<br/>Integer: <b>countryId==${countryId}</b><br/> String: <b>countryId=='${countryId}'</b></li></ul>",
			"type": "String",
			"value": "",
			"visible": "urivalue_operation=='multiInsertUpdate' && isupdate==true"
		}, {
			"id": "uriparam_noUpdate",
			"title": "No update",
			"title_de": "Kein update",
			"description_de": "Vorhandene Objekte nicht updaten, nur neue Objekte erzeugen",
			"description": "Not update existing objects, create new objects only",
			"type": "boolean",
			"value": false,
			"visible": "urivalue_operation=='multiInsertUpdate' && isupdate==true"
		}, {
			"id": "uriparam_list",
			"title": "Multiple objects(List)",
			"title_de": "Eine Liste von Objekten",
			"description": "Inserting multiple objects.",
			"type": "boolean",
			"value": false,
			"visible": "urivalue_operation=='insert'"
		}, {
			"id": "uriparam_namespace",
			"title": "Namespace",
			"description": "optional",
			"config": {
				type: "ms123.util.RepoList"
			},
			"type": "Combo",
			"value": null,
			"items": []
		}, {
			"id": "uriparam_pack",
			"title": "Package",
			"description": "If empty, then the package \"data\" or in case of orientdb \"odata\" is used",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "Ort der  Daten für update,insert oder upsert?, z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Quelle ist das Headerfeld <b>data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> =>  Quelle ist Property <b>data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Location of the data for update,insert or upsert?, e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Source is the headerfield <b>data</b></li><li><b>property.data</b> or short <b>p.data</b> => Source is property <b>data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "urivalue_operation=='insert' || urivalue_operation.startsWith('updateBy') || urivalue_operation.startsWith('upsert') || urivalue_operation=='multiInsertUpdate'"
		}, {
			"id": "uriparam_entityType",
			"title": "Entitytype",
			"title_de": "Entitätstyp",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "urivalue_operation=='insert' || urivalue_operation.startsWith('updateBy') || urivalue_operation.startsWith('upsert') || urivalue_operation.startsWith('delete') ||  urivalue_operation.startsWith('find')"
		}, {
			"id": "uriparam_filterName",
			"title": "Filtername",
			"description_de": "Der Filter der ausgeführt werden soll",
			"description": "The filter to be executed",
			"type": "ResourceSelector",
			"config": {
				"type": "sw.filter",
				 "namespace":"${uriparam_namespace}",
				"prefix": ""
			},
			"optional": false,
			"value": null,
			"visible": "urivalue_operation=='findOneByFilter' || urivalue_operation=='findByFilter' || urivalue_operation=='findOneByFilter' || urivalue_operation=='updateByFilter' || urivalue_operation=='upsertByFilter' || urivalue_operation=='deleteByFilter'"
		}, {
			"id": "uriparam_filterParameter",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Filterparameter",
			"description": "Filterparameter.<br/>Examples:<table><tr><th>Name</th><th>Value</th><tr><td>belegnr</td><td>p.prop1</td></tr>",
			"description_de": "Filterparameter. <br/>Examples:<table><tr><th>Name</th><th>Value</th><tr><td>belegnr</td><td>p.prop1</td></tr>",
			"visible": "urivalue_operation=='findOneByFilter' || urivalue_operation=='findByFilter' || urivalue_operation=='findOneByFilter' || urivalue_operation=='updateByFilter' || urivalue_operation=='upsertByFilter' || urivalue_operation=='deleteByFilter'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "String",
				"value": null,
				"width": 180
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 250
			} ]
		}, {
			"id": "uriparam_objectId",
			"title": "ObjectId",
			"title_de": "ObjectId",
			"description_de": "Wo ist die objectId? z.B. <ul><li> <b>header.objectId</b> oder kurz: <b>h.objectId</b></li><li><b>property.objectId</b> oder kurz <b>p.objectId</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Where is the objectId? e.g. <ul><li> <b>header.objectId</b> or short: <b>h.objectId</b></li><li><b>property.objectId</b> or short <b>p.objectId</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "urivalue_operation=='updateById' || urivalue_operation=='upsertById' || urivalue_operation=='deleteById' ||  urivalue_operation=='findById' || urivalue_operation=='findOneById'"
		}, {
			"id": "uriparam_where",
			"title": "Where",
			"title_de": "Where",
			"description_de": "Die komplete where clause. Beispiel: <br/> <b>belegnr == '${p.item.belegnr}' && nr == '${p.item.nr}'</b>",
			"description": "The complete where clause. Example: belegnr == '${p.item.belegnr}' && nr == '${p.item.nr}'",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "urivalue_operation=='updateByWhere' || urivalue_operation=='upsertByWhere' || urivalue_operation=='deleteByWhere' ||  urivalue_operation=='findByWhere' || urivalue_operation=='findOneByWhere'"
		}, {
			"id": "uriparam_objectCriteria",
			"type": "Complex",
			"config": {
				"asArray": true,
				"namespace": "${uriparam_namespace}"
			},
			"title": "Objectcriteria",
			"title_de": "Objektkriterien",
			"description": "Criteria of  the object.Alternate for ObjectId or complete WhereClause<br/>Examples:<table><tr><th>Name</th><th>Operator</th><th>Value</th><tr><td>belegnr</td><td>==</td><td>p.prop1</td></tr>",
			"description_de": "Kriterien des Objekts. Alternative für ObjectId oder der kompletter WhereClause.<br/>Examples:<table><tr><th>Name</th><th>Operator</th><th>Value</th><tr><td>belegnr</td><td>==</td><td>p.prop1</td></tr>",
			"visible": "urivalue_operation=='updateByCriteria' || urivalue_operation=='upsertByCriteria' || urivalue_operation=='deleteByCriteria' ||  urivalue_operation=='findByCriteria'  ||  urivalue_operation=='findOneByCriteria'",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"name_de": "Name",
				"readonly": false,
				"type": "String",
				"value": null,
				"width": 180
			}, {
				"id": "op",
				"name": "Operator",
				"name_de": "Operator",
				"readonly": false,
				"type": "Choice",
				"value": null,
				"items": "###objectcriteria_operations",
				"width": 200
			}, {
				"id": "value",
				"name_de": "Wert",
				"name": "Value",
				"type": "String",
				"value": null,
				"width": 350
			} ]
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel des Ergebnisses. z.B. <ul><li> <b>header.result</b> oder kurz: <b>h.result</b> => Ziel ist das Headerfeld <b>result</b></li><li><b>property.result</b> oder kurz <b>p.result</b> => Ziel ist Property <b>result</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the result. e.g. <ul><li> <b>header.result</b> or short: <b>h.result</b> => Destination is headerfield <b>result</b></li><li><b>property.result</b> or short <b>p.result</b> Destination is property <b>result</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "urivalue_operation.startsWith('find')"
		} ]
	}, {
		"name": "repoProperties",
		"properties": [ {
			"id": "type_repo",
			"type": "String",
			"value": "Repo",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "repo:${operation}",
			"visible": false
		}, {
			"id": "urivalue_operation",
			"title": "Operation",
			"title_de": "Operation",
			"type": "Choice",
			"value": "get",
			"items": [ {
				"id": "c1",
				"title": "Get",
				"value": "get"
			} ],
			"visible": true
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Datei. z.B. <ul><li> <b>header.content</b> oder kurz: <b>h.content</b> => Ziel ist das Headerfeld <b>content</b></li><li><b>property.content</b> oder kurz <b>p.content</b> => Ziel ist Property <b>content</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of file. e.g. <ul><li> <b>header.content</b> or short: <b>h.content</b> => Destination is headerfield <b>content</b></li><li><b>property.content</b> or short <b>p.content</b> Destination is property <b>content</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "urivalue_operation=='get'"
		}, {
			"id": "uriparam_repo",
			"title": "Reponame",
			"config": {
				type: "ms123.util.RepoList"
			},
			"type": "Combo",
			"value": null,
			"items": [],
			"visible": true
		}, {
			"id": "uriparam_path",
			"title": "Path",
			"title_de": "Pfad",
			"description": "Name or path of the file",
			"description_de": "Name oder Pfad der Datei",
			"type": "String",
			"value": "",
			"visible": true
		}, {
			"id": "uriparam_type",
			"title": "Type",
			"title_de": "Typ",
			"description": "Type of the file",
			"description_de": "Typ der Datei",
			"type": "Choice",
			"value": "all",
			"items": [ {
				"id": "c1",
				"title": "Opendocument-text",
				"value": "application/vnd.oasis.opendocument.text"
			}, {
				"id": "c2",
				"title": "Asciidoc",
				"value": "text/x-asciidoc"
			}, {
				"id": "c3",
				"title": "JSON",
				"value": "application/json"
			}, {
				"id": "c4",
				"title": "all",
				"title_de": "alle",
				"value": "all"
			} ],
			"visible": true
		} ]
	}, {
		"name": "fileProperties",
		"properties": [ {
			"id": "type_file",
			"type": "String",
			"value": "File",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "file:${path}",
			"visible": false
		}, {
			"id": "urivalue_path",
			"title": "Path",
			"title_de": "Pfad",
			"type": "String",
			"value": "",
			"optional": false,
			"visible": true
		} ]
	}, {
		"name": "commonFileProperties",
		"properties": [ {
			"id": "uriparam_fileName",
			"title": "Filename",
			"title_de": "Dateiname",
			"description": "Use Expression such ${property.fileName}.Where \"fileName\" is a property set in the header",
			"type": "String",
			"value": "",
			"visible": true
		}, {
			"id": "uriparam_charset",
			"type": "Combo",
			"title": "Encoding",
			"description": "specify the encoding of the file",
			"value": "",
			"items": [ {
				"id": "c1",
				"value": "x",
				"title": ""
			}, {
				"id": "c2",
				"value": "UTF-8",
				"title": "UTF-8"
			}, {
				"id": "c3",
				"value": "ISO-8859-15",
				"title": "ISO-8859-15"
			} ]
		}, {
			"id": "uriparam_delete",
			"title": "Delete",
			"title_de": "Entfernen",
			"description": "If true, the file will be deleted after it is processed successfully.",
			"type": "boolean",
			"value": false,
			"visible": true
		}, {
			"id": "uriparam_recursive",
			"title": "Recursive",
			"title_de": "Rekursiv",
			"description": "If a directory, will look for files in all the sub-directories as well.",
			"type": "boolean",
			"value": false,
			"visible": true
		}, {
			"id": "uriparam_noop",
			"title": "Noop",
			"title_de": "Noop",
			"description": "If true, the file is not moved or deleted in any way",
			"type": "boolean",
			"value": false
		}, {
			"id": "uriparam_flatten",
			"title": "Flatten",
			"description": "Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name",
			"type": "boolean",
			"value": false
		}, {
			"id": "uriparam_autoCreate",
			"title": "Autocreate",
			"description": "Automatically create missing directories in the file's pathname",
			"type": "boolean",
			"value": true
		}, {
			"id": "uriparam_consumer.delay",
			"title": "Delay(milliSec)",
			"title_de": "Verzögerung(milliSec)",
			"description": "Milliseconds before the next poll of the file/directory.",
			"type": "string",
			"value": "5000"
		}, {
			"id": "uriparam_moveFailed",
			"title": "MoveFailed",
			"description": "Expression (such as File Language) used to dynamically set a different target directory<br/> when moving files in case of processing (configured via move defined above) failed.<br/>For example, to move files into a .error subdirectory use: .error.<br/>Note: When moving the files to the “fail” location<br/> Camel will handle the error and will not pick up the file again.",
			"type": "string",
			"value": ".error"
		}, {
			"id": "uriparam_antInclude",
			"title": "Include",
			"description": "Ant style filter inclusion, for example antInclude=*.txt.<br/> Multiple inclusions may be specified in comma-delimited format.<br/><ul><li>? matches one character</li><li>* matches zero or more characters</li><li>** matches zero or more directories in a path</li></ul>",
			"type": "string",
			"value": ""
		}, {
			"id": "uriparam_antExclude",
			"title": "Exclude",
			"description": "Ant style filter exclusion.<br/>If both antInclude and antExclude are used, antExclude takes precedence over antInclude.<br/>Multiple exclusions may be specified in comma-delimited format.",
			"type": "string",
			"value": ""
		} ]
	}, {
		"name": "processorProperties",
		"properties": [ {
			"id": "ref",
			"type": "String",
			"title": "Reference",
			"description": "Reference to the bean implementing the processor's logic",
			"value": "",
			"visible": "(srcFile==null||srcFile=='') && (codeLanguage=='groovy' || codeLanguage=='java')",
			"optional": true
		}, {
			"id": "srcFile",
			"type": "ResourceSelector",
			"config": {
				"type": "sw.${codeLanguage}"
			},
			"title": "Sourcefile",
			"title_de": "Quelldatei",
			"description": "The sourcefile which contains the script",
			"description_de": "Die Quelldatei welche das Script beinhaltet",
			"value": "",
			"visible": "codeLanguage!='xroovy' && codeLanguage!='java'",
			"optional": true
		}, {
			"id": "code",
			"config": {
				"mode": "${codeLanguage}"
			},
			"type": "Text",
			"title": "Code",
			"value": "",
			"description": "<ul><li>the <b>void process(Exchange)</b> method or </li><li>the complete class(must implement the interface org.apache.camel.Processor),</li></ul> depend from the codekind ",
			"description_de": "<ul><li>Die  <b>void process(Exchange)</b> Methode  oder</li><li> die <b>komplette Klasse</b>(muss das Interface org.apache.camel.Processor implementieren),</li></ul> abhängig von Kodeart ",
			"visible": "(srcFile==null||srcFile=='') && (codeLanguage=='groovy' || codeLanguage=='java')",
			"optional": true
		}, {
			"id": "script",
			"config": {
				"mode": "${codeLanguage}"
			},
			"type": "Text",
			"title": "Script",
			"value": "",
			"description": "Embedded script",
			"description_de": "Eingebettetes Script",
			"visible": "codeLanguage!='groovy' && codeLanguage!='java'",
			"optional": true
		}, {
			"id": "codeKind",
			"title": "Codekind",
			"title_de": "Kodeart",
			"readonly": false,
			"type": "Choice",
			"visible": "(srcFile==null||srcFile=='') && (codeLanguage=='groovy' || codeLanguage=='java')",
			"value": "completeClass",
			"items": [ {
				"id": "processMethod",
				"title": "only the process method",
				"title_de": "Nur die process Methode",
				"value": "processMethod"
			}, {
				"id": "completeClass",
				"title": "Complete processor class",
				"title_de": "Komplette Processor Klasse",
				"value": "completeClass"
			} ],
			"optional": true
		}, {
			"id": "addImport",
			"type": "Complex",
			"title": "Additional imports",
			"title_de": "Zusätzliche Importe",
			"config": {
				"asArray": true
			},
			"visible": "codeKind=='processMethod' && (codeLanguage=='groovy' || codeLanguage=='java')",
			"value": null,
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "import",
				"name": "Import",
				"type": "String",
				"filter": "[a-zA-Z0-9_ *.]",
				"value": null,
				"width": 250
			} ]
		}, {
			"id": "codeLanguage",
			"title": "Language",
			"title_de": "Sprache",
			"readonly": false,
			"type": "Choice",
			"value": "groovy",
			"items": [ {
				"id": "groovy",
				"title": "Groovy",
				"value": "groovy"
			}, {
				"id": "java",
				"title": "Java8",
				"value": "java"
			}, {
				"id": "njs",
				"title": "Nashorn Javascript",
				"value": "njs"
			} ],
			"optional": true
		}, {
			"id": "isEndpoint",
			"title": "Endpoint",
			"type": "Boolean",
			"value": false
		} ]
	}, {
		"name": "datamapperProperties",
		"properties": [ {
			"id": "strategy",
			"type": "ResourceSelector",
			"config": {
				"type": "sw.datamapper",
				"prefix": ""
			},
			"title": "Strategy",
			"title_de": "Strategie",
			"value": "",
			"description": "",
			"readonly": false,
			"optional": true
		} ]
	}, {
		"name": "directProperties",
		"properties": [ {
			"id": "type_direct",
			"type": "String",
			"value": "Direct",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "direct:${name}",
			"visible": false
		}, {
			"id": "urivalue_name",
			"title": "Name",
			"description_de": "Im Falle von  RPC ist dieser Parameter gleichzeitig der Prozedurname",
			"description": "In case of rpc this is also the procedure name",
			"filter": "[a-zA-Z0-9_]",
			"type": "String",
			"optional": false,
			"value": "direct1",
			"visible": true
		} ]
	}, {
		"name": "eventbusProperties",
		"properties": [ {
			"id": "type_eventbus",
			"type": "String",
			"value": "EventBus",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "eventbus:${address}",
			"visible": false
		}, {
			"id": "urivalue_address",
			"title": "Address",
			"title_de": "Adresse",
			"type": "String",
			"value": "bus1",
			"visible": true
		} ]
	}, {
		"name": "rpcProperties2",
		"properties": [ {
			"id": "rpc",
			"title": "RPC",
			"description_de": "Soll der Service über rpc erreichbar sein?",
			"description": "Should be the service reachable via rpc?",
			"type": "boolean",
			"value": false,
			"visible": true
		}, {
			"id": "rpcParameter",
			"type": "Complex",
			"title": "Parameter definitions",
			"title_de": "Parameter Definitionen",
			"value": "",
			"visible": "rpc==true",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "destname",
				"name": "Destinationname",
				"name_de": "Zielname",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "defaultvalue",
				"name_de": "Defaultwert",
				"name": "Defaultvalue",
				"type": "String",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "optional",
				"name_de": "Optional",
				"name": "Optional",
				"type": "boolean",
				"value": false,
				"width": 50,
				"optional": false
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 80,
				"optional": true
			}, {
				"id": "destination",
				"name": "Destination",
				"name_de": "Ziel",
				"readonly": false,
				"type": "Choice",
				"value": "property",
				"items": "###destination_items",
				"width": 80,
				"optional": true
			} ]
		}, {
			"id": "rpcReturn",
			"title": "Resultvalues",
			"title_de": "Ergebniswerte",
			"description": "Which part of the message is to  be taken as the result",
			"description_de": "Welcher Teil der Nachricht soll als  Ergebnis genommen werden",
			"readonly": false,
			"type": "Choice",
			"value": "body",
			"visible": "rpc==true",
			"items": [ {
				"id": "body",
				"title": "Body",
				"value": "body"
			}, {
				"id": "headers",
				"title": "Headers",
				"value": "headers"
			}, {
				"id": "bodyAndHeaders",
				"title": "Body/Headers",
				"value": "bodyAndHeaders"
			}, {
				"id": "bodyWithMime",
				"title": "Body/Mimetype",
				"value": "bodyWithMime"
			}, {
				"id": "none",
				"title": "-----",
				"value": "none"
			} ],
			"width": 80,
			"optional": true
		}, {
			"id": "mimetype",
			"title": "Mimetype",
			"type": "String",
			"value": null,
			"visible": "rpc==true && rpcReturn=='bodyWithMime'"
		}, {
			"id": "rpcReturnHeaders",
			"type": "Complex",
			"title": "Which headers",
			"title_de": "Welche Header",
			"description": "Which headers forms the result",
			"description_de": "Welche Header bilden das Ergebnis",
			"value": "",
			"visible": "rpc==true && (rpcReturn=='headers' || rpcReturn=='bodyAndHeaders')",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9]",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		}, {
			"id": "startableGroups",
			"type": "MultiSelect",
			"config": "permission:getAllRoles:name",
			"title": "Permission (roles)",
			"title_de": "Erlaubt (Rollen)",
			"description": "User with min. one of these roles may call this procedure(function)",
			"description_de": "User mit min. einer der angebenen Rollen dürfen die Prozedur(Funktion) aufrufen",
			"value": "",
			"visible": "rpc==true",
			"length": "50"
		}, {
			"id": "startableUsers",
			"type": "MultiSelect",
			"config": "auth:getUsers:userid",
			"title": "Permission (user)",
			"title_de": "Erlaubt (User)",
			"description": "This users are able to call the procedure",
			"description_de": "Diese User dürfen die Prozedur aufrufen",
			"value": "",
			"visible": "rpc==true",
			"length": "50"
		} ]
	}, {
		"name": "rpcProperties",
		"properties": [ {
			"id": "uriparam_procedure",
			"title": "Procedurename",
			"title_de": "Prozedurname",
			"description": "The procedure is fully qualified on the router registered.<br/>namespace.servicename.methodname <br/>eq. <b>docu.wamp.multiply</b>",
			"description_de": "Die Procedure wird voll quailifiert am Router angemeldet.<br />namespace.servicename.methodname<br/>zb. <b>docu.wamp.multiply</b>",
			"filter": "[a-z0-9_]",
			"visible": "urivalue_mode=='rpc'",
			"optional": false,
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_rpcParameter",
			"type": "Complex",
			"title": "RPC-Parameter",
			"value": "",
			"visible": "urivalue_mode=='rpc'",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9]",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "destname",
				"name": "Destinationname",
				"name_de": "Zielname",
				"type": "String",
				"filter": "[a-zA-Z0-9_]",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "defaultvalue",
				"name_de": "Defaultwert",
				"name": "Defaultvalue",
				"type": "String",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "optional",
				"name_de": "Optional",
				"name": "Optional",
				"type": "boolean",
				"value": false,
				"width": 50,
				"optional": false
			}, {
				"id": "type",
				"name": "Type",
				"name_de": "Typ",
				"readonly": false,
				"type": "Choice",
				"value": "string",
				"items": "###parametertype_items",
				"width": 80,
				"optional": true
			}, {
				"id": "destination",
				"name": "Destination",
				"name_de": "Ziel",
				"readonly": false,
				"type": "Choice",
				"value": "property",
				"items": "###destination_items",
				"width": 80,
				"optional": true
			} ]
		}, {
			"id": "uriparam_rpcReturn",
			"title": "RPC Return",
			"readonly": false,
			"type": "Choice",
			"value": "body",
			"visible": "urivalue_mode=='rpc'",
			"items": [ {
				"id": "body",
				"title": "Body",
				"value": "body"
			}, {
				"id": "headers",
				"title": "Headers",
				"value": "headers"
			}, {
				"id": "bodyAndHeaders",
				"title": "Body/Headers",
				"value": "bodyAndHeaders"
			}, {
				"id": "none",
				"title": "-----",
				"value": "none"
			} ],
			"width": 80,
			"optional": true
		}, {
			"id": "uriparam_rpcReturnHeaders",
			"type": "Complex",
			"title": "Return Headers",
			"value": "",
			"visible": "(urivalue_mode=='rpc') && (uriparam_rpcReturn=='headers' || uriparam_rpcReturn=='bodyAndHeaders')",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9]",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "subscribeProperties",
		"properties": [ {
			"id": "uriparam_topic2",
			"description": "The topic without the namspace, the publisher must be pefix the topic with the namespace:<b>namespace.topic</b> ",
			"title": "Topic",
			"visible": "urivalue_mode=='subscribe'",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_match",
			"title": "Match",
			"readonly": false,
			"include": false,
			"type": "Choice",
			"value": "exact",
			"visible": "urivalue_mode=='subscribe'",
			"items": [ {
				"id": "exact",
				"title": "Exact",
				"value": "exact"
			}, {
				"id": "wildcard",
				"title": "Wildcard",
				"value": "wildcard"
			} ],
			"width": 80,
			"optional": true
		} ]
	}, {
		"name": "publishProperties",
		"properties": [ {
			"id": "uriparam_topic",
			"description": "The topic without the namspace, the subscriber must be pefix the topic with the namespace:<b>namespace.topic</b> ",
			"title": "Topic",
			"visible": "urivalue_mode=='pub'",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_publish",
			"title": "Publish",
			"readonly": false,
			"type": "Choice",
			"value": "body",
			"visible": "urivalue_mode=='pub'",
			"items": [ {
				"id": "body",
				"title": "Body",
				"value": "body"
			}, {
				"id": "headers",
				"title": "Headers",
				"value": "headers"
			}, {
				"id": "bodyAndHeaders",
				"title": "Body/Headers",
				"value": "bodyAndHeaders"
			}, {
				"id": "none",
				"title": "-----",
				"value": "none"
			} ],
			"width": 80,
			"optional": true
		}, {
			"id": "uriparam_publishHeaders",
			"type": "Complex",
			"title": "PublishHeaders",
			"value": "",
			"visible": "(urivalue_mode=='pub') && (uriparam_publish=='headers' || uriparam_publish=='bodyAndHeaders')",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9]",
				"value": "",
				"width": 250,
				"optional": false
			} ]
		} ]
	}, {
		"name": "websocketProperties",
		"properties": [ {
			"id": "type_websocket",
			"type": "String",
			"value": "Websocket",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "websocket:${name}",
			"visible": false
		}, {
			"id": "urivalue_name",
			"title": "Name",
			"title_de": "Name",
			"optional": false,
			"description": "websocket:${name}",
			"type": "String",
			"value": "ws1",
			"visible": true
		}, {
			"id": "urivalue_sendToAll",
			"title": "Send to all",
			"title_de": "Sende an alle",
			"type": "Boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "scpEventProperties",
		"properties": [ {
			"id": "type_scpevent",
			"type": "String",
			"value": "ScpEvent",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "scpevent:dummy",
			"visible": false
		}, {
			"id": "uriparam_filePattern",
			"title": "Filepattern",
			"description_de": "Nur Ereignisse bei denen  das Muster auf den Filenamen passt, werden beachtet. <br>z.b: <b>.*\\.pdf$</b> : Nur Files mit der Endung '.pdf'",
			"description": "Only events where the pattern fits the filename are considered. <br>z.b: <b>.*\\.pdf$</b> : Only files with the suffix '.pdf'",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_fileDestination",
			"title": "Dest. Pathname",
			"title_de": "Ablage Pfadname",
			"description_de": "Header/Property Feld in das der Pathname gespeichert wird. z.B. <ul><li> <b>header.pathname</b> oder kurz: <b>h.pathname</b> => Ziel ist das Headerfeld <b>pathname</b></li><li><b>property.pathname</b> oder kurz <b>p.pathname</b> => Ziel ist die Property <b>pathname</b></li><li> default ist <b>p.pathname</b></li></ul>",
			"description":    "Header/Property Field into which the pathname is stored. e.g. <ul><li> <b>header.pathname</b> or short: <b>h.pathname</b> => Destination is headerfield <b>pathname</b></li><li><b>property.pathname</b> or short <b>p.pathname</b> Destination is property <b>pathname</b></li><li> default is <b>p.pathname</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_vfsRootDestination",
			"title": "Dest. VfsRoot",
			"title_de": "Ablage VfsRoot",
			"description_de": "Header/Property Feld in das die VfsRoot(Homedir des Users)  gespeichert wird. z.B. <ul><li> <b>header.vfsRoot</b> oder kurz: <b>h.vfsRoot</b> => Ziel ist das Headerfeld <b>vfsRoot</b></li><li><b>property.vfsRoot</b> oder kurz <b>p.vfsRoot</b> => Ziel ist die Property <b>vfsRoot</b></li><li> default ist <b>p.vfsroot</b></li></ul>",
			"description":    "Header/Property Field into which the VfsRoot (Homedir of the user)  is stored. e.g. <ul><li> <b>header.vfsRoot</b> or short: <b>h.vfsRoot</b> => Destination is headerfield <b>vfsRoot</b></li><li><b>property.vfsRoot</b> or short <b>p.vfsRoot</b> Destination is property <b>vfsRoot</b></li><li> default is <b>p.vfsroot</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		} ]
	}, {
		"name": "deepZoomProperties",
		"properties": [ {
			"id": "type_deepzoom",
			"type": "String",
			"value": "DeepZoom",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "deepzoom:dummy",
			"visible": false
		}, {
			"id": "uriparam_vfsRoot",
			"title": "VfsRoot",
			"description_de": "Header/Property Feld das die VfsRoot(Homedir des Users) enthält.<br> zb. <b>p.vfsroot</b><br>Voreingestellt: <b>p.vfsroot</b>",
			"description":    "Header/Property Field which the VfsRoot (Homedir of the user) contains.<br> eg. <b>p.vfsroot</b><br>Default: <b>p.vfsroot</b>",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_pdfFile",
			"title": "Pdffile",
			"description_de": "Header/Property Feld das den Path des PdfFile enthält.<br>Relativer Pfadname. Die Vfsroot wird vorangestellt.<br> zb. <b>p.pathname</b><br>Voreingestellt: <b>p.pathname</b>",
			"description":    "Header/Property Field which the path of the pdffile contains.<br>Relative pathname. The Vfsroot is preceded.<br> eg. <b>p.pathname</b><br>Default: <b>p.pathname</b>",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_pngFile",
			"title": "Pngfile",
			"description_de": "Header/Property Feld das den Path des PngFile enthält.<br>Relativer Pfadname. Die Vfsroot wird vorangestellt.<br> zb. <b>p.pathname</b><br>Voreingestellt: <b>p.pathname</b>",
			"description":    "Header/Property Field which the path of the pngfile contains.<br>Relative pathname. The Vfsroot is preceded.<br> eg. <b>p.pathname</b><br>Default: <b>p.pathname</b>",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_outputDirectory",
			"title": "Output Directory",
			"description_de": "Hier werden die Deepzoom Images und das Hotspotfile  abgelegt.<br>Relativer Verzeichnisname. Die Vfsroot wird vorangestellt",
			"description":    "The Deepzoom Images and the Hotspotfile are stored here.<br>Relative directory name. The Vfsroot is preceded",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_hotspotRegex",
			"title": "Hotspot Regex",
			"description_de": "Der Hotspottext muss auf dieses Muster passen.<br> zb.: <b>[0-9]{1,4}</b> : Nur 1-4 stellige Zeichenketten, die nur Ziffer enthalten. ",
			"description":    "The hotspot text must match this pattern. <br> zb.: <b>[0-9]{1,4}</b> : Only 1-4 digit strings,  containing only digit.",
			"optional": true,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_dpi",
			"title": "dpi",
			"description_de": "Default ist 450.",
			"description":    "Defaul is 450",
			"optional": true,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_tileSize",
			"title": "TileSize",
			"description_de": "Default ist 256.",
			"description":    "Defaul is 256",
			"optional": true,
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_factor",
			"title": "Factor",
			"description_de": "Alle Koordinaten werden mit diesem Faktor multipliziert.",
			"description":    "All coordinates are multiplied by this factor.",
			"optional": false,
			"type": "String",
			"value": null,
			"visible": true
		} ]
	}, {
		"name": "permissionProperties",
		"properties": [ {
			"id": "uriparam_startableGroups",
			"type": "MultiSelect",
			"config": "permission:getAllRoles:name",
			"title": "Permission (groups)",
			"title_de": "Erlaubt (Rollen)",
			"description": "User with a min. one of these roles may start the service",
			"description_de": "User mit einer min. einer dieser  Rollen dürfen den Service starten",
			"value": "",
			"_visible": "urivalue_mode=='rpc'",
			"length": "50"
		}, {
			"id": "uriparam_startableUsers",
			"type": "MultiSelect",
			"config": "auth:getUsers:userid",
			"title": "Permission (user)",
			"title_de": "Erlaubt (User)",
			"description": "This users are able to start the service",
			"description_de": "Diese User dürfen den Service starten",
			"value": "",
			"_visible": "urivalue_mode=='rpc'",
			"length": "50"
		} ]
	}, {
		"name": "wampProperties",
		"properties": [ {
			"id": "type_wamp",
			"type": "String",
			"value": "Wamp",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "wamp:${mode}",
			"visible": false
		}, {
			"id": "urivalue_mode",
			"title": "Mode",
			"title_de": "Modus",
			"type": "Choice",
			"value": "rpc",
			"items": [ {
				"id": "c1",
				"title": "Publishing",
				"value": "pub"
			}, {
				"id": "c2",
				"title": "RPC",
				"value": "rpc"
			}, {
				"id": "c3",
				"title": "Subscribe",
				"value": "subscribe"
			} ],
			"visible": true
		}, {
			"id": "uriparam_tenantExcludeExpr",
			"title": "Tenant ecxlude expression",
			"description": "Tenat exclude expression.<br/>VarMap consists of the payload, additional 'userName'.<br/> zb.: tenant!=userName",
			"type": "String",
			"value": "tenant != userName",
			"visible": "urivalue_mode=='pub'"
		}, {
			"id": "uriparam_excludeExpr",
			"title": "Exclude expression",
			"description": "Common exclude expression.<br/>VarMap consists of the payload, additional 'userName'.:<br/> zb.: candidateList.indexOf(userName) <0",
			"type": "String",
			"value": null,
			"visible": "urivalue_mode=='pub'"
		}, {
			"id": "uriparam_includeExpr",
			"title": "Include expression",
			"description": "Common include expression.<br/>VarMap consists of the payload, additional 'userName'.:<br/> zb.: candidateList.indexOf(userName) <0",
			"type": "String",
			"value": null,
			"visible": "urivalue_mode=='pub'"
		} ]
	}, {
		"name": "sedaProperties",
		"properties": [ {
			"id": "type_seda",
			"type": "String",
			"value": "Seda",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "seda:${name}",
			"visible": false
		}, {
			"id": "urivalue_name",
			"title": "Name",
			"type": "String",
			"value": "seda1",
			"visible": true
		} ]
	}, {
		"name": "vmProperties",
		"properties": [ {
			"id": "type_vm",
			"type": "String",
			"value": "VM",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "vm:${name}",
			"visible": false
		}, {
			"id": "urivalue_name",
			"title": "Name",
			"type": "String",
			"value": "vm1",
			"visible": true
		}, {
			"id": "uriparam_pubSub",
			"title": "PubSub",
			"type": "Boolean",
			"value": true
		} ]
	}, {
		"name": "sedaVmProperties",
		"properties": [ {
			"id": "urivalue_concurrentConsumers",
			"title": "ConcurrentConsumers",
			"description": "Number of concurrent threads processing exchanges.",
			"type": "Integer",
			"value": "1",
			"visible": true
		}, {
			"id": "urivalue_timeout",
			"title": "Timeout",
			"description": "Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete.",
			"type": "Integer",
			"value": "30000",
			"visible": true
		}, {
			"id": "urivalue_pollTimeout",
			"title": "PollTimeout",
			"description": "Consumer only – The timeout used when polling.",
			"type": "Integer",
			"value": "1000",
			"visible": true
		}, {
			"id": "uriparam_waitForTaskToComplete",
			"type": "Combo",
			"title": "WaitForTaskToComplete",
			"description": "Option to specify whether the caller should wait for the async task to complete or not before continuing.",
			"value": "IfReplyExpected",
			"items": [ {
				"id": "c1",
				"value": "IfReplyExpected",
				"title": "IfReplyExpected"
			}, {
				"id": "c2",
				"value": "Always",
				"title": "Always"
			}, {
				"id": "c3",
				"value": "Never",
				"title": "Never"
			} ]
		}, {
			"id": "uriparam_multipleConsumers",
			"title": "MultipleConsumers",
			"description": "Specifies whether multiple consumers are allowed.<br/>If enabled, you can use SEDA for Publish-Subscribe messaging.<br/>That is, you can send a message to the SEDA queue and have each<br/> consumer receive a copy of the message.",
			"type": "boolean",
			"value": false,
			"visible": true
		}, {
			"id": "uriparam_blockWhenFull",
			"title": "BlockWhenFull",
			"description": "Whether a thread that sends messages to a full SEDA queue will<br/>block until the queue's capacity is no longer exhausted.<br/>By default, an exception will be thrown stating that the queue is full.",
			"type": "boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "ftpProperties",
		"properties": [ {
			"id": "type_ftp",
			"type": "String",
			"value": "FTP",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "${protocol}://${host}:${port}/${directory}",
			"visible": false
		}, {
			"id": "urivalue_protocol",
			"type": "Choice",
			"title": "Protocol",
			"title_de": "Protokoll",
			"value": "sftp",
			"items": [ {
				"id": "c1",
				"title": "SFTP",
				"value": "sftp"
			}, {
				"id": "c2",
				"title": "FTPS",
				"value": "ftps"
			}, {
				"id": "c3",
				"title": "FTP",
				"value": "ftp"
			} ]
		}, {
			"id": "urivalue_host",
			"title": "Host",
			"type": "String",
			"value": "",
			"optional": false
		}, {
			"id": "urivalue_port",
			"title": "Port",
			"type": "Integer",
			"value": "21"
		}, {
			"id": "urivalue_directory",
			"title": "Directory",
			"title_de": "Verzeichnis",
			"type": "String",
			"value": ""
		}, {
			"id": "uriparam_username",
			"title": "Username",
			"type": "String",
			"value": "",
			"visible": true
		}, {
			"id": "uriparam_password",
			"title": "Password",
			"title_de": "Passwort",
			"type": "String",
			"config": "password",
			"value": ""
		}, {
			"id": "uriparam_passiveMode",
			"title": "Passive",
			"type": "Boolean",
			"value": true
		}, {
			"id": "uriparam_binary",
			"title": "Binary",
			"type": "Boolean",
			"value": true
		}, {
			"id": "uriparam_ftpClient.defaultTimeout",
			"title": "Timeout(milliSec)",
			"title_de": "Timeout(milliSec)",
			"description": "Timeout(milliSec) when establishing a connection",
			"description_de": "Timeout(milliSec) beim Verbindungsaufbau",
			"include": "urivalue_protocol=='ftp'",
			"type": "Integer",
			"value": 10000
		} ]
	}, {
		"name": "tabulaProperties",
		"properties": [ {
			"id": "type_tabula",
			"type": "String",
			"value": "Tabula",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "tabula:${outputFormat}",
			"visible": false
		}, {
			"id": "urivalue_outputFormat",
			"type": "Choice",
			"title": "OutputFormat",
			"title_de": "Ausgabeformat",
			"value": "csv",
			"items": [ {
				"id": "c1",
				"title": "CSV",
				"value": "csv"
			}, {
				"id": "c2",
				"title": "TSV",
				"value": "tsv"
			}, {
				"id": "c3",
				"title": "JSON",
				"value": "json"
			} ]
		}, {
			"id": "uriparam_extractionMethod",
			"type": "Choice",
			"title": "Extractionmethod",
			"description":    "Force PDF to be extracted using spreadsheet-mode extraction<br/>(if there are ruling lines separating each cell, as in a PDF of an Excel spreadsheet",
			"value": "decide",
			"items": [ {
				"id": "c1",
				"title": "Spreadsheet",
				"value": "spreadsheet"
			}, {
				"id": "c2",
				"title": "Basic",
				"value": "basic"
			}, {
				"id": "c3",
				"title": "Decide",
				"value": "decide"
			} ]
		}, {
			"id": "uriparam_pages",
			"type": "Combo",
			"title": "Pages",
			"title_de": "Seiten",
			"description":    "Comma separated list of ranges, or all.<br/>Examples:<ul><li>1-3,5-7</li><li>2-4</li><li>3<li>all</li><li>Default is 1</li></ul>",
			"value": "all",
			"items": [ {
				"id": "c1",
				"title": "ALL",
				"value": "all"
			} ]
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel der Daten. z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Ziel ist das Headerfeld <b.data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> => Ziel ist Property <b.data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the data. e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Destination is headerfield <b.data</b></li><li><b>property.data</b> or short <b>p.data</b> Destination is property <b.data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_guess",
			"type": "Choice",
			"title": "Guess",
			"title_de": "ermitteln",
			"description":    "guess the page areas to extract using a detection algorithm.<br/>Currently we only have a detector that uses spreadsheets to find table areas",
			"value": "false",
			"items": [ {
				"id": "c1",
				"title": "True",
				"value": "true"
			}, {
				"id": "c2",
				"title": "False",
				"value": "false"
			} ]
		} ]
	}, {
		"name": "tikaProperties",
		"properties": [ {
			"id": "type_tika",
			"type": "String",
			"value": "Tika",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "tika:${operation}",
			"visible": false
		}, {
			"id": "urivalue_operation",
			"type": "Choice",
			"title": "Operation",
			"title_de": "Operation",
			"value": "detect",
			"items": [ {
				"id": "c1",
				"title": "Detect",
				"value": "detect"
			}, {
				"id": "c2",
				"title": "Parse",
				"value": "parse"
			} ]
		}, {
			"id": "uriparam_tikaParseOutputFormat",
			"type": "Choice",
			"title": "OutputFormat",
			"title_de": "OutputFormat",
			"value": "text",
			"items": [ {
				"id": "c1",
				"title": "text",
				"value": "text"
			}, {
				"id": "c2",
				"title": "xml",
				"value": "xml"
			}, {
				"id": "c2",
				"title": "html",
				"value": "html"
			} ]
		}, {
			"id": "uriparam_metadestination",
			"title": "Destination(Meta)",
			"title_de": "Ziel(Meta)",
			"description_de": "Ziel der Metadaten. z.B. <ul><li> <b>header.meta</b> oder kurz: <b>h.meta</b> => Ziel ist das Headerfeld <b.meta</b></li><li><b>property.meta</b> oder kurz <b>p.meta</b> => Ziel ist Property <b.meta</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the metatdata. e.g. <ul><li> <b>header.meta</b> or short: <b>h.meta</b> => Destination is headerfield <b.meta</b></li><li><b>property.meta</b> or short <b>p.meta</b> Destination is property <b.meta</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_datadestination",
			"title": "Destination(Data)",
			"title_de": "Ziel(Daten)",
			"description_de": "Ziel der Daten. z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Ziel ist das Headerfeld <b.data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> => Ziel ist Property <b.data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the data. e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Destination is headerfield <b.data</b></li><li><b>property.data</b> or short <b>p.data</b> Destination is property <b.data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true,
			"visible": "true"
		}, {
			"id": "uriparam_synchronous",
			"type": "Choice",
			"title": "Synchronous",
			"title_de": "Synchronous",
			"value": "false",
			"items": [ {
				"id": "c1",
				"title": "True",
				"value": "true"
			}, {
				"id": "c2",
				"title": "False",
				"value": "false"
			} ]
		} ]
	}, {
		"name": "vfsProperties",
		"properties": [ {
			"id": "type_vfs",
			"type": "String",
			"value": "VFS",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "vfs:${operation}",
			"visible": false
		}, {
			"id": "uriparam_fileSystem",
			"type": "Choice",
			"title": "Filesystem",
			"value": "sftp",
			"items": [ {
				"id": "sftp",
				"title": "SFTP",
				"value": "sftp"
			}, {
				"id": "smb",
				"title": "SMB",
				"value": "smb"
			}, {
				"id": "html",
				"title": "HTTP",
				"value": "http"
			}, {
				"id": "zip",
				"title": "ZIP",
				"value": "zip"
			}, {
				"id": "jar",
				"title": "JAR",
				"value": "jar"
			}, {
				"id": "tar",
				"title": "TAR",
				"value": "tar"
			} ]
		}, {
			"id": "urivalue_operation",
			"type": "Choice",
			"title": "Operation",
			"title_de": "Operation",
			"value": "get",
			"items": [ {
				"id": "c1",
				"title": "Download",
				"value": "get"
			}, {
				"id": "c2",
				"enabled": "['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
				"title": "Upload",
				"value": "put"
			}, {
				"id": "c3",
				"enabled": "['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
				"title_de": "Verschieben",
				"title": "Move",
				"value": "move"
			}, {
				"id": "c4",
				"enabled": "['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
				"title_de": "Kopieren",
				"title": "Copy",
				"value": "copy"
			}, {
				"id": "c5",
				"enabled": "['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
				"title_de": "Löschen",
				"title": "Delete",
				"value": "delete"
			} ]
		}, {
			"id": "uriparam_host",
			"visible": "['zip','jar','tar'].indexOf(uriparam_fileSystem) == -1",
			"title": "Host",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_port",
			"visible": "['zip','jar','tar'].indexOf(uriparam_fileSystem) == -1",
			"title": "Port",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_share",
			"visible": "['smb'].indexOf(uriparam_fileSystem) != -1",
			"title": "Share",
			"title_de": "Freigabe",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_userName",
			"visible": "['zip','jar','tar'].indexOf(uriparam_fileSystem) == -1",
			"title": "Username",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_password",
			"visible": "['zip','jar','tar'].indexOf(uriparam_fileSystem) == -1",
			"title": "Password",
			"title_de": "Passwort",
			"type": "String",
			"config": "password",
			"value": null
		}, {
			"id": "uriparam_privateKey",
			"title_de": "Schlüssel",
			"visible": "['sftp'].indexOf(uriparam_fileSystem) != -1",
			"title": "Key",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_remotePath",
			"title_de": "Ferner Pfad",
			"title": "Remotepath",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_localPath",
			"visible": "['put'].indexOf(urivalue_operation) != -1 && ['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
			"title_de": "Lokaler Pfad",
			"title": "Localpath",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_newRemotePath",
			"title_de": "Neuer ferner Pfad",
			"visible": "['move','copy'].indexOf(urivalue_operation) != -1 && ['zip','jar','tar','http'].indexOf(uriparam_fileSystem) == -1",
			"title": "New remotepath",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_archivePath",
			"title_de": "Archiv Pfad",
			"visible": "['zip','jar','tar'].indexOf(uriparam_fileSystem) != -1",
			"title": "Archivepath",
			"type": "String",
			"value": null
		} ]
	}, {
		"name": "mailProperties",
		"properties": [ {
			"id": "type_mail",
			"type": "String",
			"value": "Mail",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "${protocol}://${host}:${port}",
			"visible": false
		}, {
			"id": "urivalue_protocol",
			"type": "Choice",
			"title": "Protocol",
			"title_de": "Protokoll",
			"value": "smtp",
			"items": [ {
				"id": "c1",
				"title": "SMTP",
				"value": "smtp"
			}, {
				"id": "c2",
				"title": "IMAP",
				"value": "imap"
			}, {
				"id": "c3",
				"title": "POP3",
				"value": "pop3"
			}, {
				"id": "c4",
				"title": "SMTPS",
				"value": "smtps"
			}, {
				"id": "c5",
				"title": "IMAPS",
				"value": "imaps"
			}, {
				"id": "c6",
				"title": "POP3S",
				"value": "pop3s"
			} ]
		}, {
			"id": "urivalue_host",
			"title": "Host",
			"type": "String",
			"value": "127.0.0.1",
			"optional": false
		}, {
			"id": "urivalue_port",
			"title": "Port",
			"type": "Integer",
			"value": ""
		}, {
			"id": "uriparam_username",
			"title": "Username",
			"type": "String",
			"value": ""
		}, {
			"id": "uriparam_password",
			"title": "Password",
			"title_de": "Passwort",
			"type": "String",
			"config": "password",
			"value": ""
		}, {
			"id": "uriparam_subject",
			"title": "Subject",
			"title_de": "Betreff",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('smtp')",
			"value": ""
		}, {
			"id": "uriparam_from",
			"title": "From",
			"title_de": "Von",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('smtp')",
			"value": ""
		}, {
			"id": "uriparam_to",
			"title": "To",
			"title_de": "An",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('smtp')",
			"value": ""
		}, {
			"id": "uriparam_cc",
			"title": "CC",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('smtp')",
			"value": ""
		}, {
			"id": "uriparam_bcc",
			"title": "BCC",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('smtp')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.subject",
			"title": "Search/subject",
			"title_de": "Suche/Subjekt",
			"description": "To limit by subject to contain the word.",
			"description_de": "Subjekt muss das Wort enthalten",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.body",
			"title": "Search/body",
			"title_de": "Suche/Body",
			"description": "To limit by body to contain the word.",
			"description_de": "Body muss das Wort enthalten",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.subjectOrBody",
			"title": "Search/sub.|Body",
			"title_de": "Suche/Sub.|Body",
			"description": "To limit by subject or body to contain the word.",
			"description_de": "Subjekt oder Body müssen das Wort enthalten",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.from",
			"title": "Search/from",
			"title_de": "Suche/Von",
			"description": "The mail must be from a given email pattern.",
			"description_de": "Die Von-Emailadresse muss auf dieses Muster passen",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.to",
			"title": "Search/to",
			"title_de": "Suche/Zu",
			"description": "The mail must be to a given email pattern.",
			"description_de": "Die Zu-Emailadresse muss auf dieses Muster passen",
			"type": "String",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": ""
		}, {
			"id": "uriparam_searchTerm.seen",
			"title": "Search/unseen",
			"title_de": "Suche/ungelesen",
			"description": "Whether to limit by unseen mails only",
			"description_de": "Ob nur ungelesene Mail in Betracht gezogen werden",
			"type": "Boolean",
			"visible": "urivalue_protocol.startsWith('imap') || urivalue_protocol.startsWith('pop3')",
			"value": true
		}, {
			"id": "uriparam_contentType",
			"title": "ContentType",
			"type": "String",
			"value": "text/plain"
		} ]
	}, {
		"name": "xmppProperties",
		"properties": [ {
			"id": "type_xmpp",
			"type": "String",
			"value": "XMPP",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "${protocol}://${host}:${port}",
			"visible": false
		}, {
			"id": "urivalue_protocol",
			"type": "String",
			"title": "Protocol",
			"title_de": "Protokoll",
			"visible": false,
			"value": "xmpp"
		}, {
			"id": "urivalue_host",
			"title": "Hostname",
			"type": "String",
			"value": "127.0.0.1",
			"optional": false
		}, {
			"id": "urivalue_port",
			"title": "Port",
			"type": "Integer",
			"value": "5222"
		}, {
			"id": "uriparam_user",
			"description": "User name (without server name). If not specified, anonymous login will be attempted.",
			"description_de": "Benutzername (ohne Server-Namen). Wenn nicht angegeben, wird eine anonyme Anmeldung versucht.",
			"title": "User",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_password",
			"title": "Password",
			"title_de": "Passwort",
			"type": "String",
			"config": "password",
			"value": null
		}, {
			"id": "uriparam_room",
			"description": "If this option is specified, the component will connect to MUC (Multi User Chat).<br/> Usually, the domain name for MUC is different from the login domain.<br/> For example, if you are superman@jabber.org and want to join the krypton room,<br/> then the room URL is krypton@conference.jabber.org. Note the conference part.<br/> It is not a requirement to provide the full room JID.<br/> If the room parameter does not contain the @ symbol,<br />the domain part will be discovered and added.",
			"description_de": "Wenn dises Option angeben ist, wird eine Verbing zu einem MUC(Multi User Chat) aufgebaut.<br/>Üblicherweise ist der Domänenname für einen MUC anders als der Login-Domänenname.<br/>Zum Beispiel, wenn Sie superman@jabber.org sind und wollen den  Krypton Raum betreten,<br /> so ist die Raum URL krypton@conference.jabber.org.<br/>Der Konferenz Teil ist nicht erforderlich für die volle Raum JID.<br/> Wenn der Parameter 'Raum' das @ -Symbol enthält, wird der Domänenteil automatisch angehängt.",
			"title": "Room",
			"title_de": "Raum",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_participant",
			"description": "JID (Jabber ID) of person to receive messages. Room parameter has precedence over participant.",
			"description_de": "JID (Jabber ID) des Empfängers. Raum  Parameter hat Vorrang vor Teilnehmer",
			"title": "Participant",
			"title_de": "Teilnehmer",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_nickname",
			"title": "Nickname",
			"description": "Use nickname when joining room.<br/>If room is specified and nickname is not,<br/>user will be used for the nickname.",
			"description_de": "Nickname im Raum.<br/> Wenn der Raum angegeben ist und der Nickname nicht,<br/>wird User verwendet",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_serviceName",
			"title": "Servicename",
			"description": "The name of the service you are connecting to.<br/> For Google Talk, this would be gmail.com.",
			"description_de": "Der Name des Services, mit dem sie eine Verbindung herstellen.<br/> Für Google Talk, ist dies gmail.com.",
			"type": "String",
			"value": null
		}, {
			"id": "uriparam_testConnectionOnStartup",
			"title": "Testconnection",
			"type": "boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "jmsProperties",
		"properties": [ {
			"id": "type_jms",
			"type": "String",
			"value": "JMS",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "${protocol}:${kind}:${destname}",
			"visible": false
		}, {
			"id": "urivalue_protocol",
			"type": "String",
			"title": "Protocol",
			"title_de": "Protokoll",
			"visible": false,
			"value": "activemq"
		}, {
			"id": "urivalue_kind",
			"title": "Queue|Topic",
			"readonly": false,
			"type": "Choice",
			"value": "queue",
			"items": "###jms_items",
			"optional": false
		}, {
			"id": "urivalue_destname",
			"title": "Destinationname",
			"title_de": "Zielname",
			"type": "String",
			"value": null,
			"optional": false
		}, {
			"id": "uriparam_useMessageIDAsCorrelationID",
			"title": "MessageID as CorrelationID",
			"description": "Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.",
			"type": "boolean",
			"value": false,
			"visible": true
		} ]
	}, {
		"name": "pulsarProperties",
		"properties": [ {
			"id": "type_pulsar",
			"type": "String",
			"value": "Pulsar",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "pulsar:dummy",
			"visible": false
		}, {
			"id": "uriparam_serviceUrl",
			"description": "Broker serviceUrl",
			"title": "ServiceUrl",
			"type": "String",
			"value": "pulsar://localhost:6650",
			"visible": true
		}, {
			"id": "uriparam_messageSource",
			"title": "Messagedaten Quelle",
			"title_de": "Messagedata source",
			"description_de": "Producer:Quelle der Messagedaten., z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Quelle ist das Headerfeld <b>data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> =>  Quelle ist Property <b>data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Producer:Source of the message data, e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Source is the headerfield <b>data</b></li><li><b>property.data</b> or short <b>p.data</b> => Source is property <b>data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_messageDestination",
			"title": "Messagedaten Ziel",
			"title_de": "Messagedata Destination",
			"description_de": "Consumer:Ziel der Messagedaten., z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Ziel ist das Headerfeld <b>data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> =>  Ziel ist Property <b>data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Consumer:Destination of the message data, e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Destination is the headerfield <b>data</b></li><li><b>property.data</b> or short <b>p.data</b> => Destination is property <b>data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_topic",
			"title": "Topic",
			"description": "",
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_subscriptionName",
			"title": "SubscriptionName",
			"description": "",
			"type": "String",
			"value": null,
			"visible": true
		}, {
			"id": "uriparam_subscriptionType",
			"title": "SubscriptionType",
			"description": "Consumer option, ignored in producer",
			"type": "Choice",
			"value": "shared",
			"items": [ {
				"id": "c1",
				"title": "Shared",
				"value": "shared"
			}, {
				"id": "c2",
				"title": "Exclusive",
				"value": "exclusive"
			}, {
				"id": "c3",
				"title": "Failover",
				"value": "failover"
			} ]
		}, {
			"id": "uriparam_seekTo",
			"title": "Seek to",
			"description": "Consumer option, ignored in producer: seek to latest or earliest message",
			"type": "Choice",
			"value": "latest",
			"items": [ {
				"id": "c1",
				"title": "Latest",
				"value": "latest"
			}, {
				"id": "c2",
				"title": "Earliest",
				"value": "earliest"
			} ]
		}, {
			"id": "uriparam_sendTimeout",
			"title": "Send Timeout",
			"description": "",
			"type": "Integer",
			"value": 30,
			"visible": true
		}, {
			"id": "uriparam_ackTimeout",
			"title": "Ack Timeout",
			"description": "",
			"type": "Integer",
			"value": 1500,
			"visible": true
		} ]
	}, {
		"name": "kafkaProperties",
		"properties": [ {
			"id": "type_kafka",
			"type": "String",
			"value": "KAFKA",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "kafka:dummy",
			"visible": false
		}, {
			"id": "uriparam_messageSource",
			"title": "Messagedaten Quelle",
			"title_de": "Messagedata source",
			"description_de": "Producer:Quelle der Messagedaten., z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Quelle ist das Headerfeld <b>data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> =>  Quelle ist Property <b>data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Producer:Source of the message data, e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Source is the headerfield <b>data</b></li><li><b>property.data</b> or short <b>p.data</b> => Source is property <b>data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_messageDestination",
			"title": "Messagedaten Ziel",
			"title_de": "Messagedata Destination",
			"description_de": "Consumer:Ziel der Messagedaten., z.B. <ul><li> <b>header.data</b> oder kurz: <b>h.data</b> => Ziel ist das Headerfeld <b>data</b></li><li><b>property.data</b> oder kurz <b>p.data</b> =>  Ziel ist Property <b>data</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Consumer:Destination of the message data, e.g. <ul><li> <b>header.data</b> or short: <b>h.data</b> => Destination is the headerfield <b>data</b></li><li><b>property.data</b> or short <b>p.data</b> => Destination is property <b>data</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": true
		}, {
			"id": "uriparam_topic",
			"type": "String",
			"title": "Topic",
			"title_de": "Topic",
			"visible": true,
			"value": ""
		}, {
			"id": "uriparam_brokers",
			"description": "URL of the Kafka brokers to use.<br> The format is host1:port1,host2:port2, and the list can be a subset of brokers or a VIP pointing to a subset of brokers.<br><br>if empty, then the value from <ul><li><b>branding('kafkaBootstrapServers')</b> and next from </li><li><b>evironment('kafka.bootstrap.servers')</b></li></ul> is used.",
			"title": "Brokers",
			"type": "String",
			"value": "localhost:9094",
			"visible": true
		}, {
			"id": "uriparam_autoCommit",
			"title": "AutoCommit",
			"description": "Consumer option, ignored in producer",
			"type": "Choice",
			"value": "true",
			"items": [ {
				"id": "c1",
				"title": "True",
				"value": "true"
			}, {
				"id": "c2",
				"title": "False",
				"value": "false"
			} ]
		}, {
			"id": "uriparam_seekTo",
			"title": "Seek to",
			"description": "Consumer option, ignored in producer: seek to end or beginning",
			"type": "Choice",
			"value": "end",
			"items": [ {
				"id": "c1",
				"title": "End",
				"value": "end"
			}, {
				"id": "c2",
				"title": "Beginning",
				"value": "beginning"
			} ]
		}, {
			"id": "uriparam_groupId",
			"title": "GroupId",
			"description": "",
			"type": "String",
			"value": null,
			"visible": true
		} ]
	}, {
		"name": "zookeeperProperties",
		"properties": [ {
			"id": "type_zookeeper",
			"type": "String",
			"value": "zookeeper",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "${protocol}://${host}:${port}/dummypath",
			"visible": false
		}, {
			"id": "urivalue_protocol",
			"type": "String",
			"title": "Protocol",
			"title_de": "Protokoll",
			"visible": false,
			"value": "zookeeper"
		}, {
			"id": "urivalue_host",
			"title": "Host",
			"readonly": false,
			"type": "String",
			"value": "localhost",
			"optional": false
		}, {
			"id": "urivalue_port",
			"title": "Port",
			"readonly": false,
			"type": "String",
			"value": "2181",
			"optional": false
		}, {
			"id": "uriparam_path",
			"title": "Path",
			"title_de": "Pfad",
			"description": "The node in the ZooKeeper server (aka znode), with leading /",
			"type": "String",
			"value": null,
			"optional": false
		}, {
			"id": "uriparam_mode",
			"title": "Mode",
			"description": "The mode that should be used",
			"type": "Choice",
			"value": "WRITE",
			"items": [ {
				"id": "c1",
				"title": "Storing data to node",
				"value": "WRITE"
			}, {
				"id": "c2",
				"title": "Get node",
				"value": "GET"
			}, {
				"id": "c3",
				"title": "List child nodes",
				"value": "LIST"
			}, {
				"id": "c4",
				"title": "Delete node",
				"value": "DELETE"
			} ]
		}, {
			"id": "uriparam_repeat",
			"title": "Repeat",
			"description": "Should changes to the znode be 'watched' and repeatedly processed.",
			"include": false,
			"type": "boolean",
			"value": false
		}, {
			"id": "uriparam_create",
			"title": "Create",
			"description": "Should the endpoint create the node if it does not currently exist.",
			"visible": "uriparam_mode=='WRITE'",
			"type": "boolean",
			"value": true
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "z.B. <ul><li> <b>header.nodeContent</b> oder kurz: <b>h.nodeContent</b> => Quelle ist das Headerfeld <b>nodeContent</b></li><li><b>property.nodeContent</b> oder kurz <b>p.nodeContent</b> =>  Quelle ist Property <b>nodeContent</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "e.g. <ul><li> <b>header.nodeContent</b> or short: <b>h.nodeContent</b> => Source is the headerfield <b>nodeContent</b></li><li><b>property.nodeContent</b> or short <b>p.nodeContent</b> => Source is property <b>nodeContent</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_mode=='WRITE'"
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel des Ergebnisses. z.B. <ul><li> <b>header.nodeContent</b> oder kurz: <b>h.nodeContent</b> => Ziel ist das Headerfeld <b>nodeContent</b></li><li><b>property.nodeContent</b> oder kurz <b>p.nodeContent</b> => Ziel ist Property <b>nodeContent</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the result. e.g. <ul><li> <b>header.nodeContent</b> or short: <b>h.nodeContent</b> => Destination is headerfield <b>nodeContent</b></li><li><b>property.nodeContent</b> or short <b>p.nodeContent</b> Destination is property <b>nodeContent</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_mode=='GET'"
		}, {
			"id": "uriparam_createMode",
			"title": "CreateMode",
			"description": "The create mode that should be used for the newly created node",
			"visible": "uriparam_mode=='WRITE'",
			"type": "Choice",
			"value": "PERSISTENT",
			"items": [ {
				"id": "c1",
				"title": "EPHEMERAL",
				"value": "EPHEMERAL"
			}, {
				"id": "c2",
				"title": "EPHEMERAL_SEQUENTIAL",
				"value": "EPHEMERAL_SEQUENTIAL"
			}, {
				"id": "c3",
				"title": "PERSISTENT",
				"value": "PERSISTENT"
			}, {
				"id": "c4",
				"title": "PERSISTENT_SEQUENTIAL",
				"value": "PERSISTENT_SEQUENTIAL"
			} ]
		} ]
	}, {
		"name": "http4Properties",
		"properties": [ {
			"id": "endpoint_http4",
			"type": "String",
			"value": "http4",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "http4://${host}:${port}/${path}",
			"visible": false
		}, {
			"id": "urivalue_host",
			"title": "Host",
			"description_de": "Wenn die Uri dynamisch gesetzt wird,dann wird das Feld nicht benutzt, aber es muss ein Dummy-Wert angeben werden.",
			"description": "If the URI is set dynamically, then the field is not used, but a dummy value is needed.",
			"type": "String",
			"optional": false,
			"value": "localhost",
			"visible": true
		}, {
			"id": "urivalue_port",
			"title": "Port",
			"type": "Integer",
			"value": "80",
			"visible": true
		}, {
			"id": "urivalue_path",
			"title": "Path",
			"type": "String",
			"value": "",
			"visible": true
		} ]
	}, {
		"name": "hazelcastProperties",
		"properties": [ {
			"id": "endpoint_hazelcast",
			"type": "String",
			"value": "hazelcast",
			"visible": false,
			"refToView": [ "endpoint_type" ]
		}, {
			"id": "uri_template",
			"type": "String",
			"value": "hazelcast:${type}:${name}",
			"visible": false
		}, {
			"id": "urivalue_type",
			"title": "Type",
			"type": "Choice",
			"value": "map",
			"items": [ {
				"id": "c1",
				"title": "Map",
				"value": "map"
			}, {
				"id": "c2",
				"title": "List",
				"enabled": false,
				"value": "list"
			} ]
		}, {
			"id": "urivalue_name",
			"title": "Name",
			"title_de": "Name",
			"description": "The name of the collection(if the name starts with 'p-', then the collection is persistent)",
			"description_de": "Der Name der Collection(wenn der Name mit 'p-' beginnt, dann ist die Collection persistent)",
			"type": "String",
			"value": "default",
			"optional": false
		}, {
			"id": "uriparam_operation",
			"title": "Operation",
			"type": "Choice",
			"value": "1",
			"items": [ {
				"id": "c1",
				"title": "Put",
				"value": "1"
			}, {
				"id": "c2",
				"title": "Delete",
				"value": "2"
			}, {
				"id": "c3",
				"title": "Get",
				"value": "3"
			}, {
				"id": "c4",
				"title": "Update",
				"value": "4"
			}, {
				"id": "c5",
				"title": "Query",
				"enabled": true,
				"value": "5"
			} ]
		}, {
			"id": "uriparam_objectId",
			"title": "ObjectId",
			"title_de": "ObjectId",
			"description_de": "Wo ist die objectId zu finden, z.B. <ul><li> <b>header.objectId</b> oder kurz: <b>h.objectId</b> => Quelle ist das Headerfeld <b>objectId</b></li><li><b>property.objectId</b> oder kurz <b>p.objectId</b> =>  Quelle ist Property <b>objectId</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Where is the objectId, e.g. <ul><li> <b>header.objectId</b> or short: <b>h.objectId</b> => Source is the headerfield <b>objectId</b></li><li><b>property.objectId</b> or short <b>p.objectId</b> => Source is property <b>objectId</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_operation!='5'"
		}, {
			"id": "uriparam_source",
			"title": "Source",
			"title_de": "Quelle",
			"description_de": "z.B. <ul><li> <b>header.value</b> oder kurz: <b>h.value</b> => Quelle ist das Headerfeld <b>value</b></li><li><b>property.value</b> oder kurz <b>p.value</b> =>  Quelle ist Property <b>value</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "e.g. <ul><li> <b>header.value</b> or short: <b>h.value</b> => Source is the headerfield <b>value</b></li><li><b>property.value</b> or short <b>p.value</b> => Source is property <b>value</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_operation=='1' || uriparam_operation=='4'"
		}, {
			"id": "uriparam_sql",
			"title": "SQL",
			"title_de": "SQL",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_operation=='5'"
		}, {
			"id": "uriparam_destination",
			"title": "Destination",
			"title_de": "Ziel",
			"description_de": "Ziel des Ergebnisses. z.B. <ul><li> <b>header.value</b> oder kurz: <b>h.value</b> => Ziel ist das Headerfeld <b>value</b></li><li><b>property.value</b> oder kurz <b>p.value</b> => Ziel ist Property <b>value</b></li><li> default ist <b>body</b></li></ul>",
			"description":    "Destination of the result. e.g. <ul><li> <b>header.value</b> or short: <b>h.value</b> => Destination is headerfield <b>value</b></li><li><b>property.value</b> or short <b>p.value</b> Destination is property <b>value</b></li><li> default is <b>body</b></li></ul>",
			"type": "String",
			"value": null,
			"optional": false,
			"visible": "uriparam_operation=='3' || uriparam_operation=='5'"
		} ]
	}, {
		"name": "diagram",
		"properties": [ {
			"id": "version",
			"type": "String",
			"title": "Version",
			"value": "",
			"description": "This defines the version number of the diagram.",
			"description_de": "Setzt die Versionsnummer des Diagramms.",
			"readonly": false,
			"optional": true
		}, {
			"id": "author",
			"type": "String",
			"title": "Author",
			"title_de": "Autor",
			"value": "",
			"description": "This holds the name of the diagram's author.",
			"description_de": "Name des Diagrammautors.",
			"readonly": false,
			"optional": true
		}, {
			"id": "creationdate",
			"type": "Date",
			"title": "Creation date",
			"title_de": "Erstellt am",
			"value": "",
			"description": "This defines the date on which the diagram was created.",
			"description_de": "Datum, an dem das Diagramm erstellt wurde.",
			"readonly": false,
			"optional": true,
			"dateFormat": "j/m/y"
		}, {
			"id": "modificationdate",
			"type": "Date",
			"title": "Modification date",
			"title_de": "Geändert am",
			"value": "",
			"description": "This defines the date on which the diagram was last modified.",
			"description_de": "Datum der letzten Änderung.",
			"readonly": false,
			"optional": true,
			"dateFormat": "j/m/y"
		} ]
	} ],
	"stencils": [ {
		"type": "node",
		"id": "Camelrouting",
		"title": "Camelrouting",
		"groups": [ "Diagram" ],
		"view": "diagram.svg",
		"icon": "diagram.png",
		"mayBeRoot": true,
		"hide": true,
		"propertyPackages": [ "routeBaseAttributes", "diagram" ],
		"roles": [],
		"properties": [ {
			"id": "settings",
			"type": "Complex",
			"title": "Settings",
			"title_de": "Einstellungen",
			"value": "",
			"readonly": false,
			"optional": true,
			"complexItems": [ {
				"id": "name",
				"name": "Name",
				"type": "String",
				"filter": "[a-zA-Z0-9]",
				"value": "",
				"width": 150,
				"optional": false
			}, {
				"id": "const",
				"name": "Constant",
				"name_de": "Konstante",
				"type": "String",
				"value": null,
				"width": 150,
				"optional": false
			}, {
				"id": "source",
				"name": "Source",
				"name_de": "Quelle",
				"readonly": false,
				"type": "Choice",
				"value": "const",
				"items": "###settingssources_items",
				"width": 80,
				"optional": true
			}, {
				"id": "destination",
				"name": "Destination",
				"name_de": "Ziel",
				"readonly": false,
				"type": "Choice",
				"value": "property",
				"items": "###destination2_items",
				"width": 80,
				"optional": true
			} ]
		} ]
	}, {
		"type": "node",
		"id": "AsciidoctorEndpoint",
		"title": "Asciidoctor",
		"view": "asciidoctorendpoint.svg",
		"icon": "asciidoctorendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "asciidoctorProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ScriptConsumerEndpoint",
		"title": "ScriptConsumer",
		"view": "scriptconsumerendpoint.svg",
		"icon": "scriptconsumerendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "scriptconsumerProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "DeepZoomEndpoint",
		"title": "DeepZoom",
		"view": "deepzoomendpoint.svg",
		"icon": "deepzoomendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "deepZoomProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "DirectEndpoint",
		"title": "Direct",
		"view": "directendpoint.svg",
		"icon": "directendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "directProperties", "rpcProperties2" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "DocbookEndpoint",
		"title": "Docbook",
		"view": "docbookendpoint.svg",
		"icon": "docbookendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "docbookProperties", "assignmentProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "Endpoint",
		"title": "Generic",
		"view": "endpoint.svg",
		"icon": "genericendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "genericEndpointProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "EventBusEndpoint",
		"title": "EventBus",
		"view": "eventbusendpoint.svg",
		"icon": "eventbusendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "eventbusProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ExecEndpoint",
		"title": "Exec",
		"view": "execendpoint.svg",
		"icon": "execendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "execProperties",  "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "FileEndpoint",
		"title": "File",
		"view": "fileendpoint.svg",
		"icon": "fileendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "fileProperties", "commonFileProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "FtpEndpoint",
		"title": "FTP",
		"view": "ftpendpoint.svg",
		"icon": "ftpendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "ftpProperties", "commonFileProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "LocaldataEndpoint",
		"title": "Localdata",
		"view": "localdataendpoint.svg",
		"icon": "databaseendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "localdataProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "HazelcastEndpoint",
		"title": "Hazelcast",
		"view": "hazelcastendpoint.svg",
		"icon": "hazelcastendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "hazelcastProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "Http4Endpoint",
		"title": "Http",
		"view": "http4endpoint.svg",
		"icon": "http4endpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "http4Properties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "JMSEndpoint",
		"title": "JMS",
		"view": "jmsendpoint.svg",
		"icon": "jmsendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "jmsProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "KafkaEndpoint",
		"title": "Kafka",
		"view": "kafkaendpoint.svg",
		"icon": "kafkaendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine A-L" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "kafkaProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "MailEndpoint",
		"title": "Mail",
		"view": "mailendpoint.svg",
		"icon": "mailendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "mailProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ActivitiEndpoint",
		"title": "Activiti",
		"view": "activitiendpoint.svg",
		"icon": "activitiendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "activitiProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "QuartzEndpoint",
		"title": "Quartz",
		"view": "quartzendpoint.svg",
		"icon": "quartzendpoint.png",
		"groups": [ "Building blocks A-L" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "quartzProperties",  "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ProcessEndpoint",
		"title": "Process",
		"view": "processendpoint.svg",
		"icon": "processendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "processProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "PulsarEndpoint",
		"title": "Pulsar",
		"view": "pulsarendpoint.svg",
		"icon": "pulsarendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "pulsarProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "RepoEndpoint",
		"title": "Repo",
		"view": "repoendpoint.svg",
		"icon": "repoendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "repoProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ScpEventEndpoint",
		"title": "ScpEvent",
		"view": "scpeventendpoint.svg",
		"icon": "scpeventendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "scpEventProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "SedaEndpoint",
		"title": "Seda",
		"view": "sedaendpoint.svg",
		"icon": "sedaendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "sedaProperties", "sedaVmProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "SQLEndpoint",
		"title": "SQL",
		"view": "sqlendpoint.svg",
		"icon": "sqlendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "sqlProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "TemplateEndpoint",
		"title": "Template",
		"view": "templateendpoint.svg",
		"icon": "templateendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "templateProperties", "assignmentProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "TikaEndpoint",
		"title": "Tika",
		"view": "tikaendpoint.svg",
		"icon": "tikaendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "tikaProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "TabulaEndpoint",
		"title": "Tabula",
		"view": "tabulaendpoint.svg",
		"icon": "tabulaendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "tabulaProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "VfsEndpoint",
		"title": "VFS",
		"view": "vfsendpoint.svg",
		"icon": "vfsendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "vfsProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "VMEndpoint",
		"title": "VM",
		"view": "vmendpoint.svg",
		"icon": "vmendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "vmProperties", "sedaVmProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "WampEndpoint",
		"title": "Wamp",
		"view": "wampendpoint.svg",
		"icon": "wampendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "wampProperties", "rpcProperties", "publishProperties", "subscribeProperties", "permissionProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "WawiDocEndpoint",
		"title": "WawiDoc",
		"view": "wawidocendpoint.svg",
		"icon": "wawidocendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "wawidocProperties", "assignmentProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "WebsocketEndpoint",
		"title": "Websocket",
		"view": "websocketendpoint.svg",
		"icon": "websocketendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "websocketProperties", "permissionProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "XDocReportEndpoint",
		"title": "XDocReport",
		"view": "xdocreportendpoint.svg",
		"icon": "xdocreportendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "xdocreportProperties", "assignmentProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "XmppEndpoint",
		"title": "Xmpp",
		"view": "xmppendpoint.svg",
		"icon": "xmppendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "xmppProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ZeebeEndpoint",
		"title": "Zeebe",
		"view": "zeebeendpoint.svg",
		"icon": "processendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "zeebeProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "ZookeeperEndpoint",
		"title": "Zookeeper",
		"view": "zookeeperendpoint.svg",
		"icon": "zookeeperendpoint.png",
		"groups": [ "Building blocks M-Z" ],
		"groups_de": [ "Bausteine M-Z" ],
		"propertyPackages": [ "endpointProperties", "baseProperties", "colorProperties", "zookeeperProperties", "extraParamsProperties" ],
		"roles": [ "simpleConnectionStart", "OneInOutRole", "simpleConnectionEnd", "whenConnectionEnd", "EndpointsMorph", "all" ]
	}, {
		"type": "node",
		"id": "Delay",
		"title": "Delay",
		"groups": [ "Control Flow" ],
		"view": "delay.svg",
		"icon": "delay.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "delayProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "Loop",
		"title": "Loop",
		"groups": [ "Control Flow" ],
		"view": "loop.svg",
		"icon": "loop.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "loopProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "LoopDoWhile",
		"title": "LoopDoWhile",
		"groups": [ "Control Flow" ],
		"view": "loopdowhile.svg",
		"icon": "loopdowhile.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "loopProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "End",
		"title": "End",
		"groups": [ "Control Flow" ],
		"view": "end.svg",
		"icon": "end.png",
		"propertyPackages": [ "baseProperties", "colorProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "Transacted",
		"title": "Transacted",
		"groups": [ "Control Flow" ],
		"view": "transacted.svg",
		"icon": "transacted.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "transactedProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "Rollback",
		"title": "Rollback",
		"groups": [ "Control Flow" ],
		"view": "rollback.svg",
		"icon": "rollback.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "rollbackProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd" ]
	}, {
		"type": "node",
		"id": "onException",
		"title": "onException",
		"groups": [ "Control Flow" ],
		"view": "exception.svg",
		"icon": "exception.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "onExceptionProperties" ],
		"roles": [ "all", "OneOutRole", "simpleConnectionStart" ]
	}, {
		"type": "node",
		"id": "SetHeader",
		"title": "SetHeader",
		"groups": [ "Transformation" ],
		"view": "setheader.svg",
		"icon": "setheader.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "headersProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "SetProperty",
		"title": "SetProperty",
		"groups": [ "Transformation" ],
		"view": "setproperty.svg",
		"icon": "setproperty.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "propertiesProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "Marshal",
		"title": "Marshal",
		"groups": [ "Transformation" ],
		"view": "marshal.svg",
		"icon": "marshal.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "marshalProperties" ],
		"properties": [ {
			"id": "func",
			"value": "marshal",
			"visible": false
		} ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "Unmarshal",
		"title": "Unmarshal",
		"groups": [ "Transformation" ],
		"view": "unmarshal.svg",
		"icon": "marshal.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "marshalProperties" ],
		"properties": [ {
			"id": "func",
			"value": "unmarshal",
			"visible": false
		} ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "ConvertBodyTo",
		"title": "ConvertBodyTo",
		"groups": [ "Transformation" ],
		"view": "convertBodyTo.svg",
		"icon": "marshal.png",
		"propertyPackages": [ "baseProperties", "colorProperties" ],
		"properties": [ {
			"id": "type",
			"title": "Type",
			"value": "java.lang.String",
			"optional": false,
			"type": "String",
			"visible": true
		}, {
			"id": "charset",
			"title": "Charset",
			"title_de": "Zeichensatz",
			"value": "utf-8",
			"optional": false,
			"type": "String",
			"visible": true
		} ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "Processor",
		"title": "Processor",
		"groups": [ "Transformation" ],
		"view": "processor.svg",
		"icon": "processor.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "processorProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "Datamapper",
		"title": "Datamapper",
		"groups": [ "Transformation" ],
		"view": "datamapper.svg",
		"icon": "datamapper.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "datamapperProperties" ],
		"roles": [ "all", "OneInOutRole", "simpleConnectionStart", "simpleConnectionEnd", "whenConnectionEnd", "TransformerMorph" ]
	}, {
		"type": "node",
		"id": "MessageFilter",
		"title": "Filter",
		"groups": [ "Routing" ],
		"view": "messagefilter.svg",
		"icon": "messagefilter.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "messageFilterProperties" ],
		"roles": [ "all", "simpleConnectionStart", "simpleConnectionEnd", "RoutingMorph" ]
	}, {
		"type": "node",
		"id": "MessageChoice",
		"title": "Choice",
		"groups": [ "Routing" ],
		"view": "messagechoice.svg",
		"icon": "messagechoice.png",
		"propertyPackages": [ "baseProperties", "colorProperties" ],
		"properties": [],
		"roles": [ "all", "whenConnectionStart", "whenConnectionEnd", "simpleConnectionEnd", "RoutingMorph" ]
	}, {
		"type": "node",
		"id": "MessageAggregate",
		"title": "Aggregate",
		"groups": [ "Routing" ],
		"view": "messageaggregate.svg",
		"icon": "messageaggregate.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "aggregateProperties" ],
		"properties": [],
		"roles": [ "all", "simpleConnectionStart", "simpleConnectionEnd", "RoutingMorph" ]
	}, {
		"type": "node",
		"id": "MessageSplitter",
		"title": "Splitter",
		"groups": [ "Routing" ],
		"view": "messagesplitter.svg",
		"icon": "messagesplitter.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "splitterProperties" ],
		"properties": [],
		"roles": [ "all", "simpleConnectionStart", "simpleConnectionEnd", "RoutingMorph" ]
	}, {
		"type": "node",
		"id": "Recipientlist",
		"title": "Recipientlist",
		"groups": [ "Routing" ],
		"view": "recipientlist.svg",
		"icon": "recipientlist.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "recipientListProperties" ],
		"properties": [],
		"roles": [ "all", "simpleConnectionStart", "simpleConnectionEnd", "RoutingMorph" ]
	}, {
		"type": "edge",
		"id": "SimpleConnection",
		"title": "Connection",
		"title_de": "Verbindung",
		"groups": [ "Connecting Objects" ],
		"groups_de": [ "Konnektoren" ],
		"view": "simpleconnection.svg",
		"icon": "simpleconnection.png",
		"propertyPackages": [ "baseProperties", "colorProperties" ],
		"layout": [ {
			"type": "layout.bpmn2_0.sequenceflow"
		} ],
		"roles": [ "all", "Connection", "ConnectingObjectsMorph" ],
		"properties": []
	}, {
		"type": "node",
		"id": "Group",
		"title": "Group",
		"title_de": "Gruppe",
		"groups": [ "Containers" ],
		"description": "A container for defining a hierarchy of form controls.",
		"view": "new_group.svg",
		"icon": "new_group.png",
		"_roles": [ "container" ],

		"layout": [ {
			"type": "layout.rows",
			"marginTop": 30,
			"marginLeft": 30,
			"spacingX": 30,
			"spacingY": 30,
			"exclude": [ "http://b3mn.org/stencilset/xforms#Label" ]
		} ],
		"properties": [ {
			"id": "xf_id",
			"type": "String",
			"title": "Id",
			"prefix": "oryx",
			"value": "",
			"description": "",
			"readonly": false,
			"optional": true,
			"refToView": "",
			"length": "30"
		} ]
	}, {
		"type": "edge",
		"id": "WhenConnection",
		"title": "When Connection",
		"title_de": "Wenn Verbindung",
		"groups": [ "Connecting Objects" ],
		"groups_de": [ "Konnektoren" ],
		"view": "whenconnection.svg",
		"icon": "whenconnection.png",
		"propertyPackages": [ "baseProperties", "colorProperties", "expressionProperties" ],
		"roles": [ "all", "Connection", "ConnectingObjectsMorph" ],
		"properties": [ {
			"id": "defaultflow",
			"type": "Choice",
			"title": "Default flow",
			"title_de": "Standardfluß",
			"value": "none",
			"popular": true,
			"items": [ {
				"id": "none",
				"title": "No",
				"title_de": "Nein",
				"value": "none"
			}, {
				"id": "default",
				"title": "Yes",
				"title_de": "Ja",
				"value": "default",
				"icon": "type.default.png",
				"refToView": "default"
			} ]
		} ]
	} ],
	"rules": {
		"cardinalityRules": [ {
			"role": "OneInOutRole",
			"incomingEdges": [ {
				"role": "Connection",
				"maximum": 1
			} ],
			"outgoingEdges": [ {
				"role": "Connection",
				"maximum": 1
			} ]
		}, {
			"role": "OneOutRole",
			"incomingEdges": [ {
				"role": "Connection",
				"maximum": 0
			} ],
			"outgoingEdges": [ {
				"role": "Connection",
				"maximum": 1
			} ]
		}, {
			"role": "MessageChoice",
			"incomingEdges": [ {
				"role": "Connection",
				"maximum": 1
			} ]
		}, {
			"role": "MessageAggregate",
			"outgoingEdges": [ {
				"role": "Connection",
				"maximum": 1
			} ]
		} ],
		"connectionRules": [ {
			"role": "SimpleConnection",
			"connects": [ {
				"from": "simpleConnectionStart",
				"to": [ "simpleConnectionEnd" ]
			} ]
		}, {
			"role": "WhenConnection",
			"connects": [ {
				"from": "whenConnectionStart",
				"to": [ "whenConnectionEnd" ]
			} ]
		} ],
		"containmentRules": [ {
			"role": "Camelrouting",
			"contains": [ "all", "container" ]
		}, {
			"role": "container",
			"contains": [ "all" ]
		}, {
			"role": "SubProcess",
			"contains": [ "simpleConnectionStart", "simpleConnectionEnd", "EventSubprocess", "TextAnnotation" ]
		}, {
			"role": "EventSubProcess",
			"contains": [ "simpleConnectionStart", "simpleConnectionEnd", "TextAnnotation" ]
		} ],
		"morphingRules": [ {
			"role": "EndpointsMorph",
			"baseMorphs": [ "GenericEndpoint" ],
			"preserveBounds": true
		}, {
			"role": "TransformerMorph",
			"baseMorphs": [ "Processor" ],
			"preserveBounds": true
		}, {
			"role": "RoutingMorph",
			"baseMorphs": [ "MessageChoice" ]
		} ]
	},
	"definitions": {
		"language_items": [ {
			"id": "groovy",
			"title": "Groovy",
			"value": "groovy"
		}, {
			"id": "javascript",
			"title": "Javascript",
			"value": "javascript"
		} ],
		"yesno_items": [ {
			"id": "no",
			"title": "Process",
			"title_de": "Prozess",
			"value": "false"
		}, {
			"id": "yes",
			"title": "Task",
			"title_de": "Task",
			"value": "true"
		} ],
		"parametertype_items": [ {
			"id": "string",
			"title": "String",
			"value": "string"
		}, {
			"id": "integer",
			"title": "Integer",
			"value": "integer"
		}, {
			"id": "long",
			"title": "Long",
			"value": "long"
		}, {
			"id": "double",
			"title": "Double",
			"value": "double"
		}, {
			"id": "boolean",
			"title": "Boolean",
			"value": "boolean"
		}, {
			"id": "date",
			"title": "Date",
			"value": "date"
		}, {
			"id": "list",
			"title": "List",
			"value": "list"
		}, {
			"id": "map",
			"title": "Object",
			"value": "map"
		}, {
			"id": "any",
			"title": "Any",
			"value": "any"
		} ],
		"processcriteria_items": [ {
			"id": "processDefinitionKey",
			"title": "processDefinitionKey",
			"value": "processDefinitionKey"
		}, {
			"id": "processDefinitionId",
			"title": "processDefinitionId",
			"value": "processDefinitionId"
		}, {
			"id": "processInstanceId",
			"title": "processInstanceId",
			"enabled": "urivalue_operation=='getProcessVariables' || urivalue_operation=='queryProcessInstances'",
			"value": "processInstanceId"
		}, {
			"id": "businessKey",
			"title": "businessKey",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "businessKey"
		}, {
			"id": "activityId",
			"title": "activityId",
			"enabled": "urivalue_operation!='startProcess' && urivalue_operation!='queryProcessInstances'",
			"value": "activityId"
		}, {
			"id": "executionId",
			"title": "executionId",
			"enabled": "urivalue_operation!='startProcess' && urivalue_operation!='queryProcessInstances'",
			"value": "executionId"
		}, {
			"id": "processVariable",
			"title": "processVariable",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "processVariable"
		}, {
			"id": "startedAfter",
			"title": "startedAfter",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "startedAfter"
		}, {
			"id": "startedBefore",
			"title": "startedBefore",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "startedBefore"
		}, {
			"id": "finishedAfter",
			"title": "finishedAfter",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "finishedAfter"
		}, {
			"id": "finishedBefore",
			"title": "finishedBefore",
			"enabled": "urivalue_operation!='startProcess'",
			"value": "finishedBefore"
		}, {
			"id": "finished",
			"title": "finished",
			"enabled": "urivalue_operation=='queryProcessInstances'",
			"value": "finished"
		} ],
		"taskcriteria_items": [ {
			"id": "processDefinitionKey",
			"title": "processDefinitionKey",
			"value": "processDefinitionKey"
		}, {
			"id": "processDefinitionKeyLike",
			"title": "processDefinitionKeyLike",
			"value": "processDefinitionKeyLike"
		}, {
			"id": "processDefinitionId",
			"title": "processDefinitionId",
			"value": "processDefinitionId"
		}, {
			"id": "processInstanceId",
			"title": "processInstanceId",
			"value": "processInstanceId"
		}, {
			"id": "processInstanceBusinessKey",
			"title": "processInstanceBusinessKey",
			"value": "processInstanceBusinessKey"
		}, {
			"id": "taskDefinitionKey",
			"title": "taskDefinitionKey",
			"value": "taskDefinitionKey"
		}, {
			"id": "processVariableValueEquals",
			"title": "processVariableValueEquals",
			"value": "processVariableValueEquals"
		}, {
			"id": "processVariableValueLike",
			"title": "processVariableValueLike",
			"value": "processVariableValueLike"
		}, {
			"id": "processVariable",
			"title": "processVariable",
			"value": "processVariable"
		}, {
			"id": "taskVariable",
			"title": "taskVariable",
			"value": "taskVariable"
		}, {
			"id": "taskCandidateUser",
			"title": "taskCandidateUser",
			"value": "taskCandidateUser"
		}, {
			"id": "taskCandidateGroup",
			"title": "taskCandidateGroup",
			"value": "taskCandidateGroup"
		}, {
			"id": "taskCandidateGroupIn",
			"title": "taskCandidateGroupIn",
			"value": "taskCandidateGroupIn"
		}, {
			"id": "taskOwner",
			"title": "taskOwner",
			"value": "taskOwner"
		}, {
			"id": "taskAssignee",
			"title": "taskAssignee",
			"value": "taskAssignee"
		}, {
			"id": "taskAssigneeLike",
			"title": "taskAssigneeLike",
			"value": "taskAssigneeLike"
		}, {
			"id": "taskUnassigned",
			"title": "taskUnassigned",
			"value": "taskUnassigned"
		}, {
			"id": "active",
			"title": "active",
			"value": "active"
		} ],
		"objectcriteria_operations": [ {
			"id": "==",
			"title": "==",
			"value": "=="
		}, {
			"id": "!=",
			"title": "!=",
			"value": "!="
		}, {
			"id": ">",
			"title": ">",
			"value": ">"
		}, {
			"id": ">=",
			"title": ">=",
			"value": ">="
		}, {
			"id": "<",
			"title": "<",
			"value": "<"
		}, {
			"id": "<=",
			"title": "<=",
			"value": "<="
		}, {
			"id": "startsWith",
			"title": "startsWith",
			"value": "startsWith"
		}, {
			"id": "endsWith",
			"title": "endsWith",
			"value": "endsWith"
		}, {
			"id": "matches",
			"title": "matches",
			"value": "matches"
		}, {
			"id": "equalsIgnoreCase",
			"title": "equalsIgnoreCase",
			"value": "equalsIgnoreCase"
		}, {
			"id": "string",
			"title": "Expr in right column",
			"value": "string"
		} ],
		"settingssources_items": [ {
			"id": "const",
			"title": "Const",
			"value": "const"
		}, {
			"id": "branding",
			"title": "Branding",
			"value": "branding"
		} ],
		"destination_items": [ {
			"id": "property",
			"title": "Property",
			"value": "property"
		}, {
			"id": "header",
			"title": "Header",
			"value": "header"
		}, {
			"id": "body",
			"title": "Body",
			"value": "body"
		} ],
		"destination2_items": [ {
			"id": "property",
			"title": "Property",
			"value": "property"
		}, {
			"id": "header",
			"title": "Header",
			"value": "header"
		} ],
		"jms_items": [ {
			"id": "queue",
			"title": "Queue",
			"value": "queue"
		}, {
			"id": "topic",
			"title": "Topic",
			"value": "topic"
		} ]
	}
}

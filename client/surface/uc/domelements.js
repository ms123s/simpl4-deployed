/*
   Copyright 2008-2015 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright 2014-2016 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license/mit

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright 2011-2016 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license/mit

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright (c) Gyrocode
 @license     MIT License
 jquery.spinner v0.2.1 (https://vsn4ik.github.io/jquery.spinner/)
 Copyright 2013-2017 xixilive
 Licensed under the MIT license
 JqTree 1.4.8

 Copyright 2018 Marco Braak

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 Cropper v3.0.0-rc.3
 https://github.com/fengyuanchen/cropper

 Copyright (c) 2017 Fengyuan Chen
 Released under the MIT license

 Date: 2017-07-07T13:00:47.346Z
 jQuery QueryBuilder 1.3.0
 Copyright 2014-2015 Damien "Mistic" Sorel (http://www.strangeplanet.fr)
 Licensed under MIT (http://opensource.org/licenses/MIT)
 DataTables 1.10.12
 ©2008-2015 SpryMedia Ltd - datatables.net/license
 Responsive 2.1.0
 2014-2016 SpryMedia Ltd - datatables.net/license
 Scroller 1.4.2
 ©2011-2016 SpryMedia Ltd - datatables.net/license
 Checkboxes 1.2.11
  Copyright (c) Gyrocode (www.gyrocode.com)
  License: MIT License
 toast.visible*/
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
  a != Array.prototype && a != Object.prototype && (a[b] = c.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.symbolCounter_ = 0;
$jscomp.Symbol = function(a) {
  return $jscomp.SYMBOL_PREFIX + (a || "") + $jscomp.symbolCounter_++;
};
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.arrayIterator(this);
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.arrayIterator = function(a) {
  var b = 0;
  return $jscomp.iteratorPrototype(function() {
    return b < a.length ? {done:!1, value:a[b++]} : {done:!0};
  });
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.makeIterator = function(a) {
  $jscomp.initSymbolIterator();
  var b = a[Symbol.iterator];
  return b ? b.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.owns = function(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
};
$jscomp.polyfill = function(a, b, c, d) {
  if (b) {
    c = $jscomp.global;
    a = a.split(".");
    for (d = 0; d < a.length - 1; d++) {
      var f = a[d];
      f in c || (c[f] = {});
      c = c[f];
    }
    a = a[a.length - 1];
    d = c[a];
    b = b(d);
    b != d && null != b && $jscomp.defineProperty(c, a, {configurable:!0, writable:!0, value:b});
  }
};
$jscomp.polyfill("WeakMap", function(a) {
  function b(a) {
    $jscomp.owns(a, d) || $jscomp.defineProperty(a, d, {value:{}});
  }
  function c(a) {
    var c = Object[a];
    c && (Object[a] = function(a) {
      b(a);
      return c(a);
    });
  }
  if (function() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), c = Object.seal({}), d = new a([[b, 2], [c, 3]]);
      if (2 != d.get(b) || 3 != d.get(c)) {
        return !1;
      }
      d.delete(b);
      d.set(c, 4);
      return !d.has(b) && 4 == d.get(c);
    } catch (r) {
      return !1;
    }
  }()) {
    return a;
  }
  var d = "$jscomp_hidden_" + Math.random().toString().substring(2);
  c("freeze");
  c("preventExtensions");
  c("seal");
  var f = 0, g = function(a) {
    this.id_ = (f += Math.random() + 1).toString();
    if (a) {
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  g.prototype.set = function(a, c) {
    b(a);
    if (!$jscomp.owns(a, d)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[d][this.id_] = c;
    return this;
  };
  g.prototype.get = function(a) {
    return $jscomp.owns(a, d) ? a[d][this.id_] : void 0;
  };
  g.prototype.has = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_);
  };
  g.prototype.delete = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_) ? delete a[d][this.id_] : !1;
  };
  return g;
}, "es6-impl", "es3");
$jscomp.iteratorFromArray = function(a, b) {
  $jscomp.initSymbolIterator();
  a instanceof String && (a += "");
  var c = 0, d = {next:function() {
    if (c < a.length) {
      var f = c++;
      return {value:b(f, a[f]), done:!1};
    }
    d.next = function() {
      return {done:!0, value:void 0};
    };
    return d.next();
  }};
  d[Symbol.iterator] = function() {
    return d;
  };
  return d;
};
$jscomp.polyfill("Array.prototype.keys", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a) {
      return a;
    });
  };
}, "es6-impl", "es3");
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function(a) {
  function b() {
    this.batch_ = null;
  }
  function c(a) {
    return a instanceof f ? a : new f(function(b, c) {
      b(a);
    });
  }
  if (a && !$jscomp.FORCE_POLYFILL_PROMISE) {
    return a;
  }
  b.prototype.asyncExecute = function(a) {
    null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_());
    this.batch_.push(a);
    return this;
  };
  b.prototype.asyncExecuteBatch_ = function() {
    var a = this;
    this.asyncExecuteFunction(function() {
      a.executeBatch_();
    });
  };
  var d = $jscomp.global.setTimeout;
  b.prototype.asyncExecuteFunction = function(a) {
    d(a, 0);
  };
  b.prototype.executeBatch_ = function() {
    for (; this.batch_ && this.batch_.length;) {
      var a = this.batch_;
      this.batch_ = [];
      for (var b = 0; b < a.length; ++b) {
        var c = a[b];
        delete a[b];
        try {
          c();
        } catch (r) {
          this.asyncThrow_(r);
        }
      }
    }
    this.batch_ = null;
  };
  b.prototype.asyncThrow_ = function(a) {
    this.asyncExecuteFunction(function() {
      throw a;
    });
  };
  var f = function(a) {
    this.state_ = 0;
    this.result_ = void 0;
    this.onSettledCallbacks_ = [];
    var b = this.createResolveAndReject_();
    try {
      a(b.resolve, b.reject);
    } catch (u) {
      b.reject(u);
    }
  };
  f.prototype.createResolveAndReject_ = function() {
    function a(a) {
      return function(d) {
        c || (c = !0, a.call(b, d));
      };
    }
    var b = this, c = !1;
    return {resolve:a(this.resolveTo_), reject:a(this.reject_)};
  };
  f.prototype.resolveTo_ = function(a) {
    if (a === this) {
      this.reject_(new TypeError("A Promise cannot resolve to itself"));
    } else {
      if (a instanceof f) {
        this.settleSameAsPromise_(a);
      } else {
        a: {
          switch(typeof a) {
            case "object":
              var b = null != a;
              break a;
            case "function":
              b = !0;
              break a;
            default:
              b = !1;
          }
        }
        b ? this.resolveToNonPromiseObj_(a) : this.fulfill_(a);
      }
    }
  };
  f.prototype.resolveToNonPromiseObj_ = function(a) {
    var b = void 0;
    try {
      b = a.then;
    } catch (u) {
      this.reject_(u);
      return;
    }
    "function" == typeof b ? this.settleSameAsThenable_(b, a) : this.fulfill_(a);
  };
  f.prototype.reject_ = function(a) {
    this.settle_(2, a);
  };
  f.prototype.fulfill_ = function(a) {
    this.settle_(1, a);
  };
  f.prototype.settle_ = function(a, b) {
    if (0 != this.state_) {
      throw Error("Cannot settle(" + a + ", " + b | "): Promise already settled in state" + this.state_);
    }
    this.state_ = a;
    this.result_ = b;
    this.executeOnSettledCallbacks_();
  };
  f.prototype.executeOnSettledCallbacks_ = function() {
    if (null != this.onSettledCallbacks_) {
      for (var a = this.onSettledCallbacks_, b = 0; b < a.length; ++b) {
        a[b].call(), a[b] = null;
      }
      this.onSettledCallbacks_ = null;
    }
  };
  var g = new b;
  f.prototype.settleSameAsPromise_ = function(a) {
    var b = this.createResolveAndReject_();
    a.callWhenSettled_(b.resolve, b.reject);
  };
  f.prototype.settleSameAsThenable_ = function(a, b) {
    var c = this.createResolveAndReject_();
    try {
      a.call(b, c.resolve, c.reject);
    } catch (r) {
      c.reject(r);
    }
  };
  f.prototype.then = function(a, b) {
    function c(a, b) {
      return "function" == typeof a ? function(b) {
        try {
          d(a(b));
        } catch (l) {
          g(l);
        }
      } : b;
    }
    var d, g, h = new f(function(a, b) {
      d = a;
      g = b;
    });
    this.callWhenSettled_(c(a, d), c(b, g));
    return h;
  };
  f.prototype.catch = function(a) {
    return this.then(void 0, a);
  };
  f.prototype.callWhenSettled_ = function(a, b) {
    function c() {
      switch(d.state_) {
        case 1:
          a(d.result_);
          break;
        case 2:
          b(d.result_);
          break;
        default:
          throw Error("Unexpected state: " + d.state_);
      }
    }
    var d = this;
    null == this.onSettledCallbacks_ ? g.asyncExecute(c) : this.onSettledCallbacks_.push(function() {
      g.asyncExecute(c);
    });
  };
  f.resolve = c;
  f.reject = function(a) {
    return new f(function(b, c) {
      c(a);
    });
  };
  f.race = function(a) {
    return new f(function(b, d) {
      for (var f = $jscomp.makeIterator(a), g = f.next(); !g.done; g = f.next()) {
        c(g.value).callWhenSettled_(b, d);
      }
    });
  };
  f.all = function(a) {
    var b = $jscomp.makeIterator(a), d = b.next();
    return d.done ? c([]) : new f(function(a, f) {
      function g(b) {
        return function(c) {
          h[b] = c;
          m--;
          0 == m && a(h);
        };
      }
      var h = [], m = 0;
      do {
        h.push(void 0), m++, c(d.value).callWhenSettled_(g(h.length - 1), f), d = b.next();
      } while (!d.done);
    });
  };
  return f;
}, "es6-impl", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, c, d) {
    var b = this.length || 0;
    0 > c && (c = Math.max(0, b + c));
    if (null == d || d > b) {
      d = b;
    }
    d = Number(d);
    0 > d && (d = Math.max(0, b + d));
    for (c = Number(c || 0); c < d; c++) {
      this[c] = a;
    }
    return this;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Array.from", function(a) {
  return a ? a : function(a, c, d) {
    $jscomp.initSymbolIterator();
    c = null != c ? c : function(a) {
      return a;
    };
    var b = [], g = a[Symbol.iterator];
    if ("function" == typeof g) {
      for (a = g.call(a); !(g = a.next()).done;) {
        b.push(c.call(d, g.value));
      }
    } else {
      for (var g = a.length, h = 0; h < g; h++) {
        b.push(c.call(d, a[h]));
      }
    }
    return b;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Math.sign", function(a) {
  return a ? a : function(a) {
    a = Number(a);
    return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
  };
}, "es6-impl", "es3");
$jscomp.checkStringArgs = function(a, b, c) {
  if (null == a) {
    throw new TypeError("The 'this' value for String.prototype." + c + " must not be null or undefined");
  }
  if (b instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + c + " must not be a regular expression");
  }
  return a + "";
};
$jscomp.polyfill("String.prototype.startsWith", function(a) {
  return a ? a : function(a, c) {
    var b = $jscomp.checkStringArgs(this, a, "startsWith");
    a += "";
    var f = b.length, g = a.length;
    c = Math.max(0, Math.min(c | 0, b.length));
    for (var h = 0; h < g && c < f;) {
      if (b[c++] != a[h++]) {
        return !1;
      }
    }
    return h >= g;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("String.prototype.endsWith", function(a) {
  return a ? a : function(a, c) {
    var b = $jscomp.checkStringArgs(this, a, "endsWith");
    a += "";
    void 0 === c && (c = b.length);
    c = Math.max(0, Math.min(c | 0, b.length));
    for (var f = a.length; 0 < f && 0 < c;) {
      if (b[--c] != a[--f]) {
        return !1;
      }
    }
    return 0 >= f;
  };
}, "es6-impl", "es3");
$jscomp.findInternal = function(a, b, c) {
  a instanceof String && (a = String(a));
  for (var d = a.length, f = 0; f < d; f++) {
    var g = a[f];
    if (b.call(c, g, f, a)) {
      return {i:f, v:g};
    }
  }
  return {i:-1, v:void 0};
};
$jscomp.polyfill("Array.prototype.find", function(a) {
  return a ? a : function(a, c) {
    return $jscomp.findInternal(this, a, c).v;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Object.setPrototypeOf", function(a) {
  return a ? a : "object" != typeof "".__proto__ ? null : function(a, c) {
    a.__proto__ = c;
    if (a.__proto__ !== c) {
      throw new TypeError(a + " is not extensible");
    }
    return a;
  };
}, "es6", "es5");
$jscomp.polyfill("Array.prototype.values", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a, c) {
      return c;
    });
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.findIndex", function(a) {
  return a ? a : function(a, c) {
    return $jscomp.findInternal(this, a, c).i;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Number.isFinite", function(a) {
  return a ? a : function(a) {
    return "number" !== typeof a ? !1 : !isNaN(a) && Infinity !== a && -Infinity !== a;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Number.isInteger", function(a) {
  return a ? a : function(a) {
    return Number.isFinite(a) ? a === Math.floor(a) : !1;
  };
}, "es6-impl", "es3");
(function() {
  function a() {
    document.body.removeAttribute("unresolved");
  }
  window.WebComponents ? addEventListener("WebComponentsReady", a) : "interactive" === document.readyState || "complete" === document.readyState ? a() : addEventListener("DOMContentLoaded", a);
})();
window.Polymer = {Settings:function() {
  for (var a = window.Polymer || {}, b = location.search.slice(1).split("&"), c = 0, d; c < b.length && (d = b[c]); c++) {
    d = d.split("="), d[0] && (a[d[0]] = d[1] || !0);
  }
  a.wantShadow = "shadow" === a.dom;
  a.hasShadow = !!Element.prototype.createShadowRoot;
  a.nativeShadow = a.hasShadow && !window.ShadowDOMPolyfill;
  a.useShadow = a.wantShadow && a.hasShadow;
  a.hasNativeImports = "import" in document.createElement("link");
  a.useNativeImports = a.hasNativeImports;
  a.useNativeCustomElements = !window.CustomElements || window.CustomElements.useNative;
  a.useNativeShadow = a.useShadow && a.nativeShadow;
  a.usePolyfillProto = !a.useNativeCustomElements && !Object.__proto__;
  return a;
}()};
(function() {
  var a = window.Polymer;
  window.Polymer = function(a) {
    "function" === typeof a && (a = a.prototype);
    a || (a = {});
    var c = b(a);
    a = c.prototype;
    var d = {prototype:a};
    a.extends && (d.extends = a.extends);
    Polymer.telemetry._registrate(a);
    document.registerElement(a.is, d);
    return c;
  };
  var b = function(a) {
    var b = Polymer.Base;
    a.extends && (b = Polymer.Base._getExtendedPrototype(a.extends));
    a = Polymer.Base.chainObject(a, b);
    a.registerCallback();
    return a.constructor;
  };
  if (a) {
    for (var c in a) {
      Polymer[c] = a[c];
    }
  }
  Polymer.Class = b;
})();
Polymer.telemetry = {registrations:[], _regLog:function(a) {
  console.log("[" + a.is + "]: registered");
}, _registrate:function(a) {
  this.registrations.push(a);
  Polymer.log && this._regLog(a);
}, dumpRegistrations:function() {
  this.registrations.forEach(this._regLog);
}};
Object.defineProperty(window, "currentImport", {enumerable:!0, configurable:!0, get:function() {
  return (document._currentScript || document.currentScript).ownerDocument;
}});
Polymer.RenderStatus = {_ready:!1, _callbacks:[], whenReady:function(a) {
  this._ready ? a() : this._callbacks.push(a);
}, _makeReady:function() {
  this._ready = !0;
  for (var a = 0; a < this._callbacks.length; a++) {
    this._callbacks[a]();
  }
  this._callbacks = [];
}, _catchFirstRender:function() {
  requestAnimationFrame(function() {
    Polymer.RenderStatus._makeReady();
  });
}, _afterNextRenderQueue:[], _waitingNextRender:!1, afterNextRender:function(a, b, c) {
  this._watchNextRender();
  this._afterNextRenderQueue.push([a, b, c]);
}, _watchNextRender:function() {
  if (!this._waitingNextRender) {
    this._waitingNextRender = !0;
    var a = function() {
      Polymer.RenderStatus._flushNextRender();
    };
    this._ready ? requestAnimationFrame(a) : this.whenReady(a);
  }
}, _flushNextRender:function() {
  var a = this;
  setTimeout(function() {
    a._flushRenderCallbacks(a._afterNextRenderQueue);
    a._afterNextRenderQueue = [];
    a._waitingNextRender = !1;
  });
}, _flushRenderCallbacks:function(a) {
  for (var b = 0, c; b < a.length; b++) {
    c = a[b], c[1].apply(c[0], c[2] || Polymer.nar);
  }
}};
window.HTMLImports ? HTMLImports.whenReady(function() {
  Polymer.RenderStatus._catchFirstRender();
}) : Polymer.RenderStatus._catchFirstRender();
Polymer.ImportStatus = Polymer.RenderStatus;
Polymer.ImportStatus.whenLoaded = Polymer.ImportStatus.whenReady;
(function() {
  var a = Polymer.Settings;
  Polymer.Base = {__isPolymerInstance__:!0, _addFeature:function(a) {
    this.extend(this, a);
  }, registerCallback:function() {
    this._desugarBehaviors();
    this._doBehavior("beforeRegister");
    this._registerFeatures();
    a.lazyRegister || this.ensureRegisterFinished();
  }, createdCallback:function() {
    this.__hasRegisterFinished || this._ensureRegisterFinished(this.__proto__);
    Polymer.telemetry.instanceCount++;
    this.root = this;
    this._doBehavior("created");
    this._initFeatures();
  }, ensureRegisterFinished:function() {
    this._ensureRegisterFinished(this);
  }, _ensureRegisterFinished:function(a) {
    a.__hasRegisterFinished !== a.is && (a.__hasRegisterFinished = a.is, a._finishRegisterFeatures && a._finishRegisterFeatures(), a._doBehavior("registered"));
  }, attachedCallback:function() {
    var a = this;
    Polymer.RenderStatus.whenReady(function() {
      a.isAttached = !0;
      a._doBehavior("attached");
    });
  }, detachedCallback:function() {
    this.isAttached = !1;
    this._doBehavior("detached");
  }, attributeChangedCallback:function(a, c, d) {
    this._attributeChangedImpl(a);
    this._doBehavior("attributeChanged", [a, c, d]);
  }, _attributeChangedImpl:function(a) {
    this._setAttributeToProperty(this, a);
  }, extend:function(a, c) {
    if (a && c) {
      for (var b = Object.getOwnPropertyNames(c), f = 0, g; f < b.length && (g = b[f]); f++) {
        this.copyOwnProperty(g, c, a);
      }
    }
    return a || c;
  }, mixin:function(a, c) {
    for (var b in c) {
      a[b] = c[b];
    }
    return a;
  }, copyOwnProperty:function(a, c, d) {
    (c = Object.getOwnPropertyDescriptor(c, a)) && Object.defineProperty(d, a, c);
  }, _log:console.log.apply.bind(console.log, console), _warn:console.warn.apply.bind(console.warn, console), _error:console.error.apply.bind(console.error, console), _logf:function() {
    return this._logPrefix.concat([this.is]).concat(Array.prototype.slice.call(arguments, 0));
  }};
  Polymer.Base._logPrefix = window.chrome || /firefox/i.test(navigator.userAgent) ? ["%c[%s::%s]:", "font-weight: bold; background-color:#EEEE00;"] : ["[%s::%s]:"];
  Polymer.Base.chainObject = function(a, c) {
    a && c && a !== c && (Object.__proto__ || (a = Polymer.Base.extend(Object.create(c), a)), a.__proto__ = c);
    return a;
  };
  Polymer.Base = Polymer.Base.chainObject(Polymer.Base, HTMLElement.prototype);
  Polymer.instanceof = window.CustomElements ? CustomElements.instanceof : function(a, c) {
    return a instanceof c;
  };
  Polymer.isInstance = function(a) {
    return !(!a || !a.__isPolymerInstance__);
  };
  Polymer.telemetry.instanceCount = 0;
})();
(function() {
  var a = {}, b = {}, c = function() {
    return document.createElement("dom-module");
  };
  c.prototype = Object.create(HTMLElement.prototype);
  Polymer.Base.extend(c.prototype, {constructor:c, createdCallback:function() {
    this.register();
  }, register:function(c) {
    if (c = c || this.id || this.getAttribute("name") || this.getAttribute("is")) {
      this.id = c, a[c] = this, b[c.toLowerCase()] = this;
    }
  }, import:function(c, g) {
    if (c) {
      var f = a[c] || b[c.toLowerCase()];
      if (!f) {
        a: {
          if (d) {
            for (var f = document._currentScript || document.currentScript, f = (f && f.ownerDocument || document).querySelectorAll("dom-module"), m = f.length - 1, u; 0 <= m && (u = f[m]); m--) {
              if (u.__upgraded__) {
                break a;
              } else {
                CustomElements.upgrade(u);
              }
            }
          }
        }
        f = a[c] || b[c.toLowerCase()];
      }
      f && g && (f = f.querySelector(g));
      return f;
    }
  }});
  var d = window.CustomElements && !CustomElements.useNative;
  document.registerElement("dom-module", c);
})();
Polymer.Base._addFeature({_prepIs:function() {
  if (!this.is) {
    var a = (document._currentScript || document.currentScript).parentNode;
    "dom-module" === a.localName && (this.is = a.id || a.getAttribute("name") || a.getAttribute("is"));
  }
  this.is && (this.is = this.is.toLowerCase());
}});
Polymer.Base._addFeature({behaviors:[], _desugarBehaviors:function() {
  this.behaviors.length && (this.behaviors = this._desugarSomeBehaviors(this.behaviors));
}, _desugarSomeBehaviors:function(a) {
  var b = [];
  a = this._flattenBehaviorsList(a);
  for (var c = a.length - 1; 0 <= c; c--) {
    var d = a[c];
    -1 === b.indexOf(d) && (this._mixinBehavior(d), b.unshift(d));
  }
  return b;
}, _flattenBehaviorsList:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    var d = a[c];
    d instanceof Array ? b = b.concat(this._flattenBehaviorsList(d)) : d ? b.push(d) : this._warn(this._logf("_flattenBehaviorsList", "behavior is null, check for missing or 404 import"));
  }
  return b;
}, _mixinBehavior:function(a) {
  for (var b = Object.getOwnPropertyNames(a), c = 0, d; c < b.length && (d = b[c]); c++) {
    Polymer.Base._behaviorProperties[d] || this.hasOwnProperty(d) || this.copyOwnProperty(d, a, this);
  }
}, _prepBehaviors:function() {
  this._prepFlattenedBehaviors(this.behaviors);
}, _prepFlattenedBehaviors:function(a) {
  for (var b = 0, c = a.length; b < c; b++) {
    this._prepBehavior(a[b]);
  }
  this._prepBehavior(this);
}, _doBehavior:function(a, b) {
  for (var c = 0; c < this.behaviors.length; c++) {
    this._invokeBehavior(this.behaviors[c], a, b);
  }
  this._invokeBehavior(this, a, b);
}, _invokeBehavior:function(a, b, c) {
  (a = a[b]) && a.apply(this, c || Polymer.nar);
}, _marshalBehaviors:function() {
  for (var a = 0; a < this.behaviors.length; a++) {
    this._marshalBehavior(this.behaviors[a]);
  }
  this._marshalBehavior(this);
}});
Polymer.Base._behaviorProperties = {hostAttributes:!0, beforeRegister:!0, registered:!0, properties:!0, observers:!0, listeners:!0, created:!0, attached:!0, detached:!0, attributeChanged:!0, ready:!0};
Polymer.Base._addFeature({_getExtendedPrototype:function(a) {
  return this._getExtendedNativePrototype(a);
}, _nativePrototypes:{}, _getExtendedNativePrototype:function(a) {
  var b = this._nativePrototypes[a];
  b || (b = this.getNativePrototype(a), b = this.extend(Object.create(b), Polymer.Base), this._nativePrototypes[a] = b);
  return b;
}, getNativePrototype:function(a) {
  return Object.getPrototypeOf(document.createElement(a));
}});
Polymer.Base._addFeature({_prepConstructor:function() {
  this._factoryArgs = this.extends ? [this.extends, this.is] : [this.is];
  var a = function() {
    return this._factory(arguments);
  };
  this.hasOwnProperty("extends") && (a.extends = this.extends);
  Object.defineProperty(this, "constructor", {value:a, writable:!0, configurable:!0});
  a.prototype = this;
}, _factory:function(a) {
  var b = document.createElement.apply(document, this._factoryArgs);
  this.factoryImpl && this.factoryImpl.apply(b, a);
  return b;
}});
Polymer.nob = Object.create(null);
Polymer.Base._addFeature({properties:{}, getPropertyInfo:function(a) {
  var b = this._getPropertyInfo(a, this.properties);
  if (!b) {
    for (var c = 0; c < this.behaviors.length; c++) {
      if (b = this._getPropertyInfo(a, this.behaviors[c].properties)) {
        return b;
      }
    }
  }
  return b || Polymer.nob;
}, _getPropertyInfo:function(a, b) {
  var c = b && b[a];
  "function" === typeof c && (c = b[a] = {type:c});
  c && (c.defined = !0);
  return c;
}, _prepPropertyInfo:function() {
  this._propertyInfo = {};
  for (var a = 0; a < this.behaviors.length; a++) {
    this._addPropertyInfo(this._propertyInfo, this.behaviors[a].properties);
  }
  this._addPropertyInfo(this._propertyInfo, this.properties);
  this._addPropertyInfo(this._propertyInfo, this._propertyEffects);
}, _addPropertyInfo:function(a, b) {
  if (b) {
    var c;
    for (c in b) {
      var d = a[c];
      var f = b[c];
      if ("_" !== c[0] || f.readOnly) {
        a[c] ? (d.type || (d.type = f.type), d.readOnly || (d.readOnly = f.readOnly)) : a[c] = {type:"function" === typeof f ? f : f.type, readOnly:f.readOnly, attribute:Polymer.CaseMap.camelToDashCase(c)};
      }
    }
  }
}});
Polymer.CaseMap = {_caseMap:{}, _rx:{dashToCamel:/-[a-z]/g, camelToDash:/([A-Z])/g}, dashToCamelCase:function(a) {
  return this._caseMap[a] || (this._caseMap[a] = 0 > a.indexOf("-") ? a : a.replace(this._rx.dashToCamel, function(a) {
    return a[1].toUpperCase();
  }));
}, camelToDashCase:function(a) {
  return this._caseMap[a] || (this._caseMap[a] = a.replace(this._rx.camelToDash, "-$1").toLowerCase());
}};
Polymer.Base._addFeature({_addHostAttributes:function(a) {
  this._aggregatedAttributes || (this._aggregatedAttributes = {});
  a && this.mixin(this._aggregatedAttributes, a);
}, _marshalHostAttributes:function() {
  this._aggregatedAttributes && this._applyAttributes(this, this._aggregatedAttributes);
}, _applyAttributes:function(a, b) {
  for (var c in b) {
    this.hasAttribute(c) || "class" === c || this.serializeValueToAttribute(b[c], c, this);
  }
}, _marshalAttributes:function() {
  this._takeAttributesToModel(this);
}, _takeAttributesToModel:function(a) {
  if (this.hasAttributes()) {
    for (var b in this._propertyInfo) {
      var c = this._propertyInfo[b];
      this.hasAttribute(c.attribute) && this._setAttributeToProperty(a, c.attribute, b, c);
    }
  }
}, _setAttributeToProperty:function(a, b, c, d) {
  this._serializing || (c = c || Polymer.CaseMap.dashToCamelCase(b), (d = d || this._propertyInfo && this._propertyInfo[c]) && !d.readOnly && (b = this.getAttribute(b), a[c] = this.deserialize(b, d.type)));
}, _serializing:!1, reflectPropertyToAttribute:function(a, b, c) {
  this._serializing = !0;
  c = void 0 === c ? this[a] : c;
  this.serializeValueToAttribute(c, b || Polymer.CaseMap.camelToDashCase(a));
  this._serializing = !1;
}, serializeValueToAttribute:function(a, b, c) {
  a = this.serialize(a);
  c = c || this;
  void 0 === a ? c.removeAttribute(b) : c.setAttribute(b, a);
}, deserialize:function(a, b) {
  switch(b) {
    case Number:
      a = Number(a);
      break;
    case Boolean:
      a = null != a;
      break;
    case Object:
      try {
        a = JSON.parse(a);
      } catch (c) {
      }
      break;
    case Array:
      try {
        a = JSON.parse(a);
      } catch (c) {
        a = null, console.warn("Polymer::Attributes: couldn`t decode Array as JSON");
      }
      break;
    case Date:
      a = new Date(a);
  }
  return a;
}, serialize:function(a) {
  switch(typeof a) {
    case "boolean":
      return a ? "" : void 0;
    case "object":
      if (a instanceof Date) {
        return a.toString();
      }
      if (a) {
        try {
          return JSON.stringify(a);
        } catch (b) {
          return "";
        }
      }
    default:
      return null != a ? a : void 0;
  }
}});
Polymer.version = "1.4.0";
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepBehaviors();
  this._prepConstructor();
  this._prepPropertyInfo();
}, _prepBehavior:function(a) {
  this._addHostAttributes(a.hostAttributes);
}, _marshalBehavior:function(a) {
}, _initFeatures:function() {
  this._marshalHostAttributes();
  this._marshalBehaviors();
}});
Polymer.Base._addFeature({_prepTemplate:function() {
  void 0 === this._template && (this._template = Polymer.DomModule.import(this.is, "template"));
  this._template && this._template.hasAttribute("is") && this._warn(this._logf("_prepTemplate", "top-level Polymer template must not be a type-extension, found", this._template, "Move inside simple <template>."));
  this._template && !this._template.content && window.HTMLTemplateElement && HTMLTemplateElement.decorate && HTMLTemplateElement.decorate(this._template);
}, _stampTemplate:function() {
  this._template && (this.root = this.instanceTemplate(this._template));
}, instanceTemplate:function(a) {
  return document.importNode(a._content || a.content, !0);
}});
(function() {
  var a = Polymer.Base.attachedCallback;
  Polymer.Base._addFeature({_hostStack:[], ready:function() {
  }, _registerHost:function(a) {
    (this.dataHost = a = a || Polymer.Base._hostStack[Polymer.Base._hostStack.length - 1]) && a._clients && a._clients.push(this);
    this._clients = null;
    this._clientsReadied = !1;
  }, _beginHosting:function() {
    Polymer.Base._hostStack.push(this);
    this._clients || (this._clients = []);
  }, _endHosting:function() {
    Polymer.Base._hostStack.pop();
  }, _tryReady:function() {
    this._readied = !1;
    this._canReady() && this._ready();
  }, _canReady:function() {
    return !this.dataHost || this.dataHost._clientsReadied;
  }, _ready:function() {
    this._beforeClientsReady();
    this._template && (this._setupRoot(), this._readyClients());
    this._clientsReadied = !0;
    this._clients = null;
    this._afterClientsReady();
    this._readySelf();
  }, _readyClients:function() {
    this._beginDistribute();
    var a = this._clients;
    if (a) {
      for (var c = 0, d = a.length, f; c < d && (f = a[c]); c++) {
        f._ready();
      }
    }
    this._finishDistribute();
  }, _readySelf:function() {
    this._doBehavior("ready");
    this._readied = !0;
    this._attachedPending && (this._attachedPending = !1, this.attachedCallback());
  }, _beforeClientsReady:function() {
  }, _afterClientsReady:function() {
  }, _beforeAttached:function() {
  }, attachedCallback:function() {
    this._readied ? (this._beforeAttached(), a.call(this)) : this._attachedPending = !0;
  }});
})();
Polymer.ArraySplice = function() {
  function a(a, b, f) {
    return {index:a, removed:b, addedCount:f};
  }
  function b() {
  }
  b.prototype = {calcEditDistances:function(a, b, f, g, h, m) {
    m = m - h + 1;
    f = f - b + 1;
    for (var c = Array(m), d = 0; d < m; d++) {
      c[d] = Array(f), c[d][0] = d;
    }
    for (var n = 0; n < f; n++) {
      c[0][n] = n;
    }
    for (d = 1; d < m; d++) {
      for (n = 1; n < f; n++) {
        if (this.equals(a[b + n - 1], g[h + d - 1])) {
          c[d][n] = c[d - 1][n - 1];
        } else {
          var v = c[d - 1][n] + 1, w = c[d][n - 1] + 1;
          c[d][n] = v < w ? v : w;
        }
      }
    }
    return c;
  }, spliceOperationsFromEditDistances:function(a) {
    for (var b = a.length - 1, c = a[0].length - 1, g = a[b][c], h = []; 0 < b || 0 < c;) {
      if (0 == b) {
        h.push(2), c--;
      } else {
        if (0 == c) {
          h.push(3), b--;
        } else {
          var m = a[b - 1][c - 1], u = a[b - 1][c], r = a[b][c - 1];
          var n = u < r ? u < m ? u : m : r < m ? r : m;
          n == m ? (m == g ? h.push(0) : (h.push(1), g = m), b--, c--) : n == u ? (h.push(3), b--, g = u) : (h.push(2), c--, g = r);
        }
      }
    }
    h.reverse();
    return h;
  }, calcSplices:function(b, d, f, g, h, m) {
    var c = 0, r = 0, n = Math.min(f - d, m - h);
    0 == d && 0 == h && (c = this.sharedPrefix(b, g, n));
    f == b.length && m == g.length && (r = this.sharedSuffix(b, g, n - c));
    d += c;
    h += c;
    f -= r;
    m -= r;
    if (0 == f - d && 0 == m - h) {
      return [];
    }
    if (d == f) {
      for (b = a(d, [], 0); h < m;) {
        b.removed.push(g[h++]);
      }
      return [b];
    }
    if (h == m) {
      return [a(d, [], f - d)];
    }
    m = this.spliceOperationsFromEditDistances(this.calcEditDistances(b, d, f, g, h, m));
    b = void 0;
    f = [];
    for (c = 0; c < m.length; c++) {
      switch(m[c]) {
        case 0:
          b && (f.push(b), b = void 0);
          d++;
          h++;
          break;
        case 1:
          b || (b = a(d, [], 0));
          b.addedCount++;
          d++;
          b.removed.push(g[h]);
          h++;
          break;
        case 2:
          b || (b = a(d, [], 0));
          b.addedCount++;
          d++;
          break;
        case 3:
          b || (b = a(d, [], 0)), b.removed.push(g[h]), h++;
      }
    }
    b && f.push(b);
    return f;
  }, sharedPrefix:function(a, b, f) {
    for (var c = 0; c < f; c++) {
      if (!this.equals(a[c], b[c])) {
        return c;
      }
    }
    return f;
  }, sharedSuffix:function(a, b, f) {
    for (var c = a.length, d = b.length, m = 0; m < f && this.equals(a[--c], b[--d]);) {
      m++;
    }
    return m;
  }, calculateSplices:function(a, b) {
    return this.calcSplices(a, 0, a.length, b, 0, b.length);
  }, equals:function(a, b) {
    return a === b;
  }};
  return new b;
}();
Polymer.domInnerHTML = function() {
  function a(a) {
    switch(a) {
      case "&":
        return "&amp;";
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case '"':
        return "&quot;";
      case " ":
        return "&nbsp;";
    }
  }
  function b(a) {
    for (var b = {}, c = 0; c < a.length; c++) {
      b[a[c]] = !0;
    }
    return b;
  }
  function c(b, u) {
    b instanceof HTMLTemplateElement && (b = b.content);
    for (var m = "", n = Polymer.dom(b).childNodes, v = 0, w = n.length, y; v < w && (y = n[v]); v++) {
      a: {
        var q = y;
        var l = b;
        var p = u;
        switch(q.nodeType) {
          case Node.ELEMENT_NODE:
            for (var t = q.localName, x = "<" + t, z = q.attributes, A = 0; l = z[A]; A++) {
              x += " " + l.name + '="' + l.value.replace(d, a) + '"';
            }
            x += ">";
            q = g[t] ? x : x + c(q, p) + "</" + t + ">";
            break a;
          case Node.TEXT_NODE:
            q = q.data;
            q = l && h[l.localName] ? q : q.replace(f, a);
            break a;
          case Node.COMMENT_NODE:
            q = "\x3c!--" + q.data + "--\x3e";
            break a;
          default:
            throw console.error(q), Error("not implemented");
        }
      }
      m += q;
    }
    return m;
  }
  var d = /[&\u00A0"]/g, f = /[&\u00A0<>]/g, g = b("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")), h = b("style script xmp iframe noembed noframes plaintext noscript".split(" "));
  return {getInnerHTML:c};
}();
(function() {
  var a = Element.prototype.insertBefore, b = Element.prototype.appendChild, c = Element.prototype.removeChild;
  Polymer.TreeApi = {arrayCopyChildNodes:function(a) {
    var b = [], c = 0;
    for (a = a.firstChild; a; a = a.nextSibling) {
      b[c++] = a;
    }
    return b;
  }, arrayCopyChildren:function(a) {
    var b = [], c = 0;
    for (a = a.firstElementChild; a; a = a.nextElementSibling) {
      b[c++] = a;
    }
    return b;
  }, arrayCopy:function(a) {
    for (var b = a.length, c = Array(b), d = 0; d < b; d++) {
      c[d] = a[d];
    }
    return c;
  }};
  Polymer.TreeApi.Logical = {hasParentNode:function(a) {
    return !(!a.__dom || !a.__dom.parentNode);
  }, hasChildNodes:function(a) {
    return !(!a.__dom || void 0 === a.__dom.childNodes);
  }, getChildNodes:function(a) {
    return this.hasChildNodes(a) ? this._getChildNodes(a) : a.childNodes;
  }, _getChildNodes:function(a) {
    if (!a.__dom.childNodes) {
      a.__dom.childNodes = [];
      for (var b = a.__dom.firstChild; b; b = b.__dom.nextSibling) {
        a.__dom.childNodes.push(b);
      }
    }
    return a.__dom.childNodes;
  }, getParentNode:function(a) {
    return a.__dom && void 0 !== a.__dom.parentNode ? a.__dom.parentNode : a.parentNode;
  }, getFirstChild:function(a) {
    return a.__dom && void 0 !== a.__dom.firstChild ? a.__dom.firstChild : a.firstChild;
  }, getLastChild:function(a) {
    return a.__dom && void 0 !== a.__dom.lastChild ? a.__dom.lastChild : a.lastChild;
  }, getNextSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.nextSibling ? a.__dom.nextSibling : a.nextSibling;
  }, getPreviousSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.previousSibling ? a.__dom.previousSibling : a.previousSibling;
  }, getFirstElementChild:function(a) {
    return a.__dom && void 0 !== a.__dom.firstChild ? this._getFirstElementChild(a) : a.firstElementChild;
  }, _getFirstElementChild:function(a) {
    for (a = a.__dom.firstChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.nextSibling;
    }
    return a;
  }, getLastElementChild:function(a) {
    return a.__dom && void 0 !== a.__dom.lastChild ? this._getLastElementChild(a) : a.lastElementChild;
  }, _getLastElementChild:function(a) {
    for (a = a.__dom.lastChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.previousSibling;
    }
    return a;
  }, getNextElementSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.nextSibling ? this._getNextElementSibling(a) : a.nextElementSibling;
  }, _getNextElementSibling:function(a) {
    for (a = a.__dom.nextSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.nextSibling;
    }
    return a;
  }, getPreviousElementSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.previousSibling ? this._getPreviousElementSibling(a) : a.previousElementSibling;
  }, _getPreviousElementSibling:function(a) {
    for (a = a.__dom.previousSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.previousSibling;
    }
    return a;
  }, saveChildNodes:function(a) {
    if (!this.hasChildNodes(a)) {
      a.__dom = a.__dom || {};
      a.__dom.firstChild = a.firstChild;
      a.__dom.lastChild = a.lastChild;
      a.__dom.childNodes = [];
      for (var b = a.firstChild; b; b = b.nextSibling) {
        b.__dom = b.__dom || {}, b.__dom.parentNode = a, a.__dom.childNodes.push(b), b.__dom.nextSibling = b.nextSibling, b.__dom.previousSibling = b.previousSibling;
      }
    }
  }, recordInsertBefore:function(a, b, c) {
    b.__dom.childNodes = null;
    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      for (a = a.firstChild; a; a = a.nextSibling) {
        this._linkNode(a, b, c);
      }
    } else {
      this._linkNode(a, b, c);
    }
  }, _linkNode:function(a, b, c) {
    a.__dom = a.__dom || {};
    b.__dom = b.__dom || {};
    c && (c.__dom = c.__dom || {});
    a.__dom.previousSibling = c ? c.__dom.previousSibling : b.__dom.lastChild;
    a.__dom.previousSibling && (a.__dom.previousSibling.__dom.nextSibling = a);
    a.__dom.nextSibling = c;
    a.__dom.nextSibling && (a.__dom.nextSibling.__dom.previousSibling = a);
    a.__dom.parentNode = b;
    c ? c === b.__dom.firstChild && (b.__dom.firstChild = a) : (b.__dom.lastChild = a, b.__dom.firstChild || (b.__dom.firstChild = a));
    b.__dom.childNodes = null;
  }, recordRemoveChild:function(a, b) {
    a.__dom = a.__dom || {};
    b.__dom = b.__dom || {};
    a === b.__dom.firstChild && (b.__dom.firstChild = a.__dom.nextSibling);
    a === b.__dom.lastChild && (b.__dom.lastChild = a.__dom.previousSibling);
    var c = a.__dom.previousSibling, d = a.__dom.nextSibling;
    c && (c.__dom.nextSibling = d);
    d && (d.__dom.previousSibling = c);
    a.__dom.parentNode = a.__dom.previousSibling = a.__dom.nextSibling = void 0;
    b.__dom.childNodes = null;
  }};
  Polymer.TreeApi.Composed = {getChildNodes:function(a) {
    return Polymer.TreeApi.arrayCopyChildNodes(a);
  }, getParentNode:function(a) {
    return a.parentNode;
  }, clearChildNodes:function(a) {
    a.textContent = "";
  }, insertBefore:function(b, c, g) {
    return a.call(b, c, g || null);
  }, appendChild:function(a, c) {
    return b.call(a, c);
  }, removeChild:function(a, b) {
    return c.call(a, b);
  }};
})();
Polymer.DomApi = function() {
  var a = Polymer.Settings, b = Polymer.TreeApi, c = function(a) {
    this.node = d ? c.wrap(a) : a;
  }, d = a.hasShadow && !a.nativeShadow;
  c.wrap = window.wrap ? window.wrap : function(a) {
    return a;
  };
  c.prototype = {flush:function() {
    Polymer.dom.flush();
  }, deepContains:function(a) {
    if (this.node.contains(a)) {
      return !0;
    }
    var b = a;
    for (a = a.ownerDocument; b && b !== a && b !== this.node;) {
      b = Polymer.dom(b).parentNode || b.host;
    }
    return b === this.node;
  }, queryDistributedElements:function(a) {
    for (var b = this.getEffectiveChildNodes(), d = [], f = 0, g = b.length, h; f < g && (h = b[f]); f++) {
      h.nodeType === Node.ELEMENT_NODE && c.matchesSelector.call(h, a) && d.push(h);
    }
    return d;
  }, getEffectiveChildNodes:function() {
    for (var a = [], b = this.childNodes, c = 0, d = b.length, n; c < d && (n = b[c]); c++) {
      if (n.localName === f) {
        for (var v = g(n).getDistributedNodes(), w = 0; w < v.length; w++) {
          a.push(v[w]);
        }
      } else {
        a.push(n);
      }
    }
    return a;
  }, observeNodes:function(a) {
    if (a) {
      return this.observer || (this.observer = this.node.localName === f ? new c.DistributedNodesObserver(this) : new c.EffectiveNodesObserver(this)), this.observer.addListener(a);
    }
  }, unobserveNodes:function(a) {
    this.observer && this.observer.removeListener(a);
  }, notifyObserver:function() {
    this.observer && this.observer.notify();
  }, _query:function(a, c, d) {
    c = c || this.node;
    var f = [];
    this._queryElements(b.Logical.getChildNodes(c), a, d, f);
    return f;
  }, _queryElements:function(a, b, c, d) {
    for (var f = 0, g = a.length, m; f < g && (m = a[f]); f++) {
      if (m.nodeType === Node.ELEMENT_NODE && this._queryElement(m, b, c, d)) {
        return !0;
      }
    }
  }, _queryElement:function(a, c, d, f) {
    var g = c(a);
    g && f.push(a);
    if (d && d(g)) {
      return g;
    }
    this._queryElements(b.Logical.getChildNodes(a), c, d, f);
  }};
  var f = c.CONTENT = "content", g = c.factory = function(a) {
    a = a || document;
    a.__domApi || (a.__domApi = new c.ctor(a));
    return a.__domApi;
  };
  c.hasApi = function(a) {
    return !!a.__domApi;
  };
  c.ctor = c;
  Polymer.dom = function(a, b) {
    return a instanceof Event ? Polymer.EventApi.factory(a) : c.factory(a, b);
  };
  a = Element.prototype;
  c.matchesSelector = a.matches || a.matchesSelector || a.mozMatchesSelector || a.msMatchesSelector || a.oMatchesSelector || a.webkitMatchesSelector;
  return c;
}();
(function() {
  var a = Polymer.DomApi, b = a.factory, c = Polymer.TreeApi, d = Polymer.domInnerHTML.getInnerHTML, f = a.CONTENT;
  if (!Polymer.Settings.useShadow) {
    var g = Element.prototype.cloneNode, h = Document.prototype.importNode;
    Polymer.Base.extend(a.prototype, {_lazyDistribute:function(a) {
      a.shadyRoot && a.shadyRoot._distributionClean && (a.shadyRoot._distributionClean = !1, Polymer.dom.addDebouncer(a.debounce("_distribute", a._distributeContent)));
    }, appendChild:function(a) {
      return this.insertBefore(a);
    }, insertBefore:function(d, g) {
      if (g && c.Logical.getParentNode(g) !== this.node) {
        throw Error("The ref_node to be inserted before is not a child of this node");
      }
      if (d.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
        var m = c.Logical.getParentNode(d);
        m ? (a.hasApi(m) && b(m).notifyObserver(), this._removeNode(d)) : this._removeOwnerShadyRoot(d);
      }
      this._addNode(d, g) || (g && (g = g.localName === f ? this._firstComposedNode(g) : g), m = this.node._isShadyRoot ? this.node.host : this.node, g ? c.Composed.insertBefore(m, d, g) : c.Composed.appendChild(m, d));
      this.notifyObserver();
      return d;
    }, _addNode:function(a, b) {
      var d = this.getOwnerRoot();
      if (d) {
        var f = this._maybeAddInsertionPoint(a, this.node);
        d._invalidInsertionPoints || (d._invalidInsertionPoints = f);
        this._addNodeToHost(d.host, a);
      }
      c.Logical.hasChildNodes(this.node) && c.Logical.recordInsertBefore(a, this.node, b);
      if (b = this._maybeDistribute(a) || this.node.shadyRoot) {
        if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          for (; a.firstChild;) {
            c.Composed.removeChild(a, a.firstChild);
          }
        } else {
          (d = c.Composed.getParentNode(a)) && c.Composed.removeChild(d, a);
        }
      }
      return b;
    }, removeChild:function(a) {
      if (c.Logical.getParentNode(a) !== this.node) {
        throw Error("The node to be removed is not a child of this node: " + a);
      }
      if (!this._removeNode(a)) {
        var b = this.node._isShadyRoot ? this.node.host : this.node, d = c.Composed.getParentNode(a);
        b === d && c.Composed.removeChild(b, a);
      }
      this.notifyObserver();
      return a;
    }, _removeNode:function(a) {
      var d = c.Logical.hasParentNode(a) && c.Logical.getParentNode(a), f = this._ownerShadyRootForNode(a);
      if (d) {
        var g = b(a)._maybeDistributeParent();
        c.Logical.recordRemoveChild(a, d);
        f && this._removeDistributedChildren(f, a) && (f._invalidInsertionPoints = !0, this._lazyDistribute(f.host));
      }
      this._removeOwnerShadyRoot(a);
      f && this._removeNodeFromHost(f.host, a);
      return g;
    }, replaceChild:function(a, b) {
      this.insertBefore(a, b);
      this.removeChild(b);
      return a;
    }, _hasCachedOwnerRoot:function(a) {
      return void 0 !== a._ownerShadyRoot;
    }, getOwnerRoot:function() {
      return this._ownerShadyRootForNode(this.node);
    }, _ownerShadyRootForNode:function(a) {
      if (a) {
        var b = a._ownerShadyRoot;
        void 0 === b && (b = a._isShadyRoot ? a : (b = c.Logical.getParentNode(a)) ? b._isShadyRoot ? b : this._ownerShadyRootForNode(b) : null, b || document.documentElement.contains(a)) && (a._ownerShadyRoot = b);
        return b;
      }
    }, _maybeDistribute:function(a) {
      var d = a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !a.__noContent && b(a).querySelector(f), g = d && c.Logical.getParentNode(d).nodeType !== Node.DOCUMENT_FRAGMENT_NODE;
      (a = d || a.localName === f) && (d = this.getOwnerRoot()) && this._lazyDistribute(d.host);
      (d = this._nodeNeedsDistribution(this.node)) && this._lazyDistribute(this.node);
      return d || a && !g;
    }, _maybeAddInsertionPoint:function(a, d) {
      if (a.nodeType !== Node.DOCUMENT_FRAGMENT_NODE || a.__noContent) {
        a.localName === f && (c.Logical.saveChildNodes(d), c.Logical.saveChildNodes(a), y = !0);
      } else {
        for (var g = b(a).querySelectorAll(f), h = 0, m, u; h < g.length && (m = g[h]); h++) {
          u = c.Logical.getParentNode(m);
          u === a && (u = d);
          u = this._maybeAddInsertionPoint(m, u);
          var y = y || u;
        }
      }
      return y;
    }, _updateInsertionPoints:function(a) {
      a = a.shadyRoot._insertionPoints = b(a.shadyRoot).querySelectorAll(f);
      for (var d = 0, g; d < a.length; d++) {
        g = a[d], c.Logical.saveChildNodes(g), c.Logical.saveChildNodes(c.Logical.getParentNode(g));
      }
    }, _nodeNeedsDistribution:function(b) {
      return b && b.shadyRoot && a.hasInsertionPoint(b.shadyRoot);
    }, _addNodeToHost:function(a, b) {
      a._elementAdd && a._elementAdd(b);
    }, _removeNodeFromHost:function(a, b) {
      a._elementRemove && a._elementRemove(b);
    }, _removeDistributedChildren:function(a, d) {
      a = a._insertionPoints;
      for (var f = 0; f < a.length; f++) {
        var g = a[f];
        if (this._contains(d, g)) {
          for (var g = b(g).getDistributedNodes(), h = 0; h < g.length; h++) {
            var m = !0;
            var u = g[h], q = c.Composed.getParentNode(u);
            q && c.Composed.removeChild(q, u);
          }
        }
      }
      return m;
    }, _contains:function(a, b) {
      for (; b;) {
        if (b == a) {
          return !0;
        }
        b = c.Logical.getParentNode(b);
      }
    }, _removeOwnerShadyRoot:function(a) {
      if (this._hasCachedOwnerRoot(a)) {
        for (var b = c.Logical.getChildNodes(a), d = 0, f = b.length, g; d < f && (g = b[d]); d++) {
          this._removeOwnerShadyRoot(g);
        }
      }
      a._ownerShadyRoot = void 0;
    }, _firstComposedNode:function(a) {
      for (var c = b(a).getDistributedNodes(), d = 0, f = c.length, g, h; d < f && (g = c[d]); d++) {
        if (h = b(g).getDestinationInsertionPoints(), h[h.length - 1] === a) {
          return g;
        }
      }
    }, querySelector:function(b) {
      return this._query(function(c) {
        return a.matchesSelector.call(c, b);
      }, this.node, function(a) {
        return !!a;
      })[0] || null;
    }, querySelectorAll:function(b) {
      return this._query(function(c) {
        return a.matchesSelector.call(c, b);
      }, this.node);
    }, getDestinationInsertionPoints:function() {
      return this.node._destinationInsertionPoints || [];
    }, getDistributedNodes:function() {
      return this.node._distributedNodes || [];
    }, _clear:function() {
      for (; this.childNodes.length;) {
        this.removeChild(this.childNodes[0]);
      }
    }, setAttribute:function(a, b) {
      this.node.setAttribute(a, b);
      this._maybeDistributeParent();
    }, removeAttribute:function(a) {
      this.node.removeAttribute(a);
      this._maybeDistributeParent();
    }, _maybeDistributeParent:function() {
      if (this._nodeNeedsDistribution(this.parentNode)) {
        return this._lazyDistribute(this.parentNode), !0;
      }
    }, cloneNode:function(a) {
      var c = g.call(this.node, !1);
      if (a) {
        a = this.childNodes;
        for (var d = b(c), f = 0, h; f < a.length; f++) {
          h = b(a[f]).cloneNode(!0), d.appendChild(h);
        }
      }
      return c;
    }, importNode:function(a, d) {
      var f = this.node instanceof Document ? this.node : this.node.ownerDocument, g = h.call(f, a, !1);
      if (d) {
        a = c.Logical.getChildNodes(a);
        d = b(g);
        for (var m = 0, w; m < a.length; m++) {
          w = b(f).importNode(a[m], !0), d.appendChild(w);
        }
      }
      return g;
    }, _getComposedInnerHTML:function() {
      return d(this.node, !0);
    }});
    Object.defineProperties(a.prototype, {activeElement:{get:function() {
      var a = document.activeElement;
      if (!a) {
        return null;
      }
      var c = !!this.node._isShadyRoot;
      if (!(this.node === document || c && this.node.host !== a && this.node.host.contains(a))) {
        return null;
      }
      for (c = b(a).getOwnerRoot(); c && c !== this.node;) {
        a = c.host, c = b(a).getOwnerRoot();
      }
      return this.node === document ? c ? null : a : c === this.node ? a : null;
    }, configurable:!0}, childNodes:{get:function() {
      var a = c.Logical.getChildNodes(this.node);
      return Array.isArray(a) ? a : c.arrayCopyChildNodes(this.node);
    }, configurable:!0}, children:{get:function() {
      return c.Logical.hasChildNodes(this.node) ? Array.prototype.filter.call(this.childNodes, function(a) {
        return a.nodeType === Node.ELEMENT_NODE;
      }) : c.arrayCopyChildren(this.node);
    }, configurable:!0}, parentNode:{get:function() {
      return c.Logical.getParentNode(this.node);
    }, configurable:!0}, firstChild:{get:function() {
      return c.Logical.getFirstChild(this.node);
    }, configurable:!0}, lastChild:{get:function() {
      return c.Logical.getLastChild(this.node);
    }, configurable:!0}, nextSibling:{get:function() {
      return c.Logical.getNextSibling(this.node);
    }, configurable:!0}, previousSibling:{get:function() {
      return c.Logical.getPreviousSibling(this.node);
    }, configurable:!0}, firstElementChild:{get:function() {
      return c.Logical.getFirstElementChild(this.node);
    }, configurable:!0}, lastElementChild:{get:function() {
      return c.Logical.getLastElementChild(this.node);
    }, configurable:!0}, nextElementSibling:{get:function() {
      return c.Logical.getNextElementSibling(this.node);
    }, configurable:!0}, previousElementSibling:{get:function() {
      return c.Logical.getPreviousElementSibling(this.node);
    }, configurable:!0}, textContent:{get:function() {
      var a = this.node.nodeType;
      if (a === Node.TEXT_NODE || a === Node.COMMENT_NODE) {
        return this.node.textContent;
      }
      for (var a = [], b = 0, c = this.childNodes, d; d = c[b]; b++) {
        d.nodeType !== Node.COMMENT_NODE && a.push(d.textContent);
      }
      return a.join("");
    }, set:function(a) {
      var b = this.node.nodeType;
      b === Node.TEXT_NODE || b === Node.COMMENT_NODE ? this.node.textContent = a : (this._clear(), a && this.appendChild(document.createTextNode(a)));
    }, configurable:!0}, innerHTML:{get:function() {
      var a = this.node.nodeType;
      return a === Node.TEXT_NODE || a === Node.COMMENT_NODE ? null : d(this.node);
    }, set:function(a) {
      var b = this.node.nodeType;
      if (b !== Node.TEXT_NODE || b !== Node.COMMENT_NODE) {
        for (this._clear(), b = document.createElement("div"), b.innerHTML = a, a = c.arrayCopyChildNodes(b), b = 0; b < a.length; b++) {
          this.appendChild(a[b]);
        }
      }
    }, configurable:!0}});
    a.hasInsertionPoint = function(a) {
      return !(!a || !a._insertionPoints.length);
    };
  }
})();
(function() {
  var a = Polymer.TreeApi, b = Polymer.DomApi;
  if (Polymer.Settings.useShadow) {
    Polymer.Base.extend(b.prototype, {querySelectorAll:function(b) {
      return a.arrayCopy(this.node.querySelectorAll(b));
    }, getOwnerRoot:function() {
      for (var a = this.node; a;) {
        if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && a.host) {
          return a;
        }
        a = a.parentNode;
      }
    }, importNode:function(a, b) {
      return (this.node instanceof Document ? this.node : this.node.ownerDocument).importNode(a, b);
    }, getDestinationInsertionPoints:function() {
      var b = this.node.getDestinationInsertionPoints && this.node.getDestinationInsertionPoints();
      return b ? a.arrayCopy(b) : [];
    }, getDistributedNodes:function() {
      var b = this.node.getDistributedNodes && this.node.getDistributedNodes();
      return b ? a.arrayCopy(b) : [];
    }});
    Object.defineProperties(b.prototype, {activeElement:{get:function() {
      var a = b.wrap(this.node), c = a.activeElement;
      return a.contains(c) ? c : null;
    }, configurable:!0}, childNodes:{get:function() {
      return a.arrayCopyChildNodes(this.node);
    }, configurable:!0}, children:{get:function() {
      return a.arrayCopyChildren(this.node);
    }, configurable:!0}, textContent:{get:function() {
      return this.node.textContent;
    }, set:function(a) {
      return this.node.textContent = a;
    }, configurable:!0}, innerHTML:{get:function() {
      return this.node.innerHTML;
    }, set:function(a) {
      return this.node.innerHTML = a;
    }, configurable:!0}});
    var c = function(a) {
      b.prototype[a] = function() {
        return this.node[a].apply(this.node, arguments);
      };
    };
    (function(a) {
      for (var b = 0; b < a.length; b++) {
        c(a[b]);
      }
    })("cloneNode appendChild insertBefore removeChild replaceChild setAttribute removeAttribute querySelector".split(" "));
    var d = function(a) {
      Object.defineProperty(b.prototype, a, {get:function() {
        return this.node[a];
      }, configurable:!0});
    };
    (function(a) {
      for (var b = 0; b < a.length; b++) {
        d(a[b]);
      }
    })("parentNode firstChild lastChild nextSibling previousSibling firstElementChild lastElementChild nextElementSibling previousElementSibling".split(" "));
  }
})();
Polymer.Base.extend(Polymer.dom, {_flushGuard:0, _FLUSH_MAX:100, _needsTakeRecords:!Polymer.Settings.useNativeCustomElements, _debouncers:[], _staticFlushList:[], _finishDebouncer:null, flush:function() {
  this._flushGuard = 0;
  for (this._prepareFlush(); this._debouncers.length && this._flushGuard < this._FLUSH_MAX;) {
    for (; this._debouncers.length;) {
      this._debouncers.shift().complete();
    }
    this._finishDebouncer && this._finishDebouncer.complete();
    this._prepareFlush();
    this._flushGuard++;
  }
  this._flushGuard >= this._FLUSH_MAX && console.warn("Polymer.dom.flush aborted. Flush may not be complete.");
}, _prepareFlush:function() {
  this._needsTakeRecords && CustomElements.takeRecords();
  for (var a = 0; a < this._staticFlushList.length; a++) {
    this._staticFlushList[a]();
  }
}, addStaticFlush:function(a) {
  this._staticFlushList.push(a);
}, removeStaticFlush:function(a) {
  a = this._staticFlushList.indexOf(a);
  0 <= a && this._staticFlushList.splice(a, 1);
}, addDebouncer:function(a) {
  this._debouncers.push(a);
  this._finishDebouncer = Polymer.Debounce(this._finishDebouncer, this._finishFlush);
}, _finishFlush:function() {
  Polymer.dom._debouncers = [];
}});
Polymer.EventApi = function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.Event = function(a) {
    this.event = a;
  };
  a.Event.prototype = b.useShadow ? {get rootTarget() {
    return this.event.path[0];
  }, get localTarget() {
    return this.event.target;
  }, get path() {
    var a = this.event.path;
    Array.isArray(a) || (a = Array.prototype.slice.call(a));
    return a;
  }} : {get rootTarget() {
    return this.event.target;
  }, get localTarget() {
    for (var a = this.event.currentTarget, a = a && Polymer.dom(a).getOwnerRoot(), b = this.path, f = 0; f < b.length; f++) {
      if (Polymer.dom(b[f]).getOwnerRoot() === a) {
        return b[f];
      }
    }
  }, get path() {
    if (!this.event._path) {
      for (var a = [], b = this.rootTarget; b;) {
        a.push(b);
        var f = Polymer.dom(b).getDestinationInsertionPoints();
        if (f.length) {
          for (b = 0; b < f.length - 1; b++) {
            a.push(f[b]);
          }
          b = f[f.length - 1];
        } else {
          b = Polymer.dom(b).parentNode || b.host;
        }
      }
      a.push(window);
      this.event._path = a;
    }
    return this.event._path;
  }};
  return {factory:function(b) {
    b.__eventApi || (b.__eventApi = new a.Event(b));
    return b.__eventApi;
  }};
}();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings.useShadow;
  Object.defineProperty(a.prototype, "classList", {get:function() {
    this._classList || (this._classList = new a.ClassList(this));
    return this._classList;
  }, configurable:!0});
  a.ClassList = function(a) {
    this.domApi = a;
    this.node = a.node;
  };
  a.ClassList.prototype = {add:function() {
    this.node.classList.add.apply(this.node.classList, arguments);
    this._distributeParent();
  }, remove:function() {
    this.node.classList.remove.apply(this.node.classList, arguments);
    this._distributeParent();
  }, toggle:function() {
    this.node.classList.toggle.apply(this.node.classList, arguments);
    this._distributeParent();
  }, _distributeParent:function() {
    b || this.domApi._maybeDistributeParent();
  }, contains:function() {
    return this.node.classList.contains.apply(this.node.classList, arguments);
  }};
})();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.EffectiveNodesObserver = function(a) {
    this.domApi = a;
    this.node = this.domApi.node;
    this._listeners = [];
  };
  a.EffectiveNodesObserver.prototype = {addListener:function(a) {
    this._isSetup || (this._setup(), this._isSetup = !0);
    a = {fn:a, _nodes:[]};
    this._listeners.push(a);
    this._scheduleNotify();
    return a;
  }, removeListener:function(a) {
    var b = this._listeners.indexOf(a);
    0 <= b && (this._listeners.splice(b, 1), a._nodes = []);
    this._hasListeners() || (this._cleanup(), this._isSetup = !1);
  }, _setup:function() {
    this._observeContentElements(this.domApi.childNodes);
  }, _cleanup:function() {
    this._unobserveContentElements(this.domApi.childNodes);
  }, _hasListeners:function() {
    return !!this._listeners.length;
  }, _scheduleNotify:function() {
    this._debouncer && this._debouncer.stop();
    this._debouncer = Polymer.Debounce(this._debouncer, this._notify);
    this._debouncer.context = this;
    Polymer.dom.addDebouncer(this._debouncer);
  }, notify:function() {
    this._hasListeners() && this._scheduleNotify();
  }, _notify:function() {
    this._beforeCallListeners();
    this._callListeners();
  }, _beforeCallListeners:function() {
    this._updateContentElements();
  }, _updateContentElements:function() {
    this._observeContentElements(this.domApi.childNodes);
  }, _observeContentElements:function(a) {
    for (var b = 0, c; b < a.length && (c = a[b]); b++) {
      this._isContent(c) && (c.__observeNodesMap = c.__observeNodesMap || new WeakMap, c.__observeNodesMap.has(this) || c.__observeNodesMap.set(this, this._observeContent(c)));
    }
  }, _observeContent:function(a) {
    var b = this;
    a = Polymer.dom(a).observeNodes(function() {
      b._scheduleNotify();
    });
    a._avoidChangeCalculation = !0;
    return a;
  }, _unobserveContentElements:function(a) {
    for (var b = 0, c, d; b < a.length && (c = a[b]); b++) {
      this._isContent(c) && (d = c.__observeNodesMap.get(this)) && (Polymer.dom(c).unobserveNodes(d), c.__observeNodesMap.delete(this));
    }
  }, _isContent:function(a) {
    return "content" === a.localName;
  }, _callListeners:function() {
    for (var a = this._listeners, b = this._getEffectiveNodes(), c = 0, d; c < a.length && (d = a[c]); c++) {
      var u = this._generateListenerInfo(d, b);
      (u || d._alwaysNotify) && this._callListener(d, u);
    }
  }, _getEffectiveNodes:function() {
    return this.domApi.getEffectiveChildNodes();
  }, _generateListenerInfo:function(a, b) {
    if (a._avoidChangeCalculation) {
      return !0;
    }
    for (var c = {target:this.node, addedNodes:[], removedNodes:[]}, d = Polymer.ArraySplice.calculateSplices(b, a._nodes), f = 0, g; f < d.length && (g = d[f]); f++) {
      for (var n = 0, v; n < g.removed.length && (v = g.removed[n]); n++) {
        c.removedNodes.push(v);
      }
    }
    f = 0;
    for (g; f < d.length && (g = d[f]); f++) {
      for (n = g.index; n < g.index + g.addedCount; n++) {
        c.addedNodes.push(b[n]);
      }
    }
    a._nodes = b;
    if (c.addedNodes.length || c.removedNodes.length) {
      return c;
    }
  }, _callListener:function(a, b) {
    return a.fn.call(this.node, b);
  }, enableShadowAttributeTracking:function() {
  }};
  if (b.useShadow) {
    var c = a.EffectiveNodesObserver.prototype._setup, d = a.EffectiveNodesObserver.prototype._cleanup;
    Polymer.Base.extend(a.EffectiveNodesObserver.prototype, {_setup:function() {
      if (!this._observer) {
        var a = this;
        this._mutationHandler = function(b) {
          b && b.length && a._scheduleNotify();
        };
        this._observer = new MutationObserver(this._mutationHandler);
        this._boundFlush = function() {
          a._flush();
        };
        Polymer.dom.addStaticFlush(this._boundFlush);
        this._observer.observe(this.node, {childList:!0});
      }
      c.call(this);
    }, _cleanup:function() {
      this._observer.disconnect();
      this._mutationHandler = this._observer = null;
      Polymer.dom.removeStaticFlush(this._boundFlush);
      d.call(this);
    }, _flush:function() {
      this._observer && this._mutationHandler(this._observer.takeRecords());
    }, enableShadowAttributeTracking:function() {
      if (this._observer) {
        this._makeContentListenersAlwaysNotify();
        this._observer.disconnect();
        this._observer.observe(this.node, {childList:!0, attributes:!0, subtree:!0});
        var a = this.domApi.getOwnerRoot();
        (a = a && a.host) && Polymer.dom(a).observer && Polymer.dom(a).observer.enableShadowAttributeTracking();
      }
    }, _makeContentListenersAlwaysNotify:function() {
      for (var a = 0, b; a < this._listeners.length; a++) {
        b = this._listeners[a], b._alwaysNotify = b._isContentListener;
      }
    }});
  }
})();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.DistributedNodesObserver = function(b) {
    a.EffectiveNodesObserver.call(this, b);
  };
  a.DistributedNodesObserver.prototype = Object.create(a.EffectiveNodesObserver.prototype);
  Polymer.Base.extend(a.DistributedNodesObserver.prototype, {_setup:function() {
  }, _cleanup:function() {
  }, _beforeCallListeners:function() {
  }, _getEffectiveNodes:function() {
    return this.domApi.getDistributedNodes();
  }});
  b.useShadow && Polymer.Base.extend(a.DistributedNodesObserver.prototype, {_setup:function() {
    if (!this._observer) {
      var a = this.domApi.getOwnerRoot();
      if (a = a && a.host) {
        var b = this;
        this._observer = Polymer.dom(a).observeNodes(function() {
          b._scheduleNotify();
        });
        this._observer._isContentListener = !0;
        this._hasAttrSelect() && Polymer.dom(a).observer.enableShadowAttributeTracking();
      }
    }
  }, _hasAttrSelect:function() {
    var a = this.node.getAttribute("select");
    return a && a.match(/[[.]+/);
  }, _cleanup:function() {
    var a = this.domApi.getOwnerRoot();
    (a = a && a.host) && Polymer.dom(a).unobserveNodes(this._observer);
    this._observer = null;
  }});
})();
(function() {
  function a(a, b) {
    b._distributedNodes.push(a);
    var c = a._destinationInsertionPoints;
    c ? c.push(b) : a._destinationInsertionPoints = [b];
  }
  function b(a) {
    for (var b = d.Logical.getChildNodes(a), c = 0, f; c < b.length; c++) {
      if (f = b[c], f.localName && "content" === f.localName) {
        return a.domHost;
      }
    }
  }
  var c = Polymer.DomApi, d = Polymer.TreeApi;
  Polymer.Base._addFeature({_prepShady:function() {
    this._useContent = this._useContent || !!this._template;
  }, _setupShady:function() {
    this.shadyRoot = null;
    this.__domApi || (this.__domApi = null);
    this.__dom || (this.__dom = null);
    this._ownerShadyRoot || (this._ownerShadyRoot = void 0);
  }, _poolContent:function() {
    this._useContent && d.Logical.saveChildNodes(this);
  }, _setupRoot:function() {
    if (this._useContent && (this._createLocalRoot(), !this.dataHost)) {
      var a = d.Logical.getChildNodes(this);
      if (f && a) {
        for (var b = 0; b < a.length; b++) {
          CustomElements.upgrade(a[b]);
        }
      }
    }
  }, _createLocalRoot:function() {
    this.shadyRoot = this.root;
    this.shadyRoot._distributionClean = !1;
    this.shadyRoot._hasDistributed = !1;
    this.shadyRoot._isShadyRoot = !0;
    this.shadyRoot._dirtyRoots = [];
    var a = this.shadyRoot._insertionPoints = !this._notes || this._notes._hasContent ? this.shadyRoot.querySelectorAll("content") : [];
    d.Logical.saveChildNodes(this.shadyRoot);
    for (var b = 0, c; b < a.length; b++) {
      c = a[b], d.Logical.saveChildNodes(c), d.Logical.saveChildNodes(c.parentNode);
    }
    this.shadyRoot.host = this;
  }, get domHost() {
    var a = Polymer.dom(this).getOwnerRoot();
    return a && a.host;
  }, distributeContent:function(a) {
    if (this.shadyRoot) {
      this.shadyRoot._invalidInsertionPoints = this.shadyRoot._invalidInsertionPoints || a;
      for (a = this; a && b(a);) {
        a = a.domHost;
      }
      Polymer.dom(this)._lazyDistribute(a);
    }
  }, _distributeContent:function() {
    this._useContent && !this.shadyRoot._distributionClean && (this.shadyRoot._invalidInsertionPoints && (Polymer.dom(this)._updateInsertionPoints(this), this.shadyRoot._invalidInsertionPoints = !1), this._beginDistribute(), this._distributeDirtyRoots(), this._finishDistribute());
  }, _beginDistribute:function() {
    this._useContent && c.hasInsertionPoint(this.shadyRoot) && (this._resetDistribution(), this._distributePool(this.shadyRoot, this._collectPool()));
  }, _distributeDirtyRoots:function() {
    for (var a = this.shadyRoot._dirtyRoots, b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
      d._distributeContent();
    }
    this.shadyRoot._dirtyRoots = [];
  }, _finishDistribute:function() {
    if (this._useContent) {
      this.shadyRoot._distributionClean = !0;
      if (c.hasInsertionPoint(this.shadyRoot)) {
        this._composeTree();
        for (var a = this.shadyRoot, b = 0, f; b < a._insertionPoints.length; b++) {
          f = a._insertionPoints[b], c.hasApi(f) && Polymer.dom(f).notifyObserver();
        }
      } else {
        this.shadyRoot._hasDistributed ? (a = this._composeNode(this), this._updateChildNodes(this, a)) : (d.Composed.clearChildNodes(this), this.appendChild(this.shadyRoot));
      }
      this.shadyRoot._hasDistributed || c.hasApi(this) && Polymer.dom(this).notifyObserver();
      this.shadyRoot._hasDistributed = !0;
    }
  }, elementMatches:function(a, b) {
    return c.matchesSelector.call(b || this, a);
  }, _resetDistribution:function() {
    for (var a = d.Logical.getChildNodes(this), b = 0; b < a.length; b++) {
      var c = a[b];
      c._destinationInsertionPoints && (c._destinationInsertionPoints = void 0);
      if ("content" == c.localName) {
        var f = c._distributedNodes;
        if (f) {
          for (var r = 0; r < f.length; r++) {
            var n = f[r]._destinationInsertionPoints;
            n && n.splice(n.indexOf(c) + 1, n.length);
          }
        }
      }
    }
    a = this.shadyRoot._insertionPoints;
    for (b = 0; b < a.length; b++) {
      a[b]._distributedNodes = [];
    }
  }, _collectPool:function() {
    for (var a = [], b = d.Logical.getChildNodes(this), c = 0; c < b.length; c++) {
      var f = b[c];
      "content" == f.localName ? a.push.apply(a, f._distributedNodes) : a.push(f);
    }
    return a;
  }, _distributePool:function(a, b) {
    a = a._insertionPoints;
    for (var f = 0, g = a.length, h; f < g && (h = a[f]); f++) {
      this._distributeInsertionPoint(h, b);
      var n = d.Logical.getParentNode(h);
      n && n.shadyRoot && c.hasInsertionPoint(n.shadyRoot) && n.shadyRoot._distributionClean && (n.shadyRoot._distributionClean = !1, this.shadyRoot._dirtyRoots.push(n));
    }
  }, _distributeInsertionPoint:function(b, c) {
    for (var f = !1, g = 0, h = c.length, n; g < h; g++) {
      (n = c[g]) && this._matchesContentSelect(n, b) && (a(n, b), c[g] = void 0, f = !0);
    }
    if (!f) {
      for (c = d.Logical.getChildNodes(b), f = 0; f < c.length; f++) {
        a(c[f], b);
      }
    }
  }, _composeTree:function() {
    this._updateChildNodes(this, this._composeNode(this));
    for (var a = this.shadyRoot._insertionPoints, b = 0, c = a.length, f, r; b < c && (f = a[b]); b++) {
      r = d.Logical.getParentNode(f), r._useContent || r === this || r === this.shadyRoot || this._updateChildNodes(r, this._composeNode(r));
    }
  }, _composeNode:function(a) {
    var b = [];
    a = d.Logical.getChildNodes(a.shadyRoot || a);
    for (var c = 0; c < a.length; c++) {
      var f = a[c];
      if ("content" == f.localName) {
        for (var g = f._distributedNodes, n = 0; n < g.length; n++) {
          var v = g[n], w = v._destinationInsertionPoints;
          w && w[w.length - 1] === f && b.push(v);
        }
      } else {
        b.push(f);
      }
    }
    return b;
  }, _updateChildNodes:function(a, b) {
    for (var c = d.Composed.getChildNodes(a), f = Polymer.ArraySplice.calculateSplices(b, c), g = 0, h = 0, v; g < f.length && (v = f[g]); g++) {
      for (var w = 0, y; w < v.removed.length && (y = v.removed[w]); w++) {
        d.Composed.getParentNode(y) === a && d.Composed.removeChild(a, y), c.splice(v.index + h, 1);
      }
      h -= v.addedCount;
    }
    for (g = 0; g < f.length && (v = f[g]); g++) {
      for (h = c[v.index], w = v.index, y; w < v.index + v.addedCount; w++) {
        y = b[w], d.Composed.insertBefore(a, y, h), c.splice(w, 0, y);
      }
    }
  }, _matchesContentSelect:function(a, b) {
    b = b.getAttribute("select");
    return b ? (b = b.trim()) ? a instanceof Element && /^(:not\()?[*.#[a-zA-Z_|]/.test(b) ? this.elementMatches(b, a) : !1 : !0 : !0;
  }, _elementAdd:function() {
  }, _elementRemove:function() {
  }});
  var f = window.CustomElements && !CustomElements.useNative;
})();
Polymer.Settings.useShadow && Polymer.Base._addFeature({_poolContent:function() {
}, _beginDistribute:function() {
}, distributeContent:function() {
}, _distributeContent:function() {
}, _finishDistribute:function() {
}, _createLocalRoot:function() {
  this.createShadowRoot();
  this.shadowRoot.appendChild(this.root);
  this.root = this.shadowRoot;
}});
Polymer.Async = {_currVal:0, _lastVal:0, _callbacks:[], _twiddleContent:0, _twiddle:document.createTextNode(""), run:function(a, b) {
  if (0 < b) {
    return ~setTimeout(a, b);
  }
  this._twiddle.textContent = this._twiddleContent++;
  this._callbacks.push(a);
  return this._currVal++;
}, cancel:function(a) {
  if (0 > a) {
    clearTimeout(~a);
  } else {
    var b = a - this._lastVal;
    if (0 <= b) {
      if (!this._callbacks[b]) {
        throw "invalid async handle: " + a;
      }
      this._callbacks[b] = null;
    }
  }
}, _atEndOfMicrotask:function() {
  for (var a = this._callbacks.length, b = 0; b < a; b++) {
    var c = this._callbacks[b];
    if (c) {
      try {
        c();
      } catch (d) {
        throw b++, this._callbacks.splice(0, b), this._lastVal += b, this._twiddle.textContent = this._twiddleContent++, d;
      }
    }
  }
  this._callbacks.splice(0, a);
  this._lastVal += a;
}};
(new window.MutationObserver(function() {
  Polymer.Async._atEndOfMicrotask();
})).observe(Polymer.Async._twiddle, {characterData:!0});
Polymer.Debounce = function() {
  var a = Polymer.Async, b = function(a) {
    this.context = a;
    var b = this;
    this.boundComplete = function() {
      b.complete();
    };
  };
  b.prototype = {go:function(b, d) {
    this.finish = function() {
      a.cancel(c);
    };
    var c = a.run(this.boundComplete, d);
    this.callback = b;
  }, stop:function() {
    this.finish && (this.finish(), this.finish = null);
  }, complete:function() {
    this.finish && (this.stop(), this.callback.call(this.context));
  }};
  return function(a, d, f) {
    a ? a.stop() : a = new b(this);
    a.go(d, f);
    return a;
  };
}();
Polymer.Base._addFeature({_setupDebouncers:function() {
  this._debouncers = {};
}, debounce:function(a, b, c) {
  return this._debouncers[a] = Polymer.Debounce.call(this, this._debouncers[a], b, c);
}, isDebouncerActive:function(a) {
  a = this._debouncers[a];
  return !(!a || !a.finish);
}, flushDebouncer:function(a) {
  (a = this._debouncers[a]) && a.complete();
}, cancelDebouncer:function(a) {
  (a = this._debouncers[a]) && a.stop();
}});
Polymer.DomModule = document.createElement("dom-module");
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepBehaviors();
  this._prepConstructor();
  this._prepTemplate();
  this._prepShady();
  this._prepPropertyInfo();
}, _prepBehavior:function(a) {
  this._addHostAttributes(a.hostAttributes);
}, _initFeatures:function() {
  this._registerHost();
  this._template && (this._poolContent(), this._beginHosting(), this._stampTemplate(), this._endHosting());
  this._marshalHostAttributes();
  this._setupDebouncers();
  this._marshalBehaviors();
  this._tryReady();
}, _marshalBehavior:function(a) {
}});
Polymer.nar = [];
Polymer.Annotations = {parseAnnotations:function(a) {
  var b = [];
  this._parseNodeAnnotations(a._content || a.content, b, a.hasAttribute("strip-whitespace"));
  return b;
}, _parseNodeAnnotations:function(a, b, c) {
  return a.nodeType === Node.TEXT_NODE ? this._parseTextNodeAnnotation(a, b) : this._parseElementAnnotations(a, b, c);
}, _bindingRegex:function() {
  return /(\[\[|{{)\s*(?:(!)\s*)?((?:[a-zA-Z_$][\w.:$\-*]*)\s*(?:\(\s*(?:(?:(?:(?:[a-zA-Z_$][\w.:$\-*]*)|(?:[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\]|\\.)*')|(?:"(?:[^"\\]|\\.)*"))\s*)(?:,\s*(?:(?:[a-zA-Z_$][\w.:$\-*]*)|(?:[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\]|\\.)*')|(?:"(?:[^"\\]|\\.)*"))\s*))*)?)\)\s*)?)(?:]]|}})/g;
}(), _parseBindings:function(a) {
  for (var b = this._bindingRegex, c = [], d = 0, f; null !== (f = b.exec(a));) {
    f.index > d && c.push({literal:a.slice(d, f.index)});
    var d = f[1][0], g = !!f[2];
    f = f[3].trim();
    var h;
    if ("{" == d && 0 < (h = f.indexOf("::"))) {
      var m = f.substring(h + 2);
      f = f.substring(0, h);
      var u = !0;
    }
    c.push({compoundIndex:c.length, value:f, mode:d, negate:g, event:m, customEvent:u});
    d = b.lastIndex;
  }
  d && d < a.length && (a = a.substring(d)) && c.push({literal:a});
  if (c.length) {
    return c;
  }
}, _literalFromParts:function(a) {
  for (var b = "", c = 0; c < a.length; c++) {
    b += a[c].literal || "";
  }
  return b;
}, _parseTextNodeAnnotation:function(a, b) {
  var c = this._parseBindings(a.textContent);
  if (c) {
    return a.textContent = this._literalFromParts(c) || " ", a = {bindings:[{kind:"text", name:"textContent", parts:c, isCompound:1 !== c.length}]}, b.push(a), a;
  }
}, _parseElementAnnotations:function(a, b, c) {
  var d = {bindings:[], events:[]};
  "content" === a.localName && (b._hasContent = !0);
  this._parseChildNodesAnnotations(a, d, b, c);
  a.attributes && (this._parseNodeAttributeAnnotations(a, d, b), this.prepElement && this.prepElement(a));
  (d.bindings.length || d.events.length || d.id) && b.push(d);
  return d;
}, _parseChildNodesAnnotations:function(a, b, c, d) {
  if (a.firstChild) {
    for (var f = a.firstChild, g = 0; f;) {
      var h = f.nextSibling;
      "template" !== f.localName || f.hasAttribute("preserve-content") || this._parseTemplate(f, g, c, b);
      if (f.nodeType === Node.TEXT_NODE) {
        for (var m = h; m && m.nodeType === Node.TEXT_NODE;) {
          f.textContent += m.textContent, h = m.nextSibling, a.removeChild(m), m = h;
        }
        d && !f.textContent.trim() && (a.removeChild(f), g--);
      }
      f.parentNode && (f = this._parseNodeAnnotations(f, c, d)) && (f.parent = b, f.index = g);
      f = h;
      g++;
    }
  }
}, _parseTemplate:function(a, b, c, d) {
  var f = document.createDocumentFragment();
  f._notes = this.parseAnnotations(a);
  f.appendChild(a.content);
  c.push({bindings:Polymer.nar, events:Polymer.nar, templateContent:f, parent:d, index:b});
}, _parseNodeAttributeAnnotations:function(a, b) {
  for (var c = Array.prototype.slice.call(a.attributes), d = c.length - 1, f; f = c[d]; d--) {
    var g = f.name;
    f = f.value;
    var h;
    "on-" === g.slice(0, 3) ? (a.removeAttribute(g), b.events.push({name:g.slice(3), value:f})) : (h = this._parseNodeAttributeAnnotation(a, g, f)) ? b.bindings.push(h) : "id" === g && (b.id = f);
  }
}, _parseNodeAttributeAnnotation:function(a, b, c) {
  if (c = this._parseBindings(c)) {
    var d = b, f = "property";
    "$" == b[b.length - 1] && (b = b.slice(0, -1), f = "attribute");
    var g = this._literalFromParts(c);
    g && "attribute" == f && a.setAttribute(b, g);
    "input" === a.localName && "value" === d && a.setAttribute(d, "");
    a.removeAttribute(d);
    a = Polymer.CaseMap.dashToCamelCase(b);
    "property" === f && (b = a);
    return {kind:f, name:b, propertyName:a, parts:c, literal:g, isCompound:1 !== c.length};
  }
}, findAnnotatedNode:function(a, b) {
  var c = b.parent && Polymer.Annotations.findAnnotatedNode(a, b.parent);
  if (c) {
    for (a = c.firstChild, c = 0; a; a = a.nextSibling) {
      if (b.index === c++) {
        return a;
      }
    }
  } else {
    return a;
  }
}};
(function() {
  function a(a, c) {
    return a.replace(f, function(a, d, f, g) {
      return d + "'" + b(f.replace(/["']/g, ""), c) + "'" + g;
    });
  }
  function b(a, b) {
    if (a && "#" === a[0]) {
      return a;
    }
    b = b.__urlResolver || (b.__urlResolver = b.createElement("a"));
    b.href = a;
    return b.href || a;
  }
  var c, d, f = /(url\()([^)]*)(\))/g, g = {"*":["href", "src", "style", "url"], form:["action"]}, h = /\{\{|\[\[/;
  Polymer.ResolveUrl = {resolveCss:a, resolveAttrs:function(c, d) {
    for (var f in g) {
      for (var m = g[f], u = 0, w = m.length, y, q, l; u < w && (y = m[u]); u++) {
        ("*" === f || c.localName === f) && (l = (q = c.attributes[y]) && q.value) && 0 > l.search(h) && (q.value = "style" === y ? a(l, d) : b(l, d));
      }
    }
  }, resolveUrl:function(a, f) {
    c || (c = document.implementation.createHTMLDocument("temp"), d = c.createElement("base"), c.head.appendChild(d));
    d.href = f;
    return b(a, c);
  }};
})();
Polymer.Base._addFeature({_prepAnnotations:function() {
  if (this._template) {
    var a = this;
    Polymer.Annotations.prepElement = function(b) {
      a._prepElement(b);
    };
    this._template._content && this._template._content._notes ? this._notes = this._template._content._notes : (this._notes = Polymer.Annotations.parseAnnotations(this._template), this._processAnnotations(this._notes));
    Polymer.Annotations.prepElement = null;
  } else {
    this._notes = [];
  }
}, _processAnnotations:function(a) {
  for (var b = 0; b < a.length; b++) {
    for (var c = a[b], d = 0; d < c.bindings.length; d++) {
      for (var f = c.bindings[d], g = 0; g < f.parts.length; g++) {
        var h = f.parts[g];
        if (!h.literal) {
          var m = this._parseMethod(h.value);
          m ? h.signature = m : h.model = this._modelForPath(h.value);
        }
      }
    }
    if (c.templateContent) {
      this._processAnnotations(c.templateContent._notes);
      var d = c.templateContent._parentProps = this._discoverTemplateParentProps(c.templateContent._notes), f = [], u;
      for (u in d) {
        f.push({index:c.index, kind:"property", name:"_parent_" + u, parts:[{mode:"{", model:u, value:u}]});
      }
      c.bindings = c.bindings.concat(f);
    }
  }
}, _discoverTemplateParentProps:function(a) {
  for (var b = {}, c = 0, d; c < a.length && (d = a[c]); c++) {
    for (var f = 0, g = d.bindings, h; f < g.length && (h = g[f]); f++) {
      for (var m = 0, u = h.parts, r; m < u.length && (r = u[m]); m++) {
        if (r.signature) {
          for (var n = r.signature.args, v = 0; v < n.length; v++) {
            var w = n[v].model;
            w && (b[w] = !0);
          }
        } else {
          r.model && (b[r.model] = !0);
        }
      }
    }
    d.templateContent && Polymer.Base.mixin(b, d.templateContent._parentProps);
  }
  return b;
}, _prepElement:function(a) {
  Polymer.ResolveUrl.resolveAttrs(a, this._template.ownerDocument);
}, _findAnnotatedNode:Polymer.Annotations.findAnnotatedNode, _marshalAnnotationReferences:function() {
  this._template && (this._marshalIdNodes(), this._marshalAnnotatedNodes(), this._marshalAnnotatedListeners());
}, _configureAnnotationReferences:function() {
  for (var a = this._notes, b = this._nodes, c = 0; c < a.length; c++) {
    var d = a[c], f = b[c];
    this._configureTemplateContent(d, f);
    this._configureCompoundBindings(d, f);
  }
}, _configureTemplateContent:function(a, b) {
  a.templateContent && (b._content = a.templateContent);
}, _configureCompoundBindings:function(a, b) {
  a = a.bindings;
  for (var c = 0; c < a.length; c++) {
    var d = a[c];
    if (d.isCompound) {
      for (var f = b.__compoundStorage__ || (b.__compoundStorage__ = {}), g = d.parts, h = Array(g.length), m = 0; m < g.length; m++) {
        h[m] = g[m].literal;
      }
      g = d.name;
      f[g] = h;
      d.literal && "property" == d.kind && (b._configValue ? b._configValue(g, d.literal) : b[g] = d.literal);
    }
  }
}, _marshalIdNodes:function() {
  this.$ = {};
  for (var a = 0, b = this._notes.length, c; a < b && (c = this._notes[a]); a++) {
    c.id && (this.$[c.id] = this._findAnnotatedNode(this.root, c));
  }
}, _marshalAnnotatedNodes:function() {
  if (this._notes && this._notes.length) {
    for (var a = Array(this._notes.length), b = 0; b < this._notes.length; b++) {
      a[b] = this._findAnnotatedNode(this.root, this._notes[b]);
    }
    this._nodes = a;
  }
}, _marshalAnnotatedListeners:function() {
  for (var a = 0, b = this._notes.length, c; a < b && (c = this._notes[a]); a++) {
    if (c.events && c.events.length) {
      for (var d = this._findAnnotatedNode(this.root, c), f = 0, g = c.events, h; f < g.length && (h = g[f]); f++) {
        this.listen(d, h.name, h.value);
      }
    }
  }
}});
Polymer.Base._addFeature({listeners:{}, _listenListeners:function(a) {
  var b;
  for (b in a) {
    if (0 > b.indexOf(".")) {
      var c = this;
      var d = b;
    } else {
      d = b.split("."), c = this.$[d[0]], d = d[1];
    }
    this.listen(c, d, a[b]);
  }
}, listen:function(a, b, c) {
  var d = this._recallEventHandler(this, b, a, c);
  d || (d = this._createEventHandler(a, b, c));
  d._listening || (this._listen(a, b, d), d._listening = !0);
}, _boundListenerKey:function(a, b) {
  return a + ":" + b;
}, _recordEventHandler:function(a, b, c, d, f) {
  var g = a.__boundListeners;
  g || (g = a.__boundListeners = new WeakMap);
  a = g.get(c);
  a || (a = {}, g.set(c, a));
  b = this._boundListenerKey(b, d);
  a[b] = f;
}, _recallEventHandler:function(a, b, c, d) {
  if (a = a.__boundListeners) {
    if (c = a.get(c)) {
      return b = this._boundListenerKey(b, d), c[b];
    }
  }
}, _createEventHandler:function(a, b, c) {
  var d = this, f = function(a) {
    if (d[c]) {
      d[c](a, a.detail);
    } else {
      d._warn(d._logf("_createEventHandler", "listener method `" + c + "` not defined"));
    }
  };
  f._listening = !1;
  this._recordEventHandler(d, b, a, c, f);
  return f;
}, unlisten:function(a, b, c) {
  if (c = this._recallEventHandler(this, b, a, c)) {
    this._unlisten(a, b, c), c._listening = !1;
  }
}, _listen:function(a, b, c) {
  a.addEventListener(b, c);
}, _unlisten:function(a, b, c) {
  a.removeEventListener(b, c);
}});
(function() {
  function a(a) {
    for (var b = 0, c; b < m.length; b++) {
      c = m[b], a ? document.addEventListener(c, v, !0) : document.removeEventListener(c, v, !0);
    }
  }
  function b() {
    n || (w.mouse.mouseIgnoreJob || a(!0), w.mouse.mouseIgnoreJob = Polymer.Debounce(w.mouse.mouseIgnoreJob, function() {
      a();
      w.mouse.target = null;
      w.mouse.mouseIgnoreJob = null;
    }, 2500));
  }
  function c(a) {
    var b = a.type;
    return -1 === m.indexOf(b) ? !1 : "mousemove" === b ? (b = void 0 === a.buttons ? 1 : a.buttons, a instanceof window.MouseEvent && !r && (b = u[a.which] || 0), !!(b & 1)) : 0 === (void 0 === a.button ? 0 : a.button);
  }
  function d(a, b, c) {
    a.movefn = b;
    a.upfn = c;
    document.addEventListener("mousemove", b);
    document.addEventListener("mouseup", c);
  }
  function f(a) {
    document.removeEventListener("mousemove", a.movefn);
    document.removeEventListener("mouseup", a.upfn);
    a.movefn = null;
    a.upfn = null;
  }
  var g = Polymer.DomApi.wrap, h = "string" === typeof document.head.style.touchAction, m = ["mousedown", "mousemove", "mouseup", "click"], u = [0, 1, 4, 2];
  try {
    var r = 1 === (new MouseEvent("test", {buttons:1})).buttons;
  } catch (l) {
    r = !1;
  }
  var n = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/), v = function(a) {
    a.__polymerGesturesHandled = {skip:!0};
    if ("click" === a.type) {
      for (var b = Polymer.dom(a).path, c = 0; c < b.length; c++) {
        if (b[c] === w.mouse.target) {
          return;
        }
      }
      a.preventDefault();
      a.stopPropagation();
    }
  }, w = {mouse:{target:null, mouseIgnoreJob:null}, touch:{x:0, y:0, id:-1, scrollDecided:!1}}, y = {gestures:{}, recognizers:[], deepTargetFind:function(a, b) {
    for (var c = document.elementFromPoint(a, b), l = c; l && l.shadowRoot;) {
      (l = l.shadowRoot.elementFromPoint(a, b)) && (c = l);
    }
    return c;
  }, findOriginalTarget:function(a) {
    return a.path ? a.path[0] : a.target;
  }, handleNative:function(a) {
    var c = a.type, l = g(a.currentTarget).__polymerGestures;
    if (l && (l = l[c])) {
      if (!a.__polymerGesturesHandled && (a.__polymerGesturesHandled = {}, "touch" === c.slice(0, 5))) {
        var d = a.changedTouches[0];
        "touchstart" === c && 1 === a.touches.length && (w.touch.id = d.identifier);
        if (w.touch.id !== d.identifier) {
          return;
        }
        h || "touchstart" !== c && "touchmove" !== c || y.handleTouchAction(a);
        "touchend" !== c || a.__polymerSimulatedTouch || (w.mouse.target = Polymer.dom(a).rootTarget, b(!0));
      }
      d = a.__polymerGesturesHandled;
      if (!d.skip) {
        for (var f = y.recognizers, q = 0, m; q < f.length; q++) {
          m = f[q], l[m.name] && !d[m.name] && m.flow && -1 < m.flow.start.indexOf(a.type) && m.reset && m.reset();
        }
        q = 0;
        for (m; q < f.length; q++) {
          m = f[q], l[m.name] && !d[m.name] && (d[m.name] = !0, m[c](a));
        }
      }
    }
  }, handleTouchAction:function(a) {
    var b = a.changedTouches[0], c = a.type;
    if ("touchstart" === c) {
      w.touch.x = b.clientX, w.touch.y = b.clientY, w.touch.scrollDecided = !1;
    } else {
      if ("touchmove" === c && !w.touch.scrollDecided) {
        w.touch.scrollDecided = !0;
        for (var c = Polymer.dom(a).path, l = "auto", d = 0, f; d < c.length; d++) {
          if (f = c[d], f.__polymerGesturesTouchAction) {
            l = f.__polymerGesturesTouchAction;
            break;
          }
        }
        c = l;
        l = !1;
        d = Math.abs(w.touch.x - b.clientX);
        b = Math.abs(w.touch.y - b.clientY);
        a.cancelable && ("none" === c ? l = !0 : "pan-x" === c ? l = b > d : "pan-y" === c && (l = d > b));
        l ? a.preventDefault() : y.prevent("track");
      }
    }
  }, add:function(a, b, c) {
    a = g(a);
    var d = this.gestures[b], l = d.deps, f = d.name, p = a.__polymerGestures;
    p || (a.__polymerGestures = p = {});
    for (var t = 0, h, q; t < l.length; t++) {
      h = l[t], n && -1 < m.indexOf(h) || ((q = p[h]) || (p[h] = q = {_count:0}), 0 === q._count && a.addEventListener(h, this.handleNative), q[f] = (q[f] || 0) + 1, q._count = (q._count || 0) + 1);
    }
    a.addEventListener(b, c);
    d.touchAction && this.setTouchAction(a, d.touchAction);
  }, remove:function(a, b, c) {
    a = g(a);
    var d = this.gestures[b], l = d.deps, d = d.name, f = a.__polymerGestures;
    if (f) {
      for (var p = 0, t, h; p < l.length; p++) {
        t = l[p], (h = f[t]) && h[d] && (h[d] = (h[d] || 1) - 1, h._count = (h._count || 1) - 1, 0 === h._count && a.removeEventListener(t, this.handleNative));
      }
    }
    a.removeEventListener(b, c);
  }, register:function(a) {
    this.recognizers.push(a);
    for (var b = 0; b < a.emits.length; b++) {
      this.gestures[a.emits[b]] = a;
    }
  }, findRecognizerByEvent:function(a) {
    for (var b = 0, c; b < this.recognizers.length; b++) {
      c = this.recognizers[b];
      for (var d = 0, l; d < c.emits.length; d++) {
        if (l = c.emits[d], l === a) {
          return c;
        }
      }
    }
    return null;
  }, setTouchAction:function(a, b) {
    h && (a.style.touchAction = b);
    a.__polymerGesturesTouchAction = b;
  }, fire:function(a, b, c) {
    Polymer.Base.fire(b, c, {node:a, bubbles:!0, cancelable:!0}).defaultPrevented && (a = c.sourceEvent) && a.preventDefault && a.preventDefault();
  }, prevent:function(a) {
    a = this.findRecognizerByEvent(a);
    a.info && (a.info.prevent = !0);
  }};
  y.register({name:"downup", deps:["mousedown", "touchstart", "touchend"], flow:{start:["mousedown", "touchstart"], end:["mouseup", "touchend"]}, emits:["down", "up"], info:{movefn:null, upfn:null}, reset:function() {
    f(this.info);
  }, mousedown:function(a) {
    if (c(a)) {
      var b = y.findOriginalTarget(a), l = this;
      d(this.info, function(a) {
        c(a) || (l.fire("up", b, a), f(l.info));
      }, function(a) {
        c(a) && l.fire("up", b, a);
        f(l.info);
      });
      this.fire("down", b, a);
    }
  }, touchstart:function(a) {
    this.fire("down", y.findOriginalTarget(a), a.changedTouches[0]);
  }, touchend:function(a) {
    this.fire("up", y.findOriginalTarget(a), a.changedTouches[0]);
  }, fire:function(a, b, c) {
    y.fire(b, a, {x:c.clientX, y:c.clientY, sourceEvent:c, prevent:function(a) {
      return y.prevent(a);
    }});
  }});
  y.register({name:"track", touchAction:"none", deps:["mousedown", "touchstart", "touchmove", "touchend"], flow:{start:["mousedown", "touchstart"], end:["mouseup", "touchend"]}, emits:["track"], info:{x:0, y:0, state:"start", started:!1, moves:[], addMove:function(a) {
    2 < this.moves.length && this.moves.shift();
    this.moves.push(a);
  }, movefn:null, upfn:null, prevent:!1}, reset:function() {
    this.info.state = "start";
    this.info.started = !1;
    this.info.moves = [];
    this.info.x = 0;
    this.info.y = 0;
    this.info.prevent = !1;
    f(this.info);
  }, hasMovedEnough:function(a, b) {
    if (this.info.prevent) {
      return !1;
    }
    if (this.info.started) {
      return !0;
    }
    b = Math.abs(this.info.y - b);
    return 5 <= Math.abs(this.info.x - a) || 5 <= b;
  }, mousedown:function(a) {
    if (c(a)) {
      var b = y.findOriginalTarget(a), l = this, g = function(a) {
        var d = a.clientX, p = a.clientY;
        l.hasMovedEnough(d, p) && (l.info.state = l.info.started ? "mouseup" === a.type ? "end" : "track" : "start", "start" === l.info.state && y.prevent("tap"), l.info.addMove({x:d, y:p}), c(a) || (l.info.state = "end", f(l.info)), l.fire(b, a), l.info.started = !0);
      };
      d(this.info, g, function(a) {
        l.info.started && g(a);
        f(l.info);
      });
      this.info.x = a.clientX;
      this.info.y = a.clientY;
    }
  }, touchstart:function(a) {
    a = a.changedTouches[0];
    this.info.x = a.clientX;
    this.info.y = a.clientY;
  }, touchmove:function(a) {
    var b = y.findOriginalTarget(a);
    a = a.changedTouches[0];
    var c = a.clientX, d = a.clientY;
    this.hasMovedEnough(c, d) && ("start" === this.info.state && y.prevent("tap"), this.info.addMove({x:c, y:d}), this.fire(b, a), this.info.state = "track", this.info.started = !0);
  }, touchend:function(a) {
    var b = y.findOriginalTarget(a);
    a = a.changedTouches[0];
    this.info.started && (this.info.state = "end", this.info.addMove({x:a.clientX, y:a.clientY}), this.fire(b, a));
  }, fire:function(a, b) {
    var c = this.info.moves[this.info.moves.length - 2], d = this.info.moves[this.info.moves.length - 1], l = d.x - this.info.x, f = d.y - this.info.y, p = 0;
    if (c) {
      var g = d.x - c.x;
      p = d.y - c.y;
    }
    return y.fire(a, "track", {state:this.info.state, x:b.clientX, y:b.clientY, dx:l, dy:f, ddx:g, ddy:p, sourceEvent:b, hover:function() {
      return y.deepTargetFind(b.clientX, b.clientY);
    }});
  }});
  y.register({name:"tap", deps:["mousedown", "click", "touchstart", "touchend"], flow:{start:["mousedown", "touchstart"], end:["click", "touchend"]}, emits:["tap"], info:{x:NaN, y:NaN, prevent:!1}, reset:function() {
    this.info.x = NaN;
    this.info.y = NaN;
    this.info.prevent = !1;
  }, save:function(a) {
    this.info.x = a.clientX;
    this.info.y = a.clientY;
  }, mousedown:function(a) {
    c(a) && this.save(a);
  }, click:function(a) {
    c(a) && this.forward(a);
  }, touchstart:function(a) {
    this.save(a.changedTouches[0]);
  }, touchend:function(a) {
    this.forward(a.changedTouches[0]);
  }, forward:function(a) {
    var b = Math.abs(a.clientX - this.info.x), c = Math.abs(a.clientY - this.info.y), d = y.findOriginalTarget(a);
    if (!(b = isNaN(b) || isNaN(c) || 25 >= b && 25 >= c)) {
      if ("click" === a.type) {
        if (0 === a.detail) {
          b = !0;
        } else {
          var b = y.findOriginalTarget(a).getBoundingClientRect(), c = a.pageX, l = a.pageY, b = !(c >= b.left && c <= b.right && l >= b.top && l <= b.bottom);
        }
      } else {
        b = !1;
      }
    }
    b && (this.info.prevent || y.fire(d, "tap", {x:a.clientX, y:a.clientY, sourceEvent:a}));
  }});
  var q = {x:"pan-x", y:"pan-y", none:"none", all:"auto"};
  Polymer.Base._addFeature({_setupGestures:function() {
    this.__polymerGestures = null;
  }, _listen:function(a, b, c) {
    y.gestures[b] ? y.add(a, b, c) : a.addEventListener(b, c);
  }, _unlisten:function(a, b, c) {
    y.gestures[b] ? y.remove(a, b, c) : a.removeEventListener(b, c);
  }, setScrollDirection:function(a, b) {
    y.setTouchAction(b || this, q[a] || "auto");
  }});
  Polymer.Gestures = y;
})();
Polymer.Base._addFeature({$$:function(a) {
  return Polymer.dom(this.root).querySelector(a);
}, toggleClass:function(a, b, c) {
  c = c || this;
  1 == arguments.length && (b = !c.classList.contains(a));
  b ? Polymer.dom(c).classList.add(a) : Polymer.dom(c).classList.remove(a);
}, toggleAttribute:function(a, b, c) {
  c = c || this;
  1 == arguments.length && (b = !c.hasAttribute(a));
  b ? Polymer.dom(c).setAttribute(a, "") : Polymer.dom(c).removeAttribute(a);
}, classFollows:function(a, b, c) {
  c && Polymer.dom(c).classList.remove(a);
  b && Polymer.dom(b).classList.add(a);
}, attributeFollows:function(a, b, c) {
  c && Polymer.dom(c).removeAttribute(a);
  b && Polymer.dom(b).setAttribute(a, "");
}, getEffectiveChildNodes:function() {
  return Polymer.dom(this).getEffectiveChildNodes();
}, getEffectiveChildren:function() {
  return Polymer.dom(this).getEffectiveChildNodes().filter(function(a) {
    return a.nodeType === Node.ELEMENT_NODE;
  });
}, getEffectiveTextContent:function() {
  for (var a = this.getEffectiveChildNodes(), b = [], c = 0, d; d = a[c]; c++) {
    d.nodeType !== Node.COMMENT_NODE && b.push(Polymer.dom(d).textContent);
  }
  return b.join("");
}, queryEffectiveChildren:function(a) {
  return (a = Polymer.dom(this).queryDistributedElements(a)) && a[0];
}, queryAllEffectiveChildren:function(a) {
  return Polymer.dom(this).queryDistributedElements(a);
}, getContentChildNodes:function(a) {
  return (a = Polymer.dom(this.root).querySelector(a || "content")) ? Polymer.dom(a).getDistributedNodes() : [];
}, getContentChildren:function(a) {
  return this.getContentChildNodes(a).filter(function(a) {
    return a.nodeType === Node.ELEMENT_NODE;
  });
}, fire:function(a, b, c) {
  c = c || Polymer.nob;
  var d = c.node || this;
  b = null === b || void 0 === b ? {} : b;
  var f = c._useCache;
  c = this._getEvent(a, void 0 === c.bubbles ? !0 : c.bubbles, !!c.cancelable, f);
  c.detail = b;
  f && (this.__eventCache[a] = null);
  d.dispatchEvent(c);
  f && (this.__eventCache[a] = c);
  return c;
}, __eventCache:{}, _getEvent:function(a, b, c, d) {
  (d = d && this.__eventCache[a]) && d.bubbles == b && d.cancelable == c || (d = new Event(a, {bubbles:!!b, cancelable:c}));
  return d;
}, async:function(a, b) {
  var c = this;
  return Polymer.Async.run(function() {
    a.call(c);
  }, b);
}, cancelAsync:function(a) {
  Polymer.Async.cancel(a);
}, arrayDelete:function(a, b) {
  if (Array.isArray(a)) {
    if (b = a.indexOf(b), 0 <= b) {
      return a.splice(b, 1);
    }
  } else {
    if (b = this._get(a).indexOf(b), 0 <= b) {
      return this.splice(a, b, 1);
    }
  }
}, transform:function(a, b) {
  b = b || this;
  b.style.webkitTransform = a;
  b.style.transform = a;
}, translate3d:function(a, b, c, d) {
  this.transform("translate3d(" + a + "," + b + "," + c + ")", d || this);
}, importHref:function(a, b, c, d) {
  var f = document.createElement("link");
  f.rel = "import";
  f.href = a;
  d && f.setAttribute("async", "");
  var g = this;
  b && (f.onload = function(a) {
    return b.call(g, a);
  });
  c && (f.onerror = function(a) {
    return c.call(g, a);
  });
  document.head.appendChild(f);
  return f;
}, create:function(a, b) {
  a = document.createElement(a);
  if (b) {
    for (var c in b) {
      a[c] = b[c];
    }
  }
  return a;
}, isLightDescendant:function(a) {
  return this !== a && this.contains(a) && Polymer.dom(this).getOwnerRoot() === Polymer.dom(a).getOwnerRoot();
}, isLocalDescendant:function(a) {
  return this.root === Polymer.dom(a).getOwnerRoot();
}});
Polymer.Bind = {_dataEventCache:{}, prepareModel:function(a) {
  Polymer.Base.mixin(a, this._modelApi);
}, _modelApi:{_notifyChange:function(a, b, c) {
  c = void 0 === c ? this[a] : c;
  b = b || Polymer.CaseMap.camelToDashCase(a) + "-changed";
  this.fire(b, {value:c}, {bubbles:!1, cancelable:!1, _useCache:!0});
}, _propertySetter:function(a, b, c, d) {
  var f = this.__data__[a];
  f === b || f !== f && b !== b || (this.__data__[a] = b, "object" == typeof b && this._clearPath(a), this._propertyChanged && this._propertyChanged(a, b, f), c && this._effectEffects(a, b, c, f, d));
  return f;
}, __setProperty:function(a, b, c, d) {
  d = d || this;
  var f = d._propertyEffects && d._propertyEffects[a];
  f ? d._propertySetter(a, b, f, c) : d[a] = b;
}, _effectEffects:function(a, b, c, d, f) {
  for (var g = 0, h = c.length, m; g < h && (m = c[g]); g++) {
    m.fn.call(this, a, b, m.effect, d, f);
  }
}, _clearPath:function(a) {
  for (var b in this.__data__) {
    0 === b.indexOf(a + ".") && (this.__data__[b] = void 0);
  }
}}, ensurePropertyEffects:function(a, b) {
  a._propertyEffects || (a._propertyEffects = {});
  var c = a._propertyEffects[b];
  c || (c = a._propertyEffects[b] = []);
  return c;
}, addPropertyEffect:function(a, b, c, d) {
  a = this.ensurePropertyEffects(a, b);
  c = {kind:c, effect:d, fn:Polymer.Bind["_" + c + "Effect"]};
  a.push(c);
  return c;
}, createBindings:function(a) {
  var b = a._propertyEffects;
  if (b) {
    for (var c in b) {
      var d = b[c];
      d.sort(this._sortPropertyEffects);
      this._createAccessors(a, c, d);
    }
  }
}, _sortPropertyEffects:function() {
  var a = {compute:0, annotation:1, annotatedComputation:2, reflect:3, notify:4, observer:5, complexObserver:6, "function":7};
  return function(b, c) {
    return a[b.kind] - a[c.kind];
  };
}(), _createAccessors:function(a, b, c) {
  var d = {get:function() {
    return this.__data__[b];
  }}, f = function(a) {
    this._propertySetter(b, a, c);
  }, g = a.getPropertyInfo && a.getPropertyInfo(b);
  g && g.readOnly ? g.computed || (a["_set" + this.upper(b)] = f) : d.set = f;
  Object.defineProperty(a, b, d);
}, upper:function(a) {
  return a[0].toUpperCase() + a.substring(1);
}, _addAnnotatedListener:function(a, b, c, d, f, g) {
  a._bindListeners || (a._bindListeners = []);
  g = this._notedListenerFactory(c, d, this._isStructured(d), g);
  f = f || Polymer.CaseMap.camelToDashCase(c) + "-changed";
  a._bindListeners.push({index:b, property:c, path:d, changedFn:g, event:f});
}, _isStructured:function(a) {
  return 0 < a.indexOf(".");
}, _isEventBogus:function(a, b) {
  return a.path && a.path[0] !== b;
}, _notedListenerFactory:function(a, b, c, d) {
  return function(f, g, h) {
    h ? this._notifyPath(this._fixPath(b, a, h), g) : (g = f[a], d && (g = !g), c ? this.__data__[b] != g && this.set(b, g) : this[b] = g);
  };
}, prepareInstance:function(a) {
  a.__data__ = Object.create(null);
}, setupBindListeners:function(a) {
  for (var b = a._bindListeners, c = 0, d = b.length, f; c < d && (f = b[c]); c++) {
    this._addNotifyListener(a._nodes[f.index], a, f.event, f.changedFn);
  }
}, _addNotifyListener:function(a, b, c, d) {
  a.addEventListener(c, function(a) {
    return b._notifyListener(d, a);
  });
}};
Polymer.Base.extend(Polymer.Bind, {_shouldAddListener:function(a) {
  return a.name && "attribute" != a.kind && "text" != a.kind && !a.isCompound && "{" === a.parts[0].mode;
}, _annotationEffect:function(a, b, c) {
  a != c.value && (b = this._get(c.value), this.__data__[c.value] = b);
  a = c.negate ? !b : b;
  if (!c.customEvent || this._nodes[c.index][c.name] !== a) {
    return this._applyEffectValue(c, a);
  }
}, _reflectEffect:function(a, b, c) {
  this.reflectPropertyToAttribute(a, c.attribute, b);
}, _notifyEffect:function(a, b, c, d, f) {
  f || this._notifyChange(a, c.event, b);
}, _functionEffect:function(a, b, c, d, f) {
  c.call(this, a, b, d, f);
}, _observerEffect:function(a, b, c, d) {
  (a = this[c.method]) ? a.call(this, b, d) : this._warn(this._logf("_observerEffect", "observer method `" + c.method + "` not defined"));
}, _complexObserverEffect:function(a, b, c) {
  var d = this[c.method];
  d ? (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) && d.apply(this, a) : c.dynamicFn || this._warn(this._logf("_complexObserverEffect", "observer method `" + c.method + "` not defined"));
}, _computeEffect:function(a, b, c) {
  var d = this[c.method];
  if (d) {
    if (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) {
      d = d.apply(this, a), this.__setProperty(c.name, d);
    }
  } else {
    c.dynamicFn || this._warn(this._logf("_computeEffect", "compute method `" + c.method + "` not defined"));
  }
}, _annotatedComputationEffect:function(a, b, c) {
  var d = this._rootDataHost || this, f = d[c.method];
  if (f) {
    if (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) {
      d = f.apply(d, a), c.negate && (d = !d), this._applyEffectValue(c, d);
    }
  } else {
    c.dynamicFn || d._warn(d._logf("_annotatedComputationEffect", "compute method `" + c.method + "` not defined"));
  }
}, _marshalArgs:function(a, b, c, d) {
  for (var f = [], g = b.args, h = 1 < g.length || b.dynamicFn, m = 0, u = g.length; m < u; m++) {
    var r = g[m], n = r.name;
    var v = r.literal ? r.value : r.structured ? Polymer.Base._get(n, a) : a[n];
    if (h && void 0 === v) {
      return;
    }
    r.wildcard ? (r = 0 === n.indexOf(c + "."), r = 0 === b.trigger.name.indexOf(n) && !r, f[m] = {path:r ? c : n, value:r ? d : v, base:v}) : f[m] = v;
  }
  return f;
}});
Polymer.Base._addFeature({_addPropertyEffect:function(a, b, c) {
  a = Polymer.Bind.addPropertyEffect(this, a, b, c);
  a.pathFn = this["_" + a.kind + "PathEffect"];
}, _prepEffects:function() {
  Polymer.Bind.prepareModel(this);
  this._addAnnotationEffects(this._notes);
}, _prepBindings:function() {
  Polymer.Bind.createBindings(this);
}, _addPropertyEffects:function(a) {
  if (a) {
    for (var b in a) {
      var c = a[b];
      c.observer && this._addObserverEffect(b, c.observer);
      c.computed && (c.readOnly = !0, this._addComputedEffect(b, c.computed));
      c.notify && this._addPropertyEffect(b, "notify", {event:Polymer.CaseMap.camelToDashCase(b) + "-changed"});
      if (c.reflectToAttribute) {
        var d = Polymer.CaseMap.camelToDashCase(b);
        "-" === d[0] ? this._warn(this._logf("_addPropertyEffects", "Property " + b + " cannot be reflected to attribute " + d + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.')) : this._addPropertyEffect(b, "reflect", {attribute:d});
      }
      c.readOnly && Polymer.Bind.ensurePropertyEffects(this, b);
    }
  }
}, _addComputedEffect:function(a, b) {
  b = this._parseMethod(b);
  for (var c = b.dynamicFn, d = 0, f; d < b.args.length && (f = b.args[d]); d++) {
    this._addPropertyEffect(f.model, "compute", {method:b.method, args:b.args, trigger:f, name:a, dynamicFn:c});
  }
  c && this._addPropertyEffect(b.method, "compute", {method:b.method, args:b.args, trigger:null, name:a, dynamicFn:c});
}, _addObserverEffect:function(a, b) {
  this._addPropertyEffect(a, "observer", {method:b, property:a});
}, _addComplexObserverEffects:function(a) {
  if (a) {
    for (var b = 0, c; b < a.length && (c = a[b]); b++) {
      this._addComplexObserverEffect(c);
    }
  }
}, _addComplexObserverEffect:function(a) {
  var b = this._parseMethod(a);
  if (!b) {
    throw Error("Malformed observer expression '" + a + "'");
  }
  a = b.dynamicFn;
  for (var c = 0, d; c < b.args.length && (d = b.args[c]); c++) {
    this._addPropertyEffect(d.model, "complexObserver", {method:b.method, args:b.args, trigger:d, dynamicFn:a});
  }
  a && this._addPropertyEffect(b.method, "complexObserver", {method:b.method, args:b.args, trigger:null, dynamicFn:a});
}, _addAnnotationEffects:function(a) {
  for (var b = 0, c; b < a.length && (c = a[b]); b++) {
    for (var d = c.bindings, f = 0, g; f < d.length && (g = d[f]); f++) {
      this._addAnnotationEffect(g, b);
    }
  }
}, _addAnnotationEffect:function(a, b) {
  Polymer.Bind._shouldAddListener(a) && Polymer.Bind._addAnnotatedListener(this, b, a.name, a.parts[0].value, a.parts[0].event, a.parts[0].negate);
  for (var c = 0; c < a.parts.length; c++) {
    var d = a.parts[c];
    d.signature ? this._addAnnotatedComputationEffect(a, d, b) : d.literal || ("attribute" === a.kind && "-" === a.name[0] ? this._warn(this._logf("_addAnnotationEffect", "Cannot set attribute " + a.name + ' because "-" is not a valid attribute starting character')) : this._addPropertyEffect(d.model, "annotation", {kind:a.kind, index:b, name:a.name, propertyName:a.propertyName, value:d.value, isCompound:a.isCompound, compoundIndex:d.compoundIndex, event:d.event, customEvent:d.customEvent, negate:d.negate}));
  }
}, _addAnnotatedComputationEffect:function(a, b, c) {
  var d = b.signature;
  if (d.static) {
    this.__addAnnotatedComputationEffect("__static__", c, a, b, null);
  } else {
    for (var f = 0, g; f < d.args.length && (g = d.args[f]); f++) {
      g.literal || this.__addAnnotatedComputationEffect(g.model, c, a, b, g);
    }
    d.dynamicFn && this.__addAnnotatedComputationEffect(d.method, c, a, b, null);
  }
}, __addAnnotatedComputationEffect:function(a, b, c, d, f) {
  this._addPropertyEffect(a, "annotatedComputation", {index:b, isCompound:c.isCompound, compoundIndex:d.compoundIndex, kind:c.kind, name:c.name, negate:d.negate, method:d.signature.method, args:d.signature.args, trigger:f, dynamicFn:d.signature.dynamicFn});
}, _parseMethod:function(a) {
  var b = a.match(/([^\s]+?)\(([\s\S]*)\)/);
  if (b) {
    a = {method:b[1], static:!0};
    this.getPropertyInfo(a.method) !== Polymer.nob && (a.static = !1, a.dynamicFn = !0);
    if (b[2].trim()) {
      return b = b[2].replace(/\\,/g, "&comma;").split(","), this._parseArgs(b, a);
    }
    a.args = Polymer.nar;
    return a;
  }
}, _parseArgs:function(a, b) {
  b.args = a.map(function(a) {
    a = this._parseArg(a);
    a.literal || (b.static = !1);
    return a;
  }, this);
  return b;
}, _parseArg:function(a) {
  a = a.trim().replace(/&comma;/g, ",").replace(/\\(.)/g, "$1");
  var b = {name:a}, c = a[0];
  "-" === c && (c = a[1]);
  "0" <= c && "9" >= c && (c = "#");
  switch(c) {
    case "'":
    case '"':
      b.value = a.slice(1, -1);
      b.literal = !0;
      break;
    case "#":
      b.value = Number(a), b.literal = !0;
  }
  b.literal || (b.model = this._modelForPath(a), b.structured = 0 < a.indexOf("."), b.structured && (b.wildcard = ".*" == a.slice(-2), b.wildcard && (b.name = a.slice(0, -2))));
  return b;
}, _marshalInstanceEffects:function() {
  Polymer.Bind.prepareInstance(this);
  this._bindListeners && Polymer.Bind.setupBindListeners(this);
}, _applyEffectValue:function(a, b) {
  var c = this._nodes[a.index], d = a.name;
  if (a.isCompound) {
    var f = c.__compoundStorage__[d];
    f[a.compoundIndex] = b;
    b = f.join("");
  }
  if ("attribute" == a.kind) {
    this.serializeValueToAttribute(b, d, c);
  } else {
    "className" === d && (b = this._scopeElementClass(c, b));
    if ("textContent" === d || "input" == c.localName && "value" == d) {
      b = void 0 == b ? "" : b;
    }
    var g;
    c._propertyInfo && (g = c._propertyInfo[d]) && g.readOnly || this.__setProperty(d, b, !1, c);
  }
}, _executeStaticEffects:function() {
  this._propertyEffects && this._propertyEffects.__static__ && this._effectEffects("__static__", null, this._propertyEffects.__static__);
}});
(function() {
  var a = Polymer.Settings.usePolyfillProto;
  Polymer.Base._addFeature({_setupConfigure:function(a) {
    this._config = {};
    this._handlers = [];
    this._aboveConfig = null;
    if (a) {
      for (var b in a) {
        void 0 !== a[b] && (this._config[b] = a[b]);
      }
    }
  }, _marshalAttributes:function() {
    this._takeAttributesToModel(this._config);
  }, _attributeChangedImpl:function(a) {
    this._setAttributeToProperty(this._clientsReadied ? this : this._config, a);
  }, _configValue:function(a, c) {
    var b = this._propertyInfo[a];
    b && b.readOnly || (this._config[a] = c);
  }, _beforeClientsReady:function() {
    this._configure();
  }, _configure:function() {
    this._configureAnnotationReferences();
    this._aboveConfig = this.mixin({}, this._config);
    for (var a = {}, c = 0; c < this.behaviors.length; c++) {
      this._configureProperties(this.behaviors[c].properties, a);
    }
    this._configureProperties(this.properties, a);
    this.mixin(a, this._aboveConfig);
    this._config = a;
    this._clients && this._clients.length && this._distributeConfig(this._config);
  }, _configureProperties:function(b, c) {
    for (var d in b) {
      var f = b[d];
      !a && this.hasOwnProperty(d) && this._propertyEffects && this._propertyEffects[d] ? (c[d] = this[d], delete this[d]) : void 0 !== f.value && (f = f.value, "function" == typeof f && (f = f.call(this, this._config)), c[d] = f);
    }
  }, _distributeConfig:function(a) {
    var b = this._propertyEffects;
    if (b) {
      for (var d in a) {
        var f = b[d];
        if (f) {
          for (var g = 0, h = f.length, m; g < h && (m = f[g]); g++) {
            if ("annotation" === m.kind && !m.isCompound) {
              var u = this._nodes[m.effect.index], r = m.effect.propertyName, n = "attribute" == m.effect.kind, v = u._propertyEffects && u._propertyEffects[r];
              !u._configValue || !v && n || (v = d === m.effect.value ? a[d] : this._get(m.effect.value, a), n && (v = u.deserialize(this.serialize(v), u._propertyInfo[r].type)), u._configValue(r, v));
            }
          }
        }
      }
    }
  }, _afterClientsReady:function() {
    this._executeStaticEffects();
    this._applyConfig(this._config, this._aboveConfig);
    this._flushHandlers();
  }, _applyConfig:function(a, c) {
    for (var b in a) {
      void 0 === this[b] && this.__setProperty(b, a[b], b in c);
    }
  }, _notifyListener:function(a, c) {
    if (!Polymer.Bind._isEventBogus(c, c.target)) {
      if (c.detail) {
        var b = c.detail.value;
        var f = c.detail.path;
      }
      if (this._clientsReadied) {
        return a.call(this, c.target, b, f);
      }
      this._queueHandler([a, c.target, b, f]);
    }
  }, _queueHandler:function(a) {
    this._handlers.push(a);
  }, _flushHandlers:function() {
    for (var a = this._handlers, c = 0, d = a.length, f; c < d && (f = a[c]); c++) {
      f[0].call(this, f[1], f[2], f[3]);
    }
    this._handlers = [];
  }});
})();
(function() {
  Polymer.Base._addFeature({notifyPath:function(a, b, c) {
    var d = {};
    this._get(a, this, d);
    d.path && this._notifyPath(d.path, b, c);
  }, _notifyPath:function(a, b, c) {
    var d = this._propertySetter(a, b);
    if (d !== b && (d === d || b === b)) {
      return this._pathEffector(a, b), c || this._notifyPathUp(a, b), !0;
    }
  }, _getPathParts:function(a) {
    if (Array.isArray(a)) {
      for (var b = [], c = 0; c < a.length; c++) {
        for (var d = a[c].toString().split("."), f = 0; f < d.length; f++) {
          b.push(d[f]);
        }
      }
      return b;
    }
    return a.toString().split(".");
  }, set:function(a, b, c) {
    var d = c || this, f = this._getPathParts(a), g = f[f.length - 1];
    if (1 < f.length) {
      for (a = 0; a < f.length - 1; a++) {
        var h = f[a];
        m && "#" == h[0] ? d = Polymer.Collection.get(m).getItem(h) : (d = d[h], m && parseInt(h, 10) == h && (f[a] = Polymer.Collection.get(m).getKey(d)));
        if (!d) {
          return;
        }
        var m = Array.isArray(d) ? d : null;
      }
      if (m) {
        var h = Polymer.Collection.get(m);
        if ("#" == g[0]) {
          var u = g;
          var r = h.getItem(u);
          g = m.indexOf(r);
          h.setItem(u, b);
        } else {
          parseInt(g, 10) == g && (r = d[g], u = h.getKey(r), f[a] = u, h.setItem(u, b));
        }
      }
      d[g] = b;
      c || this._notifyPath(f.join("."), b);
    } else {
      d[a] = b;
    }
  }, get:function(a, b) {
    return this._get(a, b);
  }, _get:function(a, b, c) {
    b = b || this;
    a = this._getPathParts(a);
    for (var d, f = 0; f < a.length; f++) {
      if (!b) {
        return;
      }
      var g = a[f];
      d && "#" == g[0] ? b = Polymer.Collection.get(d).getItem(g) : (b = b[g], c && d && parseInt(g, 10) == g && (a[f] = Polymer.Collection.get(d).getKey(b)));
      d = Array.isArray(b) ? b : null;
    }
    c && (c.path = a.join("."));
    return b;
  }, _pathEffector:function(a, b) {
    var c = this._modelForPath(a);
    if (c = this._propertyEffects && this._propertyEffects[c]) {
      for (var d = 0, f; d < c.length && (f = c[d]); d++) {
        var g = f.pathFn;
        g && g.call(this, a, b, f.effect);
      }
    }
    this._boundPaths && this._notifyBoundPaths(a, b);
  }, _annotationPathEffect:function(a, b, c) {
    if (c.value === a || 0 === c.value.indexOf(a + ".")) {
      Polymer.Bind._annotationEffect.call(this, a, b, c);
    } else {
      if (0 === a.indexOf(c.value + ".") && !c.negate) {
        var d = this._nodes[c.index];
        d && d._notifyPath && (a = this._fixPath(c.name, c.value, a), d._notifyPath(a, b, !0));
      }
    }
  }, _complexObserverPathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._complexObserverEffect.call(this, a, b, c);
  }, _computePathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._computeEffect.call(this, a, b, c);
  }, _annotatedComputationPathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._annotatedComputationEffect.call(this, a, b, c);
  }, _pathMatchesEffect:function(a, b) {
    var c = b.trigger.name;
    return c == a || 0 === c.indexOf(a + ".") || b.trigger.wildcard && 0 === a.indexOf(c);
  }, linkPaths:function(a, b) {
    this._boundPaths = this._boundPaths || {};
    b ? this._boundPaths[a] = b : this.unlinkPaths(a);
  }, unlinkPaths:function(a) {
    this._boundPaths && delete this._boundPaths[a];
  }, _notifyBoundPaths:function(a, b) {
    for (var c in this._boundPaths) {
      var d = this._boundPaths[c];
      0 == a.indexOf(c + ".") ? this._notifyPath(this._fixPath(d, c, a), b) : 0 == a.indexOf(d + ".") && this._notifyPath(this._fixPath(c, d, a), b);
    }
  }, _fixPath:function(a, b, c) {
    return a + c.slice(b.length);
  }, _notifyPathUp:function(a, b) {
    var c = this._modelForPath(a), c = Polymer.CaseMap.camelToDashCase(c) + this._EVENT_CHANGED;
    this.fire(c, {path:a, value:b}, {bubbles:!1, _useCache:!0});
  }, _modelForPath:function(a) {
    var b = a.indexOf(".");
    return 0 > b ? a : a.slice(0, b);
  }, _EVENT_CHANGED:"-changed", notifySplices:function(a, b) {
    var c = {};
    a = this._get(a, this, c);
    this._notifySplices(a, c.path, b);
  }, _notifySplices:function(a, b, c) {
    c = {keySplices:Polymer.Collection.applySplices(a, c), indexSplices:c};
    a.hasOwnProperty("splices") || Object.defineProperty(a, "splices", {configurable:!0, writable:!0});
    a.splices = c;
    this._notifyPath(b + ".splices", c);
    this._notifyPath(b + ".length", a.length);
    c.keySplices = null;
    c.indexSplices = null;
  }, _notifySplice:function(a, b, c, d, f) {
    this._notifySplices(a, b, [{index:c, addedCount:d, removed:f, object:a, type:"splice"}]);
  }, push:function(a) {
    var b = {}, c = this._get(a, this, b), d = Array.prototype.slice.call(arguments, 1), f = c.length, g = c.push.apply(c, d);
    d.length && this._notifySplice(c, b.path, f, d.length, []);
    return g;
  }, pop:function(a) {
    var b = {}, c = this._get(a, this, b), d = !!c.length, f = Array.prototype.slice.call(arguments, 1), f = c.pop.apply(c, f);
    d && this._notifySplice(c, b.path, c.length, 0, [f]);
    return f;
  }, splice:function(a, b) {
    var c = {}, d = this._get(a, this, c);
    (b = 0 > b ? d.length - Math.floor(-b) : Math.floor(b)) || (b = 0);
    var f = Array.prototype.slice.call(arguments, 1), g = d.splice.apply(d, f);
    ((f = Math.max(f.length - 2, 0)) || g.length) && this._notifySplice(d, c.path, b, f, g);
    return g;
  }, shift:function(a) {
    var b = {}, c = this._get(a, this, b), d = !!c.length, f = Array.prototype.slice.call(arguments, 1), f = c.shift.apply(c, f);
    d && this._notifySplice(c, b.path, 0, 0, [f]);
    return f;
  }, unshift:function(a) {
    var b = {}, c = this._get(a, this, b), d = Array.prototype.slice.call(arguments, 1), f = c.unshift.apply(c, d);
    d.length && this._notifySplice(c, b.path, 0, d.length, []);
    return f;
  }, prepareModelNotifyPath:function(a) {
    this.mixin(a, {fire:Polymer.Base.fire, _getEvent:Polymer.Base._getEvent, __eventCache:Polymer.Base.__eventCache, notifyPath:Polymer.Base.notifyPath, _get:Polymer.Base._get, _EVENT_CHANGED:Polymer.Base._EVENT_CHANGED, _notifyPath:Polymer.Base._notifyPath, _notifyPathUp:Polymer.Base._notifyPathUp, _pathEffector:Polymer.Base._pathEffector, _annotationPathEffect:Polymer.Base._annotationPathEffect, _complexObserverPathEffect:Polymer.Base._complexObserverPathEffect, _annotatedComputationPathEffect:Polymer.Base._annotatedComputationPathEffect, 
    _computePathEffect:Polymer.Base._computePathEffect, _modelForPath:Polymer.Base._modelForPath, _pathMatchesEffect:Polymer.Base._pathMatchesEffect, _notifyBoundPaths:Polymer.Base._notifyBoundPaths, _getPathParts:Polymer.Base._getPathParts});
  }});
})();
Polymer.Base._addFeature({resolveUrl:function(a) {
  var b = Polymer.DomModule.import(this.is), c = "";
  b && (c = b.getAttribute("assetpath") || "", c = Polymer.ResolveUrl.resolveUrl(c, b.ownerDocument.baseURI));
  return Polymer.ResolveUrl.resolveUrl(a, c);
}});
Polymer.CssParse = function() {
  return {parse:function(a) {
    a = this._clean(a);
    return this._parseCss(this._lex(a), a);
  }, _clean:function(a) {
    return a.replace(this._rx.comments, "").replace(this._rx.port, "");
  }, _lex:function(a) {
    for (var b = {start:0, end:a.length}, c = b, d = 0, f = a.length; d < f; d++) {
      switch(a[d]) {
        case this.OPEN_BRACE:
          c.rules || (c.rules = []);
          var g = c, c = {start:d + 1, parent:g, previous:g.rules[g.rules.length - 1]};
          g.rules.push(c);
          break;
        case this.CLOSE_BRACE:
          c.end = d + 1, c = c.parent || b;
      }
    }
    return b;
  }, _parseCss:function(a, b) {
    var c = b.substring(a.start, a.end - 1);
    a.parsedCssText = a.cssText = c.trim();
    a.parent && (c = b.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), c = this._expandUnicodeEscapes(c), c = c.replace(this._rx.multipleSpaces, " "), c = c.substring(c.lastIndexOf(";") + 1), c = a.parsedSelector = a.selector = c.trim(), a.atRule = 0 === c.indexOf(this.AT_START), a.atRule ? 0 === c.indexOf(this.MEDIA_START) ? a.type = this.types.MEDIA_RULE : c.match(this._rx.keyframesRule) && (a.type = this.types.KEYFRAMES_RULE, a.keyframesName = a.selector.split(this._rx.multipleSpaces).pop()) : 
    0 === c.indexOf(this.VAR_START) ? a.type = this.types.MIXIN_RULE : a.type = this.types.STYLE_RULE);
    if (c = a.rules) {
      for (var d = 0, f = c.length, g; d < f && (g = c[d]); d++) {
        this._parseCss(g, b);
      }
    }
    return a;
  }, _expandUnicodeEscapes:function(a) {
    return a.replace(/\\([0-9a-f]{1,6})\s/gi, function(a, c) {
      a = c;
      for (c = 6 - a.length; c--;) {
        a = "0" + a;
      }
      return "\\" + a;
    });
  }, stringify:function(a, b, c) {
    c = c || "";
    var d = "";
    if (a.cssText || a.rules) {
      var f = a.rules;
      if (!f || !b && this._hasMixinRules(f)) {
        d = b ? a.cssText : this.removeCustomProps(a.cssText), (d = d.trim()) && (d = "  " + d + "\n");
      } else {
        for (var g = 0, h = f.length, m; g < h && (m = f[g]); g++) {
          d = this.stringify(m, b, d);
        }
      }
    }
    d && (a.selector && (c += a.selector + " " + this.OPEN_BRACE + "\n"), c += d, a.selector && (c += this.CLOSE_BRACE + "\n\n"));
    return c;
  }, _hasMixinRules:function(a) {
    return 0 === a[0].selector.indexOf(this.VAR_START);
  }, removeCustomProps:function(a) {
    a = this.removeCustomPropAssignment(a);
    return this.removeCustomPropApply(a);
  }, removeCustomPropAssignment:function(a) {
    return a.replace(this._rx.customProp, "").replace(this._rx.mixinProp, "");
  }, removeCustomPropApply:function(a) {
    return a.replace(this._rx.mixinApply, "").replace(this._rx.varApply, "");
  }, types:{STYLE_RULE:1, KEYFRAMES_RULE:7, MEDIA_RULE:4, MIXIN_RULE:1000}, OPEN_BRACE:"{", CLOSE_BRACE:"}", _rx:{comments:/\/\*[^*]*\*+([^\/*][^*]*\*+)*\//gim, port:/@import[^;]*;/gim, customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim, mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim, mixinApply:/@apply[\s]*\([^)]*?\)[\s]*(?:[;\n]|$)?/gim, varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim, keyframesRule:/^@[^\s]*keyframes/, multipleSpaces:/\s+/g}, VAR_START:"--", 
  MEDIA_START:"@media", AT_START:"@"};
}();
Polymer.StyleUtil = function() {
  return {MODULE_STYLES_SELECTOR:"style, link[rel=import][type~=css], template", INCLUDE_ATTR:"include", toCssText:function(a, b, c) {
    "string" === typeof a && (a = this.parser.parse(a));
    b && this.forEachRule(a, b);
    return this.parser.stringify(a, c);
  }, forRulesInStyles:function(a, b, c) {
    if (a) {
      for (var d = 0, f = a.length, g; d < f && (g = a[d]); d++) {
        this.forEachRule(this.rulesForStyle(g), b, c);
      }
    }
  }, rulesForStyle:function(a) {
    !a.__cssRules && a.textContent && (a.__cssRules = this.parser.parse(a.textContent));
    return a.__cssRules;
  }, isKeyframesSelector:function(a) {
    return a.parent && a.parent.type === this.ruleTypes.KEYFRAMES_RULE;
  }, forEachRule:function(a, b, c) {
    if (a) {
      var d = !1;
      a.type === this.ruleTypes.STYLE_RULE ? b(a) : c && a.type === this.ruleTypes.KEYFRAMES_RULE ? c(a) : a.type === this.ruleTypes.MIXIN_RULE && (d = !0);
      if ((a = a.rules) && !d) {
        for (var d = 0, f = a.length, g; d < f && (g = a[d]); d++) {
          this.forEachRule(g, b, c);
        }
      }
    }
  }, applyCss:function(a, b, c, d) {
    a = this.createScopeStyle(a, b);
    c = c || document.head;
    d = d && d.nextSibling || c.firstChild;
    this.__lastHeadApplyNode = a;
    return c.insertBefore(a, d);
  }, createScopeStyle:function(a, b) {
    var c = document.createElement("style");
    b && c.setAttribute("scope", b);
    c.textContent = a;
    return c;
  }, __lastHeadApplyNode:null, applyStylePlaceHolder:function(a) {
    a = document.createComment(" Shady DOM styles for " + a + " ");
    var b = document.head;
    b.insertBefore(a, (this.__lastHeadApplyNode ? this.__lastHeadApplyNode.nextSibling : null) || b.firstChild);
    return this.__lastHeadApplyNode = a;
  }, cssFromModules:function(a, b) {
    a = a.trim().split(" ");
    for (var c = "", d = 0; d < a.length; d++) {
      c += this.cssFromModule(a[d], b);
    }
    return c;
  }, cssFromModule:function(a, b) {
    var c = Polymer.DomModule.import(a);
    c && !c._cssText && (c._cssText = this.cssFromElement(c));
    !c && b && console.warn("Could not find style data in module named", a);
    return c && c._cssText || "";
  }, cssFromElement:function(a) {
    for (var b = "", c = Polymer.TreeApi.arrayCopy((a.content || a).querySelectorAll(this.MODULE_STYLES_SELECTOR)), d = 0, f; d < c.length; d++) {
      if (f = c[d], "template" === f.localName) {
        b += this.cssFromElement(f);
      } else {
        if ("style" === f.localName) {
          var g = f.getAttribute(this.INCLUDE_ATTR);
          g && (b += this.cssFromModules(g, !0));
          f = f.__appliedElement || f;
          f.parentNode.removeChild(f);
          b += this.resolveCss(f.textContent, a.ownerDocument);
        } else {
          f.import && f.import.body && (b += this.resolveCss(f.import.body.textContent, f.import));
        }
      }
    }
    return b;
  }, resolveCss:Polymer.ResolveUrl.resolveCss, parser:Polymer.CssParse, ruleTypes:Polymer.CssParse.types};
}();
Polymer.StyleTransformer = function() {
  var a = Polymer.Settings.useNativeShadow, b = Polymer.StyleUtil, c = {dom:function(a, b, c, d) {
    this._transformDom(a, b || "", c, d);
  }, _transformDom:function(a, b, c, d) {
    a.setAttribute && this.element(a, b, c, d);
    a = Polymer.dom(a).childNodes;
    for (var l = 0; l < a.length; l++) {
      this._transformDom(a[l], b, c, d);
    }
  }, element:function(a, b, c, l) {
    c ? l ? a.removeAttribute(d) : a.setAttribute(d, b) : b && (a.classList ? l ? (a.classList.remove(d), a.classList.remove(b)) : (a.classList.add(d), a.classList.add(b)) : a.getAttribute && (c = a.getAttribute(x), l ? c && a.setAttribute(x, c.replace(d, "").replace(b, "")) : a.setAttribute(x, (c ? c + " " : "") + d + " " + b)));
  }, elementStyles:function(c, d) {
    for (var l = c._styles, f = "", p = 0, g = l.length, t; p < g && (t = l[p]); p++) {
      var h = b.rulesForStyle(t), f = f + (a ? b.toCssText(h, d) : this.css(h, c.is, c.extends, d, c._scopeCssViaAttr) + "\n\n");
    }
    return f.trim();
  }, css:function(a, c, d, l, f) {
    var p = this._calcHostScope(c, d);
    c = this._calcElementScope(c, f);
    var g = this;
    return b.toCssText(a, function(a) {
      a.isScoped || (g.rule(a, c, p), a.isScoped = !0);
      l && l(a, c, p);
    });
  }, _calcElementScope:function(a, b) {
    return a ? b ? l + a + p : q + a : "";
  }, _calcHostScope:function(a, b) {
    return b ? "[is=" + a + "]" : a;
  }, rule:function(a, b, c) {
    this._transformRule(a, this._transformComplexSelector, b, c);
  }, _transformRule:function(a, c, d, l) {
    var f = a.selector.split(g);
    if (!b.isKeyframesSelector(a)) {
      for (var p = 0, t = f.length, h; p < t && (h = f[p]); p++) {
        f[p] = c.call(this, h, d, l);
      }
    }
    a.selector = a.transformedSelector = f.join(g);
  }, _transformComplexSelector:function(a, b, c) {
    var d = !1, l = !1, f = this;
    a = a.replace(z, m + " $1");
    a = a.replace(h, function(a, p, g) {
      d ? g = g.replace(y, " ") : (a = f._transformCompoundSelector(g, p, b, c), d = d || a.stop, l = l || a.hostContext, p = a.combinator, g = a.value);
      return p + g;
    });
    l && (a = a.replace(v, function(a, b, d, l) {
      return b + d + " " + c + l + g + " " + b + c + d + l;
    }));
    return a;
  }, _transformCompoundSelector:function(a, b, c, d) {
    var l = a.search(y), f = !1;
    0 <= a.indexOf(n) ? f = !0 : 0 <= a.indexOf(m) ? (a = a.replace(r, function(a, b, c) {
      return d + c;
    }), a = a.replace(m, d)) : 0 !== l && (a = c ? this._transformSimpleSelector(a, c) : a);
    0 <= a.indexOf(w) && (b = "");
    if (0 <= l) {
      a = a.replace(y, " ");
      var p = !0;
    }
    return {value:a, combinator:b, stop:p, hostContext:f};
  }, _transformSimpleSelector:function(a, b) {
    a = a.split(t);
    a[0] += b;
    return a.join(t);
  }, documentRule:function(b) {
    b.selector = b.parsedSelector;
    this.normalizeRootSelector(b);
    a || this._transformRule(b, this._transformDocumentSelector);
  }, normalizeRootSelector:function(a) {
    a.selector === u && (a.selector = "body");
  }, _transformDocumentSelector:function(a) {
    return a.match(y) ? this._transformComplexSelector(a, f) : this._transformSimpleSelector(a.trim(), f);
  }, SCOPE_NAME:"style-scope"}, d = c.SCOPE_NAME, f = ":not([" + d + "]):not(." + d + ")", g = ",", h = /(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=\[])+)/g, m = ":host", u = ":root", r = /(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/g, n = ":host-context", v = /(.*)(?::host-context)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))(.*)/, w = "::content", y = /::content|::shadow|\/deep\//, q = ".", l = "[" + d + "~=", p = "]", t = ":", x = "class", z = new RegExp("^(" + w + ")");
  return c;
}();
Polymer.StyleExtends = function() {
  var a = Polymer.StyleUtil;
  return {hasExtends:function(a) {
    return !!a.match(this.rx.EXTEND);
  }, transform:function(b) {
    b = a.rulesForStyle(b);
    var c = this;
    a.forEachRule(b, function(a) {
      c._mapRuleOntoParent(a);
      if (a.parent) {
        for (var b; b = c.rx.EXTEND.exec(a.cssText);) {
          (b = c._findExtendor(b[1], a)) && c._extendRule(a, b);
        }
      }
      a.cssText = a.cssText.replace(c.rx.EXTEND, "");
    });
    return a.toCssText(b, function(a) {
      a.selector.match(c.rx.STRIP) && (a.cssText = "");
    }, !0);
  }, _mapRuleOntoParent:function(a) {
    if (a.parent) {
      for (var b = a.parent.map || (a.parent.map = {}), d = a.selector.split(","), f = 0, g; f < d.length; f++) {
        g = d[f], b[g.trim()] = a;
      }
      return b;
    }
  }, _findExtendor:function(a, c) {
    return c.parent && c.parent.map && c.parent.map[a] || this._findExtendor(a, c.parent);
  }, _extendRule:function(a, c) {
    a.parent !== c.parent && this._cloneAndAddRuleToParent(c, a.parent);
    a.extends = a.extends || [];
    a.extends.push(c);
    c.selector = c.selector.replace(this.rx.STRIP, "");
    c.selector = (c.selector && c.selector + ",\n") + a.selector;
    c.extends && c.extends.forEach(function(b) {
      this._extendRule(a, b);
    }, this);
  }, _cloneAndAddRuleToParent:function(a, c) {
    a = Object.create(a);
    a.parent = c;
    a.extends && (a.extends = a.extends.slice());
    c.rules.push(a);
  }, rx:{EXTEND:/@extends\(([^)]*)\)\s*?;/gim, STRIP:/%[^,]*$/}};
}();
(function() {
  var a = Polymer.Base._prepElement, b = Polymer.Settings.useNativeShadow, c = Polymer.StyleUtil, d = Polymer.StyleTransformer, f = Polymer.StyleExtends;
  Polymer.Base._addFeature({_prepElement:function(b) {
    this._encapsulateStyle && d.element(b, this.is, this._scopeCssViaAttr);
    a.call(this, b);
  }, _prepStyles:function() {
    b || (this._scopeStyle = c.applyStylePlaceHolder(this.is));
  }, _prepShimStyles:function() {
    if (this._template) {
      void 0 === this._encapsulateStyle && (this._encapsulateStyle = !b);
      this._styles = this._collectStyles();
      var a = d.elementStyles(this);
      this._prepStyleProperties();
      !this._needsStyleProperties() && this._styles.length && c.applyCss(a, this.is, b ? this._template.content : null, this._scopeStyle);
    } else {
      this._styles = [];
    }
  }, _collectStyles:function() {
    var a = [], b = "", d = this.styleModules;
    if (d) {
      for (var u = 0, r = d.length, n; u < r && (n = d[u]); u++) {
        b += c.cssFromModule(n);
      }
    }
    b += c.cssFromModule(this.is);
    d = this._template && this._template.parentNode;
    !this._template || d && d.id.toLowerCase() === this.is || (b += c.cssFromElement(this._template));
    b && (d = document.createElement("style"), d.textContent = b, f.hasExtends(d.textContent) && f.transform(d), a.push(d));
    return a;
  }, _elementAdd:function(a) {
    this._encapsulateStyle && (a.__styleScoped ? a.__styleScoped = !1 : d.dom(a, this.is, this._scopeCssViaAttr));
  }, _elementRemove:function(a) {
    this._encapsulateStyle && d.dom(a, this.is, this._scopeCssViaAttr, !0);
  }, scopeSubtree:function(a, c) {
    if (!b) {
      var d = this, f = function(a) {
        if (a.nodeType === Node.ELEMENT_NODE) {
          var b = a.getAttribute("class");
          a.setAttribute("class", d._scopeElementClass(a, b));
          a = a.querySelectorAll("*");
          for (var c = 0, f; c < a.length && (f = a[c]); c++) {
            b = f.getAttribute("class"), f.setAttribute("class", d._scopeElementClass(f, b));
          }
        }
      };
      f(a);
      if (c) {
        return c = new MutationObserver(function(a) {
          for (var b = 0, c; b < a.length && (c = a[b]); b++) {
            if (c.addedNodes) {
              for (var d = 0; d < c.addedNodes.length; d++) {
                f(c.addedNodes[d]);
              }
            }
          }
        }), c.observe(a, {childList:!0, subtree:!0}), c;
      }
    }
  }});
})();
Polymer.StyleProperties = function() {
  var a = Polymer.Settings.useNativeShadow, b = Polymer.DomApi.matchesSelector, c = Polymer.StyleUtil, d = Polymer.StyleTransformer;
  return {decorateStyles:function(a) {
    var b = this, d = {}, f = [];
    c.forRulesInStyles(a, function(a) {
      b.decorateRule(a);
      b.collectPropertiesInCssText(a.propertyInfo.cssText, d);
    }, function(a) {
      f.push(a);
    });
    a._keyframes = f;
    a = [];
    for (var u in d) {
      a.push(u);
    }
    return a;
  }, decorateRule:function(a) {
    if (a.propertyInfo) {
      return a.propertyInfo;
    }
    var b = {}, c = {};
    this.collectProperties(a, c) && (b.properties = c, a.rules = null);
    b.cssText = this.collectCssText(a);
    return a.propertyInfo = b;
  }, collectProperties:function(a, b) {
    var c = a.propertyInfo;
    if (c) {
      if (c.properties) {
        return Polymer.Base.mixin(b, c.properties), !0;
      }
    } else {
      for (var c = this.rx.VAR_ASSIGN, d = a.parsedCssText, f; a = c.exec(d);) {
        b[a[1]] = (a[2] || a[3]).trim(), f = !0;
      }
      return f;
    }
  }, collectCssText:function(a) {
    return this.collectConsumingCssText(a.parsedCssText);
  }, collectConsumingCssText:function(a) {
    return a.replace(this.rx.BRACKETED, "").replace(this.rx.VAR_ASSIGN, "");
  }, collectPropertiesInCssText:function(a, b) {
    for (var c; c = this.rx.VAR_CAPTURE.exec(a);) {
      b[c[1]] = !0, (c = c[2]) && c.match(this.rx.IS_VAR) && (b[c] = !0);
    }
  }, reify:function(a) {
    for (var b = Object.getOwnPropertyNames(a), c = 0, d; c < b.length; c++) {
      d = b[c], a[d] = this.valueForProperty(a[d], a);
    }
  }, valueForProperty:function(a, b) {
    if (a) {
      if (0 <= a.indexOf(";")) {
        a = this.valueForProperties(a, b);
      } else {
        var c = this;
        a = a.replace(this.rx.VAR_MATCH, function(a, d, f, g) {
          a = c.valueForProperty(b[f], b) || (b[g] ? c.valueForProperty(b[g], b) : g);
          return d + (a || "");
        });
      }
    }
    return a && a.trim() || "";
  }, valueForProperties:function(a, b) {
    a = a.split(";");
    for (var c = 0, d, f; c < a.length; c++) {
      if (d = a[c]) {
        if (f = d.match(this.rx.MIXIN_MATCH)) {
          d = this.valueForProperty(b[f[1]], b);
        } else {
          if (f = d.indexOf(":"), -1 !== f) {
            var g = d.substring(f), g = g.trim(), g = this.valueForProperty(g, b) || g;
            d = d.substring(0, f) + g;
          }
        }
        a[c] = d && d.lastIndexOf(";") === d.length - 1 ? d.slice(0, -1) : d || "";
      }
    }
    return a.join(";");
  }, applyProperties:function(a, b) {
    var c = "";
    a.propertyInfo || this.decorateRule(a);
    a.propertyInfo.cssText && (c = this.valueForProperties(a.propertyInfo.cssText, b));
    a.cssText = c;
  }, applyKeyframeTransforms:function(a, b) {
    var c = a.cssText, d = a.cssText;
    null == a.hasAnimations && (a.hasAnimations = this.rx.ANIMATION_MATCH.test(c));
    if (a.hasAnimations) {
      if (null == a.keyframeNamesToTransform) {
        a.keyframeNamesToTransform = [];
        for (var f in b) {
          d = b[f], d = d(c), c !== d && (c = d, a.keyframeNamesToTransform.push(f));
        }
      } else {
        for (f = 0; f < a.keyframeNamesToTransform.length; ++f) {
          d = b[a.keyframeNamesToTransform[f]], c = d(c);
        }
        d = c;
      }
    }
    a.cssText = d;
  }, propertyDataFromStyles:function(a, d) {
    var f = {}, g = this, u = [], r = 0;
    c.forRulesInStyles(a, function(a) {
      a.propertyInfo || g.decorateRule(a);
      if (d && a.propertyInfo.properties && b.call(d, a.transformedSelector || a.parsedSelector)) {
        g.collectProperties(a, f);
        a = r;
        var c = parseInt(a / 32);
        u[c] = (u[c] || 0) | 1 << a % 32;
      }
      r++;
    });
    return {properties:f, key:u};
  }, scopePropertiesFromStyles:function(a) {
    a._scopeStyleProperties || (a._scopeStyleProperties = this.selectedPropertiesFromStyles(a, this.SCOPE_SELECTORS));
    return a._scopeStyleProperties;
  }, hostPropertiesFromStyles:function(a) {
    a._hostStyleProperties || (a._hostStyleProperties = this.selectedPropertiesFromStyles(a, this.HOST_SELECTORS));
    return a._hostStyleProperties;
  }, selectedPropertiesFromStyles:function(a, b) {
    var d = {}, f = this;
    c.forRulesInStyles(a, function(a) {
      a.propertyInfo || f.decorateRule(a);
      for (var c = 0; c < b.length; c++) {
        if (a.parsedSelector === b[c]) {
          f.collectProperties(a, d);
          break;
        }
      }
    });
    return d;
  }, transformStyles:function(b, c, h) {
    var f = this, g = d._calcHostScope(b.is, b.extends), r = b.extends ? "\\" + g.slice(0, -1) + "\\]" : g, n = new RegExp(this.rx.HOST_PREFIX + r + this.rx.HOST_SUFFIX), v = this._elementKeyframeTransforms(b, h);
    return d.elementStyles(b, function(d) {
      f.applyProperties(d, c);
      a || Polymer.StyleUtil.isKeyframesSelector(d) || !d.cssText || (f.applyKeyframeTransforms(d, v), f._scopeSelector(d, n, g, b._scopeCssViaAttr, h));
    });
  }, _elementKeyframeTransforms:function(b, c) {
    b = b._styles._keyframes;
    var d = {};
    if (!a && b) {
      for (var f = 0, g = b[f]; f < b.length; g = b[++f]) {
        this._scopeKeyframes(g, c), d[g.keyframesName] = this._keyframesRuleTransformer(g);
      }
    }
    return d;
  }, _keyframesRuleTransformer:function(a) {
    return function(b) {
      return b.replace(a.keyframesNameRx, a.transformedKeyframesName);
    };
  }, _scopeKeyframes:function(a, b) {
    a.keyframesNameRx = new RegExp(a.keyframesName, "g");
    a.transformedKeyframesName = a.keyframesName + "-" + b;
    a.transformedSelector = a.transformedSelector || a.selector;
    a.selector = a.transformedSelector.replace(a.keyframesName, a.transformedKeyframesName);
  }, _scopeSelector:function(a, b, c, m, u) {
    a.transformedSelector = a.transformedSelector || a.selector;
    m = m ? "[" + d.SCOPE_NAME + "~=" + u + "]" : "." + u;
    u = a.transformedSelector.split(",");
    for (var f = 0, g = u.length, h; f < g && (h = u[f]); f++) {
      u[f] = h.match(b) ? h.replace(c, m) : m + " " + h;
    }
    a.selector = u.join(",");
  }, applyElementScopeSelector:function(a, b, c, m) {
    var f = m ? a.getAttribute(d.SCOPE_NAME) : a.getAttribute("class") || "";
    b = c ? f.replace(c, b) : (f ? f + " " : "") + this.XSCOPE_NAME + " " + b;
    f !== b && (m ? a.setAttribute(d.SCOPE_NAME, b) : a.setAttribute("class", b));
  }, applyElementStyle:function(b, d, h, m) {
    d = m ? m.textContent || "" : this.transformStyles(b, d, h);
    var f = b._customStyle;
    f && !a && f !== m && (f._useCount--, 0 >= f._useCount && f.parentNode && f.parentNode.removeChild(f));
    !a && m && m.parentNode || (a && b._customStyle ? (b._customStyle.textContent = d, m = b._customStyle) : d && (m = c.applyCss(d, h, a ? b.root : null, b._scopeStyle)));
    m && (m._useCount = m._useCount || 0, b._customStyle != m && m._useCount++, b._customStyle = m);
    return m;
  }, mixinCustomStyle:function(a, b) {
    var c, d;
    for (d in b) {
      if ((c = b[d]) || 0 === c) {
        a[d] = c;
      }
    }
  }, rx:{VAR_ASSIGN:/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\s}])|$)/gi, MIXIN_MATCH:/(?:^|\W+)@apply[\s]*\(([^)]*)\)/i, VAR_MATCH:/(^|\W+)var\([\s]*([^,)]*)[\s]*,?[\s]*((?:[^,()]*)|(?:[^;()]*\([^;)]*\)))[\s]*?\)/gi, VAR_CAPTURE:/\([\s]*(--[^,\s)]*)(?:,[\s]*(--[^,\s)]*))?(?:\)|,)/gi, ANIMATION_MATCH:/(animation\s*:)|(animation-name\s*:)/, IS_VAR:/^--/, BRACKETED:/\{[^}]*\}/g, HOST_PREFIX:"(?:^|[^.#[:])", HOST_SUFFIX:"($|[.:[\\s>+~])"}, HOST_SELECTORS:[":host"], SCOPE_SELECTORS:[":root"], 
  XSCOPE_NAME:"x-scope"};
}();
(function() {
  Polymer.StyleCache = function() {
    this.cache = {};
  };
  Polymer.StyleCache.prototype = {MAX:100, store:function(a, b, c, d) {
    b.keyValues = c;
    b.styles = d;
    a = this.cache[a] = this.cache[a] || [];
    a.push(b);
    a.length > this.MAX && a.shift();
  }, retrieve:function(a, b, c) {
    if (a = this.cache[a]) {
      for (var d = a.length - 1, f; 0 <= d; d--) {
        if (f = a[d], c === f.styles && this._objectsEqual(b, f.keyValues)) {
          return f;
        }
      }
    }
  }, clear:function() {
    this.cache = {};
  }, _objectsEqual:function(a, b) {
    var c;
    for (c in a) {
      var d = a[c];
      var f = b[c];
      if ("object" === typeof d && d ? !this._objectsStrictlyEqual(d, f) : d !== f) {
        return !1;
      }
    }
    return Array.isArray(a) ? a.length === b.length : !0;
  }, _objectsStrictlyEqual:function(a, b) {
    return this._objectsEqual(a, b) && this._objectsEqual(b, a);
  }};
})();
Polymer.StyleDefaults = function() {
  var a = Polymer.StyleProperties;
  return {_styles:[], _properties:null, customStyle:{}, _styleCache:new Polymer.StyleCache, addStyle:function(a) {
    this._styles.push(a);
    this._properties = null;
  }, get _styleProperties() {
    this._properties || (a.decorateStyles(this._styles), this._styles._scopeStyleProperties = null, this._properties = a.scopePropertiesFromStyles(this._styles), a.mixinCustomStyle(this._properties, this.customStyle), a.reify(this._properties));
    return this._properties;
  }, _needsStyleProperties:function() {
  }, _computeStyleProperties:function() {
    return this._styleProperties;
  }, updateStyles:function(a) {
    this._properties = null;
    a && Polymer.Base.mixin(this.customStyle, a);
    this._styleCache.clear();
    a = 0;
    for (var b; a < this._styles.length; a++) {
      b = this._styles[a], b = b.__importElement || b, b._apply();
    }
  }};
}();
(function() {
  var a = Polymer.Base.serializeValueToAttribute, b = Polymer.StyleProperties, c = Polymer.StyleTransformer, d = Polymer.StyleDefaults, f = Polymer.Settings.useNativeShadow;
  Polymer.Base._addFeature({_prepStyleProperties:function() {
    this._ownStylePropertyNames = this._styles && this._styles.length ? b.decorateStyles(this._styles) : null;
  }, customStyle:null, getComputedStyleValue:function(a) {
    return this._styleProperties && this._styleProperties[a] || getComputedStyle(this).getPropertyValue(a);
  }, _setupStyleProperties:function() {
    this.customStyle = {};
    this._customStyle = this._ownStyleProperties = this._scopeSelector = this._styleProperties = this._styleCache = null;
  }, _needsStyleProperties:function() {
    return !(!this._ownStylePropertyNames || !this._ownStylePropertyNames.length);
  }, _beforeAttached:function() {
    !this._scopeSelector && this._needsStyleProperties() && this._updateStyleProperties();
  }, _findStyleHost:function() {
    for (var a = this; a = Polymer.dom(a).getOwnerRoot();) {
      if (Polymer.isInstance(a.host)) {
        return a.host;
      }
      a = a.host;
    }
    return d;
  }, _updateStyleProperties:function() {
    var a = this._findStyleHost();
    a._styleCache || (a._styleCache = new Polymer.StyleCache);
    var c = b.propertyDataFromStyles(a._styles, this);
    c.key.customStyle = this.customStyle;
    var d = a._styleCache.retrieve(this.is, c.key, this._styles);
    var h = !!d;
    h ? this._styleProperties = d._styleProperties : this._computeStyleProperties(c.properties);
    this._computeOwnStyleProperties();
    h || (d = g.retrieve(this.is, this._ownStyleProperties, this._styles));
    var m = !!d && !h;
    d = this._applyStyleProperties(d);
    h || (d = d && f ? d.cloneNode(!0) : d, d = {style:d, _scopeSelector:this._scopeSelector, _styleProperties:this._styleProperties}, c.key.customStyle = {}, this.mixin(c.key.customStyle, this.customStyle), a._styleCache.store(this.is, d, c.key, this._styles), m || g.store(this.is, Object.create(d), this._ownStyleProperties, this._styles));
  }, _computeStyleProperties:function(a) {
    var c = this._findStyleHost();
    c._styleProperties || c._computeStyleProperties();
    var d = Object.create(c._styleProperties);
    this.mixin(d, b.hostPropertiesFromStyles(this._styles));
    a = a || b.propertyDataFromStyles(c._styles, this).properties;
    this.mixin(d, a);
    this.mixin(d, b.scopePropertiesFromStyles(this._styles));
    b.mixinCustomStyle(d, this.customStyle);
    b.reify(d);
    this._styleProperties = d;
  }, _computeOwnStyleProperties:function() {
    for (var a = {}, b = 0, c; b < this._ownStylePropertyNames.length; b++) {
      c = this._ownStylePropertyNames[b], a[c] = this._styleProperties[c];
    }
    this._ownStyleProperties = a;
  }, _scopeCount:0, _applyStyleProperties:function(a) {
    var c = this._scopeSelector;
    this._scopeSelector = a ? a._scopeSelector : this.is + "-" + this.__proto__._scopeCount++;
    a = b.applyElementStyle(this, this._styleProperties, this._scopeSelector, a && a.style);
    f || b.applyElementScopeSelector(this, this._scopeSelector, c, this._scopeCssViaAttr);
    return a;
  }, serializeValueToAttribute:function(b, c, d) {
    d = d || this;
    if ("class" === c && !f) {
      var g = d === this ? this.domHost || this.dataHost : this;
      g && (b = g._scopeElementClass(d, b));
    }
    d = this.shadyRoot && this.shadyRoot._hasDistributed ? Polymer.dom(d) : d;
    a.call(this, b, c, d);
  }, _scopeElementClass:function(a, b) {
    f || this._scopeCssViaAttr || (b = (b ? b + " " : "") + h + " " + this.is + (a._scopeSelector ? " " + m + " " + a._scopeSelector : ""));
    return b;
  }, updateStyles:function(a) {
    this.isAttached && (a && this.mixin(this.customStyle, a), this._needsStyleProperties() ? this._updateStyleProperties() : this._styleProperties = null, this._styleCache && this._styleCache.clear(), this._updateRootStyles());
  }, _updateRootStyles:function(a) {
    a = a || this.root;
    a = Polymer.dom(a)._query(function(a) {
      return a.shadyRoot || a.shadowRoot;
    });
    for (var b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
      d.updateStyles && d.updateStyles();
    }
  }});
  Polymer.updateStyles = function(a) {
    d.updateStyles(a);
    Polymer.Base._updateRootStyles(document);
  };
  var g = new Polymer.StyleCache;
  Polymer.customStyleCache = g;
  var h = c.SCOPE_NAME, m = b.XSCOPE_NAME;
})();
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepConstructor();
  this._prepStyles();
}, _finishRegisterFeatures:function() {
  this._prepTemplate();
  this._prepShimStyles();
  this._prepAnnotations();
  this._prepEffects();
  this._prepBehaviors();
  this._prepPropertyInfo();
  this._prepBindings();
  this._prepShady();
}, _prepBehavior:function(a) {
  this._addPropertyEffects(a.properties);
  this._addComplexObserverEffects(a.observers);
  this._addHostAttributes(a.hostAttributes);
}, _initFeatures:function() {
  this._setupGestures();
  this._setupConfigure();
  this._setupStyleProperties();
  this._setupDebouncers();
  this._setupShady();
  this._registerHost();
  this._template && (this._poolContent(), this._beginHosting(), this._stampTemplate(), this._endHosting(), this._marshalAnnotationReferences());
  this._marshalInstanceEffects();
  this._marshalBehaviors();
  this._marshalHostAttributes();
  this._marshalAttributes();
  this._tryReady();
}, _marshalBehavior:function(a) {
  a.listeners && this._listenListeners(a.listeners);
}});
(function() {
  var a = Polymer.StyleProperties, b = Polymer.StyleUtil, c = Polymer.CssParse, d = Polymer.StyleDefaults, f = Polymer.StyleTransformer;
  Polymer({is:"custom-style", extends:"style", _template:null, properties:{include:String}, ready:function() {
    this._tryApply();
  }, attached:function() {
    this._tryApply();
  }, _tryApply:function() {
    if (!this._appliesToDocument && this.parentNode && "dom-module" !== this.parentNode.localName) {
      this._appliesToDocument = !0;
      var a = this.__appliedElement || this;
      d.addStyle(a);
      if (a.textContent || this.include) {
        this._apply(!0);
      } else {
        var b = this, c = new MutationObserver(function() {
          c.disconnect();
          b._apply(!0);
        });
        c.observe(a, {childList:!0});
      }
    }
  }, _apply:function(a) {
    var c = this.__appliedElement || this;
    this.include && (c.textContent = b.cssFromModules(this.include, !0) + c.textContent);
    if (c.textContent) {
      b.forEachRule(b.rulesForStyle(c), function(a) {
        f.documentRule(a);
      });
      var d = this, g = function() {
        d._applyCustomProperties(c);
      };
      this._pendingApplyProperties && (cancelAnimationFrame(this._pendingApplyProperties), this._pendingApplyProperties = null);
      a ? this._pendingApplyProperties = requestAnimationFrame(g) : g();
    }
  }, _applyCustomProperties:function(d) {
    this._computeStyleProperties();
    var f = this._styleProperties, g = b.rulesForStyle(d);
    d.textContent = b.toCssText(g, function(b) {
      var d = b.cssText = b.parsedCssText;
      b.propertyInfo && b.propertyInfo.cssText && (d = c.removeCustomPropAssignment(d), b.cssText = a.valueForProperties(d, f));
    });
  }});
})();
Polymer.Templatizer = {properties:{__hideTemplateChildren__:{observer:"_showHideChildren"}}, _instanceProps:Polymer.nob, _parentPropPrefix:"_parent_", templatize:function(a) {
  this._templatized = a;
  a._content || (a._content = a.content);
  if (a._content._ctor) {
    this.ctor = a._content._ctor, this._prepParentProperties(this.ctor.prototype, a);
  } else {
    var b = Object.create(Polymer.Base);
    this._customPrepAnnotations(b, a);
    this._prepParentProperties(b, a);
    b._prepEffects();
    this._customPrepEffects(b);
    b._prepBehaviors();
    b._prepPropertyInfo();
    b._prepBindings();
    b._notifyPathUp = this._notifyPathUpImpl;
    b._scopeElementClass = this._scopeElementClassImpl;
    b.listen = this._listenImpl;
    b._showHideChildren = this._showHideChildrenImpl;
    b.__setPropertyOrig = this.__setProperty;
    b.__setProperty = this.__setPropertyImpl;
    var c = this._constructorImpl, d = function(a, b) {
      c.call(this, a, b);
    };
    d.prototype = b;
    b.constructor = d;
    this.ctor = a._content._ctor = d;
  }
}, _getRootDataHost:function() {
  return this.dataHost && this.dataHost._rootDataHost || this.dataHost;
}, _showHideChildrenImpl:function(a) {
  for (var b = this._children, c = 0; c < b.length; c++) {
    var d = b[c];
    !!a != !!d.__hideTemplateChildren__ && (d.nodeType === Node.TEXT_NODE ? a ? (d.__polymerTextContent__ = d.textContent, d.textContent = "") : d.textContent = d.__polymerTextContent__ : d.style && (a ? (d.__polymerDisplay__ = d.style.display, d.style.display = "none") : d.style.display = d.__polymerDisplay__));
    d.__hideTemplateChildren__ = a;
  }
}, __setPropertyImpl:function(a, b, c, d) {
  d && d.__hideTemplateChildren__ && "textContent" == a && (a = "__polymerTextContent__");
  this.__setPropertyOrig(a, b, c, d);
}, _debounceTemplate:function(a) {
  Polymer.dom.addDebouncer(this.debounce("_debounceTemplate", a));
}, _flushTemplates:function() {
  Polymer.dom.flush();
}, _customPrepEffects:function(a) {
  var b = a._parentProps, c;
  for (c in b) {
    a._addPropertyEffect(c, "function", this._createHostPropEffector(c));
  }
  for (c in this._instanceProps) {
    a._addPropertyEffect(c, "function", this._createInstancePropEffector(c));
  }
}, _customPrepAnnotations:function(a, b) {
  a._template = b;
  var c = b._content;
  if (!c._notes) {
    var d = a._rootDataHost;
    d && (Polymer.Annotations.prepElement = function() {
      d._prepElement();
    });
    c._notes = Polymer.Annotations.parseAnnotations(b);
    Polymer.Annotations.prepElement = null;
    this._processAnnotations(c._notes);
  }
  a._notes = c._notes;
  a._parentProps = c._parentProps;
}, _prepParentProperties:function(a, b) {
  var c = this._parentProps = a._parentProps;
  if (this._forwardParentProp && c) {
    var d = a._parentPropProto, f;
    if (!d) {
      for (f in this._instanceProps) {
        delete c[f];
      }
      d = a._parentPropProto = Object.create(null);
      b != this && (Polymer.Bind.prepareModel(d), Polymer.Base.prepareModelNotifyPath(d));
      for (f in c) {
        a = this._parentPropPrefix + f, c = [{kind:"function", effect:this._createForwardPropEffector(f), fn:Polymer.Bind._functionEffect}, {kind:"notify", fn:Polymer.Bind._notifyEffect, effect:{event:Polymer.CaseMap.camelToDashCase(a) + "-changed"}}], Polymer.Bind._createAccessors(d, a, c);
      }
    }
    var g = this;
    b != this && (Polymer.Bind.prepareInstance(b), b._forwardParentProp = function(a, b) {
      g._forwardParentProp(a, b);
    });
    this._extendTemplate(b, d);
    b._pathEffector = function(a, b, c) {
      return g._pathEffectorImpl(a, b, c);
    };
  }
}, _createForwardPropEffector:function(a) {
  return function(b, c) {
    this._forwardParentProp(a, c);
  };
}, _createHostPropEffector:function(a) {
  var b = this._parentPropPrefix;
  return function(c, d) {
    this.dataHost._templatized[b + a] = d;
  };
}, _createInstancePropEffector:function(a) {
  return function(b, c, d, f) {
    f || this.dataHost._forwardInstanceProp(this, a, c);
  };
}, _extendTemplate:function(a, b) {
  var c = Object.getOwnPropertyNames(b);
  b._propertySetter && (a._propertySetter = b._propertySetter);
  for (var d = 0, f; d < c.length && (f = c[d]); d++) {
    var g = a[f], h = Object.getOwnPropertyDescriptor(b, f);
    Object.defineProperty(a, f, h);
    void 0 !== g && a._propertySetter(f, g);
  }
}, _showHideChildren:function(a) {
}, _forwardInstancePath:function(a, b, c) {
}, _forwardInstanceProp:function(a, b, c) {
}, _notifyPathUpImpl:function(a, b) {
  var c = this.dataHost, d = a.indexOf("."), d = 0 > d ? a : a.slice(0, d);
  c._forwardInstancePath.call(c, this, a, b);
  d in c._parentProps && c._templatized.notifyPath(c._parentPropPrefix + a, b);
}, _pathEffectorImpl:function(a, b, c) {
  if (this._forwardParentPath && 0 === a.indexOf(this._parentPropPrefix)) {
    var d = a.substring(this._parentPropPrefix.length);
    this._modelForPath(d) in this._parentProps && this._forwardParentPath(d, b);
  }
  Polymer.Base._pathEffector.call(this._templatized, a, b, c);
}, _constructorImpl:function(a, b) {
  this._rootDataHost = b._getRootDataHost();
  this._setupConfigure(a);
  this._registerHost(b);
  this._beginHosting();
  this.root = this.instanceTemplate(this._template);
  this.root.__noContent = !this._notes._hasContent;
  this.root.__styleScoped = !0;
  this._endHosting();
  this._marshalAnnotatedNodes();
  this._marshalInstanceEffects();
  this._marshalAnnotatedListeners();
  a = [];
  for (var c = this.root.firstChild; c; c = c.nextSibling) {
    a.push(c), c._templateInstance = this;
  }
  this._children = a;
  b.__hideTemplateChildren__ && this._showHideChildren(!0);
  this._tryReady();
}, _listenImpl:function(a, b, c) {
  var d = this, f = this._rootDataHost, g = f._createEventHandler(a, b, c);
  f._listen(a, b, function(a) {
    a.model = d;
    g(a);
  });
}, _scopeElementClassImpl:function(a, b) {
  var c = this._rootDataHost;
  if (c) {
    return c._scopeElementClass(a, b);
  }
}, stamp:function(a) {
  a = a || {};
  if (this._parentProps) {
    var b = this._templatized, c;
    for (c in this._parentProps) {
      void 0 === a[c] && (a[c] = b[this._parentPropPrefix + c]);
    }
  }
  return new this.ctor(a, this);
}, modelForElement:function(a) {
  for (var b; a;) {
    if (b = a._templateInstance) {
      if (b.dataHost != this) {
        a = b.dataHost;
      } else {
        return b;
      }
    } else {
      a = a.parentNode;
    }
  }
}};
Polymer({is:"dom-template", extends:"template", _template:null, behaviors:[Polymer.Templatizer], ready:function() {
  this.templatize(this);
}});
Polymer._collections = new WeakMap;
Polymer.Collection = function(a) {
  Polymer._collections.set(a, this);
  this.userArray = a;
  this.store = a.slice();
  this.initMap();
};
Polymer.Collection.prototype = {constructor:Polymer.Collection, initMap:function() {
  for (var a = this.omap = new WeakMap, b = this.pmap = {}, c = this.store, d = 0; d < c.length; d++) {
    var f = c[d];
    f && "object" == typeof f ? a.set(f, d) : b[f] = d;
  }
}, add:function(a) {
  var b = this.store.push(a) - 1;
  a && "object" == typeof a ? this.omap.set(a, b) : this.pmap[a] = b;
  return "#" + b;
}, removeKey:function(a) {
  if (a = this._parseKey(a)) {
    this._removeFromMap(this.store[a]), delete this.store[a];
  }
}, _removeFromMap:function(a) {
  a && "object" == typeof a ? this.omap.delete(a) : delete this.pmap[a];
}, remove:function(a) {
  a = this.getKey(a);
  this.removeKey(a);
  return a;
}, getKey:function(a) {
  a = a && "object" == typeof a ? this.omap.get(a) : this.pmap[a];
  if (void 0 != a) {
    return "#" + a;
  }
}, getKeys:function() {
  return Object.keys(this.store).map(function(a) {
    return "#" + a;
  });
}, _parseKey:function(a) {
  if (a && "#" == a[0]) {
    return a.slice(1);
  }
}, setItem:function(a, b) {
  if (a = this._parseKey(a)) {
    var c = this.store[a];
    c && this._removeFromMap(c);
    b && "object" == typeof b ? this.omap.set(b, a) : this.pmap[b] = a;
    this.store[a] = b;
  }
}, getItem:function(a) {
  if (a = this._parseKey(a)) {
    return this.store[a];
  }
}, getItems:function() {
  var a = [], b = this.store, c;
  for (c in b) {
    a.push(b[c]);
  }
  return a;
}, _applySplices:function(a) {
  for (var b = {}, c, d = 0, f; d < a.length && (f = a[d]); d++) {
    f.addedKeys = [];
    for (var g = 0; g < f.removed.length; g++) {
      c = this.getKey(f.removed[g]), b[c] = b[c] ? null : -1;
    }
    for (g = 0; g < f.addedCount; g++) {
      var h = this.userArray[f.index + g];
      c = this.getKey(h);
      c = void 0 === c ? this.add(h) : c;
      b[c] = b[c] ? null : 1;
      f.addedKeys.push(c);
    }
  }
  a = [];
  d = [];
  for (c in b) {
    0 > b[c] && (this.removeKey(c), a.push(c)), 0 < b[c] && d.push(c);
  }
  return [{removed:a, added:d}];
}};
Polymer.Collection.get = function(a) {
  return Polymer._collections.get(a) || new Polymer.Collection(a);
};
Polymer.Collection.applySplices = function(a, b) {
  return (a = Polymer._collections.get(a)) ? a._applySplices(b) : null;
};
Polymer({is:"dom-repeat", extends:"template", _template:null, properties:{items:{type:Array}, as:{type:String, value:"item"}, indexAs:{type:String, value:"index"}, sort:{type:Function, observer:"_sortChanged"}, filter:{type:Function, observer:"_filterChanged"}, observe:{type:String, observer:"_observeChanged"}, delay:Number, renderedItemCount:{type:Number, notify:!0, readOnly:!0}, initialCount:{type:Number, observer:"_initializeChunking"}, targetFramerate:{type:Number, value:20}, _targetFrameTime:{type:Number, 
computed:"_computeFrameTime(targetFramerate)"}}, behaviors:[Polymer.Templatizer], observers:["_itemsChanged(items.*)"], created:function() {
  this._instances = [];
  this._pool = [];
  this._limit = Infinity;
  var a = this;
  this._boundRenderChunk = function() {
    a._renderChunk();
  };
}, detached:function() {
  this.__isDetached = !0;
  for (var a = 0; a < this._instances.length; a++) {
    this._detachInstance(a);
  }
}, attached:function() {
  if (this.__isDetached) {
    this.__isDetached = !1;
    for (var a = Polymer.dom(Polymer.dom(this).parentNode), b = 0; b < this._instances.length; b++) {
      this._attachInstance(b, a);
    }
  }
}, ready:function() {
  this._instanceProps = {__key__:!0};
  this._instanceProps[this.as] = !0;
  this._instanceProps[this.indexAs] = !0;
  this.ctor || this.templatize(this);
}, _sortChanged:function(a) {
  var b = this._getRootDataHost();
  this._sortFn = a && ("function" == typeof a ? a : function() {
    return b[a].apply(b, arguments);
  });
  this._needFullRefresh = !0;
  this.items && this._debounceTemplate(this._render);
}, _filterChanged:function(a) {
  var b = this._getRootDataHost();
  this._filterFn = a && ("function" == typeof a ? a : function() {
    return b[a].apply(b, arguments);
  });
  this._needFullRefresh = !0;
  this.items && this._debounceTemplate(this._render);
}, _computeFrameTime:function(a) {
  return Math.ceil(1000 / a);
}, _initializeChunking:function() {
  this.initialCount && (this._chunkCount = this._limit = this.initialCount, this._lastChunkTime = performance.now());
}, _tryRenderChunk:function() {
  this.items && this._limit < this.items.length && this.debounce("renderChunk", this._requestRenderChunk);
}, _requestRenderChunk:function() {
  requestAnimationFrame(this._boundRenderChunk);
}, _renderChunk:function() {
  var a = performance.now();
  this._chunkCount = Math.round(this._targetFrameTime / (a - this._lastChunkTime) * this._chunkCount) || 1;
  this._limit += this._chunkCount;
  this._lastChunkTime = a;
  this._debounceTemplate(this._render);
}, _observeChanged:function() {
  this._observePaths = this.observe && this.observe.replace(".*", ".").split(" ");
}, _itemsChanged:function(a) {
  if ("items" == a.path) {
    Array.isArray(this.items) ? this.collection = Polymer.Collection.get(this.items) : this.items ? this._error(this._logf("dom-repeat", "expected array for `items`, found", this.items)) : this.collection = null, this._keySplices = [], this._indexSplices = [], this._needFullRefresh = !0, this._initializeChunking(), this._debounceTemplate(this._render);
  } else {
    if ("items.splices" == a.path) {
      this._keySplices = this._keySplices.concat(a.value.keySplices), this._indexSplices = this._indexSplices.concat(a.value.indexSplices), this._debounceTemplate(this._render);
    } else {
      var b = a.path.slice(6);
      this._forwardItemPath(b, a.value);
      this._checkObservedPaths(b);
    }
  }
}, _checkObservedPaths:function(a) {
  if (this._observePaths) {
    a = a.substring(a.indexOf(".") + 1);
    for (var b = this._observePaths, c = 0; c < b.length; c++) {
      if (0 === a.indexOf(b[c])) {
        this._needFullRefresh = !0;
        this.delay ? this.debounce("render", this._render, this.delay) : this._debounceTemplate(this._render);
        break;
      }
    }
  }
}, render:function() {
  this._needFullRefresh = !0;
  this._debounceTemplate(this._render);
  this._flushTemplates();
}, _render:function() {
  this._needFullRefresh ? (this._applyFullRefresh(), this._needFullRefresh = !1) : this._keySplices.length && (this._sortFn ? this._applySplicesUserSort(this._keySplices) : this._filterFn ? this._applyFullRefresh() : this._applySplicesArrayOrder(this._indexSplices));
  this._keySplices = [];
  this._indexSplices = [];
  for (var a = this._keyToInstIdx = {}, b = this._instances.length - 1; 0 <= b; b--) {
    var c = this._instances[b];
    c.isPlaceholder && b < this._limit ? c = this._insertInstance(b, c.__key__) : !c.isPlaceholder && b >= this._limit && (c = this._downgradeInstance(b, c.__key__));
    a[c.__key__] = b;
    c.isPlaceholder || c.__setProperty(this.indexAs, b, !0);
  }
  this._pool.length = 0;
  this._setRenderedItemCount(this._instances.length);
  this.fire("dom-change");
  this._tryRenderChunk();
}, _applyFullRefresh:function() {
  var a = this.collection;
  if (this._sortFn) {
    var b = a ? a.getKeys() : [];
  } else {
    b = [];
    var c = this.items;
    if (c) {
      for (var d = 0; d < c.length; d++) {
        b.push(a.getKey(c[d]));
      }
    }
  }
  var f = this;
  this._filterFn && (b = b.filter(function(b) {
    return f._filterFn(a.getItem(b));
  }));
  this._sortFn && b.sort(function(b, c) {
    return f._sortFn(a.getItem(b), a.getItem(c));
  });
  for (d = 0; d < b.length; d++) {
    var c = b[d], g = this._instances[d];
    g ? (g.__key__ = c, !g.isPlaceholder && d < this._limit && g.__setProperty(this.as, a.getItem(c), !0)) : d < this._limit ? this._insertInstance(d, c) : this._insertPlaceholder(d, c);
  }
  for (b = this._instances.length - 1; b >= d; b--) {
    this._detachAndRemoveInstance(b);
  }
}, _numericSort:function(a, b) {
  return a - b;
}, _applySplicesUserSort:function(a) {
  for (var b = this.collection, c = {}, d, f = 0, g; f < a.length && (g = a[f]); f++) {
    for (var h = 0; h < g.removed.length; h++) {
      d = g.removed[h], c[d] = c[d] ? null : -1;
    }
    for (h = 0; h < g.added.length; h++) {
      d = g.added[h], c[d] = c[d] ? null : 1;
    }
  }
  g = [];
  a = [];
  for (d in c) {
    -1 === c[d] && g.push(this._keyToInstIdx[d]), 1 === c[d] && a.push(d);
  }
  if (g.length) {
    for (g.sort(this._numericSort), f = g.length - 1; 0 <= f; f--) {
      c = g[f], void 0 !== c && this._detachAndRemoveInstance(c);
    }
  }
  var m = this;
  if (a.length) {
    for (this._filterFn && (a = a.filter(function(a) {
      return m._filterFn(b.getItem(a));
    })), a.sort(function(a, c) {
      return m._sortFn(b.getItem(a), b.getItem(c));
    }), f = c = 0; f < a.length; f++) {
      c = this._insertRowUserSort(c, a[f]);
    }
  }
}, _insertRowUserSort:function(a, b) {
  for (var c = this.collection, d = c.getItem(b), f = this._instances.length - 1, g = -1; a <= f;) {
    var h = a + f >> 1, m = this._sortFn(c.getItem(this._instances[h].__key__), d);
    if (0 > m) {
      a = h + 1;
    } else {
      if (0 < m) {
        f = h - 1;
      } else {
        g = h;
        break;
      }
    }
  }
  0 > g && (g = f + 1);
  this._insertPlaceholder(g, b);
  return g;
}, _applySplicesArrayOrder:function(a) {
  for (var b = 0, c; b < a.length && (c = a[b]); b++) {
    for (var d = 0; d < c.removed.length; d++) {
      this._detachAndRemoveInstance(c.index);
    }
    for (d = 0; d < c.addedKeys.length; d++) {
      this._insertPlaceholder(c.index + d, c.addedKeys[d]);
    }
  }
}, _detachInstance:function(a) {
  a = this._instances[a];
  if (!a.isPlaceholder) {
    for (var b = 0; b < a._children.length; b++) {
      var c = a._children[b];
      Polymer.dom(a.root).appendChild(c);
    }
    return a;
  }
}, _attachInstance:function(a, b) {
  a = this._instances[a];
  a.isPlaceholder || b.insertBefore(a.root, this);
}, _detachAndRemoveInstance:function(a) {
  var b = this._detachInstance(a);
  b && this._pool.push(b);
  this._instances.splice(a, 1);
}, _insertPlaceholder:function(a, b) {
  this._instances.splice(a, 0, {isPlaceholder:!0, __key__:b});
}, _stampInstance:function(a, b) {
  var c = {__key__:b};
  c[this.as] = this.collection.getItem(b);
  c[this.indexAs] = a;
  return this.stamp(c);
}, _insertInstance:function(a, b) {
  var c = this._pool.pop();
  c ? (c.__setProperty(this.as, this.collection.getItem(b), !0), c.__setProperty("__key__", b, !0)) : c = this._stampInstance(a, b);
  b = (b = this._instances[a + 1]) && !b.isPlaceholder ? b._children[0] : this;
  var d = Polymer.dom(this).parentNode;
  Polymer.dom(d).insertBefore(c.root, b);
  return this._instances[a] = c;
}, _downgradeInstance:function(a, b) {
  var c = this._detachInstance(a);
  c && this._pool.push(c);
  c = {isPlaceholder:!0, __key__:b};
  return this._instances[a] = c;
}, _showHideChildren:function(a) {
  for (var b = 0; b < this._instances.length; b++) {
    this._instances[b]._showHideChildren(a);
  }
}, _forwardInstanceProp:function(a, b, c) {
  b == this.as && (a = this._sortFn || this._filterFn ? this.items.indexOf(this.collection.getItem(a.__key__)) : a[this.indexAs], this.set("items." + a, c));
}, _forwardInstancePath:function(a, b, c) {
  0 === b.indexOf(this.as + ".") && this._notifyPath("items." + a.__key__ + "." + b.slice(this.as.length + 1), c);
}, _forwardParentProp:function(a, b) {
  for (var c = this._instances, d = 0, f; d < c.length && (f = c[d]); d++) {
    f.isPlaceholder || f.__setProperty(a, b, !0);
  }
}, _forwardParentPath:function(a, b) {
  for (var c = this._instances, d = 0, f; d < c.length && (f = c[d]); d++) {
    f.isPlaceholder || f._notifyPath(a, b, !0);
  }
}, _forwardItemPath:function(a, b) {
  if (this._keyToInstIdx) {
    var c = a.indexOf("."), d = a.substring(0, 0 > c ? a.length : c);
    (d = this._instances[this._keyToInstIdx[d]]) && !d.isPlaceholder && (0 <= c ? (a = this.as + "." + a.substring(c + 1), d._notifyPath(a, b, !0)) : d.__setProperty(this.as, b, !0));
  }
}, itemForElement:function(a) {
  return (a = this.modelForElement(a)) && a[this.as];
}, keyForElement:function(a) {
  return (a = this.modelForElement(a)) && a.__key__;
}, indexForElement:function(a) {
  return (a = this.modelForElement(a)) && a[this.indexAs];
}});
Polymer({is:"array-selector", _template:null, properties:{items:{type:Array, observer:"clearSelection"}, multi:{type:Boolean, value:!1, observer:"clearSelection"}, selected:{type:Object, notify:!0}, selectedItem:{type:Object, notify:!0}, toggle:{type:Boolean, value:!1}}, clearSelection:function() {
  if (Array.isArray(this.selected)) {
    for (var a = 0; a < this.selected.length; a++) {
      this.unlinkPaths("selected." + a);
    }
  } else {
    this.unlinkPaths("selected"), this.unlinkPaths("selectedItem");
  }
  if (this.multi) {
    if (!this.selected || this.selected.length) {
      this.selected = [], this._selectedColl = Polymer.Collection.get(this.selected);
    }
  } else {
    this._selectedColl = this.selected = null;
  }
  this.selectedItem = null;
}, isSelected:function(a) {
  return this.multi ? void 0 !== this._selectedColl.getKey(a) : this.selected == a;
}, deselect:function(a) {
  if (this.multi) {
    if (this.isSelected(a)) {
      var b = this._selectedColl.getKey(a);
      this.arrayDelete("selected", a);
      this.unlinkPaths("selected." + b);
    }
  } else {
    this.selectedItem = this.selected = null, this.unlinkPaths("selected"), this.unlinkPaths("selectedItem");
  }
}, select:function(a) {
  var b = Polymer.Collection.get(this.items).getKey(a);
  this.multi ? this.isSelected(a) ? this.toggle && this.deselect(a) : (this.push("selected", a), a = this._selectedColl.getKey(a), this.linkPaths("selected." + a, "items." + b)) : this.toggle && a == this.selected ? this.deselect() : (this.selectedItem = this.selected = a, this.linkPaths("selected", "items." + b), this.linkPaths("selectedItem", "items." + b));
}});
Polymer({is:"dom-if", extends:"template", _template:null, properties:{"if":{type:Boolean, value:!1, observer:"_queueRender"}, restamp:{type:Boolean, value:!1, observer:"_queueRender"}}, behaviors:[Polymer.Templatizer], _queueRender:function() {
  this._debounceTemplate(this._render);
}, detached:function() {
  this.parentNode && (this.parentNode.nodeType != Node.DOCUMENT_FRAGMENT_NODE || Polymer.Settings.hasShadow && this.parentNode instanceof ShadowRoot) || this._teardownInstance();
}, attached:function() {
  this.if && this.ctor && this.async(this._ensureInstance);
}, render:function() {
  this._flushTemplates();
}, _render:function() {
  this.if ? (this.ctor || this.templatize(this), this._ensureInstance(), this._showHideChildren()) : this.restamp && this._teardownInstance();
  !this.restamp && this._instance && this._showHideChildren();
  this.if != this._lastIf && (this.fire("dom-change"), this._lastIf = this.if);
}, _ensureInstance:function() {
  var a = Polymer.dom(this).parentNode;
  if (a) {
    if (a = Polymer.dom(a), this._instance) {
      var b = this._instance._children;
      if (b && b.length && Polymer.dom(this).previousSibling !== b[b.length - 1]) {
        for (var c = 0, d; c < b.length && (d = b[c]); c++) {
          a.insertBefore(d, this);
        }
      }
    } else {
      this._instance = this.stamp(), a.insertBefore(this._instance.root, this);
    }
  }
}, _teardownInstance:function() {
  if (this._instance) {
    var a = this._instance._children;
    if (a && a.length) {
      for (var b = Polymer.dom(Polymer.dom(a[0]).parentNode), c = 0, d; c < a.length && (d = a[c]); c++) {
        b.removeChild(d);
      }
    }
    this._instance = null;
  }
}, _showHideChildren:function() {
  var a = this.__hideTemplateChildren__ || !this.if;
  this._instance && this._instance._showHideChildren(a);
}, _forwardParentProp:function(a, b) {
  this._instance && (this._instance[a] = b);
}, _forwardParentPath:function(a, b) {
  this._instance && this._instance._notifyPath(a, b, !0);
}});
Polymer({is:"dom-bind", extends:"template", _template:null, created:function() {
  var a = this;
  Polymer.RenderStatus.whenReady(function() {
    "loading" == document.readyState ? document.addEventListener("DOMContentLoaded", function() {
      a._markImportsReady();
    }) : a._markImportsReady();
  });
}, _ensureReady:function() {
  this._readied || this._readySelf();
}, _markImportsReady:function() {
  this._importsReady = !0;
  this._ensureReady();
}, _registerFeatures:function() {
  this._prepConstructor();
}, _insertChildren:function() {
  Polymer.dom(Polymer.dom(this).parentNode).insertBefore(this.root, this);
}, _removeChildren:function() {
  if (this._children) {
    for (var a = 0; a < this._children.length; a++) {
      this.root.appendChild(this._children[a]);
    }
  }
}, _initFeatures:function() {
}, _scopeElementClass:function(a, b) {
  return this.dataHost ? this.dataHost._scopeElementClass(a, b) : b;
}, _prepConfigure:function() {
  var a = {}, b;
  for (b in this._propertyEffects) {
    a[b] = this[b];
  }
  var c = this._setupConfigure;
  this._setupConfigure = function() {
    c.call(this, a);
  };
}, attached:function() {
  this._importsReady && this.render();
}, detached:function() {
  this._removeChildren();
}, render:function() {
  this._ensureReady();
  this._children || (this._template = this, this._prepAnnotations(), this._prepEffects(), this._prepBehaviors(), this._prepConfigure(), this._prepBindings(), this._prepPropertyInfo(), Polymer.Base._initFeatures.call(this), this._children = Polymer.TreeApi.arrayCopyChildNodes(this.root));
  this._insertChildren();
  this.fire("dom-change");
}});
(function() {
  function a(a, b) {
    var c = "";
    if (a) {
      if (a = a.toLowerCase(), " " === a || n.test(a)) {
        c = "space";
      } else {
        if (v.test(a)) {
          c = "esc";
        } else {
          if (1 == a.length) {
            if (!b || m.test(a)) {
              c = a;
            }
          } else {
            c = r.test(a) ? a.replace("arrow", "") : "multiply" == a ? "*" : a;
          }
        }
      }
    }
    return c;
  }
  function b(b, c) {
    var d = b.hasModifiers, l;
    if (!(l = a(c.key, d))) {
      l = c.keyIdentifier;
      var p = "";
      l && (l in f ? p = f[l] : u.test(l) ? (l = parseInt(l.replace("U+", "0x"), 16), p = String.fromCharCode(l).toLowerCase()) : p = l.toLowerCase());
      l = p;
    }
    l || (l = c.keyCode, p = "", Number(l) && (p = 65 <= l && 90 >= l ? String.fromCharCode(32 + l) : 112 <= l && 123 >= l ? "f" + (l - 112) : 48 <= l && 57 >= l ? String(l - 48) : 96 <= l && 105 >= l ? String(l - 96) : g[l]), l = p);
    return (l || a(c.key, d) || "") === b.key && (!b.hasModifiers || !!c.shiftKey === !!b.shiftKey && !!c.ctrlKey === !!b.ctrlKey && !!c.altKey === !!b.altKey && !!c.metaKey === !!b.metaKey);
  }
  function c(a) {
    return 1 === a.length ? {combo:a, key:a, event:"keydown"} : a.split("+").reduce(function(a, b) {
      var c = b.split(":");
      b = c[0];
      c = c[1];
      b in h ? (a[h[b]] = !0, a.hasModifiers = !0) : (a.key = b, a.event = c || "keydown");
      return a;
    }, {combo:a.split(":").shift()});
  }
  function d(a) {
    return a.trim().split(" ").map(function(a) {
      return c(a);
    });
  }
  var f = {"U+0008":"backspace", "U+0009":"tab", "U+001B":"esc", "U+0020":"space", "U+007F":"del"}, g = {8:"backspace", 9:"tab", 13:"enter", 27:"esc", 33:"pageup", 34:"pagedown", 35:"end", 36:"home", 32:"space", 37:"left", 38:"up", 39:"right", 40:"down", 46:"del", 106:"*"}, h = {shift:"shiftKey", ctrl:"ctrlKey", alt:"altKey", meta:"metaKey"}, m = /[a-z0-9*]/, u = /U\+/, r = /^arrow/, n = /^space(bar)?/, v = /^escape$/;
  Polymer.IronA11yKeysBehavior = {properties:{keyEventTarget:{type:Object, value:function() {
    return this;
  }}, stopKeyboardEventPropagation:{type:Boolean, value:!1}, _boundKeyHandlers:{type:Array, value:function() {
    return [];
  }}, _imperativeKeyBindings:{type:Object, value:function() {
    return {};
  }}}, observers:["_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)"], keyBindings:{}, registered:function() {
    this._prepKeyBindings();
  }, attached:function() {
    this._listenKeyEventListeners();
  }, detached:function() {
    this._unlistenKeyEventListeners();
  }, addOwnKeyBinding:function(a, b) {
    this._imperativeKeyBindings[a] = b;
    this._prepKeyBindings();
    this._resetKeyEventListeners();
  }, removeOwnKeyBindings:function() {
    this._imperativeKeyBindings = {};
    this._prepKeyBindings();
    this._resetKeyEventListeners();
  }, keyboardEventMatchesKeys:function(a, c) {
    c = d(c);
    for (var f = 0; f < c.length; ++f) {
      if (b(c[f], a)) {
        return !0;
      }
    }
    return !1;
  }, _collectKeyBindings:function() {
    var a = this.behaviors.map(function(a) {
      return a.keyBindings;
    });
    -1 === a.indexOf(this.keyBindings) && a.push(this.keyBindings);
    return a;
  }, _prepKeyBindings:function() {
    this._keyBindings = {};
    this._collectKeyBindings().forEach(function(a) {
      for (var b in a) {
        this._addKeyBinding(b, a[b]);
      }
    }, this);
    for (var a in this._imperativeKeyBindings) {
      this._addKeyBinding(a, this._imperativeKeyBindings[a]);
    }
    for (var b in this._keyBindings) {
      this._keyBindings[b].sort(function(a, b) {
        a = a[0].hasModifiers;
        return a === b[0].hasModifiers ? 0 : a ? -1 : 1;
      });
    }
  }, _addKeyBinding:function(a, b) {
    d(a).forEach(function(a) {
      this._keyBindings[a.event] = this._keyBindings[a.event] || [];
      this._keyBindings[a.event].push([a, b]);
    }, this);
  }, _resetKeyEventListeners:function() {
    this._unlistenKeyEventListeners();
    this.isAttached && this._listenKeyEventListeners();
  }, _listenKeyEventListeners:function() {
    Object.keys(this._keyBindings).forEach(function(a) {
      var b = this._onKeyBindingEvent.bind(this, this._keyBindings[a]);
      this._boundKeyHandlers.push([this.keyEventTarget, a, b]);
      this.keyEventTarget.addEventListener(a, b);
    }, this);
  }, _unlistenKeyEventListeners:function() {
    for (var a, b, c; this._boundKeyHandlers.length;) {
      a = this._boundKeyHandlers.pop(), b = a[0], c = a[1], a = a[2], b.removeEventListener(c, a);
    }
  }, _onKeyBindingEvent:function(a, c) {
    this.stopKeyboardEventPropagation && c.stopPropagation();
    if (!c.defaultPrevented) {
      for (var d = 0; d < a.length; d++) {
        var l = a[d][0], f = a[d][1];
        if (b(l, c) && (this._triggerKeyHandler(l, f, c), c.defaultPrevented)) {
          break;
        }
      }
    }
  }, _triggerKeyHandler:function(a, b, c) {
    var d = Object.create(a);
    d.keyboardEvent = c;
    a = new CustomEvent(a.event, {detail:d, cancelable:!0});
    this[b].call(this, a);
    a.defaultPrevented && c.preventDefault();
  }};
})();
Polymer({is:"iron-a11y-keys", behaviors:[Polymer.IronA11yKeysBehavior], properties:{target:{type:Object, observer:"_targetChanged"}, keys:{type:String, reflectToAttribute:!0, observer:"_keysChanged"}}, attached:function() {
  this.target || (this.target = this.parentNode);
}, _targetChanged:function(a) {
  this.keyEventTarget = a;
}, _keysChanged:function() {
  this.removeOwnKeyBindings();
  this.addOwnKeyBinding(this.keys, "_fireKeysPressed");
}, _fireKeysPressed:function(a) {
  this.fire("keys-pressed", a.detail, {});
}});
function MakePromise(a) {
  function b(a) {
    if ("object" !== typeof this || "function" !== typeof a) {
      throw new TypeError;
    }
    this._value = this._state = null;
    this._deferreds = [];
    h(a, d.bind(this), f.bind(this));
  }
  function c(b) {
    var c = this;
    null === this._state ? this._deferreds.push(b) : a(function() {
      var a = c._state ? b.onFulfilled : b.onRejected;
      if ("function" !== typeof a) {
        (c._state ? b.resolve : b.reject)(c._value);
      } else {
        try {
          var d = a(c._value);
        } catch (v) {
          b.reject(v);
          return;
        }
        b.resolve(d);
      }
    });
  }
  function d(a) {
    try {
      if (a === this) {
        throw new TypeError;
      }
      if (a && ("object" === typeof a || "function" === typeof a)) {
        var b = a.then;
        if ("function" === typeof b) {
          h(b.bind(a), d.bind(this), f.bind(this));
          return;
        }
      }
      this._state = !0;
      this._value = a;
      g.call(this);
    } catch (r) {
      f.call(this, r);
    }
  }
  function f(a) {
    this._state = !1;
    this._value = a;
    g.call(this);
  }
  function g() {
    for (var a = 0, b = this._deferreds.length; a < b; a++) {
      c.call(this, this._deferreds[a]);
    }
    this._deferreds = null;
  }
  function h(a, b, c) {
    var d = !1;
    try {
      a(function(a) {
        d || (d = !0, b(a));
      }, function(a) {
        d || (d = !0, c(a));
      });
    } catch (v) {
      d || (d = !0, c(v));
    }
  }
  b.prototype["catch"] = function(a) {
    return this.then(null, a);
  };
  b.prototype.then = function(a, d) {
    var f = this;
    return new b(function(b, g) {
      c.call(f, {onFulfilled:a, onRejected:d, resolve:b, reject:g});
    });
  };
  b.resolve = function(a) {
    return a && "object" === typeof a && a.constructor === b ? a : new b(function(b) {
      b(a);
    });
  };
  b.reject = function(a) {
    return new b(function(b, c) {
      c(a);
    });
  };
  return b;
}
"undefined" !== typeof module && (module.exports = MakePromise);
window.Promise || (window.Promise = MakePromise(Polymer.Base.async));
"use strict";
Polymer({is:"iron-request", hostAttributes:{hidden:!0}, properties:{xhr:{type:Object, notify:!0, readOnly:!0, value:function() {
  return new XMLHttpRequest;
}}, response:{type:Object, notify:!0, readOnly:!0, value:function() {
  return null;
}}, status:{type:Number, notify:!0, readOnly:!0, value:0}, statusText:{type:String, notify:!0, readOnly:!0, value:""}, completes:{type:Object, readOnly:!0, notify:!0, value:function() {
  return new Promise(function(a, b) {
    this.resolveCompletes = a;
    this.rejectCompletes = b;
  }.bind(this));
}}, progress:{type:Object, notify:!0, readOnly:!0, value:function() {
  return {};
}}, aborted:{type:Boolean, notify:!0, readOnly:!0, value:!1}, errored:{type:Boolean, notify:!0, readOnly:!0, value:!1}, timedOut:{type:Boolean, notify:!0, readOnly:!0, value:!1}}, get succeeded() {
  if (this.errored || this.aborted || this.timedOut) {
    return !1;
  }
  var a = this.xhr.status || 0;
  return 0 === a || 200 <= a && 300 > a;
}, send:function(a) {
  var b = this.xhr;
  if (0 < b.readyState) {
    return null;
  }
  b.addEventListener("progress", function(a) {
    this._setProgress({lengthComputable:a.lengthComputable, loaded:a.loaded, total:a.total});
  }.bind(this));
  b.addEventListener("error", function(a) {
    this._setErrored(!0);
    this._updateStatus();
    this.rejectCompletes(a);
  }.bind(this));
  b.addEventListener("timeout", function(a) {
    this._setTimedOut(!0);
    this._updateStatus();
    this.rejectCompletes(a);
  }.bind(this));
  b.addEventListener("abort", function() {
    this._updateStatus();
    this.rejectCompletes(Error("Request aborted."));
  }.bind(this));
  b.addEventListener("loadend", function() {
    this._updateStatus();
    this.succeeded ? (this._setResponse(this.parseResponse()), this.resolveCompletes(this)) : this.rejectCompletes(Error("The request failed with status code: " + this.xhr.status));
  }.bind(this));
  this.url = a.url;
  b.open(a.method || "GET", a.url, !1 !== a.async);
  var c = {json:"application/json", text:"text/plain", html:"text/html", xml:"application/xml", arraybuffer:"application/octet-stream"}[a.handleAs], d = a.headers || Object.create(null), f = Object.create(null), g;
  for (g in d) {
    f[g.toLowerCase()] = d[g];
  }
  d = f;
  c && !d.accept && (d.accept = c);
  Object.keys(d).forEach(function(a) {
    /[A-Z]/.test(a) && console.error("Headers must be lower case, got", a);
    b.setRequestHeader(a, d[a]);
  }, this);
  if (!1 !== a.async) {
    c = a.handleAs;
    if (a.jsonPrefix || !c) {
      c = "text";
    }
    b.responseType = b._responseType = c;
    a.jsonPrefix && (b._jsonPrefix = a.jsonPrefix);
  }
  b.withCredentials = !!a.withCredentials;
  b.timeout = a.timeout;
  a = this._encodeBodyObject(a.body, d["content-type"]);
  b.send(a);
  return this.completes;
}, parseResponse:function() {
  var a = this.xhr, b = a.responseType || a._responseType, c = !this.xhr.responseType, d = a._jsonPrefix && a._jsonPrefix.length || 0;
  try {
    switch(b) {
      case "json":
        if (c || void 0 === a.response) {
          try {
            return JSON.parse(a.responseText);
          } catch (f) {
            return null;
          }
        }
        return a.response;
      case "xml":
        return a.responseXML;
      case "blob":
      case "document":
      case "arraybuffer":
        return a.response;
      default:
        if (d) {
          try {
            return JSON.parse(a.responseText.substring(d));
          } catch (f) {
            return null;
          }
        }
        return a.responseText;
    }
  } catch (f) {
    this.rejectCompletes(Error("Could not parse response. " + f.message));
  }
}, abort:function() {
  this._setAborted(!0);
  this.xhr.abort();
}, _encodeBodyObject:function(a, b) {
  if ("string" == typeof a) {
    return a;
  }
  switch(b) {
    case "application/json":
      return JSON.stringify(a);
    case "application/x-www-form-urlencoded":
      return this._wwwFormUrlEncode(a);
  }
  return a;
}, _wwwFormUrlEncode:function(a) {
  if (!a) {
    return "";
  }
  var b = [];
  Object.keys(a).forEach(function(c) {
    b.push(this._wwwFormUrlEncodePiece(c) + "=" + this._wwwFormUrlEncodePiece(a[c]));
  }, this);
  return b.join("&");
}, _wwwFormUrlEncodePiece:function(a) {
  return encodeURIComponent(a.toString().replace(/\r?\n/g, "\r\n")).replace(/%20/g, "+");
}, _updateStatus:function() {
  this._setStatus(this.xhr.status);
  this._setStatusText(void 0 === this.xhr.statusText ? "" : this.xhr.statusText);
}});
"use strict";
Polymer({is:"iron-ajax", hostAttributes:{hidden:!0}, properties:{url:{type:String}, params:{type:Object, value:function() {
  return {};
}}, method:{type:String, value:"GET"}, headers:{type:Object, value:function() {
  return {};
}}, contentType:{type:String, value:null}, body:{type:Object, value:null}, sync:{type:Boolean, value:!1}, handleAs:{type:String, value:"json"}, withCredentials:{type:Boolean, value:!1}, timeout:{type:Number, value:0}, auto:{type:Boolean, value:!1}, verbose:{type:Boolean, value:!1}, lastRequest:{type:Object, notify:!0, readOnly:!0}, loading:{type:Boolean, notify:!0, readOnly:!0}, lastResponse:{type:Object, notify:!0, readOnly:!0}, lastError:{type:Object, notify:!0, readOnly:!0}, activeRequests:{type:Array, 
notify:!0, readOnly:!0, value:function() {
  return [];
}}, debounceDuration:{type:Number, value:0, notify:!0}, jsonPrefix:{type:String, value:""}, bubbles:{type:Boolean, value:!1}, _boundHandleResponse:{type:Function, value:function() {
  return this._handleResponse.bind(this);
}}}, observers:["_requestOptionsChanged(url, method, params.*, headers, contentType, body, sync, handleAs, jsonPrefix, withCredentials, timeout, auto)"], get queryString() {
  var a = [];
  for (c in this.params) {
    var b = this.params[c];
    var c = window.encodeURIComponent(c);
    if (Array.isArray(b)) {
      for (var d = 0; d < b.length; d++) {
        a.push(c + "=" + window.encodeURIComponent(b[d]));
      }
    } else {
      null !== b ? a.push(c + "=" + window.encodeURIComponent(b)) : a.push(c);
    }
  }
  return a.join("&");
}, get requestUrl() {
  var a = this.queryString;
  if (a) {
    var b = 0 <= this.url.indexOf("?") ? "&" : "?";
    return this.url + b + a;
  }
  return this.url;
}, get requestHeaders() {
  var a = {}, b = this.contentType;
  null == b && "string" === typeof this.body && (b = "application/x-www-form-urlencoded");
  b && (a["content-type"] = b);
  var c;
  if (this.headers instanceof Object) {
    for (c in this.headers) {
      a[c] = this.headers[c].toString();
    }
  }
  return a;
}, toRequestOptions:function() {
  return {url:this.requestUrl || "", method:this.method, headers:this.requestHeaders, body:this.body, async:!this.sync, handleAs:this.handleAs, jsonPrefix:this.jsonPrefix, withCredentials:this.withCredentials, timeout:this.timeout};
}, generateRequest:function() {
  var a = document.createElement("iron-request"), b = this.toRequestOptions();
  this.activeRequests.push(a);
  a.completes.then(this._boundHandleResponse).catch(this._handleError.bind(this, a)).then(this._discardRequest.bind(this, a));
  a.send(b);
  this._setLastRequest(a);
  this._setLoading(!0);
  this.fire("request", {request:a, options:b}, {bubbles:this.bubbles});
  return a;
}, _handleResponse:function(a) {
  a === this.lastRequest && (this._setLastResponse(a.response), this._setLastError(null), this._setLoading(!1));
  this.fire("response", a, {bubbles:this.bubbles});
}, _handleError:function(a, b) {
  this.verbose && console.error(b);
  a === this.lastRequest && (this._setLastError({request:a, error:b}), this._setLastResponse(null), this._setLoading(!1));
  this.fire("error", {request:a, error:b}, {bubbles:this.bubbles});
}, _discardRequest:function(a) {
  a = this.activeRequests.indexOf(a);
  -1 < a && this.activeRequests.splice(a, 1);
}, _requestOptionsChanged:function() {
  this.debounce("generate-request", function() {
    null != this.url && this.auto && this.generateRequest();
  }, this.debounceDuration);
}});
Polymer.IronControlState = {properties:{focused:{type:Boolean, value:!1, notify:!0, readOnly:!0, reflectToAttribute:!0}, disabled:{type:Boolean, value:!1, notify:!0, observer:"_disabledChanged", reflectToAttribute:!0}, _oldTabIndex:{type:Number}, _boundFocusBlurHandler:{type:Function, value:function() {
  return this._focusBlurHandler.bind(this);
}}}, observers:["_changedControlState(focused, disabled)"], ready:function() {
  this.addEventListener("focus", this._boundFocusBlurHandler, !0);
  this.addEventListener("blur", this._boundFocusBlurHandler, !0);
}, _focusBlurHandler:function(a) {
  if (a.target === this) {
    this._setFocused("focus" === a.type);
  } else {
    if (!this.shadowRoot) {
      var b = Polymer.dom(a).localTarget;
      this.isLightDescendant(b) || this.fire(a.type, {sourceEvent:a}, {node:this, bubbles:a.bubbles, cancelable:a.cancelable});
    }
  }
}, _disabledChanged:function(a, b) {
  this.setAttribute("aria-disabled", a ? "true" : "false");
  this.style.pointerEvents = a ? "none" : "";
  a ? (this._oldTabIndex = this.tabIndex, this._setFocused(!1), this.tabIndex = -1, this.blur()) : void 0 !== this._oldTabIndex && (this.tabIndex = this._oldTabIndex);
}, _changedControlState:function() {
  this._controlStateChanged && this._controlStateChanged();
}};
(function() {
  var a = {}, b = {}, c = null;
  Polymer.IronMeta = Polymer({is:"iron-meta", properties:{type:{type:String, value:"default", observer:"_typeChanged"}, key:{type:String, observer:"_keyChanged"}, value:{type:Object, notify:!0, observer:"_valueChanged"}, self:{type:Boolean, observer:"_selfChanged"}, list:{type:Array, notify:!0}}, hostAttributes:{hidden:!0}, factoryImpl:function(a) {
    if (a) {
      for (var b in a) {
        switch(b) {
          case "type":
          case "key":
          case "value":
            this[b] = a[b];
        }
      }
    }
  }, created:function() {
    this._metaDatas = a;
    this._metaArrays = b;
  }, _keyChanged:function(a, b) {
    this._resetRegistration(b);
  }, _valueChanged:function(a) {
    this._resetRegistration(this.key);
  }, _selfChanged:function(a) {
    a && (this.value = this);
  }, _typeChanged:function(c) {
    this._unregisterKey(this.key);
    a[c] || (a[c] = {});
    this._metaData = a[c];
    b[c] || (b[c] = []);
    this.list = b[c];
    this._registerKeyValue(this.key, this.value);
  }, byKey:function(a) {
    return this._metaData && this._metaData[a];
  }, _resetRegistration:function(a) {
    this._unregisterKey(a);
    this._registerKeyValue(this.key, this.value);
  }, _unregisterKey:function(a) {
    this._unregister(a, this._metaData, this.list);
  }, _registerKeyValue:function(a, b) {
    this._register(a, b, this._metaData, this.list);
  }, _register:function(a, b, c, h) {
    a && c && void 0 !== b && (c[a] = b, h.push(b));
  }, _unregister:function(a, b, c) {
    if (a && b && a in b) {
      var d = b[a];
      delete b[a];
      this.arrayDelete(c, d);
    }
  }});
  Polymer.IronMeta.getIronMeta = function() {
    null === c && (c = new Polymer.IronMeta);
    return c;
  };
  Polymer.IronMetaQuery = Polymer({is:"iron-meta-query", properties:{type:{type:String, value:"default", observer:"_typeChanged"}, key:{type:String, observer:"_keyChanged"}, value:{type:Object, notify:!0, readOnly:!0}, list:{type:Array, notify:!0}}, factoryImpl:function(a) {
    if (a) {
      for (var b in a) {
        switch(b) {
          case "type":
          case "key":
            this[b] = a[b];
        }
      }
    }
  }, created:function() {
    this._metaDatas = a;
    this._metaArrays = b;
  }, _keyChanged:function(a) {
    this._setValue(this._metaData && this._metaData[a]);
  }, _typeChanged:function(c) {
    this._metaData = a[c];
    this.list = b[c];
    this.key && this._keyChanged(this.key);
  }, byKey:function(a) {
    return this._metaData && this._metaData[a];
  }});
})();
Polymer.IronValidatableBehaviorMeta = null;
Polymer.IronValidatableBehavior = {properties:{validator:{type:String}, invalid:{notify:!0, reflectToAttribute:!0, type:Boolean, value:!1}, _validatorMeta:{type:Object}, validatorType:{type:String, value:"validator"}, _validator:{type:Object, computed:"__computeValidator(validator)"}}, observers:["_invalidChanged(invalid)"], registered:function() {
  Polymer.IronValidatableBehaviorMeta = new Polymer.IronMeta({type:"validator"});
}, _invalidChanged:function() {
  this.invalid ? this.setAttribute("aria-invalid", "true") : this.removeAttribute("aria-invalid");
}, hasValidator:function() {
  return null != this._validator;
}, validate:function(a) {
  this.invalid = !this._getValidity(a);
  return !this.invalid;
}, _getValidity:function(a) {
  return this.hasValidator() ? this._validator.validate(a) : !0;
}, __computeValidator:function() {
  return Polymer.IronValidatableBehaviorMeta && Polymer.IronValidatableBehaviorMeta.byKey(this.validator);
}};
Polymer.IronFormElementBehavior = {properties:{name:{type:String}, value:{notify:!0, type:String}, required:{type:Boolean, value:!1}, _parentForm:{type:Object}}, attached:function() {
  this.fire("iron-form-element-register");
}, detached:function() {
  this._parentForm && this._parentForm.fire("iron-form-element-unregister", {target:this});
}};
Polymer({is:"iron-autogrow-textarea", behaviors:[Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior, Polymer.IronControlState], properties:{bindValue:{observer:"_bindValueChanged", type:String}, rows:{type:Number, value:1, observer:"_updateCached"}, maxRows:{type:Number, value:0, observer:"_updateCached"}, autocomplete:{type:String, value:"off"}, autofocus:{type:Boolean, value:!1}, inputmode:{type:String}, placeholder:{type:String}, readonly:{type:String}, required:{type:Boolean}, maxlength:{type:Number}}, 
listeners:{input:"_onInput"}, observers:["_onValueChanged(value)"], get textarea() {
  return this.$.textarea;
}, get selectionStart() {
  return this.$.textarea.selectionStart;
}, get selectionEnd() {
  return this.$.textarea.selectionEnd;
}, set selectionStart(a) {
  this.$.textarea.selectionStart = a;
}, set selectionEnd(a) {
  this.$.textarea.selectionEnd = a;
}, validate:function() {
  if (!this.required && "" == this.value) {
    return this.invalid = !1, !0;
  }
  if (this.hasValidator()) {
    var a = Polymer.IronValidatableBehavior.validate.call(this, this.value);
  } else {
    a = this.$.textarea.validity.valid, this.invalid = !a;
  }
  this.fire("iron-input-validate");
  return a;
}, _bindValueChanged:function() {
  var a = this.textarea;
  a && (a.value !== this.bindValue && (a.value = this.bindValue || 0 === this.bindValue ? this.bindValue : ""), this.value = this.bindValue, this.$.mirror.innerHTML = this._valueForMirror(), this.fire("bind-value-changed", {value:this.bindValue}));
}, _onInput:function(a) {
  this.bindValue = a.path ? a.path[0].value : a.target.value;
}, _constrain:function(a) {
  a = a || [""];
  for (a = 0 < this.maxRows && a.length > this.maxRows ? a.slice(0, this.maxRows) : a.slice(0); 0 < this.rows && a.length < this.rows;) {
    a.push("");
  }
  return a.join("<br/>") + "&#160;";
}, _valueForMirror:function() {
  var a = this.textarea;
  if (a) {
    return this.tokens = a && a.value ? a.value.replace(/&/gm, "&amp;").replace(/"/gm, "&quot;").replace(/'/gm, "&#39;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").split("\n") : [""], this._constrain(this.tokens);
  }
}, _updateCached:function() {
  this.$.mirror.innerHTML = this._constrain(this.tokens);
}, _onValueChanged:function() {
  this.bindValue = this.value;
}});
Polymer.IronButtonStateImpl = {properties:{pressed:{type:Boolean, readOnly:!0, value:!1, reflectToAttribute:!0, observer:"_pressedChanged"}, toggles:{type:Boolean, value:!1, reflectToAttribute:!0}, active:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, pointerDown:{type:Boolean, readOnly:!0, value:!1}, receivedFocusFromKeyboard:{type:Boolean, readOnly:!0}, ariaActiveAttribute:{type:String, value:"aria-pressed", observer:"_ariaActiveAttributeChanged"}}, listeners:{down:"_downHandler", 
up:"_upHandler", tap:"_tapHandler"}, observers:["_detectKeyboardFocus(focused)", "_activeChanged(active, ariaActiveAttribute)"], keyBindings:{"enter:keydown":"_asyncClick", "space:keydown":"_spaceKeyDownHandler", "space:keyup":"_spaceKeyUpHandler"}, _mouseEventRe:/^mouse/, _tapHandler:function() {
  this.toggles ? this._userActivate(!this.active) : this.active = !1;
}, _detectKeyboardFocus:function(a) {
  this._setReceivedFocusFromKeyboard(!this.pointerDown && a);
}, _userActivate:function(a) {
  this.active !== a && (this.active = a, this.fire("change"));
}, _downHandler:function(a) {
  this._setPointerDown(!0);
  this._setPressed(!0);
  this._setReceivedFocusFromKeyboard(!1);
}, _upHandler:function() {
  this._setPointerDown(!1);
  this._setPressed(!1);
}, _spaceKeyDownHandler:function(a) {
  a = a.detail.keyboardEvent;
  var b = Polymer.dom(a).localTarget;
  this.isLightDescendant(b) || (a.preventDefault(), a.stopImmediatePropagation(), this._setPressed(!0));
}, _spaceKeyUpHandler:function(a) {
  a = Polymer.dom(a.detail.keyboardEvent).localTarget;
  this.isLightDescendant(a) || (this.pressed && this._asyncClick(), this._setPressed(!1));
}, _asyncClick:function() {
  this.async(function() {
    this.click();
  }, 1);
}, _pressedChanged:function(a) {
  this._changedButtonState();
}, _ariaActiveAttributeChanged:function(a, b) {
  b && b != a && this.hasAttribute(b) && this.removeAttribute(b);
}, _activeChanged:function(a, b) {
  this.toggles ? this.setAttribute(this.ariaActiveAttribute, a ? "true" : "false") : this.removeAttribute(this.ariaActiveAttribute);
  this._changedButtonState();
}, _controlStateChanged:function() {
  this.disabled ? this._setPressed(!1) : this._changedButtonState();
}, _changedButtonState:function() {
  this._buttonStateChanged && this._buttonStateChanged();
}};
Polymer.IronButtonState = [Polymer.IronA11yKeysBehavior, Polymer.IronButtonStateImpl];
Polymer.IronResizableBehavior = {properties:{_parentResizable:{type:Object, observer:"_parentResizableChanged"}, _notifyingDescendant:{type:Boolean, value:!1}}, listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"}, created:function() {
  this._interestedResizables = [];
  this._boundNotifyResize = this.notifyResize.bind(this);
}, attached:function() {
  this.fire("iron-request-resize-notifications", null, {node:this, bubbles:!0, cancelable:!0});
  this._parentResizable || (window.addEventListener("resize", this._boundNotifyResize), this.notifyResize());
}, detached:function() {
  this._parentResizable ? this._parentResizable.stopResizeNotificationsFor(this) : window.removeEventListener("resize", this._boundNotifyResize);
  this._parentResizable = null;
}, notifyResize:function() {
  this.isAttached && (this._interestedResizables.forEach(function(a) {
    this.resizerShouldNotify(a) && this._notifyDescendant(a);
  }, this), this._fireResize());
}, assignParentResizable:function(a) {
  this._parentResizable = a;
}, stopResizeNotificationsFor:function(a) {
  var b = this._interestedResizables.indexOf(a);
  -1 < b && (this._interestedResizables.splice(b, 1), this.unlisten(a, "iron-resize", "_onDescendantIronResize"));
}, resizerShouldNotify:function(a) {
  return !0;
}, _onDescendantIronResize:function(a) {
  this._notifyingDescendant ? a.stopPropagation() : Polymer.Settings.useShadow || this._fireResize();
}, _fireResize:function() {
  this.fire("iron-resize", null, {node:this, bubbles:!1});
}, _onIronRequestResizeNotifications:function(a) {
  var b = a.path ? a.path[0] : a.target;
  b !== this && (-1 === this._interestedResizables.indexOf(b) && (this._interestedResizables.push(b), this.listen(b, "iron-resize", "_onDescendantIronResize")), b.assignParentResizable(this), this._notifyDescendant(b), a.stopPropagation());
}, _parentResizableChanged:function(a) {
  a && window.removeEventListener("resize", this._boundNotifyResize);
}, _notifyDescendant:function(a) {
  this.isAttached && (this._notifyingDescendant = !0, a.notifyResize(), this._notifyingDescendant = !1);
}};
Polymer({is:"iron-collapse", behaviors:[Polymer.IronResizableBehavior], properties:{horizontal:{type:Boolean, value:!1, observer:"_horizontalChanged"}, opened:{type:Boolean, value:!1, notify:!0, observer:"_openedChanged"}, noAnimation:{type:Boolean}}, get dimension() {
  return this.horizontal ? "width" : "height";
}, hostAttributes:{role:"group", "aria-hidden":"true", "aria-expanded":"false"}, listeners:{transitionend:"_transitionEnd"}, attached:function() {
  this._transitionEnd();
}, toggle:function() {
  this.opened = !this.opened;
}, show:function() {
  this.opened = !0;
}, hide:function() {
  this.opened = !1;
}, updateSize:function(a, b) {
  this.style[this.dimension] !== a && (this._updateTransition(!1), b && !this.noAnimation && this._isDisplayed && (b = this._calcSize(), "auto" === a && (this.style[this.dimension] = a, a = this._calcSize()), this.style[this.dimension] = b, this.offsetHeight = this.offsetHeight, this._updateTransition(!0)), this.style[this.dimension] = a);
}, enableTransition:function(a) {
  console.warn("`enableTransition()` is deprecated, use `noAnimation` instead.");
  this.noAnimation = !a;
}, _updateTransition:function(a) {
  this.style.transitionDuration = a && !this.noAnimation ? "" : "0s";
}, _horizontalChanged:function() {
  this.style.transitionProperty = this.dimension;
  this.style["width" === this.dimension ? "height" : "width"] = "";
  this.updateSize(this.opened ? "auto" : "0px", !1);
}, _openedChanged:function() {
  this.setAttribute("aria-expanded", this.opened);
  this.setAttribute("aria-hidden", !this.opened);
  this.toggleClass("iron-collapse-closed", !1);
  this.toggleClass("iron-collapse-opened", !1);
  this.updateSize(this.opened ? "auto" : "0px", !0);
  this.opened && this.focus();
  this.noAnimation && this._transitionEnd();
}, _transitionEnd:function() {
  this.opened && (this.style[this.dimension] = "auto");
  this.toggleClass("iron-collapse-closed", !this.opened);
  this.toggleClass("iron-collapse-opened", this.opened);
  this._updateTransition(!1);
  this.notifyResize();
}, get _isDisplayed() {
  var a = this.getBoundingClientRect(), b;
  for (b in a) {
    if (0 !== a[b]) {
      return !0;
    }
  }
  return !1;
}, _calcSize:function() {
  return this.getBoundingClientRect()[this.dimension] + "px";
}});
Polymer({is:"iron-icon", properties:{icon:{type:String, observer:"_iconChanged"}, theme:{type:String, observer:"_updateIcon"}, src:{type:String, observer:"_srcChanged"}, _meta:{value:Polymer.Base.create("iron-meta", {type:"iconset"}), observer:"_updateIcon"}}, _DEFAULT_ICONSET:"icons", _iconChanged:function(a) {
  a = (a || "").split(":");
  this._iconName = a.pop();
  this._iconsetName = a.pop() || this._DEFAULT_ICONSET;
  this._updateIcon();
}, _srcChanged:function(a) {
  this._updateIcon();
}, _usesIconset:function() {
  return this.icon || !this.src;
}, _updateIcon:function() {
  this._usesIconset() ? (this._img && this._img.parentNode && Polymer.dom(this.root).removeChild(this._img), "" === this._iconName ? this._iconset && this._iconset.removeIcon(this) : this._iconsetName && this._meta && ((this._iconset = this._meta.byKey(this._iconsetName)) ? (this._iconset.applyIcon(this, this._iconName, this.theme), this.unlisten(window, "iron-iconset-added", "_updateIcon")) : this.listen(window, "iron-iconset-added", "_updateIcon"))) : (this._iconset && this._iconset.removeIcon(this), 
  this._img || (this._img = document.createElement("img"), this._img.style.width = "100%", this._img.style.height = "100%", this._img.draggable = !1), this._img.src = this.src, Polymer.dom(this.root).appendChild(this._img));
}});
Polymer({is:"iron-iconset-svg", properties:{name:{type:String, observer:"_nameChanged"}, size:{type:Number, value:24}}, attached:function() {
  this.style.display = "none";
}, getIconNames:function() {
  this._icons = this._createIconMap();
  return Object.keys(this._icons).map(function(a) {
    return this.name + ":" + a;
  }, this);
}, applyIcon:function(a, b) {
  a = a.root || a;
  this.removeIcon(a);
  if (b = this._cloneIcon(b)) {
    var c = Polymer.dom(a);
    c.insertBefore(b, c.childNodes[0]);
    return a._svgIcon = b;
  }
  return null;
}, removeIcon:function(a) {
  a._svgIcon && (Polymer.dom(a).removeChild(a._svgIcon), a._svgIcon = null);
}, _nameChanged:function() {
  new Polymer.IronMeta({type:"iconset", key:this.name, value:this});
  this.async(function() {
    this.fire("iron-iconset-added", this, {node:window});
  });
}, _createIconMap:function() {
  var a = Object.create(null);
  Polymer.dom(this).querySelectorAll("[id]").forEach(function(b) {
    a[b.id] = b;
  });
  return a;
}, _cloneIcon:function(a) {
  this._icons = this._icons || this._createIconMap();
  return this._prepareSvgClone(this._icons[a], this.size);
}, _prepareSvgClone:function(a, b) {
  if (a) {
    a = a.cloneNode(!0);
    var c = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    b = a.getAttribute("viewBox") || "0 0 " + b + " " + b;
    c.setAttribute("viewBox", b);
    c.setAttribute("preserveAspectRatio", "xMidYMid meet");
    c.style.cssText = "pointer-events: none; display: block; width: 100%; height: 100%;";
    c.appendChild(a).removeAttribute("id");
    return c;
  }
  return null;
}});
Polymer({is:"iron-iconset", properties:{src:{type:String, observer:"_srcChanged"}, name:{type:String, observer:"_nameChanged"}, width:{type:Number, value:0}, icons:{type:String}, size:{type:Number, value:24}, _offsetX:{type:Number, value:0}, _offsetY:{type:Number, value:0}, iconNames:{type:Array, notify:!0}}, hostAttributes:{style:"display: none;"}, ready:function() {
  this._themes = this._mapThemes();
}, applyIcon:function(a, b, c, d) {
  this._validateIconMap();
  b = this._getThemedOffset(b, c);
  a && b && this._addIconStyles(a, this._srcUrl, b, d || 1, this.size, this.width);
}, removeIcon:function(a) {
  this._removeIconStyles(a.style);
}, _mapThemes:function() {
  var a = Object.create(null);
  Polymer.dom(this).querySelectorAll("property[theme]").forEach(function(b) {
    var c = window.parseInt(b.getAttribute("offset-x"), 10) || 0, d = window.parseInt(b.getAttribute("offset-y"), 10) || 0;
    a[b.getAttribute("theme")] = {offsetX:c, offsetY:d};
  });
  return a;
}, _srcChanged:function(a) {
  this._srcUrl = this.ownerDocument !== document ? this.resolveUrl(a) : a;
  this._prepareIconset();
}, _nameChanged:function(a) {
  this._prepareIconset();
}, _prepareIconset:function() {
  new Polymer.IronMeta({type:"iconset", key:this.name, value:this});
  this.async(function() {
    this.fire("iron-iconset-added", this, {node:window});
  });
}, _invalidateIconMap:function() {
  this._iconMapValid = !1;
}, _validateIconMap:function() {
  this._iconMapValid || (this._recomputeIconMap(), this._iconMapValid = !0);
}, _recomputeIconMap:function() {
  this.iconNames = this._computeIconNames(this.icons);
  this.iconMap = this._computeIconMap(this._offsetX, this._offsetY, this.size, this.width, this.iconNames);
}, _computeIconNames:function(a) {
  return a.split(/\s+/g);
}, _computeIconMap:function(a, b, c, d, f) {
  var g = {};
  if (void 0 !== a && void 0 !== b) {
    var h = a;
    f.forEach(function(f) {
      g[f] = {offsetX:a, offsetY:b};
      a + c < d ? a += c : (a = h, b += c);
    }, this);
  }
  return g;
}, _getThemedOffset:function(a, b) {
  a = this._getIconOffset(a);
  b = this._themes[b];
  return a && b ? {offsetX:a.offsetX + b.offsetX, offsetY:a.offsetY + b.offsetY} : a;
}, _getIconOffset:function(a) {
  return this.iconMap[a] || this.iconMap[this.iconNames[Number(a)]];
}, _addIconStyles:function(a, b, c, d, f, g) {
  var h = a.style;
  h.backgroundImage = "url(" + b + ")";
  h.backgroundPosition = -c.offsetX * d + "px " + (-c.offsetY * d + "px");
  h.backgroundSize = 1 === d ? "auto" : g * d + "px";
  h.width = f + "px";
  h.height = f + "px";
  a.setAttribute("role", "img");
}, _removeIconStyles:function(a) {
  a.background = "";
}});
Polymer({is:"iron-image", properties:{src:{observer:"_srcChanged", type:String, value:""}, alt:{type:String, value:null}, preventLoad:{type:Boolean, value:!1, observer:"_preventLoadChanged"}, sizing:{type:String, value:null, reflectToAttribute:!0}, position:{type:String, value:"center"}, preload:{type:Boolean, value:!1}, placeholder:{type:String, value:null, observer:"_placeholderChanged"}, fade:{type:Boolean, value:!1}, loaded:{notify:!0, readOnly:!0, type:Boolean, value:!1}, loading:{notify:!0, 
readOnly:!0, type:Boolean, value:!1}, error:{notify:!0, readOnly:!0, type:Boolean, value:!1}, width:{observer:"_widthChanged", type:Number, value:null}, height:{observer:"_heightChanged", type:Number, value:null}}, observers:["_transformChanged(sizing, position)"], ready:function() {
  var a = this.$.img;
  a.onload = function() {
    this.$.img.src === this._resolveSrc(this.src) && (this._setLoading(!1), this._setLoaded(!0), this._setError(!1));
  }.bind(this);
  a.onerror = function() {
    this.$.img.src === this._resolveSrc(this.src) && (this._reset(), this._setLoading(!1), this._setLoaded(!1), this._setError(!0));
  }.bind(this);
  this._resolvedSrc = "";
}, _load:function(a) {
  a ? this.$.img.src = a : this.$.img.removeAttribute("src");
  this.$.sizedImgDiv.style.backgroundImage = a ? 'url("' + a + '")' : "";
  this._setLoading(!!a);
  this._setLoaded(!1);
  this._setError(!1);
}, _reset:function() {
  this.$.img.removeAttribute("src");
  this.$.sizedImgDiv.style.backgroundImage = "";
  this._setLoading(!1);
  this._setLoaded(!1);
  this._setError(!1);
}, _computePlaceholderHidden:function() {
  return !this.preload || !this.fade && !this.loading && this.loaded;
}, _computePlaceholderClassName:function() {
  return this.preload && this.fade && !this.loading && this.loaded ? "faded-out" : "";
}, _computeImgDivHidden:function() {
  return !this.sizing;
}, _computeImgDivARIAHidden:function() {
  return "" === this.alt ? "true" : void 0;
}, _computeImgDivARIALabel:function() {
  if (null !== this.alt) {
    return this.alt;
  }
  if ("" === this.src) {
    return "";
  }
  var a = (new URL(this._resolveSrc(this.src))).pathname.split("/");
  return a[a.length - 1];
}, _computeImgHidden:function() {
  return !!this.sizing;
}, _widthChanged:function() {
  this.style.width = isNaN(this.width) ? this.width : this.width + "px";
}, _heightChanged:function() {
  this.style.height = isNaN(this.height) ? this.height : this.height + "px";
}, _preventLoadChanged:function() {
  this.preventLoad || this.loaded || (this._reset(), this._load(this.src));
}, _srcChanged:function(a, b) {
  b = this._resolveSrc(a);
  b !== this._resolvedSrc && (this._resolvedSrc = b, this._reset(), this.preventLoad || this._load(a));
}, _placeholderChanged:function() {
  this.$.placeholder.style.backgroundImage = this.placeholder ? 'url("' + this.placeholder + '")' : "";
}, _transformChanged:function() {
  var a = this.$.sizedImgDiv.style, b = this.$.placeholder.style;
  a.backgroundSize = b.backgroundSize = this.sizing;
  a.backgroundPosition = b.backgroundPosition = this.sizing ? this.position : "";
  a.backgroundRepeat = b.backgroundRepeat = this.sizing ? "no-repeat" : "";
}, _resolveSrc:function(a) {
  return Polymer.ResolveUrl.resolveUrl(a, this.ownerDocument.baseURI);
}});
(function() {
  function a(a) {
    this.tokens = [];
    this.tokens.links = {};
    this.options = a || r.defaults;
    this.rules = n.normal;
    this.options.gfm && (this.rules = this.options.tables ? n.tables : n.gfm);
  }
  function b(a, b) {
    this.options = b || r.defaults;
    this.links = a;
    this.rules = v.normal;
    this.renderer = this.options.renderer || new c;
    this.renderer.options = this.options;
    if (!this.links) {
      throw Error("Tokens array requires a `links` property.");
    }
    this.options.gfm ? this.rules = this.options.breaks ? v.breaks : v.gfm : this.options.pedantic && (this.rules = v.pedantic);
  }
  function c(a) {
    this.options = a || {};
  }
  function d(a) {
    this.tokens = [];
    this.token = null;
    this.options = a || r.defaults;
    this.options.renderer = this.options.renderer || new c;
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
  }
  function f(a, b) {
    return a.replace(b ? /&/g : /&(?!#?\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function g(a) {
    return a.replace(/&([#\w]+);/g, function(a, b) {
      b = b.toLowerCase();
      return "colon" === b ? ":" : "#" === b.charAt(0) ? "x" === b.charAt(1) ? String.fromCharCode(parseInt(b.substring(2), 16)) : String.fromCharCode(+b.substring(1)) : "";
    });
  }
  function h(a, b) {
    a = a.source;
    b = b || "";
    return function l(c, d) {
      if (!c) {
        return new RegExp(a, b);
      }
      d = d.source || d;
      d = d.replace(/(^|[^\[])\^/g, "$1");
      a = a.replace(c, d);
      return l;
    };
  }
  function m() {
  }
  function u(a) {
    for (var b = 1, c, d; b < arguments.length; b++) {
      for (d in c = arguments[b], c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }
  function r(b, c, g) {
    if (g || "function" === typeof c) {
      g || (g = c, c = null);
      c = u({}, r.defaults, c || {});
      var l = c.highlight, p = 0;
      try {
        var t = a.lex(b, c);
      } catch (A) {
        return g(A);
      }
      var h = t.length;
      var q = function(a) {
        if (a) {
          return c.highlight = l, g(a);
        }
        try {
          var b = d.parse(t, c);
        } catch (F) {
          a = F;
        }
        c.highlight = l;
        return a ? g(a) : g(null, b);
      };
      if (!l || 3 > l.length) {
        return q();
      }
      delete c.highlight;
      if (!h) {
        return q();
      }
      for (; p < t.length; p++) {
        (function(a) {
          return "code" !== a.type ? --h || q() : l(a.text, a.lang, function(b, c) {
            if (b) {
              return q(b);
            }
            if (null == c || c === a.text) {
              return --h || q();
            }
            a.text = c;
            a.escaped = !0;
            --h || q();
          });
        })(t[p]);
      }
    } else {
      try {
        return c && (c = u({}, r.defaults, c)), d.parse(a.lex(b, c), c);
      } catch (A) {
        A.message += "\nPlease report this to https://github.com/chjj/marked.";
        if ((c || r.defaults).silent) {
          return "<p>An error occured:</p><pre>" + f(A.message + "", !0) + "</pre>";
        }
        throw A;
      }
    }
  }
  var n = {newline:/^\n+/, code:/^( {4}[^\n]+\n*)+/, fences:m, hr:/^( *[-*_]){3,} *(?:\n+|$)/, heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/, nptable:m, lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/, blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/, list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/, html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/, def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/, table:m, paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/, 
  text:/^[^\n]+/, bullet:/(?:[*+-]|\d+\.)/, item:/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/};
  n.item = h(n.item, "gm")(/bull/g, n.bullet)();
  n.list = h(n.list)(/bull/g, n.bullet)("hr", "\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def", "\\n+(?=" + n.def.source + ")")();
  n.blockquote = h(n.blockquote)("def", n.def)();
  n._tag = "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";
  n.html = h(n.html)("comment", /\x3c!--[\s\S]*?--\x3e/)("closed", /<(tag)[\s\S]+?<\/\1>/)("closing", /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g, n._tag)();
  n.paragraph = h(n.paragraph)("hr", n.hr)("heading", n.heading)("lheading", n.lheading)("blockquote", n.blockquote)("tag", "<" + n._tag)("def", n.def)();
  n.normal = u({}, n);
  n.gfm = u({}, n.normal, {fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/, paragraph:/^/, heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});
  n.gfm.paragraph = h(n.paragraph)("(?!", "(?!" + n.gfm.fences.source.replace("\\1", "\\2") + "|" + n.list.source.replace("\\1", "\\3") + "|")();
  n.tables = u({}, n.gfm, {nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/, table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});
  a.rules = n;
  a.lex = function(b, c) {
    return (new a(c)).lex(b);
  };
  a.prototype.lex = function(a) {
    a = a.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ").replace(/\u00a0/g, " ").replace(/\u2424/g, "\n");
    return this.token(a, !0);
  };
  a.prototype.token = function(a, b, c) {
    a = a.replace(/^ +$/gm, "");
    for (var d, f, g, h, q, m, w; a;) {
      if (g = this.rules.newline.exec(a)) {
        a = a.substring(g[0].length), 1 < g[0].length && this.tokens.push({type:"space"});
      }
      if (g = this.rules.code.exec(a)) {
        a = a.substring(g[0].length), g = g[0].replace(/^ {4}/gm, ""), this.tokens.push({type:"code", text:this.options.pedantic ? g : g.replace(/\n+$/, "")});
      } else {
        if (g = this.rules.fences.exec(a)) {
          a = a.substring(g[0].length), this.tokens.push({type:"code", lang:g[2], text:g[3] || ""});
        } else {
          if (g = this.rules.heading.exec(a)) {
            a = a.substring(g[0].length), this.tokens.push({type:"heading", depth:g[1].length, text:g[2]});
          } else {
            if (b && (g = this.rules.nptable.exec(a))) {
              a = a.substring(g[0].length);
              q = {type:"table", header:g[1].replace(/^ *| *\| *$/g, "").split(/ *\| */), align:g[2].replace(/^ *|\| *$/g, "").split(/ *\| */), cells:g[3].replace(/\n$/, "").split("\n")};
              for (m = 0; m < q.align.length; m++) {
                /^ *-+: *$/.test(q.align[m]) ? q.align[m] = "right" : /^ *:-+: *$/.test(q.align[m]) ? q.align[m] = "center" : /^ *:-+ *$/.test(q.align[m]) ? q.align[m] = "left" : q.align[m] = null;
              }
              for (m = 0; m < q.cells.length; m++) {
                q.cells[m] = q.cells[m].split(/ *\| */);
              }
              this.tokens.push(q);
            } else {
              if (g = this.rules.lheading.exec(a)) {
                a = a.substring(g[0].length), this.tokens.push({type:"heading", depth:"=" === g[2] ? 1 : 2, text:g[1]});
              } else {
                if (g = this.rules.hr.exec(a)) {
                  a = a.substring(g[0].length), this.tokens.push({type:"hr"});
                } else {
                  if (g = this.rules.blockquote.exec(a)) {
                    a = a.substring(g[0].length), this.tokens.push({type:"blockquote_start"}), g = g[0].replace(/^ *> ?/gm, ""), this.token(g, b, !0), this.tokens.push({type:"blockquote_end"});
                  } else {
                    if (g = this.rules.list.exec(a)) {
                      a = a.substring(g[0].length);
                      h = g[2];
                      this.tokens.push({type:"list_start", ordered:1 < h.length});
                      g = g[0].match(this.rules.item);
                      d = !1;
                      w = g.length;
                      for (m = 0; m < w; m++) {
                        q = g[m], f = q.length, q = q.replace(/^ *([*+-]|\d+\.) +/, ""), ~q.indexOf("\n ") && (f -= q.length, q = this.options.pedantic ? q.replace(/^ {1,4}/gm, "") : q.replace(new RegExp("^ {1," + f + "}", "gm"), "")), this.options.smartLists && m !== w - 1 && (f = n.bullet.exec(g[m + 1])[0], h === f || 1 < h.length && 1 < f.length || (a = g.slice(m + 1).join("\n") + a, m = w - 1)), f = d || /\n\n(?!\s*$)/.test(q), m !== w - 1 && (d = "\n" === q.charAt(q.length - 1), f || (f = d)), 
                        this.tokens.push({type:f ? "loose_item_start" : "list_item_start"}), this.token(q, !1, c), this.tokens.push({type:"list_item_end"});
                      }
                      this.tokens.push({type:"list_end"});
                    } else {
                      if (g = this.rules.html.exec(a)) {
                        a = a.substring(g[0].length), this.tokens.push({type:this.options.sanitize ? "paragraph" : "html", pre:!this.options.sanitizer && ("pre" === g[1] || "script" === g[1] || "style" === g[1]), text:g[0]});
                      } else {
                        if (!c && b && (g = this.rules.def.exec(a))) {
                          a = a.substring(g[0].length), this.tokens.links[g[1].toLowerCase()] = {href:g[2], title:g[3]};
                        } else {
                          if (b && (g = this.rules.table.exec(a))) {
                            a = a.substring(g[0].length);
                            q = {type:"table", header:g[1].replace(/^ *| *\| *$/g, "").split(/ *\| */), align:g[2].replace(/^ *|\| *$/g, "").split(/ *\| */), cells:g[3].replace(/(?: *\| *)?\n$/, "").split("\n")};
                            for (m = 0; m < q.align.length; m++) {
                              /^ *-+: *$/.test(q.align[m]) ? q.align[m] = "right" : /^ *:-+: *$/.test(q.align[m]) ? q.align[m] = "center" : /^ *:-+ *$/.test(q.align[m]) ? q.align[m] = "left" : q.align[m] = null;
                            }
                            for (m = 0; m < q.cells.length; m++) {
                              q.cells[m] = q.cells[m].replace(/^ *\| *| *\| *$/g, "").split(/ *\| */);
                            }
                            this.tokens.push(q);
                          } else {
                            if (b && (g = this.rules.paragraph.exec(a))) {
                              a = a.substring(g[0].length), this.tokens.push({type:"paragraph", text:"\n" === g[1].charAt(g[1].length - 1) ? g[1].slice(0, -1) : g[1]});
                            } else {
                              if (g = this.rules.text.exec(a)) {
                                a = a.substring(g[0].length), this.tokens.push({type:"text", text:g[0]});
                              } else {
                                if (a) {
                                  throw Error("Infinite loop on byte: " + a.charCodeAt(0));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return this.tokens;
  };
  var v = {escape:/^\\([\\`*{}\[\]()#+\-.!_>])/, autolink:/^<([^ >]+(@|:\/)[^ >]+)>/, url:m, tag:/^\x3c!--[\s\S]*?--\x3e|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/, link:/^!?\[(inside)\]\(href\)/, reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/, nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/, strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/, em:/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/, br:/^ {2,}\n(?!\s*$)/, del:m, text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/, 
  _inside:/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/, _href:/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/};
  v.link = h(v.link)("inside", v._inside)("href", v._href)();
  v.reflink = h(v.reflink)("inside", v._inside)();
  v.normal = u({}, v);
  v.pedantic = u({}, v.normal, {strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/, em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});
  v.gfm = u({}, v.normal, {escape:h(v.escape)("])", "~|])")(), url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/, del:/^~~(?=\S)([\s\S]*?\S)~~/, text:h(v.text)("]|", "~]|")("|", "|https?://|")()});
  v.breaks = u({}, v.gfm, {br:h(v.br)("{2,}", "*")(), text:h(v.gfm.text)("{2,}", "*")()});
  b.rules = v;
  b.output = function(a, c, d) {
    return (new b(c, d)).output(a);
  };
  b.prototype.output = function(a) {
    for (var b = "", c, d; a;) {
      if (d = this.rules.escape.exec(a)) {
        a = a.substring(d[0].length), b += d[1];
      } else {
        if (d = this.rules.autolink.exec(a)) {
          a = a.substring(d[0].length), "@" === d[2] ? (c = ":" === d[1].charAt(6) ? this.mangle(d[1].substring(7)) : this.mangle(d[1]), d = this.mangle("mailto:") + c) : d = c = f(d[1]), b += this.renderer.link(d, null, c);
        } else {
          if (!this.inLink && (d = this.rules.url.exec(a))) {
            a = a.substring(d[0].length), d = c = f(d[1]), b += this.renderer.link(d, null, c);
          } else {
            if (d = this.rules.tag.exec(a)) {
              !this.inLink && /^<a /i.test(d[0]) ? this.inLink = !0 : this.inLink && /^<\/a>/i.test(d[0]) && (this.inLink = !1), a = a.substring(d[0].length), b += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(d[0]) : f(d[0]) : d[0];
            } else {
              if (d = this.rules.link.exec(a)) {
                a = a.substring(d[0].length), this.inLink = !0, b += this.outputLink(d, {href:d[2], title:d[3]}), this.inLink = !1;
              } else {
                if ((d = this.rules.reflink.exec(a)) || (d = this.rules.nolink.exec(a))) {
                  a = a.substring(d[0].length), c = (d[2] || d[1]).replace(/\s+/g, " "), (c = this.links[c.toLowerCase()]) && c.href ? (this.inLink = !0, b += this.outputLink(d, c), this.inLink = !1) : (b += d[0].charAt(0), a = d[0].substring(1) + a);
                } else {
                  if (d = this.rules.strong.exec(a)) {
                    a = a.substring(d[0].length), b += this.renderer.strong(this.output(d[2] || d[1]));
                  } else {
                    if (d = this.rules.em.exec(a)) {
                      a = a.substring(d[0].length), b += this.renderer.em(this.output(d[2] || d[1]));
                    } else {
                      if (d = this.rules.code.exec(a)) {
                        a = a.substring(d[0].length), b += this.renderer.codespan(f(d[2], !0));
                      } else {
                        if (d = this.rules.br.exec(a)) {
                          a = a.substring(d[0].length), b += this.renderer.br();
                        } else {
                          if (d = this.rules.del.exec(a)) {
                            a = a.substring(d[0].length), b += this.renderer.del(this.output(d[1]));
                          } else {
                            if (d = this.rules.text.exec(a)) {
                              a = a.substring(d[0].length), b += this.renderer.text(f(this.smartypants(d[0])));
                            } else {
                              if (a) {
                                throw Error("Infinite loop on byte: " + a.charCodeAt(0));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return b;
  };
  b.prototype.outputLink = function(a, b) {
    var c = f(b.href);
    b = b.title ? f(b.title) : null;
    return "!" !== a[0].charAt(0) ? this.renderer.link(c, b, this.output(a[1])) : this.renderer.image(c, b, f(a[1]));
  };
  b.prototype.smartypants = function(a) {
    return this.options.smartypants ? a.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…") : a;
  };
  b.prototype.mangle = function(a) {
    if (!this.options.mangle) {
      return a;
    }
    for (var b = "", c = a.length, d = 0, f; d < c; d++) {
      f = a.charCodeAt(d), 0.5 < Math.random() && (f = "x" + f.toString(16)), b += "&#" + f + ";";
    }
    return b;
  };
  c.prototype.code = function(a, b, c) {
    if (this.options.highlight) {
      var d = this.options.highlight(a, b);
      null != d && d !== a && (c = !0, a = d);
    }
    return b ? '<pre><code class="' + this.options.langPrefix + f(b, !0) + '">' + (c ? a : f(a, !0)) + "\n</code></pre>\n" : "<pre><code>" + (c ? a : f(a, !0)) + "\n</code></pre>";
  };
  c.prototype.blockquote = function(a) {
    return "<blockquote>\n" + a + "</blockquote>\n";
  };
  c.prototype.html = function(a) {
    return a;
  };
  c.prototype.heading = function(a, b, c) {
    return "<h" + b + ' id="' + this.options.headerPrefix + c.toLowerCase().replace(/[^\w]+/g, "-") + '">' + a + "</h" + b + ">\n";
  };
  c.prototype.hr = function() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  };
  c.prototype.list = function(a, b) {
    b = b ? "ol" : "ul";
    return "<" + b + ">\n" + a + "</" + b + ">\n";
  };
  c.prototype.listitem = function(a) {
    return "<li>" + a + "</li>\n";
  };
  c.prototype.paragraph = function(a) {
    return "<p>" + a + "</p>\n";
  };
  c.prototype.table = function(a, b) {
    return "<table>\n<thead>\n" + a + "</thead>\n<tbody>\n" + b + "</tbody>\n</table>\n";
  };
  c.prototype.tablerow = function(a) {
    return "<tr>\n" + a + "</tr>\n";
  };
  c.prototype.tablecell = function(a, b) {
    var c = b.header ? "th" : "td";
    return (b.align ? "<" + c + ' style="text-align:' + b.align + '">' : "<" + c + ">") + a + "</" + c + ">\n";
  };
  c.prototype.strong = function(a) {
    return "<strong>" + a + "</strong>";
  };
  c.prototype.em = function(a) {
    return "<em>" + a + "</em>";
  };
  c.prototype.codespan = function(a) {
    return "<code>" + a + "</code>";
  };
  c.prototype.br = function() {
    return this.options.xhtml ? "<br/>" : "<br>";
  };
  c.prototype.del = function(a) {
    return "<del>" + a + "</del>";
  };
  c.prototype.link = function(a, b, c) {
    if (this.options.sanitize) {
      try {
        var d = decodeURIComponent(g(a)).replace(/[^\w:]/g, "").toLowerCase();
      } catch (p) {
        return "";
      }
      if (0 === d.indexOf("javascript:") || 0 === d.indexOf("vbscript:")) {
        return "";
      }
    }
    a = '<a href="' + a + '"';
    b && (a += ' title="' + b + '"');
    return a + (">" + c + "</a>");
  };
  c.prototype.image = function(a, b, c) {
    a = '<img src="' + a + '" alt="' + c + '"';
    b && (a += ' title="' + b + '"');
    return a += this.options.xhtml ? "/>" : ">";
  };
  c.prototype.text = function(a) {
    return a;
  };
  d.parse = function(a, b, c) {
    return (new d(b, c)).parse(a);
  };
  d.prototype.parse = function(a) {
    this.inline = new b(a.links, this.options, this.renderer);
    this.tokens = a.reverse();
    for (a = ""; this.next();) {
      a += this.tok();
    }
    return a;
  };
  d.prototype.next = function() {
    return this.token = this.tokens.pop();
  };
  d.prototype.peek = function() {
    return this.tokens[this.tokens.length - 1] || 0;
  };
  d.prototype.parseText = function() {
    for (var a = this.token.text; "text" === this.peek().type;) {
      a += "\n" + this.next().text;
    }
    return this.inline.output(a);
  };
  d.prototype.tok = function() {
    switch(this.token.type) {
      case "space":
        return "";
      case "hr":
        return this.renderer.hr();
      case "heading":
        return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, this.token.text);
      case "code":
        return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
      case "table":
        var a = "";
        var b = "";
        var c, d;
        var f = "";
        for (c = 0; c < this.token.header.length; c++) {
          f += this.renderer.tablecell(this.inline.output(this.token.header[c]), {header:!0, align:this.token.align[c]});
        }
        a += this.renderer.tablerow(f);
        for (c = 0; c < this.token.cells.length; c++) {
          var g = this.token.cells[c];
          f = "";
          for (d = 0; d < g.length; d++) {
            f += this.renderer.tablecell(this.inline.output(g[d]), {header:!1, align:this.token.align[d]});
          }
          b += this.renderer.tablerow(f);
        }
        return this.renderer.table(a, b);
      case "blockquote_start":
        for (b = ""; "blockquote_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.blockquote(b);
      case "list_start":
        b = "";
        for (a = this.token.ordered; "list_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.list(b, a);
      case "list_item_start":
        for (b = ""; "list_item_end" !== this.next().type;) {
          b += "text" === this.token.type ? this.parseText() : this.tok();
        }
        return this.renderer.listitem(b);
      case "loose_item_start":
        for (b = ""; "list_item_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.listitem(b);
      case "html":
        return b = this.token.pre || this.options.pedantic ? this.token.text : this.inline.output(this.token.text), this.renderer.html(b);
      case "paragraph":
        return this.renderer.paragraph(this.inline.output(this.token.text));
      case "text":
        return this.renderer.paragraph(this.parseText());
    }
  };
  m.exec = m;
  r.options = r.setOptions = function(a) {
    u(r.defaults, a);
    return r;
  };
  r.defaults = {gfm:!0, tables:!0, breaks:!1, pedantic:!1, sanitize:!1, sanitizer:null, mangle:!0, smartLists:!1, silent:!1, highlight:null, langPrefix:"lang-", smartypants:!1, headerPrefix:"", renderer:new c, xhtml:!1};
  r.Parser = d;
  r.parser = d.parse;
  r.Renderer = c;
  r.Lexer = a;
  r.lexer = a.lex;
  r.InlineLexer = b;
  r.inlineLexer = b.output;
  r.parse = r;
  "undefined" !== typeof module && "object" === typeof exports ? module.exports = r : "function" === typeof define && define.amd ? define(function() {
    return r;
  }) : this.marked = r;
}).call(function() {
  return this || ("undefined" !== typeof window ? window : global);
}());
"use strict";
Polymer({is:"marked-element", properties:{markdown:{observer:"render", type:String, value:null}, pedantic:{observer:"render", type:Boolean, value:!1}, sanitize:{observer:"render", type:Boolean, value:!1}, smartypants:{observer:"render", type:Boolean, value:!1}}, ready:function() {
  if (!this.markdown) {
    var a = Polymer.dom(this).querySelector('[type^="text/markdown"]');
    null != a && (this.markdown = this._unindent(a.textContent));
  }
}, attached:function() {
  this._attached = !0;
  this._outputElement = this.outputElement;
  this.render();
}, detached:function() {
  this._attached = !1;
}, unindent:function(a) {
  return this._unindent(a);
}, get outputElement() {
  var a = Polymer.dom(this).queryDistributedElements(".markdown-html")[0];
  if (a) {
    return a;
  }
  this.toggleClass("hidden", !1, this.$.content);
  return this.$.content;
}, render:function() {
  if (this._attached) {
    if (this.markdown) {
      var a = {highlight:this._highlight.bind(this), sanitize:this.sanitize, pedantic:this.pedantic, smartypants:this.smartypants};
      Polymer.dom(this._outputElement).innerHTML = marked(this.markdown, a);
      this.fire("marked-render-complete");
    } else {
      Polymer.dom(this._outputElement).innerHTML = "";
    }
  }
}, _highlight:function(a, b) {
  return this.fire("syntax-highlight", {code:a, lang:b}).detail.code || a;
}, _unindent:function(a) {
  if (!a) {
    return a;
  }
  a = a.replace(/\t/g, "  ").split("\n");
  var b = a.reduce(function(a, b) {
    if (/^\s*$/.test(b)) {
      return a;
    }
    b = b.match(/^(\s*)/)[0].length;
    return null === a ? b : b < a ? b : a;
  }, null);
  return a.map(function(a) {
    return a.substr(b);
  }).join("\n");
}});
(function() {
  function a(a) {
    this.element = a;
    this.width = this.boundingRect.width;
    this.height = this.boundingRect.height;
    this.size = Math.max(this.width, this.height);
  }
  function b(a) {
    this.element = a;
    this.color = window.getComputedStyle(a).color;
    this.wave = document.createElement("div");
    this.waveContainer = document.createElement("div");
    this.wave.style.backgroundColor = this.color;
    this.wave.classList.add("wave");
    this.waveContainer.classList.add("wave-container");
    Polymer.dom(this.waveContainer).appendChild(this.wave);
    this.resetInteractionState();
  }
  var c = {distance:function(a, b, c, h) {
    a -= c;
    b -= h;
    return Math.sqrt(a * a + b * b);
  }, now:window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now};
  a.prototype = {get boundingRect() {
    return this.element.getBoundingClientRect();
  }, furthestCornerDistanceFrom:function(a, b) {
    var d = c.distance(a, b, 0, 0), f = c.distance(a, b, this.width, 0), m = c.distance(a, b, 0, this.height);
    a = c.distance(a, b, this.width, this.height);
    return Math.max(d, f, m, a);
  }};
  b.MAX_RADIUS = 300;
  b.prototype = {get recenters() {
    return this.element.recenters;
  }, get center() {
    return this.element.center;
  }, get mouseDownElapsed() {
    if (!this.mouseDownStart) {
      return 0;
    }
    var a = c.now() - this.mouseDownStart;
    this.mouseUpStart && (a -= this.mouseUpElapsed);
    return a;
  }, get mouseUpElapsed() {
    return this.mouseUpStart ? c.now() - this.mouseUpStart : 0;
  }, get mouseDownElapsedSeconds() {
    return this.mouseDownElapsed / 1000;
  }, get mouseUpElapsedSeconds() {
    return this.mouseUpElapsed / 1000;
  }, get mouseInteractionSeconds() {
    return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds;
  }, get initialOpacity() {
    return this.element.initialOpacity;
  }, get opacityDecayVelocity() {
    return this.element.opacityDecayVelocity;
  }, get radius() {
    var a = 1.1 * Math.min(Math.sqrt(this.containerMetrics.width * this.containerMetrics.width + this.containerMetrics.height * this.containerMetrics.height), b.MAX_RADIUS) + 5;
    return Math.abs(a * (1 - Math.pow(80, -(this.mouseInteractionSeconds / (1.1 - a / b.MAX_RADIUS * 0.2)))));
  }, get opacity() {
    return this.mouseUpStart ? Math.max(0, this.initialOpacity - this.mouseUpElapsedSeconds * this.opacityDecayVelocity) : this.initialOpacity;
  }, get outerOpacity() {
    return Math.max(0, Math.min(0.3 * this.mouseUpElapsedSeconds, this.opacity));
  }, get isOpacityFullyDecayed() {
    return 0.01 > this.opacity && this.radius >= Math.min(this.maxRadius, b.MAX_RADIUS);
  }, get isRestingAtMaxRadius() {
    return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, b.MAX_RADIUS);
  }, get isAnimationComplete() {
    return this.mouseUpStart ? this.isOpacityFullyDecayed : this.isRestingAtMaxRadius;
  }, get translationFraction() {
    return Math.min(1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2));
  }, get xNow() {
    return this.xEnd ? this.xStart + this.translationFraction * (this.xEnd - this.xStart) : this.xStart;
  }, get yNow() {
    return this.yEnd ? this.yStart + this.translationFraction * (this.yEnd - this.yStart) : this.yStart;
  }, get isMouseDown() {
    return this.mouseDownStart && !this.mouseUpStart;
  }, resetInteractionState:function() {
    this.slideDistance = this.yEnd = this.xEnd = this.yStart = this.xStart = this.mouseUpStart = this.mouseDownStart = this.maxRadius = 0;
    this.containerMetrics = new a(this.element);
  }, draw:function() {
    this.wave.style.opacity = this.opacity;
    var a = this.radius / (this.containerMetrics.size / 2);
    var b = this.xNow - this.containerMetrics.width / 2;
    var c = this.yNow - this.containerMetrics.height / 2;
    this.waveContainer.style.webkitTransform = "translate(" + b + "px, " + c + "px)";
    this.waveContainer.style.transform = "translate3d(" + b + "px, " + c + "px, 0)";
    this.wave.style.webkitTransform = "scale(" + a + "," + a + ")";
    this.wave.style.transform = "scale3d(" + a + "," + a + ",1)";
  }, downAction:function(a) {
    var b = this.containerMetrics.width / 2, d = this.containerMetrics.height / 2;
    this.resetInteractionState();
    this.mouseDownStart = c.now();
    this.center ? (this.xStart = b, this.yStart = d, this.slideDistance = c.distance(this.xStart, this.yStart, this.xEnd, this.yEnd)) : (this.xStart = a ? a.detail.x - this.containerMetrics.boundingRect.left : this.containerMetrics.width / 2, this.yStart = a ? a.detail.y - this.containerMetrics.boundingRect.top : this.containerMetrics.height / 2);
    this.recenters && (this.xEnd = b, this.yEnd = d, this.slideDistance = c.distance(this.xStart, this.yStart, this.xEnd, this.yEnd));
    this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(this.xStart, this.yStart);
    this.waveContainer.style.top = (this.containerMetrics.height - this.containerMetrics.size) / 2 + "px";
    this.waveContainer.style.left = (this.containerMetrics.width - this.containerMetrics.size) / 2 + "px";
    this.waveContainer.style.width = this.containerMetrics.size + "px";
    this.waveContainer.style.height = this.containerMetrics.size + "px";
  }, upAction:function(a) {
    this.isMouseDown && (this.mouseUpStart = c.now());
  }, remove:function() {
    Polymer.dom(this.waveContainer.parentNode).removeChild(this.waveContainer);
  }};
  Polymer({is:"paper-ripple", behaviors:[Polymer.IronA11yKeysBehavior], properties:{initialOpacity:{type:Number, value:0.25}, opacityDecayVelocity:{type:Number, value:0.8}, recenters:{type:Boolean, value:!1}, center:{type:Boolean, value:!1}, ripples:{type:Array, value:function() {
    return [];
  }}, animating:{type:Boolean, readOnly:!0, reflectToAttribute:!0, value:!1}, holdDown:{type:Boolean, value:!1, observer:"_holdDownChanged"}, noink:{type:Boolean, value:!1}, _animating:{type:Boolean}, _boundAnimate:{type:Function, value:function() {
    return this.animate.bind(this);
  }}}, get target() {
    var a = Polymer.dom(this).getOwnerRoot();
    return 11 == this.parentNode.nodeType ? a.host : this.parentNode;
  }, keyBindings:{"enter:keydown":"_onEnterKeydown", "space:keydown":"_onSpaceKeydown", "space:keyup":"_onSpaceKeyup"}, attached:function() {
    this.keyEventTarget = this.target;
    this.listen(this.target, "up", "uiUpAction");
    this.listen(this.target, "down", "uiDownAction");
  }, detached:function() {
    this.unlisten(this.target, "up", "uiUpAction");
    this.unlisten(this.target, "down", "uiDownAction");
  }, get shouldKeepAnimating() {
    for (var a = 0; a < this.ripples.length; ++a) {
      if (!this.ripples[a].isAnimationComplete) {
        return !0;
      }
    }
    return !1;
  }, simulatedRipple:function() {
    this.downAction(null);
    this.async(function() {
      this.upAction();
    }, 1);
  }, uiDownAction:function(a) {
    this.noink || this.downAction(a);
  }, downAction:function(a) {
    this.holdDown && 0 < this.ripples.length || (this.addRipple().downAction(a), this._animating || this.animate());
  }, uiUpAction:function(a) {
    this.noink || this.upAction(a);
  }, upAction:function(a) {
    this.holdDown || (this.ripples.forEach(function(b) {
      b.upAction(a);
    }), this.animate());
  }, onAnimationComplete:function() {
    this._animating = !1;
    this.$.background.style.backgroundColor = null;
    this.fire("transitionend");
  }, addRipple:function() {
    var a = new b(this);
    Polymer.dom(this.$.waves).appendChild(a.waveContainer);
    this.$.background.style.backgroundColor = a.color;
    this.ripples.push(a);
    this._setAnimating(!0);
    return a;
  }, removeRipple:function(a) {
    var b = this.ripples.indexOf(a);
    0 > b || (this.ripples.splice(b, 1), a.remove(), this.ripples.length || this._setAnimating(!1));
  }, animate:function() {
    var a;
    this._animating = !0;
    for (a = 0; a < this.ripples.length; ++a) {
      var b = this.ripples[a];
      b.draw();
      this.$.background.style.opacity = b.outerOpacity;
      b.isOpacityFullyDecayed && !b.isRestingAtMaxRadius && this.removeRipple(b);
    }
    if (this.shouldKeepAnimating || 0 !== this.ripples.length) {
      window.requestAnimationFrame(this._boundAnimate);
    } else {
      this.onAnimationComplete();
    }
  }, _onEnterKeydown:function() {
    this.uiDownAction();
    this.async(this.uiUpAction, 1);
  }, _onSpaceKeydown:function() {
    this.uiDownAction();
  }, _onSpaceKeyup:function() {
    this.uiUpAction();
  }, _holdDownChanged:function(a, b) {
    void 0 !== b && (a ? this.downAction() : this.upAction());
  }});
})();
Polymer.PaperRippleBehavior = {properties:{noink:{type:Boolean, observer:"_noinkChanged"}, _rippleContainer:{type:Object}}, _buttonStateChanged:function() {
  this.focused && this.ensureRipple();
}, _downHandler:function(a) {
  Polymer.IronButtonStateImpl._downHandler.call(this, a);
  this.pressed && this.ensureRipple(a);
}, ensureRipple:function(a) {
  if (!this.hasRipple()) {
    this._ripple = this._createRipple();
    this._ripple.noink = this.noink;
    var b = this._rippleContainer || this.root;
    b && Polymer.dom(b).appendChild(this._ripple);
    if (a) {
      var b = Polymer.dom(this._rippleContainer || this), c = Polymer.dom(a).rootTarget;
      b.deepContains(c) && this._ripple.uiDownAction(a);
    }
  }
}, getRipple:function() {
  this.ensureRipple();
  return this._ripple;
}, hasRipple:function() {
  return !!this._ripple;
}, _createRipple:function() {
  return document.createElement("paper-ripple");
}, _noinkChanged:function(a) {
  this.hasRipple() && (this._ripple.noink = a);
}};
Polymer.PaperButtonBehaviorImpl = {properties:{elevation:{type:Number, reflectToAttribute:!0, readOnly:!0}}, observers:["_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)", "_computeKeyboardClass(receivedFocusFromKeyboard)"], hostAttributes:{role:"button", tabindex:"0", animated:!0}, _calculateElevation:function() {
  var a = 1;
  this.disabled ? a = 0 : this.active || this.pressed ? a = 4 : this.receivedFocusFromKeyboard && (a = 3);
  this._setElevation(a);
}, _computeKeyboardClass:function(a) {
  this.toggleClass("keyboard-focus", a);
}, _spaceKeyDownHandler:function(a) {
  Polymer.IronButtonStateImpl._spaceKeyDownHandler.call(this, a);
  this.hasRipple() && 1 > this.getRipple().ripples.length && this._ripple.uiDownAction();
}, _spaceKeyUpHandler:function(a) {
  Polymer.IronButtonStateImpl._spaceKeyUpHandler.call(this, a);
  this.hasRipple() && this._ripple.uiUpAction();
}};
Polymer.PaperButtonBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperButtonBehaviorImpl];
Polymer({is:"paper-material", properties:{elevation:{type:Number, reflectToAttribute:!0, value:1}, animated:{type:Boolean, reflectToAttribute:!0, value:!1}}});
Polymer({is:"paper-button", behaviors:[Polymer.PaperButtonBehavior], properties:{raised:{type:Boolean, reflectToAttribute:!0, value:!1, observer:"_calculateElevation"}}, _calculateElevation:function() {
  this.raised ? Polymer.PaperButtonBehaviorImpl._calculateElevation.apply(this) : this._setElevation(0);
}});
var _self = "undefined" !== typeof window ? window : "undefined" !== typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}, Prism = function() {
  var a = /\blang(?:uage)?-(\w+)\b/i, b = 0, c = _self.Prism = {util:{encode:function(a) {
    return a instanceof d ? new d(a.type, c.util.encode(a.content), a.alias) : "Array" === c.util.type(a) ? a.map(c.util.encode) : a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
  }, type:function(a) {
    return Object.prototype.toString.call(a).match(/\[object (\w+)\]/)[1];
  }, objId:function(a) {
    a.__id || Object.defineProperty(a, "__id", {value:++b});
    return a.__id;
  }, clone:function(a) {
    switch(c.util.type(a)) {
      case "Object":
        var b = {}, d;
        for (d in a) {
          a.hasOwnProperty(d) && (b[d] = c.util.clone(a[d]));
        }
        return b;
      case "Array":
        return a.map && a.map(function(a) {
          return c.util.clone(a);
        });
    }
    return a;
  }}, languages:{extend:function(a, b) {
    a = c.util.clone(c.languages[a]);
    for (var d in b) {
      a[d] = b[d];
    }
    return a;
  }, insertBefore:function(a, b, d, f) {
    f = f || c.languages;
    var g = f[a];
    if (2 == arguments.length) {
      d = arguments[1];
      for (var h in d) {
        d.hasOwnProperty(h) && (g[h] = d[h]);
      }
      return g;
    }
    var m = {}, u;
    for (u in g) {
      if (g.hasOwnProperty(u)) {
        if (u == b) {
          for (h in d) {
            d.hasOwnProperty(h) && (m[h] = d[h]);
          }
        }
        m[u] = g[u];
      }
    }
    c.languages.DFS(c.languages, function(b, c) {
      c === f[a] && b != a && (this[b] = m);
    });
    return f[a] = m;
  }, DFS:function(a, b, d, f) {
    f = f || {};
    for (var g in a) {
      a.hasOwnProperty(g) && ((b.call(a, g, a[g], d || g), "Object" !== c.util.type(a[g]) || f[c.util.objId(a[g])]) ? "Array" !== c.util.type(a[g]) || f[c.util.objId(a[g])] || (f[c.util.objId(a[g])] = !0, c.languages.DFS(a[g], b, g, f)) : (f[c.util.objId(a[g])] = !0, c.languages.DFS(a[g], b, null, f)));
    }
  }}, plugins:{}, highlightAll:function(a, b) {
    b = {callback:b, selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};
    c.hooks.run("before-highlightall", b);
    for (var d = b.elements || document.querySelectorAll(b.selector), f = 0, g; g = d[f++];) {
      c.highlightElement(g, !0 === a, b.callback);
    }
  }, highlightElement:function(b, d, f) {
    for (var g, h, m = b; m && !a.test(m.className);) {
      m = m.parentNode;
    }
    m && (g = (m.className.match(a) || [, ""])[1], h = c.languages[g]);
    b.className = b.className.replace(a, "").replace(/\s+/g, " ") + " language-" + g;
    m = b.parentNode;
    /pre/i.test(m.nodeName) && (m.className = m.className.replace(a, "").replace(/\s+/g, " ") + " language-" + g);
    var v = {element:b, language:g, grammar:h, code:b.textContent};
    c.hooks.run("before-sanity-check", v);
    v.code && v.grammar ? (c.hooks.run("before-highlight", v), d && _self.Worker ? (b = new Worker(c.filename), b.onmessage = function(a) {
      v.highlightedCode = a.data;
      c.hooks.run("before-insert", v);
      v.element.innerHTML = v.highlightedCode;
      f && f.call(v.element);
      c.hooks.run("after-highlight", v);
      c.hooks.run("complete", v);
    }, b.postMessage(JSON.stringify({language:v.language, code:v.code, immediateClose:!0}))) : (v.highlightedCode = c.highlight(v.code, v.grammar, v.language), c.hooks.run("before-insert", v), v.element.innerHTML = v.highlightedCode, f && f.call(b), c.hooks.run("after-highlight", v), c.hooks.run("complete", v))) : c.hooks.run("complete", v);
  }, highlight:function(a, b, f) {
    a = c.tokenize(a, b);
    return d.stringify(c.util.encode(a), f);
  }, tokenize:function(a, b, d) {
    d = c.Token;
    var f = [a], g = b.rest;
    if (g) {
      for (var h in g) {
        b[h] = g[h];
      }
      delete b.rest;
    }
    a: for (h in b) {
      if (b.hasOwnProperty(h) && b[h]) {
        for (var g = b[h], g = "Array" === c.util.type(g) ? g : [g], m = 0; m < g.length; ++m) {
          for (var w = g[m], y = w.inside, q = !!w.lookbehind, l = !!w.greedy, p = 0, t = w.alias, w = w.pattern || w, x = 0; x < f.length; x++) {
            var z = f[x];
            if (f.length > a.length) {
              break a;
            }
            if (!(z instanceof d)) {
              w.lastIndex = 0;
              var A = w.exec(z), E = 1;
              if (!A && l && x != f.length - 1) {
                var E = f[x + 1].matchedStr || f[x + 1], F = z + E;
                x < f.length - 2 && (F += f[x + 2].matchedStr || f[x + 2]);
                w.lastIndex = 0;
                A = w.exec(F);
                if (!A) {
                  continue;
                }
                var J = A.index + (q ? A[1].length : 0);
                if (J >= z.length) {
                  continue;
                }
                var N = A.index + A[0].length;
                z = z.length + E.length;
                E = 3;
                if (N <= z) {
                  if (f[x + 1].greedy) {
                    continue;
                  }
                  E = 2;
                  F = F.slice(0, z);
                }
                z = F;
              }
              A && (q && (p = A[1].length), J = A.index + p, A = A[0].slice(p), N = J + A.length, F = z.slice(0, J), N = z.slice(N), E = [x, E], F && E.push(F), A = new d(h, y ? c.tokenize(A, y) : A, t, A, l), E.push(A), N && E.push(N), Array.prototype.splice.apply(f, E));
            }
          }
        }
      }
    }
    return f;
  }, hooks:{all:{}, add:function(a, b) {
    var d = c.hooks.all;
    d[a] = d[a] || [];
    d[a].push(b);
  }, run:function(a, b) {
    if ((a = c.hooks.all[a]) && a.length) {
      for (var d = 0, f; f = a[d++];) {
        f(b);
      }
    }
  }}}, d = c.Token = function(a, b, c, d, f) {
    this.type = a;
    this.content = b;
    this.alias = c;
    this.matchedStr = d || null;
    this.greedy = !!f;
  };
  d.stringify = function(a, b, f) {
    if ("string" == typeof a) {
      return a;
    }
    if ("Array" === c.util.type(a)) {
      return a.map(function(c) {
        return d.stringify(c, b, a);
      }).join("");
    }
    f = {type:a.type, content:d.stringify(a.content, b, f), tag:"span", classes:["token", a.type], attributes:{}, language:b, parent:f};
    "comment" == f.type && (f.attributes.spellcheck = "true");
    if (a.alias) {
      var g = "Array" === c.util.type(a.alias) ? a.alias : [a.alias];
      Array.prototype.push.apply(f.classes, g);
    }
    c.hooks.run("wrap", f);
    var g = "", h;
    for (h in f.attributes) {
      g += (g ? " " : "") + h + '="' + (f.attributes[h] || "") + '"';
    }
    return "<" + f.tag + ' class="' + f.classes.join(" ") + '" ' + g + ">" + f.content + "</" + f.tag + ">";
  };
  if (!_self.document) {
    if (!_self.addEventListener) {
      return _self.Prism;
    }
    _self.addEventListener("message", function(a) {
      a = JSON.parse(a.data);
      var b = a.language, d = a.immediateClose;
      _self.postMessage(c.highlight(a.code, c.languages[b], b));
      d && _self.close();
    }, !1);
    return _self.Prism;
  }
  var f = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();
  f && (c.filename = f.src, document.addEventListener && !f.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", c.highlightAll));
  return _self.Prism;
}();
"undefined" !== typeof module && module.exports && (module.exports = Prism);
"undefined" !== typeof global && (global.Prism = Prism);
Prism.languages.markup = {comment:/\x3c!--[\w\W]*?--\x3e/, prolog:/<\?[\w\W]+?\?>/, doctype:/<!DOCTYPE[\w\W]+?>/, cdata:/<!\[CDATA\[[\w\W]*?]]\x3e/i, tag:{pattern:/<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside:{tag:{pattern:/^<\/?[^\s>\/]+/i, inside:{punctuation:/^<\/?/, namespace:/^[^\s>\/:]+:/}}, "attr-value":{pattern:/=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside:{punctuation:/[=>"']/}}, punctuation:/\/?>/, "attr-name":{pattern:/[^\s>\/]+/, 
inside:{namespace:/^[^\s>\/:]+:/}}}}, entity:/&#?[\da-z]{1,8};/i};
Prism.hooks.add("wrap", function(a) {
  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
});
Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.css = {comment:/\/\*[\w\W]*?\*\//, atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*\{))/i, inside:{rule:/@[\w-]+/}}, url:/url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector:/[^\{\}\s][^\{\};]*?(?=\s*\{)/, string:/("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property:/(\b|\B)[\w-]+(?=\s*:)/i, important:/\B!important\b/i, "function":/[-a-z0-9]+(?=\()/i, punctuation:/[(){};:]/};
Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css);
Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", {style:{pattern:/(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind:!0, inside:Prism.languages.css, alias:"language-css"}}), Prism.languages.insertBefore("inside", "attr-value", {"style-attr":{pattern:/\s*style=("|').*?\1/i, inside:{"attr-name":{pattern:/^\s*style/i, inside:Prism.languages.markup.tag.inside}, punctuation:/^\s*=\s*['"]|['"]\s*$/, "attr-value":{pattern:/.+/i, inside:Prism.languages.css}}, alias:"language-css"}}, 
Prism.languages.markup.tag));
Prism.languages.clike = {comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind:!0}, {pattern:/(^|[^\\:])\/\/.*/, lookbehind:!0}], string:{pattern:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy:!0}, "class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind:!0, inside:{punctuation:/(\.|\\)/}}, keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean":/\b(true|false)\b/, 
"function":/[a-z0-9_]+(?=\()/i, number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation:/[{}[\];(),.:]/};
Prism.languages.javascript = Prism.languages.extend("clike", {keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number:/\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i});
Prism.languages.insertBefore("javascript", "keyword", {regex:{pattern:/(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind:!0, greedy:!0}});
Prism.languages.insertBefore("javascript", "class-name", {"template-string":{pattern:/`(?:\\\\|\\?[^\\])*?`/, greedy:!0, inside:{interpolation:{pattern:/\$\{[^}]+\}/, inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/, alias:"punctuation"}, rest:Prism.languages.javascript}}, string:/[\s\S]+/}}});
Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", {script:{pattern:/(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind:!0, inside:Prism.languages.javascript, alias:"language-javascript"}});
Prism.languages.js = Prism.languages.javascript;
(function() {
  "undefined" !== typeof self && self.Prism && self.document && document.querySelector && (self.Prism.fileHighlight = function() {
    var a = {js:"javascript", py:"python", rb:"ruby", ps1:"powershell", psm1:"powershell", sh:"bash", bat:"batch", h:"c", tex:"latex"};
    Array.prototype.forEach && Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(b) {
      for (var c = b.getAttribute("data-src"), d, f = b, g = /\blang(?:uage)?-(?!\*)(\w+)\b/i; f && !g.test(f.className);) {
        f = f.parentNode;
      }
      f && (d = (b.className.match(g) || [, ""])[1]);
      d || (d = (c.match(/\.(\w+)$/) || [, ""])[1], d = a[d] || d);
      var h = document.createElement("code");
      h.className = "language-" + d;
      b.textContent = "";
      h.textContent = "Loading…";
      b.appendChild(h);
      var m = new XMLHttpRequest;
      m.open("GET", c, !0);
      m.onreadystatechange = function() {
        4 == m.readyState && (400 > m.status && m.responseText ? (h.textContent = m.responseText, Prism.highlightElement(h)) : h.textContent = 400 <= m.status ? "✖ Error " + m.status + " while fetching file: " + m.statusText : "✖ Error: File does not exist or is empty");
      };
      m.send(null);
    });
  }, document.addEventListener("DOMContentLoaded", self.Prism.fileHighlight));
})();
(function() {
  Polymer({is:"prism-highlighter", ready:function() {
    this._handler = this._highlight.bind(this);
  }, attached:function() {
    (this.parentElement || this.parentNode.host).addEventListener("syntax-highlight", this._handler);
  }, detached:function() {
    (this.parentElement || this.parentNode.host).removeEventListener("syntax-highlight", this._handler);
  }, _highlight:function(a) {
    a.detail && a.detail.code ? (a = a.detail, a.code = Prism.highlight(a.code, this._detectLang(a.code, a.lang))) : console.warn("Malformed", "syntax-highlight", "event:", a.detail);
  }, _detectLang:function(a, b) {
    if (!b) {
      return a.match(/^\s*</) ? Prism.languages.markup : Prism.languages.javascript;
    }
    if (Prism.languages[b]) {
      return Prism.languages[b];
    }
    switch(b.substr(0, 2)) {
      case "js":
      case "es":
        return Prism.languages.javascript;
      case "c":
        return Prism.languages.clike;
      default:
        return Prism.languages.markup;
    }
  }});
})();
(function() {
  Polymer({is:"iron-doc-property", properties:{descriptor:{type:Object, observer:"_descriptorChanged"}, collapsed:{type:Boolean, value:!1, observer:"_collapsedChanged"}, anchorId:{type:String, reflectToAttribute:!0}, _paramText:String}, listeners:{transitionEnd:"_onTransitionEnd", webkitTransitionEnd:"_onTransitionEnd"}, ready:function() {
    this._isReady = !0;
  }, _onTransitionEnd:function(a) {
    a.path[0] === this.$.transitionMask && (this.$.transitionMask.style.height = "");
  }, _descriptorChanged:function() {
    this.toggleAttribute("private", this.descriptor.private);
    this.toggleAttribute("configuration", this.descriptor.configuration);
    this.toggleAttribute("function", this.descriptor.function);
    this._paramText = (this.descriptor.params || []).map(function(a) {
      return a.name;
    }).join(", ");
  }, _collapsedChanged:function() {
    if (this._isReady) {
      var a = this.$.transitionMask, b = this.collapsed;
      a.style.height = "auto";
      var c = a.offsetHeight;
      a.style.height = this.collapsed ? c + "px" : "";
      requestAnimationFrame(function() {
        this.toggleAttribute("_collapsed", b);
        a.style.height = this.collapsed ? "" : c + "px";
      }.bind(this));
    } else {
      this.toggleAttribute("_collapsed", this.collapsed);
    }
  }, _computeHideMeta:function(a) {
    return void 0 === a.type && void 0 === a.default;
  }, _computeHideParams:function(a, b) {
    return (!a.params || 0 === a.params.length) && !b;
  }, _computeHideDefault:function(a) {
    return void 0 === a;
  }, _computeDefaultDisplay:function(a) {
    return "" === a ? "''" : a;
  }, _getAnnotation:function(a) {
    var b = [];
    void 0 !== a["default"] && b.push("Default: " + a["default"]);
    a.readOnly && b.push("readOnly");
    a.notify && b.push("notifies");
    return b.join(" – ");
  }});
})();
(function() {
  Polymer({is:"iron-doc-viewer", properties:{descriptor:{type:Object, observer:"_descriptorChanged"}, prefix:{type:String, value:""}, _showPrivate:{type:Boolean, value:!1, observer:"_showPrivateChanged"}, _privateToggleLabel:String}, ready:function() {
    var a = this._loadJson();
    if (a && this.descriptor) {
      throw console.error(this, "received both a bound descriptor:", this.descriptor, "and JSON descriptor:", this._jsonDescriptor, "Please provide only one"), Error("<iron-doc-viewer> accepts either a bound or JSON descriptor; not both");
    }
    a && (this.descriptor = a);
  }, _loadJson:function() {
    var a = "";
    Array.prototype.forEach.call(Polymer.dom(this).childNodes, function(b) {
      a += b.textContent;
    });
    a = a.trim();
    if ("" === a) {
      return null;
    }
    try {
      return JSON.parse(a);
    } catch (b) {
      throw console.error("Failure when parsing JSON:", a, b), b;
    }
  }, _descriptorChanged:function() {
    if (this.descriptor) {
      for (var a = [], b = [], c = 0, d; d = this.descriptor.properties[c]; c++) {
        ("Function" === d.type ? b : a).push(d);
      }
      this._properties = a;
      this._methods = b;
      this._events = this.descriptor.events || [];
      this._behaviors = this.descriptor.behaviors || [];
      this.toggleAttribute("abstract", this.descriptor.abstract);
    }
  }, scrollToAnchor:function(a) {
    a && 1 < a.length && (Polymer.dom.flush(), a = window.location.hash.slice(1), (a = this.$$('[anchor-id="' + a + '"]')) && a.scrollIntoView());
  }, _collapsedChanged:function() {
    this._collapseToggleLabel = this._collapsed ? "expand" : "collapse";
    for (var a = this.querySelectorAll("iron-doc-property"), b = 0, c; c = a[b]; b++) {
      c.collapsed = this._collapsed;
    }
  }, _toggleCollapsed:function() {
    this._collapsed = !this._collapsed;
  }, _showPrivateChanged:function() {
    this._privateToggleLabel = (this._showPrivate ? "hide" : "show") + " private API";
    this.toggleClass("show-private", this._showPrivate);
  }, _togglePrivate:function() {
    this._showPrivate = !this._showPrivate;
  }, _noneToShow:function(a, b) {
    for (var c = 0; c < b.length; c++) {
      if (a || !b[c].private) {
        return !1;
      }
    }
    return !0;
  }, _formatAnchor:function(a, b, c) {
    return a + b + (c ? "-" + c : "");
  }, _hideBehaviors:function(a) {
    return null === a || 0 === a.length;
  }, _broadcastBehavior:function(a) {
    this.fire("iron-doc-viewer-component-selected", a.target._templateInstance.item);
  }});
})();
(function() {
  Polymer.IronJsonpLibraryBehavior = {properties:{libraryLoaded:{type:Boolean, value:!1, notify:!0, readOnly:!0}, libraryErrorMessage:{type:String, value:null, notify:!0, readOnly:!0}}, observers:["_libraryUrlChanged(libraryUrl)"], _libraryUrlChanged:function(a) {
    this._isReady && this.libraryUrl && this._loadLibrary();
  }, _libraryLoadCallback:function(a, b) {
    a ? (console.warn("Library load failed:", a.message), this._setLibraryErrorMessage(a.message)) : (this._setLibraryErrorMessage(null), this._setLibraryLoaded(!0), this.notifyEvent && this.fire(this.notifyEvent, b));
  }, _loadLibrary:function() {
    a.require(this.libraryUrl, this._libraryLoadCallback.bind(this), this.callbackName);
  }, ready:function() {
    this._isReady = !0;
    this.libraryUrl && this._loadLibrary();
  }};
  var a = {apiMap:{}, require:function(a, d, f) {
    var c = this.nameFromUrl(a);
    this.apiMap[c] || (this.apiMap[c] = new b(c, a, f));
    this.apiMap[c].requestNotify(d);
  }, nameFromUrl:function(a) {
    return a.replace(/[\:\/\%\?\&\.\=\-\,]/g, "_") + "_api";
  }}, b = function(a, b, f) {
    this.notifiers = [];
    if (!f) {
      if (0 <= b.indexOf(this.callbackMacro)) {
        f = a + "_loaded", b = b.replace(this.callbackMacro, f);
      } else {
        this.error = Error("IronJsonpLibraryBehavior a %%callback%% parameter is required in libraryUrl");
        return;
      }
    }
    this.callbackName = f;
    window[this.callbackName] = this.success.bind(this);
    this.addScript(b);
  };
  b.prototype = {callbackMacro:"%%callback%%", loaded:!1, addScript:function(a) {
    var b = document.createElement("script");
    b.src = a;
    b.onerror = this.handleError.bind(this);
    a = document.querySelector("script") || document.body;
    a.parentNode.insertBefore(b, a);
    this.script = b;
  }, removeScript:function() {
    this.script.parentNode && this.script.parentNode.removeChild(this.script);
    this.script = null;
  }, handleError:function(a) {
    this.error = Error("Library failed to load");
    this.notifyAll();
    this.cleanup();
  }, success:function() {
    this.loaded = !0;
    this.result = Array.prototype.slice.call(arguments);
    this.notifyAll();
    this.cleanup();
  }, cleanup:function() {
    delete window[this.callbackName];
  }, notifyAll:function() {
    this.notifiers.forEach(function(a) {
      a(this.error, this.result);
    }.bind(this));
    this.notifiers = [];
  }, requestNotify:function(a) {
    this.loaded || this.error ? a(this.error, this.result) : this.notifiers.push(a);
  }};
})();
Polymer({is:"iron-jsonp-library", behaviors:[Polymer.IronJsonpLibraryBehavior], properties:{libraryUrl:String, callbackName:String, notifyEvent:String}});
Polymer({is:"iron-localstorage", properties:{name:{type:String, value:""}, value:{type:Object, notify:!0}, useRaw:{type:Boolean, value:!1}, autoSaveDisabled:{type:Boolean, value:!1}, errorMessage:{type:String, notify:!0}, _loaded:{type:Boolean, value:!1}}, observers:["_debounceReload(name,useRaw)", "_trySaveValue(autoSaveDisabled)", "_trySaveValue(value.*)"], ready:function() {
  this._boundHandleStorage = this._handleStorage.bind(this);
}, attached:function() {
  window.addEventListener("storage", this._boundHandleStorage);
}, detached:function() {
  window.removeEventListener("storage", this._boundHandleStorage);
}, _handleStorage:function(a) {
  a.key == this.name && this._load(!0);
}, _trySaveValue:function() {
  this._doNotSave || this._loaded && !this.autoSaveDisabled && this.debounce("save", this.save);
}, _debounceReload:function() {
  this.debounce("reload", this.reload);
}, reload:function() {
  this._loaded = !1;
  this._load();
}, _load:function(a) {
  var b = window.localStorage.getItem(this.name);
  if (null === b) {
    this._doNotSave = this._loaded = !0, this.value = null, this._doNotSave = !1, this.fire("iron-localstorage-load-empty", {externalChange:a});
  } else {
    if (!this.useRaw) {
      try {
        b = JSON.parse(b);
      } catch (c) {
        this.errorMessage = "Could not parse local storage value", console.error("could not parse local storage value", b), b = null;
      }
    }
    this._doNotSave = this._loaded = !0;
    this.value = b;
    this._doNotSave = !1;
    this.fire("iron-localstorage-load", {externalChange:a});
  }
}, save:function() {
  var a = this.useRaw ? this.value : JSON.stringify(this.value);
  try {
    null === this.value || void 0 === this.value ? window.localStorage.removeItem(this.name) : window.localStorage.setItem(this.name, a);
  } catch (b) {
    this.errorMessage = b.message, console.error("localStorage could not be saved. Safari incoginito mode?", b);
  }
}});
Polymer({is:"iron-media-query", properties:{queryMatches:{type:Boolean, value:!1, readOnly:!0, notify:!0}, query:{type:String, observer:"queryChanged"}, full:{type:Boolean, value:!1}, _boundMQHandler:{value:function() {
  return this.queryHandler.bind(this);
}}, _mq:{value:null}}, attached:function() {
  this.style.display = "none";
  this.queryChanged();
}, detached:function() {
  this._remove();
}, _add:function() {
  this._mq && this._mq.addListener(this._boundMQHandler);
}, _remove:function() {
  this._mq && this._mq.removeListener(this._boundMQHandler);
  this._mq = null;
}, queryChanged:function() {
  this._remove();
  var a = this.query;
  a && (this.full || "(" === a[0] || (a = "(" + a + ")"), this._mq = window.matchMedia(a), this._add(), this.queryHandler(this._mq));
}, queryHandler:function(a) {
  this._setQueryMatches(a.matches);
}});
(function() {
  Polymer({is:"iron-overlay-backdrop", properties:{opened:{reflectToAttribute:!0, type:Boolean, value:!1, observer:"_openedChanged"}}, listeners:{transitionend:"_onTransitionend"}, created:function() {
    this.__openedRaf = null;
  }, attached:function() {
    this.opened && this._openedChanged(this.opened);
  }, prepare:function() {
    this.opened && !this.parentNode && Polymer.dom(document.body).appendChild(this);
  }, open:function() {
    this.opened = !0;
  }, close:function() {
    this.opened = !1;
  }, complete:function() {
    this.opened || this.parentNode !== document.body || Polymer.dom(this.parentNode).removeChild(this);
  }, _onTransitionend:function(a) {
    a && a.target === this && this.complete();
  }, _openedChanged:function(a) {
    a ? this.prepare() : (a = window.getComputedStyle(this), "0s" !== a.transitionDuration && 0 != a.opacity || this.complete());
    this.isAttached && (this.__openedRaf && (window.cancelAnimationFrame(this.__openedRaf), this.__openedRaf = null), this.scrollTop = this.scrollTop, this.__openedRaf = window.requestAnimationFrame(function() {
      this.__openedRaf = null;
      this.toggleClass("opened", this.opened);
    }.bind(this)));
  }});
})();
Polymer.IronFitBehavior = {properties:{sizingTarget:{type:Object, value:function() {
  return this;
}}, fitInto:{type:Object, value:window}, noOverlap:{type:Boolean}, positionTarget:{type:Element}, horizontalAlign:{type:String}, verticalAlign:{type:String}, dynamicAlign:{type:Boolean}, horizontalOffset:{type:Number, value:0, notify:!0}, verticalOffset:{type:Number, value:0, notify:!0}, autoFitOnAttach:{type:Boolean, value:!1}, _fitInfo:{type:Object}}, get _fitWidth() {
  return this.fitInto === window ? this.fitInto.innerWidth : this.fitInto.getBoundingClientRect().width;
}, get _fitHeight() {
  return this.fitInto === window ? this.fitInto.innerHeight : this.fitInto.getBoundingClientRect().height;
}, get _fitLeft() {
  return this.fitInto === window ? 0 : this.fitInto.getBoundingClientRect().left;
}, get _fitTop() {
  return this.fitInto === window ? 0 : this.fitInto.getBoundingClientRect().top;
}, get _defaultPositionTarget() {
  var a = Polymer.dom(this).parentNode;
  a && a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && (a = a.host);
  return a;
}, get _localeHorizontalAlign() {
  if (this._isRTL) {
    if ("right" === this.horizontalAlign) {
      return "left";
    }
    if ("left" === this.horizontalAlign) {
      return "right";
    }
  }
  return this.horizontalAlign;
}, attached:function() {
  this._isRTL = "rtl" == window.getComputedStyle(this).direction;
  this.positionTarget = this.positionTarget || this._defaultPositionTarget;
  this.autoFitOnAttach && ("none" === window.getComputedStyle(this).display ? setTimeout(function() {
    this.fit();
  }.bind(this)) : this.fit());
}, fit:function() {
  this._discoverInfo();
  this.position();
  this.constrain();
  this.center();
}, _discoverInfo:function() {
  if (!this._fitInfo) {
    var a = window.getComputedStyle(this), b = window.getComputedStyle(this.sizingTarget);
    this._fitInfo = {inlineStyle:{top:this.style.top || "", left:this.style.left || "", position:this.style.position || ""}, sizerInlineStyle:{maxWidth:this.sizingTarget.style.maxWidth || "", maxHeight:this.sizingTarget.style.maxHeight || "", boxSizing:this.sizingTarget.style.boxSizing || ""}, positionedBy:{vertically:"auto" !== a.top ? "top" : "auto" !== a.bottom ? "bottom" : null, horizontally:"auto" !== a.left ? "left" : "auto" !== a.right ? "right" : null}, sizedBy:{height:"none" !== b.maxHeight, 
    width:"none" !== b.maxWidth, minWidth:parseInt(b.minWidth, 10) || 0, minHeight:parseInt(b.minHeight, 10) || 0}, margin:{top:parseInt(a.marginTop, 10) || 0, right:parseInt(a.marginRight, 10) || 0, bottom:parseInt(a.marginBottom, 10) || 0, left:parseInt(a.marginLeft, 10) || 0}};
    this.verticalOffset && (this._fitInfo.margin.top = this._fitInfo.margin.bottom = this.verticalOffset, this._fitInfo.inlineStyle.marginTop = this.style.marginTop || "", this._fitInfo.inlineStyle.marginBottom = this.style.marginBottom || "", this.style.marginTop = this.style.marginBottom = this.verticalOffset + "px");
    this.horizontalOffset && (this._fitInfo.margin.left = this._fitInfo.margin.right = this.horizontalOffset, this._fitInfo.inlineStyle.marginLeft = this.style.marginLeft || "", this._fitInfo.inlineStyle.marginRight = this.style.marginRight || "", this.style.marginLeft = this.style.marginRight = this.horizontalOffset + "px");
  }
}, resetFit:function() {
  var a = this._fitInfo || {}, b;
  for (b in a.sizerInlineStyle) {
    this.sizingTarget.style[b] = a.sizerInlineStyle[b];
  }
  for (b in a.inlineStyle) {
    this.style[b] = a.inlineStyle[b];
  }
  this._fitInfo = null;
}, refit:function() {
  var a = this.sizingTarget.scrollLeft, b = this.sizingTarget.scrollTop;
  this.resetFit();
  this.fit();
  this.sizingTarget.scrollLeft = a;
  this.sizingTarget.scrollTop = b;
}, position:function() {
  if (this.horizontalAlign || this.verticalAlign) {
    this.style.position = "fixed";
    this.sizingTarget.style.boxSizing = "border-box";
    this.style.left = "0px";
    this.style.top = "0px";
    var a = this.getBoundingClientRect(), b = this.__getNormalizedRect(this.positionTarget), c = this.__getNormalizedRect(this.fitInto), d = this._fitInfo.margin, f = this.__getPosition(this._localeHorizontalAlign, this.verticalAlign, {width:a.width + d.left + d.right, height:a.height + d.top + d.bottom}, b, c), b = f.left + d.left, f = f.top + d.top, g = Math.min(c.right - d.right, b + a.width), c = Math.min(c.bottom - d.bottom, f + a.height), h = this._fitInfo.sizedBy.minWidth, m = this._fitInfo.sizedBy.minHeight;
    b < d.left && (b = d.left, g - b < h && (b = g - h));
    f < d.top && (f = d.top, c - f < m && (f = c - m));
    this.sizingTarget.style.maxWidth = g - b + "px";
    this.sizingTarget.style.maxHeight = c - f + "px";
    this.style.left = b - a.left + "px";
    this.style.top = f - a.top + "px";
  }
}, constrain:function() {
  if (!this.horizontalAlign && !this.verticalAlign) {
    var a = this._fitInfo;
    a.positionedBy.vertically || (this.style.position = "fixed", this.style.top = "0px");
    a.positionedBy.horizontally || (this.style.position = "fixed", this.style.left = "0px");
    this.sizingTarget.style.boxSizing = "border-box";
    var b = this.getBoundingClientRect();
    a.sizedBy.height || this.__sizeDimension(b, a.positionedBy.vertically, "top", "bottom", "Height");
    a.sizedBy.width || this.__sizeDimension(b, a.positionedBy.horizontally, "left", "right", "Width");
  }
}, _sizeDimension:function(a, b, c, d, f) {
  this.__sizeDimension(a, b, c, d, f);
}, __sizeDimension:function(a, b, c, d, f) {
  var g = this._fitInfo, h = this.__getNormalizedRect(this.fitInto), h = "Width" === f ? h.width : h.height;
  b = b === d;
  var m = "offset" + f;
  this.sizingTarget.style["max" + f] = h - g.margin[b ? c : d] - (b ? h - a[d] : a[c]) - (this[m] - this.sizingTarget[m]) + "px";
}, center:function() {
  if (!this.horizontalAlign && !this.verticalAlign) {
    var a = this._fitInfo.positionedBy;
    if (!a.vertically || !a.horizontally) {
      this.style.position = "fixed";
      a.vertically || (this.style.top = "0px");
      a.horizontally || (this.style.left = "0px");
      var b = this.getBoundingClientRect(), c = this.__getNormalizedRect(this.fitInto);
      a.vertically || (this.style.top = c.top - b.top + (c.height - b.height) / 2 + "px");
      a.horizontally || (this.style.left = c.left - b.left + (c.width - b.width) / 2 + "px");
    }
  }
}, __getNormalizedRect:function(a) {
  return a === document.documentElement || a === window ? {top:0, left:0, width:window.innerWidth, height:window.innerHeight, right:window.innerWidth, bottom:window.innerHeight} : a.getBoundingClientRect();
}, __getCroppedArea:function(a, b, c) {
  return Math.abs(Math.min(0, a.top) + Math.min(0, c.bottom - (a.top + b.height))) * b.width + Math.abs(Math.min(0, a.left) + Math.min(0, c.right - (a.left + b.width))) * b.height;
}, __getPosition:function(a, b, c, d, f) {
  var g = [{verticalAlign:"top", horizontalAlign:"left", top:d.top, left:d.left}, {verticalAlign:"top", horizontalAlign:"right", top:d.top, left:d.right - c.width}, {verticalAlign:"bottom", horizontalAlign:"left", top:d.bottom - c.height, left:d.left}, {verticalAlign:"bottom", horizontalAlign:"right", top:d.bottom - c.height, left:d.right - c.width}];
  if (this.noOverlap) {
    for (var h = 0, m = g.length; h < m; h++) {
      var u = {}, r;
      for (r in g[h]) {
        u[r] = g[h][r];
      }
      g.push(u);
    }
    g[0].top = g[1].top += d.height;
    g[2].top = g[3].top -= d.height;
    g[4].left = g[6].left += d.width;
    g[5].left = g[7].left -= d.width;
  }
  b = "auto" === b ? null : b;
  a = "auto" === a ? null : a;
  for (var n, h = 0; h < g.length; h++) {
    d = g[h];
    if (!this.dynamicAlign && !this.noOverlap && d.verticalAlign === b && d.horizontalAlign === a) {
      n = d;
      break;
    }
    m = (!b || d.verticalAlign === b) && (!a || d.horizontalAlign === a);
    if (this.dynamicAlign || m) {
      n = n || d;
      d.croppedArea = this.__getCroppedArea(d, c, f);
      u = d.croppedArea - n.croppedArea;
      if (0 > u || 0 === u && m) {
        n = d;
      }
      if (0 === n.croppedArea && m) {
        break;
      }
    }
  }
  return n;
}};
Polymer.IronOverlayManagerClass = function() {
  this._overlays = [];
  this._minimumZ = 101;
  this._backdropElement = null;
  Polymer.Gestures.add(document, "tap", null);
  document.addEventListener("tap", this._onCaptureClick.bind(this), !0);
  document.addEventListener("focus", this._onCaptureFocus.bind(this), !0);
  document.addEventListener("keydown", this._onCaptureKeyDown.bind(this), !0);
};
Polymer.IronOverlayManagerClass.prototype = {constructor:Polymer.IronOverlayManagerClass, get backdropElement() {
  this._backdropElement || (this._backdropElement = document.createElement("iron-overlay-backdrop"));
  return this._backdropElement;
}, get deepActiveElement() {
  for (var a = document.activeElement || document.body; a.root && Polymer.dom(a.root).activeElement;) {
    a = Polymer.dom(a.root).activeElement;
  }
  return a;
}, _bringOverlayAtIndexToFront:function(a) {
  var b = this._overlays[a];
  if (b) {
    var c = this._overlays.length - 1, d = this._overlays[c];
    d && this._shouldBeBehindOverlay(b, d) && c--;
    if (!(a >= c)) {
      d = Math.max(this.currentOverlayZ(), this._minimumZ);
      for (this._getZ(b) <= d && this._applyOverlayZ(b, d); a < c;) {
        this._overlays[a] = this._overlays[a + 1], a++;
      }
      this._overlays[c] = b;
    }
  }
}, addOrRemoveOverlay:function(a) {
  a.opened ? this.addOverlay(a) : this.removeOverlay(a);
}, addOverlay:function(a) {
  var b = this._overlays.indexOf(a);
  if (0 <= b) {
    this._bringOverlayAtIndexToFront(b);
  } else {
    var b = this._overlays.length, c = this._overlays[b - 1], d = Math.max(this._getZ(c), this._minimumZ), f = this._getZ(a);
    c && this._shouldBeBehindOverlay(a, c) && (this._applyOverlayZ(c, d), b--, d = Math.max(this._getZ(this._overlays[b - 1]), this._minimumZ));
    f <= d && this._applyOverlayZ(a, d);
    this._overlays.splice(b, 0, a);
    b = this.deepActiveElement;
    a.restoreFocusNode = this._overlayParent(b) ? null : b;
  }
  this.trackBackdrop();
}, removeOverlay:function(a) {
  var b = this._overlays.indexOf(a);
  -1 !== b && (this._overlays.splice(b, 1), b = a.restoreFocusOnClose ? a.restoreFocusNode : null, a.restoreFocusNode = null, b && Polymer.dom(document.body).deepContains(b) && b.focus(), this.trackBackdrop());
}, currentOverlay:function() {
  return this._overlays[this._overlays.length - 1];
}, currentOverlayZ:function() {
  return this._getZ(this.currentOverlay());
}, ensureMinimumZ:function(a) {
  this._minimumZ = Math.max(this._minimumZ, a);
}, focusOverlay:function() {
  var a = this.currentOverlay();
  a && !a.transitioning && a._applyFocus();
}, trackBackdrop:function() {
  var a = this._overlayWithBackdrop();
  if (a || this._backdropElement) {
    this.backdropElement.style.zIndex = this._getZ(a) - 1, this.backdropElement.opened = !!a;
  }
}, getBackdrops:function() {
  for (var a = [], b = 0; b < this._overlays.length; b++) {
    this._overlays[b].withBackdrop && a.push(this._overlays[b]);
  }
  return a;
}, backdropZ:function() {
  return this._getZ(this._overlayWithBackdrop()) - 1;
}, _overlayWithBackdrop:function() {
  for (var a = 0; a < this._overlays.length; a++) {
    if (this._overlays[a].withBackdrop) {
      return this._overlays[a];
    }
  }
}, _getZ:function(a) {
  var b = this._minimumZ;
  a && (a = Number(a.style.zIndex || window.getComputedStyle(a).zIndex), a === a && (b = a));
  return b;
}, _setZ:function(a, b) {
  a.style.zIndex = b;
}, _applyOverlayZ:function(a, b) {
  this._setZ(a, b + 2);
}, _overlayParent:function(a) {
  for (; a && a !== document.body;) {
    if (a._manager === this) {
      return a;
    }
    a = Polymer.dom(a).parentNode || a.host;
  }
}, _overlayInPath:function(a) {
  a = a || [];
  for (var b = 0; b < a.length; b++) {
    if (a[b]._manager === this) {
      return a[b];
    }
  }
}, _onCaptureClick:function(a) {
  var b = this.currentOverlay();
  b && this._overlayInPath(Polymer.dom(a).path) !== b && b._onCaptureClick(a);
}, _onCaptureFocus:function(a) {
  var b = this.currentOverlay();
  b && b._onCaptureFocus(a);
}, _onCaptureKeyDown:function(a) {
  var b = this.currentOverlay();
  b && (Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "esc") ? b._onCaptureEsc(a) : Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "tab") && b._onCaptureTab(a));
}, _shouldBeBehindOverlay:function(a, b) {
  return !a.alwaysOnTop && b.alwaysOnTop;
}};
Polymer.IronOverlayManager = new Polymer.IronOverlayManagerClass;
(function() {
  Polymer.IronOverlayBehaviorImpl = {properties:{opened:{observer:"_openedChanged", type:Boolean, value:!1, notify:!0}, canceled:{observer:"_canceledChanged", readOnly:!0, type:Boolean, value:!1}, withBackdrop:{observer:"_withBackdropChanged", type:Boolean}, noAutoFocus:{type:Boolean, value:!1}, noCancelOnEscKey:{type:Boolean, value:!1}, noCancelOnOutsideClick:{type:Boolean, value:!1}, closingReason:{type:Object}, restoreFocusOnClose:{type:Boolean, value:!1}, alwaysOnTop:{type:Boolean}, _manager:{type:Object, 
  value:function() {
    return Polymer.IronOverlayManager;
  }}, _focusedChild:{type:Object}}, listeners:{"iron-resize":"_onIronResize"}, get backdropElement() {
    return this._manager.backdropElement;
  }, get _focusNode() {
    return this._focusedChild || Polymer.dom(this).querySelector("[autofocus]") || this;
  }, get _focusableNodes() {
    var a = ["a[href]", "area[href]", "iframe", "[tabindex]", "[contentEditable=true]"].join(':not([tabindex="-1"]),') + ':not([tabindex="-1"]),' + ["input", "select", "textarea", "button"].join(':not([disabled]):not([tabindex="-1"]),') + ':not([disabled]):not([tabindex="-1"])', a = Polymer.dom(this).querySelectorAll(a);
    0 <= this.tabIndex && a.splice(0, 0, this);
    return a.sort(function(a, c) {
      return a.tabIndex === c.tabIndex ? 0 : 0 === a.tabIndex || a.tabIndex > c.tabIndex ? 1 : -1;
    });
  }, ready:function() {
    this.__shouldRemoveTabIndex = this.__isAnimating = !1;
    this.__onIronResizeAsync = this.__openChangedAsync = this.__firstFocusableNode = this.__lastFocusableNode = null;
    this._ensureSetup();
  }, attached:function() {
    this.opened && this._openedChanged();
    this._observer = Polymer.dom(this).observeNodes(this._onNodesChange);
  }, detached:function() {
    Polymer.dom(this).unobserveNodes(this._observer);
    this._observer = null;
    this.opened = !1;
  }, toggle:function() {
    this._setCanceled(!1);
    this.opened = !this.opened;
  }, open:function() {
    this._setCanceled(!1);
    this.opened = !0;
  }, close:function() {
    this._setCanceled(!1);
    this.opened = !1;
  }, cancel:function(a) {
    this.fire("iron-overlay-canceled", a, {cancelable:!0}).defaultPrevented || (this._setCanceled(!0), this.opened = !1);
  }, _ensureSetup:function() {
    this._overlaySetup || (this._overlaySetup = !0, this.style.outline = "none", this.style.display = "none");
  }, _openedChanged:function() {
    this.opened ? this.removeAttribute("aria-hidden") : this.setAttribute("aria-hidden", "true");
    this._overlaySetup && (this.__openChangedAsync && window.cancelAnimationFrame(this.__openChangedAsync), this.opened || this._manager.removeOverlay(this), this.isAttached && (this.__isAnimating = !0, this.__openChangedAsync = window.requestAnimationFrame(function() {
      this.__openChangedAsync = null;
      this.opened ? (this._manager.addOverlay(this), this._prepareRenderOpened(), this._renderOpened()) : this._renderClosed();
    }.bind(this))));
  }, _canceledChanged:function() {
    this.closingReason = this.closingReason || {};
    this.closingReason.canceled = this.canceled;
  }, _withBackdropChanged:function() {
    this.withBackdrop && !this.hasAttribute("tabindex") ? (this.setAttribute("tabindex", "-1"), this.__shouldRemoveTabIndex = !0) : this.__shouldRemoveTabIndex && (this.removeAttribute("tabindex"), this.__shouldRemoveTabIndex = !1);
    this.opened && this.isAttached && this._manager.trackBackdrop();
  }, _prepareRenderOpened:function() {
    this._preparePositioning();
    this.refit();
    this._finishPositioning();
    this.noAutoFocus && document.activeElement === this._focusNode && this._focusNode.blur();
  }, _renderOpened:function() {
    this._finishRenderOpened();
  }, _renderClosed:function() {
    this._finishRenderClosed();
  }, _finishRenderOpened:function() {
    this._applyFocus();
    this.notifyResize();
    this.__isAnimating = !1;
    var a = this._focusableNodes;
    this.__firstFocusableNode = a[0];
    this.__lastFocusableNode = a[a.length - 1];
    this.fire("iron-overlay-opened");
  }, _finishRenderClosed:function() {
    this.style.display = "none";
    this.style.zIndex = "";
    this._applyFocus();
    this.notifyResize();
    this.__isAnimating = !1;
    this.fire("iron-overlay-closed", this.closingReason);
  }, _preparePositioning:function() {
    this.style.transition = this.style.webkitTransition = "none";
    this.style.transform = this.style.webkitTransform = "none";
    this.style.display = "";
  }, _finishPositioning:function() {
    this.style.display = "none";
    this.scrollTop = this.scrollTop;
    this.style.transition = this.style.webkitTransition = "";
    this.style.transform = this.style.webkitTransform = "";
    this.style.display = "";
    this.scrollTop = this.scrollTop;
  }, _applyFocus:function() {
    this.opened ? this.noAutoFocus || this._focusNode.focus() : (this._focusNode.blur(), this._focusedChild = null, this._manager.focusOverlay());
  }, _onCaptureClick:function(a) {
    this.noCancelOnOutsideClick || this.cancel(a);
  }, _onCaptureFocus:function(a) {
    if (this.withBackdrop) {
      var b = Polymer.dom(a).path;
      -1 === b.indexOf(this) ? (a.stopPropagation(), this._applyFocus()) : this._focusedChild = b[0];
    }
  }, _onCaptureEsc:function(a) {
    this.noCancelOnEscKey || this.cancel(a);
  }, _onCaptureTab:function(a) {
    if (this.withBackdrop) {
      var b = a.shiftKey, c = b ? this.__firstFocusableNode : this.__lastFocusableNode, b = b ? this.__lastFocusableNode : this.__firstFocusableNode;
      if (c === b) {
        c = !0;
      } else {
        var d = this._manager.deepActiveElement, c = d === c || d === this;
      }
      c && (a.preventDefault(), this._focusedChild = b, this._applyFocus());
    }
  }, _onIronResize:function() {
    this.__onIronResizeAsync && (window.cancelAnimationFrame(this.__onIronResizeAsync), this.__onIronResizeAsync = null);
    this.opened && !this.__isAnimating && (this.__onIronResizeAsync = window.requestAnimationFrame(function() {
      this.__onIronResizeAsync = null;
      this.refit();
    }.bind(this)));
  }, _onNodesChange:function() {
    this.opened && !this.__isAnimating && this.notifyResize();
  }};
  Polymer.IronOverlayBehavior = [Polymer.IronFitBehavior, Polymer.IronResizableBehavior, Polymer.IronOverlayBehaviorImpl];
})();
Polymer.IronSelection = function(a) {
  this.selection = [];
  this.selectCallback = a;
};
Polymer.IronSelection.prototype = {get:function() {
  return this.multi ? this.selection.slice() : this.selection[0];
}, clear:function(a) {
  this.selection.slice().forEach(function(b) {
    (!a || 0 > a.indexOf(b)) && this.setItemSelected(b, !1);
  }, this);
}, isSelected:function(a) {
  return 0 <= this.selection.indexOf(a);
}, setItemSelected:function(a, b) {
  if (null != a && b !== this.isSelected(a)) {
    if (b) {
      this.selection.push(a);
    } else {
      var c = this.selection.indexOf(a);
      0 <= c && this.selection.splice(c, 1);
    }
    this.selectCallback && this.selectCallback(a, b);
  }
}, select:function(a) {
  this.multi ? this.toggle(a) : this.get() !== a && (this.setItemSelected(this.get(), !1), this.setItemSelected(a, !0));
}, toggle:function(a) {
  this.setItemSelected(a, !this.isSelected(a));
}};
Polymer.IronSelectableBehavior = {properties:{attrForSelected:{type:String, value:null}, selected:{type:String, notify:!0}, selectedItem:{type:Object, readOnly:!0, notify:!0}, activateEvent:{type:String, value:"tap", observer:"_activateEventChanged"}, selectable:String, selectedClass:{type:String, value:"iron-selected"}, selectedAttribute:{type:String, value:null}, fallbackSelection:{type:String, value:null}, items:{type:Array, readOnly:!0, notify:!0, value:function() {
  return [];
}}, _excludedLocalNames:{type:Object, value:function() {
  return {template:1};
}}}, observers:["_updateAttrForSelected(attrForSelected)", "_updateSelected(selected)", "_checkFallback(fallbackSelection)"], created:function() {
  this._bindFilterItem = this._filterItem.bind(this);
  this._selection = new Polymer.IronSelection(this._applySelection.bind(this));
}, attached:function() {
  this._observer = this._observeItems(this);
  this._updateItems();
  this._shouldUpdateSelection || this._updateSelected();
  this._addListener(this.activateEvent);
}, detached:function() {
  this._observer && Polymer.dom(this).unobserveNodes(this._observer);
  this._removeListener(this.activateEvent);
}, indexOf:function(a) {
  return this.items.indexOf(a);
}, select:function(a) {
  this.selected = a;
}, selectPrevious:function() {
  var a = this.items.length, a = (Number(this._valueToIndex(this.selected)) - 1 + a) % a;
  this.selected = this._indexToValue(a);
}, selectNext:function() {
  var a = (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;
  this.selected = this._indexToValue(a);
}, selectIndex:function(a) {
  this.select(this._indexToValue(a));
}, forceSynchronousItemUpdate:function() {
  this._updateItems();
}, get _shouldUpdateSelection() {
  return null != this.selected;
}, _checkFallback:function() {
  this._shouldUpdateSelection && this._updateSelected();
}, _addListener:function(a) {
  this.listen(this, a, "_activateHandler");
}, _removeListener:function(a) {
  this.unlisten(this, a, "_activateHandler");
}, _activateEventChanged:function(a, b) {
  this._removeListener(b);
  this._addListener(a);
}, _updateItems:function() {
  var a = Polymer.dom(this).queryDistributedElements(this.selectable || "*"), a = Array.prototype.filter.call(a, this._bindFilterItem);
  this._setItems(a);
}, _updateAttrForSelected:function() {
  this._shouldUpdateSelection && (this.selected = this._indexToValue(this.indexOf(this.selectedItem)));
}, _updateSelected:function() {
  this._selectSelected(this.selected);
}, _selectSelected:function(a) {
  this._selection.select(this._valueToItem(this.selected));
  this.fallbackSelection && this.items.length && void 0 === this._selection.get() && (this.selected = this.fallbackSelection);
}, _filterItem:function(a) {
  return !this._excludedLocalNames[a.localName];
}, _valueToItem:function(a) {
  return null == a ? null : this.items[this._valueToIndex(a)];
}, _valueToIndex:function(a) {
  if (this.attrForSelected) {
    for (var b = 0, c; c = this.items[b]; b++) {
      if (this._valueForItem(c) == a) {
        return b;
      }
    }
  } else {
    return Number(a);
  }
}, _indexToValue:function(a) {
  if (this.attrForSelected) {
    if (a = this.items[a]) {
      return this._valueForItem(a);
    }
  } else {
    return a;
  }
}, _valueForItem:function(a) {
  var b = a[Polymer.CaseMap.dashToCamelCase(this.attrForSelected)];
  return void 0 != b ? b : a.getAttribute(this.attrForSelected);
}, _applySelection:function(a, b) {
  this.selectedClass && this.toggleClass(this.selectedClass, b, a);
  this.selectedAttribute && this.toggleAttribute(this.selectedAttribute, b, a);
  this._selectionChange();
  this.fire("iron-" + (b ? "select" : "deselect"), {item:a});
}, _selectionChange:function() {
  this._setSelectedItem(this._selection.get());
}, _observeItems:function(a) {
  return Polymer.dom(a).observeNodes(function(a) {
    this._updateItems();
    this._shouldUpdateSelection && this._updateSelected();
    this.fire("iron-items-changed", a, {bubbles:!1, cancelable:!1});
  });
}, _activateHandler:function(a) {
  a = a.target;
  for (var b = this.items; a && a != this;) {
    var c = b.indexOf(a);
    if (0 <= c) {
      b = this._indexToValue(c);
      this._itemActivate(b, a);
      break;
    }
    a = a.parentNode;
  }
}, _itemActivate:function(a, b) {
  this.fire("iron-activate", {selected:a, item:b}, {cancelable:!0}).defaultPrevented || this.select(a);
}};
Polymer({is:"iron-pages", behaviors:[Polymer.IronResizableBehavior, Polymer.IronSelectableBehavior], properties:{activateEvent:{type:String, value:null}}, observers:["_selectedPageChanged(selected)"], _selectedPageChanged:function(a, b) {
  this.async(this.notifyResize);
}});
Polymer.IronMultiSelectableBehaviorImpl = {properties:{multi:{type:Boolean, value:!1, observer:"multiChanged"}, selectedValues:{type:Array, notify:!0}, selectedItems:{type:Array, readOnly:!0, notify:!0}}, observers:["_updateSelected(selectedValues.splices)"], select:function(a) {
  this.multi ? this.selectedValues ? this._toggleSelected(a) : this.selectedValues = [a] : this.selected = a;
}, multiChanged:function(a) {
  this._selection.multi = a;
}, get _shouldUpdateSelection() {
  return null != this.selected || null != this.selectedValues && this.selectedValues.length;
}, _updateAttrForSelected:function() {
  this.multi ? this._shouldUpdateSelection && (this.selectedValues = this.selectedItems.map(function(a) {
    return this._indexToValue(this.indexOf(a));
  }, this).filter(function(a) {
    return null != a;
  }, this)) : Polymer.IronSelectableBehavior._updateAttrForSelected.apply(this);
}, _updateSelected:function() {
  this.multi ? this._selectMulti(this.selectedValues) : this._selectSelected(this.selected);
}, _selectMulti:function(a) {
  if (a) {
    a = this._valuesToItems(a);
    this._selection.clear(a);
    for (var b = 0; b < a.length; b++) {
      this._selection.setItemSelected(a[b], !0);
    }
    this.fallbackSelection && this.items.length && !this._selection.get().length && this._valueToItem(this.fallbackSelection) && (this.selectedValues = [this.fallbackSelection]);
  } else {
    this._selection.clear();
  }
}, _selectionChange:function() {
  var a = this._selection.get();
  this.multi ? this._setSelectedItems(a) : (this._setSelectedItems([a]), this._setSelectedItem(a));
}, _toggleSelected:function(a) {
  var b = this.selectedValues.indexOf(a);
  0 > b ? this.push("selectedValues", a) : this.splice("selectedValues", b, 1);
}, _valuesToItems:function(a) {
  return null == a ? null : a.map(function(a) {
    return this._valueToItem(a);
  }, this);
}};
Polymer.IronMultiSelectableBehavior = [Polymer.IronSelectableBehavior, Polymer.IronMultiSelectableBehaviorImpl];
Polymer({is:"iron-selector", behaviors:[Polymer.IronMultiSelectableBehavior]});
(function() {
  function a(a, d) {
    var c = new CustomEvent("iron-signal-" + a, {bubbles:!1, detail:d});
    b.forEach(function(a) {
      a.dispatchEvent(c);
    });
  }
  Polymer({is:"iron-signals", attached:function() {
    b.push(this);
  }, detached:function() {
    var a = b.indexOf(this);
    0 <= a && b.splice(a, 1);
  }});
  var b = [];
  document.addEventListener("iron-signal", function(b) {
    a(b.detail.name, b.detail.data);
  });
})();
(function() {
  Polymer.IronA11yAnnouncer = Polymer({is:"iron-a11y-announcer", properties:{mode:{type:String, value:"polite"}, _text:{type:String, value:""}}, created:function() {
    Polymer.IronA11yAnnouncer.instance || (Polymer.IronA11yAnnouncer.instance = this);
    document.body.addEventListener("iron-announce", this._onIronAnnounce.bind(this));
  }, announce:function(a) {
    this._text = "";
    this.async(function() {
      this._text = a;
    }, 100);
  }, _onIronAnnounce:function(a) {
    a.detail && a.detail.text && this.announce(a.detail.text);
  }});
  Polymer.IronA11yAnnouncer.instance = null;
  Polymer.IronA11yAnnouncer.requestAvailability = function() {
    Polymer.IronA11yAnnouncer.instance || (Polymer.IronA11yAnnouncer.instance = document.createElement("iron-a11y-announcer"));
    document.body.appendChild(Polymer.IronA11yAnnouncer.instance);
  };
})();
Polymer({is:"iron-input", extends:"input", behaviors:[Polymer.IronValidatableBehavior], properties:{bindValue:{observer:"_bindValueChanged", type:String}, preventInvalidInput:{type:Boolean}, allowedPattern:{type:String, observer:"_allowedPatternChanged"}, _previousValidInput:{type:String, value:""}, _patternAlreadyChecked:{type:Boolean, value:!1}}, listeners:{input:"_onInput", keypress:"_onKeypress"}, registered:function() {
  this._canDispatchEventOnDisabled() || (this._origDispatchEvent = this.dispatchEvent, this.dispatchEvent = this._dispatchEventFirefoxIE);
}, created:function() {
  Polymer.IronA11yAnnouncer.requestAvailability();
}, _canDispatchEventOnDisabled:function() {
  var a = document.createElement("input"), b = !1;
  a.disabled = !0;
  a.addEventListener("feature-check-dispatch-event", function() {
    b = !0;
  });
  try {
    a.dispatchEvent(new Event("feature-check-dispatch-event"));
  } catch (c) {
  }
  return b;
}, _dispatchEventFirefoxIE:function() {
  var a = this.disabled;
  this.disabled = !1;
  this._origDispatchEvent.apply(this, arguments);
  this.disabled = a;
}, get _patternRegExp() {
  if (this.allowedPattern) {
    var a = new RegExp(this.allowedPattern);
  } else {
    switch(this.type) {
      case "number":
        a = /[0-9.,e-]/;
    }
  }
  return a;
}, ready:function() {
  this.bindValue = this.value;
}, _bindValueChanged:function() {
  this.value !== this.bindValue && (this.value = this.bindValue || 0 === this.bindValue || !1 === this.bindValue ? this.bindValue : "");
  this.fire("bind-value-changed", {value:this.bindValue});
}, _allowedPatternChanged:function() {
  this.preventInvalidInput = this.allowedPattern ? !0 : !1;
}, _onInput:function() {
  !this.preventInvalidInput || this._patternAlreadyChecked || this._checkPatternValidity() || (this._announceInvalidCharacter("Invalid string of characters not entered."), this.value = this._previousValidInput);
  this._previousValidInput = this.bindValue = this.value;
  this._patternAlreadyChecked = !1;
}, _isPrintable:function(a) {
  var b = 19 == a.keyCode || 20 == a.keyCode || 45 == a.keyCode || 46 == a.keyCode || 144 == a.keyCode || 145 == a.keyCode || 32 < a.keyCode && 41 > a.keyCode || 111 < a.keyCode && 124 > a.keyCode;
  return !(8 == a.keyCode || 9 == a.keyCode || 13 == a.keyCode || 27 == a.keyCode) && !(0 == a.charCode && b);
}, _onKeypress:function(a) {
  if (this.preventInvalidInput || "number" === this.type) {
    var b = this._patternRegExp;
    if (b && !(a.metaKey || a.ctrlKey || a.altKey)) {
      this._patternAlreadyChecked = !0;
      var c = String.fromCharCode(a.charCode);
      this._isPrintable(a) && !b.test(c) && (a.preventDefault(), this._announceInvalidCharacter("Invalid character " + c + " not entered."));
    }
  }
}, _checkPatternValidity:function() {
  var a = this._patternRegExp;
  if (!a) {
    return !0;
  }
  for (var b = 0; b < this.value.length; b++) {
    if (!a.test(this.value[b])) {
      return !1;
    }
  }
  return !0;
}, validate:function() {
  var a = this.checkValidity();
  a && (this.required && "" === this.value ? a = !1 : this.hasValidator() && (a = Polymer.IronValidatableBehavior.validate.call(this, this.value)));
  this.invalid = !a;
  this.fire("iron-input-validate");
  return a;
}, _announceInvalidCharacter:function(a) {
  this.fire("iron-announce", {text:a});
}});
Polymer.NeonAnimationBehavior = {properties:{animationTiming:{type:Object, value:function() {
  return {duration:500, easing:"cubic-bezier(0.4, 0, 0.2, 1)", fill:"both"};
}}}, isNeonAnimation:!0, timingFromConfig:function(a) {
  if (a.timing) {
    for (var b in a.timing) {
      this.animationTiming[b] = a.timing[b];
    }
  }
  return this.animationTiming;
}, setPrefixedProperty:function(a, b, c) {
  for (var d = {transform:["webkitTransform"], transformOrigin:["mozTransformOrigin", "webkitTransformOrigin"]}[b], f, g = 0; f = d[g]; g++) {
    a.style[f] = c;
  }
  a.style[b] = c;
}, complete:function() {
}};
!function(a, b) {
  var c = {}, d = {}, f = {};
  !function(a, b) {
    function c() {
      this._endDelay = this._delay = 0;
      this._fill = "none";
      this._iterationStart = 0;
      this._iterations = 1;
      this._duration = 0;
      this._playbackRate = 1;
      this._direction = "normal";
      this._easing = "linear";
      this._easingFunction = p;
    }
    function d() {
      return a.isDeprecated("Invalid timing inputs", "2016-03-02", "TypeError exceptions will be thrown instead.", !0);
    }
    function f(b, d, f) {
      var p = new c;
      return d && (p.fill = "both", p.duration = "auto"), "number" != typeof b || isNaN(b) ? void 0 !== b && Object.getOwnPropertyNames(b).forEach(function(c) {
        "auto" == b[c] || ("number" == typeof p[c] || "duration" == c) && ("number" != typeof b[c] || isNaN(b[c])) || "fill" == c && -1 == q.indexOf(b[c]) || "direction" == c && -1 == l.indexOf(b[c]) || "playbackRate" == c && 1 !== b[c] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.") || (p[c] = b[c]);
      }) : p.duration = b, p;
    }
    function g(a, b, c, d) {
      return 0 > a || 1 < a || 0 > c || 1 < c ? p : function(l) {
        if (0 == l || 1 == l) {
          return l;
        }
        for (var f = 0, p = 1;;) {
          var g = (f + p) / 2, t = 3 * a * (1 - g) * (1 - g) * g + 3 * c * (1 - g) * g * g + g * g * g;
          if (1e-4 > Math.abs(l - t)) {
            return 3 * b * (1 - g) * (1 - g) * g + 3 * d * (1 - g) * g * g + g * g * g;
          }
          l > t ? f = g : p = g;
        }
      };
    }
    function h(a, b) {
      return function(c) {
        if (1 <= c) {
          return 1;
        }
        var d = 1 / a;
        return c += b * d, c - c % d;
      };
    }
    function w(a) {
      E || (E = document.createElement("div").style);
      E.animationTimingFunction = "";
      E.animationTimingFunction = a;
      var b = E.animationTimingFunction;
      if ("" == b && d()) {
        throw new TypeError(a + " is not a valid value for easing");
      }
      return (a = F.exec(b)) ? g.apply(this, a.slice(1).map(Number)) : (a = J.exec(b)) ? h(Number(a[1]), {start:t, middle:x, end:z}[a[2]]) : (b = A[b]) ? b : p;
    }
    function y(a, b, c) {
      return null == b ? N : b < c.delay ? U : b >= c.delay + a ? X : W;
    }
    var q = ["backwards", "forwards", "both", "none"], l = ["reverse", "alternate", "alternate-reverse"], p = function(a) {
      return a;
    };
    c.prototype = {_setMember:function(b, c) {
      this["_" + b] = c;
      this._effect && (this._effect._timingInput[b] = c, this._effect._timing = a.normalizeTimingInput(this._effect._timingInput), this._effect.activeDuration = a.calculateActiveDuration(this._effect._timing), this._effect._animation && this._effect._animation._rebuildUnderlyingAnimation());
    }, get playbackRate() {
      return this._playbackRate;
    }, set delay(a) {
      this._setMember("delay", a);
    }, get delay() {
      return this._delay;
    }, set endDelay(a) {
      this._setMember("endDelay", a);
    }, get endDelay() {
      return this._endDelay;
    }, set fill(a) {
      this._setMember("fill", a);
    }, get fill() {
      return this._fill;
    }, set iterationStart(a) {
      if ((isNaN(a) || 0 > a) && d()) {
        throw new TypeError("iterationStart must be a non-negative number, received: " + timing.iterationStart);
      }
      this._setMember("iterationStart", a);
    }, get iterationStart() {
      return this._iterationStart;
    }, set duration(a) {
      if ("auto" != a && (isNaN(a) || 0 > a) && d()) {
        throw new TypeError("duration must be non-negative or auto, received: " + a);
      }
      this._setMember("duration", a);
    }, get duration() {
      return this._duration;
    }, set direction(a) {
      this._setMember("direction", a);
    }, get direction() {
      return this._direction;
    }, set easing(a) {
      this._easingFunction = w(a);
      this._setMember("easing", a);
    }, get easing() {
      return this._easing;
    }, set iterations(a) {
      if ((isNaN(a) || 0 > a) && d()) {
        throw new TypeError("iterations must be non-negative, received: " + a);
      }
      this._setMember("iterations", a);
    }, get iterations() {
      return this._iterations;
    }};
    var t = 1, x = .5, z = 0, A = {ease:g(.25, .1, .25, 1), "ease-in":g(.42, 0, 1, 1), "ease-out":g(0, 0, .58, 1), "ease-in-out":g(.42, 0, .58, 1), "step-start":h(1, t), "step-middle":h(1, x), "step-end":h(1, z)}, E = null, F = /cubic-bezier\(\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*\)/, J = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/, N = 0, U = 1, X = 2, W = 3;
    a.cloneTimingInput = function(a) {
      if ("number" == typeof a) {
        return a;
      }
      var b = {}, c;
      for (c in a) {
        b[c] = a[c];
      }
      return b;
    };
    a.makeTiming = f;
    a.numericTimingToObject = function(a) {
      return "number" == typeof a && (a = isNaN(a) ? {duration:0} : {duration:a}), a;
    };
    a.normalizeTimingInput = function(b, c) {
      return b = a.numericTimingToObject(b), f(b, c);
    };
    a.calculateActiveDuration = function(a) {
      return Math.abs(a.duration * a.iterations / a.playbackRate);
    };
    a.calculateTimeFraction = function(a, b, c) {
      var d = y(a, b, c);
      a: {
        var l = c.fill;
        switch(d) {
          case U:
            b = "backwards" == l || "both" == l ? 0 : null;
            break a;
          case W:
            b -= c.delay;
            break a;
          case X:
            b = "forwards" == l || "both" == l ? a : null;
            break a;
          case N:
            b = null;
            break a;
        }
        b = void 0;
      }
      if (null === b) {
        return null;
      }
      if (0 === a) {
        return d === U ? 0 : 1;
      }
      d = c.iterationStart * c.duration;
      a = (0 > c.playbackRate ? b - a : b) * c.playbackRate + d;
      b = c.duration;
      d = a === 1 / 0 || a === -(1 / 0) || a - d == c.duration * c.iterations && c.iterations && 0 == (c.iterations + c.iterationStart) % 1 ? b : a % b;
      b = c.duration;
      a = 0 === a ? 0 : d == b ? c.iterationStart + c.iterations - 1 : Math.floor(a / b);
      b = c.duration;
      return b * c._easingFunction(("normal" == c.direction || c.direction == (1 <= a % 2 ? "alternate-reverse" : "alternate") ? d : b - d) / b) / c.duration;
    };
    a.calculatePhase = y;
    a.toTimingFunction = w;
  }(c, null);
  (function(a, b) {
    function c(a) {
      var b = [], c;
      for (c in a) {
        if (!(c in ["easing", "offset", "composite"])) {
          var d = a[c];
          Array.isArray(d) || (d = [d]);
          for (var l, f = d.length, g = 0; f > g; g++) {
            l = {}, "offset" in a ? l.offset = a.offset : 1 == f ? l.offset = 1 : l.offset = g / (f - 1), "easing" in a && (l.easing = a.easing), "composite" in a && (l.composite = a.composite), l[c] = d[g], b.push(l);
          }
        }
      }
      return b.sort(function(a, b) {
        return a.offset - b.offset;
      }), b;
    }
    var d = {background:"backgroundImage backgroundPosition backgroundSize backgroundRepeat backgroundAttachment backgroundOrigin backgroundClip backgroundColor".split(" "), border:"borderTopColor borderTopStyle borderTopWidth borderRightColor borderRightStyle borderRightWidth borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth".split(" "), borderBottom:["borderBottomWidth", "borderBottomStyle", "borderBottomColor"], borderColor:["borderTopColor", 
    "borderRightColor", "borderBottomColor", "borderLeftColor"], borderLeft:["borderLeftWidth", "borderLeftStyle", "borderLeftColor"], borderRadius:["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"], borderRight:["borderRightWidth", "borderRightStyle", "borderRightColor"], borderTop:["borderTopWidth", "borderTopStyle", "borderTopColor"], borderWidth:["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"], flex:["flexGrow", "flexShrink", 
    "flexBasis"], font:"fontFamily fontSize fontStyle fontVariant fontWeight lineHeight".split(" "), margin:["marginTop", "marginRight", "marginBottom", "marginLeft"], outline:["outlineColor", "outlineStyle", "outlineWidth"], padding:["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"]}, f = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    b = {thin:"1px", medium:"3px", thick:"5px"};
    var g = {borderBottomWidth:b, borderLeftWidth:b, borderRightWidth:b, borderTopWidth:b, fontSize:{"xx-small":"60%", "x-small":"75%", small:"89%", medium:"100%", large:"120%", "x-large":"150%", "xx-large":"200%"}, fontWeight:{normal:"400", bold:"700"}, outlineWidth:b, textShadow:{none:"0px 0px 0px transparent"}, boxShadow:{none:"0px 0px 0px 0px transparent"}};
    a.convertToArrayForm = c;
    a.normalizeKeyframes = function(a) {
      function b() {
        var a = h.length;
        null == h[a - 1].offset && (h[a - 1].offset = 1);
        1 < a && null == h[0].offset && (h[0].offset = 0);
        for (var b = 0, c = h[0].offset, d = 1; a > d; d++) {
          var l = h[d].offset;
          if (null != l) {
            for (var f = 1; d - b > f; f++) {
              h[b + f].offset = c + (l - c) * f / (d - b);
            }
            b = d;
            c = l;
          }
        }
      }
      if (null == a) {
        return [];
      }
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      window.Symbol && Symbol.iterator && Array.prototype.from && a[Symbol.iterator] && (a = Array.from(a));
      Array.isArray(a) || (a = c(a));
      var h = a.map(function(a) {
        var b = {}, c;
        for (c in a) {
          var l = a[c];
          if ("offset" == c) {
            if (null != l && (l = Number(l), !isFinite(l))) {
              throw new TypeError("keyframe offsets must be numbers.");
            }
          } else {
            if ("composite" == c) {
              throw {type:DOMException.NOT_SUPPORTED_ERR, name:"NotSupportedError", message:"add compositing is not supported"};
            }
            l = "" + l;
          }
          var p = void 0, t = c, h = l, l = b, q = d[t];
          if (q) {
            for (p in f.style[t] = h, q) {
              t = q[p], h = f.style[t], l[t] = t in g ? g[t][h] || h : h;
            }
          } else {
            l[t] = t in g ? g[t][h] || h : h;
          }
        }
        return void 0 == b.offset && (b.offset = null), b;
      });
      a = !0;
      for (var q = -(1 / 0), l = 0; l < h.length; l++) {
        var p = h[l].offset;
        if (null != p) {
          if (q > p) {
            throw {code:DOMException.INVALID_MODIFICATION_ERR, name:"InvalidModificationError", message:"Keyframes are not loosely sorted by offset. Sort or specify offsets."};
          }
          q = p;
        } else {
          a = !1;
        }
      }
      return h = h.filter(function(a) {
        return 0 <= a.offset && 1 >= a.offset;
      }), a || b(), h;
    };
  })(c, null);
  (function(a) {
    var b = {};
    a.isDeprecated = function(a, c, d, f) {
      f = f ? "are" : "is";
      var g = new Date;
      c = new Date(c);
      return c.setMonth(c.getMonth() + 3), c > g ? (a in b || console.warn("Web Animations: " + a + " " + f + " deprecated and will stop working on " + c.toDateString() + ". " + d), b[a] = !0, !1) : !0;
    };
    a.deprecated = function(b, c, d, f) {
      var g = f ? "are" : "is";
      if (a.isDeprecated(b, c, d, f)) {
        throw Error(b + " " + g + " no longer supported. " + d);
      }
    };
  })(c);
  (function() {
    if (document.documentElement.animate) {
      var a = document.documentElement.animate([], 0), b = !0;
      if (a && (b = !1, "play currentTime pause reverse playbackRate cancel finish startTime playState".split(" ").forEach(function(c) {
        void 0 === a[c] && (b = !0);
      })), !b) {
        return;
      }
    }
    !function(a, b, c) {
      function d(a) {
        for (var b = {}, c = 0; c < a.length; c++) {
          for (var d in a[c]) {
            if ("offset" != d && "easing" != d && "composite" != d) {
              var f = {offset:a[c].offset, easing:a[c].easing, value:a[c][d]};
              b[d] = b[d] || [];
              b[d].push(f);
            }
          }
        }
        for (var g in b) {
          if (a = b[g], 0 != a[0].offset || 1 != a[a.length - 1].offset) {
            throw {type:DOMException.NOT_SUPPORTED_ERR, name:"NotSupportedError", message:"Partial keyframes are not supported"};
          }
        }
        return b;
      }
      function f(c) {
        var d = [], f;
        for (f in c) {
          for (var l = c[f], p = 0; p < l.length - 1; p++) {
            var g = l[p].offset, h = l[p + 1].offset, m = l[p].value, n = l[p + 1].value, u = l[p].easing;
            g == h && (1 == h ? m = n : n = m);
            d.push({startTime:g, endTime:h, easing:a.toTimingFunction(u ? u : "linear"), property:f, interpolation:b.propertyInterpolation(f, m, n)});
          }
        }
        return d.sort(function(a, b) {
          return a.startTime - b.startTime;
        }), d;
      }
      b.convertEffectInput = function(c) {
        c = a.normalizeKeyframes(c);
        var g = d(c), h = f(g);
        return function(a, c) {
          if (null != c) {
            h.filter(function(a) {
              return 0 >= c && 0 == a.startTime || 1 <= c && 1 == a.endTime || c >= a.startTime && c <= a.endTime;
            }).forEach(function(d) {
              var l = c - d.startTime, f = d.endTime - d.startTime, l = 0 == f ? 0 : d.easing(l / f);
              b.apply(a, d.property, d.interpolation(l));
            });
          } else {
            for (var d in g) {
              "offset" != d && "easing" != d && "composite" != d && b.clear(a, d);
            }
          }
        };
      };
    }(c, d, null);
    (function(a, b, c) {
      function d(a) {
        return a.replace(/-(.)/g, function(a, b) {
          return b.toUpperCase();
        });
      }
      var f = {};
      b.addPropertiesHandler = function(a, b, c) {
        for (var l = 0; l < c.length; l++) {
          var g = a, h = b, q = d(c[l]);
          f[q] = f[q] || [];
          f[q].push([g, h]);
        }
      };
      var g = {backgroundColor:"transparent", backgroundPosition:"0% 0%", borderBottomColor:"currentColor", borderBottomLeftRadius:"0px", borderBottomRightRadius:"0px", borderBottomWidth:"3px", borderLeftColor:"currentColor", borderLeftWidth:"3px", borderRightColor:"currentColor", borderRightWidth:"3px", borderSpacing:"2px", borderTopColor:"currentColor", borderTopLeftRadius:"0px", borderTopRightRadius:"0px", borderTopWidth:"3px", bottom:"auto", clip:"rect(0px, 0px, 0px, 0px)", color:"black", fontSize:"100%", 
      fontWeight:"400", height:"auto", left:"auto", letterSpacing:"normal", lineHeight:"120%", marginBottom:"0px", marginLeft:"0px", marginRight:"0px", marginTop:"0px", maxHeight:"none", maxWidth:"none", minHeight:"0px", minWidth:"0px", opacity:"1.0", outlineColor:"invert", outlineOffset:"0px", outlineWidth:"3px", paddingBottom:"0px", paddingLeft:"0px", paddingRight:"0px", paddingTop:"0px", right:"auto", textIndent:"0px", textShadow:"0px 0px 0px transparent", top:"auto", transform:"", verticalAlign:"0px", 
      visibility:"visible", width:"auto", wordSpacing:"normal", zIndex:"auto"};
      b.propertyInterpolation = function(c, h, l) {
        var p = c;
        /-/.test(c) && !a.isDeprecated("Hyphenated property names", "2016-03-22", "Use camelCase instead.", !0) && (p = d(c));
        "initial" != h && "initial" != l || ("initial" == h && (h = g[p]), "initial" == l && (l = g[p]));
        c = h == l ? [] : f[p];
        for (p = 0; c && p < c.length; p++) {
          var t = c[p][0](h), q = c[p][0](l);
          if (void 0 !== t && void 0 !== q && (t = c[p][1](t, q))) {
            var m = b.Interpolation.apply(null, t);
            return function(a) {
              return 0 == a ? h : 1 == a ? l : m(a);
            };
          }
        }
        return b.Interpolation(!1, !0, function(a) {
          return a ? l : h;
        });
      };
    })(c, d, null);
    (function(a, b, c) {
      function d(b) {
        var c = a.calculateActiveDuration(b), d = function(d) {
          return a.calculateTimeFraction(c, d, b);
        };
        return d._totalDuration = b.delay + c + b.endDelay, d._isCurrent = function(d) {
          d = a.calculatePhase(c, d, b);
          return d === PhaseActive || d === PhaseBefore;
        }, d;
      }
      b.KeyframeEffect = function(c, f, g, h) {
        var l, p = d(a.normalizeTimingInput(g)), t = b.convertEffectInput(f);
        f = function() {
          t(c, l);
        };
        return f._update = function(a) {
          return l = p(a), null !== l;
        }, f._clear = function() {
          t(c, null);
        }, f._hasSameTarget = function(a) {
          return c === a;
        }, f._isCurrent = p._isCurrent, f._totalDuration = p._totalDuration, f._id = h, f;
      };
      b.NullEffect = function(a) {
        var b = function() {
          a && (a(), a = null);
        };
        return b._update = function() {
          return null;
        }, b._totalDuration = 0, b._isCurrent = function() {
          return !1;
        }, b._hasSameTarget = function() {
          return !1;
        }, b;
      };
    })(c, d, null);
    (function(a, b) {
      a.apply = function(b, c, d) {
        b.style[a.propertyName(c)] = d;
      };
      a.clear = function(b, c) {
        b.style[a.propertyName(c)] = "";
      };
    })(d, null);
    (function(a) {
      window.Element.prototype.animate = function(b, c) {
        var d = "";
        return c && c.id && (d = c.id), a.timeline._play(a.KeyframeEffect(this, b, c, d));
      };
    })(d);
    (function(a, b) {
      function c(a, b, d) {
        if ("number" == typeof a && "number" == typeof b) {
          return a * (1 - d) + b * d;
        }
        if ("boolean" == typeof a && "boolean" == typeof b) {
          return .5 > d ? a : b;
        }
        if (a.length == b.length) {
          for (var f = [], g = 0; g < a.length; g++) {
            f.push(c(a[g], b[g], d));
          }
          return f;
        }
        throw "Mismatched interpolation arguments " + a + ":" + b;
      }
      a.Interpolation = function(a, b, d) {
        return function(f) {
          return d(c(a, b, f));
        };
      };
    })(d, null);
    (function(a, b, c) {
      a.sequenceNumber = 0;
      var d = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "finish";
        this.cancelable = this.bubbles = !1;
        this.currentTarget = a;
        this.defaultPrevented = !1;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      };
      b.Animation = function(b) {
        this.id = "";
        b && b._id && (this.id = b._id);
        this._sequenceNumber = a.sequenceNumber++;
        this._currentTime = 0;
        this._startTime = null;
        this._paused = !1;
        this._playbackRate = 1;
        this._finishedFlag = this._inTimeline = !0;
        this.onfinish = null;
        this._finishHandlers = [];
        this._effect = b;
        this._inEffect = this._effect._update(0);
        this._idle = !0;
        this._currentTimePending = !1;
      };
      b.Animation.prototype = {_ensureAlive:function() {
        0 > this.playbackRate && 0 === this.currentTime ? this._inEffect = this._effect._update(-1) : this._inEffect = this._effect._update(this.currentTime);
        this._inTimeline || !this._inEffect && this._finishedFlag || (this._inTimeline = !0, b.timeline._animations.push(this));
      }, _tickCurrentTime:function(a, b) {
        a != this._currentTime && (this._currentTime = a, this._isFinished && !b && (this._currentTime = 0 < this._playbackRate ? this._totalDuration : 0), this._ensureAlive());
      }, get currentTime() {
        return this._idle || this._currentTimePending ? null : this._currentTime;
      }, set currentTime(a) {
        a = +a;
        isNaN(a) || (b.restart(), this._paused || null == this._startTime || (this._startTime = this._timeline.currentTime - a / this._playbackRate), this._currentTimePending = !1, this._currentTime != a && (this._tickCurrentTime(a, !0), b.invalidateEffects()));
      }, get startTime() {
        return this._startTime;
      }, set startTime(a) {
        a = +a;
        isNaN(a) || this._paused || this._idle || (this._startTime = a, this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate), b.invalidateEffects());
      }, get playbackRate() {
        return this._playbackRate;
      }, set playbackRate(a) {
        if (a != this._playbackRate) {
          var b = this.currentTime;
          this._playbackRate = a;
          this._startTime = null;
          "paused" != this.playState && "idle" != this.playState && this.play();
          null != b && (this.currentTime = b);
        }
      }, get _isFinished() {
        return !this._idle && (0 < this._playbackRate && this._currentTime >= this._totalDuration || 0 > this._playbackRate && 0 >= this._currentTime);
      }, get _totalDuration() {
        return this._effect._totalDuration;
      }, get playState() {
        return this._idle ? "idle" : null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending ? "pending" : this._paused ? "paused" : this._isFinished ? "finished" : "running";
      }, play:function() {
        this._paused = !1;
        (this._isFinished || this._idle) && (this._currentTime = 0 < this._playbackRate ? 0 : this._totalDuration, this._startTime = null);
        this._idle = this._finishedFlag = !1;
        this._ensureAlive();
        b.invalidateEffects();
      }, pause:function() {
        this._isFinished || this._paused || this._idle || (this._currentTimePending = !0);
        this._startTime = null;
        this._paused = !0;
      }, finish:function() {
        this._idle || (this.currentTime = 0 < this._playbackRate ? this._totalDuration : 0, this._startTime = this._totalDuration - this.currentTime, this._currentTimePending = !1, b.invalidateEffects());
      }, cancel:function() {
        this._inEffect && (this._inEffect = !1, this._idle = !0, this._finishedFlag = !0, this.currentTime = 0, this._startTime = null, this._effect._update(null), b.invalidateEffects());
      }, reverse:function() {
        this.playbackRate *= -1;
        this.play();
      }, addEventListener:function(a, b) {
        "function" == typeof b && "finish" == a && this._finishHandlers.push(b);
      }, removeEventListener:function(a, b) {
        "finish" == a && (a = this._finishHandlers.indexOf(b), 0 <= a && this._finishHandlers.splice(a, 1));
      }, _fireEvents:function(a) {
        if (this._isFinished) {
          if (!this._finishedFlag) {
            var b = new d(this, this._currentTime, a), c = this._finishHandlers.concat(this.onfinish ? [this.onfinish] : []);
            setTimeout(function() {
              c.forEach(function(a) {
                a.call(b.target, b);
              });
            }, 0);
            this._finishedFlag = !0;
          }
        } else {
          this._finishedFlag = !1;
        }
      }, _tick:function(a, b) {
        this._idle || this._paused || (null == this._startTime ? b && (this.startTime = a - this._currentTime / this.playbackRate) : this._isFinished || this._tickCurrentTime((a - this._startTime) * this.playbackRate));
        b && (this._currentTimePending = !1, this._fireEvents(a));
      }, get _needsTick() {
        return this.playState in {pending:1, running:1} || !this._finishedFlag;
      }};
    })(c, d, null);
    (function(a, b, c) {
      function d(a) {
        var b = p;
        p = [];
        a < E.currentTime && (a = E.currentTime);
        q(a, !0);
        b.forEach(function(b) {
          b[1](a);
        });
        h();
      }
      function f(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      }
      function g() {
        this._animations = [];
        this.currentTime = window.performance && performance.now ? performance.now() : 0;
      }
      function h() {
        r.forEach(function(a) {
          a();
        });
        r.length = 0;
      }
      function q(a, c) {
        u = !1;
        var d = b.timeline;
        d.currentTime = a;
        d._animations.sort(f);
        m = !1;
        var l = d._animations;
        d._animations = [];
        var g = [], p = [], l = l.filter(function(b) {
          b._tick(a, c);
          b._inEffect ? p.push(b._effect) : g.push(b._effect);
          b._needsTick && (m = !0);
          var d = b._inEffect || b._needsTick;
          return b._inTimeline = d, d;
        });
        r.push.apply(r, g);
        r.push.apply(r, p);
        d._animations.push.apply(d._animations, l);
        m && requestAnimationFrame(function() {
        });
      }
      var l = window.requestAnimationFrame, p = [], t = 0;
      window.requestAnimationFrame = function(a) {
        var b = t++;
        return 0 == p.length && l(d), p.push([b, a]), b;
      };
      window.cancelAnimationFrame = function(a) {
        p.forEach(function(b) {
          b[0] == a && (b[1] = function() {
          });
        });
      };
      g.prototype = {_play:function(c) {
        c._timing = a.normalizeTimingInput(c.timing);
        c = new b.Animation(c);
        return c._idle = !1, c._timeline = this, this._animations.push(c), b.restart(), b.invalidateEffects(), c;
      }};
      var m = !1, u = !1;
      b.restart = function() {
        return m || (m = !0, requestAnimationFrame(function() {
        }), u = !0), u;
      };
      b.invalidateEffects = function() {
        q(b.timeline.currentTime, !1);
        h();
      };
      var r = [], E = new g;
      b.timeline = E;
    })(c, d, null);
    (function(a) {
      function b(a, b) {
        var c = a.exec(b);
        return c ? (c = a.ignoreCase ? c[0].toLowerCase() : c[0], [c, b.substr(c.length)]) : void 0;
      }
      function c(a, b) {
        b = b.replace(/^\s*/, "");
        return (a = a(b)) ? [a[0], a[1].replace(/^\s*/, "")] : void 0;
      }
      function d(a, b) {
        for (var c = a, d = b; c && d;) {
          c > d ? c %= d : d %= c;
        }
        return a * b / (c + d);
      }
      function f(a, b, c, l, f) {
        for (var g = [], p = [], h = [], q = d(l.length, f.length), m = 0; q > m; m++) {
          var n = b(l[m % l.length], f[m % f.length]);
          if (!n) {
            return;
          }
          g.push(n[0]);
          p.push(n[1]);
          h.push(n[2]);
        }
        return [g, p, function(b) {
          b = b.map(function(a, b) {
            return h[b](a);
          }).join(c);
          return a ? a(b) : b;
        }];
      }
      a.consumeToken = b;
      a.consumeTrimmed = c;
      a.consumeRepeated = function(a, d, f) {
        a = c.bind(null, a);
        for (var l = [];;) {
          var g = a(f);
          if (!g || (l.push(g[0]), f = g[1], g = b(d, f), !g || "" == g[1])) {
            return [l, f];
          }
          f = g[1];
        }
      };
      a.consumeParenthesised = function(a, b) {
        for (var c = 0, d = 0; d < b.length && (!/\s|,/.test(b[d]) || 0 != c); d++) {
          if ("(" == b[d]) {
            c++;
          } else {
            if (")" == b[d] && (c--, 0 == c && d++, 0 >= c)) {
              break;
            }
          }
        }
        a = a(b.substr(0, d));
        return void 0 == a ? void 0 : [a, b.substr(d)];
      };
      a.ignore = function(a) {
        return function(b) {
          b = a(b);
          return b && (b[0] = void 0), b;
        };
      };
      a.optional = function(a, b) {
        return function(c) {
          var d = a(c);
          return d ? d : [b, c];
        };
      };
      a.consumeList = function(b, c) {
        for (var d = [], l = 0; l < b.length; l++) {
          c = a.consumeTrimmed(b[l], c);
          if (!c || "" == c[0]) {
            return;
          }
          void 0 !== c[0] && d.push(c[0]);
          c = c[1];
        }
        return "" == c ? d : void 0;
      };
      a.mergeNestedRepeated = f.bind(null, null);
      a.mergeWrappedNestedRepeated = f;
      a.mergeList = function(a, b, c) {
        for (var d = [], f = [], g = [], h = 0, q = 0; q < c.length; q++) {
          if ("function" == typeof c[q]) {
            var m = c[q](a[h], b[h++]);
            d.push(m[0]);
            f.push(m[1]);
            g.push(m[2]);
          } else {
            !function(a) {
              d.push(!1);
              f.push(!1);
              g.push(function() {
                return c[a];
              });
            }(q);
          }
        }
        return [d, f, function(a) {
          for (var b = "", c = 0; c < a.length; c++) {
            b += g[c](a[c]);
          }
          return b;
        }];
      };
    })(d);
    (function(a) {
      function b(b) {
        var c = {inset:!1, lengths:[], color:null};
        return (b = a.consumeRepeated(function(b) {
          var d = a.consumeToken(/^inset/i, b);
          return d ? (c.inset = !0, d) : (d = a.consumeLengthOrPercent(b)) ? (c.lengths.push(d[0]), d) : (d = a.consumeColor(b)) ? (c.color = d[0], d) : void 0;
        }, /^/, b)) && b[0].length ? [c, b[1]] : void 0;
      }
      var c = function(b, c, d, f) {
        function g(a) {
          return {inset:a, color:[0, 0, 0, 0], lengths:[{px:0}, {px:0}, {px:0}, {px:0}]};
        }
        for (var l = [], p = [], t = 0; t < d.length || t < f.length; t++) {
          var h = d[t] || g(f[t].inset), m = f[t] || g(d[t].inset);
          l.push(h);
          p.push(m);
        }
        return a.mergeNestedRepeated(b, c, l, p);
      }.bind(null, function(b, c) {
        for (; b.lengths.length < Math.max(b.lengths.length, c.lengths.length);) {
          b.lengths.push({px:0});
        }
        for (; c.lengths.length < Math.max(b.lengths.length, c.lengths.length);) {
          c.lengths.push({px:0});
        }
        if (b.inset == c.inset && !!b.color == !!c.color) {
          for (var d, f = [], g = [[], 0], l = [[], 0], p = 0; p < b.lengths.length; p++) {
            var t = a.mergeDimensions(b.lengths[p], c.lengths[p], 2 == p);
            g[0].push(t[0]);
            l[0].push(t[1]);
            f.push(t[2]);
          }
          b.color && c.color && (c = a.mergeColors(b.color, c.color), g[1] = c[0], l[1] = c[1], d = c[2]);
          return [g, l, function(a) {
            for (var c = b.inset ? "inset " : " ", l = 0; l < f.length; l++) {
              c += f[l](a[0][l]) + " ";
            }
            return d && (c += d(a[1])), c;
          }];
        }
      }, ", ");
      a.addPropertiesHandler(function(c) {
        return (c = a.consumeRepeated(b, /^,/, c)) && "" == c[1] ? c[0] : void 0;
      }, c, ["box-shadow", "text-shadow"]);
    })(d);
    (function(a, b) {
      function c(a) {
        return a.toFixed(3).replace(".000", "");
      }
      function d(a, b, c) {
        return Math.min(b, Math.max(a, c));
      }
      function f(a) {
        return /^\s*[-+]?(\d*\.)?\d+\s*$/.test(a) ? Number(a) : void 0;
      }
      function g(a, b) {
        return function(l, f) {
          return [l, f, function(l) {
            return c(d(a, b, l));
          }];
        };
      }
      a.clamp = d;
      a.addPropertiesHandler(f, g(0, 1 / 0), ["border-image-width", "line-height"]);
      a.addPropertiesHandler(f, g(0, 1), ["opacity", "shape-image-threshold"]);
      a.addPropertiesHandler(f, function(a, b) {
        return 0 != a ? g(0, 1 / 0)(a, b) : void 0;
      }, ["flex-grow", "flex-shrink"]);
      a.addPropertiesHandler(f, function(a, b) {
        return [a, b, function(a) {
          return Math.round(d(1, 1 / 0, a));
        }];
      }, ["orphans", "widows"]);
      a.addPropertiesHandler(f, function(a, b) {
        return [a, b, Math.round];
      }, ["z-index"]);
      a.parseNumber = f;
      a.mergeNumbers = function(a, b) {
        return [a, b, c];
      };
      a.numberToString = c;
    })(d, null);
    (function(a, b) {
      a.addPropertiesHandler(String, function(a, b) {
        return "visible" == a || "visible" == b ? [0, 1, function(c) {
          return 0 >= c ? a : 1 <= c ? b : "visible";
        }] : void 0;
      }, ["visibility"]);
    })(d);
    (function(a, b) {
      function c(a) {
        a = a.trim();
        f.fillStyle = "#000";
        f.fillStyle = a;
        var b = f.fillStyle;
        if (f.fillStyle = "#fff", f.fillStyle = a, b == f.fillStyle) {
          return f.fillRect(0, 0, 1, 1), a = f.getImageData(0, 0, 1, 1).data, f.clearRect(0, 0, 1, 1), b = a[3] / 255, [a[0] * b, a[1] * b, a[2] * b, b];
        }
      }
      function d(b, c) {
        return [b, c, function(b) {
          if (b[3]) {
            for (var c = 0; 3 > c; c++) {
              b[c] = Math.round(Math.max(0, Math.min(255, b[c] / b[3])));
            }
          }
          return b[3] = a.numberToString(a.clamp(0, 1, b[3])), "rgba(" + b.join(",") + ")";
        }];
      }
      b = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      b.width = b.height = 1;
      var f = b.getContext("2d");
      a.addPropertiesHandler(c, d, "background-color border-bottom-color border-left-color border-right-color border-top-color color outline-color text-decoration-color".split(" "));
      a.consumeColor = a.consumeParenthesised.bind(null, c);
      a.mergeColors = d;
    })(d, null);
    (function(a, b) {
      function c(a, b) {
        if (b = b.trim().toLowerCase(), "0" == b && 0 <= "px".search(a)) {
          return {px:0};
        }
        if (/^[^(]*$|^calc/.test(b)) {
          b = b.replace(/calc\(/g, "(");
          var c = {};
          b = b.replace(a, function(a) {
            return c[a] = null, "U" + a;
          });
          a = "U(" + a.source + ")";
          for (var d = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + a, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, ""), l = [/N\*(D)/g, /(N|D)[*\/]N/g, /(N|D)O\1/g, /\((N|D)\)/g], f = 0; f < l.length;) {
            l[f].test(d) ? (d = d.replace(l[f], "$1"), f = 0) : f++;
          }
          if ("D" == d) {
            for (var g in c) {
              d = eval(b.replace(new RegExp("U" + g, "g"), "").replace(new RegExp(a, "g"), "*0"));
              if (!isFinite(d)) {
                return;
              }
              c[g] = d;
            }
            return c;
          }
        }
      }
      function d(a, b) {
        return f(a, b, !0);
      }
      function f(b, c, d) {
        var l, f = [];
        for (l in b) {
          f.push(l);
        }
        for (l in c) {
          0 > f.indexOf(l) && f.push(l);
        }
        return b = f.map(function(a) {
          return b[a] || 0;
        }), c = f.map(function(a) {
          return c[a] || 0;
        }), [b, c, function(b) {
          var c = b.map(function(c, l) {
            return 1 == b.length && d && (c = Math.max(c, 0)), a.numberToString(c) + f[l];
          }).join(" + ");
          return 1 < b.length ? "calc(" + c + ")" : c;
        }];
      }
      var g = c.bind(null, /px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc/g);
      b = c.bind(null, /px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|%/g);
      var h = c.bind(null, /deg|rad|grad|turn/g);
      a.parseLength = g;
      a.parseLengthOrPercent = b;
      a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, b);
      a.parseAngle = h;
      a.mergeDimensions = f;
      var g = a.consumeParenthesised.bind(null, g), g = a.consumeRepeated.bind(void 0, g, /^/), q = a.consumeRepeated.bind(void 0, g, /^,/);
      a.consumeSizePairList = q;
      g = a.mergeNestedRepeated.bind(void 0, d, " ");
      h = a.mergeNestedRepeated.bind(void 0, g, ",");
      a.mergeNonNegativeSizePair = g;
      a.addPropertiesHandler(function(a) {
        return (a = q(a)) && "" == a[1] ? a[0] : void 0;
      }, h, ["background-size"]);
      a.addPropertiesHandler(b, d, "border-bottom-width border-image-width border-left-width border-right-width border-top-width flex-basis font-size height line-height max-height max-width outline-width width".split(" "));
      a.addPropertiesHandler(b, f, "border-bottom-left-radius border-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin text-indent top vertical-align word-spacing".split(" "));
    })(d, null);
    (function(a, b) {
      function c(b) {
        return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b);
      }
      function d(b) {
        return (b = a.consumeList([a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, c, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/))], b)) && 4 == b[0].length ? b[0] : void 0;
      }
      b = a.mergeWrappedNestedRepeated.bind(null, function(a) {
        return "rect(" + a + ")";
      }, function(b, c) {
        return "auto" == b || "auto" == c ? [!0, !1, function(d) {
          d = d ? b : c;
          if ("auto" == d) {
            return "auto";
          }
          d = a.mergeDimensions(d, d);
          return d[2](d[0]);
        }] : a.mergeDimensions(b, c);
      }, ", ");
      a.parseBox = d;
      a.mergeBoxes = b;
      a.addPropertiesHandler(d, b, ["clip"]);
    })(d, null);
    (function(a, b) {
      function c(a) {
        return function(b) {
          var c = 0;
          return a.map(function(a) {
            return a === q ? b[c++] : a;
          });
        };
      }
      function d(a) {
        return a;
      }
      function f(a) {
        return a.toFixed(6).replace(".000000", "");
      }
      function g(b, c) {
        if (b.decompositionPair !== c) {
          b.decompositionPair = c;
          var d = a.makeMatrixDecomposition(b);
        }
        if (c.decompositionPair !== b) {
          c.decompositionPair = b;
          var l = a.makeMatrixDecomposition(c);
        }
        return null == d[0] || null == l[0] ? [[!1], [!0], function(a) {
          return a ? c[0].d : b[0].d;
        }] : (d[0].push(0), l[0].push(1), [d, l, function(b) {
          var c = a.quat(d[0][3], l[0][3], b[5]);
          return a.composeMatrix(b[0], b[1], b[2], c, b[4]).map(f).join(",");
        }]);
      }
      function h(a) {
        return a.replace(/(x|y|z|3d)?$/, "3d");
      }
      var q = null, l = {px:0}, p = {deg:0}, t = {matrix:["NNNNNN", [q, q, 0, 0, q, q, 0, 0, 0, 0, 1, 0, q, q, 0, 1], d], matrix3d:["NNNNNNNNNNNNNNNN", d], rotate:["A"], rotatex:["A"], rotatey:["A"], rotatez:["A"], rotate3d:["NNNA"], perspective:["L"], scale:["Nn", c([q, q, 1]), d], scalex:["N", c([q, 1, 1]), c([q, 1])], scaley:["N", c([1, q, 1]), c([1, q])], scalez:["N", c([1, 1, q])], scale3d:["NNN", d], skew:["Aa", null, d], skewx:["A", null, c([q, p])], skewy:["A", null, c([p, q])], translate:["Tt", 
      c([q, q, l]), d], translatex:["T", c([q, l, l]), c([q, l])], translatey:["T", c([l, q, l]), c([l, q])], translatez:["L", c([l, l, q])], translate3d:["TTL", d]};
      a.addPropertiesHandler(function(b) {
        if (b = b.toLowerCase().trim(), "none" == b) {
          return [];
        }
        for (var c, d = /\s*(\w+)\(([^)]*)\)/g, f = [], g = 0; (c = d.exec(b)) && c.index == g;) {
          var g = c.index + c[0].length, h = c[1], q = t[h];
          if (!q) {
            break;
          }
          c = c[2].split(",");
          q = q[0];
          if (q.length < c.length) {
            break;
          }
          for (var m = [], n = 0; n < q.length; n++) {
            var x, u = c[n], r = q[n];
            if (x = u ? {A:function(b) {
              return "0" == b.trim() ? p : a.parseAngle(b);
            }, N:a.parseNumber, T:a.parseLengthOrPercent, L:a.parseLength}[r.toUpperCase()](u) : {a:p, n:m[0], t:l}[r], void 0 === x) {
              return;
            }
            m.push(x);
          }
          if (f.push({t:h, d:m}), d.lastIndex == b.length) {
            return f;
          }
        }
      }, function(b, c) {
        var d = a.makeMatrixDecomposition && !0, l = !1;
        if (!b.length || !c.length) {
          b.length || (l = !0, b = c, c = []);
          for (var f = 0; f < b.length; f++) {
            var p = b[f].t;
            var q = b[f].d, m = "scale" == p.substr(0, 5) ? 1 : 0;
            c.push({t:p, d:q.map(function(a) {
              if ("number" == typeof a) {
                return m;
              }
              var b = {}, c;
              for (c in a) {
                b[c] = m;
              }
              return b;
            })});
          }
        }
        var q = [], n = [], x = [];
        if (b.length != c.length) {
          if (!d) {
            return;
          }
          var u = g(b, c);
          q = [u[0]];
          n = [u[1]];
          x = [["matrix", [u[2]]]];
        } else {
          for (f = 0; f < b.length; f++) {
            p = b[f].t;
            var r = c[f].t, w = b[f].d, y = c[f].d;
            u = t[p];
            var z = t[r];
            if ("perspective" == p && "perspective" == r || !("matrix" != p && "matrix3d" != p || "matrix" != r && "matrix3d" != r)) {
              if (!d) {
                return;
              }
              u = g([b[f]], [c[f]]);
              q.push(u[0]);
              n.push(u[1]);
              x.push(["matrix", [u[2]]]);
            } else {
              if (p != r) {
                if (u[2] && z[2] && p.replace(/[xy]/, "") == r.replace(/[xy]/, "")) {
                  p = p.replace(/[xy]/, ""), w = u[2](w), y = z[2](y);
                } else {
                  if (!u[1] || !z[1] || h(p) != h(r)) {
                    if (!d) {
                      return;
                    }
                    u = g(b, c);
                    q = [u[0]];
                    n = [u[1]];
                    x = [["matrix", [u[2]]]];
                    break;
                  }
                  p = h(p);
                  w = u[1](w);
                  y = z[1](y);
                }
              }
              for (var z = [], r = [], v = [], I = 0; I < w.length; I++) {
                u = ("number" == typeof w[I] ? a.mergeNumbers : a.mergeDimensions)(w[I], y[I]), z[I] = u[0], r[I] = u[1], v.push(u[2]);
              }
              q.push(z);
              n.push(r);
              x.push([p, v]);
            }
          }
        }
        l && (n = q = n);
        return [q, n, function(a) {
          return a.map(function(a, b) {
            a = a.map(function(a, c) {
              return x[b][1][c](a);
            }).join(",");
            return "matrix" == x[b][0] && 16 == a.split(",").length && (x[b][0] = "matrix3d"), x[b][0] + "(" + a + ")";
          }).join(" ");
        }];
      }, ["transform"]);
    })(d, null);
    (function(a, b) {
      function c(a, b) {
        b.concat([a]).forEach(function(b) {
          b in document.documentElement.style && (d[a] = b);
        });
      }
      var d = {};
      c("transform", ["webkitTransform", "msTransform"]);
      c("transformOrigin", ["webkitTransformOrigin"]);
      c("perspective", ["webkitPerspective"]);
      c("perspectiveOrigin", ["webkitPerspectiveOrigin"]);
      a.propertyName = function(a) {
        return d[a] || a;
      };
    })(d, null);
  })();
  !function() {
    if (void 0 === document.createElement("div").animate([]).oncancel) {
      var a = window.performance && performance.now ? function() {
        return performance.now();
      } : function() {
        return Date.now();
      };
      var b = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "cancel";
        this.cancelable = this.bubbles = !1;
        this.currentTarget = a;
        this.defaultPrevented = !1;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      }, c = window.Element.prototype.animate;
      window.Element.prototype.animate = function(d, f) {
        d = c.call(this, d, f);
        d._cancelHandlers = [];
        d.oncancel = null;
        var g = d.cancel;
        d.cancel = function() {
          g.call(this);
          var c = new b(this, null, a()), d = this._cancelHandlers.concat(this.oncancel ? [this.oncancel] : []);
          setTimeout(function() {
            d.forEach(function(a) {
              a.call(c.target, c);
            });
          }, 0);
        };
        var h = d.addEventListener;
        d.addEventListener = function(a, b) {
          "function" == typeof b && "cancel" == a ? this._cancelHandlers.push(b) : h.call(this, a, b);
        };
        var m = d.removeEventListener;
        return d.removeEventListener = function(a, b) {
          "cancel" == a ? (a = this._cancelHandlers.indexOf(b), 0 <= a && this._cancelHandlers.splice(a, 1)) : m.call(this, a, b);
        }, d;
      };
    }
  }();
  (function(a) {
    var b = document.documentElement, c = null, d = !1;
    try {
      var f = "0" == getComputedStyle(b).getPropertyValue("opacity") ? "1" : "0", c = b.animate({opacity:[f, f]}, {duration:1});
      c.currentTime = 0;
      d = getComputedStyle(b).getPropertyValue("opacity") == f;
    } catch (v) {
    } finally {
      c && c.cancel();
    }
    if (!d) {
      var g = window.Element.prototype.animate;
      window.Element.prototype.animate = function(b, c) {
        $jscomp.initSymbol();
        $jscomp.initSymbolIterator();
        $jscomp.initSymbol();
        $jscomp.initSymbolIterator();
        return window.Symbol && Symbol.iterator && Array.prototype.from && b[Symbol.iterator] && (b = Array.from(b)), Array.isArray(b) || null === b || (b = a.convertToArrayForm(b)), g.call(this, b, c);
      };
    }
  })(c);
  !function(a, b, c) {
    function d(a) {
      var b = window.document.timeline;
      b.currentTime = a;
      b._discardAnimations();
      0 == b._animations.length ? g = !1 : requestAnimationFrame(d);
    }
    var f = window.requestAnimationFrame;
    window.requestAnimationFrame = function(a) {
      return f(function(b) {
        window.document.timeline._updateAnimationsPromises();
        a(b);
        window.document.timeline._updateAnimationsPromises();
      });
    };
    b.AnimationTimeline = function() {
      this._animations = [];
      this.currentTime = void 0;
    };
    b.AnimationTimeline.prototype = {getAnimations:function() {
      return this._discardAnimations(), this._animations.slice();
    }, _updateAnimationsPromises:function() {
      b.animationsWithPromises = b.animationsWithPromises.filter(function(a) {
        return a._updatePromises();
      });
    }, _discardAnimations:function() {
      this._updateAnimationsPromises();
      this._animations = this._animations.filter(function(a) {
        return "finished" != a.playState && "idle" != a.playState;
      });
    }, _play:function(a) {
      a = new b.Animation(a, this);
      return this._animations.push(a), b.restartWebAnimationsNextTick(), a._updatePromises(), a._animation.play(), a._updatePromises(), a;
    }, play:function(a) {
      return a && a.remove(), this._play(a);
    }};
    var g = !1;
    b.restartWebAnimationsNextTick = function() {
      g || (g = !0, requestAnimationFrame(d));
    };
    var h = new b.AnimationTimeline;
    b.timeline = h;
    try {
      Object.defineProperty(window.document, "timeline", {configurable:!0, get:function() {
        return h;
      }});
    } catch (w) {
    }
    try {
      window.document.timeline = h;
    } catch (w) {
    }
  }(c, f, null);
  (function(a, b, c) {
    b.animationsWithPromises = [];
    b.Animation = function(b, c) {
      if (this.id = "", b && b._id && (this.id = b._id), this.effect = b, b && (b._animation = this), !c) {
        throw Error("Animation with null timeline is not supported");
      }
      this._timeline = c;
      this._sequenceNumber = a.sequenceNumber++;
      this._holdTime = 0;
      this._isGroup = this._paused = !1;
      this._animation = null;
      this._childAnimations = [];
      this._callback = null;
      this._oldPlayState = "idle";
      this._rebuildUnderlyingAnimation();
      this._animation.cancel();
      this._updatePromises();
    };
    b.Animation.prototype = {_updatePromises:function() {
      var a = this._oldPlayState, b = this.playState;
      return this._readyPromise && b !== a && ("idle" == b ? (this._rejectReadyPromise(), this._readyPromise = void 0) : "pending" == a ? this._resolveReadyPromise() : "pending" == b && (this._readyPromise = void 0)), this._finishedPromise && b !== a && ("idle" == b ? (this._rejectFinishedPromise(), this._finishedPromise = void 0) : "finished" == b ? this._resolveFinishedPromise() : "finished" == a && (this._finishedPromise = void 0)), this._oldPlayState = this.playState, this._readyPromise || this._finishedPromise;
    }, _rebuildUnderlyingAnimation:function() {
      this._updatePromises();
      var a, c, d, f, g = !!this._animation;
      g && (a = this.playbackRate, c = this._paused, d = this.startTime, f = this.currentTime, this._animation.cancel(), this._animation._wrapper = null, this._animation = null);
      (!this.effect || this.effect instanceof window.KeyframeEffect) && (this._animation = b.newUnderlyingAnimationForKeyframeEffect(this.effect), b.bindAnimationForKeyframeEffect(this));
      (this.effect instanceof window.SequenceEffect || this.effect instanceof window.GroupEffect) && (this._animation = b.newUnderlyingAnimationForGroup(this.effect), b.bindAnimationForGroup(this));
      this.effect && this.effect._onsample && b.bindAnimationForCustomEffect(this);
      g && (1 != a && (this.playbackRate = a), null !== d ? this.startTime = d : null !== f ? this.currentTime = f : null !== this._holdTime && (this.currentTime = this._holdTime), c && this.pause());
      this._updatePromises();
    }, _updateChildren:function() {
      if (this.effect && "idle" != this.playState) {
        var a = this.effect._timing.delay;
        this._childAnimations.forEach(function(c) {
          this._arrangeChildren(c, a);
          this.effect instanceof window.SequenceEffect && (a += b.groupChildDuration(c.effect));
        }.bind(this));
      }
    }, _setExternalAnimation:function(a) {
      if (this.effect && this._isGroup) {
        for (var b = 0; b < this.effect.children.length; b++) {
          this.effect.children[b]._animation = a, this._childAnimations[b]._setExternalAnimation(a);
        }
      }
    }, _constructChildAnimations:function() {
      if (this.effect && this._isGroup) {
        var a = this.effect._timing.delay;
        this._removeChildAnimations();
        this.effect.children.forEach(function(c) {
          var d = window.document.timeline._play(c);
          this._childAnimations.push(d);
          d.playbackRate = this.playbackRate;
          this._paused && d.pause();
          c._animation = this.effect._animation;
          this._arrangeChildren(d, a);
          this.effect instanceof window.SequenceEffect && (a += b.groupChildDuration(c));
        }.bind(this));
      }
    }, _arrangeChildren:function(a, b) {
      null === this.startTime ? a.currentTime = this.currentTime - b / this.playbackRate : a.startTime !== this.startTime + b / this.playbackRate && (a.startTime = this.startTime + b / this.playbackRate);
    }, get timeline() {
      return this._timeline;
    }, get playState() {
      return this._animation ? this._animation.playState : "idle";
    }, get finished() {
      return window.Promise ? (this._finishedPromise || (-1 == b.animationsWithPromises.indexOf(this) && b.animationsWithPromises.push(this), this._finishedPromise = new Promise(function(a, b) {
        this._resolveFinishedPromise = function() {
          a(this);
        };
        this._rejectFinishedPromise = function() {
          b({type:DOMException.ABORT_ERR, name:"AbortError"});
        };
      }.bind(this)), "finished" == this.playState && this._resolveFinishedPromise()), this._finishedPromise) : (console.warn("Animation Promises require JavaScript Promise constructor"), null);
    }, get ready() {
      return window.Promise ? (this._readyPromise || (-1 == b.animationsWithPromises.indexOf(this) && b.animationsWithPromises.push(this), this._readyPromise = new Promise(function(a, b) {
        this._resolveReadyPromise = function() {
          a(this);
        };
        this._rejectReadyPromise = function() {
          b({type:DOMException.ABORT_ERR, name:"AbortError"});
        };
      }.bind(this)), "pending" !== this.playState && this._resolveReadyPromise()), this._readyPromise) : (console.warn("Animation Promises require JavaScript Promise constructor"), null);
    }, get onfinish() {
      return this._animation.onfinish;
    }, set onfinish(a) {
      "function" == typeof a ? this._animation.onfinish = function(b) {
        b.target = this;
        a.call(this, b);
      }.bind(this) : this._animation.onfinish = a;
    }, get oncancel() {
      return this._animation.oncancel;
    }, set oncancel(a) {
      "function" == typeof a ? this._animation.oncancel = function(b) {
        b.target = this;
        a.call(this, b);
      }.bind(this) : this._animation.oncancel = a;
    }, get currentTime() {
      this._updatePromises();
      var a = this._animation.currentTime;
      return this._updatePromises(), a;
    }, set currentTime(a) {
      this._updatePromises();
      this._animation.currentTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
      this._register();
      this._forEachChild(function(b, c) {
        b.currentTime = a - c;
      });
      this._updatePromises();
    }, get startTime() {
      return this._animation.startTime;
    }, set startTime(a) {
      this._updatePromises();
      this._animation.startTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
      this._register();
      this._forEachChild(function(b, c) {
        b.startTime = a + c;
      });
      this._updatePromises();
    }, get playbackRate() {
      return this._animation.playbackRate;
    }, set playbackRate(a) {
      this._updatePromises();
      var b = this.currentTime;
      this._animation.playbackRate = a;
      this._forEachChild(function(b) {
        b.playbackRate = a;
      });
      "paused" != this.playState && "idle" != this.playState && this.play();
      null !== b && (this.currentTime = b);
      this._updatePromises();
    }, play:function() {
      this._updatePromises();
      this._paused = !1;
      this._animation.play();
      -1 == this._timeline._animations.indexOf(this) && this._timeline._animations.push(this);
      this._register();
      b.awaitStartTime(this);
      this._forEachChild(function(a) {
        var b = a.currentTime;
        a.play();
        a.currentTime = b;
      });
      this._updatePromises();
    }, pause:function() {
      this._updatePromises();
      this.currentTime && (this._holdTime = this.currentTime);
      this._animation.pause();
      this._register();
      this._forEachChild(function(a) {
        a.pause();
      });
      this._paused = !0;
      this._updatePromises();
    }, finish:function() {
      this._updatePromises();
      this._animation.finish();
      this._register();
      this._updatePromises();
    }, cancel:function() {
      this._updatePromises();
      this._animation.cancel();
      this._register();
      this._removeChildAnimations();
      this._updatePromises();
    }, reverse:function() {
      this._updatePromises();
      var a = this.currentTime;
      this._animation.reverse();
      this._forEachChild(function(a) {
        a.reverse();
      });
      null !== a && (this.currentTime = a);
      this._updatePromises();
    }, addEventListener:function(a, b) {
      var c = b;
      "function" == typeof b && (c = function(a) {
        a.target = this;
        b.call(this, a);
      }.bind(this), b._wrapper = c);
      this._animation.addEventListener(a, c);
    }, removeEventListener:function(a, b) {
      this._animation.removeEventListener(a, b && b._wrapper || b);
    }, _removeChildAnimations:function() {
      for (; this._childAnimations.length;) {
        this._childAnimations.pop().cancel();
      }
    }, _forEachChild:function(b) {
      var c = 0;
      if (this.effect.children && this._childAnimations.length < this.effect.children.length && this._constructChildAnimations(), this._childAnimations.forEach(function(a) {
        b.call(this, a, c);
        this.effect instanceof window.SequenceEffect && (c += a.effect.activeDuration);
      }.bind(this)), "pending" != this.playState) {
        var d = this.effect._timing, f = this.currentTime;
        null !== f && (f = a.calculateTimeFraction(a.calculateActiveDuration(d), f, d));
        (null == f || isNaN(f)) && this._removeChildAnimations();
      }
    }};
    window.Animation = b.Animation;
  })(c, f, null);
  (function(a, b, c) {
    function d(b) {
      this._frames = a.normalizeKeyframes(b);
    }
    function f() {
      for (var a = !1; y.length;) {
        y.shift()._updateChildren(), a = !0;
      }
      return a;
    }
    var g = function(a) {
      if (a._animation = void 0, a instanceof window.SequenceEffect || a instanceof window.GroupEffect) {
        for (var b = 0; b < a.children.length; b++) {
          g(a.children[b]);
        }
      }
    };
    b.removeMulti = function(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        d._parent ? (-1 == b.indexOf(d._parent) && b.push(d._parent), d._parent.children.splice(d._parent.children.indexOf(d), 1), d._parent = null, g(d)) : d._animation && d._animation.effect == d && (d._animation.cancel(), d._animation.effect = new KeyframeEffect(null, []), d._animation._callback && (d._animation._callback._animation = null), d._animation._rebuildUnderlyingAnimation(), g(d));
      }
      for (c = 0; c < b.length; c++) {
        b[c]._rebuild();
      }
    };
    b.KeyframeEffect = function(b, c, f, g) {
      return this.target = b, this._parent = null, f = a.numericTimingToObject(f), this._timingInput = a.cloneTimingInput(f), this._timing = a.normalizeTimingInput(f), this.timing = a.makeTiming(f, !1, this), this.timing._effect = this, "function" == typeof c ? (a.deprecated("Custom KeyframeEffect", "2015-06-22", "Use KeyframeEffect.onsample instead."), this._normalizedKeyframes = c) : this._normalizedKeyframes = new d(c), this._keyframes = c, this.activeDuration = a.calculateActiveDuration(this._timing), 
      this._id = g, this;
    };
    b.KeyframeEffect.prototype = {getFrames:function() {
      return "function" == typeof this._normalizedKeyframes ? this._normalizedKeyframes : this._normalizedKeyframes._frames;
    }, set onsample(a) {
      if ("function" == typeof this.getFrames()) {
        throw Error("Setting onsample on custom effect KeyframeEffect is not supported.");
      }
      this._onsample = a;
      this._animation && this._animation._rebuildUnderlyingAnimation();
    }, get parent() {
      return this._parent;
    }, clone:function() {
      if ("function" == typeof this.getFrames()) {
        throw Error("Cloning custom effects is not supported.");
      }
      var b = new KeyframeEffect(this.target, [], a.cloneTimingInput(this._timingInput), this._id);
      return b._normalizedKeyframes = this._normalizedKeyframes, b._keyframes = this._keyframes, b;
    }, remove:function() {
      b.removeMulti([this]);
    }};
    var h = Element.prototype.animate;
    Element.prototype.animate = function(a, c) {
      var d = "";
      return c && c.id && (d = c.id), b.timeline._play(new b.KeyframeEffect(this, a, c, d));
    };
    var m = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    b.newUnderlyingAnimationForKeyframeEffect = function(a) {
      if (a) {
        var b = a.target || m;
        var c = a._keyframes;
        "function" == typeof c && (c = []);
        var d = a._timingInput;
        d.id = a._id;
      } else {
        b = m, c = [], d = 0;
      }
      return h.apply(b, [c, d]);
    };
    b.bindAnimationForKeyframeEffect = function(a) {
      a.effect && "function" == typeof a.effect._normalizedKeyframes && b.bindAnimationForCustomEffect(a);
    };
    var y = [];
    b.awaitStartTime = function(a) {
      null === a.startTime && a._isGroup && (0 == y.length && requestAnimationFrame(f), y.push(a));
    };
    var q = window.getComputedStyle;
    Object.defineProperty(window, "getComputedStyle", {configurable:!0, enumerable:!0, value:function() {
      window.document.timeline._updateAnimationsPromises();
      var a = q.apply(this, arguments);
      return f() && (a = q.apply(this, arguments)), window.document.timeline._updateAnimationsPromises(), a;
    }});
    window.KeyframeEffect = b.KeyframeEffect;
    window.Element.prototype.getAnimations = function() {
      return document.timeline.getAnimations().filter(function(a) {
        return null !== a.effect && a.effect.target == this;
      }.bind(this));
    };
  })(c, f, null);
  (function(a, b, c) {
    function d(a) {
      a._registered || (a._registered = !0, h.push(a), m || (m = !0, requestAnimationFrame(f)));
    }
    function f(a) {
      a = h;
      h = [];
      a.sort(function(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      });
      a = a.filter(function(a) {
        a();
        var b = a._animation ? a._animation.playState : "idle";
        return "running" != b && "pending" != b && (a._registered = !1), a._registered;
      });
      h.push.apply(h, a);
      h.length ? (m = !0, requestAnimationFrame(f)) : m = !1;
    }
    var g = (document.createElementNS("http://www.w3.org/1999/xhtml", "div"), 0);
    b.bindAnimationForCustomEffect = function(b) {
      var c = b.effect.target, l = "function" == typeof b.effect.getFrames();
      var f = l ? b.effect.getFrames() : b.effect._onsample;
      var t = b.effect.timing, h = null, t = a.normalizeTimingInput(t), m = function() {
        var d = m._animation ? m._animation.currentTime : null;
        null !== d && (d = a.calculateTimeFraction(a.calculateActiveDuration(t), d, t), isNaN(d) && (d = null));
        d !== h && (l ? f(d, c, b.effect) : f(d, b.effect, b.effect._animation));
        h = d;
      };
      m._animation = b;
      m._registered = !1;
      m._sequenceNumber = g++;
      b._callback = m;
      d(m);
    };
    var h = [], m = !1;
    b.Animation.prototype._register = function() {
      this._callback && d(this._callback);
    };
  })(c, f, null);
  (function(a, b, c) {
    function d(a) {
      return a._timing.delay + a.activeDuration + a._timing.endDelay;
    }
    function f(b, c, d) {
      this._id = d;
      this._parent = null;
      this.children = b || [];
      this._reparent(this.children);
      c = a.numericTimingToObject(c);
      this._timingInput = a.cloneTimingInput(c);
      this._timing = a.normalizeTimingInput(c, !0);
      this.timing = a.makeTiming(c, !0, this);
      this.timing._effect = this;
      "auto" === this._timing.duration && (this._timing.duration = this.activeDuration);
    }
    window.SequenceEffect = function() {
      f.apply(this, arguments);
    };
    window.GroupEffect = function() {
      f.apply(this, arguments);
    };
    f.prototype = {_isAncestor:function(a) {
      for (var b = this; null !== b;) {
        if (b == a) {
          return !0;
        }
        b = b._parent;
      }
      return !1;
    }, _rebuild:function() {
      for (var a = this; a;) {
        "auto" === a.timing.duration && (a._timing.duration = a.activeDuration), a = a._parent;
      }
      this._animation && this._animation._rebuildUnderlyingAnimation();
    }, _reparent:function(a) {
      b.removeMulti(a);
      for (var c = 0; c < a.length; c++) {
        a[c]._parent = this;
      }
    }, _putChild:function(a, b) {
      for (var c = b ? "Cannot append an ancestor or self" : "Cannot prepend an ancestor or self", d = 0; d < a.length; d++) {
        if (this._isAncestor(a[d])) {
          throw {type:DOMException.HIERARCHY_REQUEST_ERR, name:"HierarchyRequestError", message:c};
        }
      }
      for (d = 0; d < a.length; d++) {
        b ? this.children.push(a[d]) : this.children.unshift(a[d]);
      }
      this._reparent(a);
      this._rebuild();
    }, append:function() {
      this._putChild(arguments, !0);
    }, prepend:function() {
      this._putChild(arguments, !1);
    }, get parent() {
      return this._parent;
    }, get firstChild() {
      return this.children.length ? this.children[0] : null;
    }, get lastChild() {
      return this.children.length ? this.children[this.children.length - 1] : null;
    }, clone:function() {
      for (var b = a.cloneTimingInput(this._timingInput), c = [], d = 0; d < this.children.length; d++) {
        c.push(this.children[d].clone());
      }
      return this instanceof GroupEffect ? new GroupEffect(c, b) : new SequenceEffect(c, b);
    }, remove:function() {
      b.removeMulti([this]);
    }};
    window.SequenceEffect.prototype = Object.create(f.prototype);
    Object.defineProperty(window.SequenceEffect.prototype, "activeDuration", {get:function() {
      var a = 0;
      return this.children.forEach(function(b) {
        a += d(b);
      }), Math.max(a, 0);
    }});
    window.GroupEffect.prototype = Object.create(f.prototype);
    Object.defineProperty(window.GroupEffect.prototype, "activeDuration", {get:function() {
      var a = 0;
      return this.children.forEach(function(b) {
        a = Math.max(a, d(b));
      }), a;
    }});
    b.newUnderlyingAnimationForGroup = function(c) {
      var d, f = null;
      c = new KeyframeEffect(null, [], c._timing, c._id);
      return c.onsample = function(b) {
        var c = d._wrapper;
        return c && "pending" != c.playState && c.effect ? null == b ? void c._removeChildAnimations() : 0 == b && 0 > c.playbackRate && (f || (f = a.normalizeTimingInput(c.effect.timing)), b = a.calculateTimeFraction(a.calculateActiveDuration(f), -1, f), isNaN(b) || null == b) ? (c._forEachChild(function(a) {
          a.currentTime = -1;
        }), void c._removeChildAnimations()) : void 0 : void 0;
      }, d = b.timeline._play(c);
    };
    b.bindAnimationForGroup = function(a) {
      a._animation._wrapper = a;
      a._isGroup = !0;
      b.awaitStartTime(a);
      a._constructChildAnimations();
      a._setExternalAnimation(a);
    };
    b.groupChildDuration = d;
  })(c, f, null);
  b["true"] = a;
}({}, function() {
  return this;
}());
Polymer({is:"cascaded-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  this._animations = [];
  var b = a.nodes, c = [], d = a.nodeDelay || 50;
  a.timing = a.timing || {};
  a.timing.delay = a.timing.delay || 0;
  for (var f = a.timing.delay, g, h, m = 0; h = b[m]; m++) {
    if (a.timing.delay += d, a.node = h, h = document.createElement(a.animation), h.isNeonAnimation) {
      var u = h.configure(a);
      this._animations.push(h);
      c.push(u);
    } else {
      console.warn(this.is + ":", a.animation, "not found!");
      g = !0;
      break;
    }
  }
  a.timing.delay = f;
  a.node = null;
  if (!g) {
    return this._effect = new GroupEffect(c);
  }
}, complete:function() {
  for (var a, b = 0; a = this._animations[b]; b++) {
    a.complete(a.config);
  }
}});
Polymer({is:"fade-in-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  return this._effect = new KeyframeEffect(a.node, [{opacity:"0"}, {opacity:"1"}], this.timingFromConfig(a));
}});
Polymer({is:"fade-out-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  return this._effect = new KeyframeEffect(a.node, [{opacity:"1"}, {opacity:"0"}], this.timingFromConfig(a));
}});
Polymer.NeonSharedElementAnimationBehaviorImpl = {properties:{sharedElements:{type:Object}}, findSharedElements:function(a) {
  var b = a.fromPage, c = a.toPage;
  if (!b || !c) {
    return console.warn(this.is + ":", b ? "toPage" : "fromPage", "is undefined!"), null;
  }
  if (!b.sharedElements || !c.sharedElements) {
    return console.warn(this.is + ":", "sharedElements are undefined for", b.sharedElements ? c : b), null;
  }
  var d = b.sharedElements[a.id], f = c.sharedElements[a.id];
  return d && f ? this.sharedElements = {from:d, to:f} : (console.warn(this.is + ":", "sharedElement with id", a.id, "not found in", d ? c : b), null);
}};
Polymer.NeonSharedElementAnimationBehavior = [Polymer.NeonAnimationBehavior, Polymer.NeonSharedElementAnimationBehaviorImpl];
Polymer({is:"hero-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (b) {
    var c = b.from.getBoundingClientRect(), d = b.to.getBoundingClientRect();
    this._effect = new KeyframeEffect(b.to, [{transform:"translate(" + (c.left - d.left) + "px," + (c.top - d.top) + "px) scale(" + c.width / d.width + "," + c.height / d.height + ")"}, {transform:"none"}], this.timingFromConfig(a));
    this.setPrefixedProperty(b.to, "transformOrigin", "0 0");
    b.to.style.zIndex = 10000;
    b.from.style.visibility = "hidden";
    return this._effect;
  }
}, complete:function(a) {
  a = this.findSharedElements(a);
  if (!a) {
    return null;
  }
  a.to.style.zIndex = "";
  a.from.style.visibility = "";
}});
Polymer({is:"opaque-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{opacity:"1"}, {opacity:"1"}], this.timingFromConfig(a));
  b.style.opacity = "0";
  return this._effect;
}, complete:function(a) {
  a.node.style.opacity = "";
}});
Polymer({is:"ripple-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (!b) {
    return null;
  }
  var c = b.to.getBoundingClientRect();
  if (a.gesture) {
    var d = a.gesture.x - (c.left + c.width / 2);
    var f = a.gesture.y - (c.top + c.height / 2);
  } else {
    var g = b.from.getBoundingClientRect();
    d = g.left + g.width / 2 - (c.left + c.width / 2);
    f = g.top + g.height / 2 - (c.top + c.height / 2);
  }
  g = "translate(" + d + "px," + f + "px)";
  d = Math.max(c.width + 2 * Math.abs(d), c.height + 2 * Math.abs(f));
  d = Math.sqrt(2 * d * d);
  this._effect = new KeyframeEffect(b.to, [{transform:g + " scale(0)"}, {transform:g + " " + ("scale(" + d / c.width + "," + d / c.height + ")")}], this.timingFromConfig(a));
  this.setPrefixedProperty(b.to, "transformOrigin", "50% 50%");
  b.to.style.borderRadius = "50%";
  return this._effect;
}, complete:function() {
  this.sharedElements && (this.setPrefixedProperty(this.sharedElements.to, "transformOrigin", ""), this.sharedElements.to.style.borderRadius = "");
}});
Polymer({is:"scale-down-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = "scale(0, 0)";
  "x" === a.axis ? c = "scale(0, 1)" : "y" === a.axis && (c = "scale(1, 0)");
  this._effect = new KeyframeEffect(b, [{transform:"scale(1,1)"}, {transform:c}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer({is:"scale-up-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = "scale(0)";
  "x" === a.axis ? c = "scale(0, 1)" : "y" === a.axis && (c = "scale(1, 0)");
  this._effect = new KeyframeEffect(b, [{transform:c}, {transform:"scale(1, 1)"}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer({is:"slide-down-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(0%)"}, {transform:"translateY(100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-up-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translate(0)"}, {transform:"translateY(-100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"transform-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:a.transformFrom || "none"}, {transform:a.transformTo || "none"}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer.NeonAnimatableBehavior = {properties:{animationConfig:{type:Object}, entryAnimation:{observer:"_entryAnimationChanged", type:String}, exitAnimation:{observer:"_exitAnimationChanged", type:String}}, _entryAnimationChanged:function() {
  this.animationConfig = this.animationConfig || {};
  this.animationConfig.entry = [{name:this.entryAnimation, node:this}];
}, _exitAnimationChanged:function() {
  this.animationConfig = this.animationConfig || {};
  this.animationConfig.exit = [{name:this.exitAnimation, node:this}];
}, _copyProperties:function(a, b) {
  for (var c in b) {
    a[c] = b[c];
  }
}, _cloneConfig:function(a) {
  var b = {isClone:!0};
  this._copyProperties(b, a);
  return b;
}, _getAnimationConfigRecursive:function(a, b, c) {
  if (this.animationConfig) {
    if (this.animationConfig.value && "function" === typeof this.animationConfig.value) {
      this._warn(this._logf("playAnimation", "Please put 'animationConfig' inside of your components 'properties' object instead of outside of it."));
    } else {
      var d = a ? this.animationConfig[a] : this.animationConfig;
      Array.isArray(d) || (d = [d]);
      if (d) {
        for (var f, g = 0; f = d[g]; g++) {
          if (f.animatable) {
            f.animatable._getAnimationConfigRecursive(f.type || a, b, c);
          } else {
            if (f.id) {
              var h = b[f.id];
              h ? (h.isClone || (b[f.id] = this._cloneConfig(h), h = b[f.id]), this._copyProperties(h, f)) : b[f.id] = f;
            } else {
              c.push(f);
            }
          }
        }
      }
    }
  }
}, getAnimationConfig:function(a) {
  var b = {}, c = [];
  this._getAnimationConfigRecursive(a, b, c);
  for (var d in b) {
    c.push(b[d]);
  }
  return c;
}};
Polymer.NeonAnimationRunnerBehaviorImpl = {properties:{_player:{type:Object}}, _configureAnimationEffects:function(a) {
  var b = [];
  if (0 < a.length) {
    for (var c, d = 0; c = a[d]; d++) {
      var f = document.createElement(c.name);
      if (f.isNeonAnimation) {
        var g = f.configure(c);
        g && b.push({animation:f, config:c, effect:g});
      } else {
        console.warn(this.is + ":", c.name, "not found!");
      }
    }
  }
  return b;
}, _runAnimationEffects:function(a) {
  return document.timeline.play(new GroupEffect(a));
}, _completeAnimations:function(a) {
  for (var b, c = 0; b = a[c]; c++) {
    b.animation.complete(b.config);
  }
}, playAnimation:function(a, b) {
  var c = this.getAnimationConfig(a);
  if (c) {
    try {
      var d = this._configureAnimationEffects(c), f = d.map(function(a) {
        return a.effect;
      });
      if (0 < f.length) {
        this._player = this._runAnimationEffects(f);
        this._player.onfinish = function() {
          this._completeAnimations(d);
          this._player && (this._player.cancel(), this._player = null);
          this.fire("neon-animation-finish", b, {bubbles:!1});
        }.bind(this);
        return;
      }
    } catch (g) {
      console.warn("Couldnt play", "(", a, c, ").", g);
    }
    this.fire("neon-animation-finish", b, {bubbles:!1});
  }
}, cancelAnimation:function() {
  this._player && this._player.cancel();
}};
Polymer.NeonAnimationRunnerBehavior = [Polymer.NeonAnimatableBehavior, Polymer.NeonAnimationRunnerBehaviorImpl];
(function() {
  Polymer({is:"neon-animated-pages", behaviors:[Polymer.IronResizableBehavior, Polymer.IronSelectableBehavior, Polymer.NeonAnimationRunnerBehavior], properties:{activateEvent:{type:String, value:""}, animateInitialSelection:{type:Boolean, value:!1}}, listeners:{"iron-select":"_onIronSelect", "neon-animation-finish":"_onNeonAnimationFinish"}, _onIronSelect:function(a) {
    var b = a.detail.item;
    0 > this.items.indexOf(b) || (a = this._valueToItem(this._prevSelected) || !1, this._prevSelected = this.selected, a || this.animateInitialSelection ? (this.animationConfig = [], this.animationConfig = [], this.entryAnimation ? this.animationConfig.push({name:this.entryAnimation, node:b}) : b.getAnimationConfig && this.animationConfig.push({animatable:b, type:"entry"}), a && (a.classList.contains("neon-animating") && (this._squelchNextFinishEvent = !0, this.cancelAnimation(), this._completeSelectedChanged(), 
    this._squelchNextFinishEvent = !1), this.exitAnimation ? this.animationConfig.push({name:this.exitAnimation, node:a}) : a.getAnimationConfig && this.animationConfig.push({animatable:a, type:"exit"}), a.classList.add("neon-animating")), b.classList.add("neon-animating"), 1 <= this.animationConfig.length ? this.isAttached ? this.playAnimation(void 0, {fromPage:a, toPage:b}) : this.async(function() {
      this.playAnimation(void 0, {fromPage:null, toPage:b});
    }) : this._completeSelectedChanged(a, b)) : this._completeSelectedChanged());
  }, _completeSelectedChanged:function(a, b) {
    b && b.classList.remove("neon-animating");
    a && a.classList.remove("neon-animating");
    if (!b || !a) {
      a = Polymer.dom(this.$.content).getDistributedNodes();
      for (var c = 0; b = a[c]; c++) {
        b.classList && b.classList.remove("neon-animating");
      }
    }
    this.async(this._notifyPageResize);
  }, _onNeonAnimationFinish:function(a) {
    this._squelchNextFinishEvent ? this._squelchNextFinishEvent = !1 : this._completeSelectedChanged(a.detail.fromPage, a.detail.toPage);
  }, _notifyPageResize:function() {
    var a = this.selectedItem || this._valueToItem(this.selected);
    this.resizerShouldNotify = function(b) {
      return b == a;
    };
    this.notifyResize();
  }});
})();
Polymer({is:"neon-animatable", behaviors:[Polymer.NeonAnimatableBehavior, Polymer.IronResizableBehavior]});
Polymer({is:"reverse-ripple-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (!b) {
    return null;
  }
  var c = b.from.getBoundingClientRect();
  if (a.gesture) {
    var d = a.gesture.x - (c.left + c.width / 2);
    var f = a.gesture.y - (c.top + c.height / 2);
  } else {
    var g = b.to.getBoundingClientRect();
    d = g.left + g.width / 2 - (c.left + c.width / 2);
    f = g.top + g.height / 2 - (c.top + c.height / 2);
  }
  g = "translate(" + d + "px," + f + "px)";
  d = Math.max(c.width + 2 * Math.abs(d), c.height + 2 * Math.abs(f));
  d = Math.sqrt(2 * d * d);
  this._effect = new KeyframeEffect(b.from, [{transform:g + " " + ("scale(" + d / c.width + "," + d / c.height + ")")}, {transform:g + " scale(0)"}], this.timingFromConfig(a));
  this.setPrefixedProperty(b.from, "transformOrigin", "50% 50%");
  b.from.style.borderRadius = "50%";
  return this._effect;
}, complete:function() {
  this.sharedElements && (this.setPrefixedProperty(this.sharedElements.from, "transformOrigin", ""), this.sharedElements.from.style.borderRadius = "");
}});
Polymer({is:"slide-from-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(-100%)"}, {transform:"none"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-from-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(100%)"}, {transform:"none"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-from-top-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(-100%)"}, {transform:"translateY(0%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-from-bottom-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(100%)"}, {transform:"translateY(0)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none"}, {transform:"translateX(-100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none"}, {transform:"translateX(100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer.NeonSharedElementAnimatableBehaviorImpl = {properties:{sharedElements:{type:Object, value:{}}}};
Polymer.NeonSharedElementAnimatableBehavior = [Polymer.NeonAnimatableBehavior, Polymer.NeonSharedElementAnimatableBehaviorImpl];
Polymer({is:"paper-card", properties:{heading:{type:String, value:"", observer:"_headingChanged"}, image:{type:String, value:""}, preloadImage:{type:Boolean, value:!1}, fadeImage:{type:Boolean, value:!1}, elevation:{type:Number, value:1, reflectToAttribute:!0}, animatedShadow:{type:Boolean, value:!1}, animated:{type:Boolean, reflectToAttribute:!0, readOnly:!0, computed:"_computeAnimated(animatedShadow)"}}, _headingChanged:function(a) {
  this.getAttribute("aria-label");
  this.setAttribute("aria-label", a);
}, _computeHeadingClass:function(a) {
  var b = "title-text";
  a && (b += " over-image");
  return b;
}, _computeAnimated:function(a) {
  return a;
}});
Polymer.IronCheckedElementBehaviorImpl = {properties:{checked:{type:Boolean, value:!1, reflectToAttribute:!0, notify:!0, observer:"_checkedChanged"}, toggles:{type:Boolean, value:!0, reflectToAttribute:!0}, value:{type:String, value:"on", observer:"_valueChanged"}}, observers:["_requiredChanged(required)"], created:function() {
  this._hasIronCheckedElementBehavior = !0;
}, _getValidity:function(a) {
  return this.disabled || !this.required || this.required && this.checked;
}, _requiredChanged:function() {
  this.required ? this.setAttribute("aria-required", "true") : this.removeAttribute("aria-required");
}, _checkedChanged:function() {
  this.active = this.checked;
  this.fire("iron-change");
}, _valueChanged:function() {
  if (void 0 === this.value || null === this.value) {
    this.value = "on";
  }
}};
Polymer.IronCheckedElementBehavior = [Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior, Polymer.IronCheckedElementBehaviorImpl];
Polymer.PaperInkyFocusBehaviorImpl = {observers:["_focusedChanged(receivedFocusFromKeyboard)"], _focusedChanged:function(a) {
  a && this.ensureRipple();
  this.hasRipple() && (this._ripple.holdDown = a);
}, _createRipple:function() {
  var a = Polymer.PaperRippleBehavior._createRipple();
  a.id = "ink";
  a.setAttribute("center", "");
  a.classList.add("circle");
  return a;
}};
Polymer.PaperInkyFocusBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperInkyFocusBehaviorImpl];
Polymer.PaperCheckedElementBehaviorImpl = {_checkedChanged:function() {
  Polymer.IronCheckedElementBehaviorImpl._checkedChanged.call(this);
  this.hasRipple() && (this.checked ? this._ripple.setAttribute("checked", "") : this._ripple.removeAttribute("checked"));
}, _buttonStateChanged:function() {
  Polymer.PaperRippleBehavior._buttonStateChanged.call(this);
  !this.disabled && this.isAttached && (this.checked = this.active);
}};
Polymer.PaperCheckedElementBehavior = [Polymer.PaperInkyFocusBehavior, Polymer.IronCheckedElementBehavior, Polymer.PaperCheckedElementBehaviorImpl];
Polymer({is:"paper-checkbox", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"checkbox", "aria-checked":!1, tabindex:0}, properties:{ariaActiveAttribute:{type:String, value:"aria-checked"}}, _computeCheckboxClass:function(a, b) {
  var c = "";
  a && (c += "checked ");
  b && (c += "invalid");
  return c;
}, _computeCheckmarkClass:function(a) {
  return a ? "" : "hidden";
}, _createRipple:function() {
  this._rippleContainer = this.$.checkboxContainer;
  return Polymer.PaperInkyFocusBehaviorImpl._createRipple.call(this);
}});
Polymer.PaperDialogBehaviorImpl = {hostAttributes:{role:"dialog", tabindex:"-1"}, properties:{modal:{type:Boolean, value:!1}}, observers:["_modalChanged(modal, _readied)"], listeners:{tap:"_onDialogClick"}, ready:function() {
  this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;
  this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;
  this.__prevWithBackdrop = this.withBackdrop;
}, _modalChanged:function(a, b) {
  a ? this.setAttribute("aria-modal", "true") : this.setAttribute("aria-modal", "false");
  b && (a ? (this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick, this.__prevNoCancelOnEscKey = this.noCancelOnEscKey, this.__prevWithBackdrop = this.withBackdrop, this.withBackdrop = this.noCancelOnEscKey = this.noCancelOnOutsideClick = !0) : (this.noCancelOnOutsideClick = this.noCancelOnOutsideClick && this.__prevNoCancelOnOutsideClick, this.noCancelOnEscKey = this.noCancelOnEscKey && this.__prevNoCancelOnEscKey, this.withBackdrop = this.withBackdrop && this.__prevWithBackdrop));
}, _updateClosingReasonConfirmed:function(a) {
  this.closingReason = this.closingReason || {};
  this.closingReason.confirmed = a;
}, _onDialogClick:function(a) {
  for (var b = Polymer.dom(a).path, c = 0; c < b.indexOf(this); c++) {
    var d = b[c];
    if (d.hasAttribute && (d.hasAttribute("dialog-dismiss") || d.hasAttribute("dialog-confirm"))) {
      this._updateClosingReasonConfirmed(d.hasAttribute("dialog-confirm"));
      this.close();
      a.stopPropagation();
      break;
    }
  }
}};
Polymer.PaperDialogBehavior = [Polymer.IronOverlayBehavior, Polymer.PaperDialogBehaviorImpl];
(function() {
  Polymer({is:"paper-dialog", behaviors:[Polymer.PaperDialogBehavior, Polymer.NeonAnimationRunnerBehavior], listeners:{"neon-animation-finish":"_onNeonAnimationFinish"}, _renderOpened:function() {
    this.cancelAnimation();
    this.withBackdrop && this.backdropElement.open();
    this.playAnimation("entry");
  }, _renderClosed:function() {
    this.cancelAnimation();
    this.withBackdrop && this.backdropElement.close();
    this.playAnimation("exit");
  }, _onNeonAnimationFinish:function() {
    this.opened ? this._finishRenderOpened() : this._finishRenderClosed();
  }});
})();
Polymer({is:"paper-dialog-scrollable", properties:{dialogElement:{type:Object}}, listeners:{"scrollable.scroll":"_scroll"}, get scrollTarget() {
  return this.$.scrollable;
}, ready:function() {
  this._ensureTarget();
}, attached:function() {
  this.classList.add("no-padding");
  this._ensureTarget();
  requestAnimationFrame(this._scroll.bind(this));
}, _scroll:function() {
  this.toggleClass("is-scrolled", 0 < this.scrollTarget.scrollTop);
  this.toggleClass("can-scroll", this.scrollTarget.offsetHeight < this.scrollTarget.scrollHeight);
  this.toggleClass("scrolled-to-bottom", this.scrollTarget.scrollTop + this.scrollTarget.offsetHeight >= this.scrollTarget.scrollHeight);
}, _ensureTarget:function() {
  (this.dialogElement = this.dialogElement || Polymer.dom(this).parentNode) && this.dialogElement.behaviors && 0 <= this.dialogElement.behaviors.indexOf(Polymer.PaperDialogBehaviorImpl) ? (this.dialogElement.sizingTarget = this.scrollTarget, this.scrollTarget.classList.remove("fit")) : this.dialogElement && this.scrollTarget.classList.add("fit");
}});
(function() {
  var a = null;
  Polymer({is:"paper-drawer-panel", behaviors:[Polymer.IronResizableBehavior], properties:{defaultSelected:{type:String, value:"main"}, disableEdgeSwipe:{type:Boolean, value:!1}, disableSwipe:{type:Boolean, value:!1}, dragging:{type:Boolean, value:!1, readOnly:!0, notify:!0}, drawerWidth:{type:String, value:"256px"}, edgeSwipeSensitivity:{type:Number, value:30}, forceNarrow:{type:Boolean, value:!1}, hasTransform:{type:Boolean, value:function() {
    return "transform" in this.style;
  }}, hasWillChange:{type:Boolean, value:function() {
    return "willChange" in this.style;
  }}, narrow:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, peeking:{type:Boolean, value:!1, readOnly:!0, notify:!0}, responsiveWidth:{type:String, value:"600px"}, rightDrawer:{type:Boolean, value:!1}, selected:{reflectToAttribute:!0, notify:!0, type:String, value:null}, drawerToggleAttribute:{type:String, value:"paper-drawer-toggle"}, drawerFocusSelector:{type:String, value:'a[href]:not([tabindex="-1"]),area[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),iframe:not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])'}, 
  _transition:{type:Boolean, value:!1}}, listeners:{tap:"_onTap", track:"_onTrack", down:"_downHandler", up:"_upHandler", transitionend:"_onTransitionEnd"}, observers:["_forceNarrowChanged(forceNarrow, defaultSelected)", "_toggleFocusListener(selected)"], ready:function() {
    this._transition = !0;
    this._boundFocusListener = this._didFocus.bind(this);
  }, togglePanel:function() {
    this._isMainSelected() ? this.openDrawer() : this.closeDrawer();
  }, openDrawer:function() {
    this.selected = "drawer";
  }, closeDrawer:function() {
    this.selected = "main";
  }, _onTransitionEnd:function(a) {
    Polymer.dom(a).localTarget === this && ("left" !== a.propertyName && "right" !== a.propertyName || this.notifyResize(), "transform" === a.propertyName && "drawer" === this.selected && (a = this._getAutoFocusedNode()) && a.focus());
  }, _computeIronSelectorClass:function(a, c, d, f, g) {
    a = {dragging:d, "narrow-layout":a, "right-drawer":f, "left-drawer":!f, transition:c, peeking:g};
    c = [];
    for (var b in a) {
      a.hasOwnProperty(b) && a[b] && c.push(b);
    }
    return c.join(" ");
  }, _computeDrawerStyle:function(a) {
    return "width:" + a + ";";
  }, _computeMainStyle:function(a, c, d) {
    var b = "" + ("left:" + (a || c ? "0" : d) + ";");
    c && (b += "right:" + (a ? "" : d) + ";");
    return b;
  }, _computeMediaQuery:function(a, c) {
    return a ? "" : "(max-width: " + c + ")";
  }, _computeSwipeOverlayHidden:function(a, c) {
    return !a || c;
  }, _onTrack:function(b) {
    if (!a || this === a) {
      switch(b.detail.state) {
        case "start":
          this._trackStart(b);
          break;
        case "track":
          this._trackX(b);
          break;
        case "end":
          this._trackEnd(b);
      }
    }
  }, _responsiveChange:function(a) {
    this._setNarrow(a);
    this.selected = this.narrow ? this.defaultSelected : null;
    this.setScrollDirection(this._swipeAllowed() ? "y" : "all");
    this.fire("paper-responsive-change", {narrow:this.narrow});
  }, _onQueryMatchesChanged:function(a) {
    this._responsiveChange(a.detail.value);
  }, _forceNarrowChanged:function() {
    this._responsiveChange(this.forceNarrow || this.$.mq.queryMatches);
  }, _swipeAllowed:function() {
    return this.narrow && !this.disableSwipe;
  }, _isMainSelected:function() {
    return "main" === this.selected;
  }, _startEdgePeek:function() {
    this.width = this.$.drawer.offsetWidth;
    this._moveDrawer(this._translateXForDeltaX(this.rightDrawer ? -this.edgeSwipeSensitivity : this.edgeSwipeSensitivity));
    this._setPeeking(!0);
  }, _stopEdgePeek:function() {
    this.peeking && (this._setPeeking(!1), this._moveDrawer(null));
  }, _downHandler:function(b) {
    !this.dragging && this._isMainSelected() && this._isEdgeTouch(b) && !a && (this._startEdgePeek(), b.preventDefault(), a = this);
  }, _upHandler:function() {
    this._stopEdgePeek();
    a = null;
  }, _onTap:function(a) {
    (a = Polymer.dom(a).localTarget) && this.drawerToggleAttribute && a.hasAttribute(this.drawerToggleAttribute) && this.togglePanel();
  }, _isEdgeTouch:function(a) {
    a = a.detail.x;
    return !this.disableEdgeSwipe && this._swipeAllowed() && (this.rightDrawer ? a >= this.offsetWidth - this.edgeSwipeSensitivity : a <= this.edgeSwipeSensitivity);
  }, _trackStart:function(b) {
    this._swipeAllowed() && (a = this, this._setDragging(!0), this._isMainSelected() && this._setDragging(this.peeking || this._isEdgeTouch(b)), this.dragging && (this.width = this.$.drawer.offsetWidth, this._transition = !1));
  }, _translateXForDeltaX:function(a) {
    var b = this._isMainSelected();
    return this.rightDrawer ? Math.max(0, b ? this.width + a : a) : Math.min(0, b ? a - this.width : a);
  }, _trackX:function(a) {
    if (this.dragging) {
      a = a.detail.dx;
      if (this.peeking) {
        if (Math.abs(a) <= this.edgeSwipeSensitivity) {
          return;
        }
        this._setPeeking(!1);
      }
      this._moveDrawer(this._translateXForDeltaX(a));
    }
  }, _trackEnd:function(b) {
    if (this.dragging) {
      if (b = 0 < b.detail.dx, this._setDragging(!1), this._transition = !0, a = null, this._moveDrawer(null), this.rightDrawer) {
        this[b ? "closeDrawer" : "openDrawer"]();
      } else {
        this[b ? "openDrawer" : "closeDrawer"]();
      }
    }
  }, _transformForTranslateX:function(a) {
    return null === a ? "" : this.hasWillChange ? "translateX(" + a + "px)" : "translate3d(" + a + "px, 0, 0)";
  }, _moveDrawer:function(a) {
    this.transform(this._transformForTranslateX(a), this.$.drawer);
  }, _getDrawerContent:function() {
    return Polymer.dom(this.$.drawerContent).getDistributedNodes()[0];
  }, _getAutoFocusedNode:function() {
    var a = this._getDrawerContent();
    return this.drawerFocusSelector ? Polymer.dom(a).querySelector(this.drawerFocusSelector) || a : null;
  }, _toggleFocusListener:function(a) {
    "drawer" === a ? this.addEventListener("focus", this._boundFocusListener, !0) : this.removeEventListener("focus", this._boundFocusListener, !0);
  }, _didFocus:function(a) {
    var b = this._getAutoFocusedNode();
    if (b) {
      var d = Polymer.dom(a).path, f = this._getDrawerContent();
      -1 === d.indexOf(f) && (a.stopPropagation(), b.focus());
    }
  }, _isDrawerClosed:function(a, c) {
    return !a || "drawer" !== c;
  }});
})();
Polymer({is:"paper-fab", behaviors:[Polymer.PaperButtonBehavior], properties:{src:{type:String, value:""}, icon:{type:String, value:""}, mini:{type:Boolean, value:!1, reflectToAttribute:!0}, label:{type:String, observer:"_labelChanged"}}, _labelChanged:function() {
  this.setAttribute("aria-label", this.label);
}, _computeIsIconFab:function(a, b) {
  return 0 < a.length || 0 < b.length;
}});
Polymer.PaperInputHelper = {};
Polymer.PaperInputHelper.NextLabelID = 1;
Polymer.PaperInputHelper.NextAddonID = 1;
Polymer.PaperInputBehaviorImpl = {properties:{label:{type:String}, value:{notify:!0, type:String}, disabled:{type:Boolean, value:!1}, invalid:{type:Boolean, value:!1, notify:!0}, preventInvalidInput:{type:Boolean}, allowedPattern:{type:String}, type:{type:String}, list:{type:String}, pattern:{type:String}, required:{type:Boolean, value:!1}, errorMessage:{type:String}, charCounter:{type:Boolean, value:!1}, noLabelFloat:{type:Boolean, value:!1}, alwaysFloatLabel:{type:Boolean, value:!1}, autoValidate:{type:Boolean, 
value:!1}, validator:{type:String}, autocomplete:{type:String, value:"off"}, autofocus:{type:Boolean}, inputmode:{type:String}, minlength:{type:Number}, maxlength:{type:Number}, min:{type:String}, max:{type:String}, step:{type:String}, name:{type:String}, placeholder:{type:String, value:""}, readonly:{type:Boolean, value:!1}, size:{type:Number}, autocapitalize:{type:String, value:"none"}, autocorrect:{type:String, value:"off"}, autosave:{type:String}, results:{type:Number}, accept:{type:String}, 
multiple:{type:Boolean}, _ariaDescribedBy:{type:String, value:""}, _ariaLabelledBy:{type:String, value:""}}, listeners:{"addon-attached":"_onAddonAttached"}, keyBindings:{"shift+tab:keydown":"_onShiftTabDown"}, hostAttributes:{tabindex:0}, get inputElement() {
  return this.$.input;
}, get _focusableElement() {
  return this.inputElement;
}, registered:function() {
  this._typesThatHaveText = "date datetime datetime-local month time week file".split(" ");
}, attached:function() {
  this._updateAriaLabelledBy();
  this.inputElement && -1 !== this._typesThatHaveText.indexOf(this.inputElement.type) && (this.alwaysFloatLabel = !0);
}, _appendStringWithSpace:function(a, b) {
  return a ? a + " " + b : b;
}, _onAddonAttached:function(a) {
  a = a.path ? a.path[0] : a.target;
  if (a.id) {
    this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, a.id);
  } else {
    var b = "paper-input-add-on-" + Polymer.PaperInputHelper.NextAddonID++;
    a.id = b;
    this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, b);
  }
}, validate:function() {
  return this.inputElement.validate();
}, _focusBlurHandler:function(a) {
  this._shiftTabPressed || (Polymer.IronControlState._focusBlurHandler.call(this, a), this.focused && this._focusableElement.focus());
}, _onShiftTabDown:function(a) {
  var b = this.getAttribute("tabindex");
  this._shiftTabPressed = !0;
  this.setAttribute("tabindex", "-1");
  this.async(function() {
    this.setAttribute("tabindex", b);
    this._shiftTabPressed = !1;
  }, 1);
}, _handleAutoValidate:function() {
  this.autoValidate && this.validate();
}, updateValueAndPreserveCaret:function(a) {
  try {
    var b = this.inputElement.selectionStart;
    this.value = a;
    this.inputElement.selectionStart = b;
    this.inputElement.selectionEnd = b;
  } catch (c) {
    this.value = a;
  }
}, _computeAlwaysFloatLabel:function(a, b) {
  return b || a;
}, _updateAriaLabelledBy:function() {
  var a = Polymer.dom(this.root).querySelector("label");
  if (a) {
    if (a.id) {
      var b = a.id;
    } else {
      b = "paper-input-label-" + Polymer.PaperInputHelper.NextLabelID++, a.id = b;
    }
    this._ariaLabelledBy = b;
  } else {
    this._ariaLabelledBy = "";
  }
}, _onChange:function(a) {
  this.shadowRoot && this.fire(a.type, {sourceEvent:a}, {node:this, bubbles:a.bubbles, cancelable:a.cancelable});
}};
Polymer.PaperInputBehavior = [Polymer.IronControlState, Polymer.IronA11yKeysBehavior, Polymer.PaperInputBehaviorImpl];
Polymer.PaperInputAddonBehavior = {hostAttributes:{"add-on":""}, attached:function() {
  this.fire("addon-attached");
}, update:function(a) {
}};
Polymer({is:"paper-input-char-counter", behaviors:[Polymer.PaperInputAddonBehavior], properties:{_charCounterStr:{type:String, value:"0"}}, update:function(a) {
  if (a.inputElement) {
    a.value = a.value || "";
    var b = a.value.length.toString();
    a.inputElement.hasAttribute("maxlength") && (b += "/" + a.inputElement.getAttribute("maxlength"));
    this._charCounterStr = b;
  }
}});
Polymer({is:"paper-input-container", properties:{noLabelFloat:{type:Boolean, value:!1}, alwaysFloatLabel:{type:Boolean, value:!1}, attrForValue:{type:String, value:"bind-value"}, autoValidate:{type:Boolean, value:!1}, invalid:{observer:"_invalidChanged", type:Boolean, value:!1}, focused:{readOnly:!0, type:Boolean, value:!1, notify:!0}, _addons:{type:Array}, _inputHasContent:{type:Boolean, value:!1}, _inputSelector:{type:String, value:"input,textarea,.paper-input-input"}, _boundOnFocus:{type:Function, 
value:function() {
  return this._onFocus.bind(this);
}}, _boundOnBlur:{type:Function, value:function() {
  return this._onBlur.bind(this);
}}, _boundOnInput:{type:Function, value:function() {
  return this._onInput.bind(this);
}}, _boundValueChanged:{type:Function, value:function() {
  return this._onValueChanged.bind(this);
}}}, listeners:{"addon-attached":"_onAddonAttached", "iron-input-validate":"_onIronInputValidate"}, get _valueChangedEvent() {
  return this.attrForValue + "-changed";
}, get _propertyForValue() {
  return Polymer.CaseMap.dashToCamelCase(this.attrForValue);
}, get _inputElement() {
  return Polymer.dom(this).querySelector(this._inputSelector);
}, get _inputElementValue() {
  return this._inputElement[this._propertyForValue] || this._inputElement.value;
}, ready:function() {
  this._addons || (this._addons = []);
  this.addEventListener("focus", this._boundOnFocus, !0);
  this.addEventListener("blur", this._boundOnBlur, !0);
}, attached:function() {
  this.attrForValue ? this._inputElement.addEventListener(this._valueChangedEvent, this._boundValueChanged) : this.addEventListener("input", this._onInput);
  "" != this._inputElementValue ? this._handleValueAndAutoValidate(this._inputElement) : this._handleValue(this._inputElement);
}, _onAddonAttached:function(a) {
  this._addons || (this._addons = []);
  a = a.target;
  -1 === this._addons.indexOf(a) && (this._addons.push(a), this.isAttached && this._handleValue(this._inputElement));
}, _onFocus:function() {
  this._setFocused(!0);
}, _onBlur:function() {
  this._setFocused(!1);
  this._handleValueAndAutoValidate(this._inputElement);
}, _onInput:function(a) {
  this._handleValueAndAutoValidate(a.target);
}, _onValueChanged:function(a) {
  this._handleValueAndAutoValidate(a.target);
}, _handleValue:function(a) {
  var b = this._inputElementValue;
  b || 0 === b || "number" === a.type && !a.checkValidity() ? this._inputHasContent = !0 : this._inputHasContent = !1;
  this.updateAddons({inputElement:a, value:b, invalid:this.invalid});
}, _handleValueAndAutoValidate:function(a) {
  this.autoValidate && (this.invalid = !(a.validate ? a.validate(this._inputElementValue) : a.checkValidity()));
  this._handleValue(a);
}, _onIronInputValidate:function(a) {
  this.invalid = this._inputElement.invalid;
}, _invalidChanged:function() {
  this._addons && this.updateAddons({invalid:this.invalid});
}, updateAddons:function(a) {
  for (var b, c = 0; b = this._addons[c]; c++) {
    b.update(a);
  }
}, _computeInputContentClass:function(a, b, c, d, f) {
  var g = "input-content";
  a ? f && (g += " label-is-hidden") : (a = this.querySelector("label"), b || f ? (g += " label-is-floating", this.$.labelAndInputContainer.style.position = "static", d ? g += " is-invalid" : c && (g += " label-is-highlighted")) : a && (this.$.labelAndInputContainer.style.position = "relative"));
  return g;
}, _computeUnderlineClass:function(a, b) {
  var c = "underline";
  b ? c += " is-invalid" : a && (c += " is-highlighted");
  return c;
}, _computeAddOnContentClass:function(a, b) {
  var c = "add-on-content";
  b ? c += " is-invalid" : a && (c += " is-highlighted");
  return c;
}});
Polymer({is:"paper-input-error", behaviors:[Polymer.PaperInputAddonBehavior], properties:{invalid:{readOnly:!0, reflectToAttribute:!0, type:Boolean}}, update:function(a) {
  this._setInvalid(a.invalid);
}});
Polymer({is:"paper-input", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior]});
(function() {
  Polymer.IronDropdownScrollManager = {get currentLockingElement() {
    return this._lockingElements[this._lockingElements.length - 1];
  }, elementIsScrollLocked:function(a) {
    var b = this.currentLockingElement;
    if (void 0 === b) {
      return !1;
    }
    if (this._hasCachedLockedElement(a)) {
      return !0;
    }
    if (this._hasCachedUnlockedElement(a)) {
      return !1;
    }
    (b = !!b && b !== a && !this._composedTreeContains(b, a)) ? this._lockedElementCache.push(a) : this._unlockedElementCache.push(a);
    return b;
  }, pushScrollLock:function(a) {
    0 <= this._lockingElements.indexOf(a) || (0 === this._lockingElements.length && this._lockScrollInteractions(), this._lockingElements.push(a), this._lockedElementCache = [], this._unlockedElementCache = []);
  }, removeScrollLock:function(a) {
    a = this._lockingElements.indexOf(a);
    -1 !== a && (this._lockingElements.splice(a, 1), this._lockedElementCache = [], this._unlockedElementCache = [], 0 === this._lockingElements.length && this._unlockScrollInteractions());
  }, _lockingElements:[], _lockedElementCache:null, _unlockedElementCache:null, _originalBodyStyles:{}, _isScrollingKeypress:function(a) {
    return Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "pageup pagedown home end up left down right");
  }, _hasCachedLockedElement:function(a) {
    return -1 < this._lockedElementCache.indexOf(a);
  }, _hasCachedUnlockedElement:function(a) {
    return -1 < this._unlockedElementCache.indexOf(a);
  }, _composedTreeContains:function(a, b) {
    var c, d;
    if (a.contains(b)) {
      return !0;
    }
    a = Polymer.dom(a).querySelectorAll("content");
    for (c = 0; c < a.length; ++c) {
      var f = Polymer.dom(a[c]).getDistributedNodes();
      for (d = 0; d < f.length; ++d) {
        if (this._composedTreeContains(f[d], b)) {
          return !0;
        }
      }
    }
    return !1;
  }, _scrollInteractionHandler:function(a) {
    var b = Polymer.dom(a).rootTarget;
    Polymer.IronDropdownScrollManager.elementIsScrollLocked(b) && ("keydown" !== a.type || Polymer.IronDropdownScrollManager._isScrollingKeypress(a)) && a.preventDefault();
  }, _lockScrollInteractions:function() {
    this._originalBodyStyles.overflow = document.body.style.overflow;
    this._originalBodyStyles.overflowX = document.body.style.overflowX;
    this._originalBodyStyles.overflowY = document.body.style.overflowY;
    document.body.style.overflow = "hidden";
    document.body.style.overflowX = "hidden";
    document.body.style.overflowY = "hidden";
    document.addEventListener("wheel", this._scrollInteractionHandler, !0);
    document.addEventListener("mousewheel", this._scrollInteractionHandler, !0);
    document.addEventListener("DOMMouseScroll", this._scrollInteractionHandler, !0);
    document.addEventListener("touchmove", this._scrollInteractionHandler, !0);
    document.addEventListener("keydown", this._scrollInteractionHandler, !0);
  }, _unlockScrollInteractions:function() {
    document.body.style.overflow = this._originalBodyStyles.overflow;
    document.body.style.overflowX = this._originalBodyStyles.overflowX;
    document.body.style.overflowY = this._originalBodyStyles.overflowY;
    document.removeEventListener("wheel", this._scrollInteractionHandler, !0);
    document.removeEventListener("mousewheel", this._scrollInteractionHandler, !0);
    document.removeEventListener("DOMMouseScroll", this._scrollInteractionHandler, !0);
    document.removeEventListener("touchmove", this._scrollInteractionHandler, !0);
    document.removeEventListener("keydown", this._scrollInteractionHandler, !0);
  }};
})();
(function() {
  Polymer({is:"iron-dropdown", behaviors:[Polymer.IronControlState, Polymer.IronA11yKeysBehavior, Polymer.IronOverlayBehavior, Polymer.NeonAnimationRunnerBehavior], properties:{horizontalAlign:{type:String, value:"left", reflectToAttribute:!0}, verticalAlign:{type:String, value:"top", reflectToAttribute:!0}, openAnimationConfig:{type:Object}, closeAnimationConfig:{type:Object}, focusTarget:{type:Object}, noAnimations:{type:Boolean, value:!1}, allowOutsideScroll:{type:Boolean, value:!1}}, listeners:{"neon-animation-finish":"_onNeonAnimationFinish"}, 
  observers:["_updateOverlayPosition(positionTarget, verticalAlign, horizontalAlign, verticalOffset, horizontalOffset)"], get containedElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, get _focusTarget() {
    return this.focusTarget || this.containedElement;
  }, detached:function() {
    this.cancelAnimation();
    Polymer.IronDropdownScrollManager.removeScrollLock(this);
  }, _openedChanged:function() {
    this.opened && this.disabled ? this.cancel() : (this.cancelAnimation(), this.sizingTarget = this.containedElement || this.sizingTarget, this._updateAnimationConfig(), this.opened && !this.allowOutsideScroll ? Polymer.IronDropdownScrollManager.pushScrollLock(this) : Polymer.IronDropdownScrollManager.removeScrollLock(this), Polymer.IronOverlayBehaviorImpl._openedChanged.apply(this, arguments));
  }, _renderOpened:function() {
    !this.noAnimations && this.animationConfig.open ? (this.$.contentWrapper.classList.add("animating"), this.playAnimation("open")) : Polymer.IronOverlayBehaviorImpl._renderOpened.apply(this, arguments);
  }, _renderClosed:function() {
    !this.noAnimations && this.animationConfig.close ? (this.$.contentWrapper.classList.add("animating"), this.playAnimation("close")) : Polymer.IronOverlayBehaviorImpl._renderClosed.apply(this, arguments);
  }, _onNeonAnimationFinish:function() {
    this.$.contentWrapper.classList.remove("animating");
    this.opened ? this._finishRenderOpened() : this._finishRenderClosed();
  }, _updateAnimationConfig:function() {
    for (var a = (this.openAnimationConfig || []).concat(this.closeAnimationConfig || []), b = 0; b < a.length; b++) {
      a[b].node = this.containedElement;
    }
    this.animationConfig = {open:this.openAnimationConfig, close:this.closeAnimationConfig};
  }, _updateOverlayPosition:function() {
    this.isAttached && this.notifyResize();
  }, _applyFocus:function() {
    var a = this.focusTarget || this.containedElement;
    a && this.opened && !this.noAutoFocus ? a.focus() : Polymer.IronOverlayBehaviorImpl._applyFocus.apply(this, arguments);
  }});
})();
Polymer({is:"paper-menu-grow-height-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().height;
  return this._effect = new KeyframeEffect(b, [{height:c / 2 + "px"}, {height:c + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-grow-width-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().width;
  return this._effect = new KeyframeEffect(b, [{width:c / 2 + "px"}, {width:c + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-shrink-width-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().width;
  return this._effect = new KeyframeEffect(b, [{width:c + "px"}, {width:c - c / 20 + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-shrink-height-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().height;
  this.setPrefixedProperty(b, "transformOrigin", "0 0");
  return this._effect = new KeyframeEffect(b, [{height:c + "px", transform:"translateY(0)"}, {height:c / 2 + "px", transform:"translateY(-20px)"}], this.timingFromConfig(a));
}});
(function() {
  var a = Polymer({is:"paper-menu-button", behaviors:[Polymer.IronA11yKeysBehavior, Polymer.IronControlState], properties:{opened:{type:Boolean, value:!1, notify:!0, observer:"_openedChanged"}, horizontalAlign:{type:String, value:"left", reflectToAttribute:!0}, verticalAlign:{type:String, value:"top", reflectToAttribute:!0}, horizontalOffset:{type:Number, value:0, notify:!0}, verticalOffset:{type:Number, value:0, notify:!0}, noAnimations:{type:Boolean, value:!1}, ignoreSelect:{type:Boolean, value:!1}, 
  openAnimationConfig:{type:Object, value:function() {
    return [{name:"fade-in-animation", timing:{delay:100, duration:200}}, {name:"paper-menu-grow-width-animation", timing:{delay:100, duration:150, easing:a.ANIMATION_CUBIC_BEZIER}}, {name:"paper-menu-grow-height-animation", timing:{delay:100, duration:275, easing:a.ANIMATION_CUBIC_BEZIER}}];
  }}, closeAnimationConfig:{type:Object, value:function() {
    return [{name:"fade-out-animation", timing:{duration:150}}, {name:"paper-menu-shrink-width-animation", timing:{delay:100, duration:50, easing:a.ANIMATION_CUBIC_BEZIER}}, {name:"paper-menu-shrink-height-animation", timing:{duration:200, easing:"ease-in"}}];
  }}, _dropdownContent:{type:Object}}, hostAttributes:{role:"group", "aria-haspopup":"true"}, listeners:{"iron-select":"_onIronSelect"}, get contentElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, toggle:function() {
    this.opened ? this.close() : this.open();
  }, open:function() {
    this.disabled || this.$.dropdown.open();
  }, close:function() {
    this.$.dropdown.close();
  }, _onIronSelect:function(a) {
    this.ignoreSelect || this.close();
  }, _openedChanged:function(a, c) {
    a ? (this._dropdownContent = this.contentElement, this.fire("paper-dropdown-open")) : null != c && this.fire("paper-dropdown-close");
  }, _disabledChanged:function(a) {
    Polymer.IronControlState._disabledChanged.apply(this, arguments);
    a && this.opened && this.close();
  }, __onIronOverlayCanceled:function(a) {
    var b = a.detail;
    Polymer.dom(b);
    var d = this.$.trigger;
    -1 < Polymer.dom(b).path.indexOf(d) && a.preventDefault();
  }});
  a.ANIMATION_CUBIC_BEZIER = "cubic-bezier(.3,.95,.5,1)";
  a.MAX_ANIMATION_TIME_MS = 400;
  Polymer.PaperMenuButton = a;
})();
(function() {
  Polymer({is:"paper-dropdown-menu", behaviors:[Polymer.IronButtonState, Polymer.IronControlState, Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior], properties:{selectedItemLabel:{type:String, notify:!0, readOnly:!0}, selectedItem:{type:Object, notify:!0, readOnly:!0}, value:{type:String, notify:!0, readOnly:!0}, label:{type:String}, placeholder:{type:String}, errorMessage:{type:String}, opened:{type:Boolean, notify:!0, value:!1, observer:"_openedChanged"}, noLabelFloat:{type:Boolean, 
  value:!1, reflectToAttribute:!0}, alwaysFloatLabel:{type:Boolean, value:!1}, noAnimations:{type:Boolean, value:!1}, horizontalAlign:{type:String, value:"right"}, verticalAlign:{type:String, value:"top"}}, listeners:{tap:"_onTap"}, keyBindings:{"up down":"open", esc:"close"}, hostAttributes:{role:"combobox", "aria-autocomplete":"none", "aria-haspopup":"true"}, observers:["_selectedItemChanged(selectedItem)"], attached:function() {
    var a = this.contentElement;
    a && a.selectedItem && this._setSelectedItem(a.selectedItem);
  }, get contentElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, open:function() {
    this.$.menuButton.open();
  }, close:function() {
    this.$.menuButton.close();
  }, _onIronSelect:function(a) {
    this._setSelectedItem(a.detail.item);
  }, _onIronDeselect:function(a) {
    this._setSelectedItem(null);
  }, _onTap:function(a) {
    Polymer.Gestures.findOriginalTarget(a) === this && this.open();
  }, _selectedItemChanged:function(a) {
    a = a ? a.label || a.textContent.trim() : "";
    this._setValue(a);
    this._setSelectedItemLabel(a);
  }, _computeMenuVerticalOffset:function(a) {
    return a ? -4 : 8;
  }, _getValidity:function(a) {
    return this.disabled || !this.required || this.required && !!this.value;
  }, _openedChanged:function() {
    var a = this.opened ? "true" : "false", b = this.contentElement;
    b && b.setAttribute("aria-expanded", a);
  }});
})();
(function() {
  var a = {scroll:!0}, b = {standard:2, waterfall:1, "waterfall-tall":1}, c = {"waterfall-tall":!0};
  Polymer({is:"paper-header-panel", properties:{mode:{type:String, value:"standard", observer:"_modeChanged", reflectToAttribute:!0}, shadow:{type:Boolean, value:!1}, tallClass:{type:String, value:"tall"}, atTop:{type:Boolean, value:!0, notify:!0, readOnly:!0, reflectToAttribute:!0}}, observers:["_computeDropShadowHidden(atTop, mode, shadow)"], ready:function() {
    this.scrollHandler = this._scroll.bind(this);
  }, attached:function() {
    this._addListener();
    this._keepScrollingState();
  }, detached:function() {
    this._removeListener();
  }, get header() {
    return Polymer.dom(this.$.headerContent).getDistributedNodes()[0];
  }, get scroller() {
    return this._getScrollerForMode(this.mode);
  }, get visibleShadow() {
    return this.$.dropShadow.classList.contains("has-shadow");
  }, _computeDropShadowHidden:function(a, c, g) {
    c = b[c];
    this.shadow ? this.toggleClass("has-shadow", !0, this.$.dropShadow) : 2 === c ? this.toggleClass("has-shadow", !0, this.$.dropShadow) : 1 !== c || a ? this.toggleClass("has-shadow", !1, this.$.dropShadow) : this.toggleClass("has-shadow", !0, this.$.dropShadow);
  }, _computeMainContainerClass:function(a) {
    var b = {};
    b.flex = "cover" !== a;
    return Object.keys(b).filter(function(a) {
      return b[a];
    }).join(" ");
  }, _addListener:function() {
    this.scroller.addEventListener("scroll", this.scrollHandler, !1);
  }, _removeListener:function() {
    this.scroller.removeEventListener("scroll", this.scrollHandler);
  }, _modeChanged:function(a, b) {
    var d = this.header;
    d && (c[b] && !c[a] ? (d.classList.remove(this.tallClass), this.async(function() {
      d.classList.remove("animate");
    }, 200)) : this.toggleClass("animate", c[a], d));
    this._keepScrollingState();
  }, _keepScrollingState:function() {
    var a = this.scroller, b = this.header;
    this._setAtTop(0 === a.scrollTop);
    b && this.tallClass && c[this.mode] && this.toggleClass(this.tallClass, this.atTop || b.classList.contains(this.tallClass) && a.scrollHeight < this.offsetHeight, b);
  }, _scroll:function() {
    this._keepScrollingState();
    this.fire("content-scroll", {target:this.scroller}, {bubbles:!1});
  }, _getScrollerForMode:function(b) {
    return a[b] ? this : this.$.mainContainer;
  }});
})();
(function() {
  Polymer.PaperScrollHeaderPanel = Polymer({is:"paper-scroll-header-panel", behaviors:[Polymer.IronResizableBehavior], properties:{condenses:{type:Boolean, value:!1}, noDissolve:{type:Boolean, value:!1}, noReveal:{type:Boolean, value:!1}, fixed:{type:Boolean, value:!1}, keepCondensedHeader:{type:Boolean, value:!1}, headerHeight:{type:Number, value:0}, condensedHeaderHeight:{type:Number, value:0}, scrollAwayTopbar:{type:Boolean, value:!1}, headerState:{type:Number, readOnly:!0, notify:!0, value:0}, 
  _defaultCondsensedHeaderHeight:{type:Number, value:0}}, observers:["_setup(headerHeight, condensedHeaderHeight, fixed)", "_condensedHeaderHeightChanged(condensedHeaderHeight)", "_headerHeightChanged(headerHeight, condensedHeaderHeight)", "_condensesChanged(condenses)"], listeners:{"iron-resize":"measureHeaderHeight"}, ready:function() {
    this._scrollHandler = this._scroll.bind(this);
    this.scroller.addEventListener("scroll", this._scrollHandler);
  }, attached:function() {
    this.async(this.measureHeaderHeight, 1);
  }, get header() {
    return Polymer.dom(this.$.headerContent).getDistributedNodes()[0];
  }, get content() {
    return Polymer.dom(this.$.mainContent).getDistributedNodes()[0];
  }, get scroller() {
    return this.$.mainContainer;
  }, get _headerMaxDelta() {
    return this.keepCondensedHeader ? this._headerMargin : this.headerHeight;
  }, get _headerMargin() {
    return this.headerHeight - this.condensedHeaderHeight;
  }, _y:0, _prevScrollTop:0, measureHeaderHeight:function() {
    var a = this.header;
    a && a.offsetHeight && (this.headerHeight = a.offsetHeight);
  }, scroll:function(a, b) {
    if (b) {
      var c = Math.random(), d = Date.now(), f = this.scroller.scrollTop, g = a - f;
      this._currentAnimationId = c;
      (function m() {
        var b = Date.now() - d;
        if (200 < b) {
          this.scroller.scrollTop = a, this._updateScrollState(a);
        } else {
          if (this._currentAnimationId === c) {
            var r = this.scroller, b = b / 200;
            r.scrollTop = -g * b * (b - 2) + f;
            requestAnimationFrame(m.bind(this));
          }
        }
      }).call(this);
    } else {
      this.scroller.scrollTop = a, this._updateScrollState(a);
    }
  }, condense:function(a) {
    if (this.condenses && !this.fixed && !this.noReveal) {
      switch(this.headerState) {
        case 1:
          this.scroll(this.scroller.scrollTop - (this._headerMaxDelta - this._headerMargin), a);
          break;
        case 0:
        case 3:
          this.scroll(this._headerMargin, a);
      }
    }
  }, scrollToTop:function(a) {
    this.scroll(0, a);
  }, _headerHeightChanged:function(a) {
    null !== this._defaultCondsensedHeaderHeight && (this.condensedHeaderHeight = this._defaultCondsensedHeaderHeight = Math.round(1 * a / 3));
  }, _condensedHeaderHeightChanged:function(a) {
    a && this._defaultCondsensedHeaderHeight != a && (this._defaultCondsensedHeaderHeight = null);
  }, _condensesChanged:function() {
    this._updateScrollState(this.scroller.scrollTop);
    this._condenseHeader(null);
  }, _setup:function() {
    var a = this.scroller.style;
    a.paddingTop = this.fixed ? "" : this.headerHeight + "px";
    a.top = this.fixed ? this.headerHeight + "px" : "";
    if (this.fixed) {
      this._setHeaderState(0), this._transformHeader(null);
    } else {
      switch(this.headerState) {
        case 1:
          this._transformHeader(this._headerMaxDelta);
          break;
        case 2:
          this._transformHeader(this._headerMargin);
      }
    }
  }, _transformHeader:function(a) {
    this._translateY(this.$.headerContainer, -a);
    this.condenses && this._condenseHeader(a);
    this.fire("paper-header-transform", {y:a, height:this.headerHeight, condensedHeight:this.condensedHeaderHeight});
  }, _condenseHeader:function(a) {
    var b = null === a;
    !this.scrollAwayTopbar && this.header && this.header.$ && this.header.$.topBar && this._translateY(this.header.$.topBar, b ? null : Math.min(a, this._headerMargin));
    this.noDissolve || (this.$.headerBg.style.opacity = b ? "" : (this._headerMargin - a) / this._headerMargin);
    this._translateY(this.$.headerBg, b ? null : a / 2);
    this.noDissolve || (this.$.condensedHeaderBg.style.opacity = b ? "" : a / this._headerMargin, this._translateY(this.$.condensedHeaderBg, b ? null : a / 2));
  }, _translateY:function(a, b) {
    this.transform(null === b ? "" : "translate3d(0, " + b + "px, 0)", a);
  }, _scroll:function(a) {
    this.header && (this._updateScrollState(this.scroller.scrollTop), this.fire("content-scroll", {target:this.scroller}, {cancelable:!1}));
  }, _updateScrollState:function(a) {
    var b = a - this._prevScrollTop, b = Math.max(0, this.noReveal ? a : this._y + b);
    b > this._headerMaxDelta ? (b = this._headerMaxDelta, this.keepCondensedHeader ? this._setHeaderState(2) : this._setHeaderState(1)) : this.condenses && a >= this._headerMargin ? (b = Math.max(b, this._headerMargin), this._setHeaderState(2)) : 0 === b ? this._setHeaderState(0) : this._setHeaderState(3);
    this.fixed || b === this._y || this._transformHeader(b);
    this._prevScrollTop = Math.max(a, 0);
    this._y = b;
  }});
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_EXPANDED = 0;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_HIDDEN = 1;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_CONDENSED = 2;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_INTERPOLATED = 3;
})();
Polymer({is:"paper-icon-button", hostAttributes:{role:"button", tabindex:"0"}, behaviors:[Polymer.PaperInkyFocusBehavior], properties:{src:{type:String}, icon:{type:String}, alt:{type:String, observer:"_altChanged"}}, _altChanged:function(a, b) {
  var c = this.getAttribute("aria-label");
  c && b != c || this.setAttribute("aria-label", a);
}});
Polymer({is:"paper-textarea", behaviors:[Polymer.PaperInputBehavior, Polymer.IronFormElementBehavior], properties:{_ariaLabelledBy:{observer:"_ariaLabelledByChanged", type:String}, _ariaDescribedBy:{observer:"_ariaDescribedByChanged", type:String}, rows:{type:Number, value:1}, maxRows:{type:Number, value:0}}, _ariaLabelledByChanged:function(a) {
  this.$.input.textarea.setAttribute("aria-labelledby", a);
}, _ariaDescribedByChanged:function(a) {
  this.$.input.textarea.setAttribute("aria-describedby", a);
}, get _focusableElement() {
  return this.$.input.textarea;
}});
Polymer.PaperItemBehaviorImpl = {hostAttributes:{role:"option", tabindex:"0"}};
Polymer.PaperItemBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperItemBehaviorImpl];
Polymer({is:"paper-icon-item", behaviors:[Polymer.PaperItemBehavior]});
Polymer({is:"paper-item-body"});
Polymer({is:"paper-item", behaviors:[Polymer.PaperItemBehavior]});
Polymer.IronMenuBehaviorImpl = {properties:{focusedItem:{observer:"_focusedItemChanged", readOnly:!0, type:Object}, attrForItemTitle:{type:String}}, hostAttributes:{role:"menu", tabindex:"0"}, observers:["_updateMultiselectable(multi)"], listeners:{focus:"_onFocus", keydown:"_onKeydown", "iron-items-changed":"_onIronItemsChanged"}, keyBindings:{up:"_onUpKey", down:"_onDownKey", esc:"_onEscKey", "shift+tab:keydown":"_onShiftTabDown"}, attached:function() {
  this._resetTabindices();
}, select:function(a) {
  this._defaultFocusAsync && (this.cancelAsync(this._defaultFocusAsync), this._defaultFocusAsync = null);
  var b = this._valueToItem(a);
  b && b.hasAttribute("disabled") || (this._setFocusedItem(b), Polymer.IronMultiSelectableBehaviorImpl.select.apply(this, arguments));
}, _resetTabindices:function() {
  var a = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;
  this.items.forEach(function(b) {
    b.setAttribute("tabindex", b === a ? "0" : "-1");
  }, this);
}, _updateMultiselectable:function(a) {
  a ? this.setAttribute("aria-multiselectable", "true") : this.removeAttribute("aria-multiselectable");
}, _focusWithKeyboardEvent:function(a) {
  for (var b = 0, c; c = this.items[b]; b++) {
    var d = this.attrForItemTitle || "textContent", d = c[d] || c.getAttribute(d);
    if (!c.hasAttribute("disabled") && d && d.trim().charAt(0).toLowerCase() === String.fromCharCode(a.keyCode).toLowerCase()) {
      this._setFocusedItem(c);
      break;
    }
  }
}, _focusPrevious:function() {
  for (var a = this.items.length, b = Number(this.indexOf(this.focusedItem)), c = 1; c < a; c++) {
    var d = this.items[(b - c + a) % a];
    if (!d.hasAttribute("disabled")) {
      this._setFocusedItem(d);
      break;
    }
  }
}, _focusNext:function() {
  for (var a = this.items.length, b = Number(this.indexOf(this.focusedItem)), c = 1; c < a; c++) {
    var d = this.items[(b + c) % a];
    if (!d.hasAttribute("disabled")) {
      this._setFocusedItem(d);
      break;
    }
  }
}, _applySelection:function(a, b) {
  b ? a.setAttribute("aria-selected", "true") : a.removeAttribute("aria-selected");
  Polymer.IronSelectableBehavior._applySelection.apply(this, arguments);
}, _focusedItemChanged:function(a, b) {
  b && b.setAttribute("tabindex", "-1");
  a && (a.setAttribute("tabindex", "0"), a.focus());
}, _onIronItemsChanged:function(a) {
  a.detail.addedNodes.length && this._resetTabindices();
}, _onShiftTabDown:function(a) {
  var b = this.getAttribute("tabindex");
  Polymer.IronMenuBehaviorImpl._shiftTabPressed = !0;
  this._setFocusedItem(null);
  this.setAttribute("tabindex", "-1");
  this.async(function() {
    this.setAttribute("tabindex", b);
    Polymer.IronMenuBehaviorImpl._shiftTabPressed = !1;
  }, 1);
}, _onFocus:function(a) {
  !Polymer.IronMenuBehaviorImpl._shiftTabPressed && (a = Polymer.dom(a).rootTarget, a === this || "undefined" === typeof a.tabIndex || this.isLightDescendant(a)) && (this._defaultFocusAsync = this.async(function() {
    var a = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;
    this._setFocusedItem(null);
    a ? this._setFocusedItem(a) : this.items[0] && this._focusNext();
  }));
}, _onUpKey:function(a) {
  this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onDownKey:function(a) {
  this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _onEscKey:function(a) {
  this.focusedItem.blur();
}, _onKeydown:function(a) {
  this.keyboardEventMatchesKeys(a, "up down esc");
  a.stopPropagation();
}, _activateHandler:function(a) {
  Polymer.IronSelectableBehavior._activateHandler.call(this, a);
  a.stopPropagation();
}};
Polymer.IronMenuBehaviorImpl._shiftTabPressed = !1;
Polymer.IronMenuBehavior = [Polymer.IronMultiSelectableBehavior, Polymer.IronA11yKeysBehavior, Polymer.IronMenuBehaviorImpl];
(function() {
  Polymer({is:"paper-menu", behaviors:[Polymer.IronMenuBehavior]});
})();
Polymer.IronRangeBehavior = {properties:{value:{type:Number, value:0, notify:!0, reflectToAttribute:!0}, min:{type:Number, value:0, notify:!0}, max:{type:Number, value:100, notify:!0}, step:{type:Number, value:1, notify:!0}, ratio:{type:Number, value:0, readOnly:!0, notify:!0}}, observers:["_update(value, min, max, step)"], _calcRatio:function(a) {
  return (this._clampValue(a) - this.min) / (this.max - this.min);
}, _clampValue:function(a) {
  return Math.min(this.max, Math.max(this.min, this._calcStep(a)));
}, _calcStep:function(a) {
  a = parseFloat(a);
  if (!this.step) {
    return a;
  }
  a = Math.round((a - this.min) / this.step);
  return 1 > this.step ? a / (1 / this.step) + this.min : a * this.step + this.min;
}, _validateValue:function() {
  var a = this._clampValue(this.value);
  this.value = this.oldValue = isNaN(a) ? this.oldValue : a;
  return this.value !== a;
}, _update:function() {
  this._validateValue();
  this._setRatio(100 * this._calcRatio(this.value));
}};
Polymer({is:"paper-progress", behaviors:[Polymer.IronRangeBehavior], properties:{secondaryProgress:{type:Number, value:0}, secondaryRatio:{type:Number, value:0, readOnly:!0}, indeterminate:{type:Boolean, value:!1, observer:"_toggleIndeterminate"}, disabled:{type:Boolean, value:!1, reflectToAttribute:!0, observer:"_disabledChanged"}}, observers:["_progressChanged(secondaryProgress, value, min, max)"], hostAttributes:{role:"progressbar"}, _toggleIndeterminate:function(a) {
  this.toggleClass("indeterminate", a, this.$.primaryProgress);
}, _transformProgress:function(a, b) {
  a.style.transform = a.style.webkitTransform = "scaleX(" + b / 100 + ")";
}, _mainRatioChanged:function(a) {
  this._transformProgress(this.$.primaryProgress, a);
}, _progressChanged:function(a, b, c, d) {
  a = this._clampValue(a);
  b = this._clampValue(b);
  var f = 100 * this._calcRatio(a), g = 100 * this._calcRatio(b);
  this._setSecondaryRatio(f);
  this._transformProgress(this.$.secondaryProgress, f);
  this._transformProgress(this.$.primaryProgress, g);
  this.secondaryProgress = a;
  this.setAttribute("aria-valuenow", b);
  this.setAttribute("aria-valuemin", c);
  this.setAttribute("aria-valuemax", d);
}, _disabledChanged:function(a) {
  this.setAttribute("aria-disabled", a ? "true" : "false");
}, _hideSecondaryProgress:function(a) {
  return 0 === a;
}});
Polymer({is:"paper-radio-button", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"radio", "aria-checked":!1, tabindex:0}, properties:{ariaActiveAttribute:{type:String, value:"aria-checked"}}, ready:function() {
  this._rippleContainer = this.$.radioContainer;
}});
Polymer.IronMenubarBehaviorImpl = {hostAttributes:{role:"menubar"}, keyBindings:{left:"_onLeftKey", right:"_onRightKey"}, _onUpKey:function(a) {
  this.focusedItem.click();
  a.detail.keyboardEvent.preventDefault();
}, _onDownKey:function(a) {
  this.focusedItem.click();
  a.detail.keyboardEvent.preventDefault();
}, get _isRTL() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _onLeftKey:function(a) {
  this._isRTL ? this._focusNext() : this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onRightKey:function(a) {
  this._isRTL ? this._focusPrevious() : this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _onKeydown:function(a) {
  this.keyboardEventMatchesKeys(a, "up down left right esc") || this._focusWithKeyboardEvent(a);
}};
Polymer.IronMenubarBehavior = [Polymer.IronMenuBehavior, Polymer.IronMenubarBehaviorImpl];
Polymer({is:"paper-radio-group", behaviors:[Polymer.IronMenubarBehavior], hostAttributes:{role:"radiogroup", tabindex:0}, properties:{attrForSelected:{type:String, value:"name"}, selectedAttribute:{type:String, value:"checked"}, selectable:{type:String, value:"paper-radio-button"}, allowEmptySelection:{type:Boolean, value:!1}}, select:function(a) {
  var b = this._valueToItem(a);
  if (!b || !b.hasAttribute("disabled")) {
    if (this.selected) {
      b = this._valueToItem(this.selected);
      if (this.selected == a) {
        if (this.allowEmptySelection) {
          a = "";
        } else {
          b && (b.checked = !0);
          return;
        }
      }
      b && (b.checked = !1);
    }
    Polymer.IronSelectableBehavior.select.apply(this, [a]);
    this.fire("paper-radio-group-changed");
  }
}, _activateFocusedItem:function() {
  this._itemActivate(this._valueForItem(this.focusedItem), this.focusedItem);
}, _onUpKey:function(a) {
  this._focusPrevious();
  a.preventDefault();
  this._activateFocusedItem();
}, _onDownKey:function(a) {
  this._focusNext();
  a.preventDefault();
  this._activateFocusedItem();
}, _onLeftKey:function(a) {
  Polymer.IronMenubarBehaviorImpl._onLeftKey.apply(this, arguments);
  this._activateFocusedItem();
}, _onRightKey:function(a) {
  Polymer.IronMenubarBehaviorImpl._onRightKey.apply(this, arguments);
  this._activateFocusedItem();
}});
Polymer({is:"paper-slider", behaviors:[Polymer.IronA11yKeysBehavior, Polymer.IronFormElementBehavior, Polymer.PaperInkyFocusBehavior, Polymer.IronRangeBehavior], properties:{snaps:{type:Boolean, value:!1, notify:!0}, pin:{type:Boolean, value:!1, notify:!0}, secondaryProgress:{type:Number, value:0, notify:!0, observer:"_secondaryProgressChanged"}, editable:{type:Boolean, value:!1}, immediateValue:{type:Number, value:0, readOnly:!0, notify:!0}, maxMarkers:{type:Number, value:0, notify:!0}, expand:{type:Boolean, 
value:!1, readOnly:!0}, dragging:{type:Boolean, value:!1, readOnly:!0}, transiting:{type:Boolean, value:!1, readOnly:!0}, markers:{type:Array, readOnly:!0, value:[]}}, observers:["_updateKnob(value, min, max, snaps, step)", "_valueChanged(value)", "_immediateValueChanged(immediateValue)", "_updateMarkers(maxMarkers, min, max, snaps)"], hostAttributes:{role:"slider", tabindex:0}, keyBindings:{"left down pagedown home":"_decrementKey", "right up pageup end":"_incrementKey"}, increment:function() {
  this.value = this._clampValue(this.value + this.step);
}, decrement:function() {
  this.value = this._clampValue(this.value - this.step);
}, _updateKnob:function(a, b, c, d, f) {
  this.setAttribute("aria-valuemin", b);
  this.setAttribute("aria-valuemax", c);
  this.setAttribute("aria-valuenow", a);
  this._positionKnob(this._calcRatio(a));
}, _valueChanged:function() {
  this.fire("value-change");
}, _immediateValueChanged:function() {
  this.dragging ? this.fire("immediate-value-change") : this.value = this.immediateValue;
}, _secondaryProgressChanged:function() {
  this.secondaryProgress = this._clampValue(this.secondaryProgress);
}, _expandKnob:function() {
  this._setExpand(!0);
}, _resetKnob:function() {
  this.cancelDebouncer("expandKnob");
  this._setExpand(!1);
}, _positionKnob:function(a) {
  this._setImmediateValue(this._calcStep(this._calcKnobPosition(a)));
  this._setRatio(this._calcRatio(this.immediateValue));
  this.$.sliderKnob.style.left = 100 * this.ratio + "%";
  this.dragging && (this._knobstartx = this.ratio * this._w, this.translate3d(0, 0, 0, this.$.sliderKnob));
}, _calcKnobPosition:function(a) {
  return (this.max - this.min) * a + this.min;
}, _onTrack:function(a) {
  a.stopPropagation();
  switch(a.detail.state) {
    case "start":
      this._trackStart(a);
      break;
    case "track":
      this._trackX(a);
      break;
    case "end":
      this._trackEnd();
  }
}, _trackStart:function(a) {
  this._w = this.$.sliderBar.offsetWidth;
  this._knobstartx = this._startx = this._x = this.ratio * this._w;
  this._minx = -this._startx;
  this._maxx = this._w - this._startx;
  this.$.sliderKnob.classList.add("dragging");
  this._setDragging(!0);
}, _trackX:function(a) {
  this.dragging || this._trackStart(a);
  this._x = this._startx + Math.min(this._maxx, Math.max(this._minx, a.detail.dx));
  a = this._calcStep(this._calcKnobPosition(this._x / this._w));
  this._setImmediateValue(a);
  a = this._calcRatio(this.immediateValue) * this._w - this._knobstartx;
  this.translate3d(a + "px", 0, 0, this.$.sliderKnob);
}, _trackEnd:function() {
  var a = this.$.sliderKnob.style;
  this.$.sliderKnob.classList.remove("dragging");
  this._setDragging(!1);
  this._resetKnob();
  this.value = this.immediateValue;
  a.transform = a.webkitTransform = "";
  this.fire("change");
}, _knobdown:function(a) {
  this._expandKnob();
  a.preventDefault();
  this.focus();
}, _bardown:function(a) {
  this._w = this.$.sliderBar.offsetWidth;
  var b = this.$.sliderBar.getBoundingClientRect(), b = (a.detail.x - b.left) / this._w, c = this.ratio;
  this._setTransiting(!0);
  this._positionKnob(b);
  this.debounce("expandKnob", this._expandKnob, 60);
  c === this.ratio && this._setTransiting(!1);
  this.async(function() {
    this.fire("change");
  });
  a.preventDefault();
  this.focus();
}, _knobTransitionEnd:function(a) {
  a.target === this.$.sliderKnob && this._setTransiting(!1);
}, _updateMarkers:function(a, b, c, d) {
  d || this._setMarkers([]);
  b = Math.round((c - b) / this.step);
  b > a && (b = a);
  this._setMarkers(Array(b));
}, _mergeClasses:function(a) {
  return Object.keys(a).filter(function(b) {
    return a[b];
  }).join(" ");
}, _getClassNames:function() {
  return this._mergeClasses({disabled:this.disabled, pin:this.pin, snaps:this.snaps, ring:this.immediateValue <= this.min, expand:this.expand, dragging:this.dragging, transiting:this.transiting, editable:this.editable});
}, _incrementKey:function(a) {
  this.disabled || ("end" === a.detail.key ? this.value = this.max : this.increment(), this.fire("change"));
}, _decrementKey:function(a) {
  this.disabled || ("home" === a.detail.key ? this.value = this.min : this.decrement(), this.fire("change"));
}, _changeValue:function(a) {
  this.value = a.target.value;
  this.fire("change");
}, _inputKeyDown:function(a) {
  a.stopPropagation();
}, _createRipple:function() {
  this._rippleContainer = this.$.sliderKnob;
  return Polymer.PaperInkyFocusBehaviorImpl._createRipple.call(this);
}, _focusedChanged:function(a) {
  a && this.ensureRipple();
  this.hasRipple() && (this._ripple.style.display = a ? "" : "none", this._ripple.holdDown = a);
}});
Polymer.PaperSpinnerBehavior = {listeners:{animationend:"__reset", webkitAnimationEnd:"__reset"}, properties:{active:{type:Boolean, value:!1, reflectToAttribute:!0, observer:"__activeChanged"}, alt:{type:String, value:"loading", observer:"__altChanged"}, __coolingDown:{type:Boolean, value:!1}}, __computeContainerClasses:function(a, b) {
  return [a || b ? "active" : "", b ? "cooldown" : ""].join(" ");
}, __activeChanged:function(a, b) {
  this.__setAriaHidden(!a);
  this.__coolingDown = !a && b;
}, __altChanged:function(a) {
  a === this.getPropertyInfo("alt").value ? this.alt = this.getAttribute("aria-label") || a : (this.__setAriaHidden("" === a), this.setAttribute("aria-label", a));
}, __setAriaHidden:function(a) {
  a ? this.setAttribute("aria-hidden", "true") : this.removeAttribute("aria-hidden");
}, __reset:function() {
  this.__coolingDown = this.active = !1;
}};
Polymer({is:"paper-spinner", behaviors:[Polymer.PaperSpinnerBehavior]});
console.warn("This file is deprecated. Please use `iron-flex-layout/iron-flex-layout-classes.html`, and one of the specific dom-modules instead");
console.warn("This file is deprecated. Please use `iron-flex-layout/iron-flex-layout-classes.html`, and one of the specific dom-modules instead");
Polymer({is:"paper-tab", behaviors:[Polymer.IronControlState, Polymer.IronButtonState, Polymer.PaperRippleBehavior], properties:{link:{type:Boolean, value:!1, reflectToAttribute:!0}}, hostAttributes:{role:"tab"}, listeners:{down:"_updateNoink", tap:"_onTap"}, attached:function() {
  this._updateNoink();
}, get _parentNoink() {
  var a = Polymer.dom(this).parentNode;
  return !!a && !!a.noink;
}, _updateNoink:function() {
  this.noink = !!this.noink || !!this._parentNoink;
}, _onTap:function(a) {
  if (this.link) {
    var b = this.queryEffectiveChildren("a");
    b && a.target !== b && b.click();
  }
}});
Polymer({is:"paper-tabs", behaviors:[Polymer.IronResizableBehavior, Polymer.IronMenubarBehavior], properties:{noink:{type:Boolean, value:!1, observer:"_noinkChanged"}, noBar:{type:Boolean, value:!1}, noSlide:{type:Boolean, value:!1}, scrollable:{type:Boolean, value:!1}, disableDrag:{type:Boolean, value:!1}, hideScrollButtons:{type:Boolean, value:!1}, alignBottom:{type:Boolean, value:!1}, selectable:{type:String, value:"paper-tab"}, autoselect:{type:Boolean, value:!1}, autoselectDelay:{type:Number, 
value:0}, _step:{type:Number, value:10}, _holdDelay:{type:Number, value:1}, _leftHidden:{type:Boolean, value:!1}, _rightHidden:{type:Boolean, value:!1}, _previousTab:{type:Object}}, hostAttributes:{role:"tablist"}, listeners:{"iron-resize":"_onTabSizingChanged", "iron-items-changed":"_onTabSizingChanged", "iron-select":"_onIronSelect", "iron-deselect":"_onIronDeselect"}, keyBindings:{"left:keyup right:keyup":"_onArrowKeyup"}, created:function() {
  this._holdJob = null;
  this._pendingActivationTimeout = this._pendingActivationItem = void 0;
  this._bindDelayedActivationHandler = this._delayedActivationHandler.bind(this);
  this.addEventListener("blur", this._onBlurCapture.bind(this), !0);
}, ready:function() {
  this.setScrollDirection("y", this.$.tabsContainer);
}, detached:function() {
  this._cancelPendingActivation();
}, _noinkChanged:function(a) {
  Polymer.dom(this).querySelectorAll("paper-tab").forEach(a ? this._setNoinkAttribute : this._removeNoinkAttribute);
}, _setNoinkAttribute:function(a) {
  a.setAttribute("noink", "");
}, _removeNoinkAttribute:function(a) {
  a.removeAttribute("noink");
}, _computeScrollButtonClass:function(a, b, c) {
  return !b || c ? "hidden" : a ? "not-visible" : "";
}, _computeTabsContentClass:function(a) {
  return a ? "scrollable" : "horizontal";
}, _computeSelectionBarClass:function(a, b) {
  return a ? "hidden" : b ? "align-bottom" : "";
}, _onTabSizingChanged:function() {
  this.debounce("_onTabSizingChanged", function() {
    this._scroll();
    this._tabChanged(this.selectedItem);
  }, 10);
}, _onIronSelect:function(a) {
  this._tabChanged(a.detail.item, this._previousTab);
  this._previousTab = a.detail.item;
  this.cancelDebouncer("tab-changed");
}, _onIronDeselect:function(a) {
  this.debounce("tab-changed", function() {
    this._tabChanged(null, this._previousTab);
  }, 1);
}, _activateHandler:function() {
  this._cancelPendingActivation();
  Polymer.IronMenuBehaviorImpl._activateHandler.apply(this, arguments);
}, _scheduleActivation:function(a, b) {
  this._pendingActivationItem = a;
  this._pendingActivationTimeout = this.async(this._bindDelayedActivationHandler, b);
}, _delayedActivationHandler:function() {
  var a = this._pendingActivationItem;
  this._pendingActivationTimeout = this._pendingActivationItem = void 0;
  a.fire(this.activateEvent, null, {bubbles:!0, cancelable:!0});
}, _cancelPendingActivation:function() {
  void 0 !== this._pendingActivationTimeout && (this.cancelAsync(this._pendingActivationTimeout), this._pendingActivationTimeout = this._pendingActivationItem = void 0);
}, _onArrowKeyup:function(a) {
  this.autoselect && this._scheduleActivation(this.focusedItem, this.autoselectDelay);
}, _onBlurCapture:function(a) {
  a.target === this._pendingActivationItem && this._cancelPendingActivation();
}, get _tabContainerScrollSize() {
  return Math.max(0, this.$.tabsContainer.scrollWidth - this.$.tabsContainer.offsetWidth);
}, _scroll:function(a, b) {
  this.scrollable && this._affectScroll(b && -b.ddx || 0);
}, _down:function(a) {
  this.async(function() {
    this._defaultFocusAsync && (this.cancelAsync(this._defaultFocusAsync), this._defaultFocusAsync = null);
  }, 1);
}, _affectScroll:function(a) {
  this.$.tabsContainer.scrollLeft += a;
  a = this.$.tabsContainer.scrollLeft;
  this._leftHidden = 0 === a;
  this._rightHidden = a === this._tabContainerScrollSize;
}, _onLeftScrollButtonDown:function() {
  this._scrollToLeft();
  this._holdJob = setInterval(this._scrollToLeft.bind(this), this._holdDelay);
}, _onRightScrollButtonDown:function() {
  this._scrollToRight();
  this._holdJob = setInterval(this._scrollToRight.bind(this), this._holdDelay);
}, _onScrollButtonUp:function() {
  clearInterval(this._holdJob);
  this._holdJob = null;
}, _scrollToLeft:function() {
  this._affectScroll(-this._step);
}, _scrollToRight:function() {
  this._affectScroll(this._step);
}, _tabChanged:function(a, b) {
  if (a) {
    var c = this.$.tabsContent.getBoundingClientRect(), d = c.width, f = a.getBoundingClientRect(), c = f.left - c.left;
    this._pos = {width:this._calcPercent(f.width, d), left:this._calcPercent(c, d)};
    if (this.noSlide || null == b) {
      this._positionBar(this._pos.width, this._pos.left);
    } else {
      var g = b.getBoundingClientRect();
      b = this.items.indexOf(b);
      a = this.items.indexOf(a);
      this.$.selectionBar.classList.add("expand");
      a = b < a;
      this._isRTL && (a = !a);
      a ? this._positionBar(this._calcPercent(f.left + f.width - g.left, d) - 5, this._left) : this._positionBar(this._calcPercent(g.left + g.width - f.left, d) - 5, this._calcPercent(c, d) + 5);
      this.scrollable && this._scrollToSelectedIfNeeded(f.width, c);
    }
  } else {
    this._positionBar(0, 0);
  }
}, _scrollToSelectedIfNeeded:function(a, b) {
  b -= this.$.tabsContainer.scrollLeft;
  0 > b ? this.$.tabsContainer.scrollLeft += b : (b += a - this.$.tabsContainer.offsetWidth, 0 < b && (this.$.tabsContainer.scrollLeft += b));
}, _calcPercent:function(a, b) {
  return 100 * a / b;
}, _positionBar:function(a, b) {
  a = a || 0;
  b = b || 0;
  this._width = a;
  this._left = b;
  this.transform("translate3d(" + b + "%, 0, 0) scaleX(" + a / 100 + ")", this.$.selectionBar);
}, _onBarTransitionEnd:function(a) {
  a = this.$.selectionBar.classList;
  a.contains("expand") ? (a.remove("expand"), a.add("contract"), this._positionBar(this._pos.width, this._pos.left)) : a.contains("contract") && a.remove("contract");
}});
(function() {
  var a = null;
  Polymer({is:"paper-toast", behaviors:[Polymer.IronOverlayBehavior], properties:{duration:{type:Number, value:3000}, text:{type:String, value:""}, noCancelOnOutsideClick:{type:Boolean, value:!0}, noAutoFocus:{type:Boolean, value:!0}}, listeners:{transitionend:"__onTransitionEnd"}, get visible() {
    console.warn("`visible` is deprecated, use `opened` instead");
    return this.opened;
  }, get _canAutoClose() {
    return 0 < this.duration && Infinity !== this.duration;
  }, created:function() {
    this._autoClose = null;
    Polymer.IronA11yAnnouncer.requestAvailability();
  }, show:function(a) {
    "string" == typeof a && (a = {text:a});
    for (var b in a) {
      0 === b.indexOf("_") ? console.warn('The property "' + b + '" is private and was not set.') : b in this ? this[b] = a[b] : console.warn('The property "' + b + '" is not valid.');
    }
    this.open();
  }, hide:function() {
    this.close();
  }, center:function() {
    if (this.fitInto === window) {
      this.style.bottom = this.style.left = "";
    } else {
      var a = this.fitInto.getBoundingClientRect();
      this.style.left = a.left + "px";
      this.style.bottom = window.innerHeight - a.bottom + "px";
    }
  }, __onTransitionEnd:function(a) {
    a && a.target === this && "opacity" === a.propertyName && (this.opened ? this._finishRenderOpened() : this._finishRenderClosed());
  }, _openedChanged:function() {
    null !== this._autoClose && (this.cancelAsync(this._autoClose), this._autoClose = null);
    this.opened ? (a && a !== this && a.close(), a = this, this.fire("iron-announce", {text:this.text}), this._canAutoClose && (this._autoClose = this.async(this.close, this.duration))) : a === this && (a = null);
    Polymer.IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);
  }, _renderOpened:function() {
    this.classList.add("paper-toast-open");
  }, _renderClosed:function() {
    this.classList.remove("paper-toast-open");
  }, _onIronResize:function() {
    Polymer.IronOverlayBehaviorImpl._onIronResize.apply(this, arguments);
    this.opened && (this.style.position = "");
  }});
})();
Polymer({is:"paper-toggle-button", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"button", "aria-pressed":"false", tabindex:0}, properties:{}, listeners:{track:"_ontrack"}, _ontrack:function(a) {
  a = a.detail;
  "start" === a.state ? this._trackStart(a) : "track" === a.state ? this._trackMove(a) : "end" === a.state && this._trackEnd(a);
}, _trackStart:function(a) {
  this._width = this.$.toggleBar.offsetWidth / 2;
  this._trackChecked = this.checked;
  this.$.toggleButton.classList.add("dragging");
}, _trackMove:function(a) {
  a = a.dx;
  this._x = Math.min(this._width, Math.max(0, this._trackChecked ? this._width + a : a));
  this.translate3d(this._x + "px", 0, 0, this.$.toggleButton);
  this._userActivate(this._x > this._width / 2);
}, _trackEnd:function(a) {
  this.$.toggleButton.classList.remove("dragging");
  this.transform("", this.$.toggleButton);
}, _createRipple:function() {
  this._rippleContainer = this.$.toggleButton;
  var a = Polymer.PaperRippleBehavior._createRipple();
  a.id = "ink";
  a.setAttribute("recenters", "");
  a.classList.add("circle", "toggle-ink");
  return a;
}});
Polymer({is:"paper-toolbar", hostAttributes:{role:"toolbar"}, properties:{bottomJustify:{type:String, value:""}, justify:{type:String, value:""}, middleJustify:{type:String, value:""}}, attached:function() {
  this._observer = this._observe(this);
  this._updateAriaLabelledBy();
}, detached:function() {
  this._observer && this._observer.disconnect();
}, _observe:function(a) {
  var b = new MutationObserver(function() {
    this._updateAriaLabelledBy();
  }.bind(this));
  b.observe(a, {childList:!0, subtree:!0});
  return b;
}, _updateAriaLabelledBy:function() {
  for (var a = [], b = Polymer.dom(this.root).querySelectorAll("content"), c, d = 0; c = b[d]; d++) {
    c = Polymer.dom(c).getDistributedNodes();
    for (var f, g = 0; f = c[g]; g++) {
      if (f.classList && f.classList.contains("title")) {
        if (f.id) {
          a.push(f.id);
        } else {
          var h = "paper-toolbar-label-" + Math.floor(10000 * Math.random());
          f.id = h;
          a.push(h);
        }
      }
    }
  }
  0 < a.length && this.setAttribute("aria-labelledby", a.join(" "));
}, _computeBarExtraClasses:function(a) {
  return a ? a + ("justified" === a ? "" : "-justified") : "";
}});
Polymer({is:"paper-tooltip", hostAttributes:{role:"tooltip", tabindex:-1}, behaviors:[Polymer.NeonAnimationRunnerBehavior], properties:{for:{type:String, observer:"_forChanged"}, manualMode:{type:Boolean, value:!1}, position:{type:String, value:"bottom"}, fitToVisibleBounds:{type:Boolean, value:!1}, offset:{type:Number, value:14}, marginTop:{type:Number, value:14}, animationDelay:{type:Number, value:500}, animationConfig:{type:Object, value:function() {
  return {entry:[{name:"fade-in-animation", node:this, timing:{delay:0}}], exit:[{name:"fade-out-animation", node:this}]};
}}, _showing:{type:Boolean, value:!1}}, listeners:{"neon-animation-finish":"_onAnimationFinish", mouseenter:"hide"}, get target() {
  var a = Polymer.dom(this).parentNode, b = Polymer.dom(this).getOwnerRoot();
  return this.for ? Polymer.dom(b).querySelector("#" + this.for) : a.nodeType == Node.DOCUMENT_FRAGMENT_NODE ? b.host : a;
}, attached:function() {
  this._target = this.target;
  this.manualMode || (this.listen(this._target, "mouseenter", "show"), this.listen(this._target, "focus", "show"), this.listen(this._target, "mouseleave", "hide"), this.listen(this._target, "blur", "hide"), this.listen(this._target, "tap", "hide"));
}, detached:function() {
  this._target && !this.manualMode && (this.unlisten(this._target, "mouseenter", "show"), this.unlisten(this._target, "focus", "show"), this.unlisten(this._target, "mouseleave", "hide"), this.unlisten(this._target, "blur", "hide"), this.unlisten(this._target, "tap", "hide"));
}, show:function() {
  this._showing || "" === Polymer.dom(this).textContent.trim() || (this.cancelAnimation(), this._showing = !0, this.toggleClass("hidden", !1, this.$.tooltip), this.updatePosition(), this.animationConfig.entry[0].timing.delay = this.animationDelay, this._animationPlaying = !0, this.playAnimation("entry"));
}, hide:function() {
  this._showing && (this._animationPlaying ? (this.cancelAnimation(), this._showing = !1, this._onAnimationFinish()) : (this._showing = !1, this._animationPlaying = !0, this.playAnimation("exit")));
}, _forChanged:function() {
  this._target = this.target;
}, updatePosition:function() {
  if (this._target && this.offsetParent) {
    var a = this.offset;
    14 != this.marginTop && 14 == this.offset && (a = this.marginTop);
    var b = this.offsetParent.getBoundingClientRect(), c = this._target.getBoundingClientRect(), d = this.getBoundingClientRect(), f = (c.width - d.width) / 2, g = (c.height - d.height) / 2, h = c.left - b.left, b = c.top - b.top;
    switch(this.position) {
      case "top":
        var m = h + f;
        var u = b - d.height - a;
        break;
      case "bottom":
        m = h + f;
        u = b + c.height + a;
        break;
      case "left":
        m = h - d.width - a;
        u = b + g;
        break;
      case "right":
        m = h + c.width + a, u = b + g;
    }
    this.fitToVisibleBounds ? (m + d.width > window.innerWidth ? (this.style.right = "0px", this.style.left = "auto") : (this.style.left = Math.max(0, m) + "px", this.style.right = "auto"), u + d.height > window.innerHeight ? (this.style.bottom = "0px", this.style.top = "auto") : (this.style.top = Math.max(0, u) + "px", this.style.bottom = "auto")) : (this.style.left = m + "px", this.style.top = u + "px");
  }
}, _onAnimationFinish:function() {
  this._animationPlaying = !1;
  this._showing || this.toggleClass("hidden", !0, this.$.tooltip);
}});
Promise.all = Promise.all || function() {
  var a = Array.prototype.slice.call(1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0] : arguments);
  return new Promise(function(b, c) {
    function d(g, m) {
      try {
        if (m && ("object" === typeof m || "function" === typeof m)) {
          var h = m.then;
          if ("function" === typeof h) {
            h.call(m, function(a) {
              d(g, a);
            }, c);
            return;
          }
        }
        a[g] = m;
        0 === --f && b(a);
      } catch (r) {
        c(r);
      }
    }
    if (0 === a.length) {
      return b([]);
    }
    for (var f = a.length, g = 0; g < a.length; g++) {
      d(g, a[g]);
    }
  });
};
Promise.race = Promise.race || function(a) {
  return new Promise(function(b, c) {
    for (var d = 0, f = a.length; d < f; d++) {
      a[d].then(b, c);
    }
  });
};
Polymer({is:"app-drawer", properties:{opened:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, persistent:{type:Boolean, value:!1, reflectToAttribute:!0}, align:{type:String, value:"left"}, position:{type:String, readOnly:!0, value:"left", reflectToAttribute:!0}, swipeOpen:{type:Boolean, value:!1, reflectToAttribute:!0}, noFocusTrap:{type:Boolean, value:!1}}, observers:["resetLayout(position)", "_resetPosition(align, isAttached)"], _translateOffset:0, _trackDetails:null, _drawerState:0, 
_boundEscKeydownHandler:null, _firstTabStop:null, _lastTabStop:null, ready:function() {
  this.setScrollDirection("y");
  this._setTransitionDuration("0s");
}, attached:function() {
  Polymer.RenderStatus.afterNextRender(this, function() {
    this._setTransitionDuration("");
    this._boundEscKeydownHandler = this._escKeydownHandler.bind(this);
    this._resetDrawerState();
    this.listen(this, "track", "_track");
    this.addEventListener("transitionend", this._transitionend.bind(this));
    this.addEventListener("keydown", this._tabKeydownHandler.bind(this));
  });
}, detached:function() {
  document.removeEventListener("keydown", this._boundEscKeydownHandler);
}, open:function() {
  this.opened = !0;
}, close:function() {
  this.opened = !1;
}, toggle:function() {
  this.opened = !this.opened;
}, getWidth:function() {
  return this.$.contentContainer.offsetWidth;
}, resetLayout:function() {
  this.debounce("_resetLayout", function() {
    this.fire("app-drawer-reset-layout");
  }, 1);
}, _isRTL:function() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _resetPosition:function() {
  switch(this.align) {
    case "start":
      this._setPosition(this._isRTL() ? "right" : "left");
      return;
    case "end":
      this._setPosition(this._isRTL() ? "left" : "right");
      return;
  }
  this._setPosition(this.align);
}, _escKeydownHandler:function(a) {
  27 === a.keyCode && (a.preventDefault(), this.close());
}, _track:function(a) {
  if (!this.persistent) {
    switch(a.preventDefault(), a.detail.state) {
      case "start":
        this._trackStart(a);
        break;
      case "track":
        this._trackMove(a);
        break;
      case "end":
        this._trackEnd(a);
    }
  }
}, _trackStart:function(a) {
  this._drawerState = this._DRAWER_STATE.TRACKING;
  this._setTransitionDuration("0s");
  this.style.visibility = "visible";
  a = this.$.contentContainer.getBoundingClientRect();
  this._translateOffset = "left" === this.position ? a.left : a.right - window.innerWidth;
  this._trackDetails = [];
}, _trackMove:function(a) {
  this._translateDrawer(a.detail.dx + this._translateOffset);
  this._trackDetails.push({dx:a.detail.dx, timeStamp:Date.now()});
}, _trackEnd:function(a) {
  var b = a.detail.dx + this._translateOffset, c = this.getWidth(), b = "left" === this.position ? 0 <= b || b <= -c : 0 >= b || b >= c;
  if (!b) {
    var d = this._trackDetails;
    this._trackDetails = null;
    this._flingDrawer(a, d);
    if (this._drawerState === this._DRAWER_STATE.FLINGING) {
      return;
    }
  }
  c /= 2;
  a.detail.dx < -c ? this.opened = "right" === this.position : a.detail.dx > c && (this.opened = "left" === this.position);
  b && this._resetDrawerState();
  this._setTransitionDuration("");
  this._resetDrawerTranslate();
  this.style.visibility = "";
}, _calculateVelocity:function(a, b) {
  for (var c = Date.now(), d = c - 100, f, g = 0, h = b.length - 1; g <= h;) {
    var m = g + h >> 1, u = b[m];
    u.timeStamp >= d ? (f = u, h = m - 1) : g = m + 1;
  }
  return f ? (a.detail.dx - f.dx) / (c - f.timeStamp || 1) : 0;
}, _flingDrawer:function(a, b) {
  b = this._calculateVelocity(a, b);
  if (!(Math.abs(b) < this._MIN_FLING_THRESHOLD)) {
    this._drawerState = this._DRAWER_STATE.FLINGING;
    a = a.detail.dx + this._translateOffset;
    var c = this.getWidth(), d = "left" === this.position, f = 0 < b;
    f ? (b = Math.max(b, this._MIN_TRANSITION_VELOCITY), this.opened = "left" === this.position) : (b = Math.min(b, -this._MIN_TRANSITION_VELOCITY), this.opened = "right" === this.position);
    this._setTransitionDuration(this._FLING_INITIAL_SLOPE * (!f && d ? -(a + c) : f && !d ? c - a : -a) / b + "ms");
    this._setTransitionTimingFunction(this._FLING_TIMING_FUNCTION);
    this._resetDrawerTranslate();
  }
}, _transitionend:function(a) {
  a = Polymer.dom(a).rootTarget;
  if (a === this.$.contentContainer || a === this.$.scrim) {
    this._drawerState === this._DRAWER_STATE.FLINGING && (this._setTransitionDuration(""), this._setTransitionTimingFunction(""), this.style.visibility = ""), this._resetDrawerState();
  }
}, _setTransitionDuration:function(a) {
  this.$.contentContainer.style.transitionDuration = a;
  this.$.scrim.style.transitionDuration = a;
}, _setTransitionTimingFunction:function(a) {
  this.$.contentContainer.style.transitionTimingFunction = a;
  this.$.scrim.style.transitionTimingFunction = a;
}, _translateDrawer:function(a) {
  var b = this.getWidth();
  "left" === this.position ? (a = Math.max(-b, Math.min(a, 0)), this.$.scrim.style.opacity = 1 + a / b) : (a = Math.max(0, Math.min(a, b)), this.$.scrim.style.opacity = 1 - a / b);
  this.translate3d(a + "px", "0", "0", this.$.contentContainer);
}, _resetDrawerTranslate:function() {
  this.$.scrim.style.opacity = "";
  this.transform("", this.$.contentContainer);
}, _resetDrawerState:function() {
  var a = this._drawerState;
  this._drawerState = this.opened ? this.persistent ? this._DRAWER_STATE.OPENED_PERSISTENT : this._DRAWER_STATE.OPENED : this._DRAWER_STATE.CLOSED;
  a !== this._drawerState && (this._drawerState === this._DRAWER_STATE.OPENED ? (this._setKeyboardFocusTrap(), document.addEventListener("keydown", this._boundEscKeydownHandler), document.body.style.overflow = "hidden") : (document.removeEventListener("keydown", this._boundEscKeydownHandler), document.body.style.overflow = ""), a !== this._DRAWER_STATE.INIT && this.fire("app-drawer-transitioned"));
}, _setKeyboardFocusTrap:function() {
  if (!this.noFocusTrap) {
    var a = Polymer.dom(this).querySelectorAll('a[href]:not([tabindex="-1"]),area[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),iframe:not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])');
    0 < a.length ? (this._firstTabStop = a[0], this._lastTabStop = a[a.length - 1]) : this._lastTabStop = this._firstTabStop = null;
    (a = this.getAttribute("tabindex")) && -1 < parseInt(a, 10) ? this.focus() : this._firstTabStop && this._firstTabStop.focus();
  }
}, _tabKeydownHandler:function(a) {
  this.noFocusTrap || this._drawerState !== this._DRAWER_STATE.OPENED || 9 !== a.keyCode || (a.shiftKey ? this._firstTabStop && Polymer.dom(a).localTarget === this._firstTabStop && (a.preventDefault(), this._lastTabStop.focus()) : this._lastTabStop && Polymer.dom(a).localTarget === this._lastTabStop && (a.preventDefault(), this._firstTabStop.focus()));
}, _MIN_FLING_THRESHOLD:0.2, _MIN_TRANSITION_VELOCITY:1.2, _FLING_TIMING_FUNCTION:"cubic-bezier(0.667, 1, 0.667, 1)", _FLING_INITIAL_SLOPE:1.5, _DRAWER_STATE:{INIT:0, OPENED:1, OPENED_PERSISTENT:2, CLOSED:3, TRACKING:4, FLINGING:5}});
Polymer({is:"app-drawer-layout", behaviors:[Polymer.IronResizableBehavior], properties:{forceNarrow:{type:Boolean, value:!1}, responsiveWidth:{type:String, value:"640px"}, _narrow:Boolean}, listeners:{tap:"_tapHandler", "app-drawer-reset-layout":"resetLayout"}, observers:["resetLayout(_narrow, isAttached)"], get drawer() {
  return Polymer.dom(this.$.drawerContent).getDistributedNodes()[0];
}, _tapHandler:function(a) {
  (a = Polymer.dom(a).localTarget) && a.hasAttribute("drawer-toggle") && this.drawer.toggle();
}, resetLayout:function() {
  this.debounce("_resetLayout", function() {
    if (this.isAttached) {
      var a = this.drawer, b = this.drawer.getWidth(), c = this.$.contentContainer;
      this._narrow ? (a.opened = a.persistent = !1, c.classList.add("narrow"), c.style.marginLeft = "", c.style.marginRight = "") : (a.opened = a.persistent = !0, c.classList.remove("narrow"), "right" == a.position ? (c.style.marginLeft = "", c.style.marginRight = b + "px") : (c.style.marginLeft = b + "px", c.style.marginRight = ""));
      this.notifyResize();
    }
  });
}, _computeMediaQuery:function(a, b) {
  return a ? "(min-width: 0px)" : "(max-width: " + b + ")";
}});
Polymer.IronScrollTargetBehavior = {properties:{scrollTarget:{type:HTMLElement, value:function() {
  return this._defaultScrollTarget;
}}}, observers:["_scrollTargetChanged(scrollTarget, isAttached)"], _scrollTargetChanged:function(a, b) {
  if (this._oldScrollTarget) {
    var c = this._oldScrollTarget === this._doc ? window : this._oldScrollTarget;
    c.removeEventListener("scroll", this._boundScrollHandler);
    this._oldScrollTarget = null;
  }
  b && ("document" === a ? this.scrollTarget = this._doc : "string" === typeof a ? this.scrollTarget = this.domHost ? this.domHost.$[a] : Polymer.dom(this.ownerDocument).querySelector("#" + a) : this._isValidScrollTarget() && (c = a === this._doc ? window : a, this._boundScrollHandler = this._boundScrollHandler || this._scrollHandler.bind(this), this._oldScrollTarget = a, c.addEventListener("scroll", this._boundScrollHandler)));
}, _scrollHandler:function() {
}, get _defaultScrollTarget() {
  return this._doc;
}, get _doc() {
  return this.ownerDocument.documentElement;
}, get _scrollTop() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.pageYOffset : this.scrollTarget.scrollTop : 0;
}, get _scrollLeft() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.pageXOffset : this.scrollTarget.scrollLeft : 0;
}, set _scrollTop(a) {
  this.scrollTarget === this._doc ? window.scrollTo(window.pageXOffset, a) : this._isValidScrollTarget() && (this.scrollTarget.scrollTop = a);
}, set _scrollLeft(a) {
  this.scrollTarget === this._doc ? window.scrollTo(a, window.pageYOffset) : this._isValidScrollTarget() && (this.scrollTarget.scrollLeft = a);
}, scroll:function(a, b) {
  this.scrollTarget === this._doc ? window.scrollTo(a, b) : this._isValidScrollTarget() && (this.scrollTarget.scrollLeft = a, this.scrollTarget.scrollTop = b);
}, get _scrollTargetWidth() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.innerWidth : this.scrollTarget.offsetWidth : 0;
}, get _scrollTargetHeight() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.innerHeight : this.scrollTarget.offsetHeight : 0;
}, _isValidScrollTarget:function() {
  return this.scrollTarget instanceof HTMLElement;
}};
Polymer.AppLayout = Polymer.AppLayout || {};
Polymer.AppLayout._scrollEffects = Polymer.AppLayout._scrollEffects || {};
Polymer.AppLayout.scrollTimingFunction = function(a, b, c, d) {
  a /= d;
  return -c * a * (a - 2) + b;
};
Polymer.AppLayout.registerEffect = function(a, b) {
  if (null != Polymer.AppLayout._scrollEffects[a]) {
    throw Error("effect `" + a + "` is already registered.");
  }
  Polymer.AppLayout._scrollEffects[a] = b;
};
Polymer.AppLayout.scroll = function(a) {
  a = a || {};
  var b = document.documentElement, c = a.target || b, d = "scrollBehavior" in c.style && c.scroll, f = a.top || 0, g = a.left || 0, h = c === b ? window.scrollTo : function(a, b) {
    c.scrollLeft = a;
    c.scrollTop = b;
  };
  if ("smooth" === a.behavior) {
    if (d) {
      c.scroll(a);
    } else {
      var m = Polymer.AppLayout.scrollTimingFunction, u = Date.now(), r = c === b ? window.pageYOffset : c.scrollTop, n = c === b ? window.pageXOffset : c.scrollLeft, v = f - r, w = g - n;
      (function q() {
        var a = Date.now() - u;
        300 > a && (h(m(a, n, w, 300), m(a, r, v, 300)), requestAnimationFrame(q.bind(this)));
      }).call(this);
    }
  } else {
    "silent" === a.behavior && (b.classList.add("app-layout-silent-scroll"), clearInterval(Polymer.AppLayout._scrollTimer), Polymer.AppLayout._scrollTimer = setTimeout(function() {
      b.classList.remove("app-layout-silent-scroll");
      Polymer.AppLayout._scrollTimer = null;
    }, 100)), h(g, f);
  }
};
Polymer.AppScrollEffectsBehavior = [Polymer.IronScrollTargetBehavior, {properties:{effects:{type:String}, effectsConfig:{type:Object, value:function() {
  return {};
}}, disabled:{type:Boolean, reflectToAttribute:!0, value:!1}}, observers:["_effectsChanged(effects, effectsConfig)"], _updateScrollState:function() {
}, isOnScreen:function() {
  return !1;
}, isContentBelow:function() {
  return !1;
}, _effectsRunFn:null, _effects:null, get _clampedScrollTop() {
  return Math.max(0, this._scrollTop);
}, detached:function() {
  this._tearDownEffects();
}, createEffect:function(a, b) {
  var c = Polymer.AppLayout._scrollEffects[a];
  if (!c) {
    throw new ReferenceError(this._getUndefinedMsg(a));
  }
  a = this._boundEffect(c, b || {});
  a.setUp();
  return a;
}, _effectsChanged:function(a, b) {
  this._tearDownEffects();
  "" !== a && (a.split(" ").forEach(function(a) {
    var c;
    "" !== a && ((c = Polymer.AppLayout._scrollEffects[a]) ? this._effects.push(this._boundEffect(c, b[a])) : this._warn(this._logf("_effectsChanged", this._getUndefinedMsg(a))));
  }, this), this._setUpEffect());
}, _layoutIfDirty:function() {
  return this.offsetWidth;
}, _boundEffect:function(a, b) {
  b = b || {};
  var c = parseFloat(b.startsAt || 0), d = parseFloat(b.endsAt || 1), f = d - c, g = Function(), d = 0 === c && 1 === d ? a.run : function(b, d) {
    a.run.call(this, Math.max(0, (b - c) / f), d);
  };
  return {setUp:a.setUp ? a.setUp.bind(this, b) : g, run:a.run ? d.bind(this) : g, tearDown:a.tearDown ? a.tearDown.bind(this) : g};
}, _setUpEffect:function() {
  this.isAttached && this._effects && (this._effectsRunFn = [], this._effects.forEach(function(a) {
    !1 !== a.setUp() && this._effectsRunFn.push(a.run);
  }, this));
}, _tearDownEffects:function() {
  this._effects && this._effects.forEach(function(a) {
    a.tearDown();
  });
  this._effectsRunFn = [];
  this._effects = [];
}, _runEffects:function(a, b) {
  this._effectsRunFn && this._effectsRunFn.forEach(function(c) {
    c(a, b);
  });
}, _scrollHandler:function() {
  this.disabled || this._updateScrollState(this._clampedScrollTop);
}, _getUndefinedMsg:function(a) {
  return "Scroll effect `" + a + "` is undefined. Did you forget to import app-layout/app-scroll-effects/effects/" + a + ".html ?";
}}];
Polymer({is:"app-header", behaviors:[Polymer.AppScrollEffectsBehavior, Polymer.IronResizableBehavior], properties:{condenses:{type:Boolean, value:!1}, fixed:{type:Boolean, value:!1}, reveals:{type:Boolean, value:!1}, shadow:{type:Boolean, reflectToAttribute:!0, value:!1}}, observers:["resetLayout(isAttached, condenses, fixed)"], listeners:{"iron-resize":"_resizeHandler"}, _height:0, _dHeight:0, _primaryElTop:0, _primaryEl:null, _top:0, _progress:0, _wasScrollingDown:!1, _initScrollTop:0, _initTimestamp:0, 
_lastTimestamp:0, _lastScrollTop:0, get _maxHeaderTop() {
  return this.fixed ? this._dHeight : this._height + 5;
}, _getPrimaryEl:function() {
  for (var a, b = Polymer.dom(this.$.content).getDistributedNodes(), c = 0; c < b.length; c++) {
    if (b[c].nodeType === Node.ELEMENT_NODE) {
      var d = b[c];
      if (d.hasAttribute("primary")) {
        a = d;
        break;
      } else {
        a || (a = d);
      }
    }
  }
  return a;
}, resetLayout:function() {
  this.fire("app-header-reset-layout");
  this.debounce("_resetLayout", function() {
    if (0 !== this.offsetWidth || 0 !== this.offsetHeight) {
      var a = this._clampedScrollTop, b = 0 === this._height || 0 === a, c = this.disabled;
      this._height = this.offsetHeight;
      this._primaryEl = this._getPrimaryEl();
      this.disabled = !0;
      b || this._updateScrollState(0, !0);
      this._mayMove() ? this._dHeight = this._primaryEl ? this._height - this._primaryEl.offsetHeight : 0 : this._dHeight = 0;
      this._primaryElTop = this._primaryEl ? this._primaryEl.offsetTop : 0;
      this._setUpEffect();
      b ? this._updateScrollState(a, !0) : (this._updateScrollState(this._lastScrollTop, !0), this._layoutIfDirty());
      this.disabled = c;
    }
  });
}, _updateScrollState:function(a, b) {
  if (0 !== this._height) {
    var c = 0, d = this._top;
    var f = this._maxHeaderTop;
    var g = a - this._lastScrollTop, h = Math.abs(g), m = a > this._lastScrollTop, u = Date.now();
    this._mayMove() && (c = this._clamp(this.reveals ? d + g : a, 0, f));
    a >= this._dHeight && (c = this.condenses ? Math.max(this._dHeight, c) : c, this.style.transitionDuration = "0ms");
    if (this.reveals && !this.disabled && 100 > h) {
      if (300 < u - this._initTimestamp || this._wasScrollingDown !== m) {
        this._initScrollTop = a, this._initTimestamp = u;
      }
      a >= f && (30 < Math.abs(this._initScrollTop - a) || 10 < h ? (m && a >= f ? c = f : !m && a >= this._dHeight && (c = this.condenses ? this._dHeight : 0), this.style.transitionDuration = this._clamp((c - d) / (g / (u - this._lastTimestamp)), 0, 300) + "ms") : c = this._top);
    }
    f = 0 === this._dHeight ? 0 < a ? 1 : 0 : c / this._dHeight;
    b || (this._lastScrollTop = a, this._top = c, this._wasScrollingDown = m, this._lastTimestamp = u);
    if (b || f !== this._progress || d !== c || 0 === a) {
      this._progress = f, this._runEffects(f, c), this._transformHeader(c);
    }
  }
}, _mayMove:function() {
  return this.condenses || !this.fixed;
}, willCondense:function() {
  return 0 < this._dHeight && this.condenses;
}, isOnScreen:function() {
  return 0 !== this._height && this._top < this._height;
}, isContentBelow:function() {
  return 0 === this._top ? 0 < this._clampedScrollTop : 0 <= this._clampedScrollTop - this._maxHeaderTop;
}, _transformHeader:function(a) {
  this.translate3d(0, -a + "px", 0);
  this._primaryEl && this.condenses && a >= this._primaryElTop && this.translate3d(0, Math.min(a, this._dHeight) - this._primaryElTop + "px", 0, this._primaryEl);
}, _resizeHandler:function() {
  this.resetLayout();
}, _clamp:function(a, b, c) {
  return Math.min(c, Math.max(b, a));
}, getScrollState:function() {
  return {progress:this._progress, top:this._top};
}});
Polymer({is:"app-header-layout", behaviors:[Polymer.IronResizableBehavior], properties:{hasScrollingRegion:{type:Boolean, value:!1, reflectToAttribute:!0}}, listeners:{"iron-resize":"_resizeHandler", "app-header-reset-layout":"resetLayout"}, observers:["resetLayout(isAttached, hasScrollingRegion)"], get header() {
  return Polymer.dom(this.$.header).getDistributedNodes()[0];
}, resetLayout:function() {
  this._updateScroller();
  this.debounce("_resetLayout", this._updateContentPosition);
}, _updateContentPosition:function() {
  var a = this.header;
  if (this.isAttached && a) {
    var b = a.offsetHeight;
    if (this.hasScrollingRegion) {
      a.style.left = "", a.style.right = "";
    } else {
      var c = this.getBoundingClientRect(), d = document.documentElement.clientWidth - c.right;
      a.style.left = c.left + "px";
      a.style.right = d + "px";
    }
    c = this.$.contentContainer.style;
    a.fixed && !a.willCondense() && this.hasScrollingRegion ? (c.marginTop = b + "px", c.paddingTop = "") : (c.paddingTop = b + "px", c.marginTop = "");
  }
}, _updateScroller:function() {
  if (this.isAttached) {
    var a = this.header;
    a && (a.scrollTarget = this.hasScrollingRegion ? this.$.contentContainer : this.ownerDocument.documentElement);
  }
}, _resizeHandler:function() {
  this.resetLayout();
}});
Polymer({is:"app-toolbar"});
Polymer.AppLayout.registerEffect("blend-background", {setUp:function() {
  this.$.backgroundFrontLayer.style.willChange = "opacity";
  this.$.backgroundFrontLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.willChange = "opacity";
  this.$.backgroundRearLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.opacity = 0;
}, run:function(a, b) {
  this.$.backgroundFrontLayer.style.opacity = 1 - a;
  this.$.backgroundRearLayer.style.opacity = a;
}});
Polymer.AppLayout.registerEffect("fade-background", {setUp:function(a) {
  a = a.duration || "0.5s";
  this.$.backgroundFrontLayer.style.willChange = "opacity";
  this.$.backgroundFrontLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundFrontLayer.style.transitionProperty = "opacity";
  this.$.backgroundFrontLayer.style.transitionDuration = a;
  this.$.backgroundRearLayer.style.willChange = "opacity";
  this.$.backgroundRearLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.transitionProperty = "opacity";
  this.$.backgroundRearLayer.style.transitionDuration = a;
}, run:function(a, b) {
  1 <= a ? (this.$.backgroundFrontLayer.style.opacity = 0, this.$.backgroundRearLayer.style.opacity = 1) : (this.$.backgroundFrontLayer.style.opacity = 1, this.$.backgroundRearLayer.style.opacity = 0);
}});
Polymer.AppLayout.registerEffect("waterfall", {run:function(a, b) {
  this.shadow = this.isOnScreen() && this.isContentBelow();
}});
(function() {
  function a(a, c, d, f) {
    d.apply(f, c.map(function(b) {
      return b[0] + (b[1] - b[0]) * a;
    }));
  }
  Polymer.AppLayout.registerEffect("resize-title", {setUp:function() {
    var a = Polymer.dom(this).querySelector("[title]"), c = Polymer.dom(this).querySelector("[condensed-title]");
    if (!c) {
      return this._warn(this._logf("effects[resize-title]", "undefined `condensed-title`")), !1;
    }
    if (!a) {
      return this._warn(this._logf("effects[resize-title]", "undefined `title`")), !1;
    }
    c.style.willChange = "opacity";
    a.style.willChange = "opacity";
    c.style.webkitTransform = "translateZ(0)";
    a.style.webkitTransform = "translateZ(0)";
    var d = a.getBoundingClientRect(), f = c.getBoundingClientRect(), g = {};
    g.scale = parseInt(window.getComputedStyle(c)["font-size"], 10) / parseInt(window.getComputedStyle(a)["font-size"], 10);
    g.titleDX = d.left - f.left;
    g.titleDY = d.top - f.top;
    g.condensedTitle = c;
    g.title = a;
    this._fxResizeTitle = g;
  }, tearDown:function() {
    delete this._fxResizeTitle;
  }, run:function(b, c) {
    var d = this._fxResizeTitle;
    this.condenses || (c = 0);
    1 <= b ? (d.title.style.opacity = 0, d.condensedTitle.style.opacity = 1) : (d.title.style.opacity = 1, d.condensedTitle.style.opacity = 0);
    a(Math.min(1, b), [[1, d.scale], [0, -d.titleDX], [c, c - d.titleDY]], function(a, b, c) {
      this.transform("translate(" + b + "px, " + c + "px) scale3d(" + a + ", " + a + ", 1)", d.title);
    }, this);
  }});
})();
Polymer.AppLayout.registerEffect("parallax-background", {setUp:function(a) {
  a = parseFloat(a.scalar);
  this._deltaBg = this.$.backgroundFrontLayer.offsetHeight - this.$.background.offsetHeight;
  0 === this._deltaBg ? (isNaN(a) && (a = 0.8), this._deltaBg = this._dHeight * a) : (isNaN(a) && (a = 1), this._deltaBg *= a);
}, tearDown:function() {
  delete this._deltaBg;
}, run:function(a, b) {
  this.transform("translate3d(0px, " + this._deltaBg * Math.min(1, a) + "px, 0px)", this.$.backgroundFrontLayer);
  this.$.backgroundRearLayer && this.transform("translate3d(0px, " + this._deltaBg * Math.min(1, a) + "px, 0px)", this.$.backgroundRearLayer);
}});
Polymer.AppLayout.registerEffect("material", {setUp:function() {
  this.effects = "waterfall resize-title blend-background parallax-background";
  return !1;
}});
Polymer.AppLayout.registerEffect("resize-snapped-title", {setUp:function(a) {
  var b = Polymer.dom(this).querySelector("[title]"), c = Polymer.dom(this).querySelector("[condensed-title]");
  a = a.duration || "0.2s";
  var d = {};
  if (!c) {
    return this._warn(this._logf("effects[resize-snapped-title]", "undefined `condensed-title`")), !1;
  }
  if (!b) {
    return this._warn(this._logf("effects[resize-snapped-title]", "undefined `title`")), !1;
  }
  b.style.transitionProperty = "opacity";
  b.style.transitionDuration = a;
  c.style.transitionProperty = "opacity";
  c.style.transitionDuration = a;
  d.condensedTitle = c;
  d.title = b;
  this._fxResizeSnappedTitle = d;
}, tearDown:function() {
  var a = this._fxResizeSnappedTitle;
  a.title.style.transition = "";
  a.condensedTitle.style.transition = "";
  delete this._fxResizeSnappedTitle;
}, run:function(a, b) {
  b = this._fxResizeSnappedTitle;
  0 < a ? (b.title.style.opacity = 0, b.condensedTitle.style.opacity = 1) : (b.title.style.opacity = 1, b.condensedTitle.style.opacity = 0);
}});
Polymer({is:"paper-fullscreen-dialog", properties:{dismissIcon:{type:String, value:"", observer:"_dismissIconChanged"}, responsiveWidth:{type:String, value:"600px"}, narrow:{type:Boolean, reflectToAttribute:!0, observer:"_narrowChanged", notify:!0}, modal:{type:Boolean, value:!0}, _autoCloseDisabled:{type:Boolean, value:!0}, _layered:{type:Boolean, value:!1}, _affirmativeBtn:Object}, behaviors:[Polymer.PaperDialogBehavior], attached:function() {
  this.sizingTarget = this.$.scroller;
  var a = Polymer.dom(this.$.affirmative).getDistributedNodes();
  a.length && (this._affirmativeBtn = a[0]);
  this._dismissIconChanged();
}, _dismissIconChanged:function() {
  this.$.dismissBtn.icon = this.dismissIcon ? this.dismissIcon : this._affirmativeBtn ? "close" : "arrow-back";
}, _narrowChanged:function() {
  this.narrow ? (this.style.width = "auto", this.modal = !1) : (this.style.width = this.responsiveWidth, this.modal = !0);
  this.fire("paper-responsive-change", {narrow:this.narrow});
}});
(function() {
  var a = null;
  Polymer({is:"paper-multidrawer-panel", behaviors:[Polymer.IronResizableBehavior], properties:{defaultSelected:{type:String, value:"main"}, disableLeftEdgeSwipe:{type:Boolean, value:!1}, disableRightEdgeSwipe:{type:Boolean, value:!1}, disableSwipe:{type:Boolean, value:!1}, dragging:{type:Boolean, value:!1, readOnly:!0, notify:!0}, drawerWidth:{type:String, value:"256px"}, leftDrawerWidth:{type:String, value:null}, rightDrawerWidth:{type:String, value:null}, edgeSwipeSensitivity:{type:Number, value:30}, 
  forceNarrow:{type:Boolean, value:!1}, forceLeftDrawerTemporary:{type:Boolean, value:!1, observer:"_forceLeftDrawerTemporaryChanged"}, forceRightDrawerTemporary:{type:Boolean, value:!1, observer:"_forceRightDrawerTemporaryChanged"}, hasTransform:{type:Boolean, value:function() {
    return "transform" in this.style;
  }}, hasWillChange:{type:Boolean, value:function() {
    return "willChange" in this.style;
  }}, narrow:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, leftDrawerTemporary:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, rightDrawerTemporary:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, peeking:{type:Boolean, value:!1, readOnly:!0, notify:!0}, responsiveWidth:{type:String, value:"600px"}, responsiveWidthLeft:{type:String, value:null}, responsiveWidthRight:{type:String, value:null}, selected:{reflectToAttribute:!0, 
  notify:!0, type:String, value:null}, leftDrawerToggleAttribute:{type:String, value:"paper-multidrawer-toggle-left"}, rightDrawerToggleAttribute:{type:String, value:"paper-multidrawer-toggle-right"}, _transition:{type:Boolean, value:!1}, _leftDrawer:{type:Boolean, value:!1, readOnly:!0, notify:!0}, _rightDrawer:{type:Boolean, value:!1, readOnly:!0, notify:!0}, _movingDrawer:{type:Object, value:null}, _lastInteractedDrawer:{type:String, value:null, readOnly:!0}}, listeners:{tap:"_onTap", track:"_onTrack", 
  down:"_downHandler", up:"_upHandler"}, observers:["_forceNarrowChanged(forceNarrow, defaultSelected)"], ready:function() {
    this._transition = !0;
    this._set_leftDrawer(!!Polymer.dom(this.$.leftDrawerContent).getDistributedNodes().length);
    this._responsiveChange(this.$.mqResponsiveWidthLeft.queryMatches || this.forceLeftDrawerTemporary, "leftDrawerTemporary");
    this._set_rightDrawer(!!Polymer.dom(this.$.rightDrawerContent).getDistributedNodes().length);
    this._responsiveChange(this.$.mqResponsiveWidthRight.queryMatches || this.forceRightDrawerTemporary, "rightDrawerTemporary");
  }, toggleLeftPanel:function() {
    console.log("toggleLeftPanel:", this.leftDrawerTemporary);
    console.log("toggleLeftPanel.main:", this._isMainSelected());
    (this._isMainSelected() || this._isRightDrawerSelected()) && this.openLeftDrawer();
  }, toggleRightPanel:function() {
    this.rightDrawerTemporary && (this._isMainSelected() || this._isLeftDrawerSelected() ? this.openRightDrawer() : this.closeDrawer());
  }, openLeftDrawer:function() {
    this._leftDrawer && (this._set_lastInteractedDrawer("left"), this.selected = "leftDrawer", this._movingDrawer = this.$.leftDrawer);
  }, openRightDrawer:function() {
    this._rightDrawer && (this._set_lastInteractedDrawer("right"), this.selected = "rightDrawer", this._movingDrawer = this.$.rightDrawer);
  }, closeDrawer:function() {
    this.selected = "main";
    this._movingDrawer = null;
  }, _onMainTransitionEnd:function(a) {
    a.currentTarget !== this.$.main || "left" !== a.propertyName && "right" !== a.propertyName || this.notifyResize();
  }, _computeIronSelectorClass:function(a, c, d, f, g, h, m, u) {
    a = {dragging:g, "narrow-layout":a, "left-drawer":d, "right-drawer":f, transition:c, peeking:h, "left-drawer-temporary":m || a && d, "right-drawer-temporary":u || a && f};
    c = [];
    for (var b in a) {
      a.hasOwnProperty(b) && a[b] && c.push(b);
    }
    return c.join(" ");
  }, _computeDrawerStyle:function(a, c) {
    return "width:" + (c ? c : a) + ";";
  }, _computeMainStyle:function(a, c, d, f, g, h, m, u) {
    var b = "", b = a || f || !c ? b + "left:0;" : b + ("left:0" + (m ? m : h) + ";");
    return a || g || !d ? b + "right:0;" : b + ("right:" + (u ? u : h) + ";");
  }, _computeMediaQuery:function(a, c) {
    return a ? "" : "(max-width: " + c + ")";
  }, _computeSideMediaQuery:function(a, c, d) {
    return a || c ? "" : "(max-width: " + d + ")";
  }, _responsiveChange:function(a, c) {
    switch(c) {
      case "narrow":
        this._setNarrow(a);
        this.narrow && (this.selected = this.defaultSelected);
        this.setScrollDirection(this._swipeAllowed() ? "y" : "all");
        this.fire("paper-responsive-change", {narrow:this.narrow});
        break;
      case "leftDrawerTemporary":
        this._leftDrawer && (this.narrow ? this._setLeftDrawerTemporary(!0) : this._setLeftDrawerTemporary(a), this.selected = this.defaultSelected, this.setScrollDirection(this._swipeAllowed() ? "y" : "all"), this.fire("paper-responsive-change", {leftDrawerTemporary:this.leftDrawerTemporary}));
        break;
      case "rightDrawerTemporary":
        this._rightDrawer && (this.narrow ? this._setRightDrawerTemporary(!0) : this._setRightDrawerTemporary(a), this.selected = this.defaultSelected, this.setScrollDirection(this._swipeAllowed() ? "y" : "all"), this.fire("paper-responsive-change", {rightDrawerTemporary:this.rightDrawerTemporary}));
    }
  }, _onQueryMatchesChanged:function(a) {
    switch((a.target || a.srcElement).id) {
      case "mqResponsiveWidth":
        this._responsiveChange(a.detail.value, "narrow");
        break;
      case "mqResponsiveWidthLeft":
        this._responsiveChange(a.detail.value, "leftDrawerTemporary");
        break;
      case "mqResponsiveWidthRight":
        this._responsiveChange(a.detail.value, "rightDrawerTemporary");
    }
  }, _forceNarrowChanged:function() {
    this._responsiveChange(this.forceNarrow || this.$.mqResponsiveWidth.queryMatches, "narrow");
  }, _forceLeftDrawerTemporaryChanged:function() {
    this._responsiveChange(this.forceLeftDrawerTemporary || this.$.mqResponsiveWidthLeft.queryMatches, "leftDrawerTemporary");
  }, _forceRightDrawerTemporaryChanged:function() {
    this._responsiveChange(this.forceRightDrawerTemporary || this.$.mqResponsiveWidthRight.queryMatches, "rightDrawerTemporary");
  }, _swipeAllowed:function() {
    return (this.narrow || this.leftDrawerTemporary || this.rightDrawerTemporary) && !this.disableSwipe;
  }, _isMainSelected:function() {
    return "main" === this.selected;
  }, _isLeftDrawerSelected:function() {
    return "leftDrawer" === this.selected;
  }, _isRightDrawerSelected:function() {
    return "rightDrawer" === this.selected;
  }, _onTap:function(a) {
    (a = Polymer.dom(a).localTarget) && this.leftDrawerToggleAttribute && a.hasAttribute(this.leftDrawerToggleAttribute) && this.toggleLeftPanel();
    a && this.rightDrawerToggleAttribute && a.hasAttribute(this.rightDrawerToggleAttribute) && this.toggleRightPanel();
  }, _downHandler:function(b) {
    var c = this._isEdgeTouch(b);
    !this.dragging && this._isMainSelected() && c && !a && (this._startEdgePeek(c), b.preventDefault(), a = this);
  }, _upHandler:function() {
    this._stopEdgePeek();
    a = null;
  }, _onTrack:function(b) {
    if (!a || this === a) {
      switch(b.detail.state) {
        case "start":
          this._trackStart(b);
          break;
        case "track":
          this._trackX(b);
          break;
        case "end":
          this._trackEnd(b);
      }
    }
  }, _isEdgeTouch:function(a) {
    a = a.detail.x;
    if (this._swipeAllowed()) {
      if (a <= this.edgeSwipeSensitivity && this.leftDrawerTemporary && !this.disableLeftEdgeSwipe) {
        return this._set_lastInteractedDrawer("left"), "left";
      }
      if (a >= this.offsetWidth - this.edgeSwipeSensitivity && this.rightDrawerTemporary && !this.disableRightEdgeSwipe) {
        return this._set_lastInteractedDrawer("right"), "right";
      }
    }
    return !1;
  }, _startEdgePeek:function(a) {
    switch(a) {
      case "left":
        this._movingDrawer = this.$.leftDrawer;
        a = this.edgeSwipeSensitivity;
        break;
      case "right":
        this._movingDrawer = this.$.rightDrawer;
        a = -this.edgeSwipeSensitivity;
        break;
      default:
        return;
    }
    this.width = this._movingDrawer.offsetWidth;
    this._moveDrawer(this._movingDrawer, this._translateXForDeltaX(a));
    this._setPeeking(!0);
  }, _stopEdgePeek:function() {
    this.peeking && (this._setPeeking(!1), this._moveDrawer(this._movingDrawer, null));
  }, _trackStart:function(b) {
    if (this._swipeAllowed()) {
      a = this;
      this._setDragging(!0);
      if (this._isMainSelected()) {
        var c = this._isEdgeTouch(b);
        this._setDragging(this.peeking || !!c);
      }
      if (this.dragging) {
        if (!this._movingDrawer) {
          switch(c) {
            case "left":
              this._movingDrawer = this.$.leftDrawer;
              break;
            case "right":
              this._movingDrawer = this.$.rightDrawer;
              break;
            default:
              return;
          }
        }
        this.width = this._movingDrawer.offsetWidth;
        this._transition = !1;
      }
    }
  }, _trackEnd:function(b) {
    this.dragging && (b = 0 < b.detail.dx, this._setDragging(!1), this._transition = !0, a = null, this._moveDrawer(this._movingDrawer, null), "rightDrawer" === this._movingDrawer.id ? b ? (this.closeDrawer(), this._movingDrawer = null) : this.openRightDrawer() : b ? this.openLeftDrawer() : (this.closeDrawer(), this._movingDrawer = null));
  }, _trackX:function(a) {
    if (this.dragging) {
      a = a.detail.dx;
      if (this.peeking) {
        if (Math.abs(a) <= this.edgeSwipeSensitivity) {
          return;
        }
        this._setPeeking(!1);
      }
      this._moveDrawer(this._movingDrawer, this._translateXForDeltaX(a));
    }
  }, _translateXForDeltaX:function(a) {
    var b = this._isMainSelected();
    return "rightDrawer" === this._movingDrawer.id ? Math.max(0, b ? this.width + a : a) : Math.min(0, b ? a - this.width : a);
  }, _transformForTranslateX:function(a) {
    return null === a ? "" : this.hasWillChange ? "translateX(" + a + "px)" : "translate3d(" + a + "px, 0, 0)";
  }, _moveDrawer:function(a, c) {
    this.transform(this._transformForTranslateX(c), a);
  }});
})();
DialogBehavior = {closeDialog:function(a) {
  $(a).fadeOut({duration:400, complete:function() {
    $(a).dialog("close");
  }});
}, destroyDialog:function(a) {
  $(a).fadeOut({duration:400, complete:function() {
    $(a).dialog("destroy");
  }});
}, openDialog:function(a, b, c, d, f, g) {
  b = b || "80%";
  window.matchMedia("(max-width: 480px)").matches && (b = "95%");
  g = g || !0;
  c = $(a).dialog({open:function(b, c) {
    $(a).hide();
    $(a).fadeIn(1000);
  }, resizable:g, draggable:!0, closeText:"", resize:f, close:function() {
    console.log("close");
    this.destroyDialog(a);
  }.bind(this), title:d || "", height:"auto", maxHeight:c, width:b, modal:!0});
  c.parent().css("z-index", "555111");
  return c;
}};
RegistryBehavior = {onRegistrySave:function() {
  this.debounce("onRegistrySave", function() {
    this._onRegistrySave();
  }, 250);
}, _onRegistrySave:function() {
  this._doSave(this._currentRegistryName);
}, onRegistrySaveUnder:function() {
  this.getState();
  var a = Lobibox.prompt("text", {height:200, title:tr(this._registryTitleSave ? this._registryTitleSave : "te.enter_name"), attrs:{pattern:"[A-Za-z0-9]{3,}", value:this._currentRegistryName}, callback:function(b, c, d) {
    "cancel" == c || _.isEmpty(a.getValue()) || this._doSave(a.getValue());
  }.bind(this)});
}, _doSave:function(a, b) {
  var c = this.getState();
  this._currentRegistryName = a;
  var d = this._registryAttributes;
  null == d && (d = {subject:this._registrySubject});
  a = {service:"registry", method:"set", parameter:{key:this._registryKey + "/" + a, attributes:d, value:JSON.stringify(c)}, async:!0, context:this, failed:function(a) {
    console.error("_doSave:", a);
    null != a && !0 !== b && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    !0 !== b && this.notify(tr("registry.saved"), "success", 8000);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, selectFromList:function(a, b, c) {
  var d = Lobibox.window({title:tr("registry.select"), width:300, height:400, modal:!0, content:function() {
    return $(a);
  }, buttons:{select:{text:tr("button.select")}, close:{text:tr("button.cancel"), closeOnClick:!0}}, callback:function(a, g, h) {
    "select" === g && (a = a.$el[0].querySelector("#registryMenuId").selected, null != a && (this._currentRegistryName = c[a], a = JSON.parse(b[a]), this.setState(a), d.destroy()));
  }.bind(this)});
}, onRegistryLoad:function() {
  this.debounce("onRegistryLoad", function() {
    this._onRegistryLoad();
  }, 250);
}, _onRegistryLoad:function() {
  var a = this._registryAttributes;
  null == a && (a = {subject:this._registrySubject});
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"getAll", parameter:{attributes:a}, async:!0, context:this, failed:function(a) {
    console.error("getRegistry:", a);
    this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("getRegistry.ret:", a);
    for (var b = '<paper-menu id="registryMenuId">', d = [], f = [], g = 0; g < a.length; g++) {
      var h = a[g].key, h = h.substring(h.lastIndexOf("/") + 1), b = b + ('<paper-item style="min-height:24px; font-size:14px;">' + h + "</paper-item>");
      d.push(a[g].value);
      f.push(h);
    }
    this.selectFromList(b + "</paper-menu>", d, f);
  }});
}, _doDelete:function(a, b) {
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"delete", parameter:{key:this._registryKey + "/" + a, silent:b}, async:!0, context:this, failed:function(a) {
    console.error("deleteRegistry:", a);
    1 != b && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("deleteRegistry.ok");
  }});
}, _doLoad:function(a, b, c) {
  var d = this._registryAttributes;
  null == d && (d = {subject:this._registrySubject});
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"get", parameter:{key:this._registryKey + "/" + a, attributes:d, silent:c}, async:!0, context:this, failed:function(a) {
    console.error("getRegistry:", a);
    1 != c && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("getRegistry.ret:", a);
    b(a);
  }});
}};
"use strict";
String.format || (String.format = function(a) {
  var b = Array.prototype.slice.call(arguments, 1);
  return a.replace(/{(\d+)}/g, function(a, d) {
    return "undefined" !== typeof b[d] ? b[d] : a;
  });
});
String.slugify || (String.slugify = function(a) {
  return a.replace(/^\s\s*/, "").replace(/\s\s*$/, "").toLowerCase().replace(/[^a-z0-9_\-~!\+\s]+/g, "").replace(/[\s]+/g, "-");
});
var Simpl4 = Simpl4 || {};
Simpl4.Utils = function() {
  return {isArrayMatch:function(a, b) {
    var c;
    var d = !1;
    var f = {};
    if (!a || !b) {
      return !1;
    }
    var g = 0;
    for (c = a.length; g < c; g++) {
      var h = a[g];
      f[h] = !0;
    }
    g = 0;
    for (c = b.length; !d && g < c; g++) {
      h = b[g], d = !!f[h];
    }
    return d;
  }};
}();
Simpl4.Cache = function() {
  var a = new Cache(-1, !1, new Cache.LocalStorageCacheStorage);
  return {setItem:function(b, c, d) {
    return a.setItem(b, c, d);
  }, getItem:function(b) {
    return a.getItem(b);
  }, removeItem:function(b) {
    return a.removeItem(b);
  }, removeWhere:function(b) {
    return a.removeWhere(b);
  }};
}();
CSSImportBehavior = {convertSheetsToStyles:function(a) {
  a = a.querySelectorAll("link[rel=stylesheet]");
  for (var b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
    var f = this.hrefForSheet(d, this.ownerDocument.baseURI);
    this.createStyleElement(this.importRuleForSheet(d, this.ownerDocument.baseURI), this.ownerDocument);
    this.importHref(f, this._onCssResponse.bind(this));
    d.parentNode.removeChild(d);
  }
}, importSheet:function(a) {
  this.importHref(a, this._onCssResponse.bind(this));
}, _onCssResponse:function(a) {
  var b = a.target.import.body.textContent;
  if (a = this.selectedPage.scope) {
    b = mensch.parse(b), this._visitCssRules(b.stylesheet.rules, this._visitCssNode.bind(this), a), b = mensch.stringify(b);
  }
  a = this.createStyleElement(b, this.ownerDocument);
  document.head.appendChild(a);
}, _visitCssNode:function(a, b) {
  "rule" == a.type ? this._visitCssRule(a, b) : "media" == a.type && a.rules && this._visitCssRules(a.rules, this._visitCssRule.bind(this), b);
}, _visitCssRules:function(a, b, c) {
  return a.reduce(function(a, f) {
    "comment" !== f.type && b(f, c);
  }, []);
}, _visitCssRule:function(a, b) {
  if (a.selectors) {
    for (var c = 0; c < a.selectors.length; c++) {
      var d = a.selectors[c], f = d.indexOf(":");
      a.selectors[c] = 0 <= f ? this._insert(d, f, "." + b) : d + "." + b;
    }
  }
  a.rules && this._visitCssRules(a.rules, this._visitCssRule.bind(this), b);
}, importRuleForSheet:function(a, b) {
  return "@import '" + (new URL(a.getAttribute("href"), b)).href + "';";
}, hrefForSheet:function(a, b) {
  return (new URL(a.getAttribute("href"), b)).href;
}, createStyleElement:function(a, b) {
  b = b || document;
  b = b.createElement ? b : b.ownerDocument;
  b = b.createElement("style");
  b.textContent = a;
  return b;
}, _insert:function(a, b, c) {
  return 0 < b ? a.substring(0, b) + c + a.substring(b, a.length) : c + a;
}};
(function() {
  function a(a) {
    return (a = RegExp("[?&]" + a + "=([^&]*)").exec(window.location.search)) && decodeURIComponent(a[1].replace(/\+/g, " "));
  }
  null == window.console.debug && (window.console.debug = window.console.log);
  window.queryParams = function(a) {
    if ("" == a) {
      return {};
    }
    for (var b = {}, c = 0; c < a.length; ++c) {
      var d = a[c].split("=", 2);
      b[d[0]] = 1 == d.length ? "" : decodeURIComponent(d[1].replace(/\+/g, " "));
    }
    return b;
  }(window.location.search.substr(1).split("&"));
  var b = document.querySelectorAll("head > script");
  for (var c = 0; c < b.length; c++) {
    var d = b[c].src;
    if (d.match(/sw\/surface/)) {
      b = d.split("/sw");
      b = b[0];
      simpl4.util.BaseManager.setBaseUrl(b);
      break;
    }
  }
  if (null == simpl4.util.BaseManager.getBaseUrl()) {
    for (b = document.querySelectorAll("head > link"), c = 0; c < b.length; c++) {
      if (d = b[c].href, d.match(/sw\/surface/)) {
        b = d.split("/sw");
        b = b[0];
        simpl4.util.BaseManager.setBaseUrl(b);
        break;
      }
    }
  }
  d = window.location.pathname.split("/");
  b = d.indexOf("repo");
  b = d[b + 1];
  if (4 < d.length) {
    d = document.getElementsByTagName("head")[0];
    d.querySelector("base") && d.removeChild(d.querySelector("base"));
    var f = document.createElement("base");
    f.href = simpl4.util.BaseManager.getBaseUrl() + "/repo/" + b + "/";
    d.appendChild(f);
  }
  window.is_chromium = -1 < navigator.userAgent.toLowerCase().indexOf("chrome");
  window.is_edge = 0 <= Detectizr.browser.userAgent.indexOf("edge/");
  console.log("is_edge:", is_edge);
  simpl4.util.BaseManager.setNamespace(b);
  window.startPage = a("page");
  b = a("theme");
  f = a("lang");
  (function(a, b) {
    var c = document.location.search;
    if (c) {
      var d = null != b ? a + "=" + b : "", f = location.hash, g = new RegExp("([?&])" + a + "[^&]*");
      a = new RegExp("([?&])" + a + "=[^&;]+[&;]?");
      "undefined" == typeof b || null == b || "" == b ? (b = c.replace(a, "$1"), b = b.replace(/[&;]$/, "")) : b = null !== c.match(g) ? c.replace(g, "$1" + d) : c + "&" + d;
      "?" == b && (b = "");
      c = [location.protocol, "//", location.host, location.pathname].join("");
      window.history.replaceState({}, document.title, c + b + f);
    }
  })("lang", null);
  d = Simpl4.Cache.getItem("lang");
  f ? (simpl4.util.BaseManager.setLanguage(f), simpl4.util.Globals.set("lang", f)) : (f = window.defaultLang || "en", simpl4.util.BaseManager.setLanguage(d ? d : f), simpl4.util.Globals.set("lang", d ? d : f));
  Simpl4.Cache.setItem("lang", simpl4.util.BaseManager.getLanguage());
  b && Simpl4.Cache.setItem("theme", b);
  0 == document.querySelectorAll('head > [href*="theme.html"]').length && (b = b || Simpl4.Cache.getItem("theme"), null == b && (b = "indigo-red"), d = document.createElement("link"), d.rel = "import", d.href = "theme-" + b + ".html", document.getElementsByTagName("head")[0].appendChild(d));
  b = a("passwd");
  (d = a("user")) && b ? (simpl4.util.BaseManager.setUser(d), simpl4.util.BaseManager.setPassword(b), console.log("setting(" + d + "," + b + ")")) : (simpl4.util.BaseManager.setUser("guest"), simpl4.util.BaseManager.setPassword("guest"));
  moment.locale(simpl4.util.BaseManager.getLanguage());
  window.simpl4FormManager = simpl4.util.FormManager;
  window.simpl4MessageManager = simpl4.util.MessageManager;
  window.simpl4EntityManager = simpl4.util.EntityManager;
  window.simpl4Globals = simpl4.util.Globals;
  window.clone = simpl4.util.Merge.clone;
  simpl4MessageManager.installBaseMessages();
  window.tr = simpl4MessageManager.tr;
  window.S4Map = simpl4.util.Map;
  window.S4MultiMap = simpl4.util.MultiMap;
  TrBehavior = {tr:function() {
    return simpl4MessageManager.tr(input);
  }};
  null == window.channel && (window.channel = postal.channel());
  channel.publish("globals.initialized", {});
  b = new Font;
  b.src = simpl4.util.BaseManager.getBaseUrl() + "/sw/surface/fontawesome-webfont.woff?v=4.3.0";
  b.fontFamily = "FontAwesome";
  b.fontWeight = "normal";
  b.fontStyle = "normal";
  b.onload = function() {
  };
  Lobibox.base.OPTIONS.buttons.yes.text = tr("yes");
  Lobibox.base.OPTIONS.buttons.no.text = tr("no");
  Lobibox.notify.OPTIONS.error.title = tr("error");
  Lobibox.notify.OPTIONS.warning.title = tr("warning");
  Lobibox.notify.OPTIONS.success.title = tr("success");
  Lobibox.notify.OPTIONS.info.title = tr("info");
  Polymer({is:"simpl-globals", properties:{namespace:{type:String, value:"xxx"}}, behaviors:[CSSImportBehavior], ready:function() {
    this.selectedPage = {scope:"asciidoctor-default"};
    this.importSheet("asciidoc.css");
  }, namespaceChanged:function() {
    simpl4MessageManager.installMessages(this.namespace);
  }, getProperties:function() {
    var a = null;
    jQuery.ajax({url:"properties.yaml", async:!1, dataType:"json"}).done(function(b) {
      b.lang = simpl4MessageManager.getLanguage();
      window.globals = b;
      b.mainNamespace && simpl4.util.BaseManager.setNamespace(b.mainNamespace);
      a = b;
    }.bind(this));
    return a;
  }});
  ToolbarButtonBehavior = {_toolbarButtonPressed:function(a) {
    this[(a.target || a.srcElement).getAttribute("on-tap")]();
  }, created:function() {
    document.addEventListener("toolbar-button-pressed", this._toolbarButtonPressed.bind(this));
  }};
  TranslationsBehavior = {properties:{}, created:function() {
  }, tr:function(a) {
    return window.tr(a);
  }};
  WhitespaceBehavior = {attached:function() {
    $(".grid").contents().filter(function() {
      return 3 === this.nodeType;
    }).remove();
  }};
  ModernizrBehavior = {attached:function() {
    for (var a = document.documentElement, a = a.className.length ? a.className.split(/\s/) : [], b = 0; b < a.length; b++) {
      var c = a[b];
      $(this).hasClass(c) || this.classList.add(c);
    }
  }};
  StyleScopeBehavior = {setStyleScope:function(a) {
    var b = [];
    for (c = 1; c < arguments.length; c++) {
      null != arguments[c] && b.push(arguments[c]);
    }
    0 != b.length && this._domVisitor(a, function(a) {
      for (c = 0; c < b.length; c++) {
        if (!$(a).hasClass(b[c]) && 1 == a.nodeType && null != a.classList) {
          try {
            a.classList.add(b[c]);
          } catch (u) {
            console.log("classList:", u);
          }
        }
      }
    });
  }, _domVisitor:function(a, b) {
    if (a) {
      b(a);
      for (var c = 0; c < a.childNodes.length; c++) {
        this._domVisitor(a.childNodes[c], b);
      }
    }
  }};
})();
Polymer({is:"simpl-login", ready:function() {
  this.submit = this.heading = "Login";
  this.identification = "Username";
  this.password = this.identifier = "";
}, validate:function() {
  this.$.identifierInput.invalid = !this.identifier;
  this.$.passwordInput.invalid = !this.password;
  if (!this.password || !this.password) {
    return this.shake();
  }
  var a = this.namespace || simpl4.util.BaseManager.getNamespace();
  200 == jQuery.ajax({url:"/sw/" + a + "/checkcredentials/", async:!1, data:"credentials=" + this.identifier + ":" + this.password, method:"POST"}).status ? (simpl4.util.BaseManager.setUser(this.identifier), simpl4.util.BaseManager.setPassword(this.password), this.showOk(tr("login.ok")), this.shakeOk(), this.async(function() {
    this.fireLoginOk();
    this.$.passwordInput.value = "";
  }, 2500)) : (this.showError(tr("login.error")), this.shake());
}, showError:function(a) {
  this.$.toastId.show(a, "error", "10000");
}, showOk:function(a) {
  this.$.toastId.show(a, "success", "10000");
}, shakeOk:function() {
  this.animate([{transform:"translateY(-1px)"}, {transform:"translateY(1px)"}], {direction:"alternate", duration:3600, iterations:1}).play();
}, shake:function() {
  this.animate([{transform:"translateX(-10px)"}, {transform:"translateX(10px)"}], {direction:"alternate", duration:250, iterations:10}).play();
}, fireLoginOk:function() {
  this.fire("login-ok", {identifier:this.identifier, password:this.password});
}});
MainBehavior = {properties:{logoLinkLang:{computed:"substituteLang(logoLink)"}, logoLink:{type:String}, logo:{value:"logo212121.svg", type:String}, logoUrl:{computed:"getLogoUrl(logo)"}, logoData:{computed:"getLogoData(logo)"}, loginMessage:{value:"Login", type:String}, selectedPage:{notify:!0, type:Object}, mmenuBackground:{value:null, type:String}, mmenuClasses:{value:null, type:String}, mmenuName:{value:"menu", type:String}, responsiveWidth:{value:"700px", type:String}, signInOutIcon:{value:"", 
type:String}, useKeyboard:{value:!1, type:Boolean}, waitOnPages:{value:2}, target:{type:Object, value:function() {
  return document.body;
}}}, observers:["routeChanged(route)"], pageCache:function() {
  return {};
}, onToolbarReady:function() {
  this.pagesReady();
}, onMenuReady:function() {
  this.pagesReady();
}, onMenuUpdate:function() {
  this.allPages = this._getPages();
}, pagesReady:function() {
  this.waitOnPages--;
  0 === this.waitOnPages && (this.allPages = this._getPages(), channel.publish("main.pagesReady", {}));
}, _getPages:function() {
  for (var a = document.querySelectorAll("a.menuentry"), b = [], c = 0; c < a.length; c++) {
    b.push(a[c].page);
  }
  return b;
}, buildToolbar:function() {
  var a = document.querySelector("#dispatcherId").getNodes(), b = this.querySelector("#toolbarIconsId");
  null == a && (a = []);
  for (var c = 0; c < a.length; c++) {
    var d = a[c];
    if (d.uri && d.uri.startsWith("mainToolbar:")) {
      for (var f = 0; f < d.children.length; f++) {
        var g = d.children[f];
        this._isNodeDisabled(g) || this._createToolbarEntry(b, g);
      }
    }
  }
  this.onToolbarReady();
}, attached:function() {
  this.buildToolbar();
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  "android" == Detectizr.device.model ? (this.entryAnimation = "fade-in-animation", this.exitAnimation = "fade-out-animation") : (this.entryAnimation = "scale-up-animation", this.exitAnimation = "scale-down-animation");
  this.helpMessage = tr("button.help");
  this.drawerPanel = this.$.drawerPanel;
  this.neonPages = this.$.pages;
  console.log("Detectizr:" + JSON.stringify(Detectizr, null, 2));
  var a = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  console.log("isTouch:" + a);
  console.log("isSafari:" + ("safari" == Detectizr.browser.name));
  var b = this.querySelector("#mainContainer");
  Polymer.dom(b).setAttribute("scrollbar", "");
  this.querySelector("#headerContainer").style.zIndex = 1;
  this._scrollbar = window.Scrollbar.init(b, {speed:a ? 1 : 4, damping:a ? 0.1 : 0.05, paddingTop:64, renderByPixels:!0, alwaysShowTracks:!0, overscrollEffect:"bounce", overscrollDamping:0.1, shouldHandleEvent:function(a) {
    for (a = a.target; a != document.body;) {
      if (a.id && 0 <= a.id.toLowerCase().indexOf("datatables") || null != a.getAttribute("no-smooth-scroll")) {
        return !1;
      }
      a = a.parentNode;
    }
    return !0;
  }, thumbMinSize:10});
  var c = this.$.scrollHeaderPanelId;
  this._scrollbar.addListener(function(a) {
    c._updateScrollState(a.offset.y);
  });
  this.async(function() {
    this._scrollbar.update();
  }, 1000);
  this.observeOverlayBackdrop();
}, scrollbarUpdate:function() {
  this._scrollbar.update();
}, getScrollbarOffset:function() {
  return this._scrollbar.offset;
}, observeOverlayBackdrop:function() {
  (new (window.MutationObserver || window.WebKitMutationObserver)(function(a, b) {
    a = document.querySelectorAll("iron-overlay-backdrop");
    document.querySelector("#mainContainer article.scroll-content").style.display = 0 < a.length ? "initial" : "block";
  })).observe($("body").get(0), {childList:!0});
}, getGlobals:function() {
  null == this.globals && (this.globals = simpl4Globals.getAll());
  return this.globals;
}, routeChanged:function() {
  this._scrollbar ? (this._scrollbar.scrollTo(0, 0), this.async(function() {
    this._scrollbar.update();
  }, 1000)) : $("#mainContainer").scrollTop(0);
  var a = this.route = this.route.toString();
  a.match(/^!/) && (a = a.substring(1));
  this.route != a && (this.route = a);
  channel.publish("route.changed", {route:this.route});
  try {
    if (window._paq) {
      var b = "0" == this.route ? "main" : this.route;
      this.lastAction != b && _paq.push(["trackEvent", "webdemo", b + "/" + Simpl4.Cache.getItem("lang")]);
      this.lastAction = b;
    }
  } catch (c) {
    console.error("trackEvent:", c.stack);
  }
}, togglePanel:function() {
}, keyHandler:function(a, b, c) {
  a = parseInt(b.key);
  if (!isNaN(a) && a <= simpl4PageRegistry.getPages().length) {
    this.neonPages.selectIndex(a - 1);
  } else {
    switch(b.key) {
      case "left":
      case "up":
        this.neonPages.selectPrevious();
        break;
      case "right":
      case "down":
        this.neonPages.selectNext();
        break;
      case "space":
        b.shift ? this.neonPages.selectPrevious() : this.neonPages.selectNext();
    }
  }
}, menuItemSelected:function(a) {
  var b = a.detail.page;
  a.detail.isSelected && b.url && (channel.publish("menuItem.selected", a.detail), document.title = "simpl4-" + b.name, this.selectedPage = b, this.route = b.hash, !0 !== this.pageCache[b.url] && this.importHref(this._buildUrl(b), this.onResponse.bind(this)));
  this.$.drawerPanel.closeDrawer();
}, onResponse:function(a) {
  var b = a.target.import;
  a = b.body;
  b = b.head;
  this.pageCache[this.selectedPage.url] = !0;
  for (var c = this.neonPages.selectedItem.firstElementChild; c.firstChild;) {
    Polymer.dom(c).removeChild(c.firstChild);
  }
  $(c).hide();
  b.firstElementChild && (b.firstElementChild.set && (b.firstElementChild.set("globals", this.getGlobals()), b.firstElementChild.set("tr", function(a) {
    return tr(a);
  })), console.log("HEAD;", b.firstElementChild), Polymer.dom(c).appendChild(b.firstElementChild));
  if (a.firstElementChild && 0 < a.childNodes.length) {
    for (b = 0; b < a.childNodes.length; b++) {
      var d = a.childNodes[b];
      1 == d.nodeType && (Polymer.dom(c).appendChild(d), this.$.dispatcherId.filterLocalLinks(d));
    }
  }
  this.async(function() {
    this.convertSheetsToStyles(c);
    var a = this.selectedPage.scope;
    this.isAsciidoc(this.selectedPage.url) && null == a && (a = "asciidoctor-default");
    this.setStyleScope(c, a);
    this.async(function() {
      $(c).fadeIn(700);
    }, 0);
  }, 2);
}, getLogoLink:function() {
  return this.substituteLang(this.logoLink);
}, substituteLang:function(a, b) {
  if (null != a && "" != a) {
    return -1 != a.indexOf("%l") && (a = a.replace("%l", this.getGlobals().lang)), a.match(/^http/) || (a.match(/^[a-zA-Z].*/) && (a = "./" + a), null == b && (a += "?t=1")), a;
  }
}, _buildUrl:function(a) {
  var b = a.url;
  if (0 < b.indexOf("?rpc=") || 0 < b.indexOf("&rpc=") || a.roles && 0 < a.roles.length) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), c = simpl4.util.Base64.encode(d + ":" + c), b = 0 < b.indexOf("?") ? b + ("&credentials=" + c) : b + ("?credentials=" + c);
  }
  if (_.isEmpty(a.appendix)) {
    return b;
  }
  d = 0 <= b.indexOf("?");
  c = 0 <= b.indexOf("#");
  a = (d ? "&" : "?") + this._maskedEval(a.appendix, a, "paramError=1");
  return c ? b.replace("#", a + "#") : b + a;
}, _maskedEval:function(a, b, c) {
  try {
    return b._ = _, b.tr = tr, b.moment = moment, metaes.evaluate(a.toString(), b);
  } catch (d) {
    console.error("\t" + d), console.debug("Main._maskedEval.script:" + a), console.debug("Main._maskedEval.env:" + JSON.stringify(b, null, 2));
  }
  return c;
}, getHelpDialogStyle:function() {
  return "height:" + 0.9 * $(window).height() + "px;";
}, showHelp:function(a) {
  window._paq && !this.$.helpDialog.opened && _paq.push(["trackEvent", "webclient", ("0" == this.route ? "main" : this.route) + "_help"]);
  this.$.helpDialog.toggle();
}, externalButtonEventHandler:function(a) {
  this.fire("toolbar-button-pressed", a.target || a.srcElement, {key1:"value1"});
}, isAsciidoc:function(a) {
  return 0 < a.indexOf(".adoc");
}, getLogoUrl:function() {
  return this.logo.endsWith(".svg") ? null : this.logo;
}, getLogoData:function() {
  return this.logo.endsWith(".svg") ? {path:this.logo, repo:simpl4.util.BaseManager.getNamespace()} : null;
}, loginOk:function(a) {
  this.loginMessage = "User:" + a.detail.identifier;
  this.$.loginDialog.toggle();
}, login:function(a) {
  this.$.loginDialog.toggle();
}, getLangIcon:function() {
  var a = Simpl4.Cache.getItem("lang");
  return "de" == a || null == a ? "en.svg" : "de.svg";
}, changeTheme:function(a) {
  Simpl4.Cache.setItem("theme", a);
  location.search = "";
  history.go(0);
}, reload:function(a) {
  a = Simpl4.Cache.getItem("lang");
  Simpl4.Cache.setItem("lang", "de" == a || null == a ? "en" : "de");
  location.search = "";
  window.location.reload();
}, setSelected:function(a) {
}, _createToolbarEntry:function(a, b) {
  var c = this._createIcon(b), d = document.createElement("li"), f = document.createElement("a"), g = document.createElement("paper-ripple"), h = document.createTextNode(b.name ? b.name : "");
  Polymer.dom(a).appendChild(d);
  Polymer.dom(d).appendChild(f);
  ("ie" != browser.name || "9" != browser.major && "10" != browser.major) && Polymer.dom(a).appendChild(g);
  Polymer.dom(f).appendChild(c);
  Polymer.dom(f).setAttribute("style", "cursor:pointer");
  Polymer.dom(f).setAttribute("id", "hash_" + b.hash);
  Polymer.dom(f).classList.add("menuentry");
  Polymer.dom(f).appendChild(h);
  Polymer.dom(d).setAttribute("style", "list-style:none");
  Polymer.dom(d).setAttribute("id", "x" + b.hash);
  f.page = b;
  b.provider = this;
}, _addNodeClasses:function(a, b) {
  if (null != b) {
    b = b.split(",");
    for (var c = 0; c < b.length; c++) {
      a.classList.add(b[c]);
    }
  }
}, _isNodeDisabled:function(a) {
  return !0 === a.disabled;
}, _createIcon:function(a) {
  var b = null;
  a.aweicon ? (b = document.createElement("font-awesome"), Polymer.dom(b).setAttribute("icon", a.aweicon)) : a.icon && (b = document.createElement("iron-icon"), this._addNodeClasses(b, "small"), Polymer.dom(b).setAttribute("icon", a.icon));
  return b;
}};
Polymer({is:"simpl-main", behaviors:[MainBehavior, CSSImportBehavior, ModernizrBehavior, StyleScopeBehavior]});
(function(a) {
  function b(b) {
    g = {$wndw:a(window), $html:b, $body:b};
    c = {};
    d = {};
    f = {};
    a.each([c, d, f], function(a, b) {
      b.add = function(a) {
        a = a.split(" ");
        for (var c = 0, d = a.length; c < d; c++) {
          b[a[c]] = b.mm(a[c]);
        }
      };
    });
    c.mm = function(a) {
      return "mm-" + a;
    };
    c.add("wrapper menu panel nopanel current highest opened subopened navbar hasnavbar title btn prev next listview nolistview inset vertical selected divider spacer hidden fullsubopen");
    c.umm = function(a) {
      "mm-" == a.slice(0, 3) && (a = a.slice(3));
      return a;
    };
    d.mm = function(a) {
      return "mm-" + a;
    };
    d.add("parent sub");
    f.mm = function(a) {
      return a + ".mm";
    };
    f.add("transitionend webkitTransitionEnd mousedown mouseup touchstart touchmove touchend click keydown");
    a.mmenu._c = c;
    a.mmenu._d = d;
    a.mmenu._e = f;
    a.mmenu.glbl = g;
  }
  if (!a.mmenu) {
    a.mmenu = function(a, b, c) {
      this.$menu = a;
      this._api = "bind init update setSelected getInstance openPanel closePanel closeAllPanels".split(" ");
      this.opts = b;
      this.conf = c;
      this.vars = {};
      this.cbck = {};
      "function" == typeof this.___deprecated && this.___deprecated();
      this._initMenu();
      this._initAnchors();
      a = this.$menu.children(this.conf.panelNodetype);
      this._initAddons();
      this.init(a);
      "function" == typeof this.___debug && this.___debug();
      return this;
    };
    a.mmenu.version = "5.3.4";
    a.mmenu.addons = {};
    a.mmenu.uniqueId = 0;
    a.mmenu.defaults = {extensions:[], navbar:{add:!0, title:"Menu", titleLink:"panel"}, onClick:{setSelected:!0}, slidingSubmenus:!0};
    a.mmenu.configuration = {classNames:{divider:"Divider", inset:"Inset", panel:"Panel", selected:"Selected", spacer:"Spacer", vertical:"Vertical"}, clone:!1, openingInterval:25, panelNodetype:"ul, ol, div", transitionDuration:400};
    a.mmenu.prototype = {init:function(a) {
      a = a.not("." + c.nopanel);
      a = this._initPanels(a);
      this.trigger("init", a);
      this.trigger("update");
    }, update:function() {
      this.trigger("update");
    }, setSelected:function(a) {
      this.$menu.find("." + c.listview).children().removeClass(c.selected);
      a.addClass(c.selected);
      this.trigger("setSelected", a);
    }, openPanel:function(b) {
      var d = b.parent();
      if (d.hasClass(c.vertical)) {
        var f = d.parents("." + c.subopened);
        if (f.length) {
          return this.openPanel(f.first());
        }
        d.addClass(c.opened);
      } else {
        if (b.hasClass(c.current)) {
          return;
        }
        d = this.$menu.children("." + c.panel);
        f = d.filter("." + c.current);
        d.removeClass(c.highest).removeClass(c.current).not(b).not(f).not("." + c.vertical).addClass(c.hidden);
        a.mmenu.support.csstransitions || f.addClass(c.hidden);
        b.hasClass(c.opened) ? b.nextAll("." + c.opened).addClass(c.highest).removeClass(c.opened).removeClass(c.subopened) : (b.addClass(c.highest), f.addClass(c.subopened));
        b.removeClass(c.hidden).addClass(c.current);
        setTimeout(function() {
          b.removeClass(c.subopened).addClass(c.opened);
        }, this.conf.openingInterval);
      }
      this.trigger("openPanel", b);
    }, closePanel:function(a) {
      var b = a.parent();
      b.hasClass(c.vertical) && (b.removeClass(c.opened), this.trigger("closePanel", a));
    }, closeAllPanels:function() {
      this.$menu.find("." + c.listview).children().removeClass(c.selected).filter("." + c.vertical).removeClass(c.opened);
      var a = this.$menu.children("." + c.panel).first();
      this.$menu.children("." + c.panel).not(a).removeClass(c.subopened).removeClass(c.opened).removeClass(c.current).removeClass(c.highest).addClass(c.hidden);
      this.openPanel(a);
    }, togglePanel:function(a) {
      var b = a.parent();
      if (b.hasClass(c.vertical)) {
        this[b.hasClass(c.opened) ? "closePanel" : "openPanel"](a);
      }
    }, getInstance:function() {
      return this;
    }, bind:function(a, b) {
      this.cbck[a] = this.cbck[a] || [];
      this.cbck[a].push(b);
    }, trigger:function() {
      var a = Array.prototype.slice.call(arguments), b = a.shift();
      if (this.cbck[b]) {
        for (var c = 0, d = this.cbck[b].length; c < d; c++) {
          this.cbck[b][c].apply(this, a);
        }
      }
    }, _initMenu:function() {
      this.opts.offCanvas && this.conf.clone && (this.$menu = this.$menu.clone(!0), this.$menu.add(this.$menu.find("[id]")).filter("[id]").each(function() {
        a(this).attr("id", c.mm(a(this).attr("id")));
      }));
      this.$menu.contents().each(function() {
        3 == a(this)[0].nodeType && a(this).remove();
      });
      this.$menu.parent().addClass(c.wrapper);
      var b = [c.menu];
      this.opts.slidingSubmenus || b.push(c.vertical);
      this.opts.extensions = this.opts.extensions.length ? "mm-" + this.opts.extensions.join(" mm-") : "";
      this.opts.extensions && b.push(this.opts.extensions);
      this.$menu.addClass(b.join(" "));
    }, _initPanels:function(b) {
      var f = this, g = this.__findAddBack(b, "ul, ol");
      this.__refactorClass(g, this.conf.classNames.inset, "inset").addClass(c.nolistview + " " + c.nopanel);
      g.not("." + c.nolistview).addClass(c.listview);
      g = this.__findAddBack(b, "." + c.listview).children();
      this.__refactorClass(g, this.conf.classNames.selected, "selected");
      this.__refactorClass(g, this.conf.classNames.divider, "divider");
      this.__refactorClass(g, this.conf.classNames.spacer, "spacer");
      this.__refactorClass(this.__findAddBack(b, "." + this.conf.classNames.panel), this.conf.classNames.panel, "panel");
      var h = a(), g = b.add(b.find("." + c.panel)).add(this.__findAddBack(b, "." + c.listview).children().children(this.conf.panelNodetype)).not("." + c.nopanel);
      this.__refactorClass(g, this.conf.classNames.vertical, "vertical");
      this.opts.slidingSubmenus || g.addClass(c.vertical);
      g.each(function() {
        var b = a(this), d = b;
        b.is("ul, ol") ? (b.wrap('<div class="' + c.panel + '" />'), d = b.parent()) : d.addClass(c.panel);
        var g = b.attr("id");
        b.removeAttr("id");
        d.attr("id", g || f.__getUniqueId());
        b.hasClass(c.vertical) && (b.removeClass(f.conf.classNames.vertical), d.add(d.parent()).addClass(c.vertical));
        h = h.add(d);
      });
      g = a("." + c.panel, this.$menu);
      h.each(function(b) {
        var g = a(this);
        b = g.parent();
        var h = b.children("a, span").first();
        b.is("." + c.menu) || (b.data(d.sub, g), g.data(d.parent, b));
        if (!b.children("." + c.next).length && b.parent().is("." + c.listview)) {
          var m = g.attr("id");
          m = a('<a class="' + c.next + '" href="#' + m + '" data-target="#' + m + '" />').insertBefore(h);
          h.is("span") && m.addClass(c.fullsubopen);
        }
        if (!g.children("." + c.navbar).length && !b.hasClass(c.vertical)) {
          b.parent().is("." + c.listview) ? b = b.closest("." + c.panel) : (h = b.closest("." + c.panel).find('a[href="#' + g.attr("id") + '"]').first(), b = h.closest("." + c.panel));
          var q = a('<div class="' + c.navbar + '" />');
          if (b.length) {
            m = b.attr("id");
            switch(f.opts.navbar.titleLink) {
              case "anchor":
                _url = h.attr("href");
                break;
              case "panel":
              case "parent":
                _url = "#" + m;
                break;
              default:
                _url = !1;
            }
            q.append('<a class="' + c.btn + " " + c.prev + '" href="#' + m + '" data-target="#' + m + '"></a>').append('<a class="' + c.title + '"' + (_url ? ' href="' + _url + '"' : "") + ">" + h.text() + "</a>").prependTo(g);
            f.opts.navbar.add && g.addClass(c.hasnavbar);
          } else {
            f.opts.navbar.title && (q.append('<a class="' + c.title + '">' + f.opts.navbar.title + "</a>").prependTo(g), f.opts.navbar.add && g.addClass(c.hasnavbar));
          }
        }
      });
      b = this.__findAddBack(b, "." + c.listview).children("." + c.selected).removeClass(c.selected).last().addClass(c.selected);
      b.add(b.parentsUntil("." + c.menu, "li")).filter("." + c.vertical).addClass(c.opened).end().not("." + c.vertical).each(function() {
        a(this).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).addClass(c.subopened);
      });
      b.children("." + c.panel).not("." + c.vertical).addClass(c.opened).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).addClass(c.subopened);
      b = g.filter("." + c.opened);
      b.length || (b = h.first());
      b.addClass(c.opened).last().addClass(c.current);
      h.not("." + c.vertical).not(b.last()).addClass(c.hidden).end().appendTo(this.$menu);
      return h;
    }, _initAnchors:function() {
      var b = this;
      g.$body.on(f.click + "-oncanvas", "a[href]", function(d) {
        var f = a(this), h = !1, m = b.$menu.find(f).length, v;
        for (v in a.mmenu.addons) {
          if (h = a.mmenu.addons[v].clickAnchor.call(b, f, m)) {
            break;
          }
        }
        if (!h && m) {
          var w = f.attr("href");
          if (1 < w.length && "#" == w.slice(0, 1)) {
            try {
              var y = a(w, b.$menu);
              y.is("." + c.panel) && (h = !0, b[f.parent().hasClass(c.vertical) ? "togglePanel" : "openPanel"](y));
            } catch (q) {
            }
          }
        }
        h && d.preventDefault();
        h || !m || !f.is("." + c.listview + " > li > a") || f.is('[rel="external"]') || f.is('[target="_blank"]') || (b.__valueOrFn(b.opts.onClick.setSelected, f) && b.setSelected(a(d.target).parent()), (w = b.__valueOrFn(b.opts.onClick.preventDefault, f, "#" == w.slice(0, 1))) && d.preventDefault(), b.__valueOrFn(b.opts.onClick.blockUI, f, !w) && g.$html.addClass(c.blocking), b.__valueOrFn(b.opts.onClick.close, f, w) && b.close());
      });
    }, _initAddons:function() {
      for (var b in a.mmenu.addons) {
        a.mmenu.addons[b].add.call(this), a.mmenu.addons[b].add = function() {
        };
      }
      for (b in a.mmenu.addons) {
        a.mmenu.addons[b].setup.call(this);
      }
    }, __api:function() {
      var b = this, c = {};
      a.each(this._api, function(a) {
        var d = this;
        c[d] = function() {
          var a = b[d].apply(b, arguments);
          return "undefined" == typeof a ? c : a;
        };
      });
      return c;
    }, __valueOrFn:function(a, b, c) {
      return "function" == typeof a ? a.call(b[0]) : "undefined" == typeof a && "undefined" != typeof c ? c : a;
    }, __refactorClass:function(a, b, d) {
      return a.filter("." + b).removeClass(b).addClass(c[d]);
    }, __findAddBack:function(a, b) {
      return a.find(b).add(a.filter(b));
    }, __filterListItems:function(a) {
      return a.not("." + c.divider).not("." + c.hidden);
    }, __transitionend:function(a, b, c) {
      var d = !1, g = function() {
        d || b.call(a[0]);
        d = !0;
      };
      a.one(f.transitionend, g);
      a.one(f.webkitTransitionEnd, g);
      setTimeout(g, 1.1 * c);
    }, __getUniqueId:function() {
      return c.mm(a.mmenu.uniqueId++);
    }};
    a.fn.mmenu = function(c, d) {
      b(a(this));
      c = a.extend(!0, {}, a.mmenu.defaults, c);
      d = a.extend(!0, {}, a.mmenu.configuration, d);
      return this.each(function() {
        var b = a(this);
        if (!b.data("mmenu")) {
          var f = new a.mmenu(b, c, d);
          b.data("mmenu", f.__api());
        }
      });
    };
    a.mmenu.support = {touch:"ontouchstart" in window || navigator.msMaxTouchPoints, csstransitions:function() {
      if ("undefined" !== typeof Modernizr) {
        return Modernizr.csstransitions;
      }
      var a = (document.body || document.documentElement).style, b = "transition";
      if ("string" == typeof a[b]) {
        return !0;
      }
      for (var c = "Moz webkit Webkit Khtml O ms".split(" "), b = b.charAt(0).toUpperCase() + b.substr(1), d = 0; d < c.length; d++) {
        if ("string" == typeof a[c[d] + b]) {
          return !0;
        }
      }
      return !1;
    }()};
    var c, d, f, g;
  }
})(jQuery);
(function(a) {
  a.mmenu.addons.autoHeight = {setup:function() {
    if (this.opts.offCanvas) {
      switch(this.opts.offCanvas.position) {
        case "left":
        case "right":
          return;
      }
      var f = this, g = this.opts.autoHeight;
      d = a.mmenu.glbl;
      "boolean" == typeof g && g && (g = {height:"auto"});
      "object" != typeof g && (g = {});
      g = this.opts.autoHeight = a.extend(!0, {}, a.mmenu.defaults.autoHeight, g);
      if ("auto" == g.height) {
        this.$menu.addClass(b.autoheight);
        var h = function(a) {
          var c = this.$menu.children("." + b.current);
          _top = parseInt(c.css("top"), 10) || 0;
          _bot = parseInt(c.css("bottom"), 10) || 0;
          this.$menu.addClass(b.measureheight);
          a = a || this.$menu.children("." + b.current);
          a.is("." + b.vertical) && (a = a.parents("." + b.panel).not("." + b.vertical).first());
          this.$menu.height(a.outerHeight() + _top + _bot).removeClass(b.measureheight);
        };
        this.bind("update", h);
        this.bind("openPanel", h);
        this.bind("closePanel", h);
        this.bind("open", h);
        d.$wndw.off(c.resize + "-autoheight").on(c.resize + "-autoheight", function(a) {
          h.call(f);
        });
      }
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("autoheight measureheight");
    c.add("resize");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.autoHeight = {height:"default"};
  var b, c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.backButton = {setup:function() {
    if (this.opts.offCanvas) {
      var d = this, f = this.opts.backButton;
      c = a.mmenu.glbl;
      "boolean" == typeof f && (f = {close:f});
      "object" != typeof f && (f = {});
      f = a.extend(!0, {}, a.mmenu.defaults.backButton, f);
      if (f.close) {
        var g = "#" + d.$menu.attr("id");
        this.bind("opened", function(a) {
          location.hash != g && history.pushState(null, document.title, g);
        });
        a(window).on("popstate", function(a) {
          c.$html.hasClass(b.opened) ? (a.stopPropagation(), d.close()) : location.hash == g && (a.stopPropagation(), d.open());
        });
      }
    }
  }, add:function() {
    window.history && window.history.pushState ? b = a.mmenu._c : a.mmenu.addons.backButton.setup = function() {
    };
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.backButton = {close:!1};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.counters = {setup:function() {
    var d = this, f = this.opts.counters;
    "boolean" == typeof f && (f = {add:f, update:f});
    "object" != typeof f && (f = {});
    f = this.opts.counters = a.extend(!0, {}, a.mmenu.defaults.counters, f);
    this.bind("init", function(b) {
      this.__refactorClass(a("em", b), this.conf.classNames.counters.counter, "counter");
    });
    f.add && this.bind("init", function(d) {
      d.each(function() {
        var d = a(this).data(c.parent);
        d && (d.children("em." + b.counter).length || d.prepend(a('<em class="' + b.counter + '" />')));
      });
    });
    f.update && this.bind("update", function() {
      this.$menu.find("." + b.panel).each(function() {
        var f = a(this), h = f.data(c.parent);
        h && (h = h.children("em." + b.counter), h.length && (f = f.children("." + b.listview), f.length && h.html(d.__filterListItems(f.children()).length)));
      });
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    b.add("counter search noresultsmsg");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.counters = {add:!1, update:!1};
  a.mmenu.configuration.classNames.counters = {counter:"Counter"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.dividers = {setup:function() {
    var d = this, f = this.opts.dividers;
    "boolean" == typeof f && (f = {add:f, fixed:f});
    "object" != typeof f && (f = {});
    f = this.opts.dividers = a.extend(!0, {}, a.mmenu.defaults.dividers, f);
    this.bind("init", function(b) {
      this.__refactorClass(a("li", this.$menu), this.conf.classNames.dividers.collapsed, "collapsed");
    });
    f.add && this.bind("init", function(c) {
      switch(f.addTo) {
        case "panels":
          break;
        default:
          c = a(f.addTo, this.$menu).filter("." + b.panel);
      }
      a("." + b.divider, c).remove();
      c.find("." + b.listview).not("." + b.vertical).each(function() {
        var c = "";
        d.__filterListItems(a(this).children()).each(function() {
          var d = a.trim(a(this).children("a, span").text()).slice(0, 1).toLowerCase();
          d != c && d.length && (c = d, a('<li class="' + b.divider + '">' + d + "</li>").insertBefore(this));
        });
      });
    });
    f.collapse && this.bind("init", function(c) {
      a("." + b.divider, c).each(function() {
        var c = a(this);
        c.nextUntil("." + b.divider, "." + b.collapsed).length && !c.children("." + b.subopen).length && (c.wrapInner("<span />"), c.prepend('<a href="#" class="' + b.subopen + " " + b.fullsubopen + '" />'));
      });
    });
    if (f.fixed) {
      var g = function(c) {
        c = c || this.$menu.children("." + b.current);
        if (c.find("." + b.divider).not("." + b.hidden).length) {
          this.$menu.addClass(b.hasdividers);
          var d = c.scrollTop() || 0, f = "";
          c.is(":visible") && c.find("." + b.divider).not("." + b.hidden).each(function() {
            a(this).position().top + d < d + 1 && (f = a(this).text());
          });
          this.$fixeddivider.text(f);
        } else {
          this.$menu.removeClass(b.hasdividers);
        }
      };
      this.$fixeddivider = a('<ul class="' + b.listview + " " + b.fixeddivider + '"><li class="' + b.divider + '"></li></ul>').prependTo(this.$menu).children();
      this.bind("openPanel", g);
      this.bind("init", function(b) {
        b.off(c.scroll + "-dividers " + c.touchmove + "-dividers").on(c.scroll + "-dividers " + c.touchmove + "-dividers", function(b) {
          g.call(d, a(this));
        });
      });
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("collapsed uncollapsed fixeddivider hasdividers");
    c.add("scroll");
  }, clickAnchor:function(a, c) {
    return this.opts.dividers.collapse && c && (a = a.parent(), a.is("." + b.divider)) ? (c = a.nextUntil("." + b.divider, "." + b.collapsed), a.toggleClass(b.opened), c[a.hasClass(b.opened) ? "addClass" : "removeClass"](b.uncollapsed), !0) : !1;
  }};
  a.mmenu.defaults.dividers = {add:!1, addTo:"panels", fixed:!1, collapse:!1};
  a.mmenu.configuration.classNames.dividers = {collapsed:"Collapsed"};
  var b, c;
})(jQuery);
(function(a) {
  function b(a, b, c) {
    a < b && (a = b);
    a > c && (a = c);
    return a;
  }
  a.mmenu.addons.dragOpen = {setup:function() {
    if (this.opts.offCanvas) {
      var f = this, g = this.opts.dragOpen, h = this.conf.dragOpen;
      d = a.mmenu.glbl;
      "boolean" == typeof g && (g = {open:g});
      "object" != typeof g && (g = {});
      g = this.opts.dragOpen = a.extend(!0, {}, a.mmenu.defaults.dragOpen, g);
      if (g.open) {
        var m = 0, u = !1, r = !1, n = 0, v = 0, w, y, q;
        switch(this.opts.offCanvas.position) {
          case "left":
          case "right":
            var l = "panleft panright";
            var p = "x";
            var t = "X";
            r = "width";
            break;
          case "top":
          case "bottom":
            l = "panup pandown", p = "y", t = "Y", r = "height";
        }
        switch(this.opts.offCanvas.position) {
          case "right":
          case "bottom":
            var x = !0;
            var z = function(a) {
              a >= d.$wndw[r]() - g.maxStartPos && (m = 1);
            };
            break;
          default:
            x = !1, z = function(a) {
              a <= g.maxStartPos && (m = 1);
            };
        }
        switch(this.opts.offCanvas.position) {
          case "left":
            var A = "right";
            var E = "left";
            break;
          case "right":
            A = "left";
            E = "right";
            break;
          case "top":
            A = "down";
            E = "up";
            break;
          case "bottom":
            A = "up", E = "down";
        }
        switch(this.opts.offCanvas.zposition) {
          case "front":
            var F = function() {
              return this.$menu;
            };
            break;
          default:
            F = function() {
              return a("." + c.slideout);
            };
        }
        var J = this.__valueOrFn(g.pageNode, this.$menu, d.$page);
        "string" == typeof J && (J = a(J));
        (new Hammer(J[0], g.vendors.hammer)).on("panstart", function(a) {
          z(a.center[p]);
          d.$slideOutNodes = F();
          u = A;
        }).on(l + " panend", function(a) {
          0 < m && a.preventDefault();
        }).on(l, function(a) {
          w = a["delta" + t];
          x && (w = -w);
          w != n && (u = w >= n ? A : E);
          n = w;
          if (n > g.threshold && 1 == m) {
            if (d.$html.hasClass(c.opened)) {
              return;
            }
            m = 2;
            f._openSetup();
            f.trigger("opening");
            d.$html.addClass(c.dragging);
            v = b(d.$wndw[r]() * h[r].perc, h[r].min, h[r].max);
          }
          2 == m && (y = b(n, 10, v) - ("front" == f.opts.offCanvas.zposition ? v : 0), x && (y = -y), q = "translate" + t + "(" + y + "px )", d.$slideOutNodes.css({"-webkit-transform":"-webkit-" + q, transform:q}));
        }).on("panend", function(a) {
          2 == m && (d.$html.removeClass(c.dragging), d.$slideOutNodes.css("transform", ""), f[u == A ? "_openFinish" : "close"]());
          m = 0;
        });
      }
    }
  }, add:function() {
    "function" != typeof Hammer || 2 > Hammer.VERSION ? a.mmenu.addons.dragOpen.setup = function() {
    } : (c = a.mmenu._c, c.add("dragging"));
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.dragOpen = {open:!1, maxStartPos:100, threshold:50, vendors:{hammer:{}}};
  a.mmenu.configuration.dragOpen = {width:{perc:0.8, min:140, max:440}, height:{perc:0.8, min:140, max:880}};
  var c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.fixedElements = {setup:function() {
    if (this.opts.offCanvas) {
      var b = this.opts.fixedElements;
      c = a.mmenu.glbl;
      b = this.opts.fixedElements = a.extend(!0, {}, a.mmenu.defaults.fixedElements, b);
      b = function(a) {
        var b = this.conf.classNames.fixedElements.fixed;
        this.__refactorClass(a.find("." + b), b, "slideout").appendTo(c.$body);
      };
      b.call(this, c.$page);
      this.bind("setPage", b);
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("fixed");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.classNames.fixedElements = {fixed:"Fixed"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.iconPanels = {setup:function() {
    var c = this, d = this.opts.iconPanels;
    "boolean" == typeof d && (d = {add:d});
    "number" == typeof d && (d = {add:!0, visible:d});
    "object" != typeof d && (d = {});
    d = this.opts.iconPanels = a.extend(!0, {}, a.mmenu.defaults.iconPanels, d);
    d.visible++;
    if (d.add) {
      this.$menu.addClass(b.iconpanel);
      for (var f = [], g = 0; g <= d.visible; g++) {
        f.push(b.iconpanel + "-" + g);
      }
      var f = f.join(" "), h = function(g) {
        c.$menu.children("." + b.panel).removeClass(f).filter("." + b.subopened).removeClass(b.hidden).add(g).slice(-d.visible).each(function(c) {
          a(this).addClass(b.iconpanel + "-" + c);
        });
      };
      this.bind("openPanel", h);
      this.bind("init", function(f) {
        h.call(c, c.$menu.children("." + b.current));
        d.hideNavbars && f.removeClass(b.hasnavbar);
        f.each(function() {
          a(this).children("." + b.subblocker).length || a(this).prepend('<a href="#' + a(this).closest("." + b.panel).attr("id") + '" class="' + b.subblocker + '" />');
        });
      });
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("iconpanel subblocker");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.iconPanels = {add:!1, visible:3, hideNavbars:!1};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars = {setup:function() {
    var c = this, d = this.opts.navbars, f = this.conf.navbars;
    if ("undefined" != typeof d) {
      d instanceof Array || (d = [d]);
      var g = {};
      a.each(d, function(h) {
        h = d[h];
        "boolean" == typeof h && h && (h = {});
        "object" != typeof h && (h = {});
        "undefined" == typeof h.content && (h.content = ["prev", "title"]);
        h.content instanceof Array || (h.content = [h.content]);
        h = a.extend(!0, {}, c.opts.navbar, h);
        var m = h.position, r = h.height;
        "number" != typeof r && (r = 1);
        r = Math.min(4, Math.max(1, r));
        "bottom" != m && (m = "top");
        g[m] || (g[m] = 0);
        g[m]++;
        var n = a("<div />").addClass(b.navbar + " " + b.navbar + "-" + m + " " + b.navbar + "-" + m + "-" + g[m] + " " + b.navbar + "-size-" + r);
        g[m] += r - 1;
        for (var m = 0, v = h.content.length; m < v; m++) {
          var w = a.mmenu.addons.navbars[h.content[m]] || !1;
          w ? w.call(c, n, h, f) : (w = h.content[m], w instanceof a || (w = a(h.content[m])), w.each(function() {
            n.append(a(this));
          }));
        }
        h = Math.ceil(n.children().not("." + b.btn).length / r);
        1 < h && n.addClass(b.navbar + "-content-" + h);
        n.children("." + b.btn).length && n.addClass(b.hasbtns);
        n.prependTo(c.$menu);
      });
      for (var h in g) {
        c.$menu.addClass(b.hasnavbar + "-" + h + "-" + g[h]);
      }
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("close hasbtns");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.navbars = {breadcrumbSeparator:"/"};
  a.mmenu.configuration.classNames.navbars = {panelTitle:"Title", panelNext:"Next", panelPrev:"Prev"};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.breadcrumbs = function(b, c, d) {
    var f = a.mmenu._c, g = a.mmenu._d;
    f.add("breadcrumbs separator");
    b.append('<span class="' + f.breadcrumbs + '"></span>');
    this.bind("init", function(b) {
      b.removeClass(f.hasnavbar).each(function() {
        for (var b = [], c = a(this), h = a('<span class="' + f.breadcrumbs + '"></span>'), n = a(this).children().first(), v = !0; n && n.length;) {
          n.is("." + f.panel) || (n = n.closest("." + f.panel));
          var w = n.children("." + f.navbar).children("." + f.title).text();
          b.unshift(v ? "<span>" + w + "</span>" : '<a href="#' + n.attr("id") + '">' + w + "</a>");
          v = !1;
          n = n.data(g.parent);
        }
        h.append(b.join('<span class="' + f.separator + '">' + d.breadcrumbSeparator + "</span>")).appendTo(c.children("." + f.navbar));
      });
    });
    c = function() {
      var a = this.$menu.children("." + f.current), c = b.find("." + f.breadcrumbs), a = a.children("." + f.navbar).children("." + f.breadcrumbs);
      c.html(a.html());
    };
    this.bind("openPanel", c);
    this.bind("init", c);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.close = function(b, c) {
    var d = a.mmenu._c;
    c = a.mmenu.glbl;
    b.append('<a class="' + d.close + " " + d.btn + '" href="#"></a>');
    var f = function(a) {
      b.find("." + d.close).attr("href", "#" + a.attr("id"));
    };
    f.call(this, c.$page);
    this.bind("setPage", f);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.next = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.next + " " + d.btn + '" href="#"></a>');
    var f = function(a) {
      a = a || this.$menu.children("." + d.current);
      var c = b.find("." + d.next), f = a.find("." + this.conf.classNames.navbars.panelNext);
      a = f.attr("href");
      f = f.html();
      c[a ? "attr" : "removeAttr"]("href", a);
      c[a || f ? "removeClass" : "addClass"](d.hidden);
      c.html(f);
    };
    this.bind("openPanel", f);
    this.bind("init", function() {
      f.call(this);
    });
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.prev = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.prev + " " + d.btn + '" href="#"></a>');
    this.bind("init", function(a) {
      a.removeClass(d.hasnavbar);
    });
    c = function() {
      var a = this.$menu.children("." + d.current), c = b.find("." + d.prev), h = a.find("." + this.conf.classNames.navbars.panelPrev);
      h.length || (h = a.children("." + d.navbar).children("." + d.prev));
      a = h.attr("href");
      h = h.html();
      c[a ? "attr" : "removeAttr"]("href", a);
      c[a || h ? "removeClass" : "addClass"](d.hidden);
      c.html(h);
    };
    this.bind("openPanel", c);
    this.bind("init", c);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.searchfield = function(b, c) {
    b = a('<div class="' + a.mmenu._c.search + '" />').appendTo(b);
    "object" != typeof this.opts.searchfield && (this.opts.searchfield = {});
    this.opts.searchfield.add = !0;
    this.opts.searchfield.addTo = b;
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.title = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.title + '"></a>');
    var f = function(a) {
      a = a || this.$menu.children("." + d.current);
      var f = b.find("." + d.title), g = a.find("." + this.conf.classNames.navbars.panelTitle);
      g.length || (g = a.children("." + d.navbar).children("." + d.title));
      a = g.attr("href");
      g = g.html() || c.title;
      f[a ? "attr" : "removeAttr"]("href", a);
      f[a || g ? "removeClass" : "addClass"](d.hidden);
      f.html(g);
    };
    this.bind("openPanel", f);
    this.bind("init", function() {
      f.call(this);
    });
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.offCanvas = {setup:function() {
    if (this.opts.offCanvas) {
      var c = this.opts.offCanvas, d = this.conf.offCanvas;
      f = a.mmenu.glbl;
      this._api = a.merge(this._api, ["open", "close", "setPage"]);
      if ("top" == c.position || "bottom" == c.position) {
        c.zposition = "front";
      }
      "string" != typeof d.pageSelector && (d.pageSelector = "> " + d.pageNodetype);
      f.$allMenus = (f.$allMenus || a()).add(this.$menu);
      this.vars.opened = !1;
      var m = [b.offcanvas];
      "left" != c.position && m.push(b.mm(c.position));
      "back" != c.zposition && m.push(b.mm(c.zposition));
      this.$menu.addClass(m.join(" ")).parent().removeClass(b.wrapper);
      this.setPage(f.$page);
      this._initBlocker();
      this._initWindow_offCanvas();
      this.$menu[d.menuInjectMethod + "To"](d.menuWrapperSelector);
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    d = a.mmenu._e;
    b.add("offcanvas slideout modal background opening blocker page");
    c.add("style");
    d.add("resize");
  }, clickAnchor:function(a, c) {
    if (!this.opts.offCanvas) {
      return !1;
    }
    if ((c = this.$menu.attr("id")) && c.length && (this.conf.clone && (c = b.umm(c)), a.is('[href="#' + c + '"]'))) {
      return this.open(), !0;
    }
    if (f.$page) {
      return (c = f.$page.first().attr("id")) && c.length && a.is('[href="#' + c + '"]') ? (this.close(), !0) : !1;
    }
  }};
  a.mmenu.defaults.offCanvas = {position:"left", zposition:"back", modal:!1, moveBackground:!0};
  a.mmenu.configuration.offCanvas = {pageNodetype:"div", pageSelector:null, wrapPageIfNeeded:!0, menuWrapperSelector:"body", menuInjectMethod:"prepend"};
  a.mmenu.prototype.open = function() {
    if (!this.vars.opened) {
      var a = this;
      this._openSetup();
      setTimeout(function() {
        a._openFinish();
      }, this.conf.openingInterval);
      this.trigger("open");
    }
  };
  a.mmenu.prototype._openSetup = function() {
    var g = this;
    this.closeAllOthers();
    f.$page.each(function() {
      a(this).data(c.style, a(this).attr("style") || "");
    });
    f.$wndw.trigger(d.resize + "-offcanvas", [!0]);
    var h = [b.opened];
    this.opts.offCanvas.modal && h.push(b.modal);
    this.opts.offCanvas.moveBackground && h.push(b.background);
    "left" != this.opts.offCanvas.position && h.push(b.mm(this.opts.offCanvas.position));
    "back" != this.opts.offCanvas.zposition && h.push(b.mm(this.opts.offCanvas.zposition));
    this.opts.extensions && h.push(this.opts.extensions);
    f.$html.addClass(h.join(" "));
    setTimeout(function() {
      g.vars.opened = !0;
    }, this.conf.openingInterval);
    this.$menu.addClass(b.current + " " + b.opened);
  };
  a.mmenu.prototype._openFinish = function() {
    var a = this;
    this.__transitionend(f.$page.first(), function() {
      a.trigger("opened");
    }, this.conf.transitionDuration);
    f.$html.addClass(b.opening);
    this.trigger("opening");
  };
  a.mmenu.prototype.close = function() {
    if (this.vars.opened) {
      var d = this;
      this.__transitionend(f.$page.first(), function() {
        d.$menu.removeClass(b.current).removeClass(b.opened);
        f.$html.removeClass(b.opened).removeClass(b.modal).removeClass(b.background).removeClass(b.mm(d.opts.offCanvas.position)).removeClass(b.mm(d.opts.offCanvas.zposition));
        d.opts.extensions && f.$html.removeClass(d.opts.extensions);
        f.$page.each(function() {
          a(this).attr("style", a(this).data(c.style));
        });
        d.vars.opened = !1;
        d.trigger("closed");
      }, this.conf.transitionDuration);
      f.$html.removeClass(b.opening);
      this.trigger("close");
      this.trigger("closing");
    }
  };
  a.mmenu.prototype.closeAllOthers = function() {
    f.$allMenus.not(this.$menu).each(function() {
      var b = a(this).data("mmenu");
      b && b.close && b.close();
    });
  };
  a.mmenu.prototype.setPage = function(c) {
    var d = this, g = this.conf.offCanvas;
    c && c.length || (c = f.$body.find(g.pageSelector), 1 < c.length && g.wrapPageIfNeeded && (c = c.wrapAll("<" + this.conf.offCanvas.pageNodetype + " />").parent()));
    c.each(function() {
      a(this).attr("id", a(this).attr("id") || d.__getUniqueId());
    });
    c.addClass(b.page + " " + b.slideout);
    f.$page = c;
    this.trigger("setPage", c);
  };
  a.mmenu.prototype._initWindow_offCanvas = function() {
    f.$wndw.off(d.keydown + "-offcanvas").on(d.keydown + "-offcanvas", function(a) {
      if (f.$html.hasClass(b.opened) && 9 == a.keyCode) {
        return a.preventDefault(), !1;
      }
    });
    var a = 0;
    f.$wndw.off(d.resize + "-offcanvas").on(d.resize + "-offcanvas", function(c, d) {
      1 == f.$page.length && (d || f.$html.hasClass(b.opened)) && (c = f.$wndw.height(), d || c != a) && (a = c, f.$page.css("minHeight", c));
    });
  };
  a.mmenu.prototype._initBlocker = function() {
    var c = this;
    f.$blck || (f.$blck = a('<div id="' + b.blocker + '" class="' + b.slideout + '" />'));
    f.$blck.appendTo(f.$body).off(d.touchstart + "-offcanvas " + d.touchmove + "-offcanvas").on(d.touchstart + "-offcanvas " + d.touchmove + "-offcanvas", function(a) {
      a.preventDefault();
      a.stopPropagation();
      f.$blck.trigger(d.mousedown + "-offcanvas");
    }).off(d.mousedown + "-offcanvas").on(d.mousedown + "-offcanvas", function(a) {
      a.preventDefault();
      f.$html.hasClass(b.modal) || (c.closeAllOthers(), c.close());
    });
  };
  var b, c, d, f;
})(jQuery);
(function(a) {
  a.mmenu.addons.searchfield = {setup:function() {
    var f = this, g = this.opts.searchfield, h = this.conf.searchfield;
    "boolean" == typeof g && (g = {add:g});
    "object" != typeof g && (g = {});
    g = this.opts.searchfield = a.extend(!0, {}, a.mmenu.defaults.searchfield, g);
    this.bind("close", function() {
      this.$menu.find("." + b.search).find("input").blur();
    });
    this.bind("init", function(m) {
      if (g.add) {
        switch(g.addTo) {
          case "panels":
            break;
          default:
            m = a(g.addTo, this.$menu);
        }
        m.each(function() {
          var c = a(this);
          if (!c.is("." + b.panel) || !c.is("." + b.vertical)) {
            if (!c.children("." + b.search).length) {
              var d = a("<" + (h.form ? "form" : "div") + ' class="' + b.search + '" />');
              if (h.form && "object" == typeof h.form) {
                for (var m in h.form) {
                  d.attr(m, h.form[m]);
                }
              }
              d.append('<input placeholder="' + g.placeholder + '" type="text" autocomplete="off" />');
              c.hasClass(b.search) ? c.replaceWith(d) : c.prepend(d).addClass(b.hassearch);
            }
            g.noResults && (c.closest("." + b.panel).length || (c = f.$menu.children("." + b.panel).first()), c.children("." + b.noresultsmsg).length || (d = c.children("." + b.listview).first(), a('<div class="' + b.noresultsmsg + '" />').append(g.noResults)[d.length ? "insertAfter" : "prependTo"](d.length ? d : c)));
          }
        });
        g.search && a("." + b.search, this.$menu).each(function() {
          var h, m = a(this), n = m.closest("." + b.panel).length;
          if (n) {
            var v = h = m.closest("." + b.panel);
          } else {
            h = a("." + b.panel, f.$menu), v = f.$menu;
          }
          var w = m.children("input"), m = f.__findAddBack(h, "." + b.listview).children("li"), y = m.filter("." + b.divider), q = f.__filterListItems(m), l = function() {
            var d = w.val().toLowerCase();
            h.scrollTop(0);
            q.add(y).addClass(b.hidden).find("." + b.fullsubopensearch).removeClass(b.fullsubopen).removeClass(b.fullsubopensearch);
            q.each(function() {
              var c = a(this), l = "> a";
              if (g.showTextItems || g.showSubPanels && c.find("." + b.next)) {
                l = "> a, > span";
              }
              -1 < a(l, c).text().toLowerCase().indexOf(d) && c.add(c.prevAll("." + b.divider).first()).removeClass(b.hidden);
            });
            g.showSubPanels && h.each(function(d) {
              d = a(this);
              f.__filterListItems(d.find("." + b.listview).children()).each(function() {
                var d = a(this), l = d.data(c.sub);
                d.removeClass(b.nosubresults);
                l && l.find("." + b.listview).children().removeClass(b.hidden);
              });
            });
            a(h.get().reverse()).each(function(d) {
              var l = a(this), p = l.data(c.parent);
              p && (f.__filterListItems(l.find("." + b.listview).children()).length ? (p.hasClass(b.hidden) && p.children("." + b.next).not("." + b.fullsubopen).addClass(b.fullsubopen).addClass(b.fullsubopensearch), p.removeClass(b.hidden).removeClass(b.nosubresults).prevAll("." + b.divider).first().removeClass(b.hidden)) : n || (l.hasClass(b.opened) && setTimeout(function() {
                f.openPanel(p.closest("." + b.panel));
              }, 1.5 * (d + 1) * f.conf.openingInterval), p.addClass(b.nosubresults)));
            });
            v[q.not("." + b.hidden).length ? "removeClass" : "addClass"](b.noresults);
            this.update();
          };
          w.off(d.keyup + "-searchfield " + d.change + "-searchfield").on(d.keyup + "-searchfield", function(a) {
            a: {
              switch(a.keyCode) {
                case 9:
                case 16:
                case 17:
                case 18:
                case 37:
                case 38:
                case 39:
                case 40:
                  a = !0;
                  break a;
              }
              a = !1;
            }
            a || l.call(f);
          }).on(d.change + "-searchfield", function(a) {
            l.call(f);
          });
        });
      }
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    d = a.mmenu._e;
    b.add("search hassearch noresultsmsg noresults nosubresults fullsubopensearch");
    d.add("change keyup");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.searchfield = {add:!1, addTo:"panels", search:!0, placeholder:"Search", noResults:"No results found.", showTextItems:!1, showSubPanels:!0};
  a.mmenu.configuration.searchfield = {form:!1};
  var b, c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.sectionIndexer = {setup:function() {
    var d = this, f = this.opts.sectionIndexer;
    "boolean" == typeof f && (f = {add:f});
    "object" != typeof f && (f = {});
    f = this.opts.sectionIndexer = a.extend(!0, {}, a.mmenu.defaults.sectionIndexer, f);
    this.bind("init", function(g) {
      if (f.add) {
        switch(f.addTo) {
          case "panels":
            break;
          default:
            g = a(f.addTo, this.$menu).filter("." + b.panel);
        }
        g.find("." + b.divider).closest("." + b.panel).addClass(b.hasindexer);
      }
      !this.$indexer && this.$menu.children("." + b.hasindexer).length && (this.$indexer = a('<div class="' + b.indexer + '" />').prependTo(this.$menu).append('<a href="#a">a</a><a href="#b">b</a><a href="#c">c</a><a href="#d">d</a><a href="#e">e</a><a href="#f">f</a><a href="#g">g</a><a href="#h">h</a><a href="#i">i</a><a href="#j">j</a><a href="#k">k</a><a href="#l">l</a><a href="#m">m</a><a href="#n">n</a><a href="#o">o</a><a href="#p">p</a><a href="#q">q</a><a href="#r">r</a><a href="#s">s</a><a href="#t">t</a><a href="#u">u</a><a href="#v">v</a><a href="#w">w</a><a href="#x">x</a><a href="#y">y</a><a href="#z">z</a>'), 
      this.$indexer.children().on(c.mouseover + "-sectionindexer " + b.touchstart + "-sectionindexer", function(c) {
        var f = a(this).attr("href").slice(1);
        c = d.$menu.children("." + b.current);
        var g = c.find("." + b.listview), h = !1, n = c.scrollTop(), v = g.position().top + parseInt(g.css("margin-top"), 10) + parseInt(g.css("padding-top"), 10) + n;
        c.scrollTop(0);
        g.children("." + b.divider).not("." + b.hidden).each(function() {
          !1 === h && f == a(this).text().slice(0, 1).toLowerCase() && (h = a(this).position().top + v);
        });
        c.scrollTop(!1 !== h ? h : n);
      }), g = function(a) {
        d.$menu[(a.hasClass(b.hasindexer) ? "add" : "remove") + "Class"](b.hasindexer);
      }, this.bind("openPanel", g), g.call(this, this.$menu.children("." + b.current)));
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("indexer hasindexer");
    c.add("mouseover touchstart");
  }, clickAnchor:function(a, c) {
    if (a.parent().is("." + b.indexer)) {
      return !0;
    }
  }};
  a.mmenu.defaults.sectionIndexer = {add:!1, addTo:"panels"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.swipeClose = {setup:function() {
    var c = this, d = this.opts.swipeClose;
    "boolean" == typeof d && (d = {close:d});
    "object" != typeof d && (d = {});
    d = this.opts.swipeClose = a.extend(!0, {}, a.mmenu.defaults.swipeClose, d);
    if (d.close) {
      switch(this.opts.offCanvas.position) {
        case "left":
          var f = "swipeleft";
          break;
        case "right":
          f = "swiperight";
          break;
        case "top":
          f = "swipeup";
          break;
        case "bottom":
          f = "swipedown";
      }
      var g = -1 != this.opts.extensions.indexOf("mm-leftsubpanel") ? "swipeleft" : "swiperight";
      (new Hammer(this.$menu[0], d.vendors.hammer)).on(f, function(a) {
        c.opts.offCanvas && (0 == c.$menu.find("." + b.prev + ":visible").length ? c.close() : f != g && c.close());
      }).on(g, function(a) {
        a = c.$menu.find("." + b.prev + ":visible");
        0 < a.length && a.click();
      });
    }
  }, add:function() {
    "function" != typeof Hammer || 2 > Hammer.VERSION ? a.mmenu.addons.swipeClose.setup = function() {
    } : b = a.mmenu._c;
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.swipeClose = {close:!1, vendors:{hammer:{}}};
  a.mmenu.configuration.swipeClose = {};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.toggles = {setup:function() {
    var c = this;
    this.bind("init", function(d) {
      this.__refactorClass(a("input", d), this.conf.classNames.toggles.toggle, "toggle");
      this.__refactorClass(a("input", d), this.conf.classNames.toggles.check, "check");
      a("input." + b.toggle + ", input." + b.check, d).each(function() {
        var d = a(this), g = d.closest("li"), h = d.hasClass(b.toggle) ? "toggle" : "check", m = d.attr("id") || c.__getUniqueId();
        g.children('label[for="' + m + '"]').length || (d.attr("id", m), g.prepend(d), a('<label for="' + m + '" class="' + b[h] + '"></label>').insertBefore(g.children("a, span").last()));
      });
    });
  }, add:function() {
    b = a.mmenu._c;
    b.add("toggle check");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.classNames.toggles = {toggle:"Toggle", check:"Check"};
  var b;
})(jQuery);
Polymer({is:"simpl-mmenu", properties:{name:String, classes:String, slidingSubmenus:String, background:String, searchfield:String, context:{observer:"contextChanged", type:String}}, observers:[], behaviors:[StyleScopeBehavior], attached:function() {
  this.context = null;
  this.roles = window.roles || [];
  this.backgroundColor = "invalid";
  this.classes = "mm-white mm-zoom-panels";
  var a = document.querySelector("#dispatcherId").getNodes();
  this._createTree(a);
  this._createMenu();
  this.setStyleScope(this._mainmenu, "style-scope", this.tagName.toLowerCase());
  channel.subscribe("context.changed", function(a) {
    this.context = a.context;
  }.bind(this));
  channel.subscribe("roles.changed", function(b) {
    console.log("roles.changed", b);
    this.roles = b.roles;
    $(this._mainmenu).remove();
    this.async(function() {
      this._createTree(a);
      this._createMenu();
      this.setStyleScope(this._mainmenu, "style-scope", this.tagName.toLowerCase());
      document.querySelector("#dispatcherId").initListener();
    }, 200);
  }.bind(this));
  this.fire("menu-ready", {});
}, getMenuApi:function() {
  return $(this._mainmenu).data("mmenu");
}, setSelected:function(a) {
  var b = $(document.querySelector("#x" + a.hash)), c = 0;
  for (a = b.parent(); 0 < a.length && 10 > c++;) {
    if ("DIV" === a.prop("tagName")) {
      this.openPanel(a);
      break;
    }
    a = a.parent();
  }
  $(this._mainmenu).data("mmenu").setSelected(b);
}, openPanel:function(a) {
  $(this._mainmenu).data("mmenu").openPanel(a);
}, _createMenu:function() {
  var a = $(this._mainmenu).mmenu({slidingSubmenus:"true" == this.slidingSubmenus, searchfield:{add:"false" != this.searchfield, noResults:tr("mmenu.noResults"), placeholder:tr("mmenu.search.placeholder")}, navbar:{add:!0, title:tr("mmenu.title")}, navbars:{content:["searchfield"], height:2}, body:$(this._mainmenu), classes:this.classes, offCanvas:!1}), b = this.background;
  b && 0 <= b.length && (this.backgroundColor = b, $(this._mainmenu).css("backgroundColor", b), a.addClass("mm-background"), $(this).addClass("mm-background"));
  setTimeout(function() {
  }.bind(this), 5000);
  this.async(function() {
  });
}, _createTree:function(a) {
  var b = document.createElement("nav");
  this._mainmenu = b;
  var c = document.createElement("ul");
  Polymer.dom(this.root).appendChild(b);
  Polymer.dom(b).appendChild(c);
  Polymer.dom(b).setAttribute("id", "mainmenu");
  Polymer.dom(b).classList.add("nav");
  this._createNodeList(c, a, !0);
}, _createNodeList:function(a, b, c) {
  for (var d = 0; d < b.length; d++) {
    if (!b[d].uri || !b[d].uri.startsWith("mainToolbar:")) {
      var f = b[d];
      if (!this._isNodeDisabled(f)) {
        var g = !1;
        this._hasNeededRoles(f) || (g = !0);
        this._hasNodeChildren(f) ? (g = this._createNode(a, f, c, g), this._createNodeList(g, f.children, !1)) : this._createLeaf(a, f, c, g);
      }
    }
  }
}, _createNode:function(a, b, c, d) {
  var f = this._createIcon(b), g = document.createElement("li"), h = document.createElement("ul"), m = document.createElement("span"), u = document.createTextNode(b.name);
  Polymer.dom(a).appendChild(g);
  this._addNodeClasses(g, b.classes);
  Polymer.dom(g).appendChild(m);
  Polymer.dom(g).appendChild(h);
  Polymer.dom(g).setAttribute("style", "list-style:none");
  Polymer.dom(g).setAttribute("id", "x" + b.hash);
  this._addNodeClasses(g, "menu__item,menu__item_primary,has-sub-menu");
  Polymer.dom(m).appendChild(f);
  Polymer.dom(m).appendChild(u);
  c && Polymer.dom(g).classList.add("firstLevel");
  d && Polymer.dom(g).setAttribute("style", "display:none");
  return h;
}, _createLeaf:function(a, b, c, d) {
  var f = this._createIcon(b), g = document.createElement("li"), h = document.createElement("a"), m = document.createElement("paper-ripple"), u = document.createTextNode(b.name);
  Polymer.dom(a).appendChild(g);
  this._addNodeClasses(g, b.classes);
  this._addNodeClasses(g, "menu__item,menu__item_primary");
  this._addNodeClasses(m, "ripple");
  Polymer.dom(g).appendChild(h);
  ("ie" != browser.name || "9" != browser.major && "10" != browser.major) && Polymer.dom(g).appendChild(m);
  Polymer.dom(h).appendChild(f);
  Polymer.dom(h).setAttribute("style", "cursor:pointer");
  Polymer.dom(h).setAttribute("id", "hash_" + b.hash);
  Polymer.dom(h).classList.add("menuentry");
  Polymer.dom(h).appendChild(u);
  Polymer.dom(g).setAttribute("style", "list-style:none");
  Polymer.dom(g).setAttribute("id", "x" + b.hash);
  c && Polymer.dom(g).classList.add("firstLevel");
  d && Polymer.dom(g).setAttribute("style", "display:none");
  h.page = b;
  b.provider = this;
}, _createIcon:function(a) {
  var b = null;
  a.aweicon ? (b = document.createElement("font-awesome"), Polymer.dom(b).setAttribute("icon", a.aweicon)) : a.icon && (b = document.createElement("iron-icon"), this._addNodeClasses(b, "small"), Polymer.dom(b).setAttribute("icon", a.icon));
  return b;
}, _addNodeClasses:function(a, b) {
  if (null != b) {
    b = b.split(",");
    for (var c = 0; c < b.length; c++) {
      a.classList.add(b[c]);
    }
  }
}, _isNodeDisabled:function(a) {
  return !0 === a.disabled;
}, _hasNeededRoles:function(a) {
  if (_.isEmpty(a.roles)) {
    return console.log("node.roles.empty", a.roles), !0;
  }
  if (_.isEmpty(this.roles)) {
    return console.log("this.roles.empty", this.roles), !1;
  }
  var b = this, c = a.roles.every(function(a) {
    return 0 <= b.roles.indexOf(a);
  });
  console.log("node.roles:", a.roles);
  console.log("this.roles:", this.roles);
  console.log("isSuperset:", c);
  return c;
}, _hasNodeChildren:function(a) {
  return a.children && 0 < a.children.length;
}, contextChanged:function() {
  null != this.context && this._applyMenuContext(this._mainmenu);
}, _applyMenuContext:function(a) {
  this._domVisitor(a, function(a) {
    "LI" === a.tagName && (a.classList.add("ctx-hidden"), a.classList.contains(this.context) && a.classList.remove("ctx-hidden"));
  }.bind(this));
}});
Math.randomString = function(a) {
  for (var b = "", c = 0; c < a; c++) {
    b += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62 * Math.random()));
  }
  return b;
};
String.prototype.getCss = function() {
  for (var a = {}, b = this.valueOf().split(";"), c = 0; c < b.length; c++) {
    if (b[c] = $.trim(b[c]), b[c]) {
      var d = b[c].split(":");
      a[$.trim(d[0])] = $.trim(d[1]);
    }
  }
  return a;
};
String.prototype.trim = function() {
  return this.replace(/^\s+|\s+$/g, "");
};
String.prototype.toCamel = function() {
  return this.replace(/(\-[a-z])/g, function(a) {
    return a.toUpperCase().replace("-", "");
  });
};
String.prototype.toDash = function() {
  return this.replace(/([A-Z])/g, function(a) {
    return "-" + a.toLowerCase();
  });
};
String.prototype.toUnderscore = function() {
  return this.replace(/([A-Z])/g, function(a) {
    return "_" + a.toLowerCase();
  });
};
Number.prototype.isBetween = function(a, b, c) {
  if (!c) {
    if (this.valueOf() < b && this.valueOf() > a) {
      return !0;
    }
  } else {
    if (this.valueOf() <= b && this.valueOf() >= a) {
      return !0;
    }
  }
  return !1;
};
$.fn.insertAt = function(a, b) {
  var c = b;
  "string" === typeof b && (c = $(b));
  a = Math.min(c.children().length, a);
  if (0 == a) {
    return c.prepend(this), this;
  }
  var d = this.data("index");
  this.attr("data-index", a);
  c.find(">*:nth-child(" + a + ")").after(this);
  c.children().each(function(b, c) {
    c = $(c);
    d < a && b > d && b <= a ? c.attr("data-index", parseInt(c.data("data-index"), 10) - 1) : d >= a && b > a && b <= d && c.attr("data-index", parseInt(c.attr("data-index"), 10) + 1);
  });
  return this;
};
$.fn.disableSelection = function() {
  return this.attr("unselectable", "on").css("user-select", "none").on("selectstart", !1);
};
$.fn.enableSelection = function() {
  return this.removeAttr("unselectable").css("user-select", "initial").off("selectstart");
};
$(function() {
  var a = function(a, c) {
    this.hasRandomId = !1;
    this.storage = null;
    this.$el = a;
    this.$el.data("inner-id") || (this.hasRandomId = !0, this.$el.attr("data-inner-id", Math.randomString(10)));
    this.innerId = this.$el.data("inner-id");
    this.$options = this._processInput(c);
    this.$heading = this.$el.find(">.panel-heading");
    this.$body = this.$el.find(">.panel-body");
    this._init();
    this.$el.css("display", "none");
    this._applyState(this.$options.state, this.$options.stateParams);
    this.$el.css("display", "block");
    this._applyIndex(this.$options.initialIndex);
  };
  a.prototype = {_processInput:function(a) {
    a || (a = {});
    this.hasRandomId || (this.storage = localStorage.getItem("lobipanel_" + this.innerId), this.storage = JSON.parse(this.storage) || {});
    var b = this._getOptionsFromAttributes();
    a = $.extend({}, $.fn.lobiPanel.DEFAULTS, this.storage, a, b);
    for (var d = "unpin reload expand minimize close editTitle".split(" "), f = 0; f < d.length; f++) {
      var g = d[f];
      "object" === typeof a[g] && (a[g] = $.extend({}, $.fn.lobiPanel.DEFAULTS[g], a[g], b[g]));
    }
    return a;
  }, _init:function() {
    this.$el.addClass("lobipanel");
    this.$heading.append(this._generateControls());
    var a = this.$el.parent();
    this._appendInnerIdToParent(a, this.innerId);
    this._enableSorting();
    this._onToggleIconsBtnClick();
    this._enableResponsiveness();
    this._setBodyHeight();
    this.$options.autoload && this.load();
    a = "calc(100% - " + this.$heading.find(".dropdown-menu").children().length * this.$heading.find(".dropdown-menu li").first().outerWidth() + "px)";
    this.$heading.find(".panel-title").css("max-width", a);
    this._triggerEvent("init");
  }, isPanelInit:function() {
    return this.$el.hasClass("lobipanel") && this.$el.data("inner-id");
  }, isPinned:function() {
    return !this.$el.hasClass("panel-unpin");
  }, pin:function() {
    this.disableResize();
    this.disableDrag();
    this._enableSorting();
    this._offPanelClick();
    this.$el.removeClass("panel-unpin").attr("old-style", this.$el.attr("style")).removeAttr("style").css("position", "relative");
    this.$body.css({width:"", height:""});
    this._setBodyHeight();
    this._insertInParent();
    return this;
  }, unpin:function() {
    if (this.$el.hasClass("panel-collapsed")) {
      return this;
    }
    this._disableSorting();
    if (this.$el.attr("old-style")) {
      this.$el.attr("style", this.$el.attr("old-style"));
    } else {
      var a = this.$el.width(), c = this.$el.height(), d = Math.max(0, ($(window).width() - this.$el.outerWidth()) / 2), f = Math.max(0, $(document).scrollTop() + ($(window).height() - this.$el.outerHeight()) / 2);
      this.$el.css({left:d, top:f, width:a, height:c + 10});
    }
    a = this._getMaxZIndex();
    this.$el.css("z-index", a["z-index"] + 1);
    this._onPanelClick();
    this.$el.addClass("panel-unpin");
    $("body").append(this.$el);
    a = this._getAvailableWidth(this.$el.width());
    c = this._getAvailableHeight(this.$el.height());
    this.$el.css({position:"absolute", width:a, height:c});
    c = this._calculateBodyHeight(c);
    a = this._calculateBodyWidth(a);
    this.$body.css({width:a, height:c});
    this.$options.draggable && this.enableDrag();
    "none" !== this.$options.resize && this.enableResize();
    return this;
  }, togglePin:function() {
    this.isPinned() ? this.unpin() : this.pin();
    return this;
  }, isMinimized:function() {
    return this.$el.hasClass("panel-minimized") || this.$el.hasClass("panel-collapsed");
  }, minimize:function() {
    var b = this;
    b._triggerEvent("beforeMinimize");
    if (b.isMinimized()) {
      return b;
    }
    if (b.isPinned()) {
      b.$body.slideUp(), b.$el.find(".panel-footer").slideUp(), b.$el.addClass("panel-collapsed"), b._saveState("collapsed"), b._changeClassOfControl(b.$heading.find('[data-func="minimize"]'));
    } else {
      b.disableTooltips();
      var c = b._getFooterForMinimizedPanels(), d = c.find(">*");
      var f = c.offset().top;
      0 === d.length ? d = c.offset().left : (d = $(d[d.length - 1]), d = d.offset().left + d.width());
      b.$el.hasClass("panel-expanded") || b.$el.attr("old-style", b.$el.attr("style"));
      b.$el.animate({left:d, top:f, width:200, height:c.height()}, 100, function() {
        b.$el.hasClass("panel-expanded") && (b.$el.removeClass("panel-expanded"), b.$el.find(".panel-heading [data-func=expand] ." + a.PRIVATE_OPTIONS.iconClass).removeClass(b.$options.expand.icon2).addClass(b.$options.expand.icon));
        b.$el.addClass("panel-minimized");
        b.$el.removeAttr("style");
        b.disableDrag();
        b.disableResize();
        b._expandOnHeaderClick();
        c.append(b.$el);
        $("body").addClass("lobipanel-minimized");
        var d = "calc(100% - " + b.$heading.find(".dropdown-menu li>a:visible").length * b.$heading.find(".dropdown-menu li>a:visible").first().outerWidth() + "px)";
        b.$heading.find(".panel-title").css("max-width", d);
        b._saveState("minimized");
        b._triggerEvent("onMinimize");
      });
    }
    return b;
  }, maximize:function() {
    var a = this;
    a._triggerEvent("beforeMaximize");
    if (!a.isMinimized()) {
      return a;
    }
    if (a.isPinned()) {
      a.$body.slideDown(), a.$el.find(".panel-footer").slideDown(), a.$el.removeClass("panel-collapsed"), a._saveState("pinned"), a._changeClassOfControl(a.$heading.find('[data-func="minimize"]'));
    } else {
      a.enableTooltips();
      var c = a.$el.attr("old-style").getCss();
      a.$el.css({position:c.position || "fixed", "z-index":c["z-index"], left:a.$el.offset().left, top:a.$el.offset().top, width:a.$el.width(), height:a.$el.height()});
      $("body").append(a.$el);
      delete c.position;
      delete c["z-index"];
      a.$el.animate(c, 100, function() {
        a.$el.css("position", "");
        a.$el.removeClass("panel-minimized");
        a.$el.removeAttr("old-style");
        a.$options.draggable && a.enableDrag();
        a.enableResize();
        a._removeExpandOnHeaderClick();
        var b = a._getFooterForMinimizedPanels();
        0 === b.children().length && b.remove();
        $("body").removeClass("lobipanel-minimized").addClass("lobipanel-minimized");
        b = "calc(100% - " + a.$heading.find(".dropdown-menu li").length * a.$heading.find(".dropdown-menu li").first().outerWidth() + "px)";
        a.$heading.find(".panel-title").css("max-width", b);
        a._updateUnpinnedState();
        a._triggerEvent("onMaximize");
      });
    }
    return a;
  }, toggleMinimize:function() {
    this.isMinimized() ? this.maximize() : this.minimize();
    return this;
  }, isOnFullScreen:function() {
    return this.$el.hasClass("panel-expanded");
  }, toFullScreen:function() {
    var b = this;
    b._triggerEvent("beforeFullScreen");
    if (b.$el.hasClass("panel-collapsed")) {
      return b;
    }
    b._changeClassOfControl(b.$heading.find('[data-func="expand"]'));
    b.$el.css("position", "fixed");
    var c = b._getMaxZIndex();
    b.isPinned() || b.isMinimized() ? (b.enableTooltips(), b.$el.css({"z-index":c["z-index"] + 1, left:b.$el.offset().left, top:b.$el.offset().top - $(window).scrollTop(), width:b.$el.width(), height:b.$el.height()}), $("body").append(b.$el), c = b._getFooterForMinimizedPanels(), 0 === c.children().length && c.remove()) : (b.$body.css({width:"", height:""}), b._setBodyHeight());
    b.isMinimized() ? (b.$el.removeClass("panel-minimized"), b._removeExpandOnHeaderClick()) : (b.$el.attr("old-style", b.$el.attr("style")), b.disableResize());
    var d = $("." + a.PRIVATE_OPTIONS.toolbarClass).outerHeight() || 0;
    b.$el.animate({width:$(window).width(), height:$(window).height() - d, left:0, top:0}, b.$options.expandAnimation, function() {
      b.$el.css({width:"", height:"", right:0, bottom:d});
      b.$el.addClass("panel-expanded");
      $("body").css("overflow", "hidden");
      b.$body.css({width:b._calculateBodyWidth(b.$el.width()), height:b._calculateBodyHeight(b.$el.height())});
      b.disableDrag();
      b.isPinned() && b._disableSorting();
      b._saveState("fullscreen");
      b._triggerEvent("onFullScreen");
    });
    return b;
  }, toSmallSize:function() {
    var a = this;
    a._triggerEvent("beforeSmallSize");
    a._changeClassOfControl(a.$heading.find('[data-func="expand"]'));
    var c = a.$el.attr("old-style").getCss();
    a.$el.animate({position:"absolute", left:c.left, top:c.top, width:c.width, height:c.height, right:c.right, bottom:c.bottom}, a.$options.collapseAnimation, function() {
      a.$el.removeAttr("old-style");
      a.$el.hasClass("panel-unpin") ? (a.$options.draggable && a.enableDrag(), a.enableResize()) : (a.$el.removeAttr("style"), a._insertInParent(), a._enableSorting());
      a.$el.removeClass("panel-expanded");
      $("body").css("overflow", "auto");
      var b = "", c = "";
      a.isPinned() ? "auto" !== a.$options.bodyHeight && (c = a.$options.bodyHeight) : (b = a._calculateBodyWidth(a.getWidth()), c = a._calculateBodyHeight(a.getHeight()));
      "auto" !== a.$options.bodyHeight ? a._saveState("pinnned") : a._updateUnpinnedState();
      a.$body.css({width:b, height:c});
      a._triggerEvent("onSmallSize");
    });
    return a;
  }, toggleSize:function() {
    this.isOnFullScreen() ? this.toSmallSize() : this.toFullScreen();
    return this;
  }, close:function(a) {
    var b = this;
    a = void 0 === a ? 100 : a;
    b._triggerEvent("beforeClose");
    b.$el.hide(a, function() {
      b.isOnFullScreen() && $("body").css("overflow", "auto");
      b._triggerEvent("onClose");
      b.$el.remove();
      var a = b._getFooterForMinimizedPanels();
      0 === a.children().length && a.remove();
    });
    return b;
  }, setPosition:function(a, c, d) {
    d = void 0 === d ? 100 : d;
    if (this.isPinned()) {
      return this;
    }
    this.$el.animate({left:a, top:c}, d);
    return this;
  }, setWidth:function(a, c) {
    c = void 0 === c ? 100 : c;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyWidth(a);
    this.$el.animate({width:a}, c);
    this.$body.animate({width:b}, c);
    return this;
  }, setHeight:function(a, c) {
    c = void 0 === c ? 100 : c;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyHeight(a);
    this.$el.animate({height:a}, c);
    this.$body.animate({height:b}, c);
    return this;
  }, setSize:function(a, c, d) {
    d = void 0 === d ? 100 : d;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyHeight(c), g = this._calculateBodyWidth(a);
    this.$el.animate({height:c, width:a}, d);
    this.$body.animate({height:b, width:g}, d);
    return this;
  }, getPosition:function() {
    var a = this.$el.offset();
    return {x:a.left, y:a.top};
  }, getWidth:function() {
    return this.$el.width();
  }, getHeight:function() {
    return this.$el.height();
  }, bringToFront:function() {
    this._triggerEvent("beforeToFront");
    var a = this._getMaxZIndex();
    if (a.id === this.$el.data("inner-id")) {
      return this;
    }
    this.$el.css("z-index", a["z-index"] + 1);
    this._triggerEvent("onToFront");
    return this;
  }, enableDrag:function() {
    var a = this;
    a.$el.draggable({handle:".panel-heading", containment:a.$options.constrain, start:function() {
      a.$el.css("position", "absolute");
    }, stop:function() {
      a.$el.css("position", "");
      a._updateUnpinnedState();
    }});
    return a;
  }, disableDrag:function() {
    this.$el.hasClass("ui-draggable") && this.$el.draggable("destroy");
    return this;
  }, enableResize:function() {
    var a = this, c = !1;
    "vertical" === a.$options.resize ? c = "n, s" : "horizontal" === a.$options.resize ? c = "e, w" : "both" === a.$options.resize && (c = "all");
    if (!c) {
      return a;
    }
    a.$el.resizable({minWidth:a.$options.minWidth, maxWidth:a.$options.maxWidth, minHeight:a.$options.minHeight, maxHeight:a.$options.maxHeight, handles:c, start:function() {
      a.$el.disableSelection();
      a._triggerEvent("resizeStart");
    }, stop:function() {
      a.$el.enableSelection();
      a._triggerEvent("resizeStop");
    }, resize:function() {
      var b = a._calculateBodyHeight(a.$el.height()), c = a._calculateBodyWidth(a.$el.width());
      a.$body.css({width:c, height:b});
      a._updateUnpinnedState();
      a._triggerEvent("onResize");
    }});
    return a;
  }, disableResize:function() {
    this.$el.hasClass("ui-resizable") && this.$el.resizable("destroy");
    return this;
  }, startLoading:function() {
    var a = this._generateWindow8Spinner();
    this.$el.append(a);
    a.find(".spinner").css("margin-top", 50);
    return this;
  }, stopLoading:function() {
    this.$el.find(".spinner-wrapper").remove();
    return this;
  }, setLoadUrl:function(a) {
    this.$options.loadUrl = a;
    return this;
  }, load:function(a) {
    var b = this;
    a = a || {};
    "string" === typeof a && (a = {url:a});
    var d = a.url || b.$options.loadUrl, f = a.data || {}, g = a.callback || null;
    if (!d) {
      return b;
    }
    b._triggerEvent("beforeLoad");
    b.startLoading();
    b.$body.load(d, f, function(a, c, d) {
      g && "function" === typeof g && b.callback(a, c, d);
      b.stopLoading();
      b._triggerEvent("loaded", a, c, d);
    });
    return b;
  }, destroy:function() {
    this.disableDrag();
    this.disableResize();
    this.$options.sortable = !1;
    this._enableSorting();
    this._removeInnerIdFromParent(this.innerId);
    this.$el.removeClass("lobipanel").removeAttr("data-inner-id").removeAttr("data-index").removeData("lobiPanel");
    this.$heading.find(".dropdown").remove();
    return this.$el;
  }, startTitleEditing:function() {
    var a = this, c = a.$heading.find(".panel-title").text().trim(), d = $('<input value="' + c + '"/>');
    d.on("keydown", function(b) {
      13 === b.which ? a.finishTitleEditing() : 27 === b.which && a.cancelTitleEditing();
    });
    a.$heading.find(".panel-title").data("old-title", c).html("").append(d);
    d[0].focus();
    d[0].select();
    a._changeClassOfControl(a.$heading.find('[data-func="editTitle"]'));
    return a;
  }, isTitleEditing:function() {
    return 0 < this.$heading.find(".panel-title input").length;
  }, cancelTitleEditing:function() {
    var a = this.$heading.find(".panel-title");
    a.html(a.data("old-title")).find("input").remove();
    this._changeClassOfControl(this.$heading.find('[data-func="editTitle"]'));
    return this;
  }, finishTitleEditing:function() {
    var a = this.$heading.find("input");
    if (!1 === this._triggerEvent("beforeTitleChange", a.val())) {
      return this;
    }
    this.$heading.find(".panel-title").html(a.val());
    a.remove();
    this._changeClassOfControl(this.$heading.find('[data-func="editTitle"]'));
    this._triggerEvent("onTitleChange", a.val());
    return this;
  }, enableTooltips:function() {
    if (768 > $(window).width()) {
      return this;
    }
    var a = this.$heading.find(".dropdown-menu>li>a");
    a.each(function(a, b) {
      a = $(b);
      a.attr("data-toggle", "tooltip").attr("data-title", a.data("tooltip")).attr("data-placement", "bottom");
    });
    a.each(function(a, b) {
      $(b).tooltip({container:"body", template:'<div class="tooltip lobipanel-tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'});
    });
    return this;
  }, disableTooltips:function() {
    this.$heading.find(".dropdown-menu>li>a").each(function(a, c) {
      $(c).data("bs.tooltip") && $(c).tooltip("destroy");
    });
    return this;
  }, _generateControls:function() {
    var a = this._generateDropdown(), c = a.find(".dropdown-menu");
    !1 !== this.$options.editTitle && c.append(this._generateEditTitle());
    !1 !== this.$options.unpin && c.append(this._generateUnpin());
    !1 !== this.$options.reload && c.append(this._generateReload());
    !1 !== this.$options.minimize && c.append(this._generateMinimize());
    !1 !== this.$options.expand && c.append(this._generateExpand());
    !1 !== this.$options.close && c.append(this._generateClose());
    c.find(">li>a").on("click", function(a) {
      a.preventDefault();
      a.stopPropagation();
    });
    return a;
  }, _generateDropdown:function() {
    return $('<div class="dropdown"></div>').append('<ul class="dropdown-menu dropdown-menu-right"></ul>').append('<div class="dropdown-toggle" data-toggle="dropdown"><span class="' + a.PRIVATE_OPTIONS.iconClass + " " + this.$options.toggleIcon + '"></div>');
  }, _generateEditTitle:function() {
    var b = this.$options.editTitle, c = $('<a data-func="editTitle"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachEditTitleClickListener(c);
    return $("<li></li>").append(c);
  }, _attachEditTitleClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.isTitleEditing() ? b.finishTitleEditing() : b.startTitleEditing();
    });
  }, hideTooltip:function(a) {
    a.data("bs.tooltip") && a.tooltip("hide");
    return this;
  }, _generateUnpin:function() {
    var b = this.$options.unpin, c = $('<a data-func="unpin"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachUnpinClickListener(c);
    return $("<li></li>").append(c);
  }, _attachUnpinClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function() {
      b.hideTooltip(a);
      b.doTogglePin();
    });
  }, _generateReload:function() {
    var b = this.$options.reload, c = $('<a data-func="reload"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachReloadClickListener(c);
    return $("<li></li>").append(c);
  }, _attachReloadClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function() {
      b.hideTooltip(a);
      b.load();
    });
  }, _generateMinimize:function() {
    var b = this.$options.minimize, c = $('<a data-func="minimize"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachMinimizeClickListener(c);
    return $("<li></li>").append(c);
  }, _attachMinimizeClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.toggleMinimize();
    });
  }, _generateExpand:function() {
    var b = this.$options.expand, c = $('<a data-func="expand"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachExpandClickListener(c);
    return $("<li></li>").append(c);
  }, _attachExpandClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.toggleSize();
    });
  }, _generateClose:function() {
    var b = this.$options.close, c = $('<a data-func="close"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachCloseClickListener(c);
    return $("<li></li>").append(c);
  }, _attachCloseClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.close();
    });
  }, _getMaxZIndex:function() {
    var b = $(".lobipanel.panel-unpin:not(.panel-minimized.panel-expanded)");
    if (0 === b.length) {
      return {id:"", "z-index":a.PRIVATE_OPTIONS.initialZIndex};
    }
    var c = $(b[0]).attr("style");
    var d = $(b[0]).data("inner-id");
    var f = c ? c.getCss()["z-index"] : a.PRIVATE_OPTIONS.initialZIndex;
    for (var g = 1; g < b.length; g++) {
      c = (c = $(b[g]).attr("style")) ? c.getCss()["z-index"] : 0, c > f && (d = $(b[g]).data("inner-id"), f = c);
    }
    return {id:d, "z-index":parseInt(f, 10)};
  }, _onPanelClick:function() {
    var a = this;
    a.$el.on("mousedown.lobiPanel", function() {
      if (a.isPinned() || a.isMinimized() || a.isOnFullScreen()) {
        return !1;
      }
      a.bringToFront();
    });
  }, _offPanelClick:function() {
    this.$el.off("mousedown.lobiPanel");
  }, _changeClassOfControl:function(b) {
    b = $(b);
    var c = this.$options[b.attr("data-func")];
    c.icon && b.find("." + a.PRIVATE_OPTIONS.iconClass).toggleClass(c.icon).toggleClass(c.icon2);
  }, _getFooterForMinimizedPanels:function() {
    var b = $("." + a.PRIVATE_OPTIONS.toolbarClass);
    0 === b.length && (b = $('<div class="' + a.PRIVATE_OPTIONS.toolbarClass + '"></div>'), $("body").append(b));
    return b;
  }, _expandOnHeaderClick:function() {
    var a = this;
    a.$heading.on("click.lobiPanel", function() {
      a.maximize();
      a.bringToFront();
    });
  }, _removeExpandOnHeaderClick:function() {
    this.$heading.off("click.lobiPanel");
  }, _getAvailableWidth:function(a) {
    this.$options.maxWidth && (a = Math.min(a, this.$options.maxWidth));
    this.$options.minWidth && (a = Math.max(a, this.$options.minWidth));
    return a;
  }, _getAvailableHeight:function(a) {
    this.$options.maxHeight && (a = Math.min(a, this.$options.maxHeight));
    this.$options.minHeight && (a = Math.max(a, this.$options.minHeight));
    return a;
  }, _calculateBodyHeight:function(a) {
    return a - this.$heading.outerHeight() - this.$el.find(".panel-footer").outerHeight();
  }, _calculateBodyWidth:function(a) {
    return a - 2;
  }, _appendInnerIdToParent:function(b, c) {
    if (void 0 === b.attr(a.PRIVATE_OPTIONS.parentAttr)) {
      b.attr(a.PRIVATE_OPTIONS.parentAttr, c);
    } else {
      if (-1 < b.attr(a.PRIVATE_OPTIONS.parentAttr).indexOf(c)) {
        return;
      }
      var d = b.attr(a.PRIVATE_OPTIONS.parentAttr);
      b.attr(a.PRIVATE_OPTIONS.parentAttr, d + " " + c);
    }
    this.$el.attr("data-index", this.$el.index());
  }, _insertInParent:function() {
    var b = $("[" + a.PRIVATE_OPTIONS.parentAttr + "~=" + this.innerId + "]");
    this.$el.insertAt(this.$el.attr("data-index"), b);
  }, _generateWindow8Spinner:function() {
    return $('<div class="spinner-wrapper"><div class="spinner spinner-windows8"><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div></div></div>');
  }, _enableSorting:function() {
    var a = this, c = a.$el.parent();
    c.hasClass("ui-sortable") && c.sortable("destroy");
    a.$options.sortable ? (a.$el.addClass("lobipanel-sortable"), c.addClass("lobipanel-parent-sortable")) : a.$el.removeClass("lobipanel-sortable");
    c.sortable({connectWith:".lobipanel-parent-sortable", items:".lobipanel-sortable", handle:".panel-heading", cursor:"move", placeholder:"lobipanel-placeholder", forcePlaceholderSize:!0, opacity:0.7, revert:300, update:function(b, c) {
      b = c.item.data("inner-id");
      a._removeInnerIdFromParent(b);
      a._appendInnerIdToParent(c.item.parent(), b);
      a._updateDataIndices(c.item);
      a._triggerEvent("dragged");
    }});
  }, _disableSorting:function() {
    var a = this.$el.parent();
    a.hasClass("ui-sortable") && a.sortable("destroy");
  }, _updateDataIndices:function(a) {
    a.parent().children().each(function(a, b) {
      $(b).attr("data-index", a);
      (b = $(b).data("lobiPanel")) && b.$options.stateful && !b.hasRandomId && b._saveState("pinned", {index:a});
    });
    console.log("Save indices in localstorage");
  }, _removeInnerIdFromParent:function(b) {
    var c = $("[" + a.PRIVATE_OPTIONS.parentAttr + "~=" + b + "]");
    b = c.attr(a.PRIVATE_OPTIONS.parentAttr).replace(b, "").trim().replace(/\s{2,}/g, " ");
    c.attr(a.PRIVATE_OPTIONS.parentAttr, b);
  }, _onToggleIconsBtnClick:function() {
    var a = this;
    a.$heading.find(".toggle-controls").on("click.lobiPanel", function() {
      a.$el.toggleClass("controls-expanded");
    });
  }, _adjustForScreenSize:function() {
    this.disableTooltips();
    768 < $(window).width() && this.$options.tooltips && this.enableTooltips();
    this.isOnFullScreen() && this.$body.css({width:this._calculateBodyWidth(this.$el.width()), height:this._calculateBodyHeight(this.$el.height())});
  }, _enableResponsiveness:function() {
    var a = this;
    a._adjustForScreenSize();
    $(window).on("resize.lobiPanel", function() {
      a._adjustForScreenSize();
    });
  }, _setBodyHeight:function() {
    "auto" !== this.$options.bodyHeight && this.$body.css({height:this.$options.bodyHeight, overflow:"auto"});
  }, _getOptionsFromAttributes:function() {
    var a = this.$el, c = {}, d;
    for (d in $.fn.lobiPanel.DEFAULTS) {
      var f = d.toDash(), f = a.data(f);
      void 0 !== f && (c[d] = "object" !== typeof $.fn.lobiPanel.DEFAULTS[d] ? f : eval("(" + f + ")"));
    }
    return c;
  }, _saveState:function(a, c) {
    console.log("Save state ", a, c);
    !this.hasRandomId && this.$options.stateful && (this.storage.state = a, c && (this.storage.stateParams = c), this._saveLocalStorage(this.storage));
  }, _saveLocalStorage:function(a) {
    localStorage.setItem("lobipanel_" + this.innerId, JSON.stringify(a));
  }, _applyState:function(a, c) {
    switch(a) {
      case "pinned":
        c && null !== c.index && void 0 !== c.index && this._applyIndex(c.index);
        break;
      case "unpinned":
        this.unpin();
        this.setPosition(c.left, c.top, 0);
        this.setSize(c.width, c.height, 0);
        break;
      case "minimized":
        this.unpin();
        this.minimize();
        break;
      case "collapsed":
        this.minimize();
        break;
      case "fullscreen":
        this.toFullScreen();
    }
  }, _applyIndex:function(a) {
    null !== a && this.$el.insertAt(a, this.$el.parent());
  }, _triggerEvent:function(a) {
    var b = Array.prototype.slice.call(arguments, 1);
    b.unshift(this);
    this.$el.trigger(a + ".lobiPanel", b);
    return this.$options[a] && "function" === typeof this.$options[a] ? this.$options[a].apply(this, b) : !0;
  }, doPin:function() {
    !1 !== this._triggerEvent("beforePin") && (this.pin(), this._saveState("pinned"), this._triggerEvent("onPin"));
    return this;
  }, doUnpin:function() {
    !1 !== this._triggerEvent("beforeUnpin") && (this.unpin(), this._updateUnpinnedState(), this._triggerEvent("onUnpin"));
    return this;
  }, doTogglePin:function() {
    this.isPinned() ? this.doUnpin() : this.doPin();
    return this;
  }, _updateUnpinnedState:function() {
    this._saveState("unpinned", this.getAlignment());
  }, getAlignment:function() {
    return {top:this.$el.css("top"), left:this.$el.css("left"), width:this.$el.css("width"), height:this.$el.css("height")};
  }};
  $.fn.lobiPanel = function(b) {
    var c = arguments, d = null;
    this.each(function() {
      var f = $(this), g = f.data("lobiPanel"), h = "object" === typeof b && b;
      g || f.data("lobiPanel", g = new a(f, h));
      "string" === typeof b && (c = Array.prototype.slice.call(c, 1), d = g[b].apply(g, c));
    });
    return d;
  };
  a.PRIVATE_OPTIONS = {parentAttr:"data-lobipanel-child-inner-id", toolbarClass:"lobipanel-minimized-toolbar", initialZIndex:10000, iconClass:"panel-control-icon"};
  $.fn.lobiPanel.DEFAULTS = {draggable:!0, sortable:!1, connectWith:".ui-sortable", resize:"both", minWidth:200, minHeight:100, maxWidth:1200, maxHeight:700, loadUrl:"", autoload:!0, bodyHeight:"auto", tooltips:!0, toggleIcon:"glyphicon glyphicon-cog", expandAnimation:100, collapseAnimation:100, state:"pinned", initialIndex:null, stateful:!1, constrain:"document", unpin:{icon:"glyphicon glyphicon-move", tooltip:"Unpin"}, reload:{icon:"glyphicon glyphicon-refresh", tooltip:"Reload"}, minimize:{icon:"glyphicon glyphicon-minus", 
  icon2:"glyphicon glyphicon-plus", tooltip:"Minimize"}, expand:{icon:"glyphicon glyphicon-resize-full", icon2:"glyphicon glyphicon-resize-small", tooltip:"Fullscreen"}, close:{icon:"glyphicon glyphicon-remove", tooltip:"Close"}, editTitle:{icon:"glyphicon glyphicon-pencil", icon2:"glyphicon glyphicon-floppy-disk", tooltip:"Edit title"}, beforeTitleChange:null};
  $(".lobipanel").lobiPanel();
});
Polymer({is:"simpl-lobipanel", properties:{minimize:{type:Boolean, value:!0}}, behaviors:[ModernizrBehavior, StyleScopeBehavior], attached:function() {
  this.async(function() {
    this.init();
  }, 200);
}, init:function() {
  var a = {_reload:{icon:"fa fa-refresh"}, _editTitle:{icon:"fa fa-edit", icon2:"fa fa-save"}, _unpin:{icon:"fa fa-arrows"}, minimize:{icon:"fa fa-chevron-up", icon2:"fa fa-chevron-down"}, _close:{icon:"fa fa-times-circle"}, expand:{icon:"fa fa-expand", icon2:"fa fa-compress"}, sortable:!0, reload:!1, unpin:!1, close:!1, editTitle:!1};
  !1 === this.minimize && (a.minimize = !1);
  !1 === this.expand && (a.expand = !1);
  $(".panel").lobiPanel(a);
  $(".panel").on("beforeMaximize.lobiPanel", function(a, c) {
    this.fire("lp-maximize", a);
  }.bind(this));
  $(".panel").on("beforeMinimize.lobiPanel", function(a, c) {
    this.fire("lp-minimize", a);
  }.bind(this));
  $(".panel").on("beforeFullScreen.lobiPanel", function(a, c) {
    this.fire("lp-fullscreen", a);
  }.bind(this));
  $(".panel").on("beforeSmallSize.lobiPanel", function(a, c) {
    this.fire("lp-smallsize", a);
  }.bind(this));
  this.async(function() {
    this.setStyleScope(this, "style-scope", this.tagName.toLowerCase());
  });
}});
"use strict";
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
})(function(a) {
  var b, c = function(b, d) {
    this.$el = b;
    this.options = a.extend({}, c.rules.defaults, c.rules[d.rule] || {}, d);
    this.min = Number(this.options.min) || 0;
    this.max = Number(this.options.max) || 0;
    this.$el.on({"focus.spinner":a.proxy(function(b) {
      b.preventDefault();
      a(document).trigger("mouseup.spinner");
      this.oldValue = this.value();
    }, this), "change.spinner":a.proxy(function(a) {
      a.preventDefault();
      this.value(this.$el.val());
    }, this), "keydown.spinner":a.proxy(function(a) {
      var b = {38:"up", 40:"down"}[a.which];
      b && (a.preventDefault(), this.spin(b));
    }, this)});
    this.oldValue = this.value();
    this.value(this.$el.val());
    return this;
  };
  c.rules = {defaults:{min:null, max:null, step:1, precision:0}, currency:{min:0.00, max:null, step:0.01, precision:2}, quantity:{min:1, max:999, step:1, precision:0}, percent:{min:1, max:100, step:1, precision:0}, month:{min:1, max:12, step:1, precision:0}, day:{min:1, max:31, step:1, precision:0}, hour:{min:0, max:23, step:1, precision:0}, minute:{min:1, max:59, step:1, precision:0}, second:{min:1, max:59, step:1, precision:0}};
  c.prototype = {spin:function(b) {
    if (!this.$el.prop("disabled")) {
      this.oldValue = this.value();
      var c = a.isFunction(this.options.step) ? this.options.step.call(this, b) : this.options.step;
      this.value(this.oldValue + Number(c) * ("up" === b ? 1 : -1));
    }
  }, value:function(c) {
    if (null === c || void 0 === c) {
      return this.numeric(this.$el.val());
    }
    c = this.numeric(c);
    var f = this.validate(c);
    0 !== f && (c = -1 === f ? this.min : this.max);
    this.$el.val(c.toFixed(this.options.precision));
    this.oldValue !== this.value() && (this.$el.trigger("changing.spinner", [this.value(), this.oldValue]), clearTimeout(b), b = setTimeout(a.proxy(function() {
      this.$el.trigger("changed.spinner", [this.value(), this.oldValue]);
    }, this), d.delay));
  }, numeric:function(a) {
    a = 0 < this.options.precision ? parseFloat(a, 10) : parseInt(a, 10);
    return isFinite(a) ? a : a || this.options.min || 0;
  }, validate:function(a) {
    return null !== this.options.min && a < this.min ? -1 : null !== this.options.max && a > this.max ? 1 : 0;
  }};
  var d = function(b, d) {
    this.$el = a(b);
    this.$spinning = this.$el.find('[data-spin="spinner"]');
    0 === this.$spinning.length && (this.$spinning = this.$el.find(':input[type="text"]'));
    d = a.extend({}, d, this.$spinning.data());
    this.spinning = new c(this.$spinning, d);
    this.$el.on("click.spinner", '[data-spin="up"], [data-spin="down"]', a.proxy(this, "spin")).on("mousedown.spinner", '[data-spin="up"], [data-spin="down"]', a.proxy(this, "spin"));
    a(document).on("mouseup.spinner", a.proxy(function() {
      clearTimeout(this.spinTimeout);
      clearInterval(this.spinInterval);
    }, this));
    d.delay && this.delay(d.delay);
    d.changed && this.changed(d.changed);
    d.changing && this.changing(d.changing);
  };
  d.delay = 500;
  d.prototype = {constructor:d, spin:function(b) {
    var c = a(b.currentTarget).data("spin");
    switch(b.type) {
      case "click":
        b.preventDefault();
        this.spinning.spin(c);
        break;
      case "mousedown":
        1 === b.which && (this.spinTimeout = setTimeout(a.proxy(this, "beginSpin", c), 300));
    }
  }, delay:function(a) {
    a = Number(a);
    0 <= a && (this.constructor.delay = a + 100);
  }, value:function() {
    return this.spinning.value();
  }, changed:function(a) {
    this.bindHandler("changed.spinner", a);
  }, changing:function(a) {
    this.bindHandler("changing.spinner", a);
  }, bindHandler:function(b, c) {
    if (a.isFunction(c)) {
      this.$spinning.on(b, c);
    } else {
      this.$spinning.off(b);
    }
  }, beginSpin:function(b) {
    this.spinInterval = setInterval(a.proxy(this.spinning, "spin", b), 100);
  }};
  var f = a.fn.spinner;
  a.fn.spinner = function(b, c) {
    return this.each(function() {
      var f = a.data(this, "spinner");
      f || (f = new d(this, b), a.data(this, "spinner", f));
      if ("delay" === b || "changed" === b || "changing" === b) {
        f[b](c);
      } else {
        "step" === b && c ? f.spinning.step = c : "spin" === b && c && f.spinning.spin(c);
      }
    });
  };
  a.fn.spinner.Constructor = d;
  a.fn.spinner.noConflict = function() {
    a.fn.spinner = f;
    return this;
  };
  a(function() {
    a('[data-trigger="spinner"]').spinner();
  });
  return a.fn.spinner;
});
Polymer({is:"simpl-spinner", properties:{eventname:{type:String, value:"value-changed"}, rule:{type:String, value:"quantity"}, value:{type:Object, value:0}}, observers:[], behaviors:[StyleScopeBehavior], up:function() {
  $(this.$.spinner).spinner("spin", "up");
}, down:function() {
  $(this.$.spinner).spinner("spin", "down");
}, attached:function() {
  this.isInited || ($(this.$.spinner).spinner("delay", 200).spinner("rule", this.rule).spinner("changed", function(a, b, c) {
    this.value = b;
    this.fire(this.eventname, {id:this.id, value:b});
  }.bind(this)), $(this.$.input).keyup(function(a) {
    a = this.$.input.value;
    a = parseInt(a);
    this.fire(this.eventname, {id:this.id, value:a});
  }.bind(this)), this.isInited = !0);
}, ready:function() {
}});
(function(a) {
  function b(d) {
    if (c[d]) {
      return c[d].exports;
    }
    var f = c[d] = {i:d, l:!1, exports:{}};
    a[d].call(f.exports, f, f.exports, b);
    f.l = !0;
    return f.exports;
  }
  var c = {};
  b.m = a;
  b.c = c;
  b.d = function(a, c, g) {
    b.o(a, c) || Object.defineProperty(a, c, {enumerable:!0, get:g});
  };
  b.r = function(a) {
    $jscomp.initSymbol();
    $jscomp.initSymbol();
    "undefined" !== typeof Symbol && Symbol.toStringTag && ($jscomp.initSymbol(), Object.defineProperty(a, Symbol.toStringTag, {value:"Module"}));
    Object.defineProperty(a, "__esModule", {value:!0});
  };
  b.t = function(a, c) {
    c & 1 && (a = b(a));
    if (c & 8 || c & 4 && "object" === typeof a && a && a.__esModule) {
      return a;
    }
    var d = Object.create(null);
    b.r(d);
    Object.defineProperty(d, "default", {enumerable:!0, value:a});
    if (c & 2 && "string" != typeof a) {
      for (var f in a) {
        b.d(d, f, function(b) {
          return a[b];
        }.bind(null, f));
      }
    }
    return d;
  };
  b.n = function(a) {
    var c = a && a.__esModule ? function() {
      return a["default"];
    } : function() {
      return a;
    };
    b.d(c, "a", c);
    return c;
  };
  b.o = function(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  };
  b.p = "";
  return b(b.s = 15);
})([function(a, b, c) {
  b.__esModule = !0;
  var d;
  (function(a) {
    a[a.Before = 1] = "Before";
    a[a.After = 2] = "After";
    a[a.Inside = 3] = "Inside";
    a[a.None = 4] = "None";
  })(d = b.Position || (b.Position = {}));
  b.position_names = {before:d.Before, after:d.After, inside:d.Inside, none:d.None};
  b.getPositionName = function(a) {
    for (var c in b.position_names) {
      if (b.position_names.hasOwnProperty(c) && b.position_names[c] === a) {
        return c;
      }
    }
    return "";
  };
  b.getPosition = function(a) {
    return b.position_names[a];
  };
  a = function() {
    function a(b, c, d) {
      void 0 === c && (c = !1);
      void 0 === d && (d = a);
      this.name = "";
      this.setData(b);
      this.children = [];
      this.parent = null;
      c && (this.id_mapping = {}, this.tree = this, this.node_class = d);
    }
    a.prototype.setData = function(a) {
      if (a) {
        if ("object" !== typeof a) {
          null != a && (this.name = a);
        } else {
          for (var b in a) {
            if (a.hasOwnProperty(b)) {
              var c = a[b];
              "label" === b ? null != c && (this.name = c) : "children" !== b && (this[b] = c);
            }
          }
        }
      }
    };
    a.prototype.loadFromData = function(a) {
      this.removeChildren();
      for (var b = 0; b < a.length; b++) {
        var c = a[b], d = new this.tree.node_class(c);
        this.addChild(d);
        "object" === typeof c && c.children && d.loadFromData(c.children);
      }
    };
    a.prototype.addChild = function(a) {
      this.children.push(a);
      a._setParent(this);
    };
    a.prototype.addChildAtPosition = function(a, b) {
      this.children.splice(b, 0, a);
      a._setParent(this);
    };
    a.prototype.removeChild = function(a) {
      a.removeChildren();
      this._removeChild(a);
    };
    a.prototype.getChildIndex = function(a) {
      return jQuery.inArray(a, this.children);
    };
    a.prototype.hasChildren = function() {
      return 0 !== this.children.length;
    };
    a.prototype.isFolder = function() {
      return this.hasChildren() || this.load_on_demand;
    };
    a.prototype.iterate = function(a) {
      var b = function(c, d) {
        if (c.children) {
          var f = 0;
          for (c = c.children; f < c.length; f++) {
            var g = c[f];
            a(g, d) && g.hasChildren() && b(g, d + 1);
          }
        }
      };
      b(this, 0);
    };
    a.prototype.moveNode = function(a, b, c) {
      a.parent && !a.isParentOf(b) && (a.parent._removeChild(a), c === d.After ? b.parent && b.parent.addChildAtPosition(a, b.parent.getChildIndex(b) + 1) : c === d.Before ? b.parent && b.parent.addChildAtPosition(a, b.parent.getChildIndex(b)) : c === d.Inside && b.addChildAtPosition(a, 0));
    };
    a.prototype.getData = function(a) {
      function b(a) {
        return a.map(function(a) {
          var c = {}, d;
          for (d in a) {
            -1 === ["parent", "children", "element", "tree"].indexOf(d) && Object.prototype.hasOwnProperty.call(a, d) && (c[d] = a[d]);
          }
          a.hasChildren() && (c.children = b(a.children));
          return c;
        });
      }
      void 0 === a && (a = !1);
      return a ? b([this]) : b(this.children);
    };
    a.prototype.getNodeByName = function(a) {
      return this.getNodeByCallback(function(b) {
        return b.name === a;
      });
    };
    a.prototype.getNodeByCallback = function(a) {
      var b = null;
      this.iterate(function(c) {
        return a(c) ? (b = c, !1) : !0;
      });
      return b;
    };
    a.prototype.addAfter = function(a) {
      if (this.parent) {
        var b = new this.tree.node_class(a), c = this.parent.getChildIndex(this);
        this.parent.addChildAtPosition(b, c + 1);
        "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
        return b;
      }
      return null;
    };
    a.prototype.addBefore = function(a) {
      if (this.parent) {
        var b = new this.tree.node_class(a), c = this.parent.getChildIndex(this);
        this.parent.addChildAtPosition(b, c);
        "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
        return b;
      }
      return null;
    };
    a.prototype.addParent = function(a) {
      if (this.parent) {
        a = new this.tree.node_class(a);
        a._setParent(this.tree);
        for (var b = this.parent, c = 0, d = b.children; c < d.length; c++) {
          a.addChild(d[c]);
        }
        b.children = [];
        b.addChild(a);
        return a;
      }
      return null;
    };
    a.prototype.remove = function() {
      this.parent && (this.parent.removeChild(this), this.parent = null);
    };
    a.prototype.append = function(a) {
      var b = new this.tree.node_class(a);
      this.addChild(b);
      "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
      return b;
    };
    a.prototype.prepend = function(a) {
      var b = new this.tree.node_class(a);
      this.addChildAtPosition(b, 0);
      "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
      return b;
    };
    a.prototype.isParentOf = function(a) {
      for (a = a.parent; a;) {
        if (a === this) {
          return !0;
        }
        a = a.parent;
      }
      return !1;
    };
    a.prototype.getLevel = function() {
      for (var a = 0, b = this; b.parent;) {
        a += 1, b = b.parent;
      }
      return a;
    };
    a.prototype.getNodeById = function(a) {
      return this.id_mapping[a];
    };
    a.prototype.addNodeToIndex = function(a) {
      null != a.id && (this.id_mapping[a.id] = a);
    };
    a.prototype.removeNodeFromIndex = function(a) {
      null != a.id && delete this.id_mapping[a.id];
    };
    a.prototype.removeChildren = function() {
      var a = this;
      this.iterate(function(b) {
        a.tree.removeNodeFromIndex(b);
        return !0;
      });
      this.children = [];
    };
    a.prototype.getPreviousSibling = function() {
      if (this.parent) {
        var a = this.parent.getChildIndex(this) - 1;
        return 0 <= a ? this.parent.children[a] : null;
      }
      return null;
    };
    a.prototype.getNextSibling = function() {
      if (this.parent) {
        var a = this.parent.getChildIndex(this) + 1;
        return a < this.parent.children.length ? this.parent.children[a] : null;
      }
      return null;
    };
    a.prototype.getNodesByProperty = function(a, b) {
      return this.filter(function(c) {
        return c[a] === b;
      });
    };
    a.prototype.filter = function(a) {
      var b = [];
      this.iterate(function(c) {
        a(c) && b.push(c);
        return !0;
      });
      return b;
    };
    a.prototype.getNextNode = function(a) {
      void 0 === a && (a = !0);
      return a && this.hasChildren() && this.is_open ? this.children[0] : this.parent ? (a = this.getNextSibling()) ? a : this.parent.getNextNode(!1) : null;
    };
    a.prototype.getPreviousNode = function() {
      if (this.parent) {
        var a = this.getPreviousSibling();
        return a ? a.hasChildren() && a.is_open ? a.getLastChild() : a : this.getParent();
      }
      return null;
    };
    a.prototype.getParent = function() {
      return this.parent ? this.parent.parent ? this.parent : null : null;
    };
    a.prototype.getLastChild = function() {
      if (this.hasChildren()) {
        var a = this.children[this.children.length - 1];
        return a.hasChildren() && a.is_open ? a.getLastChild() : a;
      }
      return null;
    };
    a.prototype.initFromData = function(a) {
      this.setData(a);
      if (a.children) {
        var b = 0;
        for (a = a.children; b < a.length; b++) {
          var c = a[b], d = new this.tree.node_class("");
          d.initFromData(c);
          this.addChild(d);
        }
      }
    };
    a.prototype._setParent = function(a) {
      this.parent = a;
      this.tree = a.tree;
      this.tree.addNodeToIndex(this);
    };
    a.prototype._removeChild = function(a) {
      this.children.splice(this.getChildIndex(a), 1);
      this.tree.removeNodeFromIndex(a);
    };
    return a;
  }();
  b.Node = a;
}, function(a, b, c) {
  b.__esModule = !0;
  b.isInt = function(a) {
    return "number" === typeof a && 0 === a % 1;
  };
  b.isFunction = function(a) {
    return "function" === typeof a;
  };
  b.html_escape = function(a) {
    return ("" + a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;");
  };
  b.getBoolString = function(a) {
    return a ? "true" : "false";
  };
}, function(a, b) {
  a.exports = jQuery;
}, function(a, b, c) {
  b.__esModule = !0;
  a = function() {
    function a(a, b) {
      this.$el = jQuery(a);
      this.options = jQuery.extend({}, this.constructor.defaults, b);
    }
    a.register = function(b, c) {
      function d(b, c) {
        return (b = jQuery.data(b, c)) && b instanceof a ? b : null;
      }
      var f = function() {
        return "simple_widget_" + c;
      };
      jQuery.fn[c] = function(c) {
        for (var g = [], h = 1; h < arguments.length; h++) {
          g[h - 1] = arguments[h];
        }
        if (void 0 === c || "object" === typeof c) {
          for (var g = f(), h = 0, m = this.get(); h < m.length; h++) {
            var w = m[h];
            if (!d(w, g)) {
              var y = new b(w, c);
              jQuery.data(w, g) || jQuery.data(w, g, y);
              y._init();
            }
          }
          return this;
        }
        if ("string" === typeof c && "_" !== c[0]) {
          if ("destroy" === c) {
            for (g = f(), h = 0, m = this.get(); h < m.length; h++) {
              w = m[h], (y = d(w, g)) && y.destroy(), jQuery.removeData(w, g);
            }
          } else {
            if ("get_widget_class" === c) {
              return b;
            }
            h = null;
            m = 0;
            for (w = this.get(); m < w.length; m++) {
              if ((y = jQuery.data(w[m], f())) && y instanceof a) {
                var q = y[c];
                q && "function" === typeof q && (h = q.apply(y, g));
              }
            }
            return h;
          }
        }
      };
    };
    a.prototype.destroy = function() {
      this._deinit();
    };
    a.prototype._init = function() {
    };
    a.prototype._deinit = function() {
    };
    a.defaults = {};
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  var d = this && this.__extends || function() {
    var a = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
      a.__proto__ = b;
    } || function(a, b) {
      for (var c in b) {
        b.hasOwnProperty(c) && (a[c] = b[c]);
      }
    };
    return function(b, c) {
      function d() {
        this.constructor = b;
      }
      a(b, c);
      b.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    };
  }();
  b.__esModule = !0;
  var f = c(5), g = c(2), h = c(6), m = c(7), u = c(8);
  b = c(9);
  var r = c(10), n = c(11), v = c(12);
  a = c(3);
  var w = c(0), y = c(1), q = c(13);
  c = function(a) {
    function b() {
      var b = null !== a && a.apply(this, arguments) || this;
      b._handleClick = function(a) {
        var c = b._getClickTarget(a.target);
        c && ("button" === c.type ? (b.toggle(c.node, b.options.slide), a.preventDefault(), a.stopPropagation()) : "label" === c.type && (c = c.node, b._triggerEvent("tree.click", {node:c, click_event:a}).isDefaultPrevented() || b._selectNode(c, !0)));
      };
      b._handleDblclick = function(a) {
        var c = b._getClickTarget(a.target);
        c && "label" === c.type && b._triggerEvent("tree.dblclick", {node:c.node, click_event:a});
      };
      b._handleContextmenu = function(a) {
        var c = g(a.target).closest("ul.jqtree-tree .jqtree-element");
        return c.length && (c = b._getNode(c)) ? (a.preventDefault(), a.stopPropagation(), b._triggerEvent("tree.contextmenu", {node:c, click_event:a}), !1) : null;
      };
      return b;
    }
    d(b, a);
    b.prototype.toggle = function(a, b) {
      b = null == b ? this.options.slide : b;
      a.is_open ? this.closeNode(a, b) : this.openNode(a, b);
      return this.element;
    };
    b.prototype.getTree = function() {
      return this.tree;
    };
    b.prototype.selectNode = function(a) {
      this._selectNode(a, !1);
      return this.element;
    };
    b.prototype.getSelectedNode = function() {
      return this.select_node_handler ? this.select_node_handler.getSelectedNode() : !1;
    };
    b.prototype.toJson = function() {
      return JSON.stringify(this.tree.getData());
    };
    b.prototype.loadData = function(a, b) {
      this._loadData(a, b);
      return this.element;
    };
    b.prototype.loadDataFromUrl = function(a, b, c) {
      "string" === typeof a ? this._loadDataFromUrl(a, b, c) : this._loadDataFromUrl(null, a, b);
      return this.element;
    };
    b.prototype.reload = function(a) {
      this._loadDataFromUrl(null, null, a);
      return this.element;
    };
    b.prototype.getNodeById = function(a) {
      return this.tree.getNodeById(a);
    };
    b.prototype.getNodeByName = function(a) {
      return this.tree.getNodeByName(a);
    };
    b.prototype.getNodesByProperty = function(a, b) {
      return this.tree.getNodesByProperty(a, b);
    };
    b.prototype.getNodeByHtmlElement = function(a) {
      return this._getNode(g(a));
    };
    b.prototype.getNodeByCallback = function(a) {
      return this.tree.getNodeByCallback(a);
    };
    b.prototype.openNode = function(a, b, c) {
      y.isFunction(b) && (c = b, b = null);
      null == b && (b = this.options.slide);
      b = [b, c];
      c = b[0];
      b = b[1];
      a && this._openNode(a, c, b);
      return this.element;
    };
    b.prototype.closeNode = function(a, b) {
      b = null == b ? this.options.slide : b;
      a.isFolder() && ((new q.FolderElement(a, this)).close(b, this.options.animationSpeed), this._saveState());
      return this.element;
    };
    b.prototype.isDragging = function() {
      return this.dnd_handler ? this.dnd_handler.is_dragging : !1;
    };
    b.prototype.refreshHitAreas = function() {
      this.dnd_handler && this.dnd_handler.refresh();
      return this.element;
    };
    b.prototype.addNodeAfter = function(a, b) {
      (a = b.addAfter(a)) && this._refreshElements(b.parent);
      return a;
    };
    b.prototype.addNodeBefore = function(a, b) {
      (a = b.addBefore(a)) && this._refreshElements(b.parent);
      return a;
    };
    b.prototype.addParentNode = function(a, b) {
      (a = b.addParent(a)) && this._refreshElements(a.parent);
      return a;
    };
    b.prototype.removeNode = function(a) {
      a.parent && this.select_node_handler && (this.select_node_handler.removeFromSelection(a, !0), a.remove(), this._refreshElements(a.parent));
      return this.element;
    };
    b.prototype.appendNode = function(a, b) {
      b = b || this.tree;
      a = b.append(a);
      this._refreshElements(b);
      return a;
    };
    b.prototype.prependNode = function(a, b) {
      b = b ? b : this.tree;
      a = b.prepend(a);
      this._refreshElements(b);
      return a;
    };
    b.prototype.updateNode = function(a, b) {
      var c = b.id && b.id !== a.id;
      c && this.tree.removeNodeFromIndex(a);
      a.setData(b);
      c && this.tree.addNodeToIndex(a);
      "object" === typeof b && b.children && (a.removeChildren(), b.children.length && a.loadFromData(b.children));
      this._refreshElements(a);
      this._selectCurrentNode();
      return this.element;
    };
    b.prototype.moveNode = function(a, b, c) {
      c = w.getPosition(c);
      this.tree.moveNode(a, b, c);
      this._refreshElements(null);
      return this.element;
    };
    b.prototype.getStateFromStorage = function() {
      if (this.save_state_handler) {
        return this.save_state_handler.getStateFromStorage();
      }
    };
    b.prototype.addToSelection = function(a, b) {
      void 0 === b && (b = !0);
      a && this.select_node_handler && (this.select_node_handler.addToSelection(a), this._getNodeElementForNode(a).select(b), this._saveState());
      return this.element;
    };
    b.prototype.getSelectedNodes = function() {
      return this.select_node_handler ? this.select_node_handler.getSelectedNodes() : [];
    };
    b.prototype.isNodeSelected = function(a) {
      return this.select_node_handler ? this.select_node_handler.isNodeSelected(a) : !1;
    };
    b.prototype.removeFromSelection = function(a) {
      this.select_node_handler && (this.select_node_handler.removeFromSelection(a), this._getNodeElementForNode(a).deselect(), this._saveState());
      return this.element;
    };
    b.prototype.scrollToNode = function(a) {
      if (this.scroll_handler) {
        a = (a = g(a.element).offset()) ? a.top : 0;
        var b = this.$el.offset();
        this.scroll_handler.scrollToY(a - (b ? b.top : 0));
      }
      return this.element;
    };
    b.prototype.getState = function() {
      if (this.save_state_handler) {
        return this.save_state_handler.getState();
      }
    };
    b.prototype.setState = function(a) {
      this.save_state_handler && (this.save_state_handler.setInitialState(a), this._refreshElements(null));
      return this.element;
    };
    b.prototype.setOption = function(a, b) {
      this.options[a] = b;
      return this.element;
    };
    b.prototype.moveDown = function() {
      this.key_handler && this.key_handler.moveDown();
      return this.element;
    };
    b.prototype.moveUp = function() {
      this.key_handler && this.key_handler.moveUp();
      return this.element;
    };
    b.prototype.getVersion = function() {
      return f["default"];
    };
    b.prototype.testGenerateHitAreas = function(a) {
      return this.dnd_handler ? (this.dnd_handler.current_item = this._getNodeElementForNode(a), this.dnd_handler.generateHitAreas(), this.dnd_handler.hit_areas) : [];
    };
    b.prototype._triggerEvent = function(a, b) {
      a = g.Event(a);
      g.extend(a, b);
      this.element.trigger(a);
      return a;
    };
    b.prototype._openNode = function(a, b, c) {
      void 0 === b && (b = !0);
      if (a.isFolder()) {
        if (a.load_on_demand) {
          this._loadFolderOnDemand(a, b, c);
        } else {
          for (var d = a.parent; d;) {
            d.parent && (new q.FolderElement(d, this)).open(null, !1, this.options.animationSpeed), d = d.parent;
          }
          (new q.FolderElement(a, this)).open(c, b, this.options.animationSpeed);
          this._saveState();
        }
      }
    };
    b.prototype._refreshElements = function(a) {
      this.renderer.render(a);
      this._triggerEvent("tree.refresh");
    };
    b.prototype._getNodeElementForNode = function(a) {
      return a.isFolder() ? new q.FolderElement(a, this) : new q.NodeElement(a, this);
    };
    b.prototype._getNodeElement = function(a) {
      return (a = this._getNode(a)) ? this._getNodeElementForNode(a) : null;
    };
    b.prototype._containsElement = function(a) {
      a = this._getNode(g(a));
      return null != a && a.tree === this.tree;
    };
    b.prototype._getScrollLeft = function() {
      return this.scroll_handler && this.scroll_handler.getScrollLeft() || 0;
    };
    b.prototype._init = function() {
      a.prototype._init.call(this);
      this.element = this.$el;
      this.mouse_delay = 300;
      this.is_initialized = !1;
      this.options.rtl = this._getRtlOption();
      null === this.options.closedIcon && (this.options.closedIcon = this._getDefaultClosedIcon());
      this.renderer = new m["default"](this);
      null != r["default"] ? this.save_state_handler = new r["default"](this) : this.options.saveState = !1;
      null != v["default"] && (this.select_node_handler = new v["default"](this));
      null != h.DragAndDropHandler ? this.dnd_handler = new h.DragAndDropHandler(this) : this.options.dragAndDrop = !1;
      null != n["default"] && (this.scroll_handler = new n["default"](this));
      null != u["default"] && null != v["default"] && (this.key_handler = new u["default"](this));
      this._initData();
      this.element.click(this._handleClick);
      this.element.dblclick(this._handleDblclick);
      if (this.options.useContextMenu) {
        this.element.on("contextmenu", this._handleContextmenu);
      }
    };
    b.prototype._deinit = function() {
      this.element.empty();
      this.element.off();
      this.key_handler && this.key_handler.deinit();
      this.tree = new w.Node({}, !0);
      a.prototype._deinit.call(this);
    };
    b.prototype._mouseCapture = function(a) {
      return this.options.dragAndDrop && this.dnd_handler ? this.dnd_handler.mouseCapture(a) : !1;
    };
    b.prototype._mouseStart = function(a) {
      return this.options.dragAndDrop && this.dnd_handler ? this.dnd_handler.mouseStart(a) : !1;
    };
    b.prototype._mouseDrag = function(a) {
      return this.options.dragAndDrop && this.dnd_handler ? (a = this.dnd_handler.mouseDrag(a), this.scroll_handler && this.scroll_handler.checkScrolling(), a) : !1;
    };
    b.prototype._mouseStop = function(a) {
      return this.options.dragAndDrop && this.dnd_handler ? this.dnd_handler.mouseStop(a) : !1;
    };
    b.prototype._initData = function() {
      this.options.data ? this._loadData(this.options.data, null) : this._getDataUrlInfo(null) ? this._loadDataFromUrl(null, null, null) : this._loadData([], null);
    };
    b.prototype._getDataUrlInfo = function(a) {
      var b = this, c = this.options.dataUrl || this.element.data("url"), d = function() {
        var a = {url:c};
        l(a);
        return a;
      }, l = function(c) {
        if (a && a.id) {
          var d = {node:a.id};
          c.data = d;
        } else {
          if (d = b._getNodeIdToBeSelected()) {
            d = {selected_node:d}, c.data = d;
          }
        }
      };
      if ("function" === typeof c) {
        return c(a);
      }
      if ("string" === typeof c) {
        return d();
      }
      "object" === typeof c && l(c);
      return c;
    };
    b.prototype._getNodeIdToBeSelected = function() {
      return this.options.saveState && this.save_state_handler ? this.save_state_handler.getNodeIdToBeSelected() : null;
    };
    b.prototype._initTree = function(a) {
      var b = this, c = function() {
        b.is_initialized || (b.is_initialized = !0, b._triggerEvent("tree.init"));
      };
      this.tree = new this.options.nodeClass(null, !0, this.options.nodeClass);
      this.select_node_handler && this.select_node_handler.clear();
      this.tree.loadFromData(a);
      a = this._setInitialState();
      this._refreshElements(null);
      a ? this._setInitialStateOnDemand(c) : c();
    };
    b.prototype._setInitialState = function() {
      var a = this, b = function() {
        if (!1 === a.options.autoOpen) {
          return !1;
        }
        var b = a._getAutoOpenMaxLevel(), c = !1;
        a.tree.iterate(function(a, d) {
          return a.load_on_demand ? (c = !0, !1) : a.hasChildren() ? (a.is_open = !0, d !== b) : !1;
        });
        return c;
      }, c = function() {
        if (a.options.saveState && a.save_state_handler) {
          var b = a.save_state_handler.getStateFromStorage();
          return b ? [!0, a.save_state_handler.setInitialState(b)] : [!1, !1];
        }
        return [!1, !1];
      }(), d = c[1];
      c[0] || (d = b());
      return d;
    };
    b.prototype._setInitialStateOnDemand = function(a) {
      var b = this, c = function() {
        var c = b._getAutoOpenMaxLevel(), d = 0, l = function(a) {
          d += 1;
          b._openNode(a, !1, function() {
            --d;
            f();
          });
        }, f = function() {
          b.tree.iterate(function(a, d) {
            if (a.load_on_demand) {
              return a.is_loading || l(a), !1;
            }
            b._openNode(a, !1, null);
            return d !== c;
          });
          0 === d && a();
        };
        f();
      };
      (function() {
        if (b.options.saveState && b.save_state_handler) {
          var c = b.save_state_handler.getStateFromStorage();
          if (c) {
            return b.save_state_handler.setInitialStateOnDemand(c, a), !0;
          }
        }
        return !1;
      })() || c();
    };
    b.prototype._getAutoOpenMaxLevel = function() {
      return !0 === this.options.autoOpen ? -1 : parseInt(this.options.autoOpen, 10);
    };
    b.prototype._getClickTarget = function(a) {
      a = g(a);
      var b = a.closest(".jqtree-toggler");
      if (b.length) {
        if (a = this._getNode(b)) {
          return {type:"button", node:a};
        }
      } else {
        if (a = a.closest(".jqtree-element"), a.length && (a = this._getNode(a))) {
          return {type:"label", node:a};
        }
      }
      return null;
    };
    b.prototype._getNode = function(a) {
      a = a.closest("li.jqtree_common");
      return 0 === a.length ? null : a.data("node");
    };
    b.prototype._saveState = function() {
      this.options.saveState && this.save_state_handler && this.save_state_handler.saveState();
    };
    b.prototype._selectCurrentNode = function() {
      var a = this.getSelectedNode();
      a && (a = this._getNodeElementForNode(a)) && a.select(!0);
    };
    b.prototype._deselectCurrentNode = function() {
      var a = this.getSelectedNode();
      a && this.removeFromSelection(a);
    };
    b.prototype._getDefaultClosedIcon = function() {
      return this.options.rtl ? "&#x25c0;" : "&#x25ba;";
    };
    b.prototype._getRtlOption = function() {
      if (null != this.options.rtl) {
        return this.options.rtl;
      }
      var a = this.element.data("rtl");
      return null != a && !1 !== a ? !0 : !1;
    };
    b.prototype._notifyLoading = function(a, b, c) {
      if (this.options.onLoading) {
        this.options.onLoading(a, b, c);
      }
    };
    b.prototype._selectNode = function(a, b) {
      var c = this;
      void 0 === b && (b = !1);
      if (this.select_node_handler) {
        var d = function() {
          var b = a.parent;
          b && b.parent && !b.is_open && c.openNode(b, !1);
        }, l = function() {
          c.options.saveState && c.save_state_handler && c.save_state_handler.saveState();
        };
        if (a) {
          var f = c.options.onCanSelectNode ? c.options.selectable && c.options.onCanSelectNode(a) : c.options.selectable;
          f && (this.select_node_handler.isNodeSelected(a) ? b && (this._deselectCurrentNode(), this._triggerEvent("tree.select", {node:null, previous_node:a})) : (b = this.getSelectedNode(), this._deselectCurrentNode(), this.addToSelection(a), this._triggerEvent("tree.select", {node:a, deselected_node:b}), d()), l());
        } else {
          this._deselectCurrentNode(), l();
        }
      }
    };
    b.prototype._loadData = function(a, b) {
      a && (this._triggerEvent("tree.load_data", {tree_data:a}), b ? (this._deselectNodes(b), this._loadSubtree(a, b)) : this._initTree(a), this.isDragging() && this.dnd_handler && this.dnd_handler.refresh());
    };
    b.prototype._deselectNodes = function(a) {
      if (this.select_node_handler) {
        var b = 0;
        for (a = this.select_node_handler.getSelectedNodesUnder(a); b < a.length; b++) {
          this.select_node_handler.removeFromSelection(a[b]);
        }
      }
    };
    b.prototype._loadSubtree = function(a, b) {
      b.loadFromData(a);
      b.load_on_demand = !1;
      b.is_loading = !1;
      this._refreshElements(b);
    };
    b.prototype._loadDataFromUrl = function(a, b, c) {
      var d = this, l = null, f = a, p = function() {
        l && (l.removeClass("jqtree-loading"), d._notifyLoading(!1, b, l));
      }, t = function(a) {
        p();
        d._loadData(a, b);
        c && "function" === typeof c && c();
      }, q = function(a) {
        a = a instanceof Array || "object" === typeof a ? a : null != a ? g.parseJSON(a) : [];
        a = d.options.dataFilter ? d.options.dataFilter(a) : a;
        t(a);
      }, h = function(a) {
        p();
        if (d.options.onLoadFailed) {
          d.options.onLoadFailed(a);
        }
      }, m = function() {
        if ("string" === typeof f) {
          var a = {url:f};
        } else {
          f.method || (f.method = "get"), a = f;
        }
        g.ajax(g.extend({}, a, {method:null != f.method ? f.method.toUpperCase() : "GET", cache:!1, dataType:"json", success:q, error:h}));
      };
      a || (f = this._getDataUrlInfo(b));
      if (l = b ? g(b.element) : d.element) {
        l.addClass("jqtree-loading"), d._notifyLoading(!0, b, l);
      }
      f ? f instanceof Array ? t(f) : m() : p();
    };
    b.prototype._loadFolderOnDemand = function(a, b, c) {
      var d = this;
      void 0 === b && (b = !0);
      a.is_loading = !0;
      this._loadDataFromUrl(null, a, function() {
        d._openNode(a, b, c);
      });
    };
    b.defaults = {animationSpeed:"fast", autoOpen:!1, saveState:!1, dragAndDrop:!1, selectable:!0, useContextMenu:!0, onCanSelectNode:null, onSetStateFromStorage:null, onGetStateFromStorage:null, onCreateLi:null, onIsMoveHandle:null, onCanMove:null, onCanMoveTo:null, onLoadFailed:null, autoEscape:!0, dataUrl:null, closedIcon:null, openedIcon:"&#x25bc;", slide:!0, nodeClass:w.Node, dataFilter:null, keyboardSupport:!0, openFolderDelay:500, rtl:!1, onDragMove:null, onDragStop:null, buttonLeft:!0, onLoading:null, 
    tabIndex:0};
    return b;
  }(b["default"]);
  a["default"].register(c, "tree");
}, function(a, b, c) {
  b.__esModule = !0;
  b["default"] = "1.4.8";
}, function(a, b, c) {
  var d = this && this.__extends || function() {
    var a = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
      a.__proto__ = b;
    } || function(a, b) {
      for (var c in b) {
        b.hasOwnProperty(c) && (a[c] = b[c]);
      }
    };
    return function(b, c) {
      function d() {
        this.constructor = b;
      }
      a(b, c);
      b.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    };
  }();
  b.__esModule = !0;
  var f = c(2), g = c(0), h = c(1);
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.hovered_area = null;
      this.hit_areas = [];
      this.is_dragging = !1;
      this.position_info = this.current_item = null;
    }
    a.prototype.mouseCapture = function(a) {
      a = f(a.target);
      if (!this.mustCaptureElement(a) || this.tree_widget.options.onIsMoveHandle && !this.tree_widget.options.onIsMoveHandle(a)) {
        return null;
      }
      (a = this.tree_widget._getNodeElement(a)) && this.tree_widget.options.onCanMove && (this.tree_widget.options.onCanMove(a.node) || (a = null));
      this.current_item = a;
      return null != this.current_item;
    };
    a.prototype.generateHitAreas = function() {
      this.hit_areas = this.current_item ? (new m(this.tree_widget.tree, this.current_item.node, this.getTreeDimensions().bottom)).generate() : [];
    };
    a.prototype.mouseStart = function(a) {
      if (this.current_item) {
        this.refresh();
        var b = f(a.target).offset(), c = b ? b.left : 0, b = b ? b.top : 0, d = this.current_item.node, d = this.tree_widget.options.autoEscape ? h.html_escape(d.name) : d.name;
        this.drag_element = new u(d, a.page_x - c, a.page_y - b, this.tree_widget.element);
        this.is_dragging = !0;
        this.position_info = a;
        this.current_item.$element.addClass("jqtree-moving");
        return !0;
      }
      return !1;
    };
    a.prototype.mouseDrag = function(a) {
      if (this.current_item && this.drag_element) {
        this.drag_element.move(a.page_x, a.page_y);
        this.position_info = a;
        var b = this.findHoveredArea(a.page_x, a.page_y);
        this.canMoveToArea(b) && b ? (b.node.isFolder() || this.stopOpenFolderTimer(), this.hovered_area !== b && (this.hovered_area = b, this.mustOpenFolderTimer(b) ? this.startOpenFolderTimer(b.node) : this.stopOpenFolderTimer(), this.updateDropHint())) : (this.removeHover(), this.removeDropHint(), this.stopOpenFolderTimer());
        if (!b && this.tree_widget.options.onDragMove) {
          this.tree_widget.options.onDragMove(this.current_item.node, a.original_event);
        }
        return !0;
      }
      return !1;
    };
    a.prototype.mouseStop = function(a) {
      this.moveItem(a);
      this.clear();
      this.removeHover();
      this.removeDropHint();
      this.removeHitAreas();
      var b = this.current_item;
      this.current_item && (this.current_item.$element.removeClass("jqtree-moving"), this.current_item = null);
      this.is_dragging = !1;
      this.position_info = null;
      if (!this.hovered_area && b && this.tree_widget.options.onDragStop) {
        this.tree_widget.options.onDragStop(b.node, a.original_event);
      }
      return !1;
    };
    a.prototype.refresh = function() {
      this.removeHitAreas();
      this.current_item && (this.generateHitAreas(), this.current_item = this.tree_widget._getNodeElementForNode(this.current_item.node), this.is_dragging && this.current_item.$element.addClass("jqtree-moving"));
    };
    a.prototype.mustCaptureElement = function(a) {
      return !a.is("input,select,textarea");
    };
    a.prototype.canMoveToArea = function(a) {
      if (a && this.current_item) {
        if (this.tree_widget.options.onCanMoveTo) {
          var b = g.getPositionName(a.position);
          return this.tree_widget.options.onCanMoveTo(this.current_item.node, a.node, b);
        }
        return !0;
      }
      return !1;
    };
    a.prototype.removeHitAreas = function() {
      this.hit_areas = [];
    };
    a.prototype.clear = function() {
      this.drag_element && (this.drag_element.remove(), this.drag_element = null);
    };
    a.prototype.removeDropHint = function() {
      this.previous_ghost && this.previous_ghost.remove();
    };
    a.prototype.removeHover = function() {
      this.hovered_area = null;
    };
    a.prototype.findHoveredArea = function(a, b) {
      var c = this.getTreeDimensions();
      if (a < c.left || b < c.top || a > c.right || b > c.bottom) {
        return null;
      }
      a = 0;
      for (c = this.hit_areas.length; a < c;) {
        var d = a + c >> 1, f = this.hit_areas[d];
        if (b < f.top) {
          c = d;
        } else {
          if (b > f.bottom) {
            a = d + 1;
          } else {
            return f;
          }
        }
      }
      return null;
    };
    a.prototype.mustOpenFolderTimer = function(a) {
      var b = a.node;
      return b.isFolder() && !b.is_open && a.position === g.Position.Inside;
    };
    a.prototype.updateDropHint = function() {
      this.hovered_area && (this.removeDropHint(), this.previous_ghost = this.tree_widget._getNodeElementForNode(this.hovered_area.node).addDropHint(this.hovered_area.position));
    };
    a.prototype.startOpenFolderTimer = function(a) {
      var b = this;
      this.stopOpenFolderTimer();
      this.open_folder_timer = setTimeout(function() {
        b.tree_widget._openNode(a, b.tree_widget.options.slide, function() {
          b.refresh();
          b.updateDropHint();
        });
      }, this.tree_widget.options.openFolderDelay);
    };
    a.prototype.stopOpenFolderTimer = function() {
      this.open_folder_timer && (clearTimeout(this.open_folder_timer), this.open_folder_timer = null);
    };
    a.prototype.moveItem = function(a) {
      var b = this;
      if (this.current_item && this.hovered_area && this.hovered_area.position !== g.Position.None && this.canMoveToArea(this.hovered_area)) {
        var c = this.current_item.node, d = this.hovered_area.node, f = this.hovered_area.position, l = c.parent;
        f === g.Position.Inside && (this.hovered_area.node.is_open = !0);
        var p = function() {
          b.tree_widget.tree.moveNode(c, d, f);
          b.tree_widget.element.empty();
          b.tree_widget._refreshElements(null);
        };
        this.tree_widget._triggerEvent("tree.move", {move_info:{moved_node:c, target_node:d, position:g.getPositionName(f), previous_parent:l, do_move:p, original_event:a.original_event}}).isDefaultPrevented() || p();
      }
    };
    a.prototype.getTreeDimensions = function() {
      var a = this.tree_widget.element.offset();
      if (a) {
        var b = this.tree_widget.element, c = b.width() || 0, b = b.height() || 0, d = a.left + this.tree_widget._getScrollLeft();
        return {left:d, top:a.top, right:d + c, bottom:a.top + b + 16};
      }
      return {left:0, top:0, right:0, bottom:0};
    };
    return a;
  }();
  b.DragAndDropHandler = a;
  var m = function(a) {
    function b(b, c, d) {
      b = a.call(this, b) || this;
      b.current_node = c;
      b.tree_bottom = d;
      return b;
    }
    d(b, a);
    b.prototype.generate = function() {
      this.positions = [];
      this.last_top = 0;
      this.iterate();
      return this.generateHitAreas(this.positions);
    };
    b.prototype.generateHitAreas = function(a) {
      for (var b = -1, c = [], d = [], l = 0; l < a.length; l++) {
        var f = a[l];
        f.top !== b && c.length && (c.length && this.generateHitAreasForGroup(d, c, b, f.top), b = f.top, c = []);
        c.push(f);
      }
      this.generateHitAreasForGroup(d, c, b, this.tree_bottom);
      return d;
    };
    b.prototype.handleOpenFolder = function(a, b) {
      if (a === this.current_node) {
        return !1;
      }
      a.children[0] !== this.current_node && this.addPosition(a, g.Position.Inside, this.getTop(b));
      return !0;
    };
    b.prototype.handleClosedFolder = function(a, b, c) {
      c = this.getTop(c);
      a === this.current_node ? this.addPosition(a, g.Position.None, c) : (this.addPosition(a, g.Position.Inside, c), b !== this.current_node && this.addPosition(a, g.Position.After, c));
    };
    b.prototype.handleFirstNode = function(a) {
      a !== this.current_node && this.addPosition(a, g.Position.Before, this.getTop(f(a.element)));
    };
    b.prototype.handleAfterOpenFolder = function(a, b) {
      a === this.current_node || b === this.current_node ? this.addPosition(a, g.Position.None, this.last_top) : this.addPosition(a, g.Position.After, this.last_top);
    };
    b.prototype.handleNode = function(a, b, c) {
      c = this.getTop(c);
      a === this.current_node ? this.addPosition(a, g.Position.None, c) : this.addPosition(a, g.Position.Inside, c);
      b === this.current_node || a === this.current_node ? this.addPosition(a, g.Position.None, c) : this.addPosition(a, g.Position.After, c);
    };
    b.prototype.getTop = function(a) {
      return (a = a.offset()) ? a.top : 0;
    };
    b.prototype.addPosition = function(a, b, c) {
      this.positions.push({top:c, bottom:0, node:a, position:b});
      this.last_top = c;
    };
    b.prototype.generateHitAreasForGroup = function(a, b, c, d) {
      var l = Math.min(b.length, 4);
      d = Math.round((d - c) / l);
      for (var f = 0; f < l;) {
        var g = b[f];
        a.push({top:c, bottom:c + d, node:g.node, position:g.position});
        c += d;
        f += 1;
      }
    };
    return b;
  }(function() {
    function a(a) {
      this.tree = a;
    }
    a.prototype.iterate = function() {
      var a = this, b = !0, c = function(d, g) {
        var l = (d.is_open || !d.element) && d.hasChildren(), p = null;
        if (d.element) {
          p = f(d.element);
          if (!p.is(":visible")) {
            return;
          }
          b && (a.handleFirstNode(d), b = !1);
          d.hasChildren() ? d.is_open ? a.handleOpenFolder(d, p) || (l = !1) : a.handleClosedFolder(d, g, p) : a.handleNode(d, g, p);
        }
        if (l) {
          var t = d.children.length;
          d.children.forEach(function(a, b) {
            b === t - 1 ? c(d.children[b], null) : c(d.children[b], d.children[b + 1]);
          });
          d.is_open && p && a.handleAfterOpenFolder(d, g);
        }
      };
      c(this.tree, null);
    };
    return a;
  }());
  b.HitAreasGenerator = m;
  var u = function() {
    function a(a, b, c, d) {
      this.offset_x = b;
      this.offset_y = c;
      this.$element = f('<span class="jqtree-title jqtree-dragging">' + a + "</span>");
      this.$element.css("position", "absolute");
      d.append(this.$element);
    }
    a.prototype.move = function(a, b) {
      this.$element.offset({left:a - this.offset_x, top:b - this.offset_y});
    };
    a.prototype.remove = function() {
      this.$element.remove();
    };
    return a;
  }();
}, function(a, b, c) {
  b.__esModule = !0;
  var d = c(1);
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.opened_icon_element = this.createButtonElement(a.options.openedIcon);
      this.closed_icon_element = this.createButtonElement(a.options.closedIcon);
    }
    a.prototype.render = function(a) {
      a && a.parent ? this.renderFromNode(a) : this.renderFromRoot();
    };
    a.prototype.renderFromRoot = function() {
      var a = this.tree_widget.element;
      a.empty();
      this.createDomElements(a[0], this.tree_widget.tree.children, !0, 1);
    };
    a.prototype.renderFromNode = function(a) {
      var b = jQuery(a.element), c = this.createLi(a, a.getLevel());
      this.attachNodeData(a, c);
      b.after(c);
      b.remove();
      a.children && this.createDomElements(c, a.children, !1, a.getLevel() + 1);
    };
    a.prototype.createDomElements = function(a, b, c, d) {
      c = this.createUl(c);
      a.appendChild(c);
      for (a = 0; a < b.length; a++) {
        var f = b[a], g = this.createLi(f, d);
        c.appendChild(g);
        this.attachNodeData(f, g);
        f.hasChildren() && this.createDomElements(g, f.children, !1, d + 1);
      }
    };
    a.prototype.attachNodeData = function(a, b) {
      a.element = b;
      jQuery(b).data("node", a);
    };
    a.prototype.createUl = function(a) {
      if (a) {
        a = "jqtree-tree";
        var b = "tree";
        this.tree_widget.options.rtl && (a += " jqtree-rtl");
      } else {
        a = "", b = "group";
      }
      var c = document.createElement("ul");
      c.className = "jqtree_common " + a;
      c.setAttribute("role", b);
      return c;
    };
    a.prototype.createLi = function(a, b) {
      var c = !(!this.tree_widget.select_node_handler || !this.tree_widget.select_node_handler.isNodeSelected(a));
      b = a.isFolder() ? this.createFolderLi(a, b, c) : this.createNodeLi(a, b, c);
      if (this.tree_widget.options.onCreateLi) {
        this.tree_widget.options.onCreateLi(a, jQuery(b), c);
      }
      return b;
    };
    a.prototype.createFolderLi = function(a, b, c) {
      var d = this.getButtonClasses(a), f = this.getFolderClasses(a, c), g = a.is_open ? this.opened_icon_element : this.closed_icon_element, h = document.createElement("li");
      h.className = "jqtree_common " + f;
      h.setAttribute("role", "presentation");
      f = document.createElement("div");
      f.className = "jqtree-element jqtree_common";
      f.setAttribute("role", "presentation");
      h.appendChild(f);
      var m = document.createElement("a");
      m.className = d;
      m.appendChild(g.cloneNode(!0));
      m.setAttribute("role", "presentation");
      m.setAttribute("aria-hidden", "true");
      this.tree_widget.options.buttonLeft && f.appendChild(m);
      f.appendChild(this.createTitleSpan(a.name, b, c, a.is_open, !0));
      this.tree_widget.options.buttonLeft || f.appendChild(m);
      return h;
    };
    a.prototype.createNodeLi = function(a, b, c) {
      var d = ["jqtree_common"];
      c && d.push("jqtree-selected");
      var f = d.join(" "), d = document.createElement("li");
      d.className = f;
      d.setAttribute("role", "presentation");
      f = document.createElement("div");
      f.className = "jqtree-element jqtree_common";
      f.setAttribute("role", "presentation");
      d.appendChild(f);
      f.appendChild(this.createTitleSpan(a.name, b, c, a.is_open, !1));
      return d;
    };
    a.prototype.createTitleSpan = function(a, b, c, f, r) {
      var g = document.createElement("span"), h = "jqtree-title jqtree_common";
      r && (h += " jqtree-title-folder");
      g.className = h;
      g.setAttribute("role", "treeitem");
      g.setAttribute("aria-level", "" + b);
      g.setAttribute("aria-selected", d.getBoolString(c));
      g.setAttribute("aria-expanded", d.getBoolString(f));
      c && g.setAttribute("tabindex", this.tree_widget.options.tabIndex);
      g.innerHTML = this.escapeIfNecessary(a);
      return g;
    };
    a.prototype.getButtonClasses = function(a) {
      var b = ["jqtree-toggler", "jqtree_common"];
      a.is_open || b.push("jqtree-closed");
      this.tree_widget.options.buttonLeft ? b.push("jqtree-toggler-left") : b.push("jqtree-toggler-right");
      return b.join(" ");
    };
    a.prototype.getFolderClasses = function(a, b) {
      var c = ["jqtree-folder"];
      a.is_open || c.push("jqtree-closed");
      b && c.push("jqtree-selected");
      a.is_loading && c.push("jqtree-loading");
      return c.join(" ");
    };
    a.prototype.escapeIfNecessary = function(a) {
      return this.tree_widget.options.autoEscape ? d.html_escape(a) : a;
    };
    a.prototype.createButtonElement = function(a) {
      if ("string" === typeof a) {
        var b = document.createElement("div");
        b.innerHTML = a;
        return document.createTextNode(b.innerHTML);
      }
      return jQuery(a)[0];
    };
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  b.__esModule = !0;
  a = function() {
    function a(b) {
      var c = this;
      this.handleKeyDown = function(b) {
        if (c.canHandleKeyboard()) {
          switch(b.which) {
            case a.DOWN:
              return c.moveDown();
            case a.UP:
              return c.moveUp();
            case a.RIGHT:
              return c.moveRight();
            case a.LEFT:
              return c.moveLeft();
            default:
              return !0;
          }
        } else {
          return !0;
        }
      };
      this.tree_widget = b;
      if (b.options.keyboardSupport) {
        jQuery(document).on("keydown.jqtree", this.handleKeyDown);
      }
    }
    a.prototype.deinit = function() {
      jQuery(document).off("keydown.jqtree");
    };
    a.prototype.moveDown = function() {
      var a = this.tree_widget.getSelectedNode();
      return a ? this.selectNode(a.getNextNode()) : !1;
    };
    a.prototype.moveUp = function() {
      var a = this.tree_widget.getSelectedNode();
      return a ? this.selectNode(a.getPreviousNode()) : !1;
    };
    a.prototype.moveRight = function() {
      var a = this.tree_widget.getSelectedNode();
      if (a && a.isFolder()) {
        if (a.is_open) {
          return this.selectNode(a.getNextNode());
        }
        this.tree_widget.openNode(a);
        return !1;
      }
      return !0;
    };
    a.prototype.moveLeft = function() {
      var a = this.tree_widget.getSelectedNode();
      return a ? a.isFolder() && a.is_open ? (this.tree_widget.closeNode(a), !1) : this.selectNode(a.getParent()) : !0;
    };
    a.prototype.selectNode = function(a) {
      return a ? (this.tree_widget.selectNode(a), this.tree_widget.scroll_handler && !this.tree_widget.scroll_handler.isScrolledIntoView(jQuery(a.element).find(".jqtree-element")) && this.tree_widget.scrollToNode(a), !1) : !0;
    };
    a.prototype.canHandleKeyboard = function() {
      return this.tree_widget.options.keyboardSupport && this.isFocusOnTree() && null != this.tree_widget.getSelectedNode();
    };
    a.prototype.isFocusOnTree = function() {
      var a = document.activeElement;
      return a && "SPAN" === a.tagName && this.tree_widget._containsElement(a);
    };
    a.LEFT = 37;
    a.UP = 38;
    a.RIGHT = 39;
    a.DOWN = 40;
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  var d = this && this.__extends || function() {
    var a = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
      a.__proto__ = b;
    } || function(a, b) {
      for (var c in b) {
        b.hasOwnProperty(c) && (a[c] = b[c]);
      }
    };
    return function(b, c) {
      function d() {
        this.constructor = b;
      }
      a(b, c);
      b.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    };
  }();
  b.__esModule = !0;
  a = function(a) {
    function b() {
      var b = null !== a && a.apply(this, arguments) || this;
      b.mouseDown = function(a) {
        if (1 === a.which) {
          var c = b._handleMouseDown(b._getPositionInfo(a));
          c && a.preventDefault();
          return c;
        }
      };
      b.mouseMove = function(a) {
        return b._handleMouseMove(a, b._getPositionInfo(a));
      };
      b.mouseUp = function(a) {
        return b._handleMouseUp(b._getPositionInfo(a));
      };
      b.touchStart = function(a) {
        a = a.originalEvent;
        if (!(1 < a.touches.length)) {
          return b._handleMouseDown(b._getPositionInfo(a.changedTouches[0]));
        }
      };
      b.touchMove = function(a) {
        var c = a.originalEvent;
        if (!(1 < c.touches.length)) {
          return b._handleMouseMove(a, b._getPositionInfo(c.changedTouches[0]));
        }
      };
      b.touchEnd = function(a) {
        a = a.originalEvent;
        if (!(1 < a.touches.length)) {
          return b._handleMouseUp(b._getPositionInfo(a.changedTouches[0]));
        }
      };
      return b;
    }
    d(b, a);
    b.prototype.setMouseDelay = function(a) {
      this.mouse_delay = a;
    };
    b.prototype._init = function() {
      this.$el.on("mousedown.mousewidget", this.mouseDown);
      this.$el.on("touchstart.mousewidget", this.touchStart);
      this.is_mouse_started = !1;
      this.mouse_delay = 0;
      this._mouse_delay_timer = null;
      this._is_mouse_delay_met = !0;
      this.mouse_down_info = null;
    };
    b.prototype._deinit = function() {
      this.$el.off("mousedown.mousewidget");
      this.$el.off("touchstart.mousewidget");
      var a = jQuery(document);
      a.off("mousemove.mousewidget");
      a.off("mouseup.mousewidget");
    };
    b.prototype._handleMouseDown = function(a) {
      this.is_mouse_started && this._handleMouseUp(a);
      this.mouse_down_info = a;
      if (this._mouseCapture(a)) {
        return this._handleStartMouse(), !0;
      }
    };
    b.prototype._handleStartMouse = function() {
      var a = jQuery(document);
      a.on("mousemove.mousewidget", this.mouseMove);
      a.on("touchmove.mousewidget", this.touchMove);
      a.on("mouseup.mousewidget", this.mouseUp);
      a.on("touchend.mousewidget", this.touchEnd);
      this.mouse_delay && this._startMouseDelayTimer();
    };
    b.prototype._startMouseDelayTimer = function() {
      var a = this;
      this._mouse_delay_timer && clearTimeout(this._mouse_delay_timer);
      this._mouse_delay_timer = setTimeout(function() {
        a._is_mouse_delay_met = !0;
      }, this.mouse_delay);
      this._is_mouse_delay_met = !1;
    };
    b.prototype._handleMouseMove = function(a, b) {
      if (this.is_mouse_started) {
        return this._mouseDrag(b), a.preventDefault();
      }
      if (this.mouse_delay && !this._is_mouse_delay_met) {
        return !0;
      }
      this.mouse_down_info && (this.is_mouse_started = !1 !== this._mouseStart(this.mouse_down_info));
      this.is_mouse_started ? this._mouseDrag(b) : this._handleMouseUp(b);
      return !this.is_mouse_started;
    };
    b.prototype._getPositionInfo = function(a) {
      return {page_x:a.pageX, page_y:a.pageY, target:a.target, original_event:a};
    };
    b.prototype._handleMouseUp = function(a) {
      var b = jQuery(document);
      b.off("mousemove.mousewidget");
      b.off("touchmove.mousewidget");
      b.off("mouseup.mousewidget");
      b.off("touchend.mousewidget");
      this.is_mouse_started && (this.is_mouse_started = !1, this._mouseStop(a));
    };
    return b;
  }(c(3)["default"]);
  b["default"] = a;
}, function(a, b, c) {
  b.__esModule = !0;
  var d = c(1);
  a = function() {
    function a(a) {
      this.tree_widget = a;
    }
    a.prototype.saveState = function() {
      var a = JSON.stringify(this.getState());
      if (this.tree_widget.options.onSetStateFromStorage) {
        this.tree_widget.options.onSetStateFromStorage(a);
      } else {
        this.supportsLocalStorage() && localStorage.setItem(this.getKeyName(), a);
      }
    };
    a.prototype.getStateFromStorage = function() {
      var a = this._loadFromStorage();
      return a ? this._parseState(a) : null;
    };
    a.prototype.getState = function() {
      var a = this;
      return {open_nodes:function() {
        var b = [];
        a.tree_widget.tree.iterate(function(a) {
          a.is_open && a.id && a.hasChildren() && b.push(a.id);
          return !0;
        });
        return b;
      }(), selected_node:function() {
        return a.tree_widget.getSelectedNodes().map(function(a) {
          return a.id;
        });
      }()};
    };
    a.prototype.setInitialState = function(a) {
      if (a) {
        var b = !1;
        a.open_nodes && (b = this._openInitialNodes(a.open_nodes));
        a.selected_node && (this._resetSelection(), this._selectInitialNodes(a.selected_node));
        return b;
      }
      return !1;
    };
    a.prototype.setInitialStateOnDemand = function(a, b) {
      a ? this._setInitialStateOnDemand(a.open_nodes, a.selected_node, b) : b();
    };
    a.prototype.getNodeIdToBeSelected = function() {
      var a = this.getStateFromStorage();
      return a && a.selected_node ? a.selected_node[0] : null;
    };
    a.prototype._parseState = function(a) {
      (a = jQuery.parseJSON(a)) && a.selected_node && d.isInt(a.selected_node) && (a.selected_node = [a.selected_node]);
      return a;
    };
    a.prototype._loadFromStorage = function() {
      if (this.tree_widget.options.onGetStateFromStorage) {
        return this.tree_widget.options.onGetStateFromStorage();
      }
      if (this.supportsLocalStorage()) {
        return localStorage.getItem(this.getKeyName());
      }
    };
    a.prototype._openInitialNodes = function(a) {
      for (var b = !1, c = 0; c < a.length; c++) {
        var d = this.tree_widget.getNodeById(a[c]);
        d && (d.load_on_demand ? b = !0 : d.is_open = !0);
      }
      return b;
    };
    a.prototype._selectInitialNodes = function(a) {
      for (var b = 0, c = 0; c < a.length; c++) {
        var d = this.tree_widget.getNodeById(a[c]);
        d && (b += 1, this.tree_widget.select_node_handler && this.tree_widget.select_node_handler.addToSelection(d));
      }
      return 0 !== b;
    };
    a.prototype._resetSelection = function() {
      var a = this.tree_widget.select_node_handler;
      a && a.getSelectedNodes().forEach(function(b) {
        a.removeFromSelection(b);
      });
    };
    a.prototype._setInitialStateOnDemand = function(a, b, c) {
      var d = this, f = 0, g = a, h = function() {
        for (var a = [], q = 0, l = g; q < l.length; q++) {
          var p = l[q], t = d.tree_widget.getNodeById(p);
          t ? t.is_loading || (t.load_on_demand ? m(t) : d.tree_widget._openNode(t, !1, null)) : a.push(p);
        }
        g = a;
        d._selectInitialNodes(b) && d.tree_widget._refreshElements(null);
        0 === f && c();
      }, m = function(a) {
        f += 1;
        d.tree_widget._openNode(a, !1, function() {
          --f;
          h();
        });
      };
      h();
    };
    a.prototype.getKeyName = function() {
      return "string" === typeof this.tree_widget.options.saveState ? this.tree_widget.options.saveState : "tree";
    };
    a.prototype.supportsLocalStorage = function() {
      null == this._supportsLocalStorage && (this._supportsLocalStorage = function() {
        if (null == localStorage) {
          return !1;
        }
        try {
          sessionStorage.setItem("_storage_test", "value"), sessionStorage.removeItem("_storage_test");
        } catch (g) {
          return !1;
        }
        return !0;
      }());
      return this._supportsLocalStorage;
    };
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  b.__esModule = !0;
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.previous_top = -1;
      this.is_initialized = !1;
    }
    a.prototype.checkScrolling = function() {
      this.ensureInit();
      this.checkVerticalScrolling();
      this.checkHorizontalScrolling();
    };
    a.prototype.scrollToY = function(a) {
      this.ensureInit();
      if (this.$scroll_parent) {
        this.$scroll_parent[0].scrollTop = a;
      } else {
        var b = this.tree_widget.$el.offset(), b = b ? b.top : 0;
        jQuery(document).scrollTop(a + b);
      }
    };
    a.prototype.isScrolledIntoView = function(a) {
      this.ensureInit();
      var b = a.height() || 0;
      if (this.$scroll_parent) {
        var c = 0;
        var d = this.$scroll_parent.height() || 0;
        a = a.offset();
        a = (a ? a.top : 0) - this.scroll_parent_top;
      } else {
        c = jQuery(window).scrollTop() || 0, d = jQuery(window).height() || 0, d = c + d, a = (a = a.offset()) ? a.top : 0;
      }
      return a + b <= d && a >= c;
    };
    a.prototype.getScrollLeft = function() {
      return this.$scroll_parent ? this.$scroll_parent.scrollLeft() || 0 : 0;
    };
    a.prototype.initScrollParent = function() {
      var a = this;
      "fixed" === this.tree_widget.$el.css("position") && (a.scroll_parent_top = 0, a.$scroll_parent = null);
      var b = function() {
        var b = ["overflow", "overflow-y"], c = function(a) {
          for (var c = 0; c < b.length; c++) {
            var d = a.css(b[c]);
            if ("auto" === d || "scroll" === d) {
              return !0;
            }
          }
          return !1;
        };
        if (c(a.tree_widget.$el)) {
          return a.tree_widget.$el;
        }
        for (var d = 0, f = a.tree_widget.$el.parents().get(); d < f.length; d++) {
          var g = jQuery(f[d]);
          if (c(g)) {
            return g;
          }
        }
        return null;
      }();
      b && b.length && "HTML" !== b[0].tagName ? (this.$scroll_parent = b, this.scroll_parent_top = (b = this.$scroll_parent.offset()) ? b.top : 0) : (a.scroll_parent_top = 0, a.$scroll_parent = null);
      this.is_initialized = !0;
    };
    a.prototype.ensureInit = function() {
      this.is_initialized || this.initScrollParent();
    };
    a.prototype.handleVerticalScrollingWithScrollParent = function(a) {
      var b = this.$scroll_parent && this.$scroll_parent[0];
      b && (20 > this.scroll_parent_top + b.offsetHeight - a.bottom ? (b.scrollTop += 20, this.tree_widget.refreshHitAreas(), this.previous_top = -1) : 20 > a.top - this.scroll_parent_top && (b.scrollTop -= 20, this.tree_widget.refreshHitAreas(), this.previous_top = -1));
    };
    a.prototype.handleVerticalScrollingWithDocument = function(a) {
      var b = jQuery(document).scrollTop() || 0;
      20 > a.top - b ? jQuery(document).scrollTop(b - 20) : 20 > (jQuery(window).height() || 0) - (a.bottom - b) && jQuery(document).scrollTop(b + 20);
    };
    a.prototype.checkVerticalScrolling = function() {
      var a = this.tree_widget.dnd_handler && this.tree_widget.dnd_handler.hovered_area;
      a && a.top !== this.previous_top && (this.previous_top = a.top, this.$scroll_parent ? this.handleVerticalScrollingWithScrollParent(a) : this.handleVerticalScrollingWithDocument(a));
    };
    a.prototype.checkHorizontalScrolling = function() {
      var a = this.tree_widget.dnd_handler && this.tree_widget.dnd_handler.position_info;
      a && (this.$scroll_parent ? this.handleHorizontalScrollingWithParent(a) : this.handleHorizontalScrollingWithDocument(a));
    };
    a.prototype.handleHorizontalScrollingWithParent = function(a) {
      var b = this.$scroll_parent, c = b && b.offset();
      if (b && c) {
        var b = b[0], d = b.scrollLeft + b.clientWidth < b.scrollWidth, f = 0 < b.scrollLeft, r = a.page_x < c.left + 20;
        a.page_x > c.left + b.clientWidth - 20 && d ? b.scrollLeft = Math.min(b.scrollLeft + 20, b.scrollWidth) : r && f && (b.scrollLeft = Math.max(b.scrollLeft - 20, 0));
      }
    };
    a.prototype.handleHorizontalScrollingWithDocument = function(a) {
      var b = jQuery(document), c = b.scrollLeft() || 0, d = jQuery(window).width() || 0, f = 0 < c, r = 20 > a.page_x - c;
      a.page_x > d - 20 ? b.scrollLeft(c + 20) : r && f && b.scrollLeft(Math.max(c - 20, 0));
    };
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  b.__esModule = !0;
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.clear();
    }
    a.prototype.getSelectedNode = function() {
      var a = this.getSelectedNodes();
      return a.length ? a[0] : !1;
    };
    a.prototype.getSelectedNodes = function() {
      if (this.selected_single_node) {
        return [this.selected_single_node];
      }
      var a = [], b;
      for (b in this.selected_nodes) {
        if (this.selected_nodes.hasOwnProperty(b)) {
          var c = this.tree_widget.getNodeById(b);
          c && a.push(c);
        }
      }
      return a;
    };
    a.prototype.getSelectedNodesUnder = function(a) {
      if (this.selected_single_node) {
        return a.isParentOf(this.selected_single_node) ? [this.selected_single_node] : [];
      }
      var b = [], c;
      for (c in this.selected_nodes) {
        if (this.selected_nodes.hasOwnProperty(c)) {
          var d = this.tree_widget.getNodeById(c);
          d && a.isParentOf(d) && b.push(d);
        }
      }
      return b;
    };
    a.prototype.isNodeSelected = function(a) {
      return a ? null != a.id ? this.selected_nodes[a.id] ? !0 : !1 : this.selected_single_node ? this.selected_single_node.element === a.element : !1 : !1;
    };
    a.prototype.clear = function() {
      this.selected_nodes = {};
      this.selected_single_node = null;
    };
    a.prototype.removeFromSelection = function(a, b) {
      var c = this;
      void 0 === b && (b = !1);
      null == a.id ? this.selected_single_node && a.element === this.selected_single_node.element && (this.selected_single_node = null) : (delete this.selected_nodes[a.id], b && a.iterate(function() {
        delete c.selected_nodes[a.id];
        return !0;
      }));
    };
    a.prototype.addToSelection = function(a) {
      null != a.id ? this.selected_nodes[a.id] = !0 : this.selected_single_node = a;
    };
    return a;
  }();
  b["default"] = a;
}, function(a, b, c) {
  var d = this && this.__extends || function() {
    var a = Object.setPrototypeOf || {__proto__:[]} instanceof Array && function(a, b) {
      a.__proto__ = b;
    } || function(a, b) {
      for (var c in b) {
        b.hasOwnProperty(c) && (a[c] = b[c]);
      }
    };
    return function(b, c) {
      function d() {
        this.constructor = b;
      }
      a(b, c);
      b.prototype = null === c ? Object.create(c) : (d.prototype = c.prototype, new d);
    };
  }();
  b.__esModule = !0;
  var f = c(0);
  a = function() {
    function a(a, b) {
      this.init(a, b);
    }
    a.prototype.init = function(a, b) {
      this.node = a;
      this.tree_widget = b;
      a.element || (a.element = this.tree_widget.element.get(0));
      this.$element = jQuery(a.element);
    };
    a.prototype.addDropHint = function(a) {
      return this.mustShowBorderDropHint(a) ? new g(this.$element, this.tree_widget._getScrollLeft()) : new h(this.node, this.$element, a);
    };
    a.prototype.select = function(a) {
      var b = this.getLi();
      b.addClass("jqtree-selected");
      b.attr("aria-selected", "true");
      b = this.getSpan();
      b.attr("tabindex", this.tree_widget.options.tabIndex);
      a && b.focus();
    };
    a.prototype.deselect = function() {
      var a = this.getLi();
      a.removeClass("jqtree-selected");
      a.attr("aria-selected", "false");
      a = this.getSpan();
      a.removeAttr("tabindex");
      a.blur();
    };
    a.prototype.getUl = function() {
      return this.$element.children("ul:first");
    };
    a.prototype.getSpan = function() {
      return this.$element.children(".jqtree-element").find("span.jqtree-title");
    };
    a.prototype.getLi = function() {
      return this.$element;
    };
    a.prototype.mustShowBorderDropHint = function(a) {
      return a === f.Position.Inside;
    };
    return a;
  }();
  b.NodeElement = a;
  a = function(a) {
    function b() {
      return null !== a && a.apply(this, arguments) || this;
    }
    d(b, a);
    b.prototype.open = function(a, b, c) {
      var d = this;
      void 0 === b && (b = !0);
      void 0 === c && (c = "fast");
      if (!this.node.is_open) {
        this.node.is_open = !0;
        var f = this.getButton();
        f.removeClass("jqtree-closed");
        f.html("");
        if (f = f.get(0)) {
          var g = this.tree_widget.renderer.opened_icon_element.cloneNode(!0);
          f.appendChild(g);
        }
        f = function() {
          d.getLi().removeClass("jqtree-closed");
          d.getSpan().attr("aria-expanded", "true");
          a && a(d.node);
          d.tree_widget._triggerEvent("tree.open", {node:d.node});
        };
        b ? this.getUl().slideDown(c, f) : (this.getUl().show(), f());
      }
    };
    b.prototype.close = function(a, b) {
      var c = this;
      void 0 === a && (a = !0);
      void 0 === b && (b = "fast");
      if (this.node.is_open) {
        this.node.is_open = !1;
        var d = this.getButton();
        d.addClass("jqtree-closed");
        d.html("");
        if (d = d.get(0)) {
          var f = this.tree_widget.renderer.closed_icon_element.cloneNode(!0);
          d.appendChild(f);
        }
        d = function() {
          c.getLi().addClass("jqtree-closed");
          c.getSpan().attr("aria-expanded", "false");
          c.tree_widget._triggerEvent("tree.close", {node:c.node});
        };
        a ? this.getUl().slideUp(b, d) : (this.getUl().hide(), d());
      }
    };
    b.prototype.mustShowBorderDropHint = function(a) {
      return !this.node.is_open && a === f.Position.Inside;
    };
    b.prototype.getButton = function() {
      return this.$element.children(".jqtree-element").find("a.jqtree-toggler");
    };
    return b;
  }(a);
  b.FolderElement = a;
  var g = function() {
    function a(a, b) {
      var c = a.children(".jqtree-element");
      a = a.width() || 0;
      b = Math.max(a + b - 4, 0);
      a = c.outerHeight() || 0;
      a = Math.max(a - 4, 0);
      this.$hint = jQuery('<span class="jqtree-border"></span>');
      c.append(this.$hint);
      this.$hint.css({width:b, height:a});
    }
    a.prototype.remove = function() {
      this.$hint.remove();
    };
    return a;
  }();
  b.BorderDropHint = g;
  var h = function() {
    function a(a, b, c) {
      this.$element = b;
      this.node = a;
      this.$ghost = jQuery('<li class="jqtree_common jqtree-ghost"><span class="jqtree_common jqtree-circle"></span>\n            <span class="jqtree_common jqtree-line"></span></li>');
      c === f.Position.After ? this.moveAfter() : c === f.Position.Before ? this.moveBefore() : c === f.Position.Inside && (a.isFolder() && a.is_open ? this.moveInsideOpenFolder() : this.moveInside());
    }
    a.prototype.remove = function() {
      this.$ghost.remove();
    };
    a.prototype.moveAfter = function() {
      this.$element.after(this.$ghost);
    };
    a.prototype.moveBefore = function() {
      this.$element.before(this.$ghost);
    };
    a.prototype.moveInsideOpenFolder = function() {
      jQuery(this.node.children[0].element).before(this.$ghost);
    };
    a.prototype.moveInside = function() {
      this.$element.after(this.$ghost);
      this.$ghost.addClass("jqtree-inside");
    };
    return a;
  }();
}, , function(a, b, c) {
  a.exports = c(4);
}]);
Polymer({is:"simpl-jqtree", properties:{multiselect:{type:Boolean, value:!1}, saveState:{type:Boolean, value:!1}, selection:{type:Array, notify:!0}, data:{observer:"dataChanged", type:Object}, selectedItem:{notify:!0, type:Object}, jqtree:{notify:!0, type:Object}, cmnode:{notify:!0, type:Object}, contextmenu:{type:Array}, options:{type:String}}, observers:[], behaviors:[StyleScopeBehavior], ready:function() {
  this.states = {};
}, _createTree:function() {
  var a = clone(this._parseOptions(this.options));
  a.data = this.data;
  this.contextmenu && (a.useContextMenu = !0);
  a.saveState = this.saveState ? !0 : !1;
  a.autoOpen = 1;
  this.jqtree = $(this.$.jqtree).tree(a);
  this.multiselect && this.jqtree.bind("tree.click", this._multiSelection.bind(this));
  this.jqtree.bind("tree.select", this._itemSelected.bind(this));
  this.contextmenu && (this._contextMenuSave ? this._contextMenu = this._contextMenuSave : this._contextMenuSave = this._contextMenu, this.jqtree.bind("tree.contextmenu", this._contextMenu.bind(this)), this._contextMenu = a = contextmenu(this.contextmenu), contextmenu.attach($(this.$.contextmenuId), a));
}, dataChanged:function() {
  if (this.jqtree) {
    if (this.data) {
      var a = this.catalog;
      this.catalog = this.data[0].id;
      a && (this.states[a] = this.jqtree.tree("getState"));
    }
    this.jqtree.tree("loadData", this.data);
    for (var a = this.jqtree.tree("getNodeById", this.data[0].id), b = 0; b < a.children.length; b++) {
      this.jqtree.tree("closeNode", a.children[b]);
    }
    (a = this.states[this.catalog]) && this.jqtree.tree("setState", a);
  } else {
    this._createTree();
  }
}, _contextMenu:function(a) {
  this.cmnode = a.node;
  contextmenu.show(this._contextMenu, a.node.element);
}, _multiSelection:function(a) {
  a.preventDefault();
  a = a.node;
  void 0 == a.id && console.log("The multiple selection functions require that nodes have an id");
  this.jqtree.tree("isNodeSelected", a) ? this.jqtree.tree("removeFromSelection", a) : this.jqtree.tree("addToSelection", a);
}, _itemSelected:function(a) {
  a.node ? (a = a.node, this.selectedItem = {label:a.name, id:a.id}, this.fire("iron-select", {item:this.selectedItem}), this.prevSelectedItem = this.selectedItem) : (this.selectedItem = null, this.fire("iron-deselect", {item:this.prevSelectedItem}));
}, _parseOptions:function(a) {
  if (null == a) {
    return {};
  }
  "string" == typeof a && (a = JSON5.parse(a));
  return a;
}});
Polymer({is:"simpl-jqtree-dropdown", properties:{selectedItem:{observer:"selectedItemChanged", notify:!0, type:Object}}, observers:[], behaviors:[StyleScopeBehavior], ready:function() {
}, attached:function() {
}, selectedItemChanged:function(a) {
  console.log("jqtree.dropdown.selectedItemChanged:", this.selectedItem);
}});
(function(a, b) {
  "object" === typeof exports && "undefined" !== typeof module ? b(require("jquery")) : "function" === typeof define && define.amd ? define(["jquery"], b) : b(a.jQuery);
})(this, function(a) {
  function b(a) {
    return "number" === typeof a && !isNaN(a);
  }
  function c(a) {
    return "undefined" === typeof a;
  }
  function d(a, c) {
    var d = [];
    b(c) && d.push(c);
    return d.slice.apply(a, d);
  }
  function f(a, b) {
    for (var c = arguments.length, l = Array(2 < c ? c - 2 : 0), f = 2; f < c; f++) {
      l[f - 2] = arguments[f];
    }
    return function() {
      for (var c = arguments.length, f = Array(c), p = 0; p < c; p++) {
        f[p] = arguments[p];
      }
      return a.apply(b, l.concat(d(f)));
    };
  }
  function g(b) {
    var c = [];
    a.each(b, function(a) {
      c.push(a);
    });
    return c;
  }
  function h(a) {
    return (a = a.match(/^(https?:)\/\/([^:/?#]+):?(\d*)/i)) && (a[1] !== location.protocol || a[2] !== location.hostname || a[3] !== location.port);
  }
  function m(a) {
    var b = "timestamp=" + (new Date).getTime();
    return a + (-1 === a.indexOf("?") ? "?" : "&") + b;
  }
  function u(a, b) {
    if (a.naturalWidth && !A) {
      b(a.naturalWidth, a.naturalHeight);
    } else {
      var c = document.createElement("img");
      c.onload = function() {
        b(this.width, this.height);
      };
      c.src = a.src;
    }
  }
  function r(a) {
    var c = [], d = a.translateX, l = a.translateY, f = a.rotate, p = a.scaleX;
    a = a.scaleY;
    b(d) && 0 !== d && c.push("translateX(" + d + "px)");
    b(l) && 0 !== l && c.push("translateY(" + l + "px)");
    b(f) && 0 !== f && c.push("rotate(" + f + "deg)");
    b(p) && 1 !== p && c.push("scaleX(" + p + ")");
    b(a) && 1 !== a && c.push("scaleY(" + a + ")");
    return c.length ? c.join(" ") : "none";
  }
  function n(a, b) {
    var c = Math.abs(a.degree) % 180, d = (90 < c ? 180 - c : c) * Math.PI / 180, c = Math.sin(d), d = Math.cos(d), l = a.width, f = a.height;
    a = a.aspectRatio;
    b ? (b = l / (d + c / a), c = b / a) : (b = l * d + f * c, c = l * c + f * d);
    return {width:b, height:c};
  }
  function v(c, d, l) {
    var f = a("<canvas>")[0], p = f.getContext("2d"), g = 0, t = 0, q = d.naturalWidth, h = d.naturalHeight, m = d.rotate, x = d.scaleX;
    d = d.scaleY;
    var w = b(x) && b(d) && (1 !== x || 1 !== d), z = b(m) && 0 !== m, y = z || w, r = q * Math.abs(x || 1), u = h * Math.abs(d || 1), A = void 0, E = void 0;
    w && (A = r / 2, E = u / 2);
    z && (u = n({width:r, height:u, degree:m}), r = u.width, u = u.height, A = r / 2, E = u / 2);
    f.width = r;
    f.height = u;
    l.fillColor && (p.fillStyle = l.fillColor, p.fillRect(0, 0, r, u));
    y && (g = -q / 2, t = -h / 2, p.save(), p.translate(A, E));
    z && p.rotate(m * Math.PI / 180);
    w && p.scale(x, d);
    p.imageSmoothingEnabled = !!l.imageSmoothingEnabled;
    l.imageSmoothingQuality && (p.imageSmoothingQuality = l.imageSmoothingQuality);
    p.drawImage(c, Math.floor(g), Math.floor(t), Math.floor(q), Math.floor(h));
    y && p.restore();
    return f;
  }
  function w(a) {
    a = a.replace(t, "");
    a = atob(a);
    var b = a.length, c = new ArrayBuffer(b), d = new Uint8Array(c), l;
    for (l = 0; l < b; l++) {
      d[l] = a.charCodeAt(l);
    }
    return c;
  }
  function y(b, c) {
    var d = b.pageX;
    b = b.pageY;
    var l = {endX:d, endY:b};
    return c ? l : a.extend({startX:d, startY:b}, l);
  }
  function q(b) {
    var c = a.extend({}, b), d = [];
    a.each(b, function(b, l) {
      delete c[b];
      a.each(c, function(a, b) {
        var c = Math.abs(l.startX - b.startX), f = Math.abs(l.startY - b.startY);
        a = Math.abs(l.endX - b.endX);
        b = Math.abs(l.endY - b.endY);
        c = Math.sqrt(c * c + f * f);
        d.push((Math.sqrt(a * a + b * b) - c) / c);
      });
    });
    d.sort(function(a, b) {
      return Math.abs(a) < Math.abs(b);
    });
    return d[0];
  }
  function l(b) {
    var c = 0, d = 0, l = 0;
    a.each(b, function(a, b) {
      a = b.startY;
      c += b.startX;
      d += a;
      l += 1;
    });
    c /= l;
    d /= l;
    return {pageX:c, pageY:d};
  }
  a = "default" in a ? a["default"] : a;
  var p = {viewMode:0, dragMode:"crop", aspectRatio:NaN, data:null, preview:"", responsive:!0, restore:!0, checkCrossOrigin:!0, checkOrientation:!0, modal:!0, guides:!0, center:!0, highlight:!0, background:!0, autoCrop:!0, autoCropArea:0.8, movable:!0, rotatable:!0, scalable:!0, zoomable:!0, zoomOnTouch:!0, zoomOnWheel:!0, wheelZoomRatio:0.1, cropBoxMovable:!0, cropBoxResizable:!0, toggleDragModeOnDblclick:!0, minCanvasWidth:0, minCanvasHeight:0, minCropBoxWidth:0, minCropBoxHeight:0, minContainerWidth:200, 
  minContainerHeight:100, ready:null, cropstart:null, cropmove:null, cropend:null, crop:null, zoom:null}, t = /^data:.*,/, x = /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i, z = "undefined" !== typeof window ? window.navigator : null, A = z && x.test(z.userAgent), E = String.fromCharCode, F = (x = "undefined" !== typeof window ? window.PointerEvent : null) ? "pointerdown" : "touchstart mousedown", J = x ? "pointermove" : "touchmove mousemove", N = x ? " pointerup pointercancel" : "touchend touchcancel mouseup", 
  U = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/, X = function() {
    function a(a, b) {
      for (var c = 0; c < b.length; c++) {
        var d = b[c];
        d.enumerable = d.enumerable || !1;
        d.configurable = !0;
        "value" in d && (d.writable = !0);
        Object.defineProperty(a, d.key, d);
      }
    }
    return function(b, c, d) {
      c && a(b.prototype, c);
      d && a(b, d);
      return b;
    };
  }(), W = function(a) {
    if (Array.isArray(a)) {
      for (var b = 0, c = Array(a.length); b < a.length; b++) {
        c[b] = a[b];
      }
      return c;
    }
    return Array.from(a);
  }, aa = /^data:/, ia = /^data:image\/jpeg;base64,/, S = function() {
    function b(c, d) {
      if (!(this instanceof b)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this.$element = a(c);
      this.options = a.extend({}, p, a.isPlainObject(d) && d);
      this.isImg = this.wheeling = this.limited = this.replaced = this.disabled = this.cropped = this.rotated = this.completed = this.ready = this.loaded = !1;
      this.originalUrl = "";
      this.cropBox = this.canvas = null;
      this.pointers = {};
      this.init();
    }
    X(b, [{key:"init", value:function() {
      var a = this.$element, b = void 0;
      if (a.is("img")) {
        this.isImg = !0;
        this.originalUrl = b = a.attr("src");
        if (!b) {
          return;
        }
        b = a.prop("src");
      } else {
        a.is("canvas") && window.HTMLCanvasElement && (b = a[0].toDataURL());
      }
      this.load(b);
    }}, {key:"trigger", value:function(b, c) {
      b = a.Event(b, c);
      this.$element.trigger(b);
      return b;
    }}, {key:"load", value:function(b) {
      var c = this, d = c.options, l = c.$element;
      if (b) {
        if (c.url = b, c.image = {}, d.checkOrientation && window.ArrayBuffer) {
          if (aa.test(b)) {
            ia.test(b) ? c.read(w(b)) : c.clone();
          } else {
            var f = new XMLHttpRequest;
            f.onerror = f.onabort = a.proxy(function() {
              c.clone();
            }, this);
            f.onload = function() {
              c.read(this.response);
            };
            d.checkCrossOrigin && h(b) && l.prop("crossOrigin") && (b = m(b));
            f.open("get", b);
            f.responseType = "arraybuffer";
            f.withCredentials = "use-credentials" === l.prop("crossOrigin");
            f.send();
          }
        } else {
          c.clone();
        }
      }
    }}, {key:"read", value:function(a) {
      var b = this.options;
      var c = new DataView(a);
      var d = c.byteLength, l = void 0, f, p = void 0, g = f = void 0, t;
      if (255 === c.getUint8(0) && 216 === c.getUint8(1)) {
        for (t = 2; t < d;) {
          if (255 === c.getUint8(t) && 225 === c.getUint8(t + 1)) {
            f = t;
            break;
          }
          t++;
        }
      }
      if (f) {
        var d = f + 10, q = f + 4;
        f = "";
        t = q;
        for (q = 4 + q; t < q; t++) {
          f += E(c.getUint8(t));
        }
        "Exif" === f && (f = c.getUint16(d), !(p = 18761 === f) && 19789 !== f || 42 !== c.getUint16(d + 2, p) || (f = c.getUint32(d + 4, p), 8 <= f && (g = d + f)));
      }
      if (g) {
        for (d = c.getUint16(g, p), f = 0; f < d; f++) {
          if (t = g + 12 * f + 2, 274 === c.getUint16(t, p)) {
            t += 8;
            l = c.getUint16(t, p);
            A && c.setUint16(t, 1, p);
            break;
          }
        }
      }
      c = l;
      l = this.image;
      p = 0;
      d = g = 1;
      if (1 < c) {
        a = new Uint8Array(a);
        f = a.length;
        t = "";
        for (q = 0; q < f; q++) {
          t += E(a[q]);
        }
        this.url = "data:image/jpeg;base64," + btoa(t);
        switch(c) {
          case 2:
            g = -1;
            break;
          case 3:
            p = -180;
            break;
          case 4:
            d = -1;
            break;
          case 5:
            p = 90;
            d = -1;
            break;
          case 6:
            p = 90;
            break;
          case 7:
            p = 90;
            g = -1;
            break;
          case 8:
            p = -90;
        }
      }
      b.rotatable && (l.rotate = p);
      b.scalable && (l.scaleX = g, l.scaleY = d);
      this.clone();
    }}, {key:"clone", value:function() {
      var b = this.$element, c = this.url, d = "", l = void 0;
      this.options.checkCrossOrigin && h(c) && ((d = b.prop("crossOrigin")) ? l = c : (d = "anonymous", l = m(c)));
      this.crossOrigin = d;
      this.crossOriginUrl = l;
      var f = document.createElement("img");
      d && (f.crossOrigin = d);
      f.src = l || c;
      this.$clone = c = a(f);
      if (this.isImg) {
        if (b[0].complete) {
          this.start();
        } else {
          b.one("load", a.proxy(this.start, this));
        }
      } else {
        c.one("load", a.proxy(this.start, this)).one("error", a.proxy(this.stop, this)).addClass("cropper-hide").insertAfter(b);
      }
    }}, {key:"start", value:function() {
      var b = this, c = b.$clone, d = b.$element;
      b.isImg || (c.off("error", b.stop), d = c);
      u(d[0], function(c, d) {
        a.extend(b.image, {naturalWidth:c, naturalHeight:d, aspectRatio:c / d});
        b.loaded = !0;
        b.build();
      });
    }}, {key:"stop", value:function() {
      this.$clone.remove();
      this.$clone = null;
    }}, {key:"build", value:function() {
      var b = this, c = b.options, d = b.$element, l = b.$clone, f = void 0, p = void 0, g = void 0;
      b.loaded && (b.ready && b.unbuild(), b.$container = d.parent(), b.$cropper = f = a('<div class="cropper-container"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-action="e"></span><span class="cropper-line line-n" data-action="n"></span><span class="cropper-line line-w" data-action="w"></span><span class="cropper-line line-s" data-action="s"></span><span class="cropper-point point-e" data-action="e"></span><span class="cropper-point point-n" data-action="n"></span><span class="cropper-point point-w" data-action="w"></span><span class="cropper-point point-s" data-action="s"></span><span class="cropper-point point-ne" data-action="ne"></span><span class="cropper-point point-nw" data-action="nw"></span><span class="cropper-point point-sw" data-action="sw"></span><span class="cropper-point point-se" data-action="se"></span></div></div>'), 
      b.$canvas = f.find(".cropper-canvas").append(l), b.$dragBox = f.find(".cropper-drag-box"), b.$cropBox = p = f.find(".cropper-crop-box"), b.$viewBox = f.find(".cropper-view-box"), b.$face = g = p.find(".cropper-face"), d.addClass("cropper-hidden").after(f), b.isImg || l.removeClass("cropper-hide"), b.initPreview(), b.bind(), c.aspectRatio = Math.max(0, c.aspectRatio) || NaN, c.viewMode = Math.max(0, Math.min(3, Math.round(c.viewMode))) || 0, (b.cropped = c.autoCrop) ? c.modal && b.$dragBox.addClass("cropper-modal") : 
      p.addClass("cropper-hidden"), c.guides || p.find(".cropper-dashed").addClass("cropper-hidden"), c.center || p.find(".cropper-center").addClass("cropper-hidden"), c.cropBoxMovable && g.addClass("cropper-move").data("action", "all"), c.highlight || g.addClass("cropper-invisible"), c.background && f.addClass("cropper-bg"), c.cropBoxResizable || p.find(".cropper-line, .cropper-point").addClass("cropper-hidden"), b.setDragMode(c.dragMode), b.render(), b.ready = !0, b.setData(c.data), b.completing = 
      setTimeout(function() {
        if (a.isFunction(c.ready)) {
          d.one("ready", c.ready);
        }
        b.trigger("ready");
        b.trigger("crop", b.getData());
        b.completed = !0;
      }, 0));
    }}, {key:"unbuild", value:function() {
      this.ready && (this.completed || clearTimeout(this.completing), this.completed = this.ready = !1, this.cropBox = this.canvas = this.container = this.initialCropBox = this.initialCanvas = this.initialImage = null, this.unbind(), this.resetPreview(), this.$container = this.$canvas = this.$dragBox = this.$cropBox = this.$viewBox = this.$preview = null, this.$cropper.remove(), this.$cropper = null);
    }}], [{key:"setDefaults", value:function(b) {
      a.extend(p, a.isPlainObject(b) && b);
    }}]);
    return b;
  }();
  a.extend(S.prototype, {render:function() {
    this.initContainer();
    this.initCanvas();
    this.initCropBox();
    this.renderCanvas();
    this.cropped && this.renderCropBox();
  }, initContainer:function() {
    var a = this.options, b = this.$element, c = this.$container, d = this.$cropper;
    d.addClass("cropper-hidden");
    b.removeClass("cropper-hidden");
    d.css(this.container = {width:Math.max(c.width(), Number(a.minContainerWidth) || 200), height:Math.max(c.height(), Number(a.minContainerHeight) || 100)});
    b.addClass("cropper-hidden");
    d.removeClass("cropper-hidden");
  }, initCanvas:function() {
    var b = this.options.viewMode, c = this.container, d = c.width, c = c.height, l = this.image, f = l.naturalWidth, p = l.naturalHeight, g = 90 === Math.abs(l.rotate) % 180, t = g ? p : f, g = g ? f : p, q = t / g, f = d, p = c;
    c * q > d ? 3 === b ? f = c * q : p = d / q : 3 === b ? p = d / q : f = c * q;
    t = {naturalWidth:t, naturalHeight:g, aspectRatio:q, width:f, height:p};
    t.oldLeft = t.left = (d - f) / 2;
    t.oldTop = t.top = (c - p) / 2;
    this.canvas = t;
    this.limited = 1 === b || 2 === b;
    this.limitCanvas(!0, !0);
    this.initialImage = a.extend({}, l);
    this.initialCanvas = a.extend({}, t);
  }, limitCanvas:function(a, b) {
    var c = this.options, d = c.viewMode, l = this.container, f = l.width, l = l.height, p = this.canvas, g = p.aspectRatio, t = this.cropBox, q = this.cropped && t;
    a && (a = Number(c.minCanvasWidth) || 0, c = Number(c.minCanvasHeight) || 0, d && (1 < d ? (a = Math.max(a, f), c = Math.max(c, l), 3 === d && (c * g > a ? a = c * g : c = a / g)) : a ? a = Math.max(a, q ? t.width : 0) : c ? c = Math.max(c, q ? t.height : 0) : q && (a = t.width, c = t.height, c * g > a ? a = c * g : c = a / g)), a && c ? c * g > a ? c = a / g : a = c * g : a ? c = a / g : c && (a = c * g), p.minWidth = a, p.minHeight = c, p.maxWidth = Infinity, p.maxHeight = Infinity);
    b && (d ? (b = f - p.width, c = l - p.height, p.minLeft = Math.min(0, b), p.minTop = Math.min(0, c), p.maxLeft = Math.max(0, b), p.maxTop = Math.max(0, c), q && this.limited && (p.minLeft = Math.min(t.left, t.left + t.width - p.width), p.minTop = Math.min(t.top, t.top + t.height - p.height), p.maxLeft = t.left, p.maxTop = t.top, 2 === d && (p.width >= f && (p.minLeft = Math.min(0, b), p.maxLeft = Math.max(0, b)), p.height >= l && (p.minTop = Math.min(0, c), p.maxTop = Math.max(0, c))))) : (p.minLeft = 
    -p.width, p.minTop = -p.height, p.maxLeft = f, p.maxTop = l));
  }, renderCanvas:function(a) {
    var b = this.canvas, c = this.image, d = c.rotate, l = c.naturalWidth, f = c.naturalHeight;
    if (this.rotated) {
      this.rotated = !1;
      var p = n({width:c.width, height:c.height, degree:d}), g = p.width / p.height;
      if ((c = 1 === c.aspectRatio) || g !== b.aspectRatio) {
        b.left -= (p.width - b.width) / 2;
        b.top -= (p.height - b.height) / 2;
        b.width = p.width;
        b.height = p.height;
        b.aspectRatio = g;
        b.naturalWidth = l;
        b.naturalHeight = f;
        if (c && d % 90 || d % 180) {
          d = n({width:l, height:f, degree:d}), b.naturalWidth = d.width, b.naturalHeight = d.height;
        }
        this.limitCanvas(!0, !1);
      }
    }
    if (b.width > b.maxWidth || b.width < b.minWidth) {
      b.left = b.oldLeft;
    }
    if (b.height > b.maxHeight || b.height < b.minHeight) {
      b.top = b.oldTop;
    }
    b.width = Math.min(Math.max(b.width, b.minWidth), b.maxWidth);
    b.height = Math.min(Math.max(b.height, b.minHeight), b.maxHeight);
    this.limitCanvas(!1, !0);
    b.oldLeft = b.left = Math.min(Math.max(b.left, b.minLeft), b.maxLeft);
    b.oldTop = b.top = Math.min(Math.max(b.top, b.minTop), b.maxTop);
    this.$canvas.css({width:b.width, height:b.height, transform:r({translateX:b.left, translateY:b.top})});
    this.renderImage();
    this.cropped && this.limited && this.limitCropBox(!0, !0);
    a && this.output();
  }, renderImage:function(b) {
    var c = this.canvas, d = this.image, l = void 0;
    d.rotate && (l = n({width:c.width, height:c.height, degree:d.rotate, aspectRatio:d.aspectRatio}, !0));
    a.extend(d, l ? {width:l.width, height:l.height, left:(c.width - l.width) / 2, top:(c.height - l.height) / 2} : {width:c.width, height:c.height, left:0, top:0});
    this.$clone.css({width:d.width, height:d.height, transform:r(a.extend({translateX:d.left, translateY:d.top}, d))});
    b && this.output();
  }, initCropBox:function() {
    var b = this.options, c = this.canvas, d = b.aspectRatio, b = Number(b.autoCropArea) || 0.8, l = {width:c.width, height:c.height};
    d && (c.height * d > c.width ? l.height = l.width / d : l.width = l.height * d);
    this.cropBox = l;
    this.limitCropBox(!0, !0);
    l.width = Math.min(Math.max(l.width, l.minWidth), l.maxWidth);
    l.height = Math.min(Math.max(l.height, l.minHeight), l.maxHeight);
    l.width = Math.max(l.minWidth, l.width * b);
    l.height = Math.max(l.minHeight, l.height * b);
    l.oldLeft = l.left = c.left + (c.width - l.width) / 2;
    l.oldTop = l.top = c.top + (c.height - l.height) / 2;
    this.initialCropBox = a.extend({}, l);
  }, limitCropBox:function(a, b) {
    var c = this.options, d = c.aspectRatio, l = this.container, f = l.width, l = l.height, p = this.canvas, g = this.cropBox, t = this.limited;
    if (a) {
      a = Number(c.minCropBoxWidth) || 0;
      var c = Number(c.minCropBoxHeight) || 0, q = Math.min(f, t ? p.width : f), h = Math.min(l, t ? p.height : l);
      a = Math.min(a, f);
      c = Math.min(c, l);
      d && (a && c ? c * d > a ? c = a / d : a = c * d : a ? c = a / d : c && (a = c * d), h * d > q ? h = q / d : q = h * d);
      g.minWidth = Math.min(a, q);
      g.minHeight = Math.min(c, h);
      g.maxWidth = q;
      g.maxHeight = h;
    }
    b && (t ? (g.minLeft = Math.max(0, p.left), g.minTop = Math.max(0, p.top), g.maxLeft = Math.min(f, p.left + p.width) - g.width, g.maxTop = Math.min(l, p.top + p.height) - g.height) : (g.minLeft = 0, g.minTop = 0, g.maxLeft = f - g.width, g.maxTop = l - g.height));
  }, renderCropBox:function() {
    var a = this.options, b = this.container, c = b.width, b = b.height, d = this.cropBox;
    if (d.width > d.maxWidth || d.width < d.minWidth) {
      d.left = d.oldLeft;
    }
    if (d.height > d.maxHeight || d.height < d.minHeight) {
      d.top = d.oldTop;
    }
    d.width = Math.min(Math.max(d.width, d.minWidth), d.maxWidth);
    d.height = Math.min(Math.max(d.height, d.minHeight), d.maxHeight);
    this.limitCropBox(!1, !0);
    d.oldLeft = d.left = Math.min(Math.max(d.left, d.minLeft), d.maxLeft);
    d.oldTop = d.top = Math.min(Math.max(d.top, d.minTop), d.maxTop);
    a.movable && a.cropBoxMovable && this.$face.data("action", d.width === c && d.height === b ? "move" : "all");
    this.$cropBox.css({width:d.width, height:d.height, transform:r({translateX:d.left, translateY:d.top})});
    this.cropped && this.limited && this.limitCanvas(!0, !0);
    this.disabled || this.output();
  }, output:function() {
    this.preview();
    this.completed && this.trigger("crop", this.getData());
  }});
  a.extend(S.prototype, {initPreview:function() {
    var b = this.crossOrigin, c = b ? this.crossOriginUrl : this.url, d = document.createElement("img");
    b && (d.crossOrigin = b);
    d.src = c;
    d = a(d);
    this.$preview = a(this.options.preview);
    this.$clone2 = d;
    this.$viewBox.html(d);
    this.$preview.each(function(d, l) {
      d = a(l);
      l = document.createElement("img");
      d.data("preview", {width:d.width(), height:d.height(), html:d.html()});
      b && (l.crossOrigin = b);
      l.src = c;
      l.style.cssText = 'display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"';
      d.html(l);
    });
  }, resetPreview:function() {
    this.$preview.each(function(b, c) {
      b = a(c);
      c = b.data("preview");
      b.css({width:c.width, height:c.height}).html(c.html).removeData("preview");
    });
  }, preview:function() {
    var b = this.image, c = this.canvas, d = this.cropBox, l = d.width, f = d.height, p = b.width, g = b.height, t = d.left - c.left - b.left, q = d.top - c.top - b.top;
    this.cropped && !this.disabled && (this.$clone2.css({width:p, height:g, transform:r(a.extend({translateX:-t, translateY:-q}, b))}), this.$preview.each(function(c, d) {
      c = a(d);
      var h = c.data("preview");
      d = h.width;
      var h = h.height, m = d, x = h, n = 1;
      l && (n = d / l, x = f * n);
      f && x > h && (n = h / f, m = l * n, x = h);
      c.css({width:m, height:x}).find("img").css({width:p * n, height:g * n, transform:r(a.extend({translateX:-t * n, translateY:-q * n}, b))});
    }));
  }});
  a.extend(S.prototype, {bind:function() {
    var b = this.options, c = this.$element, d = this.$cropper;
    if (a.isFunction(b.cropstart)) {
      c.on("cropstart", b.cropstart);
    }
    if (a.isFunction(b.cropmove)) {
      c.on("cropmove", b.cropmove);
    }
    if (a.isFunction(b.cropend)) {
      c.on("cropend", b.cropend);
    }
    if (a.isFunction(b.crop)) {
      c.on("crop", b.crop);
    }
    if (a.isFunction(b.zoom)) {
      c.on("zoom", b.zoom);
    }
    d.on(F, f(this.cropStart, this));
    if (b.zoomable && b.zoomOnWheel) {
      d.on("wheel mousewheel DOMMouseScroll", f(this.wheel, this));
    }
    if (b.toggleDragModeOnDblclick) {
      d.on("dblclick", f(this.dblclick, this));
    }
    a(document).on(J, this.onCropMove = f(this.cropMove, this)).on(N, this.onCropEnd = f(this.cropEnd, this));
    if (b.responsive) {
      a(window).on("resize", this.onResize = f(this.resize, this));
    }
  }, unbind:function() {
    var b = this.options, c = this.$element, d = this.$cropper;
    a.isFunction(b.cropstart) && c.off("cropstart", b.cropstart);
    a.isFunction(b.cropmove) && c.off("cropmove", b.cropmove);
    a.isFunction(b.cropend) && c.off("cropend", b.cropend);
    a.isFunction(b.crop) && c.off("crop", b.crop);
    a.isFunction(b.zoom) && c.off("zoom", b.zoom);
    d.off(F, this.cropStart);
    b.zoomable && b.zoomOnWheel && d.off("wheel mousewheel DOMMouseScroll", this.wheel);
    b.toggleDragModeOnDblclick && d.off("dblclick", this.dblclick);
    a(document).off(J, this.onCropMove).off(N, this.onCropEnd);
    b.responsive && a(window).off("resize", this.onResize);
  }});
  a.extend(S.prototype, {resize:function() {
    var b = this, c = b.options, d = b.$container, l = b.container, f = Number(c.minContainerWidth) || 200, p = Number(c.minContainerHeight) || 100;
    if (!b.disabled && l.width !== f && l.height !== p) {
      var g = d.width() / l.width;
      1 === g && d.height() === l.height || function() {
        var d = void 0, l = void 0;
        c.restore && (d = b.getCanvasData(), l = b.getCropBoxData());
        b.render();
        c.restore && (b.setCanvasData(a.each(d, function(a, b) {
          d[a] = b * g;
        })), b.setCropBoxData(a.each(l, function(a, b) {
          l[a] = b * g;
        })));
      }();
    }
  }, dblclick:function() {
    this.disabled || "none" === this.options.dragMode || this.setDragMode(this.$dragBox.hasClass("cropper-crop") ? "move" : "crop");
  }, wheel:function(a) {
    var b = this, c = a.originalEvent || a, d = Number(b.options.wheelZoomRatio) || 0.1;
    if (!b.disabled && (a.preventDefault(), !b.wheeling)) {
      b.wheeling = !0;
      setTimeout(function() {
        b.wheeling = !1;
      }, 50);
      var l = 1;
      c.deltaY ? l = 0 < c.deltaY ? 1 : -1 : c.wheelDelta ? l = -c.wheelDelta / 120 : c.detail && (l = 0 < c.detail ? 1 : -1);
      b.zoom(-l * d, a);
    }
  }, cropStart:function(b) {
    if (!this.disabled) {
      var c = this.options, d = this.pointers, l = b.originalEvent, f = void 0;
      l && l.changedTouches ? a.each(l.changedTouches, function(a, b) {
        d[b.identifier] = y(b);
      }) : d[l && l.pointerId || 0] = y(l || b);
      f = 1 < g(d).length && c.zoomable && c.zoomOnTouch ? "zoom" : a(b.target).data("action");
      U.test(f) && !this.trigger("cropstart", {originalEvent:l, action:f}).isDefaultPrevented() && (b.preventDefault(), this.action = f, this.cropping = !1, "crop" === f && (this.cropping = !0, this.$dragBox.addClass("cropper-modal")));
    }
  }, cropMove:function(b) {
    var c = this.action;
    if (!this.disabled && c) {
      var d = this.pointers, l = b.originalEvent;
      b.preventDefault();
      this.trigger("cropmove", {originalEvent:l, action:c}).isDefaultPrevented() || (l && l.changedTouches ? a.each(l.changedTouches, function(b, c) {
        a.extend(d[c.identifier], y(c, !0));
      }) : a.extend(d[l && l.pointerId || 0], y(l || b, !0)), this.change(b));
    }
  }, cropEnd:function(b) {
    if (!this.disabled) {
      var c = this.action, d = this.pointers, l = b.originalEvent;
      l && l.changedTouches ? a.each(l.changedTouches, function(a, b) {
        delete d[b.identifier];
      }) : delete d[l && l.pointerId || 0];
      c && (b.preventDefault(), g(d).length || (this.action = ""), this.cropping && (this.cropping = !1, this.$dragBox.toggleClass("cropper-modal", this.cropped && this.options.modal)), this.trigger("cropend", {originalEvent:l, action:c}));
    }
  }});
  a.extend(S.prototype, {change:function(b) {
    var c = this.options, d = this.pointers, l = d[g(d)[0]], f = this.container, p = this.canvas, t = this.cropBox, h = this.action, c = c.aspectRatio, m = t.width, x = t.height, n = t.left, w = t.top, z = n + m, y = w + x, u = 0, r = 0, A = f.width, E = f.height, v = !0, F = void 0;
    !c && b.shiftKey && (c = m && x ? m / x : 1);
    this.limited && (u = t.minLeft, r = t.minTop, A = u + Math.min(f.width, p.width, p.left + p.width), E = r + Math.min(f.height, p.height, p.top + p.height));
    var f = l.endX - l.startX, p = l.endY - l.startY;
    if (c) {
      var J = p * c;
      var O = f / c;
    }
    switch(h) {
      case "all":
        n += f;
        w += p;
        break;
      case "e":
        if (0 <= f && (z >= A || c && (w <= r || y >= E))) {
          v = !1;
          break;
        }
        m += f;
        c && (x = m / c, w -= O / 2);
        0 > m && (h = "w", m = 0);
        break;
      case "n":
        if (0 >= p && (w <= r || c && (n <= u || z >= A))) {
          v = !1;
          break;
        }
        x -= p;
        w += p;
        c && (m = x * c, n += J / 2);
        0 > x && (h = "s", x = 0);
        break;
      case "w":
        if (0 >= f && (n <= u || c && (w <= r || y >= E))) {
          v = !1;
          break;
        }
        m -= f;
        n += f;
        c && (x = m / c, w += O / 2);
        0 > m && (h = "e", m = 0);
        break;
      case "s":
        if (0 <= p && (y >= E || c && (n <= u || z >= A))) {
          v = !1;
          break;
        }
        x += p;
        c && (m = x * c, n -= J / 2);
        0 > x && (h = "n", x = 0);
        break;
      case "ne":
        if (c) {
          if (0 >= p && (w <= r || z >= A)) {
            v = !1;
            break;
          }
          x -= p;
          w += p;
          m = x * c;
        } else {
          0 <= f ? z < A ? m += f : 0 >= p && w <= r && (v = !1) : m += f, 0 >= p ? w > r && (x -= p, w += p) : (x -= p, w += p);
        }
        0 > m && 0 > x ? (h = "sw", m = x = 0) : 0 > m ? (h = "nw", m = 0) : 0 > x && (h = "se", x = 0);
        break;
      case "nw":
        if (c) {
          if (0 >= p && (w <= r || n <= u)) {
            v = !1;
            break;
          }
          x -= p;
          w += p;
          m = x * c;
          n += J;
        } else {
          0 >= f ? n > u ? (m -= f, n += f) : 0 >= p && w <= r && (v = !1) : (m -= f, n += f), 0 >= p ? w > r && (x -= p, w += p) : (x -= p, w += p);
        }
        0 > m && 0 > x ? (h = "se", m = x = 0) : 0 > m ? (h = "ne", m = 0) : 0 > x && (h = "sw", x = 0);
        break;
      case "sw":
        if (c) {
          if (0 >= f && (n <= u || y >= E)) {
            v = !1;
            break;
          }
          m -= f;
          n += f;
          x = m / c;
        } else {
          0 >= f ? n > u ? (m -= f, n += f) : 0 <= p && y >= E && (v = !1) : (m -= f, n += f), 0 <= p ? y < E && (x += p) : x += p;
        }
        0 > m && 0 > x ? (h = "ne", m = x = 0) : 0 > m ? (h = "se", m = 0) : 0 > x && (h = "nw", x = 0);
        break;
      case "se":
        if (c) {
          if (0 <= f && (z >= A || y >= E)) {
            v = !1;
            break;
          }
          m += f;
          x = m / c;
        } else {
          0 <= f ? z < A ? m += f : 0 <= p && y >= E && (v = !1) : m += f, 0 <= p ? y < E && (x += p) : x += p;
        }
        0 > m && 0 > x ? (h = "nw", m = x = 0) : 0 > m ? (h = "sw", m = 0) : 0 > x && (h = "ne", x = 0);
        break;
      case "move":
        this.move(f, p);
        v = !1;
        break;
      case "zoom":
        this.zoom(q(d), b.originalEvent);
        v = !1;
        break;
      case "crop":
        f && p ? (F = this.$cropper.offset(), n = l.startX - F.left, w = l.startY - F.top, m = t.minWidth, x = t.minHeight, 0 < f ? h = 0 < p ? "se" : "ne" : 0 > f && (n -= m, h = 0 < p ? "sw" : "nw"), 0 > p && (w -= x), this.cropped || (this.$cropBox.removeClass("cropper-hidden"), this.cropped = !0, this.limited && this.limitCropBox(!0, !0))) : v = !1;
    }
    v && (t.width = m, t.height = x, t.left = n, t.top = w, this.action = h, this.renderCropBox());
    a.each(d, function(a, b) {
      b.startX = b.endX;
      b.startY = b.endY;
    });
  }});
  a.extend(S.prototype, {crop:function() {
    this.ready && !this.disabled && (this.cropped || (this.cropped = !0, this.limitCropBox(!0, !0), this.options.modal && this.$dragBox.addClass("cropper-modal"), this.$cropBox.removeClass("cropper-hidden")), this.setCropBoxData(this.initialCropBox));
  }, reset:function() {
    this.ready && !this.disabled && (this.image = a.extend({}, this.initialImage), this.canvas = a.extend({}, this.initialCanvas), this.cropBox = a.extend({}, this.initialCropBox), this.renderCanvas(), this.cropped && this.renderCropBox());
  }, clear:function() {
    this.cropped && !this.disabled && (a.extend(this.cropBox, {left:0, top:0, width:0, height:0}), this.cropped = !1, this.renderCropBox(), this.limitCanvas(!0, !0), this.renderCanvas(), this.$dragBox.removeClass("cropper-modal"), this.$cropBox.addClass("cropper-hidden"));
  }, replace:function(a, b) {
    !this.disabled && a && (this.isImg && this.$element.attr("src", a), b ? (this.url = a, this.$clone.attr("src", a), this.ready && this.$preview.find("img").add(this.$clone2).attr("src", a)) : (this.isImg && (this.replaced = !0), this.options.data = null, this.load(a)));
  }, enable:function() {
    this.ready && (this.disabled = !1, this.$cropper.removeClass("cropper-disabled"));
  }, disable:function() {
    this.ready && (this.disabled = !0, this.$cropper.addClass("cropper-disabled"));
  }, destroy:function() {
    var a = this.$element;
    this.loaded ? (this.isImg && this.replaced && a.attr("src", this.originalUrl), this.unbuild(), a.removeClass("cropper-hidden")) : this.isImg ? a.off("load", this.start) : this.$clone && this.$clone.remove();
    a.removeData("cropper");
  }, move:function(a, b) {
    var d = this.canvas;
    this.moveTo(c(a) ? a : d.left + Number(a), c(b) ? b : d.top + Number(b));
  }, moveTo:function(a, d) {
    var l = this.canvas, f = !1;
    c(d) && (d = a);
    a = Number(a);
    d = Number(d);
    this.ready && !this.disabled && this.options.movable && (b(a) && (l.left = a, f = !0), b(d) && (l.top = d, f = !0), f && this.renderCanvas(!0));
  }, zoom:function(a, b) {
    var c = this.canvas;
    a = Number(a);
    this.zoomTo(c.width * (0 > a ? 1 / (1 - a) : 1 + a) / c.naturalWidth, b);
  }, zoomTo:function(a, b) {
    var c = this.options, d = this.pointers, f = this.canvas, p = f.width, t = f.height, q = f.naturalWidth, h = f.naturalHeight;
    a = Number(a);
    console.log("ratio:", a);
    0 <= a && this.ready && !this.disabled && c.zoomable && (c = q * a, a *= h, h = void 0, b && (h = b.originalEvent), this.trigger("zoom", {originalEvent:h, oldRatio:p / q, ratio:c / q}).isDefaultPrevented() || (h ? (q = this.$cropper.offset(), b = d && g(d).length ? l(d) : {pageX:b.pageX || h.pageX || 0, pageY:b.pageY || h.pageY || 0}, f.left -= (b.pageX - q.left - f.left) / p * (c - p), f.top -= (b.pageY - q.top - f.top) / t * (a - t)) : (f.left -= (c - p) / 2, f.top -= (a - t) / 2), f.width = 
    c, f.height = a, this.renderCanvas(!0)));
  }, rotate:function(a) {
    this.rotateTo((this.image.rotate || 0) + Number(a));
  }, rotateTo:function(a) {
    a = Number(a);
    b(a) && this.ready && !this.disabled && this.options.rotatable && (this.image.rotate = a % 360, this.rotated = !0, this.renderCanvas(!0));
  }, scale:function(a, d) {
    var l = this.image, f = !1;
    c(d) && (d = a);
    a = Number(a);
    d = Number(d);
    this.ready && !this.disabled && this.options.scalable && (b(a) && (l.scaleX = a, f = !0), b(d) && (l.scaleY = d, f = !0), f && this.renderImage(!0));
  }, scaleX:function(a) {
    var c = this.image.scaleY;
    this.scale(a, b(c) ? c : 1);
  }, scaleY:function(a) {
    var c = this.image.scaleX;
    this.scale(b(c) ? c : 1, a);
  }, getData:function(b) {
    var c = this.options, d = this.image, l = this.canvas, f = this.cropBox, p = void 0, g = void 0;
    this.ready && this.cropped ? (g = {x:f.left - l.left, y:f.top - l.top, width:f.width, height:f.height}, p = d.width / d.naturalWidth, a.each(g, function(a, c) {
      c /= p;
      g[a] = b ? Math.round(c) : c;
    })) : g = {x:0, y:0, width:0, height:0};
    c.rotatable && (g.rotate = d.rotate || 0);
    c.scalable && (g.scaleX = d.scaleX || 1, g.scaleY = d.scaleY || 1);
    return g;
  }, setData:function(c) {
    var d = this.options, l = this.image, f = this.canvas, p = {}, g = void 0, t = void 0;
    a.isFunction(c) && (c = c.call(this.element));
    this.ready && !this.disabled && a.isPlainObject(c) && (d.rotatable && b(c.rotate) && c.rotate !== l.rotate && (l.rotate = c.rotate, this.rotated = g = !0), d.scalable && (b(c.scaleX) && c.scaleX !== l.scaleX && (l.scaleX = c.scaleX, t = !0), b(c.scaleY) && c.scaleY !== l.scaleY && (l.scaleY = c.scaleY, t = !0)), g ? this.renderCanvas() : t && this.renderImage(), d = l.width / l.naturalWidth, b(c.x) && (p.left = c.x * d + f.left), b(c.y) && (p.top = c.y * d + f.top), b(c.width) && (p.width = c.width * 
    d), b(c.height) && (p.height = c.height * d), this.setCropBoxData(p));
  }, getContainerData:function() {
    return this.ready ? this.container : {};
  }, getImageData:function() {
    return this.loaded ? this.image : {};
  }, getCanvasData:function() {
    var b = this.canvas, c = {};
    this.ready && a.each("left top width height naturalWidth naturalHeight".split(" "), function(a, d) {
      c[d] = b[d];
    });
    return c;
  }, setCanvasData:function(c) {
    var d = this.canvas, l = d.aspectRatio;
    a.isFunction(c) && (c = c.call(this.$element));
    this.ready && !this.disabled && a.isPlainObject(c) && (b(c.left) && (d.left = c.left), b(c.top) && (d.top = c.top), b(c.width) ? (d.width = c.width, d.height = c.width / l) : b(c.height) && (d.height = c.height, d.width = c.height * l), this.renderCanvas(!0));
  }, getCropBoxData:function() {
    var a = this.cropBox;
    console.log("getCropBoxData(" + this.ready + "," + this.cropped + "):", a);
    return this.ready && this.cropped ? {left:a.left, top:a.top, width:a.width, height:a.height} : {};
  }, setCropBoxData:function(c) {
    var d = this.cropBox, l = this.options.aspectRatio, f = void 0, p = void 0;
    a.isFunction(c) && (c = c.call(this.$element));
    this.ready && this.cropped && !this.disabled && a.isPlainObject(c) && (b(c.left) && (d.left = c.left), b(c.top) && (d.top = c.top), b(c.width) && c.width !== d.width && (f = !0, d.width = c.width), b(c.height) && c.height !== d.height && (p = !0, d.height = c.height), l && (f ? d.height = d.width / l : p && (d.width = d.height * l)), this.renderCropBox());
  }, getCroppedCanvas:function(b) {
    if (!this.ready || !window.HTMLCanvasElement) {
      return null;
    }
    a.isPlainObject(b) || (b = {});
    if (!this.cropped) {
      return v(this.$clone[0], this.image, b);
    }
    var c = this.getData(), d = c.width, l = c.height, f = d / l, p = void 0, g = void 0, t = void 0;
    a.isPlainObject(b) && (p = b.width, g = b.height, p ? (g = p / f, t = p / d) : g && (p = g * f, t = g / l));
    var p = Math.floor(p || d), q = Math.floor(g || l), g = a("<canvas>")[0], f = g.getContext("2d");
    g.width = p;
    g.height = q;
    b.fillColor && (f.fillStyle = b.fillColor, f.fillRect(0, 0, p, q));
    var h = v(this.$clone[0], this.image, b), p = h.width, q = h.height, m = this.canvas, h = [h], x = c.x + m.naturalWidth * (Math.abs(c.scaleX || 1) - 1) / 2, c = c.y + m.naturalHeight * (Math.abs(c.scaleY || 1) - 1) / 2, n = m = void 0, w = void 0, z = void 0, y = void 0, u = void 0;
    x <= -d || x > p ? x = m = w = y = 0 : 0 >= x ? (w = -x, x = 0, m = y = Math.min(p, d + x)) : x <= p && (w = 0, m = y = Math.min(d, p - x));
    0 >= m || c <= -l || c > q ? c = n = z = u = 0 : 0 >= c ? (z = -c, c = 0, n = u = Math.min(q, l + c)) : c <= q && (z = 0, n = u = Math.min(l, q - c));
    h.push(Math.floor(x), Math.floor(c), Math.floor(m), Math.floor(n));
    t && (w *= t, z *= t, y *= t, u *= t);
    0 < y && 0 < u && h.push(Math.floor(w), Math.floor(z), Math.floor(y), Math.floor(u));
    f.imageSmoothingEnabled = !!b.imageSmoothingEnabled;
    b.imageSmoothingQuality && (f.imageSmoothingQuality = b.imageSmoothingQuality);
    f.drawImage.apply(f, W(h));
    return g;
  }, setAspectRatio:function(a) {
    var b = this.options;
    this.disabled || c(a) || (b.aspectRatio = Math.max(0, a) || NaN, this.ready && (this.initCropBox(), this.cropped && this.renderCropBox()));
  }, setDragMode:function(a) {
    var b = this.options;
    if (this.loaded && !this.disabled) {
      var c = "crop" === a;
      var d = b.movable && "move" === a;
      a = c || d ? a : "none";
      this.$dragBox.data("action", a).toggleClass("cropper-crop", c).toggleClass("cropper-move", d);
      b.cropBoxMovable || this.$face.data("action", a).toggleClass("cropper-crop", c).toggleClass("cropper-move", d);
    }
  }});
  var oa = a.fn.cropper;
  a.fn.cropper = function(b) {
    for (var c = arguments.length, d = Array(1 < c ? c - 1 : 0), l = 1; l < c; l++) {
      d[l - 1] = arguments[l];
    }
    var f = void 0;
    this.each(function(c, l) {
      c = a(l);
      var p = c.data("cropper");
      if (!p) {
        if (/destroy/.test(b)) {
          return;
        }
        p = a.extend({}, c.data(), a.isPlainObject(b) && b);
        c.data("cropper", p = new S(l, p));
      }
      "string" === typeof b && (l = p[b], a.isFunction(l) && (f = l.apply(p, d)));
    });
    return "undefined" !== typeof f ? f : this;
  };
  a.fn.cropper.Constructor = S;
  a.fn.cropper.setDefaults = S.setDefaults;
  a.fn.cropper.noConflict = function() {
    a.fn.cropper = oa;
    return this;
  };
});
Polymer({is:"simpl-cropper", properties:{mainTabId:{type:String, value:"0"}, options:{type:String}}, observers:[], behaviors:[TranslationsBehavior, StyleScopeBehavior], attached:function() {
  this.atta || (this.atta = !0, this.hasImage = !1, this.dataWidth = this.dataHeight = 0, this.formData = {}, this.image = $(this.$.image), this.image.cropper({viewMode:0, movable:!0, zoomable:!0, rotatable:!1, scalable:!0, responsive:!1, ready:function(a) {
    this.fire("cropper-ready", {event:a, fileId:this.currentFileId});
  }.bind(this), crop:function(a) {
    this.dataHeight = Math.round(a.height);
    this.dataWidth = Math.round(a.width);
  }.bind(this)}));
}, reset:function() {
  this.image.cropper("destroy");
  this.mainTabId = "0";
  this.formData = {};
}, getImage:function() {
  return this.image;
}, setCurrentFileId:function(a) {
  this.currentFileId = a;
}, gotoEditTab:function() {
  this.currentFileId && (this.mainTabId = "1");
}, replaceImage:function(a, b) {
  console.log("replaceImage:", a);
  this.mainTabId = "1";
  this.image.cropper("replace", b);
  this.currentFileId = a;
  this.hasImage = !0;
}, getDimension:function() {
  return "h:" + this.dataHeight + " w:" + this.dataWidth;
}, onUploadValueChanged:function(a) {
  a = this.$.uploadFormId.getData();
  console.log("onUploadValueChanged:", a.uploadId);
  this.mainTabId = "1";
  var b = Object.keys(a.uploadId)[0];
  this.image.cropper("replace", a.uploadId[b]);
  this.currentFileId = b;
  this.hasImage = !0;
}, mainTabSelected:function() {
}, onTapReset:function() {
  this.image.cropper("reset");
}, onTapZoomIn:function() {
  this.image.cropper("zoom", "0.1");
}, onTapZoomOut:function() {
  this.image.cropper("zoom", "-0.1");
}, onTapZoomTo:function() {
  this.image.cropper("zoomTo", "0.01");
}, onTapMoveLeft:function() {
  this.image.cropper("move", "-10", "0");
}, onTapMoveRight:function() {
  this.image.cropper("move", "10", "0");
}, onTapMoveUp:function() {
  this.image.cropper("move", "0", "-10");
}, onTapMoveDown:function() {
  this.image.cropper("move", "0", "10");
}, onTapMoveTo0:function() {
  this.image.cropper("moveTo", "0", "0");
}, onTapPreview:function() {
  this.mainTabId = "2";
  var a = this.image.cropper("getCroppedCanvas");
  $(this.$.preview).html(a);
}, ready:function() {
}});
Polymer({is:"simpl-dispatcher", properties:{selected:{observer:"selectedChanged", type:String}}, ready:function() {
  this.nodes = this._getMenuYaml();
}, getNodes:function() {
  return this.nodes;
}, attached:function() {
  this.async(function() {
    this.initListener();
  });
}, initListener:function() {
  for (var a = document.querySelectorAll("a.menuentry"), b = 0; b < a.length; b++) {
    $(a[b]).tap(this.tapListener.bind(this), !1);
  }
  if (this.selected) {
    var c = this;
    setTimeout(function() {
      c.selectMenuItem(c.selected);
    }, 300);
  }
}, tapListener:function(a) {
  var b = a.target;
  if (b.params) {
    $("#mainContainer").animate({scrollTop:$(b.params.id).offset().top}, 1000);
  } else {
    if (a = a.target.page) {
      this._selectedPage && this.fire("menu-selected", {isSelected:!1, page:this._selectedPage}), b = this._selectedPage, this._selectedPage = a, this.fire("menu-selected", {isSelected:!0, prevPage:b, page:this._selectedPage}), this.selected = a.hash;
    }
  }
}, getPageByHash:function(a) {
  return a && a.startsWith("!") ? null : (a = document.querySelector("#hash_" + a)) ? a.page : null;
}, getActivePage:function() {
  return this._selectedPage;
}, selectMenuItem:function(a) {
  a = this.getPageByHash(a);
  null != a && a.provider.setSelected(a);
}, selectedChanged:function(a) {
  if (null == this._selectedPage || this.selected != this._selectedPage.hash) {
    if (a = this.getPageByHash(this.selected)) {
      var b = this._selectedPage;
      this._selectedPage = a;
      this.fire("menu-selected", {isSelected:!0, prevPage:b, page:this._selectedPage});
    }
  }
  this.selectMenuItem(this.selected);
}, filterLocalLinks:function(a) {
  if (a.querySelectorAll) {
    a = a.querySelectorAll("a");
    for (var b = 0; b < a.length; b++) {
      var c = a[b], d = c.getAttribute("href");
      if (d && d.match(/^local.*/)) {
        if (d = this.getPageByHash(d.substring(6))) {
          c.removeAttribute("href"), c.page = d, c.element = c, $(c).tap(this.tapListener.bind(this), !1);
        }
      } else {
        d && d.startsWith("#_") && (c.removeAttribute("href"), c.params = {id:d}, $(c).tap(this.tapListener.bind(this), !1));
      }
    }
  }
}, _traverse:function(a, b, c) {
  for (var d = 0; d < b.length; d++) {
    var f = b[d];
    f.uri && f.uri.startsWith("structure:") && (f.children = this._loadMenu(f.uri.substring(10)), f.uri = null);
    var g = f.name || f.title;
    g && (f.name = tr(g));
    _.isEmpty(f.icon) && (f.icon = "av:web-asset");
    _.isEmpty(f.hash) && (f.hash = f.id);
    _.isEmpty(f.hash) && g && (f.hash = g.toLowerCase().replace(/[^a-z0-9_]/g, "-"));
    for (var g = base = f.hash, h = 0; this._hashExists(c, g);) {
      g = base + h, h++;
    }
    "noop" == f.uri && (f.uri = "");
    0 < h && f.uri && (f.hash = g, g = 0 <= f.uri.indexOf("?"), f.uri += (g ? "&" : "?") + "dummy=" + d);
    f.url = f.uri || f.url;
    f.url && -1 != f.url.indexOf("%l") && (f.url = f.url.replace("%l", simpl4Globals.get("lang")));
    f.disabled = !0 === f.disabled || !1 === f.enabled;
    f.disabled || (g = _.map(a, function(a) {
      return tr(a.title);
    }).join("/"), f.path = _.isEmpty(g) ? tr(f.name) : g + "/" + tr(f.name), f.children && 0 < f.children.length ? (c.push(f), g = clone(f), g.children = null, a.push(g), this._traverse(a, f.children, c), a.pop()) : c.push(f));
  }
}, _loadMenu:function(a) {
  var b = null, c = a, d = b = null;
  0 <= a.indexOf(":") && (b = a.split(":")[0], simpl4.util.MessageManager.installMessages(b), a = a.split(":")[1], d = window.location.origin + "/repo/" + b, c = d + "/" + a);
  a.endsWith(".json") || a.endsWith(".yaml") || (c += ".json");
  console.log("_loadMenu.url:", c);
  b = jQuery.ajax({url:c, async:!1, error:function() {
    console.log(a + ".json not found.");
  }, dataType:"json"}).responseText;
  c = a;
  a.endsWith(".json") || a.endsWith(".yaml") || (c += ".yaml");
  console.log("_loadMenu2:", c);
  _.isEmpty(b) && (b = jQuery.ajax({url:c, async:!1, error:function() {
    console.log(a + ".yaml not found.");
  }, dataType:"json"}).responseText);
  try {
    b = JSON.parse(b);
  } catch (f) {
    alert("Error.Read Menu:" + f);
    console.error("Error.Read Menu:", f);
    return;
  }
  if (null != d) {
    for (c = 0; c < b.length; c++) {
      this._insertBase(b[c], d);
    }
  }
  return b;
}, _insertBase:function(a, b) {
  a.uri && "" != a.uri && (a.uri = b + "/" + a.uri);
  if (a.children) {
    for (var c = 0; c < a.children.length; c++) {
      this._insertBase(a.children[c], b);
    }
  }
}, _hashExists:function(a, b) {
  for (var c = 0; c < a.length; c++) {
    if (a[c].hash == b) {
      return !0;
    }
  }
  return !1;
}, _getMenuYaml:function() {
  if (null == this.name) {
    return [];
  }
  var a = this._loadMenu(this.name);
  0 < a.length && (_.isEmpty(a[0].id) ? a[0].hash = "0" : a[0].hash = a[0].id);
  this._traverse([], a, []);
  return a;
}});
Polymer({is:"simpl-rpc", properties:{_allparams:{computed:"_collectAll(method,service,params)"}, service:{type:String, value:"simpl4"}, method:{type:String}, params:{type:Object, value:null}, noauto:{type:Boolean, value:!1}, response:{type:Object, notify:!0}}, _collectAll:function() {
  !0 !== this.noauto && this.async(function() {
    this.go();
  }, null, 30);
}, ready:function() {
  this.request_id = 1;
  this.xhr = document.createElement("simpl-xhr");
}, _receive:function(a, b) {
  this._isSuccess(b) ? (a = this._evalResponse(b), console.log("rpc.receive(" + this.method + "):", a), a.error ? this._error2(a.error, b) : this._processResponse(a.result, b)) : this._error(b);
  this._complete(b);
}, _isSuccess:function(a) {
  a = a.status || 0;
  return !a || 200 <= a && 300 > a;
}, _processResponse:function(a, b) {
  this.response = a;
  this.fire("response", {response:a, xhr:b});
}, _error:function(a) {
  this.fire("error", {response:a.status + ": " + a.responseText, xhr:a});
}, _error2:function(a, b) {
  this.fire("error", {error:a, xhr:b});
}, _complete:function(a) {
  this.fire("complete", {response:a.status, xhr:a});
}, _evalResponse:function(a) {
  a = a.responseText;
  try {
    return JSON.parse(a);
  } catch (b) {
    return a;
  }
}, _getId:function() {
  return this.request_id++;
}, go:function() {
  console.log("rpc.go:", this.method + "/", this.params);
  var a = simpl4.util.Merge.clone(this.params), b = this.xhrArgs || {};
  b.headers = this.headers || {};
  b.headers && "string" == typeof b.headers && (b.headers = JSON5.parse(b.headers));
  b.headers["Content-Type"] = "application/json";
  var c = simpl4.util.Rpc._getUserName(), d = simpl4.util.Rpc._getPassword();
  b.headers.Authorization = "Basic " + simpl4.util.Base64.encode(c + ":" + d);
  b.callback = this._receive.bind(this);
  b.url = simpl4.util.BaseManager.getBaseUrl() + "/rpc/xyz";
  b.method = "POST";
  c = {jsonrpc:"2.0", method:this.method, service:this.service, id:this._getId()};
  c.params = a && "string" == typeof a ? JSON5.parse(a) : a || {};
  if (c.params.namespace && "default" == c.params.namespace || "camelRoute" == this.service || this.service.startsWith("simpl4")) {
    c.params.namespace = simpl4.util.BaseManager.getNamespace();
  }
  b.body = JSON.stringify(c, null, 2);
  null == this.xhr && (this.xhr = document.createElement("simpl-xhr"));
  return this.xhr.request(b);
}});
Polymer({is:"font-awesome", properties:{icon:{type:String}}, observers:["iconChanged(icon)"], iconChanged:function() {
  Polymer.dom(this.$.fontId).classList.add("fa");
  Polymer.dom(this.$.fontId).classList.add("fa-" + this.icon);
}});
LobiboxBehavior = {notify:function(a, b, c, d) {
  var f = "vaadin-icons:info-circle-o";
  "success" == b ? f = "vaadin-icons:check-circle-o" : "warning" == b ? f = "vaadin-icons:warning" : "error" == b && (f = "vaadin-icons:exclamation");
  d = $.extend({}, {delay:c, icon:f, msg:a}, d);
  return Lobibox.notify(b, d);
}};
Polymer({is:"simpl-import", properties:{data:{type:Object}, type:{type:String}, method:{type:String}, url:{observer:"urlChanged", type:String}}, behaviors:[StyleScopeBehavior], observers:["dataChanged(data,method)"], urlChanged:function(a) {
  null != this.url && (a = "?", 0 < this.url.indexOf("?") && (a = "&"), a = this.url + a + "time=" + (new Date).getTime(), this.importHref(a, this.onResponse.bind(this)));
}, dataChanged:function(a) {
  a = this.data;
  "string" == typeof a && (a = JSON5.parse(a));
  var b = this.method;
  -1 == b.indexOf(".") && (b = simpl4.util.BaseManager.getNamespace() + "." + b);
  a = {service:"camel-routing", method:b, params:a};
  var b = simpl4.util.BaseManager.getPassword(), c = simpl4.util.BaseManager.getUser(), b = simpl4.util.Base64.encode(c + ":" + b);
  a = simpl4.util.BaseManager.getBaseUrl() + "/rpc/get?rpc=" + encodeURIComponent(JSON.stringify(a)) + "&credentials=" + b;
  this.importHref(a, this.onResponse.bind(this));
}, onResponse:function(a) {
  a = a.target.import.body;
  if (a.innerHTML && a.innerHTML.startsWith('{"error":')) {
    console.error("simpl-import.onResponse:", JSON5.parse(a.innerHTML).error.message);
  } else {
    for (var b = this.$.insertPoint; b.firstChild;) {
      Polymer.dom(b).removeChild(b.firstChild);
    }
    if (a.firstElementChild) {
      if (1 < a.childNodes.length) {
        for (var c = 0; c < a.childNodes.length; c++) {
          var d = a.childNodes[c];
          Polymer.dom(b).appendChild(d);
        }
      } else {
        Polymer.dom(b).appendChild(a.firstElementChild);
      }
    }
    document.querySelector("#dispatcherId").filterLocalLinks(b.firstElementChild);
    this.async(function() {
      this.setScope(b);
    }, 50);
  }
}, setScope:function(a) {
  var b = document.querySelector("simpl-dispatcher").getActivePage();
  null != b && (b = b.scope, this.isAsciidoc(this.url) && null == b && (b = "asciidoctor-default"), this.setStyleScope(a, b));
}, isAsciidoc:function(a) {
  return "adoc" == this.type ? !0 : null == a ? !1 : 0 < a.indexOf(".adoc");
}});
(function(a) {
  function b() {
    return "" === u.hash || "#" === u.hash;
  }
  function c(a, b) {
    for (var c = 0; c < a.length && !1 !== b(a[c], c, a); c += 1) {
    }
  }
  function d(a) {
    for (var b = [], c = 0, d = a.length; c < d; c++) {
      b = b.concat(a[c]);
    }
    return b;
  }
  function f(a, b, c) {
    if (!a.length) {
      return c();
    }
    var d = 0;
    (function t() {
      b(a[d], function(b) {
        b || !1 === b ? (c(b), c = function() {
        }) : (d += 1, d === a.length ? c() : t());
      });
    })();
  }
  function g(a, b, c) {
    c = a;
    for (var d in b) {
      if (b.hasOwnProperty(d) && (c = b[d](a), c !== a)) {
        break;
      }
    }
    return c === a ? "([._a-zA-Z0-9-%()]+)" : c;
  }
  function h(a, b) {
    for (var c, d = 0, f = ""; c = a.substr(d).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/);) {
      d = c.index + c[0].length, c[0] = c[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)"), f += a.substr(0, c.index) + c[0];
    }
    a = f + a.substr(d);
    if (c = a.match(/:([^\/]+)/ig)) {
      for (var f = c.length, t = 0; t < f; t++) {
        d = c[t], a = "::" === d.slice(0, 2) ? d.slice(1) : a.replace(d, g(d, b));
      }
    }
    return a;
  }
  function m(a, b, c, d) {
    var l = 0;
    c = (c || "(").toString();
    d = (d || ")").toString();
    var f;
    for (f = 0; f < a.length; f++) {
      var g = a[f];
      if (g.indexOf(c, l) > g.indexOf(d, l) || ~g.indexOf(c, l) && !~g.indexOf(d, l) || !~g.indexOf(c, l) && ~g.indexOf(d, l)) {
        var q = g.indexOf(c, l);
        l = g.indexOf(d, l);
        if (~q && !~l || !~q && ~l) {
          a = [a.slice(0, (f || 1) + 1).join(b)].concat(a.slice((f || 1) + 1));
        }
        l = (l > q ? l : q) + 1;
        f = 0;
      } else {
        l = 0;
      }
    }
    return a;
  }
  var u = document.location, r = {mode:"modern", hash:u.hash, history:!1, check:function() {
    var a = u.hash;
    a != this.hash && (this.hash = a, this.onHashChanged());
  }, fire:function() {
    if ("modern" === this.mode) {
      !0 === this.history ? window.onpopstate() : window.onhashchange();
    } else {
      this.onHashChanged();
    }
  }, init:function(a, b) {
    function c(a) {
      for (var b = 0, c = n.listeners.length; b < c; b++) {
        n.listeners[b](a);
      }
    }
    var d = this;
    this.history = b;
    n.listeners || (n.listeners = []);
    "onhashchange" in window && (void 0 === document.documentMode || 7 < document.documentMode) ? (!0 === this.history ? setTimeout(function() {
      window.onpopstate = c;
    }, 500) : window.onhashchange = c, this.mode = "modern") : (b = document.createElement("iframe"), b.id = "state-frame", b.style.display = "none", document.body.appendChild(b), this.writeFrame(""), "onpropertychange" in document && "attachEvent" in document && document.attachEvent("onpropertychange", function() {
      "location" === event.propertyName && d.check();
    }), window.setInterval(function() {
      d.check();
    }, 50), this.onHashChanged = c, this.mode = "legacy");
    n.listeners.push(a);
    return this.mode;
  }, destroy:function(a) {
    if (n && n.listeners) {
      for (var b = n.listeners, c = b.length - 1; 0 <= c; c--) {
        b[c] === a && b.splice(c, 1);
      }
    }
  }, setHash:function(a) {
    "legacy" === this.mode && this.writeFrame(a);
    !0 === this.history ? (window.history.pushState({}, document.title, a), this.fire()) : u.hash = "/" === a[0] ? a : "/" + a;
    return this;
  }, writeFrame:function(a) {
    var b = document.getElementById("state-frame"), b = b.contentDocument || b.contentWindow.document;
    b.open();
    b.write("<script>_hash = '" + a + "'; onload = parent.listener.syncHash;<script>");
    b.close();
  }, syncHash:function() {
    var a = this._hash;
    a != u.hash && (u.hash = a);
    return this;
  }, onHashChanged:function() {
  }}, n = a.Router = function(a) {
    if (!(this instanceof n)) {
      return new n(a);
    }
    this.params = {};
    this.routes = {};
    this.methods = ["on", "once", "after", "before"];
    this.scope = [];
    this._methods = {};
    this._insert = this.insert;
    this.insert = this.insertEx;
    this.historySupport = null != (null != window.history ? window.history.pushState : null);
    this.configure();
    this.mount(a || {});
  };
  n.prototype.init = function(a) {
    var c = this;
    this.handler = function(a) {
      a = a && a.newURL || window.location.hash;
      a = !0 === c.history ? c.getPath() : a.replace(/.*#/, "");
      c.dispatch("on", "/" === a.charAt(0) ? a : "/" + a);
    };
    r.init(this.handler, this.history);
    !1 === this.history ? b() && a ? u.hash = a : b() || c.dispatch("on", "/" + u.hash.replace(/^(#\/|#|\/)/, "")) : (this.convert_hash_in_init ? (a = b() && a ? a : b() ? null : u.hash.replace(/^#/, "")) && window.history.replaceState({}, document.title, a) : a = this.getPath(), (a || !0 === this.run_in_init) && this.handler());
    return this;
  };
  n.prototype.explode = function() {
    var a = !0 === this.history ? this.getPath() : u.hash;
    "/" === a.charAt(1) && (a = a.slice(1));
    return a.slice(1, a.length).split("/");
  };
  n.prototype.setRoute = function(a, b, c) {
    var d = this.explode();
    "number" === typeof a && "string" === typeof b ? d[a] = b : "string" === typeof c ? d.splice(a, b, s) : d = [a];
    r.setHash(d.join("/"));
    return d;
  };
  n.prototype.insertEx = function(a, b, c, d) {
    "once" === a && (a = "on", c = function(a) {
      var b = !1;
      return function() {
        if (!b) {
          return b = !0, a.apply(this, arguments);
        }
      };
    }(c));
    return this._insert(a, b, c, d);
  };
  n.prototype.getRoute = function(a) {
    return "number" === typeof a ? this.explode()[a] : "string" === typeof a ? this.explode().indexOf(a) : this.explode();
  };
  n.prototype.destroy = function() {
    r.destroy(this.handler);
    return this;
  };
  n.prototype.getPath = function() {
    var a = window.location.pathname;
    "/" !== a.substr(0, 1) && (a = "/" + a);
    return a;
  };
  var v = /\?.*/;
  n.prototype.configure = function(a) {
    a = a || {};
    for (var b = 0; b < this.methods.length; b++) {
      this._methods[this.methods[b]] = !0;
    }
    this.recurse = a.recurse || this.recurse || !1;
    this.async = a.async || !1;
    this.delimiter = a.delimiter || "/";
    this.strict = "undefined" === typeof a.strict ? !0 : a.strict;
    this.notfound = a.notfound;
    this.resource = a.resource;
    this.history = a.html5history && this.historySupport || !1;
    this.run_in_init = !0 === this.history && !1 !== a.run_handler_in_init;
    this.convert_hash_in_init = !0 === this.history && !1 !== a.convert_hash_in_init;
    this.every = {after:a.after || null, before:a.before || null, on:a.on || null};
    return this;
  };
  n.prototype.param = function(a, b) {
    ":" !== a[0] && (a = ":" + a);
    var c = new RegExp(a, "g");
    this.params[a] = function(a) {
      return a.replace(c, b.source || b);
    };
    return this;
  };
  n.prototype.on = n.prototype.route = function(a, b, c) {
    var d = this;
    c || "function" != typeof b || (c = b, b = a, a = "on");
    if (Array.isArray(b)) {
      return b.forEach(function(b) {
        d.on(a, b, c);
      });
    }
    b.source && (b = b.source.replace(/\\\//ig, "/"));
    if (Array.isArray(a)) {
      return a.forEach(function(a) {
        d.on(a.toLowerCase(), b, c);
      });
    }
    b = b.split(new RegExp(this.delimiter));
    b = m(b, this.delimiter);
    this.insert(a, this.scope.concat(b), c);
  };
  n.prototype.path = function(a, b) {
    var c = this.scope.length;
    a.source && (a = a.source.replace(/\\\//ig, "/"));
    a = a.split(new RegExp(this.delimiter));
    a = m(a, this.delimiter);
    this.scope = this.scope.concat(a);
    b.call(this, this);
    this.scope.splice(c, a.length);
  };
  n.prototype.dispatch = function(a, b, c) {
    function d() {
      f.last = g.after;
      f.invoke(f.runlist(g), f, c);
    }
    var f = this, g = this.traverse(a, b.replace(v, ""), this.routes, ""), q = this._invoked;
    this._invoked = !0;
    if (!g || 0 === g.length) {
      return this.last = [], "function" === typeof this.notfound && this.invoke([this.notfound], {method:a, path:b}, c), !1;
    }
    "forward" === this.recurse && (g = g.reverse());
    if ((a = this.every && this.every.after ? [this.every.after].concat(this.last) : [this.last]) && 0 < a.length && q) {
      return this.async ? this.invoke(a, this, d) : (this.invoke(a, this), d()), !0;
    }
    d();
    return !0;
  };
  n.prototype.invoke = function(a, b, d) {
    var l = this;
    if (this.async) {
      var p = function(c, d) {
        if (Array.isArray(c)) {
          return f(c, p, d);
        }
        "function" == typeof c && c.apply(b, (a.captures || []).concat(d));
      };
      f(a, p, function() {
        d && d.apply(b, arguments);
      });
    } else {
      p = function(d) {
        if (Array.isArray(d)) {
          return c(d, p);
        }
        if ("function" === typeof d) {
          return d.apply(b, a.captures || []);
        }
        "string" === typeof d && l.resource && l.resource[d].apply(b, a.captures || []);
      }, c(a, p);
    }
  };
  n.prototype.traverse = function(a, b, c, d, f) {
    function l(a) {
      function b(a) {
        for (var c = [], d = 0; d < a.length; d++) {
          c[d] = Array.isArray(a[d]) ? b(a[d]) : a[d];
        }
        return c;
      }
      function c(a) {
        for (var b = a.length - 1; 0 <= b; b--) {
          Array.isArray(a[b]) ? (c(a[b]), 0 === a[b].length && a.splice(b, 1)) : f(a[b]) || a.splice(b, 1);
        }
      }
      if (!f) {
        return a;
      }
      var d = b(a);
      d.matched = a.matched;
      d.captures = a.captures;
      d.after = a.after.filter(f);
      c(d);
      return d;
    }
    var p = [], g;
    if (b === this.delimiter && c[a]) {
      var q = [[c.before, c[a]].filter(Boolean)];
      q.after = [c.after].filter(Boolean);
      q.matched = !0;
      q.captures = [];
      return l(q);
    }
    for (var h in c) {
      if (c.hasOwnProperty(h) && (!this._methods[h] || this._methods[h] && "object" === typeof c[h] && !Array.isArray(c[h])) && (q = g = d + this.delimiter + h, this.strict || (g += "[" + this.delimiter + "]?"), g = b.match(new RegExp("^" + g)))) {
        if (g[0] && g[0] == b && c[h][a]) {
          return q = [[c[h].before, c[h][a]].filter(Boolean)], q.after = [c[h].after].filter(Boolean), q.matched = !0, q.captures = g.slice(1), this.recurse && c === this.routes && (q.push([c.before, c.on].filter(Boolean)), q.after = q.after.concat([c.after].filter(Boolean))), l(q);
        }
        q = this.traverse(a, b, c[h], q);
        if (q.matched) {
          return 0 < q.length && (p = p.concat(q)), this.recurse && (p.push([c[h].before, c[h].on].filter(Boolean)), q.after = q.after.concat([c[h].after].filter(Boolean)), c === this.routes && (p.push([c.before, c.on].filter(Boolean)), q.after = q.after.concat([c.after].filter(Boolean)))), p.matched = !0, p.captures = q.captures, p.after = q.after, l(p);
        }
      }
    }
    return !1;
  };
  n.prototype.insert = function(a, b, c, d) {
    b = b.filter(function(a) {
      return a && 0 < a.length;
    });
    d = d || this.routes;
    var l = b.shift();
    /\:|\*/.test(l) && !/\\d|\\w/.test(l) && (l = h(l, this.params));
    if (0 < b.length) {
      return d[l] = d[l] || {}, this.insert(a, b, c, d[l]);
    }
    if (l || b.length || d !== this.routes) {
      b = typeof d[l];
      var f = Array.isArray(d[l]);
      if (d[l] && !f && "object" == b) {
        switch(f = typeof d[l][a], f) {
          case "function":
            d[l][a] = [d[l][a], c];
            return;
          case "object":
            d[l][a].push(c);
            return;
          case "undefined":
            d[l][a] = c;
            return;
        }
      } else {
        if ("undefined" == b) {
          b = {};
          b[a] = c;
          d[l] = b;
          return;
        }
      }
      throw Error("Invalid route context: " + b);
    }
    f = typeof d[a];
    switch(f) {
      case "function":
        d[a] = [d[a], c];
        break;
      case "object":
        d[a].push(c);
        break;
      case "undefined":
        d[a] = c;
    }
  };
  n.prototype.extend = function(a) {
    function b(a) {
      c._methods[a] = !0;
      c[a] = function() {
        c.on.apply(c, (1 === arguments.length ? [a, ""] : [a]).concat(Array.prototype.slice.call(arguments)));
      };
    }
    var c = this, d = a.length, f;
    for (f = 0; f < d; f++) {
      b(a[f]);
    }
  };
  n.prototype.runlist = function(a) {
    var b = this.every && this.every.before ? [this.every.before].concat(d(a)) : d(a);
    this.every && this.every.on && b.push(this.every.on);
    b.captures = a.captures;
    b.source = a.source;
    return b;
  };
  n.prototype.mount = function(a, b) {
    if (a && "object" === typeof a && !Array.isArray(a)) {
      b = b || [];
      Array.isArray(b) || (b = b.split(this.delimiter));
      for (var c in a) {
        if (a.hasOwnProperty(c)) {
          var d = c, f = b.slice(0), g = d, h = d.split(this.delimiter), n = typeof a[d], u = "" === h[0] || !this._methods[h[0]], r = u ? "on" : g;
          u && (g = g.slice((g.match(new RegExp("^" + this.delimiter)) || [""])[0].length), h.shift());
          u && "object" === n && !Array.isArray(a[d]) ? (f = f.concat(h), this.mount(a[d], f)) : (u && (f = f.concat(g.split(this.delimiter)), f = m(f, this.delimiter)), this.insert(r, f, a[d]));
        }
      }
    }
  };
})("object" === typeof exports ? exports : window);
(function() {
  var a;
  Polymer({is:"flatiron-director", properties:{autoHash:{value:!1, type:Boolean}, route:{notify:!0, type:String}}, observers:["routeChanged(route)"], attached:function() {
    this.router.on(/(.*)/, function(a) {
      this.route = a;
    }.bind(this));
    var a = this.router.getRoute();
    window.startPage && (a = [window.startPage], window.startPage = null);
    this.route = a && "" != a ? a.join(this.router.delimiter) : "0";
  }, routeChanged:function() {
    this.autoHash && (window.location.hash = this.route);
    this.fire("director-route", this.route);
  }, changeRoute:function(a) {
    this.route = a;
  }, get router() {
    a || (a = new Router, a.init());
    return a;
  }});
})();
Polymer({is:"simpl-asciidoctor", properties:{data:{observer:"dataChanged", type:String}, scope:{type:String}, css:{type:String}}, behaviors:[CSSImportBehavior, StyleScopeBehavior], attached:function(a) {
}, dataChanged:function(a) {
  a = document.querySelector("simpl-dispatcher").getActivePage();
  a = this.scope || a.scope || "asciidoctor-default";
  this.selectedPage = {scope:a};
  this.css && this.importSheet(this.css);
  var b = this.textContent;
  var c = "object" != typeof this.data || Array.isArray(this.data) ? {data:this.data} : this.data;
  b = simpl4.util.Rpc.rpcSync("camelRoute:asciidoctor", {namespace:"global", data:c, template:b});
  this.$.asciidoctorId.innerHTML = b;
  this.setStyleScope(this.$.asciidoctorId, a);
}});
Polymer({is:"simpl-lightbox", behaviors:[Polymer.IronOverlayBehavior], properties:{withBackdrop:{type:Boolean, value:!0}, usePdfjs:{type:Boolean, value:!1}, items:{type:Array, value:function() {
  return [];
}, observer:"_updateItems"}, selectedItem:{type:Object, value:function() {
  return {};
}, notify:!0, readOnly:!0, observer:"_onSelect"}, selectedIndex:{type:Number, value:0, notify:!0, observer:"_onIndexChanged"}, autoplayVideos:{type:Boolean, value:!1}}, listeners:{"iron-overlay-opened":"_onOpen", "iron-overlay-closed":"_onClose", "iron-overlay-cancelled":"_onClose", keyup:"_onKeyup"}, _currentMediaElement:null, showControls:function() {
  return !1 === this.usePdfjs;
}, selectPrevious:function() {
  0 === this.selectedIndex ? this.selectedIndex = this.items.length - 1 : this.selectedIndex--;
}, selectNext:function() {
  this.selectedIndex === this.items.length - 1 ? this.selectedIndex = 0 : this.selectedIndex++;
}, useStrategy:function(a, b) {
  this._strategies[a] = b;
}, _strategies:{pdf:"_displayPdf", pdfRPC:"_displayPdfRPC", image:"_displayImage", html:"_displayHtml", video:"_displayVideo"}, _replaceMedia:function(a) {
  this.$.viewer.innerHTML = "";
  Polymer.dom(this.$.viewer).appendChild(a);
  this._currentMediaElement = a;
}, _displayPdfRPC:function(a) {
  this.$.viewer.innerHTML = "";
  var b = this, c = simpl4.util.BaseManager.getBaseUrl() + "/rpc/xyz", d = new XMLHttpRequest;
  d.open("POST", c, !0);
  d.responseType = "blob";
  var c = simpl4.util.Rpc._getUserName(), f = simpl4.util.Rpc._getPassword();
  d.setRequestHeader("Authorization", "Basic " + simpl4.util.Base64.encode(c + ":" + f));
  d.setRequestHeader("Content-type", "application/json; charset=utf-8");
  a.wait && this.$.toastId.show(a.wait, "success", "100000");
  d.onload = function(a) {
    if (200 == this.status) {
      a = new Blob([this.response], {type:"application/pdf"});
      if (window.navigator.msSaveBlob) {
        window.navigator.msSaveBlob(a, "download.pdf"), b.close();
      } else {
        var c = URL.createObjectURL(a);
        b.usePdfjs ? (a = document.createElement("pdf-element"), a.src = c, a.height = "600", a.downloadable = !0, a.style = "position:relative;") : (a = document.createElement("simpl-pdfviewer"), a.file = c, a.height = "100%", a.style = "position:absolute;");
        b._replaceMedia(a);
      }
      b.$.toastId.close();
    } else {
      console.error("Error download:", this.status), this.$.toastId.show("Error download:" + this.status, "error", "100000");
    }
    d.onerror = function(a) {
      console.log("Failed:", a);
      this.$.toastId.show("Failed:" + a, "error", "100000");
    };
  };
  console.log("send:", a.rpc);
  d.send(JSON.stringify(a.rpc));
}, _displayPdf:function(a) {
  var b = document.createElement("simpl-pdfviewer");
  b.file = a.src;
  b.height = "100%";
  b.style = "position:absolute;";
  this._replaceMedia(b);
}, _displayImage:function(a) {
  var b = document.createElement("iron-image");
  b.src = a.src;
  b.sizing = "contain";
  b.preload = !0;
  b.fade = !0;
  this._replaceMedia(b);
}, _displayHtml:function(a) {
  var b = document.createElement("iframe");
  b.src = a.src;
  b.fade = !0;
  this._replaceMedia(b);
}, _displayVideo:function(a) {
  var b = document.createElement("paper-video");
  b.poster = a.thumbnail;
  b.controls = !0;
  b.src = a.src;
  this._replaceMedia(b);
  this._maybeAutoplayVideo(a);
}, _updateItems:function() {
  if (this.items.length) {
    var a = this.selectedIndex;
    this.selectedIndex = 0;
    0 === a && this._setSelectedItem(this.items[0]);
  }
}, _onIndexChanged:function(a) {
  this.items.length && this._setSelectedItem(this.items[a]);
}, _onSelect:function(a) {
  this.debounce("doSelect", function() {
    this.__onSelect(a);
  }, 300);
}, __onSelect:function(a) {
  console.log("_onSelect");
  if (a) {
    var b = this._strategies[a.type];
    if (b) {
      if ("function" === typeof b) {
        b.call(this, a);
      } else {
        this[b](a);
      }
      this.$.viewer.setAttribute("media-type", a.type);
    }
  }
}, _maybeAutoplayVideo:function(a) {
  "video" === a.type && (this._currentMediaElement.$.container.focus(), (a.autoplay || this.autoplayVideos) && null !== this._currentMediaElement && this.opened && this._currentMediaElement.play());
}, _toggleVideo:function() {
  if ("video" === this.selectedItem.type) {
    this._currentMediaElement[this._currentMediaElement.paused ? "play" : "pause"]();
  }
}, _hideControls:function(a) {
  return 1 >= a.length;
}, _onOpen:function() {
  this._maybeAutoplayVideo(this.selectedItem);
}, _onClose:function() {
  "video" === this.selectedItem.type && this._currentMediaElement.pause();
}, _onKeyup:function(a) {
  switch(a.which || a.keyCode) {
    case 39:
      this.selectNext();
      break;
    case 37:
      this.selectPrevious();
  }
}});
Polymer({is:"simpl-pdfviewer", properties:{file:{type:String, value:void 0, reflectToAttribute:!0}, notSupportedMessage:{type:String, value:"It appears your Web browser is not configured to display PDF files. No worries, just"}, notSupportedLinkMessage:{type:String, value:"click here to download the PDF file."}, height:{type:String, value:"400px"}, width:{type:String, value:"100%"}, card:{type:Boolean, value:!1}, downloadLabel:{type:String, value:"Download"}, elevation:{type:String, value:"1"}}, 
clear:function() {
  this.file = void 0;
}, _download:function() {
  window.location = this.file;
}});
Polymer({is:"simpl-elements-docviewer", properties:{}, observers:[], ready:function() {
}});
Polymer({is:"simpl-panel", properties:{heading:{type:String, value:""}, collapsable:{value:!1, type:Boolean}, showHeader:{value:!0, type:Boolean}, collapsed:{value:!1, observer:"collapsedChanged", type:Boolean}, collapsecolor:{value:"white", type:String}, height:{value:null, observer:"heightChanged", type:String}}, getIconFill:function() {
  return "fill:" + this.collapsecolor;
}, attached:function() {
}, ready:function() {
  this.height || this.style.height ? (this.style.height && !this.height && (this.height = parseInt(this.style.height, 10)), this.style.height = !0 === this.collapsable && !0 === this.collapsed ? parseInt(this.height, 10) + "px" : "30px", this.$.panelContent.style["-ms-flex-preferred-size"] = parseInt(this.height, 10) - 50 + "px") : this.$.panelContent.style["-ms-flex"] = "none";
  !0 === this.collapsable && (this.$.collapsable.style.display = "block", this.$.panelContent.style.display = !0 === this.collapsed ? "none" : "block", this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand"));
  this.$.heading.style.display = !0 === this.showHeader ? "flex" : "none";
  var a = this;
  this.$.heading.addEventListener("click", function() {
    a.toggleCollapse();
  }, !1);
}, heightChanged:function(a, b) {
  this.height || this.style.height ? (this.style.height && !this.height && (this.height = parseInt(this.style.height, 10)), this.style.height = !0 === this.collapsable && !0 === this.collapsed ? parseInt(this.height, 10) + "px" : "30px", this.$.panelContent.style["-ms-flex-preferred-size"] = parseInt(this.height, 10) - 50 + "px") : this.$.panelContent.style["-ms-flex"] = "none";
}, close:function() {
  this.collapsed = !0;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, open:function() {
  this.collapsed = !1;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, toggleCollapse:function() {
  this.collapsed = !this.collapsed;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, collapsedChanged:function() {
  !0 === this.collapsable && (!0 === this.collapsed ? (this.$.panelContent.style.display = "none", this.style.height = "30px", this.fire("close-action", {data:this.data})) : (this.height && 30 != this.height ? (this.style.height = parseInt(this.height, 10) + "px", this.$.panelContent.style.height = parseInt(this.height, 10) - 40 + "px") : this.style.height = null, this.$.panelContent.style["-ms-flex"] = "none", this.$.panelContent.style.display = "block", this.fire("open-action", {data:this.data})));
}});
(function(a, b) {
  "function" === typeof define && define.amd ? define(["jquery", "microevent"], b) : b(a.jQuery, a.MicroEvent);
})(this, function(a, b) {
  function c(b, c) {
    b && (a.isArray(b) ? a.each(b, function(b, d) {
      a.isPlainObject(d) ? a.each(d, function(a, b) {
        c(a, b);
        return !1;
      }) : c(b, d);
    }) : a.each(b, function(a, b) {
      c(a, b);
    }));
  }
  function d(a, b) {
    b = Array.prototype.slice.call(arguments);
    return a.replace(/{([0-9]+)}/g, function(a, c) {
      return b[parseInt(c) + 1];
    });
  }
  function f(a, b) {
    switch(b) {
      case "integer":
        return parseInt(a);
      case "double":
        return parseFloat(a);
      default:
        return a;
    }
  }
  function g(a) {
    return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  function h(a, b) {
    var c = b.closest(".rule-container");
    c.length ? a.detach().insertAfter(c) : (c = b.closest(".rules-group-header"), c.length ? (c = b.closest(".rules-group-container"), a.detach().prependTo(c.find(".rules-list").eq(0))) : (c = b.closest(".rules-group-container"), c.length && a.detach().appendTo(c.find(".rules-list").eq(0))));
  }
  function f(a, b) {
    switch(b) {
      case "integer":
        return parseInt(a);
      case "double":
        return parseFloat(a);
      default:
        return a;
    }
  }
  function m(a) {
    return "string" !== typeof a ? a : a.replace(/[\0\n\r\b\\\'\"]/g, function(a) {
      switch(a) {
        case "\x00":
          return "\\0";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "\b":
          return "\\b";
        default:
          return "\\" + a;
      }
    }).replace(/\t/g, "\\t").replace(/\x1a/g, "\\Z");
  }
  function u(a, b) {
    b ? jQuery(a).css("display", "") : jQuery(a).css("display", "none");
  }
  var r = "string integer double date time datetime".split(" "), n = ["text", "radio", "checkbox", "select"], v = function(a, b) {
    console.log("QueryBuilder.construct");
    this.$el = a;
    this.init(b);
  };
  b.mixin(v);
  v.DEFAULTS = {filters:[], plugins:null, onValidationError:null, onAfterAddGroup:null, onAfterAddRule:null, onAfterCreateRuleInput:null, onAfterChangeOperator:null, display_errors:!0, allow_groups:-1, conditions:["AND", "OR"], default_condition:"AND", default_rule_flags:{filter_readonly:!1, operator_readonly:!1, value_readonly:!1, no_delete:!1}, template:{group:null, rule:null}, lang:{add_rule:"Add rule", add_group:"Add group", delete_rule:"Delete", delete_group:"Delete", condition_and:"AND", condition_or:"OR", 
  filter_select_placeholder:"------", operators:{equal:"equal", not_equal:"not equal", "in":"in", not_in:"not in", less:"less", less_or_equal:"less or equal", greater:"greater", greater_or_equal:"greater or equal", between:"between", begins_with:"begins with", not_begins_with:"doesn't begin with", contains:"contains", not_contains:"doesn't contain", ends_with:"ends with", not_ends_with:"doesn't end with", is_empty:"is empty", is_not_empty:"is not empty", is_null:"is null", is_not_null:"is not null"}, 
  errors:{no_filter:"No filter selected", empty_group:"The group is empty", radio_empty:"No value selected", checkbox_empty:"No value selected", select_empty:"No value selected", string_empty:"Empty value", string_exceed_min_length:"Must contain at least {0} characters", string_exceed_max_length:"Must not contain more than {0} characters", string_invalid_format:"Invalid format ({0})", number_nan:"Not a number", number_not_integer:"Not an integer", number_not_double:"Not a real number", number_exceed_min:"Must be greater than {0}", 
  number_exceed_max:"Must be lower than {0}", number_wrong_step:"Must be a multiple of {0}", datetime_invalid:"Invalid date format ({0})", datetime_exceed_min:"Must be after {0}", datetime_exceed_max:"Must be before {0}"}}, operators:[{type:"equal", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"not_equal", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"in", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"not_in", accept_values:1, apply_to:["string", 
  "number", "datetime"]}, {type:"less", accept_values:1, apply_to:["number", "datetime"]}, {type:"less_or_equal", accept_values:1, apply_to:["number", "datetime"]}, {type:"greater", accept_values:1, apply_to:["number", "datetime"]}, {type:"greater_or_equal", accept_values:1, apply_to:["number", "datetime"]}, {type:"between", accept_values:2, apply_to:["number", "datetime"]}, {type:"begins_with", accept_values:1, apply_to:["string"]}, {type:"not_begins_with", accept_values:1, apply_to:["string"]}, 
  {type:"contains", accept_values:1, apply_to:["string"]}, {type:"not_contains", accept_values:1, apply_to:["string"]}, {type:"ends_with", accept_values:1, apply_to:["string"]}, {type:"not_ends_with", accept_values:1, apply_to:["string"]}, {type:"is_empty", accept_values:0, apply_to:["string"]}, {type:"is_not_empty", accept_values:0, apply_to:["string"]}, {type:"is_null", accept_values:0, apply_to:["string", "number", "datetime"]}, {type:"is_not_null", accept_values:0, apply_to:["string", "number", 
  "datetime"]}], icons:{add_group:"glyphicon glyphicon-plus-sign", add_rule:"glyphicon glyphicon-plus", remove_group:"glyphicon glyphicon-remove", remove_rule:"glyphicon glyphicon-remove", error:"glyphicon glyphicon-warning-sign"}};
  v.plugins = {};
  v.define = function(a, b) {
    v.plugins[a] = b;
  };
  v.extend = function(b) {
    a.extend(v.prototype, b);
  };
  v.prototype.initPlugins = function() {
    if (this.settings.plugins) {
      var b = this, c = {};
      a.isArray(this.settings.plugins) ? a.each(this.settings.plugins, function(a, b) {
        c[b] = {};
      }) : a.each(this.settings.plugins, function(a, b) {
        c[a] = b;
      });
      a.each(c, function(c, d) {
        c in v.plugins ? v.plugins[c].call(b, d) : a.error('Unable to find plugin "' + c + '"');
      });
    }
  };
  v.prototype.init = function(b) {
    this.settings = a.extendext(!0, "replace", {}, v.DEFAULTS, b);
    this.status = {group_id:0, rule_id:0, generatedId:!1, has_optgroup:!1};
    !1 === this.settings.allow_groups ? this.settings.allow_groups = 0 : !0 === this.settings.allow_groups && (this.settings.allow_groups = -1);
    this.filters = this.settings.filters;
    this.lang = this.settings.lang;
    this.icons = this.settings.icons;
    this.operators = this.settings.operators;
    this.template = this.settings.template;
    null === this.template.group && (this.template.group = this.getGroupTemplate);
    null === this.template.rule && (this.template.rule = this.getRuleTemplate);
    this.$el.attr("id") || (this.$el.attr("id", "qb_" + Math.floor(99999 * Math.random())), this.status.generatedId = !0);
    this.$el_id = this.$el.attr("id");
    this.$el.addClass("query-builder");
    (!this.filters || 1 > this.filters.length) && a.error("Missing filters list");
    this.checkFilters();
    this.bindEvents();
    this.initPlugins();
    this.trigger("afterInit");
    b.rules ? this.setRules(b.rules) : this.addGroup(this.$el);
  };
  v.prototype.destroy = function() {
    this.trigger("beforeDestroy");
    this.status.generatedId && this.$el.removeAttr("id");
    this.$el.empty().off("click.queryBuilder change.queryBuilder").removeClass("query-builder").removeData("queryBuilder");
  };
  v.prototype.reset = function() {
    this.status.group_id = 1;
    this.status.rule_id = 0;
    this.$el.find(">.rules-group-container>.rules-group-body>.rules-list").empty();
    this.addRule(this.$el.find(">.rules-group-container"));
    this.trigger("afterReset");
  };
  v.prototype.clear = function() {
    this.status.group_id = 0;
    this.status.rule_id = 0;
    this.$el.empty();
    this.trigger("afterClear");
  };
  v.prototype.getRules = function() {
    this.clearErrors();
    var b = this, c = function l(c) {
      var d = {}, f = c.find(">.rules-group-body>.rules-list>*");
      d.condition = b.getGroupCondition(c);
      d.rules = [];
      for (var p = 0, g = f.length; p < g; p++) {
        var h = f.eq(p);
        if (h.hasClass("rule-container")) {
          var m = b.getRuleFilter(h);
          if ("-1" == m) {
            return b.triggerValidationError(["no_filter"], h, null, null, null), {};
          }
          var m = b.getFilterById(m), n = b.getOperatorByType(b.getRuleOperator(h)), u = null;
          if (0 !== n.accept_values) {
            var u = b.getRuleValue(h, m, n), r = b.validateValue(h, u, m, n);
            if (!0 !== r) {
              return b.triggerValidationError(r, h, u, m, n), {};
            }
          }
          h = {id:m.id, field:m.field, type:m.type, input:m.input, operator:n.type, value:u};
        } else {
          if (h = l(h), a.isEmptyObject(h)) {
            return {};
          }
        }
        d.rules.push(h);
      }
      return 0 === d.rules.length ? (b.triggerValidationError(["empty_group"], c, null, null, null), {}) : d;
    }(this.$el.find(">.rules-group-container"));
    return this.change("getRules", c);
  };
  v.prototype.setRules = function(b) {
    this.clear();
    b && b.rules && 0 !== b.rules.length || a.error("Incorrect data object passed");
    b = this.change("setRules", b);
    var c = this;
    (function l(b, f) {
      var p = c.addGroup(f, !1);
      f = p.find(">.rules-group-header input[name$=_cond]");
      void 0 === b.condition && (b.condition = c.settings.default_condition);
      for (var g = 0, t = c.settings.conditions.length; g < t; g++) {
        var h = c.settings.conditions[g];
        f.filter("[value=" + h + "]").prop("checked", b.condition.toUpperCase() == h.toUpperCase());
      }
      f.trigger("change");
      a.each(b.rules, function(b, f) {
        if (f.rules && 0 < f.rules.length) {
          -1 !== c.settings.allow_groups && c.settings.allow_groups < p.data("queryBuilder").level ? (c.reset(), a.error(d("No more than {0} groups are allowed", c.settings.allow_groups))) : l(f, p);
        } else {
          void 0 === f.id && a.error("Missing rule field id");
          void 0 === f.value && (f.value = "");
          void 0 === f.operator && (f.operator = "equal");
          b = c.addRule(p);
          var g = c.getFilterById(f.id), t = c.getOperatorByType(f.operator);
          b.find(".rule-filter-container select[name$=_filter]").val(f.id).trigger("change");
          b.find(".rule-operator-container select[name$=_operator]").val(f.operator).trigger("change");
          0 !== t.accept_values && c.setRuleValue(b, f.value, g, t);
          c.applyRuleFlags(b, f);
          g.onAfterSetValue && g.onAfterSetValue.call(c, b, f.value, g, t);
        }
      });
    })(b, this.$el);
  };
  v.prototype.checkFilters = function() {
    var b = [], c = this;
    a.each(this.filters, function(d, l) {
      l.id || a.error("Missing filter id: " + d);
      -1 != b.indexOf(l.id) && a.error("Filter already defined: " + l.id);
      b.push(l.id);
      l.type || a.error("Missing filter type: " + l.id);
      -1 == r.indexOf(l.type) && a.error("Invalid type: " + l.type);
      l.input ? "function" != typeof l.input && -1 == n.indexOf(l.input) && a.error("Invalid input: " + l.input) : l.input = "text";
      l.field || (l.field = l.id);
      l.label || (l.label = l.field);
      c.status.has_optgroup |= !!l.optgroup;
      l.optgroup || (l.optgroup = null);
      switch(l.type) {
        case "string":
          l.internalType = "string";
          break;
        case "integer":
        case "double":
          l.internalType = "number";
          break;
        case "date":
        case "time":
        case "datetime":
          l.internalType = "datetime";
      }
      switch(l.input) {
        case "radio":
        case "checkbox":
          (!l.values || 1 > l.values.length) && a.error("Missing values for filter: " + l.id);
      }
    });
    if (this.status.has_optgroup) {
      var d = [], l = [];
      a.each(this.filters, function(a, b) {
        b.optgroup ? (a = d.lastIndexOf(b.optgroup), -1 == a && (a = d.length)) : a = d.length;
        d.splice(a, 0, b.optgroup);
        l.splice(a, 0, b);
      });
      this.filters = l;
    }
    this.trigger("afterCheckFilters");
  };
  v.prototype.bindEvents = function() {
    var b = this;
    this.$el.on("change.queryBuilder", ".rules-group-header input[name$=_cond]", function() {
      var b = a(this);
      b.is(":checked") && (b.parent().addClass("active"), b.parent().siblings().removeClass("active"));
    });
    this.$el.on("change.queryBuilder", ".rule-filter-container select[name$=_filter]", function() {
      var c = a(this), d = c.closest(".rule-container");
      b.updateRuleFilter(d, c.val());
    });
    this.$el.on("change.queryBuilder", ".rule-operator-container select[name$=_operator]", function() {
      var c = a(this), d = c.closest(".rule-container");
      b.updateRuleOperator(d, c.val());
    });
    this.$el.on("click.queryBuilder", "[data-add=rule]", function() {
      var c = a(this).closest(".rules-group-container");
      b.addRule(c);
    });
    if (0 !== this.settings.allow_groups) {
      this.$el.on("click.queryBuilder", "[data-add=group]", function() {
        var c = a(this).closest(".rules-group-container");
        b.addGroup(c);
      });
    }
    this.$el.on("click.queryBuilder", "[data-delete=rule]", function() {
      a(this).closest(".rule-container").remove();
    });
    this.$el.on("click.queryBuilder", "[data-delete=group]", function() {
      var c = a(this).closest(".rules-group-container");
      b.deleteGroup(c);
    });
  };
  v.prototype.addGroup = function(b, c) {
    var d = this.nextGroupId(), l = (b.data("queryBuilder") || {}).level || 0;
    b = 0 === l ? b : b.find(">.rules-group-body>.rules-list");
    d = a(this.template.group.call(this, d, ++l));
    d.data("queryBuilder", {level:l});
    b.append(d);
    this.settings.onAfterAddGroup && this.settings.onAfterAddGroup.call(this, d);
    this.trigger("afterAddGroup", d);
    void 0 !== c && !0 !== c || this.addRule(d);
    return d;
  };
  v.prototype.deleteGroup = function(b) {
    if (b[0].id != this.$el_id + "_group_0") {
      this.trigger("beforeDeleteGroup", b);
      var c = this, d = !1;
      b.find(">.rules-group-body>.rules-list>*").each(function() {
        var b = a(this);
        b.hasClass("rule-container") ? b.data("queryBuilder").flags.no_delete ? d = !0 : b.remove() : d |= c.deleteGroup(b);
      });
      d || b.remove();
      return d;
    }
  };
  v.prototype.addRule = function(b) {
    var c = this.nextRuleId();
    b = b.find(">.rules-group-body>.rules-list");
    var d = a(this.template.rule.call(this, c)), c = a(this.getRuleFilterSelect(c));
    d.data("queryBuilder", {flags:{}});
    b.append(d);
    d.find(".rule-filter-container").append(c);
    this.settings.onAfterAddRule && this.settings.onAfterAddRule.call(this, d);
    this.trigger("afterAddRule", d);
    return d;
  };
  v.prototype.createRuleOperators = function(b, c) {
    var d = b.find(".rule-operator-container").empty();
    if (null !== c) {
      var l = this.getOperators(c), f = a(this.getRuleOperatorSelect(b.attr("id"), l));
      d.html(f);
      b.data("queryBuilder").operator = l[0];
      this.trigger("afterCreateRuleOperators", b, c, l);
    }
  };
  v.prototype.createRuleInput = function(b, c) {
    var d = b.find(".rule-value-container").empty();
    if (null !== c) {
      var l = this.getOperatorByType(this.getRuleOperator(b));
      if (0 !== l.accept_values) {
        for (var f = a(), g = 0; g < l.accept_values; g++) {
          var h = a(this.getRuleInput(b.attr("id"), c, g));
          0 < g && d.append(" , ");
          d.append(h);
          f = f.add(h);
        }
        u(d, !0);
        c.onAfterCreateRuleInput && c.onAfterCreateRuleInput.call(this, b, c);
        if (c.plugin) {
          f[c.plugin](c.plugin_config || {});
        }
        this.trigger("afterCreateRuleInput", b, c, l);
      }
    }
  };
  v.prototype.updateRuleFilter = function(a, b) {
    b = "-1" != b ? this.getFilterById(b) : null;
    this.createRuleOperators(a, b);
    this.createRuleInput(a, b);
    a.data("queryBuilder").filter = b;
  };
  v.prototype.updateRuleOperator = function(a, b) {
    var c = a.find(".rule-value-container"), d = this.getFilterById(this.getRuleFilter(a));
    b = this.getOperatorByType(b);
    if (0 === b.accept_values) {
      u(c, !1);
    } else {
      u(c, !0);
      var f = a.data("queryBuilder").operator;
      (c.is(":empty") || b.accept_values != f.accept_values) && this.createRuleInput(a, d);
    }
    a.data("queryBuilder").operator = b;
    d.onAfterChangeOperator && d.onAfterChangeOperator.call(this, a, d, b);
    this.trigger("afterChangeOperator", a, d, b);
  };
  v.prototype.validateValue = function(a, b, c, d) {
    var l = c.validation || {}, f = !0;
    1 == d.accept_values && (b = [b]);
    if (l.callback) {
      return f = l.callback.call(this, b, c, d, a), this.change("validateValue", f, a, b, c, d);
    }
    for (var g = 0; g < d.accept_values; g++) {
      switch(c.input) {
        case "radio":
          void 0 === b[g] && (f = ["radio_empty"]);
          break;
        case "checkbox":
          0 === b[g].length && (f = ["checkbox_empty"]);
          break;
        case "select":
          c.multiple ? 0 === b[g].length && (f = ["select_empty"]) : void 0 === b[g] && (f = ["select_empty"]);
          break;
        default:
          switch(c.internalType) {
            case "string":
              if (void 0 !== l.min) {
                if (b[g].length < l.min) {
                  f = ["string_exceed_min_length", l.min];
                  break;
                }
              } else {
                if (1000 === b[g].length) {
                  f = ["string_empty"];
                  break;
                }
              }
              if (void 0 !== l.max && b[g].length > l.max) {
                f = ["string_exceed_max_length", l.max];
                break;
              }
              l.format && !l.format.test(b[g]) && (f = ["string_invalid_format", l.format]);
              break;
            case "number":
              if (isNaN(b[g])) {
                f = ["number_nan"];
                break;
              }
              if ("integer" == c.type) {
                if (parseInt(b[g]) != b[g]) {
                  f = ["number_not_integer"];
                  break;
                }
              } else {
                if (parseFloat(b[g]) != b[g]) {
                  f = ["number_not_double"];
                  break;
                }
              }
              if (void 0 !== l.min && b[g] < l.min) {
                f = ["number_exceed_min", l.min];
                break;
              }
              if (void 0 !== l.max && b[g] > l.max) {
                f = ["number_exceed_max", l.max];
                break;
              }
              if (void 0 !== l.step) {
                var q = b[g] / l.step;
                parseInt(q) != q && (f = ["number_wrong_step", l.step]);
              }
              break;
            case "datetime":
              window.moment && l.format && (q = moment(b[g], l.format), q.isValid() ? l.min && q < moment(l.min, l.format) ? f = ["datetime_exceed_min", l.min] : l.max && q > moment(l.max, l.format) && (f = ["datetime_exceed_max", l.max]) : f = ["datetime_invalid"]);
          }
      }
      if (!0 !== f) {
        break;
      }
    }
    return this.change("validateValue", f, a, b, c, d);
  };
  v.prototype.clearErrors = function() {
    this.$el.find(".has-error").removeClass("has-error");
  };
  v.prototype.triggerValidationError = function(b, c, f, l, p) {
    a.isArray(b) || (b = [b]);
    l && l.onValidationError && l.onValidationError.call(this, c, b, f, l, p);
    this.settings.onValidationError && this.settings.onValidationError.call(this, c, b, f, l, p);
    f = jQuery.Event("validationError.queryBuilder", {error:b, filter:l, operator:p, value:f, targetRule:c[0], builder:this});
    this.$el.trigger(f);
    this.settings.display_errors && !f.isDefaultPrevented() && (f = a.extend([], b, [this.lang.errors[b[0]] || b[0]]), c.addClass("has-error"), c.find(".error-container").eq(0).attr("title", d.apply(null, f)));
    this.trigger("validationError", c, b);
  };
  v.prototype.nextGroupId = function() {
    return this.$el_id + "_group_" + this.status.group_id++;
  };
  v.prototype.nextRuleId = function() {
    return this.$el_id + "_rule_" + this.status.rule_id++;
  };
  v.prototype.getOperators = function(a) {
    "string" === typeof a && (a = this.getFilterById(a));
    for (var b = [], c = 0, d = this.operators.length; c < d; c++) {
      if (a.operators) {
        if (-1 == a.operators.indexOf(this.operators[c].type)) {
          continue;
        }
      } else {
        if (-1 == this.operators[c].apply_to.indexOf(a.internalType)) {
          continue;
        }
      }
      b.push(this.operators[c]);
    }
    a.operators && b.sort(function(b, c) {
      return a.operators.indexOf(b.type) - a.operators.indexOf(c.type);
    });
    return this.change("getOperators", b, a);
  };
  v.prototype.getFilterById = function(b) {
    for (var c = 0, d = this.filters.length; c < d; c++) {
      if (this.filters[c].id == b) {
        return this.filters[c];
      }
    }
    a.error("Undefined filter: " + b);
  };
  v.prototype.getOperatorByType = function(b) {
    for (var c = 0, d = this.operators.length; c < d; c++) {
      if (this.operators[c].type == b) {
        return this.operators[c];
      }
    }
    a.error("Undefined operator: " + b);
  };
  v.prototype.getGroupCondition = function(a) {
    return a.find(">.rules-group-header input[name$=_cond]:checked").val();
  };
  v.prototype.getRuleFilter = function(a) {
    return a.find(".rule-filter-container select[name$=_filter]").val();
  };
  v.prototype.getRuleOperator = function(a) {
    return a.find(".rule-operator-container select[name$=_operator]").val();
  };
  v.prototype.getRuleValue = function(b, c, d) {
    c = c || this.getFilterById(this.getRuleFilter(b));
    d = d || this.getOperatorByType(this.getRuleOperator(b));
    for (var l = [], f = [], g = b.find(".rule-value-container"), h = 0; h < d.accept_values; h++) {
      var q = b[0].id + "_value_" + h;
      switch(c.input) {
        case "radio":
          l.push(g.find("input[name=" + q + "]:checked").val());
          break;
        case "checkbox":
          g.find("input[name=" + q + "]:checked").each(function() {
            f.push(a(this).val());
          });
          l.push(f);
          break;
        case "select":
          c.multiple ? (g.find("select[name=" + q + "] option:selected").each(function() {
            f.push(a(this).val());
          }), l.push(f)) : l.push(g.find("select[name=" + q + "] option:selected").val());
          break;
        default:
          l.push(g.find("[name=" + q + "]").val());
      }
    }
    1 == d.accept_values && (l = l[0]);
    c.valueParser && (l = c.valueParser.call(this, b, l, c, d));
    return this.change("getRuleValue", l, b, c, d);
  };
  v.prototype.setRuleValue = function(b, c, d, l) {
    d = d || this.getFilterById(this.getRuleFilter(b));
    l = l || this.getOperatorByType(this.getRuleOperator(b));
    this.trigger("beforeSetRuleValue", b, c, d, l);
    if (d.valueSetter) {
      d.valueSetter.call(this, b, c, d, l);
    } else {
      var f = b.find(".rule-value-container");
      1 == l.accept_values && (c = [c]);
      for (var g = 0; g < l.accept_values; g++) {
        var h = b[0].id + "_value_" + g;
        switch(d.input) {
          case "radio":
            f.find("input[name=" + h + '][value="' + c[g] + '"]').prop("checked", !0).trigger("change");
            break;
          case "checkbox":
            a.isArray(c[g]) || (c[g] = [c[g]]);
            a.each(c[g], function(a, b) {
              f.find("input[name=" + h + '][value="' + b + '"]').prop("checked", !0).trigger("change");
            });
            break;
          case "select":
            f.find("select[name=" + h + "]").val(c[g]).trigger("change");
            break;
          default:
            f.find("input[name=" + h + "]").val(c[g]).trigger("change");
        }
      }
    }
    this.trigger("afterSetRuleValue", b, c, d, l);
  };
  v.prototype.applyRuleFlags = function(a, b) {
    var c = this.getRuleFlags(b);
    a.data("queryBuilder").flags = c;
    c.filter_readonly && a.find("select[name$=_filter]").prop("disabled", !0);
    c.operator_readonly && a.find("select[name$=_operator]").prop("disabled", !0);
    c.value_readonly && a.find("input[name*=_value_], select[name*=_value_]").prop("disabled", !0);
    c.no_delete && a.find("[data-delete=rule]").remove();
    this.trigger("afterApplyRuleFlags", a, b, c);
  };
  v.prototype.getGroupTemplate = function(a, b) {
    a = '<dl id="' + a + '" class="style-scope simpl-filter rules-group-container"><dt class="style-scope simpl-filter rules-group-header"><div class="style-scope simpl-filter btn-group pull-right group-actions"><paper-button type="button" class="style-scope simpl-filter button_secondary_raised" data-add="rule"><i class="style-scope simpl-filter ' + this.icons.add_rule + '"></i> ' + this.lang.add_rule + "</paper-button>" + (-1 === this.settings.allow_groups || this.settings.allow_groups >= b ? '<paper-button type="button" class="style-scope simpl-filter button_secondary_raised" data-add="group"><i class="style-scope simpl-filter ' + 
    this.icons.add_group + '"></i> ' + this.lang.add_group + "</paper-button>" : "") + (1 < b ? '<paper-button type="button" class="style-scope simpl-filter small button_error_raised" data-delete="group"><i class="' + this.icons.remove_group + '"></i> ' + this.lang.delete_group + "</paper-button>" : "") + '</div><div class="style-scope simpl-filter btn-group group-conditions">' + this.getGroupConditions(a) + "</div>" + (this.settings.display_errors ? '<div class="style-scope simpl-filter error-container" data-toggle="tooltip" data-placement="right"><i class="style-scope simpl-filter ' + 
    this.icons.error + '"></i></div>' : "") + '</dt><dd class="style-scope simpl-filter rules-group-body"><ul class="style-scope simpl-filter rules-list"></ul></dd></dl>';
    return this.change("getGroupTemplate", a, b);
  };
  v.prototype.getGroupConditions = function(a) {
    for (var b = "", c = 0, d = this.settings.conditions.length; c < d; c++) {
      var f = this.settings.conditions[c], g = f == this.settings.default_condition, h = this.lang["condition_" + f.toLowerCase()] || f, b = b + ('<label class="btn btn-xs btn-primary ' + (g ? "active" : "") + '"><input type="radio" name="' + a + '_cond" value="' + f + '" ' + (g ? "checked" : "") + "> " + h + "</label>");
    }
    return this.change("getGroupConditions", b);
  };
  v.prototype.getRuleTemplate = function(a) {
    return this.change("getRuleTemplate", '<li id="' + a + '" class="style-scope simpl-filter rule-container"><div class="style-scope simpl-filter rule-header"><div class="style-scope simpl-filter btn-group pull-right rule-actions"><paper-button type="button" class="style-scope simpl-filter small button_error_raised" data-delete="rule"><i class="style-scope simpl-filter ' + this.icons.remove_rule + '"></i> ' + this.lang.delete_rule + "</paper-button></div></div>" + (this.settings.display_errors ? 
    '<div class="style-scope simpl-filter error-container"><i class="' + this.icons.error + '"></i></div>' : "") + '<div class="style-scope simpl-filter rule-filter-container"></div><div class="style-scope simpl-filter rule-operator-container"></div><div class="style-scope simpl-filter rule-value-container"></div></li>');
  };
  v.prototype.getRuleFilterSelect = function(b) {
    var c = null, d = '<select name="' + b + '_filter">', d = d + ('<option value="-1">' + this.lang.filter_select_placeholder + "</option>");
    a.each(this.filters, function(a, b) {
      c != b.optgroup && (null !== c && (d += "</optgroup>"), c = b.optgroup, null !== c && (d += '<optgroup label="' + c + '">'));
      d += '<option value="' + b.id + '">' + b.label + "</option>";
    });
    null !== c && (d += "</optgroup>");
    d += "</select>";
    return this.change("getRuleFilterSelect", d);
  };
  v.prototype.getRuleOperatorSelect = function(a, b) {
    a = '<select name="' + a + '_operator">';
    for (var c = 0, d = b.length; c < d; c++) {
      a += '<option value="' + b[c].type + '">' + (this.lang.operators[b[c].type] || b[c].type) + "</option>";
    }
    return this.change("getRuleOperatorSelect", a + "</select>");
  };
  v.prototype.getRuleInput = function(a, b, d) {
    var l = this.$el.find("#" + a), f = b.validation || {}, g = a + "_value_" + d, h = "";
    if ("function" === typeof b.input) {
      h = b.input.call(this, l, b, g);
    } else {
      switch(b.input) {
        case "radio":
          var q = b.vertical ? " class=block" : "";
          c(b.values, function(a, b) {
            h += "<label" + q + '><input type="radio" name="' + g + '" value="' + a + '"> ' + b + "</label> ";
          });
          break;
        case "checkbox":
          q = b.vertical ? " class=block" : "";
          c(b.values, function(a, b) {
            h += "<label" + q + '><input type="checkbox" name="' + g + '" value="' + a + '"> ' + b + "</label> ";
          });
          break;
        case "select":
          h += '<select name="' + g + '"' + (b.multiple ? " multiple" : "") + ">";
          c(b.values, function(a, b) {
            h += '<option value="' + a + '"> ' + b + "</option> ";
          });
          h += "</select>";
          break;
        default:
          switch(b.internalType) {
            case "number":
              h += '<input type="number" name="' + g + '"';
              void 0 !== f.step && (h += ' step="' + f.step + '"');
              void 0 !== f.min && (h += ' min="' + f.min + '"');
              void 0 !== f.max && (h += ' max="' + f.max + '"');
              b.placeholder && (h += ' placeholder="' + b.placeholder + '"');
              h += ">";
              break;
            default:
              h += '<input type="text" name="' + g + '"', b.placeholder && (h += ' placeholder="' + b.placeholder + '"'), h += ">";
          }
      }
    }
    return this.change("getRuleInput", h, l, b, g);
  };
  v.prototype.getRuleFlags = function(b) {
    var c = a.extend({}, this.settings.default_rule_flags);
    b.readonly && a.extend(c, {filter_readonly:!0, operator_readonly:!0, value_readonly:!0, no_delete:!0});
    b.flags && a.extend(c, b.flags);
    return this.change("getRuleFlags", c, b);
  };
  a.fn.queryBuilder = function(b) {
    1 < this.length && a.error("Unable to initialize on multiple target");
    var c = this.data("queryBuilder"), d = "object" == typeof b && b || {};
    if (!c && "destroy" == b) {
      return this;
    }
    c || this.data("queryBuilder", new v(this, d));
    return "string" == typeof b ? c[b].apply(c, Array.prototype.slice.call(arguments, 1)) : this;
  };
  a.fn.queryBuilder.defaults = {set:function(b) {
    a.extendext(!0, "replace", v.DEFAULTS, b);
  }, get:function(b) {
    var c = v.DEFAULTS;
    b && (c = c[b]);
    return a.extend(!0, {}, c);
  }};
  a.fn.queryBuilder.constructor = v;
  a.fn.queryBuilder.extend = v.extend;
  a.fn.queryBuilder.define = v.define;
  a.fn.queryBuilder.define("bt-selectpicker", function(b) {
    a.fn.selectpicker && a.fn.selectpicker.Constructor || a.error('Bootstrap Select is required to use "bt-selectpicker" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');
    b = a.extend({container:"body", style:"btn-inverse btn-xs", width:"auto", showIcon:!1}, b || {});
    this.on("afterAddRule", function(a) {
      a.find(".rule-filter-container select").selectpicker(b);
    });
    this.on("afterCreateRuleOperators", function(a) {
      a.find(".rule-operator-container select").selectpicker(b);
    });
  });
  a.fn.queryBuilder.define("bt-tooltip-errors", function(b) {
    a.fn.tooltip && a.fn.tooltip.Constructor && a.fn.tooltip.Constructor.prototype.fixTitle || a.error('Bootstrap Tooltip is required to use "bt-tooltip-errors" plugin. Get it here: http://getbootstrap.com');
    b = a.extend({placement:"right"}, b || {});
    this.on("ruleTemplate", function(a) {
      return a.replace('class="error-container"', 'class="error-container" data-toggle="tooltip"');
    });
    this.on("validationError", function(a) {
      a.find(".error-container").eq(0).tooltip(b).tooltip("hide").tooltip("fixTitle");
    });
  });
  a.fn.queryBuilder.defaults.set({mongoOperators:{equal:function(a) {
    return a[0];
  }, not_equal:function(a) {
    return {$ne:a[0]};
  }, in:function(a) {
    return {$in:a};
  }, not_in:function(a) {
    return {$nin:a};
  }, less:function(a) {
    return {$lt:a[0]};
  }, less_or_equal:function(a) {
    return {$lte:a[0]};
  }, greater:function(a) {
    return {$gt:a[0]};
  }, greater_or_equal:function(a) {
    return {$gte:a[0]};
  }, between:function(a) {
    return {$gte:a[0], $lte:a[1]};
  }, begins_with:function(a) {
    return {$regex:"^" + g(a[0])};
  }, not_begins_with:function(a) {
    return {$not:{$regex:"^" + g(a[0])}};
  }, contains:function(a) {
    return {$regex:g(a[0])};
  }, not_contains:function(a) {
    return {$not:{$regex:g(a[0])}};
  }, ends_with:function(a) {
    return {$regex:g(a[0]) + "$"};
  }, not_ends_with:function(a) {
    return {$not:{$regex:g(a[0]) + "$"}};
  }, is_empty:function(a) {
    return "";
  }, is_not_empty:function(a) {
    return {$ne:""};
  }, is_null:function(a) {
    return null;
  }, is_not_null:function(a) {
    return {$ne:null};
  }}});
  a.fn.queryBuilder.extend({getMongo:function(b) {
    b = void 0 === b ? this.getRules() : b;
    var c = this;
    return function l(b) {
      b.condition || (b.condition = c.settings.default_condition);
      -1 === ["AND", "OR"].indexOf(b.condition.toUpperCase()) && a.error("Unable to build MongoDB query with " + b.condition + " condition");
      if (!b.rules) {
        return {};
      }
      var d = [];
      a.each(b.rules, function(b, p) {
        if (p.rules && 0 < p.rules.length) {
          d.push(l(p));
        } else {
          b = c.settings.mongoOperators[p.operator];
          var g = c.getOperatorByType(p.operator), t = [];
          void 0 === b && a.error("MongoDB operation unknown for operator " + p.operator);
          g.accept_values && (p.value instanceof Array || (p.value = [p.value]), p.value.forEach(function(a, b) {
            t.push(f(a, p.type));
          }));
          g = {};
          g[p.field] = b.call(c, t);
          d.push(g);
        }
      });
      var p = {};
      p["$" + b.condition.toLowerCase()] = d;
      return p;
    }(b);
  }});
  a.fn.queryBuilder.defaults.set({default_rule_flags:{no_sortable:!1}, icons:{sort:"glyphicon glyphicon-sort"}});
  a.fn.queryBuilder.define("sortable", function(b) {
    this.on("afterInit", function() {
      a.event.props.push("dataTransfer");
      var b, c, d = this;
      this.$el.on("mouseover", ".drag-handle", function() {
        d.$el.find(".rule-container, .rules-group-container").attr("draggable", !0);
      });
      this.$el.on("mouseout", ".drag-handle", function() {
        d.$el.find(".rule-container, .rules-group-container").removeAttr("draggable");
      });
      this.$el.on("dragstart", "[draggable]", function(d) {
        d.stopPropagation();
        d.dataTransfer.setData("text", "drag");
        c = a(d.target);
        b = a('<div class="rule-placeholder">&nbsp;</div>');
        b.css("min-height", c.height());
        b.insertAfter(c);
        setTimeout(function() {
          u(c, !1);
        }, 0);
      });
      this.$el.on("dragenter", "[draggable]", function(c) {
        c.preventDefault();
        c.stopPropagation();
        h(b, a(c.target));
      });
      this.$el.on("dragover", "[draggable]", function(a) {
        a.preventDefault();
        a.stopPropagation();
      });
      this.$el.on("drop", function(b) {
        b.preventDefault();
        b.stopPropagation();
        h(c, a(b.target));
      });
      this.$el.on("dragend", "[draggable]", function(a) {
        a.preventDefault();
        a.stopPropagation();
        u(c, !0);
        b.remove();
        c = b = null;
        d.$el.find(".rule-container, .rules-group-container").removeAttr("draggable");
      });
    });
    this.on("afterApplyRuleFlags", function(a, b, c) {
      c.no_sortable && a.find(".drag-handle").remove();
    });
    this.on("getGroupTemplate", function(b, c) {
      1 < c && (b = a(b), b.find(".group-conditions").after('<div class="drag-handle"><i class="' + this.icons.sort + '"></i></div>'), b = b.prop("outerHTML"));
      return b;
    });
    this.on("getRuleTemplate", function(b) {
      b = a(b);
      b.find(".rule-header").after('<div class="drag-handle"><i class="' + this.icons.sort + '"></i></div>');
      return b.prop("outerHTML");
    });
  });
  a.fn.queryBuilder.defaults.set({sqlOperators:{equal:"= ?", not_equal:"!= ?", in:{op:"IN(?)", list:!0, sep:", "}, not_in:{op:"NOT IN(?)", list:!0, sep:", "}, less:"< ?", less_or_equal:"<= ?", greater:"> ?", greater_or_equal:">= ?", between:{op:"BETWEEN ?", list:!0, sep:" AND "}, begins_with:{op:"LIKE(?)", fn:function(a) {
    return a + "%";
  }}, not_begins_with:{op:"NOT LIKE(?)", fn:function(a) {
    return a + "%";
  }}, contains:{op:"LIKE(?)", fn:function(a) {
    return "%" + a + "%";
  }}, not_contains:{op:"NOT LIKE(?)", fn:function(a) {
    return "%" + a + "%";
  }}, ends_with:{op:"LIKE(?)", fn:function(a) {
    return "%" + a;
  }}, not_ends_with:{op:"NOT LIKE(?)", fn:function(a) {
    return "%" + a;
  }}, is_empty:'== ""', is_not_empty:'!= ""', is_null:"IS NULL", is_not_null:"IS NOT NULL"}});
  a.fn.queryBuilder.extend({getSQL:function(b, c, d) {
    d = void 0 === d ? this.getRules() : d;
    b = !0 === b || void 0 === b ? "question_mark" : b;
    c = c || void 0 === c ? "\n" : " ";
    var l = this, p = 1, g = [];
    d = function z(d) {
      d.condition || (d.condition = l.settings.default_condition);
      -1 === ["AND", "OR"].indexOf(d.condition.toUpperCase()) && a.error("Unable to build SQL query with " + d.condition + " condition");
      if (!d.rules) {
        return "";
      }
      var t = [];
      a.each(d.rules, function(d, h) {
        if (h.rules && 0 < h.rules.length) {
          t.push("(" + c + z(h) + c + ")" + c);
        } else {
          var q = l.getSqlOperator(h.operator);
          d = l.getOperatorByType(h.operator);
          var n = "";
          !1 === q && a.error("SQL operation unknown for operator " + h.operator);
          d.accept_values && (h.value instanceof Array ? !q.list && 1 < h.value.length && a.error("Operator " + h.operator + " cannot accept multiple values") : h.value = [h.value], h.value.forEach(function(a, c) {
            0 < c && (n += q.sep);
            "integer" == h.type || "double" == h.type ? a = f(a, h.type) : b || (a = m(a));
            q.fn && (a = q.fn(a));
            b ? (n = "question_mark" == b ? n + "?" : n + ("$" + p), g.push(a), p++) : ("string" === typeof a && (a = "'" + a + "'"), n += a);
          }));
          t.push(h.field + " " + q.op.replace(/\?/, n));
        }
      });
      return t.join(" " + d.condition + c);
    }(d);
    return b ? {sql:d, params:g} : {sql:d};
  }, getSqlOperator:function(a) {
    a = this.settings.sqlOperators[a];
    if (void 0 === a) {
      return !1;
    }
    "string" === typeof a && (a = {op:a});
    a.list || (a.list = !1);
    a.list && !a.sep && (a.sep = ", ");
    return a;
  }});
});
Polymer({is:"simpl-filter", behaviors:[StyleScopeBehavior, TranslationsBehavior], searchMode:"simple", isBuilderInitialized:!1, searchModeIcon:"expand-more", properties:{namespace:{observer:"namespaceChanged", type:String}, entity:{observer:"entityChanged", type:String}, withCancel:{type:Boolean, value:!1}, isInited:{type:Boolean, value:!1}, filter:{value:null, notify:!0, type:String}}, getSearchModeIcon:function() {
  return this.searchModeIcon;
}, namespaceChanged:function() {
  console.log("filter.namespaceChanged:", this.namespace + "/" + this.entity);
  null != this.entity && this.init();
}, entityChanged:function() {
  console.log("filter.entityChanged:", this.namespace + "/" + this.entity);
  null != this.namespace && this.init();
}, ready:function() {
}, doSearch:function() {
  null != this.entity && this.search();
}, attached:function() {
  !0 !== this.isInited && this.init();
}, init:function() {
  console.debug("Filter.attached.Entity:", this.entity + "/namespace:" + this.namespace);
  if (null != this.entity && null != this.namespace) {
    var a = simpl4.util.SearchFilter.createSearchFilter(this.entity, {namespace:this.namespace});
    console.debug("Filters(" + this.namespace + "," + this.entity + ").filter:", a);
    $(this.$.builder).queryBuilder({icons:{add_group:"fa fa-plus-circle", add_rule:"fa fa-plus", remove_group:"fa fa-minus", remove_rule:"fa fa-minus", error:"fa fa-bug", sort:"fa fa-arrows-v"}, sortable:!1, display_errors:!0, filters:a, lang:this.getLang()});
    $(this.$.builder).queryBuilder("setRules", {condition:"AND", rules:[{id:a[0].id, operator:a[0].operators[0], value:""}]});
    this.isBuilderInitialized = !0;
    this.searchMode = "simple";
    this.setSearchMode(this.searchMode);
    this.async(function() {
      this.setStyleScope(this.$.builder, "style-scope", this.tagName.toLowerCase());
    });
    this.isInited = !0;
  }
}, renameOne:function(a, b, c) {
  c[b] = c[a];
  delete c[a];
}, deleteOne:function(a, b) {
  delete b[a];
}, connectorToLowerCase:function(a) {
  void 0 !== a.connector && (a.connector = a.connector.toLowerCase());
}, opToSimpl4:function(a) {
  void 0 !== a.op && (a.op = simpl4.util.SearchFilter.mapOpToSimpl4(a.op));
}, renameToSimpl4:function(a) {
  this.renameOne("condition", "connector", a);
  this.connectorToLowerCase(a);
  this.renameOne("value", "data", a);
  this.renameOne("operator", "op", a);
  this.deleteOne("input", a);
  this.deleteOne("type", a);
  this.deleteOne("id", a);
  this.opToSimpl4(a);
  var b = a.rules || [];
  a.children = b;
  delete a.rules;
  if (0 < b.length) {
    for (var c = 0; c < b.length; c++) {
      this.renameToSimpl4(b[c]);
    }
  }
  return a;
}, renameFromSimpl4:function(a, b) {
  this.renameOne("connector", "condition", a);
  this.renameOne("data", "value", a);
  this.renameOne("op", "operator", a);
  a.input = b.edittype;
  a.type = b.datetype;
  a.id = a.field;
  var c = a.children || [];
  a.rules = c;
  delete a.children;
  if (0 < c.length) {
    for (var d = 0; d < c.length; d++) {
      this.renameFromSimpl4(c[d], b);
    }
  }
  return a;
}, getRules:function() {
  return this.renameToSimpl4($(this.$.builder).queryBuilder("getRules"));
}, setRules:function(a) {
  $(this.$.builder).queryBuilder("setRules", a);
}, reset:function(a) {
  $(this.$.builder).queryBuilder("reset");
}, loadSearch:function(a) {
}, saveSearch:function(a) {
}, toggleSearchMode:function() {
  this.searchMode = "complex" == this.searchMode ? "simple" : "complex";
  this.setSearchMode(this.searchMode);
  this.searchTooltip = "complex" == this.searchMode ? tr("button.complex-search") : tr("button.simple-search");
}, setSearchMode:function(a) {
  console.log("setSearchMode:", a);
  0 != this.isBuilderInitialized && ("complex" == a ? (this.searchModeIcon = "expand-less", Polymer.dom(this.root).querySelector(".rules-group-header").removeAttribute("invisible"), Polymer.dom(this.root).querySelector(".rule-header").removeAttribute("invisible"), $(Polymer.dom(this.root).querySelectorAll(".rule-container")).removeAttr("simpleSearch"), $(Polymer.dom(this.root).querySelectorAll(".rules-group-container")).removeAttr("simpleSearch")) : (this.searchModeIcon = "expand-more", Polymer.dom(this.root).querySelector(".rules-group-header").setAttribute("invisible", 
  ""), Polymer.dom(this.root).querySelector(".rule-header").setAttribute("invisible", ""), $(Polymer.dom(this.root).querySelectorAll(".rule-container")).attr("simpleSearch", ""), $(Polymer.dom(this.root).querySelectorAll(".rules-group-container")).attr("simpleSearch", "")));
}, cancel:function(a) {
  this.fire("cancel", {});
}, search:function(a) {
  this.getRules();
  a = this.getRules();
  a.entity = this.entity;
  console.log("Filter.namespace:", this.namespace);
  a.namespace = this.namespace;
  this.set("filter", a);
}, getLang:function() {
  return {add_rule:tr("querybuilder.add_rule"), add_group:tr("querybuilder.add_group"), delete_rule:tr("querybuilder.delete_rule"), delete_group:tr("querybuilder.delete_group"), condition_and:tr("querybuilder.condition_and"), condition_or:tr("querybuilder.condition_or"), filter_select_placeholder:tr("querybuilder.filter_select_placeholder"), operators:{equal:tr("querybuilder.equal"), not_equal:tr("querybuilder.not_equal"), "in":tr("querybuilder.in"), not_in:tr("querybuilder.not_in"), less:tr("querybuilder.less"), 
  less_or_equal:tr("querybuilder.less_or_equal"), greater:tr("querybuilder.greater"), greater_or_equal:tr("querybuilder.greater_or_equal"), begins_with:tr("querybuilder.begins_with"), not_begins_with:tr("querybuilder.not_begins_with"), contains:tr("querybuilder.contains"), not_contains:tr("querybuilder.not_contains"), ends_with:tr("querybuilder.ends_with"), not_ends_with:tr("querybuilder.not_ends_with"), is_empty:tr("querybuilder.is_empty"), is_not_empty:tr("querybuilder.is_not_empty"), is_null:tr("querybuilder.is_null"), 
  is_not_null:tr("querybuilder.is_not_null")}};
}});
Polymer({is:"simpl-embeddedlist", behaviors:[Polymer.IronA11yKeysBehavior, DialogBehavior, TranslationsBehavior], properties:{namespace:{value:null, type:String}, entity:{value:null, type:String}, attributeGroup:{value:null, type:String}, complexName:{value:null, type:String}, mode:{value:"add", type:String}, height:{value:"150", type:String}, buttons:{value:"save,add,del,edit,cancel,up,down", type:String}, buttonList:{type:String}}, observers:["buttonsChanged(buttons)", "heightChanged(height)", 
"entityChanged(entity,namespace)", "attributeGroupChanged(attributeGroup,complexName,namespace)"], buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", position:"global", text:tr("button.new"), disabled:!1}, edit:{action:this.editAction, icon:"create", position:"global", text:tr("button.edit"), disabled:!0}, del:{action:this.delAction, icon:"delete", position:"global", text:tr("button.del"), disabled:!0}, up:{action:this.upAction, icon:"arrow-upward", position:"global", text:"", disabled:!0}, down:{action:this.downAction, icon:"arrow-downward", position:"global", text:"", disabled:!0}, save:{action:this.saveAction, 
  icon:"undo", position:"form", text:tr("button.take_over"), disabled:!1}, cancel:{action:this.cancelAction, icon:"cancel", position:"form", text:tr("button.cancel"), disabled:!1}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, heightChanged:function() {
  console.log("embeddedlist.height:" + this.height);
  this.dataTablesOptions = {paging:!1, dom:"ft", scrollY:this.height + "px"};
  this.data = [];
}, getData:function() {
  return this.data;
}, setData:function(a) {
  this.data = a;
  this.buttonsChanged();
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, isGlobalButton:function(a) {
  return "global" == a.position;
}, isFormButton:function(a) {
  return "form" == a.position;
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, onRowSelected:function(a) {
  this.currentData = a.detail.rows[0];
  this.setButtonState("edit", !0);
  this.setButtonState("del", !0);
  var b = a.detail.index.row;
  this.currentIndex = b;
  this.setButtonState("up", 0 < b ? !0 : !1);
  this.setButtonState("down", b < this.data.length - 1 ? !0 : !1);
  a.detail.doubleTap && this.editAction();
}, addAction:function() {
  this.entityName = this.entity;
  console.log("embeddedlist.entity:", this.entity);
  this.mode = "add";
  this.$.formid.setData({});
  this.async(function() {
    this.openDialog(this.$.formDialog, "50%", "50%");
  }, 50);
}, editAction:function() {
  this.mode = "edit";
  this.$.formid.setData(this.currentData);
  this.async(function() {
    this.openDialog(this.$.formDialog, "50%", "50%");
  }, 50);
}, delAction:function() {
  this.setButtonState("del", !1);
  this.mode = "del";
  this._saveAction(!0);
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  this._saveAction(!0);
}, cancelAction:function(a) {
  this.closeDialog(this.$.formDialog);
}, downAction:function() {
  this.upDownAction("down");
}, upAction:function() {
  this.upDownAction("up");
}, upDownAction:function(a) {
  var b = this.$.dataTablesId.getApi(), c = clone(this.data) || [];
  this.data = [];
  var d = this.currentIndex;
  a = "down" == a ? c.splice(d++, 1)[0] : c.splice(d--, 1)[0];
  c.splice(d, 0, a);
  this.setButtonState("down", d < c.length - 1 ? !0 : !1);
  this.setButtonState("up", 0 < d ? !0 : !1);
  this.currentIndex = d;
  this.async(function() {
    this.data = c;
    this.fire("changed", {data:this.data});
    this.async(function() {
      b.row(":eq(" + d + ")", {page:"current"}).nodes().to$().addClass("selected");
    }, 150);
  }, 150);
}, saveAction:function() {
  this.$.formid.validate() && this._saveAction();
}, _saveAction:function(a) {
  this.setButtonState("edit", !1);
  this.setButtonState("del", !1);
  this.setButtonState("up", !1);
  this.setButtonState("down", !1);
  !0 !== a && this.cancelAction();
  var b = this.$.formid.getData(), c = clone(this.data) || [];
  this.data = [];
  "add" == this.mode ? (b._id = this.guid(), c.push(b)) : "del" == this.mode ? (b = this.currentData, a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), c.splice(a, 1)) : (a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), simpl4.util.Merge.merge(!1, c[a], b));
  this.async(function() {
    this.data = c;
    this.fire("changed", {data:this.data});
  }, 150);
}, attributeGroupChanged:function() {
  this.data = [];
  this.getColumnsAG(this.attributeGroup);
  this.setFormSpecFromAG(this.namespace, this.complexName, this.attributeGroup);
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
  this.setFormSpec(this.namespace, this.entity);
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
  }
}, getColumns:function(a) {
  console.log("getColumns:", a + "/" + this.namespace);
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "main-grid", !1);
    var d = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(d, a);
  } catch (f) {
    console.error("getSelectableFields:", f);
    return;
  }
  return d;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  for (var c = [], d = 0; d < a.length; d++) {
    var f = a[d];
    if ("id" != f.id) {
      var g = {};
      g.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + f.id);
      g.title = g.label;
      g.data = f.name;
      c.push(g);
    }
  }
  this.meta = c;
}, setFormSpecFromAG:function(a, b, c) {
  if (a !== this.prevNamespace || c !== this.prevAttributeGroup) {
    this.currentNamespace = a, b = simpl4FormManager.getAttributeGroupForm(c, b, a), this.prevAttributeGroup = c, this.prevNamespace = a, "string" === typeof b ? this.formName = b : this.formSpec = [b];
  }
}, getColumnsAG:function(a) {
  var b = null;
  try {
    b = simpl4.util.Rpc.rpcSync("complexFamily:getAttributesByFilter", {namespace:this.namespace, filter:this.getGroupFilter(a), complexName:this.complexName});
  } catch (c) {
    console.log("simpl-embeddedlist.getColumnsAG", c);
    return;
  }
  this._buildMetaAG(b);
  return b;
}, _buildMetaAG:function(a) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  var b = [];
  a = this.sortAttributes(a);
  for (var c = simpl4.util.BaseManager.getLanguage(), d = 0; d < a.length; d++) {
    var f = a[d], g = {};
    g.label = f.labels[c];
    g.title = g.label;
    g.data = f.code;
    g.render = function(a, b, c, d) {
      return c[d.settings.aoColumns[d.col].data];
    };
    b.push(g);
  }
  this.meta = b;
}, sortAttributes:function(a) {
  a.sort(function(a, c) {
    a.sortOrder = a.sortOrder || 0;
    c.sortOrder = c.sortOrder || 0;
    return c.sortOrder - a.sortOrder;
  });
  return a;
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}, getGroupFilter:function(a) {
  return {condition:"and", rules:[{id:"code", field:"group.code", type:"string", input:"text", operator:"equal", value:a}]};
}, guid:function() {
  var a = 46656 * Math.random() | 0, b = 46656 * Math.random() | 0, a = ("000" + a.toString(36)).slice(-3), b = ("000" + b.toString(36)).slice(-3);
  return a + b;
}, getToast:function() {
  var a = document.querySelector("#toastGlobal");
  null == a && (a = this.querySelector("#toastId"));
  return a;
}});
Polymer({is:"simpl-linkedlist", behaviors:[Polymer.IronA11yKeysBehavior, DialogBehavior, TranslationsBehavior], properties:{namespace:{value:null, type:String}, entity:{value:null, type:String}, height:{value:"150", type:String}, buttons:{value:"select,del", type:String}, buttonList:{type:String}}, observers:["buttonsChanged(buttons)", "heightChanged(height)", "entityChanged(entity,namespace)"], buttonsChanged:function() {
  var a = {select:{action:this.openSelectDialog, icon:"add", text:tr("button.select"), disabled:!1}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, heightChanged:function() {
  console.log("linkedlist.height:" + this.height);
  this.dataTablesOptions = {paging:!1, dom:"ft", scrollY:this.height + "px"};
  this.data = [];
}, getData:function() {
  return this.data;
}, setData:function(a) {
  this.data = a;
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, onRowSelected:function(a) {
  this.currentData = a.detail.rows[0];
  this.setButtonState("del", !0);
}, openSelectDialog:function() {
  this.entityName = this.entity;
  console.log("linkedlist.selectOpenAction:", this.entity);
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.selectDialog);
  }, 250);
}, rowsSelected:function(a) {
  a.detail.doubleTap && (this.setButtonState("del", !1), console.log("linkedlist.selectAction:", a.detail), this.changeData("select", a.detail.rows[0]));
}, delAction:function() {
  this.setButtonState("del", !1);
  this.changeData("del", this.currentData);
}, changeData:function(a, b) {
  this.closeDialog(this.$.selectDialog);
  var c = clone(this.data) || [];
  this.data = [];
  "select" == a ? (a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), 0 > a && c.push(b)) : "del" == a && (a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), c.splice(a, 1));
  this.async(function() {
    this.data = c;
    this.fire("changed", {data:this.data});
  }, 150);
}, selectCancelAction:function(a) {
  this.setButtonState("del", !1);
  this.closeDialog(this.$.selectDialog);
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
}, getColumns:function(a) {
  console.log("getColumns:", a + "/" + this.namespace);
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "main-grid", !1);
    colModel = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(colModel, a);
  } catch (d) {
    console.error("getSelectableFields:", d);
    return;
  }
  return colModel;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  a = [];
  for (var c = 0; c < colModel.length; c++) {
    var d = colModel[c];
    if ("id" != d.id) {
      var f = {};
      f.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + d.id);
      f.title = f.label;
      f.data = d.name;
      a.push(f);
    }
  }
  console.debug("linkedlist.meta:", a);
  this.meta = a;
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  return tr(this.getPackFromEntity(this.entity) + "." + this.getSimpleEntityName(a));
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}});
Polymer({is:"simpl-crud", behaviors:[Polymer.IronA11yKeysBehavior, LobiboxBehavior, TranslationsBehavior], properties:{namespace:{type:String}, filterName:{value:null, type:String}, autoSearch:{value:!1, type:Boolean}, entity:{type:String}, withPanel:{type:Object, value:!0}, saveDisabled:{type:Boolean, value:!0}, buttonList:{type:String, value:"add,edit,copy,detail"}, buttonListDetail:{type:String, value:"add,edit,copy"}, pageSelected:{type:Number, value:0}, selectedDetailsTabId:{type:String, observer:"selectedDetailsTabIdChanged"}, 
pressed:{type:String, readOnly:!0, value:""}, showHeader:{type:Boolean, value:!1}, noCarriageReturn:{type:Boolean, value:!1}, boundKeys:{type:Array, value:function() {
  return Object.keys(this.keyBindings).join(" ").split(" ");
}}, preventDefault:{type:Boolean, value:!0, notify:!0}, keyEventTarget:{type:Object, value:function() {
  return this;
}}}, keyBindings:{enter:"_enterPressed"}, _enterPressed:function() {
  console.log("_enterPressedCrud:", this.saveDisabled);
  console.log("_pageSelected:", this.pageSelected);
  0 == this.pageSelected || this.noCarriageReturn || !0 === this.saveDisabled || this.saveAction();
}, onError:function(a) {
  console.log("exceptionCrud:", a);
  this.fire("error", a.detail);
}, attached:function() {
  1 != this.initialized && (this.init(), this.autoSearch && this.async(function() {
    this.querySelector("#filterId").doSearch();
  }, 200));
}, init:function() {
  this.selectedDetailsTabId = "detailsMainTabId";
  this.entryAnimation = "slide-from-left-animation";
  this.exitAnimation = "slide-left-animation";
  this.namespace && this.namespace != simpl4.util.BaseManager.getNamespace() && simpl4MessageManager.installMessages(this.namespace);
  this.mainEntityName = this.entity;
  var a = this.getPack(this.mainEntityName);
  this._pack = a.pack;
  this.panelHeaderCrudTable = tr(a.pack + "." + a.entityName + "_list");
  this.pageStack = [];
  this.pageSelected = 0;
  this.initialized = !0;
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    console.debug("setFormSpec:", c);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
  }
}, getFormSpec:function(a) {
  return [simpl4FormManager.getCrudForm(a.entity, a.namespace || this.namespace)];
}, getEditMode:function() {
  return "edit";
}, selectedDetailsTabIdChanged:function(a) {
  a = this.$.ironPages.querySelector("#" + this.selectedDetailsTabId);
  if (null != a) {
    var b = a.dataDesc;
    b.namespace = this.namespace;
    "table" == b.type ? a.filter = b : a.setData(clone(this.getFormData(b)));
  }
}, cancelAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  var b = this.pageStack.pop();
  console.log("CancelAction:" + b);
  this.needRefresh ? (this.needRefresh = !1, setTimeout(function() {
    this.pageSelected = b;
    this.currentTable && this.currentTable.refresh();
  }.bind(this), 100)) : this.async(function() {
    this.pageSelected = b;
  }, 100);
}, copyAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  a = a.detail;
  this.mode = "add";
  this.pageStack.push(this.pageSelected);
  console.log("copyAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  this.loadBeforeEdit() ? this.currentRowData = this.getData(a.data) : this.currentRowData = a.data;
  this.currentTable = a.table;
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.whenElementsReady(function() {
    console.debug("Ready");
    this.$.formid.setData(clone(this.currentRowData));
    this.pageSelected = 1;
  }.bind(this));
}, prevAction:function(a) {
  0 < this.currentRowIndex && (this.currentRowIndex--, this.loadBeforeEdit() ? this.currentRowData = this.getData(this.currentDataSet[this.currentRowIndex]) : this.currentRowData = this.currentDataSet[this.currentRowIndex], "firefox" == Detectizr.browser.name ? (this.$.formid.clearData(), this.async(function() {
    this.$.formid.setData(clone(this.currentRowData));
  }, 10)) : this.$.formid.setData(clone(this.currentRowData)));
  this.handlePrevNextButtons();
}, nextAction:function(a) {
  this.currentRowIndex < this.currentDataSet.length - 1 && (this.currentRowIndex++, this.loadBeforeEdit() ? this.currentRowData = this.getData(this.currentDataSet[this.currentRowIndex]) : this.currentRowData = this.currentDataSet[this.currentRowIndex], "firefox" == Detectizr.browser.name ? (this.$.formid.clearData(), this.async(function() {
    this.$.formid.setData(clone(this.currentRowData));
  }, 10)) : this.$.formid.setData(clone(this.currentRowData)));
  this.handlePrevNextButtons();
}, editAction:function(a) {
  a = a.detail;
  this.mode = "edit";
  this.pageStack.push(this.pageSelected);
  console.log("editAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-form", {namespace:a.namespace}).loadBeforeEdit ? this.currentRowData = this.getData(a.data) : this.currentRowData = a.data;
  this.currentTable = a.table;
  this.currentDataSet = a.dataSet;
  this.currentRowIndex = a.rowIndex;
  console.log("currentRowData:", this.currentRowData);
  this.prevNextButtonsInvisible = null;
  this.handlePrevNextButtons();
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.$.formid.setData(clone(this.currentRowData));
  this.whenElementsReady(function() {
    this.pageSelected = 1;
  }.bind(this));
}, rowsSelected:function(a) {
  console.log("rowsSelected:", a.detail);
  if (a.detail.doubleTap) {
    var b = this.querySelector("#crudTableId");
    this.editAction({detail:{data:a.detail.rows[0], dataSet:b.dataSet, rowIndex:b.currentRowIndex, table:b, entity:this.entity, namespace:this.namespace}});
  }
}, refreshAction:function(a) {
  a = a.detail;
  console.log("refreshAction:", a);
  a.table.refresh();
}, delAction:function(a) {
  var b = a.detail;
  console.log("delAction:", b);
  this.currentTable = b.table;
  Lobibox.confirm({msg:tr("entitytypes.confirm_delete"), title:"&nbsp;", callback:function(b, d) {
    "yes" === d && (this.mode = "del", this.onDeleteOk(a));
  }.bind(this)});
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  try {
    this.deleteData(a.detail.data), this.async(function() {
      this.currentTable && this.currentTable.refresh();
    }, 100), this.notify(tr("entitytypes.deleted"), "success", "5000");
  } catch (b) {
    console.error("delAction:", b), a = null, a = b.message ? b.message : b.toString(), this.notify(a, "error", "10000");
  }
}, _addAction:function(a) {
  a = {detail:{namespace:this.namespace, entityChild:"", entity:this.entity}};
  this.addAction(a);
}, addAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  a = a.detail;
  this.mode = "add";
  this.pageStack.push(this.pageSelected);
  console.log("addAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  this.currentTable = a.table;
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.$.formid.setData({});
  this.whenElementsReady(function() {
    this.pageSelected = 1;
  }.bind(this));
}, detailAction:function(a) {
  console.log("detailAction:", a.detail);
  console.log("detailAction:", this.$.detailsOverviewId);
  var b = a.detail.data;
  this.$.detailsOverviewId.setData(a.detail.data);
  a = simpl4EntityManager.getPropertiesForEntity(this.mainEntityName, {namespace:this.namespace});
  this.panelHeaderDetails = this._maskedEval(a.title_expression, b, "");
  a = simpl4EntityManager.getEntity(this.mainEntityName, this.namespace);
  this.mainEntityId = this.getIdValue(this.mainEntityName, this.namespace, b);
  for (var c = [], d = 0; d < a.childs.length; d++) {
    var f = a.childs[d], g = {};
    if ("team" != f.modulename) {
      g.entity = f.modulename;
      g.namespace = f.namespace;
      g.title = tr("data." + f.name);
      g.id = f.name;
      g.buttonListDetail = this.buttonListDetail;
      g.rpc = {storeId:this.namespace + "_data", entity:this.mainEntityName, entityChild:f.name, id:b.id, pageSize:0};
      var h = f.datatype.split("/");
      g.type = "list" == h[0] ? "table" : "form";
      g.dependent = f.dependent;
      c.push(g);
    }
  }
  this.entityChildList = c;
  this.pageStack.push(this.pageSelected);
  this.async(function() {
    this.pageSelected = 2;
  }, 100);
}, storeData:function(a) {
  var b = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace}), c = b.customServiceUpdate, b = b.customServiceInsert, d = this.mode;
  return "add" == d && b ? this._storeDataCustom(a, b) : "edit" == d && c ? this._storeDataCustom(a, c) : this._storeData(a);
}, _storeData:function(a) {
  var b = this.getPack(this.mainEntityName);
  if (this.mainEntityName != this.currentEntityName) {
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, entityChild:this.currentEntityChildName, id:this.mainEntityId, idChild:this.getIdValue(this.mainEntityName, this.namespace, a), data:a};
  } else {
    var c = this.getIdValue(this.mainEntityName, this.namespace, a);
    console.log("storeData.idValue:", c);
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:c, data:a};
  }
  console.log("rpc:", a);
  return simpl4.util.Rpc.rpcSync("data:" + ("add" == this.mode ? "insert" : "update"), a);
}, _storeDataCustom:function(a, b) {
  -1 == b.indexOf(":") && (b = "camelRoute:" + b);
  -1 == b.indexOf(".") && (b = b.split(":"), b = b[0] + ":" + this.namespace + "." + b[1]);
  var c = this.getPack(this.mainEntityName);
  if (this.mainEntityName != this.currentEntityName) {
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + c.pack, entity:c.entityName, entityChild:this.currentEntityChildName, id:this.mainEntityId, idChild:this.getIdValue(this.mainEntityName, this.namespace, a), data:a};
  } else {
    var d = this.getIdValue(this.mainEntityName, this.namespace, a);
    console.log("idValue:", d);
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + c.pack, entity:c.entityName, id:d, data:a};
  }
  window.uuid && (a.uuid = window.uuid);
  return simpl4.util.Rpc.rpcSync(b, a);
}, deleteData:function(a) {
  var b = this.getPack(this.mainEntityName);
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:this.getIdValue(this.mainEntityName, this.namespace, a)};
  console.log("rpc.delete:", a);
  return simpl4.util.Rpc.rpcSync("data:delete", a);
}, getData:function(a) {
  var b = this.getPack(this.currentEntityName);
  a = this.getIdValue(this.currentEntityName, this.namespace, a);
  b = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:a};
  return simpl4.util.Rpc.rpcSync("data:queryOne", b);
}, getPack:function(a) {
  var b = "data", c = a;
  a && 0 < a.indexOf(":") && (b = a.split(":")[0], c = a.split(":")[1]);
  return {entityName:c, pack:b};
}, getIdValue:function(a, b, c) {
  console.log("getIdValue:", a + "/", c);
  a = simpl4.util.EntityManager.getEntity(a, b).primaryKeys;
  if (null == a || 0 === a.length) {
    a = null != c._id ? ["_id"] : ["id"];
  }
  for (var d = b = "", f = 0; f < a.length; f++) {
    b += d + (c[a[f]] || ""), d = ":";
  }
  return b;
}, saveAction:function() {
  var a, b = this.$.formid._postProcessService(), c = this.$.formid.getData();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid._postProcessLocal();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid.validate();
  console.log("saveAction.valid(" + b + "):", c);
  if (b) {
    try {
      "edit" == this.mode && (c = simpl4.util.Merge.merge(!0, this.currentRowData, c));
      console.log("saveAction.storeData:", c);
      var d = this.storeData(c).constraintViolations;
      if (d) {
        c = "";
        for (b = 0; b < d.length; b++) {
          var f = d[b];
          (a = f.message) && a.match(/^[@%].*/) && (a = tr(a.substring(1)));
          c += this.$.formid._getLabel(f.path) + " : " + a + "<br />";
        }
        this.alert(c);
      } else {
        a = "", a = "add" == this.mode ? tr("data.form.created") : tr("data.form.saved"), this.notify(a, "success", "10000"), this.needRefresh = !0, "add" == this.mode && this.cancelAction(), "edit" == this.mode && 0 == this.loadBeforeEdit() && (simpl4.util.Merge.merge(!1, this.currentRowData, c), console.log("merged:", JSON.stringify(this.currentRowData, null, 2)));
      }
    } catch (g) {
      console.error("saveAction:", g), g.message ? a = g.message : (a = g.toString(), a = a.substring(a.indexOf("entityName:") + 11), a = tr("data.form.save") + ": (" + a + ")"), this.notify(a, "error", "10000");
    }
  } else {
    a = tr("widgets.table.form_incomplete"), this.notify(a, "error", "10000");
  }
}, handlePrevNextButtons:function() {
  this.prevNextButtonsInvisible || (this.$.nextButton.disabled = this.currentRowIndex < this.currentDataSet.length - 1 ? !1 : !0, this.$.prevButton.disabled = 0 < this.currentRowIndex ? !1 : !0);
}, isForm:function(a) {
  return "form" == a.type;
}, isTable:function(a) {
  return "table" == a.type;
}, loadBeforeEdit:function() {
  return !0 === simpl4.util.EntityManager.getEntityViewProperties(this.entity, "main-form", {namespace:this.namespace}).loadBeforeEdit;
}, getFormData:function(a) {
  simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-form", {namespace:a.namespace});
  a = simpl4.util.Rpc.rpcSync("data:query", a.rpc);
  return 0 < a.rows.length ? a.rows[0] : {};
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("Crud._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}, whenElementsReady:function(a) {
  this.async(function() {
    a();
  }, 50);
}, getHelp:function() {
  return tr("crud2.select_with");
}, alert:function(a) {
  this.querySelector("#error p").innerHTML = a;
  this.querySelector("#error").open();
}});
Polymer({is:"simpl-crud2", behaviors:[Polymer.IronA11yKeysBehavior, LobiboxBehavior, DialogBehavior, TranslationsBehavior], properties:{getFirst:{value:!1, type:Boolean}, namespace:{type:String}, mode:{value:"add", type:String}, buttons:{value:"save,add,del,search", type:String}, entity:{type:String}, buttonList:{value:null, type:Array}}, observers:["buttonsChanged(isAttached)", "entityChanged(entity)"], attached:function() {
  this.isAttached = !0;
  1 != this.initialized && this.getFirst && this.async(function() {
    this.getInitialData();
  }, 200);
  this.initialized;
}, buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", text:tr("button.new"), disabled:!1}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}, save:{action:this.saveAction, icon:"save", text:tr("button.save"), disabled:!1}, search:{action:this.searchAction, icon:"search", text:tr("button.select"), disabled:!1}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.set("buttonList", b);
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, addAction:function(a) {
  this.mode = "add";
  this.setButtonState("save", !0);
  this.setButtonState("del", !1);
  this.$.formid.setData({});
  !0 !== a && this.fire("add-action", {entity:this.entity, namespace:this.namespace});
}, searchAction:function() {
  this.entityName = this.entity;
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.searchDialog);
  }, 200);
  this.fire("search-action", {entity:this.entity, namespace:this.namespace});
}, delAction:function() {
  Lobibox.confirm({msg:tr("entitytypes.confirm_delete"), title:"&nbsp;", callback:function(a, b) {
    "yes" === b && (this.mode = "del", this.setButtonState("del", !1), this.onDeleteOk({detail:this.currentData}), this.fire("del-action", {entity:this.entity, namespace:this.namespace}));
  }.bind(this)});
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  try {
    this.deleteData(a.detail), this.notify(tr("entitytypes.deleted"), "success", "5000"), this.addAction(!0);
  } catch (b) {
    console.error("delAction:", b), this.notify(b.message ? b.message : b.toString(), "error", "10000");
  }
}, selectCancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.searchDialog);
  }, 50);
}, selectAction:function(a) {
  this.setButtonState("del", !0);
  this.mode = "edit";
  var b = a.detail.data;
  console.log("selectAction:", a);
  this.closeDialog(this.$.searchDialog);
  this.currentData = clone(b);
  this.$.formid.setData(this.currentData);
}, rowsSelected:function(a) {
  console.log("rowsSelected:", a.detail);
  a.detail.doubleTap && (this.setButtonState("del", !0), this.mode = "edit", a = a.detail.rows[0], this.closeDialog(this.$.searchDialog), this.currentData = clone(a), this.$.formid.setData(this.currentData));
}, saveAction:function() {
  this._saveAction() && this.addAction(!0);
}, _saveAction:function() {
  var a, b = this.$.formid._postProcessService(), c = this.$.formid.getData();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid._postProcessLocal();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid.validate();
  console.log("saveAction.valid(" + b + "):", c);
  if (b) {
    try {
      console.log("saveAction.storeData:", c);
      var d = this.storeData(c);
      console.log("ret:", d);
      var f = d.constraintViolations;
      if (f) {
        c = "";
        for (d = 0; d < f.length; d++) {
          var g = f[d];
          (a = g.message) && a.match(/^[@%].*/) && (a = tr(a.substring(1)));
          c += this.$.formid._getLabel(g.path) + " : " + a + "<br />";
        }
        this.alert(c);
      } else {
        a = "", a = "add" == this.mode ? tr("data.form.created") : tr("data.form.saved"), c.id = d.id, this.$.formid.updateData(c), this.notify(a, "success", "10000");
      }
    } catch (h) {
      return console.error("saveAction:", h.stack), h.message ? a = h.message : (a = h.toString(), a = a.substring(a.indexOf("entityName:") + 11), a = tr("data.form.save") + ": (" + a + ")"), this.notify(a, "error", "10000"), !1;
    }
  } else {
    return a = tr("widgets.table.form_incomplete"), this.notify(a, "error", "10000"), !1;
  }
  return !0;
}, storeData:function(a) {
  var b = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace}), c = b.customServiceUpdate, b = b.customServiceInsert, d = this.mode;
  return "add" == d && b ? this._storeDataCustom(a, b) : "edit" == d && c ? this._storeDataCustom(a, c) : this._storeData(a);
}, _storeData:function(a) {
  var b = this.getIdValue(this.entity, this.namespace, a);
  console.log("storeData.idValue:", b);
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this.getPackFromEntity(this.entity), entity:this.entity, id:b, data:a};
  console.log("rpc:", a);
  console.log("mode:", this.mode);
  return simpl4.util.Rpc.rpcSync("data:" + ("add" == this.mode ? "insert" : "update"), a);
}, deleteData:function(a) {
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this.getPackFromEntity(this.entity), entity:this.entity, id:this.getIdValue(this.entity, this.namespace, a)};
  console.log("rpc.delete:", a);
  return simpl4.util.Rpc.rpcSync("data:delete", a);
}, getIdValue:function(a, b, c) {
  if ("add" == this.mode) {
    return null;
  }
  console.log("getIdValue:", a + "/", c);
  a = simpl4.util.EntityManager.getEntity(a, b).primaryKeys;
  if (null == a || 0 === a.length) {
    a = null != c._id ? ["_id"] : ["id"];
  }
  for (var d = b = "", f = 0; f < a.length; f++) {
    b += d + (c[a[f]] || ""), d = ":";
  }
  return b;
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
  this.setFormSpec(this.namespace, this.entity);
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    console.debug("setFormSpec:", c);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
    this.async(function() {
      this.$.formid.setData({});
    }, 5);
  }
}, getFormSpec:function(a) {
  return [simpl4FormManager.getCrudForm(a.entity, a.namespace || this.namespace)];
}, getEditMode:function() {
  return "edit";
}, getColumns:function(a) {
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "report", !1);
    colModel = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(colModel, a);
  } catch (d) {
    console.error("getSelectableFields:", d);
    return;
  }
  return colModel;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  a = [];
  for (var c = 0; c < colModel.length; c++) {
    var d = colModel[c], f = {};
    f.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + d.id);
    f.title = f.label;
    f.data = d.name;
    a.push(f);
  }
  console.debug("meta:", a);
  this.meta = a;
  this.data = [{articleId:"ABC"}];
}, getInitialData:function(a) {
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this._pack, entity:this.entity};
  a = simpl4.util.Rpc.rpcSync("data:query", a);
  null != a && a.rows && (this.currentData = clone(a.rows[0]), console.log("currentData:", this.currentData), this.$.formid.setData(this.currentData), this.mode = "edit");
  return a;
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  return tr(this.getPackFromEntity(this.entity) + "." + this.getSimpleEntityName(a));
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}});
Polymer({is:"simpl-details", properties:{namespace:{type:String}, entity:{observer:"entityChanged", type:String}}, attached:function(a) {
}, getCellData:function(a) {
  return this.data[a.data];
}, entityChanged:function(a) {
  this.namespace = this.namespace || simpl4.util.BaseManager.getNamespace();
  this.meta = this.preProcessMeta(simpl4EntityManager.getEntityViewFields(this.entity, "main-form", !0, {namespace:this.namespace}));
}, preProcessData:function(a) {
  var b = Object.keys(this.selectableList), c = Object.keys(this.dateList);
  Object.keys(this.datetimeList);
  a.forEach(function(a) {
    b.forEach(function(b) {
      a[b + "_display"] = this.selectableList[b][a[b]];
    }, this);
    c.forEach(function(b) {
      a[b + "_display"] = this.getDate(a[b]);
    }, this);
  }, this);
  return a;
}, preProcessMeta:function(a) {
  this.selectableList = {};
  this.dateList = {};
  this.datetimeList = {};
  this.columns = [];
  var b = [];
  null == a && (a = []);
  a.forEach(function(a) {
    var c = a.name;
    a.hidden || (a.selectable_items && Array.isArray(a.selectable_items.getItems()) && (this.selectableList[a.name] = this.toMap(a.selectable_items.getItems()), c = a.name + "_display"), "date" == a.datatype && (this.dateList[a.name] = !0, c = a.name + "_display"), "datetime" == a.datatype && (this.datetimeList[a.name] = !0, c = a.name + "_display"), c = {title:tr("data." + this.entity + "." + a.name), data:c}, b.push(c), this.columns.push(a.name));
  }, this);
  return b;
}, toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.value] = a.label;
  }, this);
  return b;
}, getDate:function(a) {
  return null == a ? "--" : moment(parseInt(a)).format("L");
}, setData:function(a) {
  this.data = null;
  this.async(function() {
    this.data = this.preProcessData([a])[0];
  }, 100);
}});
Polymer({is:"delete-dialog", behaviors:[TranslationsBehavior], onTap:function() {
  this.fire("delete-ok", this.data);
  this.$.dialogId.close();
}, close:function(a) {
  this.$.dialogId.close();
}, open:function(a) {
  this.data = a;
  this.$.dialogId.open();
}});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c || (c = "undefined" !== typeof window ? require("jquery") : require("jquery")(b));
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  function f(b) {
    var c, d, l = {};
    a.each(b, function(a, p) {
      (c = a.match(/^([^A-Z]+?)([A-Z])/)) && -1 !== "a aa ai ao as b fn i m o s ".indexOf(c[1] + " ") && (d = a.replace(c[0], c[2].toLowerCase()), l[d] = a, "o" === c[1] && f(b[a]));
    });
    b._hungarianMap = l;
  }
  function g(b, c, l) {
    b._hungarianMap || f(b);
    var p;
    a.each(c, function(f, t) {
      p = b._hungarianMap[f];
      p === d || !l && c[p] !== d || ("o" === p.charAt(0) ? (c[p] || (c[p] = {}), a.extend(!0, c[p], c[f]), g(b[p], c[p], l)) : c[p] = c[f]);
    });
  }
  function h(a) {
    var b = C.defaults.oLanguage, c = a.sZeroRecords;
    !a.sEmptyTable && c && "No data available in table" === b.sEmptyTable && fa(a, a, "sZeroRecords", "sEmptyTable");
    !a.sLoadingRecords && c && "Loading..." === b.sLoadingRecords && fa(a, a, "sZeroRecords", "sLoadingRecords");
    a.sInfoThousands && (a.sThousands = a.sInfoThousands);
    (a = a.sDecimal) && nb(a);
  }
  function m(a) {
    ca(a, "ordering", "bSort");
    ca(a, "orderMulti", "bSortMulti");
    ca(a, "orderClasses", "bSortClasses");
    ca(a, "orderCellsTop", "bSortCellsTop");
    ca(a, "order", "aaSorting");
    ca(a, "orderFixed", "aaSortingFixed");
    ca(a, "paging", "bPaginate");
    ca(a, "pagingType", "sPaginationType");
    ca(a, "pageLength", "iDisplayLength");
    ca(a, "searching", "bFilter");
    "boolean" === typeof a.sScrollX && (a.sScrollX = a.sScrollX ? "100%" : "");
    "boolean" === typeof a.scrollX && (a.scrollX = a.scrollX ? "100%" : "");
    if (a = a.aoSearchCols) {
      for (var b = 0, c = a.length; b < c; b++) {
        a[b] && g(C.models.oSearch, a[b]);
      }
    }
  }
  function u(b) {
    ca(b, "orderable", "bSortable");
    ca(b, "orderData", "aDataSort");
    ca(b, "orderSequence", "asSorting");
    ca(b, "orderDataType", "sortDataType");
    var c = b.aDataSort;
    c && !a.isArray(c) && (b.aDataSort = [c]);
  }
  function r(b) {
    if (!C.__browser) {
      var c = {};
      C.__browser = c;
      var d = a("<div/>").css({position:"fixed", top:0, left:0, height:1, width:1, overflow:"hidden"}).append(a("<div/>").css({position:"absolute", top:1, left:1, width:100, overflow:"scroll"}).append(a("<div/>").css({width:"100%", height:10}))).appendTo("body"), l = d.children(), f = l.children();
      c.barWidth = l[0].offsetWidth - l[0].clientWidth;
      c.bScrollOversize = 100 === f[0].offsetWidth && 100 !== l[0].clientWidth;
      c.bScrollbarLeft = 1 !== Math.round(f.offset().left);
      c.bBounding = d[0].getBoundingClientRect().width ? !0 : !1;
      d.remove();
    }
    a.extend(b.oBrowser, C.__browser);
    b.oScroll.iBarWidth = C.__browser.barWidth;
  }
  function n(a, b, c, l, f, p) {
    var g = !1;
    if (c !== d) {
      var t = c;
      g = !0;
    }
    for (; l !== f;) {
      a.hasOwnProperty(l) && (t = g ? b(t, a[l], l, a) : a[l], g = !0, l += p);
    }
    return t;
  }
  function v(b, d) {
    var l = C.defaults.column, f = b.aoColumns.length, l = a.extend({}, C.models.oColumn, l, {nTh:d ? d : c.createElement("th"), sTitle:l.sTitle ? l.sTitle : d ? d.innerHTML : "", aDataSort:l.aDataSort ? l.aDataSort : [f], mData:l.mData ? l.mData : f, idx:f});
    b.aoColumns.push(l);
    l = b.aoPreSearchCols;
    l[f] = a.extend({}, C.models.oSearch, l[f]);
    w(b, f, a(d).data());
  }
  function w(b, c, l) {
    c = b.aoColumns[c];
    var f = b.oClasses, p = a(c.nTh);
    if (!c.sWidthOrig) {
      c.sWidthOrig = p.attr("width") || null;
      var t = (p.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
      t && (c.sWidthOrig = t[1]);
    }
    l !== d && null !== l && (u(l), g(C.defaults.column, l), l.mDataProp === d || l.mData || (l.mData = l.mDataProp), l.sType && (c._sManualType = l.sType), l.className && !l.sClass && (l.sClass = l.className), a.extend(c, l), fa(c, l, "sWidth", "sWidthOrig"), l.iDataSort !== d && (c.aDataSort = [l.iDataSort]), fa(c, l, "aDataSort"));
    var h = c.mData, q = U(h), B = c.mRender ? U(c.mRender) : null;
    l = function(a) {
      return "string" === typeof a && -1 !== a.indexOf("@");
    };
    c._bAttrSrc = a.isPlainObject(h) && (l(h.sort) || l(h.type) || l(h.filter));
    c._setter = null;
    c.fnGetData = function(a, b, c) {
      var l = q(a, b, d, c);
      return B && b ? B(l, b, a, c) : l;
    };
    c.fnSetData = function(a, b, c) {
      return X(h)(a, b, c);
    };
    "number" !== typeof h && (b._rowReadObject = !0);
    b.oFeatures.bSort || (c.bSortable = !1, p.addClass(f.sSortableNone));
    b = -1 !== a.inArray("asc", c.asSorting);
    l = -1 !== a.inArray("desc", c.asSorting);
    c.bSortable && (b || l) ? b && !l ? (c.sSortingClass = f.sSortableAsc, c.sSortingClassJUI = f.sSortJUIAscAllowed) : !b && l ? (c.sSortingClass = f.sSortableDesc, c.sSortingClassJUI = f.sSortJUIDescAllowed) : (c.sSortingClass = f.sSortable, c.sSortingClassJUI = f.sSortJUI) : (c.sSortingClass = f.sSortableNone, c.sSortingClassJUI = "");
  }
  function y(a) {
    if (!1 !== a.oFeatures.bAutoWidth) {
      var b = a.aoColumns;
      Ma(a);
      for (var c = 0, d = b.length; c < d; c++) {
        b[c].nTh.style.width = b[c].sWidth;
      }
    }
    b = a.oScroll;
    "" === b.sY && "" === b.sX || Aa(a);
    K(a, null, "column-sizing", [a]);
  }
  function q(a, b) {
    a = t(a, "bVisible");
    return "number" === typeof a[b] ? a[b] : null;
  }
  function l(b, c) {
    b = t(b, "bVisible");
    c = a.inArray(c, b);
    return -1 !== c ? c : null;
  }
  function p(b) {
    var c = 0;
    a.each(b.aoColumns, function(b, d) {
      d.bVisible && "none" !== a(d.nTh).css("display") && c++;
    });
    return c;
  }
  function t(b, c) {
    var d = [];
    a.map(b.aoColumns, function(a, b) {
      a[c] && d.push(b);
    });
    return d;
  }
  function x(a) {
    var b = a.aoColumns, c = a.aoData, l = C.ext.type.detect, f, p, g;
    var t = 0;
    for (f = b.length; t < f; t++) {
      var h = b[t];
      var q = [];
      if (!h.sType && h._sManualType) {
        h.sType = h._sManualType;
      } else {
        if (!h.sType) {
          var B = 0;
          for (p = l.length; B < p; B++) {
            var m = 0;
            for (g = c.length; m < g; m++) {
              q[m] === d && (q[m] = F(a, m, t, "type"));
              var n = l[B](q[m], a);
              if (!n && B !== l.length - 1) {
                break;
              }
              if ("html" === n) {
                break;
              }
            }
            if (n) {
              h.sType = n;
              break;
            }
          }
          h.sType || (h.sType = "string");
        }
      }
    }
  }
  function z(b, c, l, f) {
    var p, g, t, h = b.aoColumns;
    if (c) {
      for (p = c.length - 1; 0 <= p; p--) {
        var q = c[p];
        var B = q.targets !== d ? q.targets : q.aTargets;
        a.isArray(B) || (B = [B]);
        var m = 0;
        for (g = B.length; m < g; m++) {
          if ("number" === typeof B[m] && 0 <= B[m]) {
            for (; h.length <= B[m];) {
              v(b);
            }
            f(B[m], q);
          } else {
            if ("number" === typeof B[m] && 0 > B[m]) {
              f(h.length + B[m], q);
            } else {
              if ("string" === typeof B[m]) {
                var n = 0;
                for (t = h.length; n < t; n++) {
                  ("_all" == B[m] || a(h[n].nTh).hasClass(B[m])) && f(n, q);
                }
              }
            }
          }
        }
      }
    }
    if (l) {
      for (p = 0, b = l.length; p < b; p++) {
        f(p, l[p]);
      }
    }
  }
  function A(b, c, l, f) {
    var p = b.aoData.length, g = a.extend(!0, {}, C.models.oRow, {src:l ? "dom" : "data", idx:p});
    g._aData = c;
    b.aoData.push(g);
    for (var t = b.aoColumns, h = 0, q = t.length; h < q; h++) {
      t[h].sType = null;
    }
    b.aiDisplayMaster.push(p);
    c = b.rowIdFn(c);
    c !== d && (b.aIds[c] = g);
    !l && b.oFeatures.bDeferRender || O(b, p, l, f);
    return p;
  }
  function E(b, c) {
    var d;
    c instanceof a || (c = a(c));
    return c.map(function(a, c) {
      d = oa(b, c);
      return A(b, d.data, c, d.cells);
    });
  }
  function F(a, b, c, l) {
    var f = a.iDraw, p = a.aoColumns[c], g = a.aoData[b]._aData, t = p.sDefaultContent, h = p.fnGetData(g, l, {settings:a, row:b, col:c});
    if (h === d) {
      return a.iDrawError != f && null === t && (ja(a, 0, "Requested unknown parameter " + ("function" == typeof p.mData ? "{function}" : "'" + p.mData + "'") + " for row " + b + ", column " + c, 4), a.iDrawError = f), t;
    }
    if ((h === g || null === h) && null !== t && l !== d) {
      h = t;
    } else {
      if ("function" === typeof h) {
        return h.call(g);
      }
    }
    return null === h && "display" == l ? "" : h;
  }
  function J(a, b, c, d) {
    a.aoColumns[c].fnSetData(a.aoData[b]._aData, d, {settings:a, row:b, col:c});
  }
  function N(b) {
    return a.map(b.match(/(\\.|[^\.])+/g) || [""], function(a) {
      return a.replace(/\\./g, ".");
    });
  }
  function U(b) {
    if (a.isPlainObject(b)) {
      var c = {};
      a.each(b, function(a, b) {
        b && (c[a] = U(b));
      });
      return function(a, b, l, f) {
        var p = c[b] || c._;
        return p !== d ? p(a, b, l, f) : a;
      };
    }
    if (null === b) {
      return function(a) {
        return a;
      };
    }
    if ("function" === typeof b) {
      return function(a, c, d, l) {
        return b(a, c, d, l);
      };
    }
    if ("string" !== typeof b || -1 === b.indexOf(".") && -1 === b.indexOf("[") && -1 === b.indexOf("(")) {
      return function(a, c) {
        return a[b];
      };
    }
    var l = function(b, c, f) {
      if ("" !== f) {
        var p = N(f);
        for (var g = 0, t = p.length; g < t; g++) {
          f = p[g].match(sa);
          var h = p[g].match(la);
          if (f) {
            p[g] = p[g].replace(sa, "");
            "" !== p[g] && (b = b[p[g]]);
            h = [];
            p.splice(0, g + 1);
            p = p.join(".");
            if (a.isArray(b)) {
              for (g = 0, t = b.length; g < t; g++) {
                h.push(l(b[g], c, p));
              }
            }
            b = f[0].substring(1, f[0].length - 1);
            b = "" === b ? h : h.join(b);
            break;
          } else {
            if (h) {
              p[g] = p[g].replace(la, "");
              b = b[p[g]]();
              continue;
            }
          }
          if (null === b || b[p[g]] === d) {
            return d;
          }
          b = b[p[g]];
        }
      }
      return b;
    };
    return function(a, c) {
      return l(a, c, b);
    };
  }
  function X(b) {
    if (a.isPlainObject(b)) {
      return X(b._);
    }
    if (null === b) {
      return function() {
      };
    }
    if ("function" === typeof b) {
      return function(a, c, d) {
        b(a, "set", c, d);
      };
    }
    if ("string" !== typeof b || -1 === b.indexOf(".") && -1 === b.indexOf("[") && -1 === b.indexOf("(")) {
      return function(a, c) {
        a[b] = c;
      };
    }
    var c = function(b, l, f) {
      f = N(f);
      var p = f[f.length - 1];
      for (var g, t, h = 0, q = f.length - 1; h < q; h++) {
        g = f[h].match(sa);
        t = f[h].match(la);
        if (g) {
          f[h] = f[h].replace(sa, "");
          b[f[h]] = [];
          p = f.slice();
          p.splice(0, h + 1);
          g = p.join(".");
          if (a.isArray(l)) {
            for (t = 0, q = l.length; t < q; t++) {
              p = {}, c(p, l[t], g), b[f[h]].push(p);
            }
          } else {
            b[f[h]] = l;
          }
          return;
        }
        t && (f[h] = f[h].replace(la, ""), b = b[f[h]](l));
        if (null === b[f[h]] || b[f[h]] === d) {
          b[f[h]] = {};
        }
        b = b[f[h]];
      }
      if (p.match(la)) {
        b[p.replace(la, "")](l);
      } else {
        b[p.replace(sa, "")] = l;
      }
    };
    return function(a, d) {
      return c(a, d, b);
    };
  }
  function W(a) {
    return da(a.aoData, "_aData");
  }
  function aa(a) {
    a.aoData.length = 0;
    a.aiDisplayMaster.length = 0;
    a.aiDisplay.length = 0;
    a.aIds = {};
  }
  function ia(a, b, c) {
    for (var l = -1, f = 0, p = a.length; f < p; f++) {
      a[f] == b ? l = f : a[f] > b && a[f]--;
    }
    -1 != l && c === d && a.splice(l, 1);
  }
  function S(a, b, c, l) {
    var f = a.aoData[b], p, g = function(c, d) {
      for (; c.childNodes.length;) {
        c.removeChild(c.firstChild);
      }
      c.innerHTML = F(a, b, d, "display");
    };
    if ("dom" !== c && (c && "auto" !== c || "dom" !== f.src)) {
      var t = f.anCells;
      if (t) {
        if (l !== d) {
          g(t[l], l);
        } else {
          for (c = 0, p = t.length; c < p; c++) {
            g(t[c], c);
          }
        }
      }
    } else {
      f._aData = oa(a, f, l, l === d ? d : f._aData).data;
    }
    f._aSortData = null;
    f._aFilterData = null;
    g = a.aoColumns;
    if (l !== d) {
      g[l].sType = null;
    } else {
      c = 0;
      for (p = g.length; c < p; c++) {
        g[c].sType = null;
      }
      P(a, f);
    }
  }
  function oa(b, c, l, f) {
    var p = [], g = c.firstChild, t, h = 0, q, m = b.aoColumns, B = b._rowReadObject;
    f = f !== d ? f : B ? {} : [];
    var n = function(a, b) {
      if ("string" === typeof a) {
        var c = a.indexOf("@");
        -1 !== c && (c = a.substring(c + 1), X(a)(f, b.getAttribute(c)));
      }
    }, x = function(b) {
      if (l === d || l === h) {
        t = m[h], q = a.trim(b.innerHTML), t && t._bAttrSrc ? (X(t.mData._)(f, q), n(t.mData.sort, b), n(t.mData.type, b), n(t.mData.filter, b)) : B ? (t._setter || (t._setter = X(t.mData)), t._setter(f, q)) : f[h] = q;
      }
      h++;
    };
    if (g) {
      for (; g;) {
        var V = g.nodeName.toUpperCase();
        if ("TD" == V || "TH" == V) {
          x(g), p.push(g);
        }
        g = g.nextSibling;
      }
    } else {
      for (p = c.anCells, g = 0, V = p.length; g < V; g++) {
        x(p[g]);
      }
    }
    (c = c.firstChild ? c : c.nTr) && (c = c.getAttribute("id")) && X(b.rowId)(f, c);
    return {data:f, cells:p};
  }
  function O(b, d, l, f) {
    var p = b.aoData[d], g = p._aData, t = [], h;
    if (null === p.nTr) {
      var q = l || c.createElement("tr");
      p.nTr = q;
      p.anCells = t;
      q._DT_RowIndex = d;
      P(b, p);
      var m = 0;
      for (h = b.aoColumns.length; m < h; m++) {
        var B = b.aoColumns[m];
        var n = l ? f[m] : c.createElement(B.sCellType);
        n._DT_CellIndex = {row:d, column:m};
        t.push(n);
        l && !B.mRender && B.mData === m || a.isPlainObject(B.mData) && B.mData._ === m + ".display" || (n.innerHTML = F(b, d, m, "display"));
        B.sClass && (n.className += " " + B.sClass);
        B.bVisible && !l ? q.appendChild(n) : !B.bVisible && l && n.parentNode.removeChild(n);
        B.fnCreatedCell && B.fnCreatedCell.call(b.oInstance, n, F(b, d, m), g, d, m);
      }
      K(b, "aoRowCreatedCallback", null, [q, g, d]);
    }
    p.nTr.setAttribute("role", "row");
  }
  function P(b, c) {
    var d = c.nTr, l = c._aData;
    if (d) {
      if (b = b.rowIdFn(l)) {
        d.id = b;
      }
      l.DT_RowClass && (b = l.DT_RowClass.split(" "), c.__rowc = c.__rowc ? Ba(c.__rowc.concat(b)) : b, a(d).removeClass(c.__rowc.join(" ")).addClass(l.DT_RowClass));
      l.DT_RowAttr && a(d).attr(l.DT_RowAttr);
      l.DT_RowData && a(d).data(l.DT_RowData);
    }
  }
  function I(b) {
    var c, d, l = b.nTHead, f = b.nTFoot, p = 0 === a("th, td", l).length, g = b.oClasses, t = b.aoColumns;
    p && (d = a("<tr/>").appendTo(l));
    var h = 0;
    for (c = t.length; h < c; h++) {
      var q = t[h];
      var m = a(q.nTh).addClass(q.sClass);
      p && m.appendTo(d);
      b.oFeatures.bSort && (m.addClass(q.sSortingClass), !1 !== q.bSortable && (m.attr("tabindex", b.iTabIndex).attr("aria-controls", b.sTableId), Na(b, q.nTh, h)));
      q.sTitle != m[0].innerHTML && m.html(q.sTitle);
      Oa(b, "header")(b, m, q, g);
    }
    p && qa(b.aoHeader, l);
    a(l).find(">tr").attr("role", "row");
    a(l).find(">tr>th, >tr>td").addClass(g.sHeaderTH);
    a(f).find(">tr>th, >tr>td").addClass(g.sFooterTH);
    if (null !== f) {
      for (b = b.aoFooter[0], h = 0, c = b.length; h < c; h++) {
        q = t[h], q.nTf = b[h].cell, q.sClass && a(q.nTf).addClass(q.sClass);
      }
    }
  }
  function Q(b, c, l) {
    var f, p, g = [], t = [], h = b.aoColumns.length;
    if (c) {
      l === d && (l = !1);
      var q = 0;
      for (f = c.length; q < f; q++) {
        g[q] = c[q].slice();
        g[q].nTr = c[q].nTr;
        for (p = h - 1; 0 <= p; p--) {
          b.aoColumns[p].bVisible || l || g[q].splice(p, 1);
        }
        t.push([]);
      }
      q = 0;
      for (f = g.length; q < f; q++) {
        if (b = g[q].nTr) {
          for (; p = b.firstChild;) {
            b.removeChild(p);
          }
        }
        p = 0;
        for (c = g[q].length; p < c; p++) {
          var m = h = 1;
          if (t[q][p] === d) {
            b.appendChild(g[q][p].cell);
            for (t[q][p] = 1; g[q + h] !== d && g[q][p].cell == g[q + h][p].cell;) {
              t[q + h][p] = 1, h++;
            }
            for (; g[q][p + m] !== d && g[q][p].cell == g[q][p + m].cell;) {
              for (l = 0; l < h; l++) {
                t[q + l][p + m] = 1;
              }
              m++;
            }
            a(g[q][p].cell).attr("rowspan", h).attr("colspan", m);
          }
        }
      }
    }
  }
  function ba(b) {
    var c = K(b, "aoPreDrawCallback", "preDraw", [b]);
    if (-1 !== a.inArray(!1, c)) {
      ea(b, !1);
    } else {
      var c = [], l = 0, f = b.asStripeClasses, g = f.length, t = b.oLanguage, h = b.iInitDisplayStart, q = "ssp" == Y(b), m = b.aiDisplay;
      b.bDrawing = !0;
      h !== d && -1 !== h && (b._iDisplayStart = q ? h : h >= b.fnRecordsDisplay() ? 0 : h, b.iInitDisplayStart = -1);
      var h = b._iDisplayStart, B = b.fnDisplayEnd();
      if (b.bDeferLoading) {
        b.bDeferLoading = !1, b.iDraw++, ea(b, !1);
      } else {
        if (!q) {
          b.iDraw++;
        } else {
          if (!b.bDestroying && !cb(b)) {
            return;
          }
        }
      }
      if (0 !== m.length) {
        for (t = q ? b.aoData.length : B, q = q ? 0 : h; q < t; q++) {
          var n = m[q], x = b.aoData[n];
          null === x.nTr && O(b, n);
          n = x.nTr;
          if (0 !== g) {
            var u = f[l % g];
            x._sRowStripe != u && (a(n).removeClass(x._sRowStripe).addClass(u), x._sRowStripe = u);
          }
          K(b, "aoRowCallback", null, [n, x._aData, l, q]);
          c.push(n);
          l++;
        }
      } else {
        l = t.sZeroRecords, 1 == b.iDraw && "ajax" == Y(b) ? l = t.sLoadingRecords : t.sEmptyTable && 0 === b.fnRecordsTotal() && (l = t.sEmptyTable), c[0] = a("<tr/>", {"class":g ? f[0] : ""}).append(a("<td />", {valign:"top", colSpan:p(b), "class":b.oClasses.sRowEmpty}).html(l))[0];
      }
      K(b, "aoHeaderCallback", "header", [a(b.nTHead).children("tr")[0], W(b), h, B, m]);
      K(b, "aoFooterCallback", "footer", [a(b.nTFoot).children("tr")[0], W(b), h, B, m]);
      f = a(b.nTBody);
      f.children().detach();
      f.append(a(c));
      K(b, "aoDrawCallback", "draw", [b]);
      b.bSorted = !1;
      b.bFiltered = !1;
      b.bDrawing = !1;
    }
  }
  function ga(a, b) {
    var c = a.oFeatures, d = c.bFilter;
    c.bSort && ob(a);
    d ? ra(a, a.oPreviousSearch) : a.aiDisplay = a.aiDisplayMaster.slice();
    !0 !== b && (a._iDisplayStart = 0);
    a._drawHold = b;
    ba(a);
    a._drawHold = !1;
  }
  function pa(b) {
    var c = b.oClasses, d = a(b.nTable), d = a("<div/>").insertBefore(d), l = b.oFeatures, f = a("<div/>", {id:b.sTableId + "_wrapper", "class":c.sWrapper + (b.nTFoot ? "" : " " + c.sNoFooter)});
    b.nHolding = d[0];
    b.nTableWrapper = f[0];
    b.nTableReinsertBefore = b.nTable.nextSibling;
    for (var p = b.sDom.split(""), g, t, h, q, m, B, n = 0; n < p.length; n++) {
      g = null;
      t = p[n];
      if ("<" == t) {
        h = a("<div/>")[0];
        q = p[n + 1];
        if ("'" == q || '"' == q) {
          m = "";
          for (B = 2; p[n + B] != q;) {
            m += p[n + B], B++;
          }
          "H" == m ? m = c.sJUIHeader : "F" == m && (m = c.sJUIFooter);
          -1 != m.indexOf(".") ? (q = m.split("."), h.id = q[0].substr(1, q[0].length - 1), h.className = q[1]) : "#" == m.charAt(0) ? h.id = m.substr(1, m.length - 1) : h.className = m;
          n += B;
        }
        f.append(h);
        f = a(h);
      } else {
        if (">" == t) {
          f = f.parent();
        } else {
          if ("l" == t && l.bPaginate && l.bLengthChange) {
            g = pb(b);
          } else {
            if ("f" == t && l.bFilter) {
              g = fb(b);
            } else {
              if ("r" == t && l.bProcessing) {
                g = qb(b);
              } else {
                if ("t" == t) {
                  g = rb(b);
                } else {
                  if ("i" == t && l.bInfo) {
                    g = mb(b);
                  } else {
                    if ("p" == t && l.bPaginate) {
                      g = sb(b);
                    } else {
                      if (0 !== C.ext.feature.length) {
                        for (h = C.ext.feature, B = 0, q = h.length; B < q; B++) {
                          if (t == h[B].cFeature) {
                            g = h[B].fnInit(b);
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      g && (h = b.aanFeatures, h[t] || (h[t] = []), h[t].push(g), f.append(g));
    }
    d.replaceWith(f);
    b.nHolding = null;
  }
  function qa(b, c) {
    c = a(c).children("tr");
    var d, l, f;
    b.splice(0, b.length);
    var p = 0;
    for (f = c.length; p < f; p++) {
      b.push([]);
    }
    p = 0;
    for (f = c.length; p < f; p++) {
      var g = c[p];
      for (d = g.firstChild; d;) {
        if ("TD" == d.nodeName.toUpperCase() || "TH" == d.nodeName.toUpperCase()) {
          var t = 1 * d.getAttribute("colspan");
          var h = 1 * d.getAttribute("rowspan");
          t = t && 0 !== t && 1 !== t ? t : 1;
          h = h && 0 !== h && 1 !== h ? h : 1;
          var q = 0;
          for (l = b[p]; l[q];) {
            q++;
          }
          var m = q;
          var B = 1 === t ? !0 : !1;
          for (l = 0; l < t; l++) {
            for (q = 0; q < h; q++) {
              b[p + q][m + l] = {cell:d, unique:B}, b[p + q].nTr = g;
            }
          }
        }
        d = d.nextSibling;
      }
    }
  }
  function va(a, b, c) {
    var d = [];
    c || (c = a.aoHeader, b && (c = [], qa(c, b)));
    b = 0;
    for (var l = c.length; b < l; b++) {
      for (var f = 0, p = c[b].length; f < p; f++) {
        !c[b][f].unique || d[f] && a.bSortCellsTop || (d[f] = c[b][f].cell);
      }
    }
    return d;
  }
  function wa(b, c, d) {
    K(b, "aoServerParams", "serverParams", [c]);
    if (c && a.isArray(c)) {
      var l = {}, f = /(.*?)\[\]$/;
      a.each(c, function(a, b) {
        (a = b.name.match(f)) ? (a = a[0], l[a] || (l[a] = []), l[a].push(b.value)) : l[b.name] = b.value;
      });
      c = l;
    }
    var p = b.ajax, g = b.oInstance, t = function(a) {
      K(b, null, "xhr", [b, a, b.jqXHR]);
      d(a);
    };
    if (a.isPlainObject(p) && p.data) {
      var h = p.data;
      var q = a.isFunction(h) ? h(c, b) : h;
      c = a.isFunction(h) && q ? q : a.extend(!0, c, q);
      delete p.data;
    }
    q = {data:c, success:function(a) {
      var c = a.error || a.sError;
      c && ja(b, 0, c);
      b.json = a;
      t(a);
    }, dataType:"json", cache:!1, type:b.sServerMethod, error:function(c, d, l) {
      l = K(b, null, "xhr", [b, null, b.jqXHR]);
      -1 === a.inArray(!0, l) && ("parsererror" == d ? ja(b, 0, "Invalid JSON response", 1) : 4 === c.readyState && ja(b, 0, "Ajax error", 7));
      ea(b, !1);
    }};
    b.oAjaxData = c;
    K(b, null, "preXhr", [b, c]);
    b.fnServerData ? b.fnServerData.call(g, b.sAjaxSource, a.map(c, function(a, b) {
      return {name:b, value:a};
    }), t, b) : b.sAjaxSource || "string" === typeof p ? b.jqXHR = a.ajax(a.extend(q, {url:p || b.sAjaxSource})) : a.isFunction(p) ? b.jqXHR = p.call(g, c, t, b) : (b.jqXHR = a.ajax(a.extend(q, p)), p.data = h);
  }
  function cb(a) {
    return a.bAjaxDataGet ? (a.iDraw++, ea(a, !0), wa(a, db(a), function(b) {
      eb(a, b);
    }), !1) : !0;
  }
  function db(b) {
    var c = b.aoColumns, d = c.length, l = b.oFeatures, f = b.oPreviousSearch, p = b.aoPreSearchCols, g = [], t = ma(b);
    var h = b._iDisplayStart;
    var q = !1 !== l.bPaginate ? b._iDisplayLength : -1;
    var m = function(a, b) {
      g.push({name:a, value:b});
    };
    m("sEcho", b.iDraw);
    m("iColumns", d);
    m("sColumns", da(c, "sName").join(","));
    m("iDisplayStart", h);
    m("iDisplayLength", q);
    var B = {draw:b.iDraw, columns:[], order:[], start:h, length:q, search:{value:f.sSearch, regex:f.bRegex}};
    for (h = 0; h < d; h++) {
      var n = c[h];
      var x = p[h];
      q = "function" == typeof n.mData ? "function" : n.mData;
      B.columns.push({data:q, name:n.sName, searchable:n.bSearchable, orderable:n.bSortable, search:{value:x.sSearch, regex:x.bRegex}});
      m("mDataProp_" + h, q);
      l.bFilter && (m("sSearch_" + h, x.sSearch), m("bRegex_" + h, x.bRegex), m("bSearchable_" + h, n.bSearchable));
      l.bSort && m("bSortable_" + h, n.bSortable);
    }
    l.bFilter && (m("sSearch", f.sSearch), m("bRegex", f.bRegex));
    l.bSort && (a.each(t, function(a, b) {
      B.order.push({column:b.col, dir:b.dir});
      m("iSortCol_" + a, b.col);
      m("sSortDir_" + a, b.dir);
    }), m("iSortingCols", t.length));
    c = C.ext.legacy.ajax;
    return null === c ? b.sAjaxSource ? g : B : c ? g : B;
  }
  function eb(a, b) {
    var c = function(a, c) {
      return b[a] !== d ? b[a] : b[c];
    }, l = xa(a, b), f = c("sEcho", "draw"), p = c("iTotalRecords", "recordsTotal"), c = c("iTotalDisplayRecords", "recordsFiltered");
    if (f) {
      if (1 * f < a.iDraw) {
        return;
      }
      a.iDraw = 1 * f;
    }
    aa(a);
    a._iRecordsTotal = parseInt(p, 10);
    a._iRecordsDisplay = parseInt(c, 10);
    f = 0;
    for (p = l.length; f < p; f++) {
      A(a, l[f]);
    }
    a.aiDisplay = a.aiDisplayMaster.slice();
    a.bAjaxDataGet = !1;
    ba(a);
    a._bInitComplete || Ca(a, b);
    a.bAjaxDataGet = !0;
    ea(a, !1);
  }
  function xa(b, c) {
    b = a.isPlainObject(b.ajax) && b.ajax.dataSrc !== d ? b.ajax.dataSrc : b.sAjaxDataProp;
    return "data" === b ? c.aaData || c[b] : "" !== b ? U(b)(c) : c;
  }
  function fb(b) {
    var d = b.oClasses, l = b.sTableId, f = b.oLanguage, p = b.oPreviousSearch, g = b.aanFeatures, t = '<input type="search" class="' + d.sFilterInput + '"/>', h = f.sSearch, h = h.match(/_INPUT_/) ? h.replace("_INPUT_", t) : h + t, d = a("<div/>", {id:g.f ? null : l + "_filter", "class":d.sFilter}).append(a("<label/>").append(h)), g = function() {
      var a = this.value ? this.value : "";
      a != p.sSearch && (ra(b, {sSearch:a, bRegex:p.bRegex, bSmart:p.bSmart, bCaseInsensitive:p.bCaseInsensitive}), b._iDisplayStart = 0, ba(b));
    }, t = null !== b.searchDelay ? b.searchDelay : "ssp" === Y(b) ? 400 : 0, q = a("input", d).val(p.sSearch).attr("placeholder", f.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT", t ? Pa(g, t) : g).bind("keypress.DT", function(a) {
      if (13 == a.keyCode) {
        return !1;
      }
    }).attr("aria-controls", l);
    a(b.nTable).on("search.dt.DT", function(a, d) {
      if (b === d) {
        try {
          q[0] !== c.activeElement && q.val(p.sSearch);
        } catch (ac) {
        }
      }
    });
    return d[0];
  }
  function ra(a, b, c) {
    var l = a.oPreviousSearch, f = a.aoPreSearchCols, p = function(a) {
      l.sSearch = a.sSearch;
      l.bRegex = a.bRegex;
      l.bSmart = a.bSmart;
      l.bCaseInsensitive = a.bCaseInsensitive;
    }, g = function(a) {
      return a.bEscapeRegex !== d ? !a.bEscapeRegex : a.bRegex;
    };
    x(a);
    if ("ssp" != Y(a)) {
      ib(a, b.sSearch, c, g(b), b.bSmart, b.bCaseInsensitive);
      p(b);
      for (b = 0; b < f.length; b++) {
        hb(a, f[b].sSearch, b, g(f[b]), f[b].bSmart, f[b].bCaseInsensitive);
      }
      gb(a);
    } else {
      p(b);
    }
    a.bFiltered = !0;
    K(a, null, "search", [a]);
  }
  function gb(b) {
    for (var c = C.ext.search, d = b.aiDisplay, l, f, p = 0, g = c.length; p < g; p++) {
      for (var t = [], h = 0, q = d.length; h < q; h++) {
        f = d[h], l = b.aoData[f], c[p](b, l._aFilterData, f, l._aData, h) && t.push(f);
      }
      d.length = 0;
      a.merge(d, t);
    }
  }
  function hb(a, b, c, d, l, f) {
    if ("" !== b) {
      var p = a.aiDisplay;
      d = La(b, d, l, f);
      for (l = p.length - 1; 0 <= l; l--) {
        b = a.aoData[p[l]]._aFilterData[c], d.test(b) || p.splice(l, 1);
      }
    }
  }
  function ib(a, b, c, d, l, f) {
    d = La(b, d, l, f);
    l = a.oPreviousSearch.sSearch;
    f = a.aiDisplayMaster;
    0 !== C.ext.search.length && (c = !0);
    var p = jb(a);
    if (0 >= b.length) {
      a.aiDisplay = f.slice();
    } else {
      if (p || c || l.length > b.length || 0 !== b.indexOf(l) || a.bSorted) {
        a.aiDisplay = f.slice();
      }
      b = a.aiDisplay;
      for (c = b.length - 1; 0 <= c; c--) {
        d.test(a.aoData[b[c]]._sFilterRow) || b.splice(c, 1);
      }
    }
  }
  function La(b, c, d, l) {
    b = c ? b : Qa(b);
    d && (b = "^(?=.*?" + a.map(b.match(/"[^"]+"|[^ ]+/g) || [""], function(a) {
      if ('"' === a.charAt(0)) {
        var b = a.match(/^"(.*)"$/);
        a = b ? b[1] : a;
      }
      return a.replace('"', "");
    }).join(")(?=.*?") + ").*$");
    return new RegExp(b, l ? "i" : "");
  }
  function jb(a) {
    var b = a.aoColumns, c, d, l = C.ext.type.search;
    var f = !1;
    var p = 0;
    for (c = a.aoData.length; p < c; p++) {
      var g = a.aoData[p];
      if (!g._aFilterData) {
        var t = [];
        var h = 0;
        for (d = b.length; h < d; h++) {
          f = b[h];
          if (f.bSearchable) {
            var q = F(a, p, h, "filter");
            l[f.sType] && (q = l[f.sType](q));
            null === q && (q = "");
            "string" !== typeof q && q.toString && (q = q.toString());
          } else {
            q = "";
          }
          q.indexOf && -1 !== q.indexOf("&") && (Da.innerHTML = q, q = Ob ? Da.textContent : Da.innerText);
          q.replace && (q = q.replace(/[\r\n]/g, ""));
          t.push(q);
        }
        g._aFilterData = t;
        g._sFilterRow = t.join("  ");
        f = !0;
      }
    }
    return f;
  }
  function kb(a) {
    return {search:a.sSearch, smart:a.bSmart, regex:a.bRegex, caseInsensitive:a.bCaseInsensitive};
  }
  function lb(a) {
    return {sSearch:a.search, bSmart:a.smart, bRegex:a.regex, bCaseInsensitive:a.caseInsensitive};
  }
  function mb(b) {
    var c = b.sTableId, d = b.aanFeatures.i, l = a("<div/>", {"class":b.oClasses.sInfo, id:d ? null : c + "_info"});
    d || (b.aoDrawCallback.push({fn:tb, sName:"information"}), l.attr("role", "status").attr("aria-live", "polite"), a(b.nTable).attr("aria-describedby", c + "_info"));
    return l[0];
  }
  function tb(b) {
    var c = b.aanFeatures.i;
    if (0 !== c.length) {
      var d = b.oLanguage, l = b._iDisplayStart + 1, f = b.fnDisplayEnd(), p = b.fnRecordsTotal(), g = b.fnRecordsDisplay(), t = g ? d.sInfo : d.sInfoEmpty;
      g !== p && (t += " " + d.sInfoFiltered);
      t += d.sInfoPostFix;
      t = ub(b, t);
      d = d.fnInfoCallback;
      null !== d && (t = d.call(b.oInstance, b, l, f, p, g, t));
      a(c).html(t);
    }
  }
  function ub(a, b) {
    var c = a.fnFormatNumber, d = a._iDisplayStart + 1, l = a._iDisplayLength, f = a.fnRecordsDisplay(), p = -1 === l;
    return b.replace(/_START_/g, c.call(a, d)).replace(/_END_/g, c.call(a, a.fnDisplayEnd())).replace(/_MAX_/g, c.call(a, a.fnRecordsTotal())).replace(/_TOTAL_/g, c.call(a, f)).replace(/_PAGE_/g, c.call(a, p ? 1 : Math.ceil(d / l))).replace(/_PAGES_/g, c.call(a, p ? 1 : Math.ceil(f / l)));
  }
  function ta(a) {
    var b = a.iInitDisplayStart, c = a.aoColumns;
    var d = a.oFeatures;
    var l = a.bDeferLoading;
    if (a.bInitialised) {
      pa(a);
      I(a);
      Q(a, a.aoHeader);
      Q(a, a.aoFooter);
      ea(a, !0);
      d.bAutoWidth && Ma(a);
      var f = 0;
      for (d = c.length; f < d; f++) {
        var p = c[f];
        p.sWidth && (p.nTh.style.width = M(p.sWidth));
      }
      K(a, null, "preInit", [a]);
      ga(a);
      c = Y(a);
      if ("ssp" != c || l) {
        "ajax" == c ? wa(a, [], function(c) {
          var d = xa(a, c);
          for (f = 0; f < d.length; f++) {
            A(a, d[f]);
          }
          a.iInitDisplayStart = b;
          ga(a);
          ea(a, !1);
          Ca(a, c);
        }, a) : (ea(a, !1), Ca(a));
      }
    } else {
      setTimeout(function() {
        ta(a);
      }, 200);
    }
  }
  function Ca(a, b) {
    a._bInitComplete = !0;
    (b || a.oInit.aaData) && y(a);
    K(a, null, "plugin-init", [a, b]);
    K(a, "aoInitComplete", "init", [a, b]);
  }
  function Ra(a, b) {
    b = parseInt(b, 10);
    a._iDisplayLength = b;
    Sa(a);
    K(a, null, "length", [a, b]);
  }
  function pb(b) {
    for (var c = b.oClasses, d = b.sTableId, l = b.aLengthMenu, f = a.isArray(l[0]), p = f ? l[0] : l, l = f ? l[1] : l, f = a("<select/>", {name:d + "_length", "aria-controls":d, "class":c.sLengthSelect}), g = 0, t = p.length; g < t; g++) {
      f[0][g] = new Option(l[g], p[g]);
    }
    var h = a("<div><label/></div>").addClass(c.sLength);
    b.aanFeatures.l || (h[0].id = d + "_length");
    h.children().append(b.oLanguage.sLengthMenu.replace("_MENU_", f[0].outerHTML));
    a("select", h).val(b._iDisplayLength).bind("change.DT", function(c) {
      Ra(b, a(this).val());
      ba(b);
    });
    a(b.nTable).bind("length.dt.DT", function(c, d, l) {
      b === d && a("select", h).val(l);
    });
    return h[0];
  }
  function sb(b) {
    var c = b.sPaginationType, d = C.ext.pager[c], l = "function" === typeof d, f = function(a) {
      ba(a);
    }, c = a("<div/>").addClass(b.oClasses.sPaging + c)[0], p = b.aanFeatures;
    l || d.fnInit(b, c, f);
    p.p || (c.id = b.sTableId + "_paginate", b.aoDrawCallback.push({fn:function(a) {
      if (l) {
        var b = a._iDisplayStart, c = a._iDisplayLength, g = a.fnRecordsDisplay(), t = -1 === c, b = t ? 0 : Math.ceil(b / c), c = t ? 1 : Math.ceil(g / c), g = d(b, c), h, t = 0;
        for (h = p.p.length; t < h; t++) {
          Oa(a, "pageButton")(a, p.p[t], t, g, b, c);
        }
      } else {
        d.fnUpdate(a, f);
      }
    }, sName:"pagination"}));
    return c;
  }
  function Ta(a, b, c) {
    var d = a._iDisplayStart, l = a._iDisplayLength, f = a.fnRecordsDisplay();
    0 === f || -1 === l ? d = 0 : "number" === typeof b ? (d = b * l, d > f && (d = 0)) : "first" == b ? d = 0 : "previous" == b ? (d = 0 <= l ? d - l : 0, 0 > d && (d = 0)) : "next" == b ? d + l < f && (d += l) : "last" == b ? d = Math.floor((f - 1) / l) * l : ja(a, 0, "Unknown paging action: " + b, 5);
    b = a._iDisplayStart !== d;
    a._iDisplayStart = d;
    b && (K(a, null, "page", [a]), c && ba(a));
    return b;
  }
  function qb(b) {
    return a("<div/>", {id:b.aanFeatures.r ? null : b.sTableId + "_processing", "class":b.oClasses.sProcessing}).html(b.oLanguage.sProcessing).insertBefore(b.nTable)[0];
  }
  function ea(b, c) {
    b.oFeatures.bProcessing && a(b.aanFeatures.r).css("display", c ? "block" : "none");
    K(b, null, "processing", [b, c]);
  }
  function rb(b) {
    var c = a(b.nTable);
    c.attr("role", "grid");
    var d = b.oScroll;
    if ("" === d.sX && "" === d.sY) {
      return b.nTable;
    }
    var l = d.sX, f = d.sY, p = b.oClasses, g = c.children("caption"), t = g.length ? g[0]._captionSide : null, h = a(c[0].cloneNode(!1)), q = a(c[0].cloneNode(!1)), m = c.children("tfoot");
    m.length || (m = null);
    h = a("<div/>", {"class":p.sScrollWrapper}).append(a("<div/>", {"class":p.sScrollHead}).css({overflow:"hidden", position:"relative", border:0, width:l ? l ? M(l) : null : "100%"}).append(a("<div/>", {"class":p.sScrollHeadInner}).css({"box-sizing":"content-box", width:d.sXInner || "100%"}).append(h.removeAttr("id").css("margin-left", 0).append("top" === t ? g : null).append(c.children("thead"))))).append(a("<div/>", {"class":p.sScrollBody}).css({position:"relative", overflow:"auto", width:l ? 
    M(l) : null}).append(c));
    m && h.append(a("<div/>", {"class":p.sScrollFoot}).css({overflow:"hidden", border:0, width:l ? l ? M(l) : null : "100%"}).append(a("<div/>", {"class":p.sScrollFootInner}).append(q.removeAttr("id").css("margin-left", 0).append("bottom" === t ? g : null).append(c.children("tfoot")))));
    var c = h.children(), n = c[0], p = c[1], x = m ? c[2] : null;
    if (l) {
      a(p).on("scroll.DT", function(a) {
        a = this.scrollLeft;
        n.scrollLeft = a;
        m && (x.scrollLeft = a);
      });
    }
    a(p).css(f && d.bCollapse ? "max-height" : "height", f);
    b.nScrollHead = n;
    b.nScrollBody = p;
    b.nScrollFoot = x;
    b.aoDrawCallback.push({fn:Aa, sName:"scrolling"});
    return h[0];
  }
  function Aa(b) {
    var c = b.oScroll, l = c.sX, f = c.sXInner, p = c.sY, c = c.iBarWidth, g = a(b.nScrollHead), t = g[0].style, h = g.children("div"), m = h[0].style, n = h.children("table"), h = b.nScrollBody, x = a(h), B = h.style, u = a(b.nScrollFoot).children("div"), z = u.children("table"), r = a(b.nTHead), A = a(b.nTable), E = A[0], v = E.style, w = b.nTFoot ? a(b.nTFoot) : null, F = b.oBrowser, J = F.bScrollOversize, N = da(b.aoColumns, "nTh"), ba = [], U = [], ga = [], X = [], ia, pa = function(a) {
      a = a.style;
      a.paddingTop = "0";
      a.paddingBottom = "0";
      a.borderTopWidth = "0";
      a.borderBottomWidth = "0";
      a.height = 0;
    };
    var Q = h.scrollHeight > h.clientHeight;
    if (b.scrollBarVis !== Q && b.scrollBarVis !== d) {
      b.scrollBarVis = Q, y(b);
    } else {
      b.scrollBarVis = Q;
      A.children("thead, tfoot").remove();
      if (w) {
        var aa = w.clone().prependTo(A);
        var W = w.find("tr");
        aa = aa.find("tr");
      }
      var S = r.clone().prependTo(A);
      r = r.find("tr");
      Q = S.find("tr");
      S.find("th, td").removeAttr("tabindex");
      l || (B.width = "100%", g[0].style.width = "100%");
      a.each(va(b, S), function(a, c) {
        ia = q(b, a);
        c.style.width = b.aoColumns[ia].sWidth;
      });
      w && ha(function(a) {
        a.style.width = "";
      }, aa);
      g = A.outerWidth();
      "" === l ? (v.width = "100%", J && (A.find("tbody").height() > h.offsetHeight || "scroll" == x.css("overflow-y")) && (v.width = M(A.outerWidth() - c)), g = A.outerWidth()) : "" !== f && (v.width = M(f), g = A.outerWidth());
      ha(pa, Q);
      ha(function(b) {
        ga.push(b.innerHTML);
        ba.push(M(a(b).css("width")));
      }, Q);
      ha(function(b, c) {
        -1 !== a.inArray(b, N) && (b.style.width = ba[c]);
      }, r);
      a(Q).height(0);
      w && (ha(pa, aa), ha(function(b) {
        X.push(b.innerHTML);
        U.push(M(a(b).css("width")));
      }, aa), ha(function(a, b) {
        a.style.width = U[b];
      }, W), a(aa).height(0));
      ha(function(a, b) {
        a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + ga[b] + "</div>";
        a.style.width = ba[b];
      }, Q);
      w && ha(function(a, b) {
        a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + X[b] + "</div>";
        a.style.width = U[b];
      }, aa);
      A.outerWidth() < g ? (W = h.scrollHeight > h.offsetHeight || "scroll" == x.css("overflow-y") ? g + c : g, J && (h.scrollHeight > h.offsetHeight || "scroll" == x.css("overflow-y")) && (v.width = M(W - c)), "" !== l && "" === f || ja(b, 1, "Possible column misalignment", 6)) : W = "100%";
      B.width = M(W);
      t.width = M(W);
      w && (b.nScrollFoot.style.width = M(W));
      !p && J && (B.height = M(E.offsetHeight + c));
      l = A.outerWidth();
      n[0].style.width = M(l);
      m.width = M(l);
      f = A.height() > h.clientHeight || "scroll" == x.css("overflow-y");
      p = "padding" + (F.bScrollbarLeft ? "Left" : "Right");
      m[p] = f ? c + "px" : "0px";
      w && (z[0].style.width = M(l), u[0].style.width = M(l), u[0].style[p] = f ? c + "px" : "0px");
      A.children("colgroup").insertBefore(A.children("thead"));
      x.scroll();
      !b.bSorted && !b.bFiltered || b._drawHold || (h.scrollTop = 0);
    }
  }
  function ha(a, b, c) {
    for (var d = 0, l = 0, f = b.length, p, g; l < f;) {
      p = b[l].firstChild;
      for (g = c ? c[l].firstChild : null; p;) {
        1 === p.nodeType && (c ? a(p, g, d) : a(p, d), d++), p = p.nextSibling, g = c ? g.nextSibling : null;
      }
      l++;
    }
  }
  function Ma(c) {
    var d = c.nTable, l = c.aoColumns, f = c.oScroll, g = f.sY, h = f.sX, m = f.sXInner, n = l.length, x = t(c, "bVisible"), B = a("th", c.nTHead), u = d.getAttribute("width"), z = d.parentNode, r = !1, A, E = c.oBrowser, f = E.bScrollOversize;
    (A = d.style.width) && -1 !== A.indexOf("%") && (u = A);
    for (A = 0; A < x.length; A++) {
      var v = l[x[A]];
      null !== v.sWidth && (v.sWidth = vb(v.sWidthOrig, z), r = !0);
    }
    if (f || !r && !h && !g && n == p(c) && n == B.length) {
      for (A = 0; A < n; A++) {
        x = q(c, A), null !== x && (l[x].sWidth = M(B.eq(A).width()));
      }
    } else {
      n = a(d).clone().css("visibility", "hidden").removeAttr("id");
      n.find("tbody tr").remove();
      var w = a("<tr/>").appendTo(n.find("tbody"));
      n.find("thead, tfoot").remove();
      n.append(a(c.nTHead).clone()).append(a(c.nTFoot).clone());
      n.find("tfoot th, tfoot td").css("width", "");
      B = va(c, n.find("thead")[0]);
      for (A = 0; A < x.length; A++) {
        v = l[x[A]], B[A].style.width = null !== v.sWidthOrig && "" !== v.sWidthOrig ? M(v.sWidthOrig) : "", v.sWidthOrig && h && a(B[A]).append(a("<div/>").css({width:v.sWidthOrig, margin:0, padding:0, border:0, height:1}));
      }
      if (c.aoData.length) {
        for (A = 0; A < x.length; A++) {
          r = x[A], v = l[r], a(wb(c, r)).clone(!1).append(v.sContentPadding).appendTo(w);
        }
      }
      a("[name]", n).removeAttr("name");
      v = a("<div/>").css(h || g ? {position:"absolute", top:0, left:0, height:1, right:0, overflow:"hidden"} : {}).append(n).appendTo(z);
      h && m ? n.width(m) : h ? (n.css("width", "auto"), n.removeAttr("width"), n.width() < z.clientWidth && u && n.width(z.clientWidth)) : g ? n.width(z.clientWidth) : u && n.width(u);
      for (A = g = 0; A < x.length; A++) {
        z = a(B[A]), m = z.outerWidth() - z.width(), z = E.bBounding ? Math.ceil(B[A].getBoundingClientRect().width) : z.outerWidth(), g += z, l[x[A]].sWidth = M(z - m);
      }
      d.style.width = M(g);
      v.remove();
    }
    u && (d.style.width = M(u));
    !u && !h || c._reszEvt || (d = function() {
      a(b).bind("resize.DT-" + c.sInstance, Pa(function() {
        y(c);
      }));
    }, f ? setTimeout(d, 1000) : d(), c._reszEvt = !0);
  }
  function vb(b, d) {
    if (!b) {
      return 0;
    }
    b = a("<div/>").css("width", M(b)).appendTo(d || c.body);
    d = b[0].offsetWidth;
    b.remove();
    return d;
  }
  function wb(b, c) {
    var d = xb(b, c);
    if (0 > d) {
      return null;
    }
    var l = b.aoData[d];
    return l.nTr ? l.anCells[c] : a("<td/>").html(F(b, d, c, "display"))[0];
  }
  function xb(a, b) {
    for (var c, d = -1, l = -1, f = 0, p = a.aoData.length; f < p; f++) {
      c = F(a, f, b, "display") + "", c = c.replace(Pb, ""), c = c.replace(/&nbsp;/g, " "), c.length > d && (d = c.length, l = f);
    }
    return l;
  }
  function M(a) {
    return null === a ? "0px" : "number" == typeof a ? 0 > a ? "0px" : a + "px" : a.match(/\d$/) ? a + "px" : a;
  }
  function ma(b) {
    var c = [], l = b.aoColumns;
    var f = b.aaSortingFixed;
    var p = a.isPlainObject(f);
    var g = [];
    var t = function(b) {
      b.length && !a.isArray(b[0]) ? g.push(b) : a.merge(g, b);
    };
    a.isArray(f) && t(f);
    p && f.pre && t(f.pre);
    t(b.aaSorting);
    p && f.post && t(f.post);
    for (b = 0; b < g.length; b++) {
      var h = g[b][0];
      t = l[h].aDataSort;
      f = 0;
      for (p = t.length; f < p; f++) {
        var q = t[f];
        var m = l[q].sType || "string";
        g[b]._idx === d && (g[b]._idx = a.inArray(g[b][1], l[q].asSorting));
        c.push({src:h, col:q, dir:g[b][1], index:g[b]._idx, type:m, formatter:C.ext.type.order[m + "-pre"]});
      }
    }
    return c;
  }
  function ob(a) {
    var b, c = [], d = C.ext.type.order, l = a.aoData, f = 0, p = a.aiDisplayMaster;
    x(a);
    var g = ma(a);
    var t = 0;
    for (b = g.length; t < b; t++) {
      var h = g[t];
      h.formatter && f++;
      yb(a, h.col);
    }
    if ("ssp" != Y(a) && 0 !== g.length) {
      t = 0;
      for (b = p.length; t < b; t++) {
        c[p[t]] = t;
      }
      f === g.length ? p.sort(function(a, b) {
        var d, f = g.length, p = l[a]._aSortData, t = l[b]._aSortData;
        for (d = 0; d < f; d++) {
          var h = g[d];
          var q = p[h.col];
          var m = t[h.col];
          q = q < m ? -1 : q > m ? 1 : 0;
          if (0 !== q) {
            return "asc" === h.dir ? q : -q;
          }
        }
        q = c[a];
        m = c[b];
        return q < m ? -1 : q > m ? 1 : 0;
      }) : p.sort(function(a, b) {
        var f, p = g.length, t = l[a]._aSortData, h = l[b]._aSortData;
        for (f = 0; f < p; f++) {
          var q = g[f];
          var m = t[q.col];
          var n = h[q.col];
          q = d[q.type + "-" + q.dir] || d["string-" + q.dir];
          m = q(m, n);
          if (0 !== m) {
            return m;
          }
        }
        m = c[a];
        n = c[b];
        return m < n ? -1 : m > n ? 1 : 0;
      });
    }
    a.bSorted = !0;
  }
  function zb(a) {
    var b = a.aoColumns, c = ma(a);
    a = a.oLanguage.oAria;
    for (var d = 0, l = b.length; d < l; d++) {
      var f = b[d];
      var p = f.asSorting;
      var g = f.sTitle.replace(/<.*?>/g, "");
      var t = f.nTh;
      t.removeAttribute("aria-sort");
      f.bSortable && (0 < c.length && c[0].col == d ? (t.setAttribute("aria-sort", "asc" == c[0].dir ? "ascending" : "descending"), f = p[c[0].index + 1] || p[0]) : f = p[0], g += "asc" === f ? a.sSortAscending : a.sSortDescending);
      t.setAttribute("aria-label", g);
    }
  }
  function Ua(b, c, l, f) {
    var p = b.aaSorting, g = b.aoColumns[c].asSorting, t = function(b, c) {
      var l = b._idx;
      l === d && (l = a.inArray(b[1], g));
      return l + 1 < g.length ? l + 1 : c ? null : 0;
    };
    "number" === typeof p[0] && (p = b.aaSorting = [p]);
    l && b.oFeatures.bSortMulti ? (l = a.inArray(c, da(p, "0")), -1 !== l ? (c = t(p[l], !0), null === c && 1 === p.length && (c = 0), null === c ? p.splice(l, 1) : (p[l][1] = g[c], p[l]._idx = c)) : (p.push([c, g[0], 0]), p[p.length - 1]._idx = 0)) : p.length && p[0][0] == c ? (c = t(p[0]), p.length = 1, p[0][1] = g[c], p[0]._idx = c) : (p.length = 0, p.push([c, g[0]]), p[0]._idx = 0);
    ga(b);
    "function" == typeof f && f(b);
  }
  function Na(a, b, c, d) {
    var l = a.aoColumns[c];
    Va(b, {}, function(b) {
      !1 !== l.bSortable && (a.oFeatures.bProcessing ? (ea(a, !0), setTimeout(function() {
        Ua(a, c, b.shiftKey, d);
        "ssp" !== Y(a) && ea(a, !1);
      }, 0)) : Ua(a, c, b.shiftKey, d));
    });
  }
  function Ea(b) {
    var c = b.aLastSort, d = b.oClasses.sSortColumn, l = ma(b), f = b.oFeatures, p;
    if (f.bSort && f.bSortClasses) {
      f = 0;
      for (p = c.length; f < p; f++) {
        var g = c[f].src;
        a(da(b.aoData, "anCells", g)).removeClass(d + (2 > f ? f + 1 : 3));
      }
      f = 0;
      for (p = l.length; f < p; f++) {
        g = l[f].src, a(da(b.aoData, "anCells", g)).addClass(d + (2 > f ? f + 1 : 3));
      }
    }
    b.aLastSort = l;
  }
  function yb(a, b) {
    var c = a.aoColumns[b], d = C.ext.order[c.sSortDataType], f;
    d && (f = d.call(a.oInstance, a, b, l(a, b)));
    for (var p, g = C.ext.type.order[c.sType + "-pre"], t = 0, h = a.aoData.length; t < h; t++) {
      if (c = a.aoData[t], c._aSortData || (c._aSortData = []), !c._aSortData[b] || d) {
        p = d ? f[t] : F(a, t, b, "sort"), c._aSortData[b] = g ? g(p) : p;
      }
    }
  }
  function Fa(b) {
    if (b.oFeatures.bStateSave && !b.bDestroying) {
      var c = {time:+new Date, start:b._iDisplayStart, length:b._iDisplayLength, order:a.extend(!0, [], b.aaSorting), search:kb(b.oPreviousSearch), columns:a.map(b.aoColumns, function(a, c) {
        return {visible:a.bVisible, search:kb(b.aoPreSearchCols[c])};
      })};
      K(b, "aoStateSaveParams", "stateSaveParams", [b, c]);
      b.oSavedState = c;
      b.fnStateSaveCallback.call(b.oInstance, b, c);
    }
  }
  function Ab(b, c) {
    var l, f = b.aoColumns;
    if (b.oFeatures.bStateSave && (c = b.fnStateLoadCallback.call(b.oInstance, b)) && c.time) {
      var p = K(b, "aoStateLoadParams", "stateLoadParams", [b, c]);
      if (-1 === a.inArray(!1, p) && (p = b.iStateDuration, !(0 < p && c.time < +new Date - 1000 * p) && f.length === c.columns.length)) {
        b.oLoadedState = a.extend(!0, {}, c);
        c.start !== d && (b._iDisplayStart = c.start, b.iInitDisplayStart = c.start);
        c.length !== d && (b._iDisplayLength = c.length);
        c.order !== d && (b.aaSorting = [], a.each(c.order, function(a, c) {
          b.aaSorting.push(c[0] >= f.length ? [0, c[1]] : c);
        }));
        c.search !== d && a.extend(b.oPreviousSearch, lb(c.search));
        p = 0;
        for (l = c.columns.length; p < l; p++) {
          var g = c.columns[p];
          g.visible !== d && (f[p].bVisible = g.visible);
          g.search !== d && a.extend(b.aoPreSearchCols[p], lb(g.search));
        }
        K(b, "aoStateLoaded", "stateLoaded", [b, c]);
      }
    }
  }
  function Ga(b) {
    var c = C.settings;
    b = a.inArray(b, da(c, "nTable"));
    return -1 !== b ? c[b] : null;
  }
  function ja(a, c, d, l) {
    d = "DataTables warning: " + (a ? "table id=" + a.sTableId + " - " : "") + d;
    l && (d += ". For more information about this error, please see http://datatables.net/tn/" + l);
    if (c) {
      b.console && console.log && console.log(d);
    } else {
      if (c = C.ext, c = c.sErrMode || c.errMode, a && K(a, null, "error", [a, l, d]), "alert" == c) {
        alert(d);
      } else {
        if ("throw" == c) {
          throw Error(d);
        }
        "function" == typeof c && c(a, l, d);
      }
    }
  }
  function fa(b, c, l, f) {
    a.isArray(l) ? a.each(l, function(d, l) {
      a.isArray(l) ? fa(b, c, l[0], l[1]) : fa(b, c, l);
    }) : (f === d && (f = l), c[l] !== d && (b[f] = c[l]));
  }
  function Bb(b, c, d) {
    var l;
    for (l in c) {
      if (c.hasOwnProperty(l)) {
        var f = c[l];
        a.isPlainObject(f) ? (a.isPlainObject(b[l]) || (b[l] = {}), a.extend(!0, b[l], f)) : d && "data" !== l && "aaData" !== l && a.isArray(f) ? b[l] = f.slice() : b[l] = f;
      }
    }
    return b;
  }
  function Va(b, c, d) {
    a(b).bind("click.DT", c, function(a) {
      b.blur();
      d(a);
    }).bind("keypress.DT", c, function(a) {
      13 === a.which && (a.preventDefault(), d(a));
    }).bind("selectstart.DT", function() {
      return !1;
    });
  }
  function Z(a, b, c, d) {
    c && a[b].push({fn:c, sName:d});
  }
  function K(b, c, d, l) {
    var f = [];
    c && (f = a.map(b[c].slice().reverse(), function(a, c) {
      return a.fn.apply(b.oInstance, l);
    }));
    null !== d && (c = a.Event(d + ".dt"), a(b.nTable).trigger(c, l), f.push(c.result));
    return f;
  }
  function Sa(a) {
    var b = a._iDisplayStart, c = a.fnDisplayEnd(), d = a._iDisplayLength;
    b >= c && (b = c - d);
    b -= b % d;
    if (-1 === d || 0 > b) {
      b = 0;
    }
    a._iDisplayStart = b;
  }
  function Oa(b, c) {
    b = b.renderer;
    var d = C.ext.renderer[c];
    return a.isPlainObject(b) && b[c] ? d[b[c]] || d._ : "string" === typeof b ? d[b] || d._ : d._;
  }
  function Y(a) {
    return a.oFeatures.bServerSide ? "ssp" : a.ajax || a.sAjaxSource ? "ajax" : "dom";
  }
  function Ha(a, b) {
    var c = Cb.numbers_length, d = Math.floor(c / 2);
    b <= c ? a = na(0, b) : a <= d ? (a = na(0, c - 2), a.push("ellipsis"), a.push(b - 1)) : (a >= b - 1 - d ? a = na(b - (c - 2), b) : (a = na(a - d + 2, a + d - 1), a.push("ellipsis"), a.push(b - 1)), a.splice(0, 0, "ellipsis"), a.splice(0, 0, 0));
    a.DT_el = "span";
    return a;
  }
  function nb(b) {
    a.each({num:function(a) {
      return Ia(a, b);
    }, "num-fmt":function(a) {
      return Ia(a, b, Wa);
    }, "html-num":function(a) {
      return Ia(a, b, Ja);
    }, "html-num-fmt":function(a) {
      return Ia(a, b, Ja, Wa);
    }}, function(a, c) {
      R.type.order[a + b + "-pre"] = c;
      a.match(/^html\-/) && (R.type.search[a + b] = R.type.search.html);
    });
  }
  function Db(a) {
    return function() {
      var b = [Ga(this[C.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
      return C.ext.internal[a].apply(this, b);
    };
  }
  var C = function(b) {
    this.$ = function(a, b) {
      return this.api(!0).$(a, b);
    };
    this._ = function(a, b) {
      return this.api(!0).rows(a, b).data();
    };
    this.api = function(a) {
      return a ? new H(Ga(this[R.iApiIndex])) : new H(this);
    };
    this.fnAddData = function(b, c) {
      var l = this.api(!0);
      b = a.isArray(b) && (a.isArray(b[0]) || a.isPlainObject(b[0])) ? l.rows.add(b) : l.row.add(b);
      (c === d || c) && l.draw();
      return b.flatten().toArray();
    };
    this.fnAdjustColumnSizing = function(a) {
      var b = this.api(!0).columns.adjust(), c = b.settings()[0], l = c.oScroll;
      a === d || a ? b.draw(!1) : "" === l.sX && "" === l.sY || Aa(c);
    };
    this.fnClearTable = function(a) {
      var b = this.api(!0).clear();
      (a === d || a) && b.draw();
    };
    this.fnClose = function(a) {
      this.api(!0).row(a).child.hide();
    };
    this.fnDeleteRow = function(a, b, c) {
      var l = this.api(!0);
      a = l.rows(a);
      var f = a.settings()[0], p = f.aoData[a[0][0]];
      a.remove();
      b && b.call(this, f, p);
      (c === d || c) && l.draw();
      return p;
    };
    this.fnDestroy = function(a) {
      this.api(!0).destroy(a);
    };
    this.fnDraw = function(a) {
      this.api(!0).draw(a);
    };
    this.fnFilter = function(a, b, c, l, f, p) {
      f = this.api(!0);
      null === b || b === d ? f.search(a, c, l, p) : f.column(b).search(a, c, l, p);
      f.draw();
    };
    this.fnGetData = function(a, b) {
      var c = this.api(!0);
      if (a !== d) {
        var l = a.nodeName ? a.nodeName.toLowerCase() : "";
        return b !== d || "td" == l || "th" == l ? c.cell(a, b).data() : c.row(a).data() || null;
      }
      return c.data().toArray();
    };
    this.fnGetNodes = function(a) {
      var b = this.api(!0);
      return a !== d ? b.row(a).node() : b.rows().nodes().flatten().toArray();
    };
    this.fnGetPosition = function(a) {
      var b = this.api(!0), c = a.nodeName.toUpperCase();
      return "TR" == c ? b.row(a).index() : "TD" == c || "TH" == c ? (a = b.cell(a).index(), [a.row, a.columnVisible, a.column]) : null;
    };
    this.fnIsOpen = function(a) {
      return this.api(!0).row(a).child.isShown();
    };
    this.fnOpen = function(a, b, c) {
      return this.api(!0).row(a).child(b, c).show().child()[0];
    };
    this.fnPageChange = function(a, b) {
      a = this.api(!0).page(a);
      (b === d || b) && a.draw(!1);
    };
    this.fnSetColumnVis = function(a, b, c) {
      a = this.api(!0).column(a).visible(b);
      (c === d || c) && a.columns.adjust().draw();
    };
    this.fnSettings = function() {
      return Ga(this[R.iApiIndex]);
    };
    this.fnSort = function(a) {
      this.api(!0).order(a).draw();
    };
    this.fnSortListener = function(a, b, c) {
      this.api(!0).order.listener(a, b, c);
    };
    this.fnUpdate = function(a, b, c, l, f) {
      var p = this.api(!0);
      c === d || null === c ? p.row(b).data(a) : p.cell(b, c).data(a);
      (f === d || f) && p.columns.adjust();
      (l === d || l) && p.draw();
      return 0;
    };
    this.fnVersionCheck = R.fnVersionCheck;
    var c = this, l = b === d, f = this.length;
    l && (b = {});
    this.oApi = this.internal = R.internal;
    for (var p in C.ext.internal) {
      p && (this[p] = Db(p));
    }
    this.each(function() {
      var p = {}, p = 1 < f ? Bb(p, b, !0) : b, t = 0, q, n = this.getAttribute("id"), x = !1, B = C.defaults, V = a(this);
      if ("table" != this.nodeName.toLowerCase()) {
        ja(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
      } else {
        m(B);
        u(B.column);
        g(B, B, !0);
        g(B.column, B.column, !0);
        g(B, a.extend(p, V.data()));
        var y = C.settings, t = 0;
        for (q = y.length; t < q; t++) {
          var F = y[t];
          if (F.nTable == this || F.nTHead.parentNode == this || F.nTFoot && F.nTFoot.parentNode == this) {
            t = p.bRetrieve !== d ? p.bRetrieve : B.bRetrieve;
            if (l || t) {
              return F.oInstance;
            }
            if (p.bDestroy !== d ? p.bDestroy : B.bDestroy) {
              F.oInstance.fnDestroy();
              break;
            } else {
              ja(F, 0, "Cannot reinitialise DataTable", 3);
              return;
            }
          }
          if (F.sTableId == this.id) {
            y.splice(t, 1);
            break;
          }
        }
        if (null === n || "" === n) {
          this.id = n = "DataTables_Table_" + C.ext._unique++;
        }
        var D = a.extend(!0, {}, C.models.oSettings, {sDestroyWidth:V[0].style.width, sInstance:n, sTableId:n});
        D.nTable = this;
        D.oApi = c.internal;
        D.oInit = p;
        y.push(D);
        D.oInstance = 1 === c.length ? c : V.dataTable();
        m(p);
        p.oLanguage && h(p.oLanguage);
        p.aLengthMenu && !p.iDisplayLength && (p.iDisplayLength = a.isArray(p.aLengthMenu[0]) ? p.aLengthMenu[0][0] : p.aLengthMenu[0]);
        p = Bb(a.extend(!0, {}, B), p);
        fa(D.oFeatures, p, "bPaginate bLengthChange bFilter bSort bSortMulti bInfo bProcessing bAutoWidth bSortClasses bServerSide bDeferRender".split(" "));
        fa(D, p, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], ["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"], ["bJQueryUI", "bJUI"]]);
        fa(D.oScroll, p, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);
        fa(D.oLanguage, p, "fnInfoCallback");
        Z(D, "aoDrawCallback", p.fnDrawCallback, "user");
        Z(D, "aoServerParams", p.fnServerParams, "user");
        Z(D, "aoStateSaveParams", p.fnStateSaveParams, "user");
        Z(D, "aoStateLoadParams", p.fnStateLoadParams, "user");
        Z(D, "aoStateLoaded", p.fnStateLoaded, "user");
        Z(D, "aoRowCallback", p.fnRowCallback, "user");
        Z(D, "aoRowCreatedCallback", p.fnCreatedRow, "user");
        Z(D, "aoHeaderCallback", p.fnHeaderCallback, "user");
        Z(D, "aoFooterCallback", p.fnFooterCallback, "user");
        Z(D, "aoInitComplete", p.fnInitComplete, "user");
        Z(D, "aoPreDrawCallback", p.fnPreDrawCallback, "user");
        D.rowIdFn = U(p.rowId);
        r(D);
        n = D.oClasses;
        p.bJQueryUI ? (a.extend(n, C.ext.oJUIClasses, p.oClasses), p.sDom === B.sDom && "lfrtip" === B.sDom && (D.sDom = '<"H"lfr>t<"F"ip>'), D.renderer) ? a.isPlainObject(D.renderer) && !D.renderer.header && (D.renderer.header = "jqueryui") : D.renderer = "jqueryui" : a.extend(n, C.ext.classes, p.oClasses);
        V.addClass(n.sTable);
        D.iInitDisplayStart === d && (D.iInitDisplayStart = p.iDisplayStart, D._iDisplayStart = p.iDisplayStart);
        null !== p.iDeferLoading && (D.bDeferLoading = !0, t = a.isArray(p.iDeferLoading), D._iRecordsDisplay = t ? p.iDeferLoading[0] : p.iDeferLoading, D._iRecordsTotal = t ? p.iDeferLoading[1] : p.iDeferLoading);
        var ya = D.oLanguage;
        a.extend(!0, ya, p.oLanguage);
        "" !== ya.sUrl && (a.ajax({dataType:"json", url:ya.sUrl, success:function(b) {
          h(b);
          g(B.oLanguage, b);
          a.extend(!0, ya, b);
          ta(D);
        }, error:function() {
          ta(D);
        }}), x = !0);
        null === p.asStripeClasses && (D.asStripeClasses = [n.sStripeOdd, n.sStripeEven]);
        var t = D.asStripeClasses, J = V.children("tbody").find("tr").eq(0);
        -1 !== a.inArray(!0, a.map(t, function(a, b) {
          return J.hasClass(a);
        })) && (a("tbody tr", this).removeClass(t.join(" ")), D.asDestroyStripes = t.slice());
        y = [];
        t = this.getElementsByTagName("thead");
        0 !== t.length && (qa(D.aoHeader, t[0]), y = va(D));
        if (null === p.aoColumns) {
          for (F = [], t = 0, q = y.length; t < q; t++) {
            F.push(null);
          }
        } else {
          F = p.aoColumns;
        }
        t = 0;
        for (q = F.length; t < q; t++) {
          v(D, y ? y[t] : null);
        }
        z(D, p.aoColumnDefs, F, function(a, b) {
          w(D, a, b);
        });
        if (J.length) {
          var za = function(a, b) {
            return null !== a.getAttribute("data-" + b) ? b : null;
          };
          a(J[0]).children("th, td").each(function(a, b) {
            var c = D.aoColumns[a];
            if (c.mData === a) {
              var l = za(b, "sort") || za(b, "order");
              b = za(b, "filter") || za(b, "search");
              if (null !== l || null !== b) {
                c.mData = {_:a + ".display", sort:null !== l ? a + ".@data-" + l : d, type:null !== l ? a + ".@data-" + l : d, filter:null !== b ? a + ".@data-" + b : d}, w(D, a);
              }
            }
          });
        }
        var N = D.oFeatures;
        p.bStateSave && (N.bStateSave = !0, Ab(D, p), Z(D, "aoDrawCallback", Fa, "state_save"));
        if (p.aaSorting === d) {
          for (y = D.aaSorting, t = 0, q = y.length; t < q; t++) {
            y[t][1] = D.aoColumns[t].asSorting[0];
          }
        }
        Ea(D);
        N.bSort && Z(D, "aoDrawCallback", function() {
          if (D.bSorted) {
            var b = ma(D), c = {};
            a.each(b, function(a, b) {
              c[b.src] = b.dir;
            });
            K(D, null, "order", [D, b, c]);
            zb(D);
          }
        });
        Z(D, "aoDrawCallback", function() {
          (D.bSorted || "ssp" === Y(D) || N.bDeferRender) && Ea(D);
        }, "sc");
        t = V.children("caption").each(function() {
          this._captionSide = V.css("caption-side");
        });
        q = V.children("thead");
        0 === q.length && (q = a("<thead/>").appendTo(this));
        D.nTHead = q[0];
        q = V.children("tbody");
        0 === q.length && (q = a("<tbody/>").appendTo(this));
        D.nTBody = q[0];
        q = V.children("tfoot");
        0 === q.length && 0 < t.length && ("" !== D.oScroll.sX || "" !== D.oScroll.sY) && (q = a("<tfoot/>").appendTo(this));
        0 === q.length || 0 === q.children().length ? V.addClass(n.sNoFooter) : 0 < q.length && (D.nTFoot = q[0], qa(D.aoFooter, D.nTFoot));
        if (p.aaData) {
          for (t = 0; t < p.aaData.length; t++) {
            A(D, p.aaData[t]);
          }
        } else {
          (D.bDeferLoading || "dom" == Y(D)) && E(D, a(D.nTBody).children("tr"));
        }
        D.aiDisplay = D.aiDisplayMaster.slice();
        D.bInitialised = !0;
        !1 === x && ta(D);
      }
    });
    c = null;
    return this;
  }, R, G, L, Xa = {}, Eb = /[\r\n]/g, Ja = /<.*?>/g, Qb = /^[\w\+\-]/, Rb = /[\w\+\-]$/, Sb = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\|\$|\^|\-)/g, Wa = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi, ka = function(a) {
    return a && !0 !== a && "-" !== a ? !1 : !0;
  }, Fb = function(a) {
    var b = parseInt(a, 10);
    return !isNaN(b) && isFinite(a) ? b : null;
  }, Gb = function(a, b) {
    Xa[b] || (Xa[b] = new RegExp(Qa(b), "g"));
    return "string" === typeof a && "." !== b ? a.replace(/\./g, "").replace(Xa[b], ".") : a;
  }, Ya = function(a, b, c) {
    var d = "string" === typeof a;
    if (ka(a)) {
      return !0;
    }
    b && d && (a = Gb(a, b));
    c && d && (a = a.replace(Wa, ""));
    return !isNaN(parseFloat(a)) && isFinite(a);
  }, Hb = function(a, b, c) {
    return ka(a) ? !0 : ka(a) || "string" === typeof a ? Ya(a.replace(Ja, ""), b, c) ? !0 : null : null;
  }, da = function(a, b, c) {
    var l = [], f = 0, p = a.length;
    if (c !== d) {
      for (; f < p; f++) {
        a[f] && a[f][b] && l.push(a[f][b][c]);
      }
    } else {
      for (; f < p; f++) {
        a[f] && l.push(a[f][b]);
      }
    }
    return l;
  }, ua = function(a, b, c, l) {
    var f = [], p = 0, g = b.length;
    if (l !== d) {
      for (; p < g; p++) {
        a[b[p]][c] && f.push(a[b[p]][c][l]);
      }
    } else {
      for (; p < g; p++) {
        f.push(a[b[p]][c]);
      }
    }
    return f;
  }, na = function(a, b) {
    var c = [];
    if (b === d) {
      b = 0;
      var l = a;
    } else {
      l = b, b = a;
    }
    for (a = b; a < l; a++) {
      c.push(a);
    }
    return c;
  }, Ib = function(a) {
    for (var b = [], c = 0, d = a.length; c < d; c++) {
      a[c] && b.push(a[c]);
    }
    return b;
  }, Ba = function(a) {
    var b = [], c = a.length, d, l = 0;
    var f = 0;
    a: for (; f < c; f++) {
      var p = a[f];
      for (d = 0; d < l; d++) {
        if (b[d] === p) {
          continue a;
        }
      }
      b.push(p);
      l++;
    }
    return b;
  };
  C.util = {throttle:function(a, b) {
    var c = b !== d ? b : 200, l, f;
    return function() {
      var b = this, p = +new Date, g = arguments;
      l && p < l + c ? (clearTimeout(f), f = setTimeout(function() {
        l = d;
        a.apply(b, g);
      }, c)) : (l = p, a.apply(b, g));
    };
  }, escapeRegex:function(a) {
    return a.replace(Sb, "\\$1");
  }};
  var ca = function(a, b, c) {
    a[b] !== d && (a[c] = a[b]);
  }, sa = /\[.*?\]$/, la = /\(\)$/, Qa = C.util.escapeRegex, Da = a("<div>")[0], Ob = Da.textContent !== d, Pb = /<.*?>/g, Pa = C.util.throttle, Jb = [], T = Array.prototype, Tb = function(b) {
    var c, d = C.settings, l = a.map(d, function(a, b) {
      return a.nTable;
    });
    if (b) {
      if (b.nTable && b.oApi) {
        return [b];
      }
      if (b.nodeName && "table" === b.nodeName.toLowerCase()) {
        var f = a.inArray(b, l);
        return -1 !== f ? [d[f]] : null;
      }
      if (b && "function" === typeof b.settings) {
        return b.settings().toArray();
      }
      "string" === typeof b ? c = a(b) : b instanceof a && (c = b);
    } else {
      return [];
    }
    if (c) {
      return c.map(function(b) {
        f = a.inArray(this, l);
        return -1 !== f ? d[f] : null;
      }).toArray();
    }
  };
  var H = function(b, c) {
    if (!(this instanceof H)) {
      return new H(b, c);
    }
    var d = [], l = function(a) {
      (a = Tb(a)) && (d = d.concat(a));
    };
    if (a.isArray(b)) {
      for (var f = 0, p = b.length; f < p; f++) {
        l(b[f]);
      }
    } else {
      l(b);
    }
    this.context = Ba(d);
    c && a.merge(this, c);
    this.selector = {rows:null, cols:null, opts:null};
    H.extend(this, this, Jb);
  };
  C.Api = H;
  a.extend(H.prototype, {any:function() {
    return 0 !== this.count();
  }, concat:T.concat, context:[], count:function() {
    return this.flatten().length;
  }, each:function(a) {
    for (var b = 0, c = this.length; b < c; b++) {
      a.call(this, this[b], b, this);
    }
    return this;
  }, eq:function(a) {
    var b = this.context;
    return b.length > a ? new H(b[a], this[a]) : null;
  }, filter:function(a) {
    var b = [];
    if (T.filter) {
      b = T.filter.call(this, a, this);
    } else {
      for (var c = 0, d = this.length; c < d; c++) {
        a.call(this, this[c], c, this) && b.push(this[c]);
      }
    }
    return new H(this.context, b);
  }, flatten:function() {
    var a = [];
    return new H(this.context, a.concat.apply(a, this.toArray()));
  }, join:T.join, indexOf:T.indexOf || function(a, b) {
    b = b || 0;
    for (var c = this.length; b < c; b++) {
      if (this[b] === a) {
        return b;
      }
    }
    return -1;
  }, iterator:function(a, b, c, l) {
    var f = [], p, g, t = this.context, h, q = this.selector;
    "string" === typeof a && (l = c, c = b, b = a, a = !1);
    var m = 0;
    for (p = t.length; m < p; m++) {
      var n = new H(t[m]);
      if ("table" === b) {
        var x = c.call(n, t[m], m);
        x !== d && f.push(x);
      } else {
        if ("columns" === b || "rows" === b) {
          x = c.call(n, t[m], this[m], m), x !== d && f.push(x);
        } else {
          if ("column" === b || "column-rows" === b || "row" === b || "cell" === b) {
            var u = this[m];
            "column-rows" === b && (h = Ka(t[m], q.opts));
            var z = 0;
            for (g = u.length; z < g; z++) {
              x = u[z], x = "cell" === b ? c.call(n, t[m], x.row, x.column, m, z) : c.call(n, t[m], x, m, z, h), x !== d && f.push(x);
            }
          }
        }
      }
    }
    return f.length || l ? (a = new H(t, a ? f.concat.apply([], f) : f), b = a.selector, b.rows = q.rows, b.cols = q.cols, b.opts = q.opts, a) : this;
  }, lastIndexOf:T.lastIndexOf || function(a, b) {
    return this.indexOf.apply(this.toArray.reverse(), arguments);
  }, length:0, map:function(a) {
    var b = [];
    if (T.map) {
      b = T.map.call(this, a, this);
    } else {
      for (var c = 0, d = this.length; c < d; c++) {
        b.push(a.call(this, this[c], c));
      }
    }
    return new H(this.context, b);
  }, pluck:function(a) {
    return this.map(function(b) {
      return b[a];
    });
  }, pop:T.pop, push:T.push, reduce:T.reduce || function(a, b) {
    return n(this, a, b, 0, this.length, 1);
  }, reduceRight:T.reduceRight || function(a, b) {
    return n(this, a, b, this.length - 1, -1, -1);
  }, reverse:T.reverse, selector:null, shift:T.shift, sort:T.sort, splice:T.splice, toArray:function() {
    return T.slice.call(this);
  }, to$:function() {
    return a(this);
  }, toJQuery:function() {
    return a(this);
  }, unique:function() {
    return new H(this.context, Ba(this));
  }, unshift:T.unshift});
  H.extend = function(b, c, d) {
    if (d.length && c && (c instanceof H || c.__dt_wrapper)) {
      var l, f = function(a, b, c) {
        return function() {
          var d = b.apply(a, arguments);
          H.extend(d, d, c.methodExt);
          return d;
        };
      };
      var p = 0;
      for (l = d.length; p < l; p++) {
        var g = d[p];
        c[g.name] = "function" === typeof g.val ? f(b, g.val, g) : a.isPlainObject(g.val) ? {} : g.val;
        c[g.name].__dt_wrapper = !0;
        H.extend(b, c[g.name], g.propExt);
      }
    }
  };
  H.register = G = function(b, c) {
    if (a.isArray(b)) {
      for (var d = 0, l = b.length; d < l; d++) {
        H.register(b[d], c);
      }
    } else {
      var l = b.split("."), f = Jb, p;
      b = 0;
      for (d = l.length; b < d; b++) {
        var g = (p = -1 !== l[b].indexOf("()")) ? l[b].replace("()", "") : l[b];
        a: {
          var t = 0;
          for (var h = f.length; t < h; t++) {
            if (f[t].name === g) {
              t = f[t];
              break a;
            }
          }
          t = null;
        }
        t || (t = {name:g, val:{}, methodExt:[], propExt:[]}, f.push(t));
        b === d - 1 ? t.val = c : f = p ? t.methodExt : t.propExt;
      }
    }
  };
  H.registerPlural = L = function(b, c, l) {
    H.register(b, l);
    H.register(c, function() {
      var b = l.apply(this, arguments);
      return b === this ? this : b instanceof H ? b.length ? a.isArray(b[0]) ? new H(b.context, b[0]) : b[0] : d : b;
    });
  };
  var Ub = function(b, c) {
    if ("number" === typeof b) {
      return [c[b]];
    }
    var d = a.map(c, function(a, b) {
      return a.nTable;
    });
    return a(d).filter(b).map(function(b) {
      b = a.inArray(this, d);
      return c[b];
    }).toArray();
  };
  G("tables()", function(a) {
    return a ? new H(Ub(a, this.context)) : this;
  });
  G("table()", function(a) {
    a = this.tables(a);
    var b = a.context;
    return b.length ? new H(b[0]) : a;
  });
  L("tables().nodes()", "table().node()", function() {
    return this.iterator("table", function(a) {
      return a.nTable;
    }, 1);
  });
  L("tables().body()", "table().body()", function() {
    return this.iterator("table", function(a) {
      return a.nTBody;
    }, 1);
  });
  L("tables().header()", "table().header()", function() {
    return this.iterator("table", function(a) {
      return a.nTHead;
    }, 1);
  });
  L("tables().footer()", "table().footer()", function() {
    return this.iterator("table", function(a) {
      return a.nTFoot;
    }, 1);
  });
  L("tables().containers()", "table().container()", function() {
    return this.iterator("table", function(a) {
      return a.nTableWrapper;
    }, 1);
  });
  G("draw()", function(a) {
    return this.iterator("table", function(b) {
      "page" === a ? ba(b) : ("string" === typeof a && (a = "full-hold" === a ? !1 : !0), ga(b, !1 === a));
    });
  });
  G("page()", function(a) {
    return a === d ? this.page.info().page : this.iterator("table", function(b) {
      Ta(b, a);
    });
  });
  G("page.info()", function(a) {
    if (0 === this.context.length) {
      return d;
    }
    a = this.context[0];
    var b = a._iDisplayStart, c = a.oFeatures.bPaginate ? a._iDisplayLength : -1, l = a.fnRecordsDisplay(), f = -1 === c;
    return {page:f ? 0 : Math.floor(b / c), pages:f ? 1 : Math.ceil(l / c), start:b, end:a.fnDisplayEnd(), length:c, recordsTotal:a.fnRecordsTotal(), recordsDisplay:l, serverSide:"ssp" === Y(a)};
  });
  G("page.len()", function(a) {
    return a === d ? 0 !== this.context.length ? this.context[0]._iDisplayLength : d : this.iterator("table", function(b) {
      Ra(b, a);
    });
  });
  var Kb = function(a, b, c) {
    if (c) {
      var d = new H(a);
      d.one("draw", function() {
        c(d.ajax.json());
      });
    }
    if ("ssp" == Y(a)) {
      ga(a, b);
    } else {
      ea(a, !0);
      var l = a.jqXHR;
      l && 4 !== l.readyState && l.abort();
      wa(a, [], function(c) {
        aa(a);
        c = xa(a, c);
        for (var d = 0, l = c.length; d < l; d++) {
          A(a, c[d]);
        }
        ga(a, b);
        ea(a, !1);
      });
    }
  };
  G("ajax.json()", function() {
    var a = this.context;
    if (0 < a.length) {
      return a[0].json;
    }
  });
  G("ajax.params()", function() {
    var a = this.context;
    if (0 < a.length) {
      return a[0].oAjaxData;
    }
  });
  G("ajax.reload()", function(a, b) {
    return this.iterator("table", function(c) {
      Kb(c, !1 === b, a);
    });
  });
  G("ajax.url()", function(b) {
    var c = this.context;
    if (b === d) {
      if (0 === c.length) {
        return d;
      }
      c = c[0];
      return c.ajax ? a.isPlainObject(c.ajax) ? c.ajax.url : c.ajax : c.sAjaxSource;
    }
    return this.iterator("table", function(c) {
      a.isPlainObject(c.ajax) ? c.ajax.url = b : c.ajax = b;
    });
  });
  G("ajax.url().load()", function(a, b) {
    return this.iterator("table", function(c) {
      Kb(c, !1 === b, a);
    });
  });
  var Za = function(b, c, l, f, p) {
    var g = [], t, h, q;
    var m = typeof c;
    c && "string" !== m && "function" !== m && c.length !== d || (c = [c]);
    m = 0;
    for (h = c.length; m < h; m++) {
      var n = c[m] && c[m].split ? c[m].split(",") : [c[m]];
      var x = 0;
      for (q = n.length; x < q; x++) {
        (t = l("string" === typeof n[x] ? a.trim(n[x]) : n[x])) && t.length && (g = g.concat(t));
      }
    }
    b = R.selector[b];
    if (b.length) {
      for (m = 0, h = b.length; m < h; m++) {
        g = b[m](f, p, g);
      }
    }
    return Ba(g);
  }, $a = function(b) {
    b || (b = {});
    b.filter && b.search === d && (b.search = b.filter);
    return a.extend({search:"none", order:"current", page:"all"}, b);
  }, ab = function(a) {
    for (var b = 0, c = a.length; b < c; b++) {
      if (0 < a[b].length) {
        return a[0] = a[b], a[0].length = 1, a.length = 1, a.context = [a.context[b]], a;
      }
    }
    a.length = 0;
    return a;
  }, Ka = function(b, c) {
    var d = [], l = b.aiDisplay;
    var f = b.aiDisplayMaster;
    var p = c.search;
    var g = c.order;
    c = c.page;
    if ("ssp" == Y(b)) {
      return "removed" === p ? [] : na(0, f.length);
    }
    if ("current" == c) {
      for (f = b._iDisplayStart, b = b.fnDisplayEnd(); f < b; f++) {
        d.push(l[f]);
      }
    } else {
      if ("current" == g || "applied" == g) {
        d = "none" == p ? f.slice() : "applied" == p ? l.slice() : a.map(f, function(b, c) {
          return -1 === a.inArray(b, l) ? b : null;
        });
      } else {
        if ("index" == g || "original" == g) {
          for (f = 0, b = b.aoData.length; f < b; f++) {
            "none" == p ? d.push(f) : (g = a.inArray(f, l), (-1 === g && "removed" == p || 0 <= g && "applied" == p) && d.push(f));
          }
        }
      }
    }
    return d;
  }, Vb = function(b, c, l) {
    return Za("row", c, function(c) {
      var f = Fb(c);
      if (null !== f && !l) {
        return [f];
      }
      var p = Ka(b, l);
      if (null !== f && -1 !== a.inArray(f, p)) {
        return [f];
      }
      if (!c) {
        return p;
      }
      if ("function" === typeof c) {
        return a.map(p, function(a) {
          var d = b.aoData[a];
          return c(a, d._aData, d.nTr) ? a : null;
        });
      }
      f = Ib(ua(b.aoData, p, "nTr"));
      if (c.nodeName) {
        if (c._DT_RowIndex !== d) {
          return [c._DT_RowIndex];
        }
        if (c._DT_CellIndex) {
          return [c._DT_CellIndex.row];
        }
        f = a(c).closest("*[data-dt-row]");
        return f.length ? [f.data("dt-row")] : [];
      }
      return "string" === typeof c && "#" === c.charAt(0) && (p = b.aIds[c.replace(/^#/, "")], p !== d) ? [p.idx] : a(f).filter(c).map(function() {
        return this._DT_RowIndex;
      }).toArray();
    }, b, l);
  };
  G("rows()", function(b, c) {
    b === d ? b = "" : a.isPlainObject(b) && (c = b, b = "");
    c = $a(c);
    var l = this.iterator("table", function(a) {
      return Vb(a, b, c);
    }, 1);
    l.selector.rows = b;
    l.selector.opts = c;
    return l;
  });
  G("rows().nodes()", function() {
    return this.iterator("row", function(a, b) {
      return a.aoData[b].nTr || d;
    }, 1);
  });
  G("rows().data()", function() {
    return this.iterator(!0, "rows", function(a, b) {
      return ua(a.aoData, b, "_aData");
    }, 1);
  });
  L("rows().cache()", "row().cache()", function(a) {
    return this.iterator("row", function(b, c) {
      b = b.aoData[c];
      return "search" === a ? b._aFilterData : b._aSortData;
    }, 1);
  });
  L("rows().invalidate()", "row().invalidate()", function(a) {
    return this.iterator("row", function(b, c) {
      S(b, c, a);
    });
  });
  L("rows().indexes()", "row().index()", function() {
    return this.iterator("row", function(a, b) {
      return b;
    }, 1);
  });
  L("rows().ids()", "row().id()", function(a) {
    for (var b = [], c = this.context, d = 0, l = c.length; d < l; d++) {
      for (var f = 0, p = this[d].length; f < p; f++) {
        var g = c[d].rowIdFn(c[d].aoData[this[d][f]]._aData);
        b.push((!0 === a ? "#" : "") + g);
      }
    }
    return new H(c, b);
  });
  L("rows().remove()", "row().remove()", function() {
    var a = this;
    this.iterator("row", function(b, c, l) {
      var f = b.aoData, p = f[c], g, t;
      f.splice(c, 1);
      var h = 0;
      for (g = f.length; h < g; h++) {
        var q = f[h];
        var m = q.anCells;
        null !== q.nTr && (q.nTr._DT_RowIndex = h);
        if (null !== m) {
          for (q = 0, t = m.length; q < t; q++) {
            m[q]._DT_CellIndex.row = h;
          }
        }
      }
      ia(b.aiDisplayMaster, c);
      ia(b.aiDisplay, c);
      ia(a[l], c, !1);
      Sa(b);
      c = b.rowIdFn(p._aData);
      c !== d && delete b.aIds[c];
    });
    this.iterator("table", function(a) {
      for (var b = 0, c = a.aoData.length; b < c; b++) {
        a.aoData[b].idx = b;
      }
    });
    return this;
  });
  G("rows.add()", function(b) {
    var c = this.iterator("table", function(a) {
      var c, d = [];
      var l = 0;
      for (c = b.length; l < c; l++) {
        var f = b[l];
        f.nodeName && "TR" === f.nodeName.toUpperCase() ? d.push(E(a, f)[0]) : d.push(A(a, f));
      }
      return d;
    }, 1), d = this.rows(-1);
    d.pop();
    a.merge(d, c);
    return d;
  });
  G("row()", function(a, b) {
    return ab(this.rows(a, b));
  });
  G("row().data()", function(a) {
    var b = this.context;
    if (a === d) {
      return b.length && this.length ? b[0].aoData[this[0]]._aData : d;
    }
    b[0].aoData[this[0]]._aData = a;
    S(b[0], this[0], "data");
    return this;
  });
  G("row().node()", function() {
    var a = this.context;
    return a.length && this.length ? a[0].aoData[this[0]].nTr || null : null;
  });
  G("row.add()", function(b) {
    b instanceof a && b.length && (b = b[0]);
    var c = this.iterator("table", function(a) {
      return b.nodeName && "TR" === b.nodeName.toUpperCase() ? E(a, b)[0] : A(a, b);
    });
    return this.row(c[0]);
  });
  var Wb = function(b, c, d, l) {
    var f = [], g = function(c, d) {
      if (a.isArray(c) || c instanceof a) {
        for (var l = 0, t = c.length; l < t; l++) {
          g(c[l], d);
        }
      } else {
        c.nodeName && "tr" === c.nodeName.toLowerCase() ? f.push(c) : (l = a("<tr><td/></tr>").addClass(d), a("td", l).addClass(d).html(c)[0].colSpan = p(b), f.push(l[0]));
      }
    };
    g(d, l);
    c._details && c._details.remove();
    c._details = a(f);
    c._detailsShow && c._details.insertAfter(c.nTr);
  }, bb = function(a, b) {
    var c = a.context;
    c.length && (a = c[0].aoData[b !== d ? b : a[0]]) && a._details && (a._details.remove(), a._detailsShow = d, a._details = d);
  }, Lb = function(a, b) {
    var c = a.context;
    c.length && a.length && (a = c[0].aoData[a[0]], a._details && ((a._detailsShow = b) ? a._details.insertAfter(a.nTr) : a._details.detach(), Xb(c[0])));
  }, Xb = function(a) {
    var b = new H(a), c = a.aoData;
    b.off("draw.dt.DT_details column-visibility.dt.DT_details destroy.dt.DT_details");
    0 < da(c, "_details").length && (b.on("draw.dt.DT_details", function(d, l) {
      a === l && b.rows({page:"current"}).eq(0).each(function(a) {
        a = c[a];
        a._detailsShow && a._details.insertAfter(a.nTr);
      });
    }), b.on("column-visibility.dt.DT_details", function(b, d, l, f) {
      if (a === d) {
        for (d = p(d), l = 0, f = c.length; l < f; l++) {
          b = c[l], b._details && b._details.children("td[colspan]").attr("colspan", d);
        }
      }
    }), b.on("destroy.dt.DT_details", function(d, l) {
      if (a === l) {
        for (d = 0, l = c.length; d < l; d++) {
          c[d]._details && bb(b, d);
        }
      }
    }));
  };
  G("row().child()", function(a, b) {
    var c = this.context;
    if (a === d) {
      return c.length && this.length ? c[0].aoData[this[0]]._details : d;
    }
    !0 === a ? this.child.show() : !1 === a ? bb(this) : c.length && this.length && Wb(c[0], c[0].aoData[this[0]], a, b);
    return this;
  });
  G(["row().child.show()", "row().child().show()"], function(a) {
    Lb(this, !0);
    return this;
  });
  G(["row().child.hide()", "row().child().hide()"], function() {
    Lb(this, !1);
    return this;
  });
  G(["row().child.remove()", "row().child().remove()"], function() {
    bb(this);
    return this;
  });
  G("row().child.isShown()", function() {
    var a = this.context;
    return a.length && this.length ? a[0].aoData[this[0]]._detailsShow || !1 : !1;
  });
  var Yb = /^(.+):(name|visIdx|visible)$/, Mb = function(a, b, c, d, l) {
    c = [];
    d = 0;
    for (var f = l.length; d < f; d++) {
      c.push(F(a, l[d], b));
    }
    return c;
  }, Zb = function(b, c, d) {
    var l = b.aoColumns, f = da(l, "sName"), p = da(l, "nTh");
    return Za("column", c, function(c) {
      var g = Fb(c);
      if ("" === c) {
        return na(l.length);
      }
      if (null !== g) {
        return [0 <= g ? g : l.length + g];
      }
      if ("function" === typeof c) {
        var t = Ka(b, d);
        return a.map(l, function(a, d) {
          return c(d, Mb(b, d, 0, 0, t), p[d]) ? d : null;
        });
      }
      var h = "string" === typeof c ? c.match(Yb) : "";
      if (h) {
        switch(h[2]) {
          case "visIdx":
          case "visible":
            g = parseInt(h[1], 10);
            if (0 > g) {
              var m = a.map(l, function(a, b) {
                return a.bVisible ? b : null;
              });
              return [m[m.length + g]];
            }
            return [q(b, g)];
          case "name":
            return a.map(f, function(a, b) {
              return a === h[1] ? b : null;
            });
          default:
            return [];
        }
      }
      if (c.nodeName && c._DT_CellIndex) {
        return [c._DT_CellIndex.column];
      }
      g = a(p).filter(c).map(function() {
        return a.inArray(this, p);
      }).toArray();
      if (g.length || !c.nodeName) {
        return g;
      }
      g = a(c).closest("*[data-dt-column]");
      return g.length ? [g.data("dt-column")] : [];
    }, b, d);
  };
  G("columns()", function(b, c) {
    b === d ? b = "" : a.isPlainObject(b) && (c = b, b = "");
    c = $a(c);
    var l = this.iterator("table", function(a) {
      return Zb(a, b, c);
    }, 1);
    l.selector.cols = b;
    l.selector.opts = c;
    return l;
  });
  L("columns().header()", "column().header()", function(a, b) {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].nTh;
    }, 1);
  });
  L("columns().footer()", "column().footer()", function(a, b) {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].nTf;
    }, 1);
  });
  L("columns().data()", "column().data()", function() {
    return this.iterator("column-rows", Mb, 1);
  });
  L("columns().dataSrc()", "column().dataSrc()", function() {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].mData;
    }, 1);
  });
  L("columns().cache()", "column().cache()", function(a) {
    return this.iterator("column-rows", function(b, c, d, l, f) {
      return ua(b.aoData, f, "search" === a ? "_aFilterData" : "_aSortData", c);
    }, 1);
  });
  L("columns().nodes()", "column().nodes()", function() {
    return this.iterator("column-rows", function(a, b, c, d, l) {
      return ua(a.aoData, l, "anCells", b);
    }, 1);
  });
  L("columns().visible()", "column().visible()", function(b, c) {
    var l = this.iterator("column", function(c, l) {
      if (b === d) {
        return c.aoColumns[l].bVisible;
      }
      var f = c.aoColumns, p = f[l], g = c.aoData, t;
      if (b !== d && p.bVisible !== b) {
        if (b) {
          var h = a.inArray(!0, da(f, "bVisible"), l + 1);
          var q = 0;
          for (t = g.length; q < t; q++) {
            var m = g[q].nTr;
            f = g[q].anCells;
            m && m.insertBefore(f[l], f[h] || null);
          }
        } else {
          a(da(c.aoData, "anCells", l)).detach();
        }
        p.bVisible = b;
        Q(c, c.aoHeader);
        Q(c, c.aoFooter);
        Fa(c);
      }
    });
    b !== d && (this.iterator("column", function(a, d) {
      K(a, null, "column-visibility", [a, d, b, c]);
    }), (c === d || c) && this.columns.adjust());
    return l;
  });
  L("columns().indexes()", "column().index()", function(a) {
    return this.iterator("column", function(b, c) {
      return "visible" === a ? l(b, c) : c;
    }, 1);
  });
  G("columns.adjust()", function() {
    return this.iterator("table", function(a) {
      y(a);
    }, 1);
  });
  G("column.index()", function(a, b) {
    if (0 !== this.context.length) {
      var c = this.context[0];
      if ("fromVisible" === a || "toData" === a) {
        return q(c, b);
      }
      if ("fromData" === a || "toVisible" === a) {
        return l(c, b);
      }
    }
  });
  G("column()", function(a, b) {
    return ab(this.columns(a, b));
  });
  var $b = function(b, c, l) {
    var f = b.aoData, p = Ka(b, l), g = Ib(ua(f, p, "anCells")), t = a([].concat.apply([], g)), h, q = b.aoColumns.length, m, n, x, u, z, r;
    return Za("cell", c, function(c) {
      var l = "function" === typeof c;
      if (null === c || c === d || l) {
        m = [];
        n = 0;
        for (x = p.length; n < x; n++) {
          for (h = p[n], u = 0; u < q; u++) {
            z = {row:h, column:u}, l ? (r = f[h], c(z, F(b, h, u), r.anCells ? r.anCells[u] : null) && m.push(z)) : m.push(z);
          }
        }
        return m;
      }
      if (a.isPlainObject(c)) {
        return [c];
      }
      l = t.filter(c).map(function(a, b) {
        return {row:b._DT_CellIndex.row, column:b._DT_CellIndex.column};
      }).toArray();
      if (l.length || !c.nodeName) {
        return l;
      }
      r = a(c).closest("*[data-dt-row]");
      return r.length ? [{row:r.data("dt-row"), column:r.data("dt-column")}] : [];
    }, b, l);
  };
  G("cells()", function(b, c, l) {
    a.isPlainObject(b) && (b.row === d ? (l = b, b = null) : (l = c, c = null));
    a.isPlainObject(c) && (l = c, c = null);
    if (null === c || c === d) {
      return this.iterator("table", function(a) {
        return $b(a, b, $a(l));
      });
    }
    var f = this.columns(c, l), p = this.rows(b, l), g, t, h, q, m, n = this.iterator("table", function(a, b) {
      g = [];
      t = 0;
      for (h = p[b].length; t < h; t++) {
        for (q = 0, m = f[b].length; q < m; q++) {
          g.push({row:p[b][t], column:f[b][q]});
        }
      }
      return g;
    }, 1);
    a.extend(n.selector, {cols:c, rows:b, opts:l});
    return n;
  });
  L("cells().nodes()", "cell().node()", function() {
    return this.iterator("cell", function(a, b, c) {
      return (a = a.aoData[b]) && a.anCells ? a.anCells[c] : d;
    }, 1);
  });
  G("cells().data()", function() {
    return this.iterator("cell", function(a, b, c) {
      return F(a, b, c);
    }, 1);
  });
  L("cells().cache()", "cell().cache()", function(a) {
    a = "search" === a ? "_aFilterData" : "_aSortData";
    return this.iterator("cell", function(b, c, d) {
      return b.aoData[c][a][d];
    }, 1);
  });
  L("cells().render()", "cell().render()", function(a) {
    return this.iterator("cell", function(b, c, d) {
      return F(b, c, d, a);
    }, 1);
  });
  L("cells().indexes()", "cell().index()", function() {
    return this.iterator("cell", function(a, b, c) {
      return {row:b, column:c, columnVisible:l(a, c)};
    }, 1);
  });
  L("cells().invalidate()", "cell().invalidate()", function(a) {
    return this.iterator("cell", function(b, c, d) {
      S(b, c, a, d);
    });
  });
  G("cell()", function(a, b, c) {
    return ab(this.cells(a, b, c));
  });
  G("cell().data()", function(a) {
    var b = this.context, c = this[0];
    if (a === d) {
      return b.length && c.length ? F(b[0], c[0].row, c[0].column) : d;
    }
    J(b[0], c[0].row, c[0].column, a);
    S(b[0], c[0].row, "data", c[0].column);
    return this;
  });
  G("order()", function(b, c) {
    var l = this.context;
    if (b === d) {
      return 0 !== l.length ? l[0].aaSorting : d;
    }
    "number" === typeof b ? b = [[b, c]] : b.length && !a.isArray(b[0]) && (b = Array.prototype.slice.call(arguments));
    return this.iterator("table", function(a) {
      a.aaSorting = b.slice();
    });
  });
  G("order.listener()", function(a, b, c) {
    return this.iterator("table", function(d) {
      Na(d, a, b, c);
    });
  });
  G("order.fixed()", function(b) {
    if (!b) {
      var c = this.context, c = c.length ? c[0].aaSortingFixed : d;
      return a.isArray(c) ? {pre:c} : c;
    }
    return this.iterator("table", function(c) {
      c.aaSortingFixed = a.extend(!0, {}, b);
    });
  });
  G(["columns().order()", "column().order()"], function(b) {
    var c = this;
    return this.iterator("table", function(d, l) {
      var f = [];
      a.each(c[l], function(a, c) {
        f.push([c, b]);
      });
      d.aaSorting = f;
    });
  });
  G("search()", function(b, c, l, f) {
    var p = this.context;
    return b === d ? 0 !== p.length ? p[0].oPreviousSearch.sSearch : d : this.iterator("table", function(d) {
      d.oFeatures.bFilter && ra(d, a.extend({}, d.oPreviousSearch, {sSearch:b + "", bRegex:null === c ? !1 : c, bSmart:null === l ? !0 : l, bCaseInsensitive:null === f ? !0 : f}), 1);
    });
  });
  L("columns().search()", "column().search()", function(b, c, l, f) {
    return this.iterator("column", function(p, g) {
      var t = p.aoPreSearchCols;
      if (b === d) {
        return t[g].sSearch;
      }
      p.oFeatures.bFilter && (a.extend(t[g], {sSearch:b + "", bRegex:null === c ? !1 : c, bSmart:null === l ? !0 : l, bCaseInsensitive:null === f ? !0 : f}), ra(p, p.oPreviousSearch, 1));
    });
  });
  G("state()", function() {
    return this.context.length ? this.context[0].oSavedState : null;
  });
  G("state.clear()", function() {
    return this.iterator("table", function(a) {
      a.fnStateSaveCallback.call(a.oInstance, a, {});
    });
  });
  G("state.loaded()", function() {
    return this.context.length ? this.context[0].oLoadedState : null;
  });
  G("state.save()", function() {
    return this.iterator("table", function(a) {
      Fa(a);
    });
  });
  C.versionCheck = C.fnVersionCheck = function(a) {
    var b = C.version.split(".");
    a = a.split(".");
    for (var c, d, l = 0, f = a.length; l < f; l++) {
      if (c = parseInt(b[l], 10) || 0, d = parseInt(a[l], 10) || 0, c !== d) {
        return c > d;
      }
    }
    return !0;
  };
  C.isDataTable = C.fnIsDataTable = function(b) {
    var c = a(b).get(0), d = !1;
    a.each(C.settings, function(b, l) {
      b = l.nScrollHead ? a("table", l.nScrollHead)[0] : null;
      var f = l.nScrollFoot ? a("table", l.nScrollFoot)[0] : null;
      if (l.nTable === c || b === c || f === c) {
        d = !0;
      }
    });
    return d;
  };
  C.tables = C.fnTables = function(b) {
    var c = !1;
    a.isPlainObject(b) && (c = b.api, b = b.visible);
    var d = a.map(C.settings, function(c) {
      if (!b || b && a(c.nTable).is(":visible")) {
        return c.nTable;
      }
    });
    return c ? new H(d) : d;
  };
  C.camelToHungarian = g;
  G("$()", function(b, c) {
    c = this.rows(c).nodes();
    c = a(c);
    return a([].concat(c.filter(b).toArray(), c.find(b).toArray()));
  });
  a.each(["on", "one", "off"], function(b, c) {
    G(c + "()", function() {
      var b = Array.prototype.slice.call(arguments);
      b[0].match(/\.dt\b/) || (b[0] += ".dt");
      var d = a(this.tables().nodes());
      d[c].apply(d, b);
      return this;
    });
  });
  G("clear()", function() {
    return this.iterator("table", function(a) {
      aa(a);
    });
  });
  G("settings()", function() {
    return new H(this.context, this.context);
  });
  G("init()", function() {
    var a = this.context;
    return a.length ? a[0].oInit : null;
  });
  G("data()", function() {
    return this.iterator("table", function(a) {
      return da(a.aoData, "_aData");
    }).flatten();
  });
  G("destroy()", function(c) {
    c = c || !1;
    return this.iterator("table", function(d) {
      var l = d.nTableWrapper.parentNode, f = d.oClasses, p = d.nTable, g = d.nTBody, t = d.nTHead, h = d.nTFoot, q = a(p), g = a(g), m = a(d.nTableWrapper), n = a.map(d.aoData, function(a) {
        return a.nTr;
      }), x;
      d.bDestroying = !0;
      K(d, "aoDestroyCallback", "destroy", [d]);
      c || (new H(d)).columns().visible(!0);
      m.unbind(".DT").find(":not(tbody *)").unbind(".DT");
      a(b).unbind(".DT-" + d.sInstance);
      p != t.parentNode && (q.children("thead").detach(), q.append(t));
      h && p != h.parentNode && (q.children("tfoot").detach(), q.append(h));
      d.aaSorting = [];
      d.aaSortingFixed = [];
      Ea(d);
      a(n).removeClass(d.asStripeClasses.join(" "));
      a("th, td", t).removeClass(f.sSortable + " " + f.sSortableAsc + " " + f.sSortableDesc + " " + f.sSortableNone);
      d.bJUI && (a("th span." + f.sSortIcon + ", td span." + f.sSortIcon, t).detach(), a("th, td", t).each(function() {
        var b = a("div." + f.sSortJUIWrapper, this);
        a(this).append(b.contents());
        b.detach();
      }));
      g.children().detach();
      g.append(n);
      t = c ? "remove" : "detach";
      q[t]();
      m[t]();
      !c && l && (l.insertBefore(p, d.nTableReinsertBefore), q.css("width", d.sDestroyWidth).removeClass(f.sTable), (x = d.asDestroyStripes.length) && g.children().each(function(b) {
        a(this).addClass(d.asDestroyStripes[b % x]);
      }));
      l = a.inArray(d, C.settings);
      -1 !== l && C.settings.splice(l, 1);
    });
  });
  a.each(["column", "row", "cell"], function(a, b) {
    G(b + "s().every()", function(a) {
      var c = this.selector.opts, l = this;
      return this.iterator(b, function(f, p, g, t, h) {
        a.call(l[b](p, "cell" === b ? g : c, "cell" === b ? c : d), p, g, t, h);
      });
    });
  });
  G("i18n()", function(b, c, l) {
    var f = this.context[0];
    b = U(b)(f.oLanguage);
    b === d && (b = c);
    l !== d && a.isPlainObject(b) && (b = b[l] !== d ? b[l] : b._);
    return b.replace("%d", l);
  });
  C.version = "1.10.12";
  C.settings = [];
  C.models = {};
  C.models.oSearch = {bCaseInsensitive:!0, sSearch:"", bRegex:!1, bSmart:!0};
  C.models.oRow = {nTr:null, anCells:null, _aData:[], _aSortData:null, _aFilterData:null, _sFilterRow:null, _sRowStripe:"", src:null, idx:-1};
  C.models.oColumn = {idx:null, aDataSort:null, asSorting:null, bSearchable:null, bSortable:null, bVisible:null, _sManualType:null, _bAttrSrc:!1, fnCreatedCell:null, fnGetData:null, fnSetData:null, mData:null, mRender:null, nTh:null, nTf:null, sClass:null, sContentPadding:null, sDefaultContent:null, sName:null, sSortDataType:"std", sSortingClass:null, sSortingClassJUI:null, sTitle:null, sType:null, sWidth:null, sWidthOrig:null};
  C.defaults = {aaData:null, aaSorting:[[0, "asc"]], aaSortingFixed:[], ajax:null, aLengthMenu:[10, 25, 50, 100], aoColumns:null, aoColumnDefs:null, aoSearchCols:[], asStripeClasses:null, bAutoWidth:!0, bDeferRender:!1, bDestroy:!1, bFilter:!0, bInfo:!0, bJQueryUI:!1, bLengthChange:!0, bPaginate:!0, bProcessing:!1, bRetrieve:!1, bScrollCollapse:!1, bServerSide:!1, bSort:!0, bSortMulti:!0, bSortCellsTop:!1, bSortClasses:!0, bStateSave:!1, fnCreatedRow:null, fnDrawCallback:null, fnFooterCallback:null, 
  fnFormatNumber:function(a) {
    return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
  }, fnHeaderCallback:null, fnInfoCallback:null, fnInitComplete:null, fnPreDrawCallback:null, fnRowCallback:null, fnServerData:null, fnServerParams:null, fnStateLoadCallback:function(a) {
    try {
      return JSON.parse((-1 === a.iStateDuration ? sessionStorage : localStorage).getItem("DataTables_" + a.sInstance + "_" + location.pathname));
    } catch (V) {
    }
  }, fnStateLoadParams:null, fnStateLoaded:null, fnStateSaveCallback:function(a, b) {
    try {
      (-1 === a.iStateDuration ? sessionStorage : localStorage).setItem("DataTables_" + a.sInstance + "_" + location.pathname, JSON.stringify(b));
    } catch (D) {
    }
  }, fnStateSaveParams:null, iStateDuration:7200, iDeferLoading:null, iDisplayLength:10, iDisplayStart:0, iTabIndex:0, oClasses:{}, oLanguage:{oAria:{sSortAscending:": activate to sort column ascending", sSortDescending:": activate to sort column descending"}, oPaginate:{sFirst:"First", sLast:"Last", sNext:"Next", sPrevious:"Previous"}, sEmptyTable:"No data available in table", sInfo:"Showing _START_ to _END_ of _TOTAL_ entries", sInfoEmpty:"Showing 0 to 0 of 0 entries", sInfoFiltered:"(filtered from _MAX_ total entries)", 
  sInfoPostFix:"", sDecimal:"", sThousands:",", sLengthMenu:"Show _MENU_ entries", sLoadingRecords:"Loading...", sProcessing:"Processing...", sSearch:"Search:", sSearchPlaceholder:"", sUrl:"", sZeroRecords:"No matching records found"}, oSearch:a.extend({}, C.models.oSearch), sAjaxDataProp:"data", sAjaxSource:null, sDom:"lfrtip", searchDelay:null, sPaginationType:"simple_numbers", sScrollX:"", sScrollXInner:"", sScrollY:"", sServerMethod:"GET", renderer:null, rowId:"DT_RowId"};
  f(C.defaults);
  C.defaults.column = {aDataSort:null, iDataSort:-1, asSorting:["asc", "desc"], bSearchable:!0, bSortable:!0, bVisible:!0, fnCreatedCell:null, mData:null, mRender:null, sCellType:"td", sClass:"", sContentPadding:"", sDefaultContent:null, sName:"", sSortDataType:"std", sTitle:null, sType:null, sWidth:null};
  f(C.defaults.column);
  C.models.oSettings = {oFeatures:{bAutoWidth:null, bDeferRender:null, bFilter:null, bInfo:null, bLengthChange:null, bPaginate:null, bProcessing:null, bServerSide:null, bSort:null, bSortMulti:null, bSortClasses:null, bStateSave:null}, oScroll:{bCollapse:null, iBarWidth:0, sX:null, sXInner:null, sY:null}, oLanguage:{fnInfoCallback:null}, oBrowser:{bScrollOversize:!1, bScrollbarLeft:!1, bBounding:!1, barWidth:0}, ajax:null, aanFeatures:[], aoData:[], aiDisplay:[], aiDisplayMaster:[], aIds:{}, aoColumns:[], 
  aoHeader:[], aoFooter:[], oPreviousSearch:{}, aoPreSearchCols:[], aaSorting:null, aaSortingFixed:[], asStripeClasses:null, asDestroyStripes:[], sDestroyWidth:0, aoRowCallback:[], aoHeaderCallback:[], aoFooterCallback:[], aoDrawCallback:[], aoRowCreatedCallback:[], aoPreDrawCallback:[], aoInitComplete:[], aoStateSaveParams:[], aoStateLoadParams:[], aoStateLoaded:[], sTableId:"", nTable:null, nTHead:null, nTFoot:null, nTBody:null, nTableWrapper:null, bDeferLoading:!1, bInitialised:!1, aoOpenRows:[], 
  sDom:null, searchDelay:null, sPaginationType:"two_button", iStateDuration:0, aoStateSave:[], aoStateLoad:[], oSavedState:null, oLoadedState:null, sAjaxSource:null, sAjaxDataProp:null, bAjaxDataGet:!0, jqXHR:null, json:d, oAjaxData:d, fnServerData:null, aoServerParams:[], sServerMethod:null, fnFormatNumber:null, aLengthMenu:null, iDraw:0, bDrawing:!1, iDrawError:-1, _iDisplayLength:10, _iDisplayStart:0, _iRecordsTotal:0, _iRecordsDisplay:0, bJUI:null, oClasses:{}, bFiltered:!1, bSorted:!1, bSortCellsTop:null, 
  oInit:null, aoDestroyCallback:[], fnRecordsTotal:function() {
    return "ssp" == Y(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length;
  }, fnRecordsDisplay:function() {
    return "ssp" == Y(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length;
  }, fnDisplayEnd:function() {
    var a = this._iDisplayLength, b = this._iDisplayStart, c = b + a, d = this.aiDisplay.length, l = this.oFeatures, f = l.bPaginate;
    return l.bServerSide ? !1 === f || -1 === a ? b + d : Math.min(b + a, this._iRecordsDisplay) : !f || c > d || -1 === a ? d : c;
  }, oInstance:null, sInstance:null, iTabIndex:0, nScrollHead:null, nScrollFoot:null, aLastSort:[], oPlugins:{}, rowIdFn:null, rowId:null};
  C.ext = R = {buttons:{}, classes:{}, builder:"-source-", errMode:"window.console.error", feature:[], search:[], selector:{cell:[], column:[], row:[]}, internal:{}, legacy:{ajax:null}, pager:{}, renderer:{pageButton:{}, header:{}}, order:{}, type:{detect:[], search:{}, order:{}}, _unique:0, fnVersionCheck:C.fnVersionCheck, iApiIndex:0, oJUIClasses:{}, sVersion:C.version};
  a.extend(R, {afnFiltering:R.search, aTypes:R.type.detect, ofnSearch:R.type.search, oSort:R.type.order, afnSortData:R.order, aoFeatures:R.feature, oApi:R.internal, oStdClasses:R.classes, oPagination:R.pager});
  a.extend(C.ext.classes, {sTable:"dataTable", sNoFooter:"no-footer", sPageButton:"paginate_button", sPageButtonActive:"current", sPageButtonDisabled:"disabled", sStripeOdd:"odd", sStripeEven:"even", sRowEmpty:"dataTables_empty", sWrapper:"dataTables_wrapper", sFilter:"dataTables_filter", sInfo:"dataTables_info", sPaging:"dataTables_paginate paging_", sLength:"dataTables_length", sProcessing:"dataTables_processing", sSortAsc:"sorting_asc", sSortDesc:"sorting_desc", sSortable:"sorting", sSortableAsc:"sorting_asc_disabled", 
  sSortableDesc:"sorting_desc_disabled", sSortableNone:"sorting_disabled", sSortColumn:"sorting_", sFilterInput:"", sLengthSelect:"", sScrollWrapper:"dataTables_scroll", sScrollHead:"dataTables_scrollHead", sScrollHeadInner:"dataTables_scrollHeadInner", sScrollBody:"dataTables_scrollBody", sScrollFoot:"dataTables_scrollFoot", sScrollFootInner:"dataTables_scrollFootInner", sHeaderTH:"", sFooterTH:"", sSortJUIAsc:"", sSortJUIDesc:"", sSortJUI:"", sSortJUIAscAllowed:"", sSortJUIDescAllowed:"", sSortJUIWrapper:"", 
  sSortIcon:"", sJUIHeader:"", sJUIFooter:""});
  a.extend(C.ext.oJUIClasses, C.ext.classes, {sPageButton:"fg-button ui-button ui-state-default", sPageButtonActive:"ui-state-disabled", sPageButtonDisabled:"ui-state-disabled", sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_", sSortAsc:"ui-state-default sorting_asc", sSortDesc:"ui-state-default sorting_desc", sSortable:"ui-state-default sorting", sSortableAsc:"ui-state-default sorting_asc_disabled", sSortableDesc:"ui-state-default sorting_desc_disabled", 
  sSortableNone:"ui-state-default sorting_disabled", sSortJUIAsc:"css_right ui-icon ui-icon-triangle-1-n", sSortJUIDesc:"css_right ui-icon ui-icon-triangle-1-s", sSortJUI:"css_right ui-icon ui-icon-carat-2-n-s", sSortJUIAscAllowed:"css_right ui-icon ui-icon-carat-1-n", sSortJUIDescAllowed:"css_right ui-icon ui-icon-carat-1-s", sSortJUIWrapper:"DataTables_sort_wrapper", sSortIcon:"DataTables_sort_icon", sScrollHead:"dataTables_scrollHead ui-state-default", sScrollFoot:"dataTables_scrollFoot ui-state-default", 
  sHeaderTH:"ui-state-default", sFooterTH:"ui-state-default", sJUIHeader:"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-tl ui-corner-tr", sJUIFooter:"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-bl ui-corner-br"});
  var Cb = C.ext.pager;
  a.extend(Cb, {simple:function(a, b) {
    return ["previous", "next"];
  }, full:function(a, b) {
    return ["first", "previous", "next", "last"];
  }, numbers:function(a, b) {
    return [Ha(a, b)];
  }, simple_numbers:function(a, b) {
    return ["previous", Ha(a, b), "next"];
  }, full_numbers:function(a, b) {
    return ["first", "previous", Ha(a, b), "next", "last"];
  }, _numbers:Ha, numbers_length:7});
  a.extend(!0, C.ext.renderer, {pageButton:{_:function(b, d, l, f, p, g) {
    var t = b.oClasses, h = b.oLanguage.oPaginate, q = b.oLanguage.oAria.paginate || {}, m, n, x = 0, u = function(c, d) {
      var f, z = function(a) {
        Ta(b, a.data.action, !0);
      };
      var r = 0;
      for (f = d.length; r < f; r++) {
        var A = d[r];
        if (a.isArray(A)) {
          var v = a("<" + (A.DT_el || "div") + "/>").appendTo(c);
          u(v, A);
        } else {
          m = null;
          n = "";
          switch(A) {
            case "ellipsis":
              c.append('<span class="ellipsis">&#x2026;</span>');
              break;
            case "first":
              m = h.sFirst;
              n = A + (0 < p ? "" : " " + t.sPageButtonDisabled);
              break;
            case "previous":
              m = h.sPrevious;
              n = A + (0 < p ? "" : " " + t.sPageButtonDisabled);
              break;
            case "next":
              m = h.sNext;
              n = A + (p < g - 1 ? "" : " " + t.sPageButtonDisabled);
              break;
            case "last":
              m = h.sLast;
              n = A + (p < g - 1 ? "" : " " + t.sPageButtonDisabled);
              break;
            default:
              m = A + 1, n = p === A ? t.sPageButtonActive : "";
          }
          null !== m && (v = a("<a>", {"class":t.sPageButton + " " + n, "aria-controls":b.sTableId, "aria-label":q[A], "data-dt-idx":x, tabindex:b.iTabIndex, id:0 === l && "string" === typeof A ? b.sTableId + "_" + A : null}).html(m).appendTo(c), Va(v, {action:A}, z), x++);
        }
      }
    };
    try {
      var z = a(d).find(c.activeElement).data("dt-idx");
    } catch (bc) {
    }
    u(a(d).empty(), f);
    z && a(d).find("[data-dt-idx=" + z + "]").focus();
  }}});
  a.extend(C.ext.type.detect, [function(a, b) {
    b = b.oLanguage.sDecimal;
    return Ya(a, b) ? "num" + b : null;
  }, function(a, b) {
    if (!(!a || a instanceof Date || Qb.test(a) && Rb.test(a))) {
      return null;
    }
    b = Date.parse(a);
    return null !== b && !isNaN(b) || ka(a) ? "date" : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Ya(a, b, !0) ? "num-fmt" + b : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Hb(a, b) ? "html-num" + b : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Hb(a, b, !0) ? "html-num-fmt" + b : null;
  }, function(a, b) {
    return ka(a) || "string" === typeof a && -1 !== a.indexOf("<") ? "html" : null;
  }]);
  a.extend(C.ext.type.search, {html:function(a) {
    return ka(a) ? a : "string" === typeof a ? a.replace(Eb, " ").replace(Ja, "") : "";
  }, string:function(a) {
    return ka(a) ? a : "string" === typeof a ? a.replace(Eb, " ") : a;
  }});
  var Ia = function(a, b, c, d) {
    if (0 !== a && (!a || "-" === a)) {
      return -Infinity;
    }
    b && (a = Gb(a, b));
    a.replace && (c && (a = a.replace(c, "")), d && (a = a.replace(d, "")));
    return 1 * a;
  };
  a.extend(R.type.order, {"date-pre":function(a) {
    return Date.parse(a) || 0;
  }, "html-pre":function(a) {
    return ka(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "";
  }, "string-pre":function(a) {
    return ka(a) ? "" : "string" === typeof a ? a.toLowerCase() : a.toString ? a.toString() : "";
  }, "string-asc":function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }, "string-desc":function(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }});
  nb("");
  a.extend(!0, C.ext.renderer, {header:{_:function(b, c, d, l) {
    a(b.nTable).on("order.dt.DT", function(a, f, p, g) {
      b === f && (a = d.idx, c.removeClass(d.sSortingClass + " " + l.sSortAsc + " " + l.sSortDesc).addClass("asc" == g[a] ? l.sSortAsc : "desc" == g[a] ? l.sSortDesc : d.sSortingClass));
    });
  }, jqueryui:function(b, c, d, l) {
    a("<div/>").addClass(l.sSortJUIWrapper).append(c.contents()).append(a("<span/>").addClass(l.sSortIcon + " " + d.sSortingClassJUI)).appendTo(c);
    a(b.nTable).on("order.dt.DT", function(a, f, p, g) {
      b === f && (a = d.idx, c.removeClass(l.sSortAsc + " " + l.sSortDesc).addClass("asc" == g[a] ? l.sSortAsc : "desc" == g[a] ? l.sSortDesc : d.sSortingClass), c.find("span." + l.sSortIcon).removeClass(l.sSortJUIAsc + " " + l.sSortJUIDesc + " " + l.sSortJUI + " " + l.sSortJUIAscAllowed + " " + l.sSortJUIDescAllowed).addClass("asc" == g[a] ? l.sSortJUIAsc : "desc" == g[a] ? l.sSortJUIDesc : d.sSortingClassJUI));
    });
  }}});
  var Nb = function(a) {
    return "string" === typeof a ? a.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : a;
  };
  C.render = {number:function(a, b, c, d, l) {
    return {display:function(f) {
      if ("number" !== typeof f && "string" !== typeof f) {
        return f;
      }
      var p = 0 > f ? "-" : "", g = parseFloat(f);
      if (isNaN(g)) {
        return Nb(f);
      }
      f = Math.abs(g);
      g = parseInt(f, 10);
      f = c ? b + (f - g).toFixed(c).substring(2) : "";
      return p + (d || "") + g.toString().replace(/\B(?=(\d{3})+(?!\d))/g, a) + f + (l || "");
    }};
  }, text:function() {
    return {display:Nb};
  }};
  a.extend(C.ext.internal, {_fnExternApiFunc:Db, _fnBuildAjax:wa, _fnAjaxUpdate:cb, _fnAjaxParameters:db, _fnAjaxUpdateDraw:eb, _fnAjaxDataSrc:xa, _fnAddColumn:v, _fnColumnOptions:w, _fnAdjustColumnSizing:y, _fnVisibleToColumnIndex:q, _fnColumnIndexToVisible:l, _fnVisbleColumns:p, _fnGetColumns:t, _fnColumnTypes:x, _fnApplyColumnDefs:z, _fnHungarianMap:f, _fnCamelToHungarian:g, _fnLanguageCompat:h, _fnBrowserDetect:r, _fnAddData:A, _fnAddTr:E, _fnNodeToDataIndex:function(a, b) {
    return b._DT_RowIndex !== d ? b._DT_RowIndex : null;
  }, _fnNodeToColumnIndex:function(b, c, d) {
    return a.inArray(d, b.aoData[c].anCells);
  }, _fnGetCellData:F, _fnSetCellData:J, _fnSplitObjNotation:N, _fnGetObjectDataFn:U, _fnSetObjectDataFn:X, _fnGetDataMaster:W, _fnClearTable:aa, _fnDeleteIndex:ia, _fnInvalidate:S, _fnGetRowElements:oa, _fnCreateTr:O, _fnBuildHead:I, _fnDrawHead:Q, _fnDraw:ba, _fnReDraw:ga, _fnAddOptionsHtml:pa, _fnDetectHeader:qa, _fnGetUniqueThs:va, _fnFeatureHtmlFilter:fb, _fnFilterComplete:ra, _fnFilterCustom:gb, _fnFilterColumn:hb, _fnFilter:ib, _fnFilterCreateSearch:La, _fnEscapeRegex:Qa, _fnFilterData:jb, 
  _fnFeatureHtmlInfo:mb, _fnUpdateInfo:tb, _fnInfoMacros:ub, _fnInitialise:ta, _fnInitComplete:Ca, _fnLengthChange:Ra, _fnFeatureHtmlLength:pb, _fnFeatureHtmlPaginate:sb, _fnPageChange:Ta, _fnFeatureHtmlProcessing:qb, _fnProcessingDisplay:ea, _fnFeatureHtmlTable:rb, _fnScrollDraw:Aa, _fnApplyToChildren:ha, _fnCalculateColumnWidths:Ma, _fnThrottle:Pa, _fnConvertToWidth:vb, _fnGetWidestNode:wb, _fnGetMaxLenString:xb, _fnStringToCss:M, _fnSortFlatten:ma, _fnSort:ob, _fnSortAria:zb, _fnSortListener:Ua, 
  _fnSortAttachListener:Na, _fnSortingClasses:Ea, _fnSortData:yb, _fnSaveState:Fa, _fnLoadState:Ab, _fnSettingsFromNode:Ga, _fnLog:ja, _fnMap:fa, _fnBindAction:Va, _fnCallbackReg:Z, _fnCallbackFire:K, _fnLengthOverflow:Sa, _fnRenderer:Oa, _fnDataSource:Y, _fnRowAttributes:P, _fnCalculateEnd:function() {
  }});
  a.fn.dataTable = C;
  C.$ = a;
  a.fn.dataTableSettings = C.settings;
  a.fn.dataTableExt = C.ext;
  a.fn.DataTable = function(b) {
    return a(this).dataTable(b).api();
  };
  a.each(C, function(b, c) {
    a.fn.DataTable[b] = c;
  });
  return a.fn.dataTable;
});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  var f = a.fn.dataTable, g = function(b, c) {
    if (!f.versionCheck || !f.versionCheck("1.10.3")) {
      throw "DataTables Responsive requires DataTables 1.10.3 or newer";
    }
    this.s = {dt:new f.Api(b), columns:[], current:[]};
    this.s.dt.settings()[0].responsive || (c && "string" === typeof c.details ? c.details = {type:c.details} : c && !1 === c.details ? c.details = {type:!1} : c && !0 === c.details && (c.details = {type:"inline"}), this.c = a.extend(!0, {}, g.defaults, f.defaults.responsive, c), b.responsive = this, this._constructor());
  };
  a.extend(g.prototype, {_constructor:function() {
    var c = this, d = this.s.dt, g = d.settings()[0], h = a(b).width();
    d.settings()[0]._responsive = this;
    a(b).on("resize.dtr orientationchange.dtr", f.util.throttle(function() {
      var d = a(b).width();
      d !== h && (c._resize(), h = d);
    }));
    g.oApi._fnCallbackReg(g, "aoRowCreatedCallback", function(b, f, g) {
      -1 !== a.inArray(!1, c.s.current) && a("td, th", b).each(function(b) {
        b = d.column.index("toData", b);
        !1 === c.s.current[b] && a(this).css("display", "none");
      });
    });
    d.on("destroy.dtr", function() {
      d.off(".dtr");
      a(d.table().body()).off(".dtr");
      a(b).off("resize.dtr orientationchange.dtr");
      a.each(c.s.current, function(a, b) {
        !1 === b && c._setColumnVis(a, !0);
      });
    });
    this.c.breakpoints.sort(function(a, b) {
      return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
    });
    this._classLogic();
    this._resizeAuto();
    g = this.c.details;
    !1 !== g.type && (c._detailsInit(), d.on("column-visibility.dtr", function(a, b, d, f) {
      c._classLogic();
      c._resizeAuto();
      c._resize();
    }), d.on("draw.dtr", function() {
    }), a(d.table().node()).addClass("dtr-" + g.type));
    d.on("column-reorder.dtr", function(a, b, d) {
      c._classLogic();
      c._resizeAuto();
      c._resize();
    });
    d.on("column-sizing.dtr", function() {
      c._resizeAuto();
      c._resize();
    });
    d.on("init.dtr", function(b, f, g) {
      c._resizeAuto();
      c._resize();
      a.inArray(!1, c.s.current) && d.columns.adjust();
    });
    this._resize();
  }, _columnsVisiblity:function(b) {
    var c = this.s.dt, d = this.s.columns, f, g = d.map(function(a, b) {
      return {columnIdx:b, priority:a.priority};
    }).sort(function(a, b) {
      return a.priority !== b.priority ? a.priority - b.priority : a.columnIdx - b.columnIdx;
    }), h = a.map(d, function(c) {
      return c.auto && null === c.minWidth ? !1 : !0 === c.auto ? "-" : -1 !== a.inArray(b, c.includeIn);
    }), m = 0;
    var q = 0;
    for (f = h.length; q < f; q++) {
      !0 === h[q] && (m += d[q].minWidth);
    }
    q = c.settings()[0].oScroll;
    q = q.sY || q.sX ? q.iBarWidth : 0;
    c = c.table().container().offsetWidth - q - m;
    q = 0;
    for (f = h.length; q < f; q++) {
      d[q].control && (c -= d[q].minWidth);
    }
    m = !1;
    q = 0;
    for (f = g.length; q < f; q++) {
      var l = g[q].columnIdx;
      "-" === h[l] && !d[l].control && d[l].minWidth && (m || 0 > c - d[l].minWidth ? (m = !0, h[l] = !1) : h[l] = !0, c -= d[l].minWidth);
    }
    g = !1;
    q = 0;
    for (f = d.length; q < f; q++) {
      if (!d[q].control && !d[q].never && !h[q]) {
        g = !0;
        break;
      }
    }
    q = 0;
    for (f = d.length; q < f; q++) {
      d[q].control && (h[q] = g);
    }
    -1 === a.inArray(!0, h) && (h[0] = !0);
    return h;
  }, _classLogic:function() {
    var b = this, c = this.c.breakpoints, f = this.s.dt, g = f.columns().eq(0).map(function(b) {
      var c = this.column(b), l = c.header().className;
      b = f.settings()[0].aoColumns[b].responsivePriority;
      b === d && (c = a(c.header()).data("priority"), b = c !== d ? 1 * c : 10000);
      return {className:l, includeIn:[], auto:!1, control:!1, never:l.match(/\bnever\b/) ? !0 : !1, priority:b};
    }), h = function(b, c) {
      b = g[b].includeIn;
      -1 === a.inArray(c, b) && b.push(c);
    }, w = function(a, d, l, f) {
      if (!l) {
        g[a].includeIn.push(d);
      } else {
        if ("max-" === l) {
          for (f = b._find(d).width, d = 0, l = c.length; d < l; d++) {
            c[d].width <= f && h(a, c[d].name);
          }
        } else {
          if ("min-" === l) {
            for (f = b._find(d).width, d = 0, l = c.length; d < l; d++) {
              c[d].width >= f && h(a, c[d].name);
            }
          } else {
            if ("not-" === l) {
              for (d = 0, l = c.length; d < l; d++) {
                -1 === c[d].name.indexOf(f) && h(a, c[d].name);
              }
            }
          }
        }
      }
    };
    g.each(function(b, d) {
      for (var l = b.className.split(" "), f = !1, g = 0, h = l.length; g < h; g++) {
        var q = a.trim(l[g]);
        if ("all" === q) {
          f = !0;
          b.includeIn = a.map(c, function(a) {
            return a.name;
          });
          return;
        }
        if ("none" === q || b.never) {
          f = !0;
          return;
        }
        if ("control" === q) {
          f = !0;
          b.control = !0;
          return;
        }
        a.each(c, function(a, b) {
          a = b.name.split("-");
          var c = q.match(new RegExp("(min\\-|max\\-|not\\-)?(" + a[0] + ")(\\-[_a-zA-Z0-9])?"));
          c && (f = !0, c[2] === a[0] && c[3] === "-" + a[1] ? w(d, b.name, c[1], c[2] + c[3]) : c[2] !== a[0] || c[3] || w(d, b.name, c[1], c[2]));
        });
      }
      f || (b.auto = !0);
    });
    this.s.columns = g;
  }, _detailsDisplay:function(b, c) {
    var d = this, f = this.s.dt, g = this.c.details;
    if (g && !1 !== g.type) {
      var h = g.display(b, c, function() {
        return g.renderer(f, b[0], d._detailsObj(b[0]));
      });
      !0 !== h && !1 !== h || a(f.table().node()).triggerHandler("responsive-display.dt", [f, b, h, c]);
    }
  }, _detailsInit:function() {
    var b = this, c = this.s.dt, d = this.c.details;
    "inline" === d.type && (d.target = "td:first-child, th:first-child");
    c.on("draw.dtr", function() {
      b._tabIndexes();
    });
    b._tabIndexes();
    a(c.table().body()).on("keyup.dtr", "td, th", function(b) {
      13 === b.keyCode && a(this).data("dtr-keyboard") && a(this).click();
    });
    var f = d.target, d = "string" === typeof f ? f : "td, th";
    a(c.table().body()).on("click.dtr mousedown.dtr mouseup.dtr", d, function(d) {
      if (a(c.table().node()).hasClass("collapsed") && c.row(a(this).closest("tr")).length) {
        if ("number" === typeof f) {
          var g = 0 > f ? c.columns().eq(0).length + f : f;
          if (c.cell(this).index().column !== g) {
            return;
          }
        }
        g = c.row(a(this).closest("tr"));
        "click" === d.type ? b._detailsDisplay(g, !1) : "mousedown" === d.type ? a(this).css("outline", "none") : "mouseup" === d.type && a(this).blur().css("outline", "");
      }
    });
  }, _detailsObj:function(b) {
    var c = this, d = this.s.dt;
    return a.map(this.s.columns, function(a, f) {
      if (!a.never && !a.control) {
        return {title:d.settings()[0].aoColumns[f].sTitle, data:d.cell(b, f).render(c.c.orthogonal), hidden:d.column(f).visible() && !c.s.current[f], columnIndex:f, rowIndex:b};
      }
    });
  }, _find:function(a) {
    for (var b = this.c.breakpoints, c = 0, d = b.length; c < d; c++) {
      if (b[c].name === a) {
        return b[c];
      }
    }
  }, _redrawChildren:function() {
    var a = this, b = this.s.dt;
    b.rows({page:"current"}).iterator("row", function(c, d) {
      b.row(d);
      a._detailsDisplay(b.row(d), !0);
    });
  }, _resize:function() {
    var c = this, d = this.s.dt, f = a(b).width(), g = this.c.breakpoints, h = g[0].name, w = this.s.columns, y, q = this.s.current.slice();
    for (y = g.length - 1; 0 <= y; y--) {
      if (f <= g[y].width) {
        h = g[y].name;
        break;
      }
    }
    var l = this._columnsVisiblity(h);
    this.s.current = l;
    g = !1;
    y = 0;
    for (f = w.length; y < f; y++) {
      if (!1 === l[y] && !w[y].never && !w[y].control) {
        g = !0;
        break;
      }
    }
    a(d.table().node()).toggleClass("collapsed", g);
    var p = !1;
    d.columns().eq(0).each(function(a, b) {
      l[b] !== q[b] && (p = !0, c._setColumnVis(a, l[b]));
    });
    p && (this._redrawChildren(), a(d.table().node()).trigger("responsive-resize.dt", [d, this.s.current]));
  }, _resizeAuto:function() {
    var b = this.s.dt, c = this.s.columns;
    if (this.c.auto && -1 !== a.inArray(!0, a.map(c, function(a) {
      return a.auto;
    }))) {
      b.table().node();
      var d = b.table().node().cloneNode(!1), f = a(b.table().header().cloneNode(!1)).appendTo(d), g = a(b.table().body()).clone(!1, !1).empty().appendTo(d), h = b.columns().header().filter(function(a) {
        return b.column(a).visible();
      }).to$().clone(!1).css("display", "table-cell");
      a(g).append(a(b.rows({page:"current"}).nodes()).clone(!1)).find("th, td").css("display", "");
      if (g = b.table().footer()) {
        var g = a(g.cloneNode(!1)).appendTo(d), y = b.columns().footer().filter(function(a) {
          return b.column(a).visible();
        }).to$().clone(!1).css("display", "table-cell");
        a("<tr/>").append(y).appendTo(g);
      }
      a("<tr/>").append(h).appendTo(f);
      "inline" === this.c.details.type && a(d).addClass("dtr-inline collapsed");
      a(d).find("[name]").removeAttr("name");
      d = a("<div/>").css({width:1, height:1, overflow:"hidden"}).append(d);
      d.insertBefore(b.table().node());
      h.each(function(a) {
        a = b.column.index("fromVisible", a);
        c[a].minWidth = this.offsetWidth || 0;
      });
      d.remove();
    }
  }, _setColumnVis:function(b, c) {
    var d = this.s.dt;
    c = c ? "" : "none";
    a(d.column(b).header()).css("display", c);
    a(d.column(b).footer()).css("display", c);
    d.column(b).nodes().to$().css("display", c);
  }, _tabIndexes:function() {
    var b = this.s.dt, c = b.cells({page:"current"}).nodes().to$(), d = b.settings()[0], f = this.c.details.target;
    c.filter("[data-dtr-keyboard]").removeData("[data-dtr-keyboard]");
    a("number" === typeof f ? ":eq(" + f + ")" : f, b.rows({page:"current"}).nodes()).attr("tabIndex", d.iTabIndex).data("dtr-keyboard", 1);
  }});
  g.breakpoints = [{name:"desktop", width:Infinity}, {name:"tablet-l", width:1024}, {name:"tablet-p", width:768}, {name:"mobile-l", width:480}, {name:"mobile-p", width:320}];
  g.display = {childRow:function(b, c, d) {
    if (c) {
      if (a(b.node()).hasClass("parent")) {
        return b.child(d(), "child").show(), !0;
      }
    } else {
      if (b.child.isShown()) {
        return b.child(!1), a(b.node()).removeClass("parent"), !1;
      }
      b.child(d(), "child").show();
      a(b.node()).addClass("parent");
      return !0;
    }
  }, childRowImmediate:function(b, c, d) {
    if (!c && b.child.isShown() || !b.responsive.hasHidden()) {
      return b.child(!1), a(b.node()).removeClass("parent"), !1;
    }
    b.child(d(), "child").show();
    a(b.node()).addClass("parent");
    return !0;
  }, modal:function(b) {
    return function(d, f, g) {
      if (f) {
        a("div.dtr-modal-content").empty().append(g());
      } else {
        var h = function() {
          m.remove();
          a(c).off("keypress.dtr");
        }, m = a('<div class="dtr-modal"/>').append(a('<div class="dtr-modal-display"/>').append(a('<div class="dtr-modal-content"/>').append(g())).append(a('<div class="dtr-modal-close">&times;</div>').click(function() {
          h();
        }))).append(a('<div class="dtr-modal-background"/>').click(function() {
          h();
        })).appendTo("body");
        a(c).on("keyup.dtr", function(a) {
          27 === a.keyCode && (a.stopPropagation(), h());
        });
      }
      b && b.header && a("div.dtr-modal-content").prepend("<h2>" + b.header(d) + "</h2>");
    };
  }};
  g.renderer = {listHidden:function() {
    return function(b, c, d) {
      return (b = a.map(d, function(a) {
        return a.hidden ? '<li data-dtr-index="' + a.columnIndex + '" data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><span class="dtr-title">' + a.title + '</span> <span class="dtr-data">' + a.data + "</span></li>" : "";
      }).join("")) ? a('<ul data-dtr-index="' + c + '"/>').append(b) : !1;
    };
  }, tableAll:function(b) {
    b = a.extend({tableClass:""}, b);
    return function(c, d, f) {
      c = a.map(f, function(a) {
        return '<tr data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><td>' + a.title + ":</td> <td>" + a.data + "</td></tr>";
      }).join("");
      return a('<table class="' + b.tableClass + '" width="100%"/>').append(c);
    };
  }};
  g.defaults = {breakpoints:g.breakpoints, auto:!0, details:{display:g.display.childRow, renderer:g.renderer.listHidden(), target:0, type:"inline"}, orthogonal:"display"};
  var h = a.fn.dataTable.Api;
  h.register("responsive()", function() {
    return this;
  });
  h.register("responsive.index()", function(b) {
    b = a(b);
    return {column:b.data("dtr-index"), row:b.parent().data("dtr-index")};
  });
  h.register("responsive.rebuild()", function() {
    return this.iterator("table", function(a) {
      a._responsive && a._responsive._classLogic();
    });
  });
  h.register("responsive.recalc()", function() {
    return this.iterator("table", function(a) {
      a._responsive && (a._responsive._resizeAuto(), a._responsive._resize());
    });
  });
  h.register("responsive.hasHidden()", function() {
    var b = this.context[0];
    return b._responsive ? -1 !== a.inArray(!1, b._responsive.s.current) : !1;
  });
  g.version = "2.1.0";
  a.fn.dataTable.Responsive = g;
  a.fn.DataTable.Responsive = g;
  a(c).on("preInit.dt.dtr", function(b, c, d) {
    "dt" === b.namespace && (a(c.nTable).hasClass("responsive") || a(c.nTable).hasClass("dt-responsive") || c.oInit.responsive || f.defaults.responsive) && (b = c.oInit.responsive, !1 !== b && new g(c, a.isPlainObject(b) ? b : {}));
  });
  return g;
});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  var f = a.fn.dataTable, g = function(b, f) {
    this instanceof g ? (f === d && (f = {}), this.s = {dt:a.fn.dataTable.Api(b).settings()[0], tableTop:0, tableBottom:0, redrawTop:0, redrawBottom:0, autoHeight:!0, viewportRows:0, stateTO:null, drawTO:null, heights:{jump:null, page:null, virtual:null, scroll:null, row:null, viewport:null}, topRowFloat:0, scrollDrawDiff:null, loaderVisible:!1}, this.s = a.extend(this.s, g.oDefaults, f), this.s.heights.row = this.s.rowHeight, this.dom = {force:c.createElement("div"), scroller:null, table:null, loader:null}, 
    this.s.dt.oScroller || (this.s.dt.oScroller = this, this._fnConstruct())) : alert("Scroller warning: Scroller must be initialised with the 'new' keyword.");
  };
  a.extend(g.prototype, {fnRowToPixels:function(a, b, c) {
    a = c ? this._domain("virtualToPhysical", a * this.s.heights.row) : this.s.baseScrollTop + (a - this.s.baseRowTop) * this.s.heights.row;
    return b || b === d ? parseInt(a, 10) : a;
  }, fnPixelsToRow:function(a, b, c) {
    var f = a - this.s.baseScrollTop;
    a = c ? this._domain("physicalToVirtual", a) / this.s.heights.row : f / this.s.heights.row + this.s.baseRowTop;
    return b || b === d ? parseInt(a, 10) : a;
  }, fnScrollToRow:function(b, c) {
    var d = this, f = !1, g = this.fnRowToPixels(b), h = b - (this.s.displayBuffer - 1) / 2 * this.s.viewportRows;
    0 > h && (h = 0);
    (g > this.s.redrawBottom || g < this.s.redrawTop) && this.s.dt._iDisplayStart !== h && (f = !0, g = this.fnRowToPixels(b, !1, !0));
    "undefined" == typeof c || c ? (this.s.ani = f, a(this.dom.scroller).animate({scrollTop:g}, function() {
      setTimeout(function() {
        d.s.ani = !1;
      }, 25);
    })) : a(this.dom.scroller).scrollTop(g);
  }, fnMeasure:function(b) {
    this.s.autoHeight && this._fnCalcRowHeight();
    var c = this.s.heights;
    c.row && (c.viewport = a(this.dom.scroller).height(), this.s.viewportRows = parseInt(c.viewport / c.row, 10) + 1, this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer);
    (b === d || b) && this.s.dt.oInstance.fnDraw(!1);
  }, fnPageInfo:function() {
    var a = this.dom.scroller.scrollTop, b = this.s.dt.fnRecordsDisplay(), c = Math.ceil(this.fnPixelsToRow(a + this.s.heights.viewport, !1, this.s.ani));
    return {start:Math.floor(this.fnPixelsToRow(a, !1, this.s.ani)), end:b < c ? b - 1 : c - 1};
  }, _fnConstruct:function() {
    var c = this;
    if (this.s.dt.oFeatures.bPaginate) {
      this.dom.force.style.position = "relative";
      this.dom.force.style.top = "0px";
      this.dom.force.style.left = "0px";
      this.dom.force.style.width = "1px";
      this.dom.scroller = a("div." + this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
      this.dom.scroller.appendChild(this.dom.force);
      this.dom.scroller.style.position = "relative";
      this.dom.table = a(">table", this.dom.scroller)[0];
      this.dom.table.style.position = "absolute";
      this.dom.table.style.top = "0px";
      this.dom.table.style.left = "0px";
      a(this.s.dt.nTableWrapper).addClass("DTS");
      this.s.loadingIndicator && (this.dom.loader = a('<div class="dataTables_processing DTS_Loading">' + this.s.dt.oLanguage.sLoadingRecords + "</div>").css("display", "none"), a(this.dom.scroller.parentNode).css("position", "relative").append(this.dom.loader));
      this.s.heights.row && "auto" != this.s.heights.row && (this.s.autoHeight = !1);
      this.fnMeasure(!1);
      this.s.ingnoreScroll = !0;
      this.s.stateSaveThrottle = this.s.dt.oApi._fnThrottle(function() {
        c.s.dt.oApi._fnSaveState(c.s.dt);
      }, 500);
      a(this.dom.scroller).on("scroll.DTS", function(a) {
        c._fnScroll.call(c);
      });
      a(this.dom.scroller).on("touchstart.DTS", function() {
        c._fnScroll.call(c);
      });
      this.s.dt.aoDrawCallback.push({fn:function() {
        c.s.dt.bInitialised && c._fnDrawCallback.call(c);
      }, sName:"Scroller"});
      a(b).on("resize.DTS", function() {
        c.fnMeasure(!1);
        c._fnInfo();
      });
      var d = !0;
      this.s.dt.oApi._fnCallbackReg(this.s.dt, "aoStateSaveParams", function(a, b) {
        d && c.s.dt.oLoadedState ? (b.iScroller = c.s.dt.oLoadedState.iScroller, b.iScrollerTopRow = c.s.dt.oLoadedState.iScrollerTopRow, d = !1) : (b.iScroller = c.dom.scroller.scrollTop, b.iScrollerTopRow = c.s.topRowFloat);
      }, "Scroller_State");
      this.s.dt.oLoadedState && (this.s.topRowFloat = this.s.dt.oLoadedState.iScrollerTopRow || 0);
      a(this.s.dt.nTable).one("init.dt", function() {
        c.fnMeasure();
      });
      this.s.dt.aoDestroyCallback.push({sName:"Scroller", fn:function() {
        a(b).off("resize.DTS");
        a(c.dom.scroller).off("touchstart.DTS scroll.DTS");
        a(c.s.dt.nTableWrapper).removeClass("DTS");
        a("div.DTS_Loading", c.dom.scroller.parentNode).remove();
        a(c.s.dt.nTable).off("init.dt");
        c.dom.table.style.position = "";
        c.dom.table.style.top = "";
        c.dom.table.style.left = "";
      }});
    } else {
      this.s.dt.oApi._fnLog(this.s.dt, 0, "Pagination must be enabled for Scroller");
    }
  }, _fnScroll:function() {
    var b = this, c = this.s.heights, d = this.dom.scroller.scrollTop;
    if (!this.s.skip && !this.s.ingnoreScroll) {
      if (this.s.dt.bFiltered || this.s.dt.bSorted) {
        this.s.lastScrollTop = 0;
      } else {
        this._fnInfo();
        clearTimeout(this.s.stateTO);
        this.s.stateTO = setTimeout(function() {
          b.s.dt.oApi._fnSaveState(b.s.dt);
        }, 250);
        if (d < this.s.redrawTop || d > this.s.redrawBottom) {
          var f = Math.ceil((this.s.displayBuffer - 1) / 2 * this.s.viewportRows);
          if (Math.abs(d - this.s.lastScrollTop) > c.viewport || this.s.ani) {
            var g = parseInt(this._domain("physicalToVirtual", d) / c.row, 10) - f;
            this.s.topRowFloat = this._domain("physicalToVirtual", d) / c.row;
          } else {
            g = this.fnPixelsToRow(d) - f, this.s.topRowFloat = this.fnPixelsToRow(d, !1);
          }
          0 >= g ? g = 0 : g + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ? (g = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength, 0 > g && (g = 0)) : 0 !== g % 2 && g++;
          g != this.s.dt._iDisplayStart && (this.s.tableTop = a(this.s.dt.nTable).offset().top, this.s.tableBottom = a(this.s.dt.nTable).height() + this.s.tableTop, c = function() {
            null === b.s.scrollDrawReq && (b.s.scrollDrawReq = d);
            b.s.dt._iDisplayStart = g;
            b.s.dt.oApi._fnDraw(b.s.dt);
          }, this.s.dt.oFeatures.bServerSide ? (clearTimeout(this.s.drawTO), this.s.drawTO = setTimeout(c, this.s.serverWait)) : c(), this.dom.loader && !this.s.loaderVisible && (this.dom.loader.css("display", "block"), this.s.loaderVisible = !0));
        } else {
          this.s.topRowFloat = this._domain("physicalToVirtual", d) / c.row;
        }
        this.s.lastScrollTop = d;
        this.s.stateSaveThrottle();
      }
    }
  }, _domain:function(a, b) {
    var c = this.s.heights;
    if (c.virtual === c.scroll) {
      return b;
    }
    var d = (c.scroll - c.viewport) / 2, f = (c.virtual - c.viewport) / 2;
    var g = f / (d * d);
    if ("virtualToPhysical" === a) {
      if (b < f) {
        return Math.pow(b / g, 0.5);
      }
      b = 2 * f - b;
      return 0 > b ? c.scroll : 2 * d - Math.pow(b / g, 0.5);
    }
    if ("physicalToVirtual" === a) {
      if (b < d) {
        return b * b * g;
      }
      b = 2 * d - b;
      return 0 > b ? c.virtual : 2 * f - b * b * g;
    }
  }, _fnDrawCallback:function() {
    var b = this, c = this.s.heights, d = this.dom.scroller.scrollTop, f = a(this.s.dt.nTable).height(), g = this.s.dt._iDisplayStart, h = this.s.dt._iDisplayLength, y = this.s.dt.fnRecordsDisplay();
    this.s.skip = !0;
    this._fnScrollForce();
    d = 0 === g ? this.s.topRowFloat * c.row : g + h >= y ? c.scroll - (y - this.s.topRowFloat) * c.row : this._domain("virtualToPhysical", this.s.topRowFloat * c.row);
    this.dom.scroller.scrollTop = d;
    this.s.baseScrollTop = d;
    this.s.baseRowTop = this.s.topRowFloat;
    var q = d - (this.s.topRowFloat - g) * c.row;
    0 === g ? q = 0 : g + h >= y && (q = c.scroll - f);
    this.dom.table.style.top = q + "px";
    this.s.tableTop = q;
    this.s.tableBottom = f + this.s.tableTop;
    f = (d - this.s.tableTop) * this.s.boundaryScale;
    this.s.redrawTop = d - f;
    this.s.redrawBottom = d + f;
    this.s.skip = !1;
    this.s.dt.oFeatures.bStateSave && null !== this.s.dt.oLoadedState && "undefined" != typeof this.s.dt.oLoadedState.iScroller ? ((d = !this.s.dt.sAjaxSource && !b.s.dt.ajax || this.s.dt.oFeatures.bServerSide ? !1 : !0) && 2 == this.s.dt.iDraw || !d && 1 == this.s.dt.iDraw) && setTimeout(function() {
      a(b.dom.scroller).scrollTop(b.s.dt.oLoadedState.iScroller);
      b.s.redrawTop = b.s.dt.oLoadedState.iScroller - c.viewport / 2;
      setTimeout(function() {
        b.s.ingnoreScroll = !1;
      }, 0);
    }, 0) : b.s.ingnoreScroll = !1;
    this.s.dt.oFeatures.bInfo && setTimeout(function() {
      b._fnInfo.call(b);
    }, 0);
    this.dom.loader && this.s.loaderVisible && (this.dom.loader.css("display", "none"), this.s.loaderVisible = !1);
  }, _fnScrollForce:function() {
    var a = this.s.heights;
    a.virtual = a.row * this.s.dt.fnRecordsDisplay();
    a.scroll = a.virtual;
    1000000 < a.scroll && (a.scroll = 1000000);
    this.dom.force.style.height = a.scroll > this.s.heights.row ? a.scroll + "px" : this.s.heights.row + "px";
  }, _fnCalcRowHeight:function() {
    var b = this.s.dt, c = b.nTable, d = c.cloneNode(!1), f = a("<tbody/>").appendTo(d), g = a('<div class="' + b.oClasses.sWrapper + ' DTS"><div class="' + b.oClasses.sScrollWrapper + '"><div class="' + b.oClasses.sScrollBody + '"></div></div></div>');
    for (a("tbody tr:lt(4)", c).clone().appendTo(f); 3 > a("tr", f).length;) {
      f.append("<tr><td>&nbsp;</td></tr>");
    }
    a("div." + b.oClasses.sScrollBody, g).append(d);
    b = this.s.dt.nHolding || c.parentNode;
    a(b).is(":visible") || (b = "body");
    g.appendTo(b);
    this.s.heights.row = a("tr", f).eq(1).outerHeight();
    g.remove();
  }, _fnInfo:function() {
    if (this.s.dt.oFeatures.bInfo) {
      var b = this.s.dt, c = b.oLanguage, d = this.dom.scroller.scrollTop, f = Math.floor(this.fnPixelsToRow(d, !1, this.s.ani) + 1), g = b.fnRecordsTotal(), h = b.fnRecordsDisplay(), d = Math.ceil(this.fnPixelsToRow(d + this.s.heights.viewport, !1, this.s.ani)), d = h < d ? h : d, y = b.fnFormatNumber(f), q = b.fnFormatNumber(d), l = b.fnFormatNumber(g), p = b.fnFormatNumber(h), y = 0 === b.fnRecordsDisplay() && b.fnRecordsDisplay() == b.fnRecordsTotal() ? c.sInfoEmpty + c.sInfoPostFix : 0 === b.fnRecordsDisplay() ? 
      c.sInfoEmpty + " " + c.sInfoFiltered.replace("_MAX_", l) + c.sInfoPostFix : b.fnRecordsDisplay() == b.fnRecordsTotal() ? c.sInfo.replace("_START_", y).replace("_END_", q).replace("_MAX_", l).replace("_TOTAL_", p) + c.sInfoPostFix : c.sInfo.replace("_START_", y).replace("_END_", q).replace("_MAX_", l).replace("_TOTAL_", p) + " " + c.sInfoFiltered.replace("_MAX_", b.fnFormatNumber(b.fnRecordsTotal())) + c.sInfoPostFix;
      (c = c.fnInfoCallback) && (y = c.call(b.oInstance, b, f, d, g, h, y));
      f = b.aanFeatures.i;
      if ("undefined" != typeof f) {
        for (g = 0, h = f.length; g < h; g++) {
          a(f[g]).html(y);
        }
      }
      a(b.nTable).triggerHandler("info.dt");
    }
  }});
  g.defaults = {trace:!1, rowHeight:"auto", serverWait:200, displayBuffer:9, boundaryScale:0.5, loadingIndicator:!1};
  g.oDefaults = g.defaults;
  g.version = "1.4.2";
  "function" == typeof a.fn.dataTable && "function" == typeof a.fn.dataTableExt.fnVersionCheck && a.fn.dataTableExt.fnVersionCheck("1.10.0") ? a.fn.dataTableExt.aoFeatures.push({fnInit:function(a) {
    var b = a.oInit;
    new g(a, b.scroller || b.oScroller || {});
  }, cFeature:"S", sFeature:"Scroller"}) : alert("Warning: Scroller requires DataTables 1.10.0 or greater - www.datatables.net/download");
  a(c).on("preInit.dt.dtscroller", function(b, c) {
    if ("dt" === b.namespace) {
      b = c.oInit.scroller;
      var d = f.defaults.scroller;
      if (b || d) {
        d = a.extend({}, b, d), !1 !== b && new g(c, d);
      }
    }
  });
  a.fn.dataTable.Scroller = g;
  a.fn.DataTable.Scroller = g;
  var h = a.fn.dataTable.Api;
  h.register("scroller()", function() {
    return this;
  });
  h.register("scroller().rowToPixels()", function(a, b, c) {
    var d = this.context;
    if (d.length && d[0].oScroller) {
      return d[0].oScroller.fnRowToPixels(a, b, c);
    }
  });
  h.register("scroller().pixelsToRow()", function(a, b, c) {
    var d = this.context;
    if (d.length && d[0].oScroller) {
      return d[0].oScroller.fnPixelsToRow(a, b, c);
    }
  });
  h.register("scroller().scrollToRow()", function(a, b) {
    this.iterator("table", function(c) {
      c.oScroller && c.oScroller.fnScrollToRow(a, b);
    });
    return this;
  });
  h.register("row().scrollTo()", function(a) {
    var b = this;
    this.iterator("row", function(c, d) {
      c.oScroller && (d = b.rows({order:"applied", search:"applied"}).indexes().indexOf(d), c.oScroller.fnScrollToRow(d, a));
    });
    return this;
  });
  h.register("scroller.measure()", function(a) {
    this.iterator("table", function(b) {
      b.oScroller && b.oScroller.fnMeasure(a);
    });
    return this;
  });
  h.register("scroller.page()", function() {
    var a = this.context;
    if (a.length && a[0].oScroller) {
      return a[0].oScroller.fnPageInfo();
    }
  });
  return g;
});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c) {
  var d = a.fn.dataTable, f = function(a) {
    if (!d.versionCheck || !d.versionCheck("1.10.8")) {
      throw "DataTables Checkboxes requires DataTables 1.10.8 or newer";
    }
    this.s = {dt:new d.Api(a), columns:[], data:[], dataDisabled:[], ignoreSelect:!1};
    this.s.ctx = this.s.dt.settings()[0];
    this.s.ctx.checkboxes || (a.checkboxes = this, this._constructor());
  };
  f.prototype = {_constructor:function() {
    for (var b = this, h = b.s.dt, m = b.s.ctx, u = !1, r = !1, n = 0; n < m.aoColumns.length; n++) {
      if (m.aoColumns[n].checkboxes) {
        var v = a(h.column(n).header()), u = !0;
        a.isPlainObject(m.aoColumns[n].checkboxes) || (m.aoColumns[n].checkboxes = {});
        m.aoColumns[n].checkboxes = a.extend({}, f.defaults, m.aoColumns[n].checkboxes);
        var w = {searchable:!1, orderable:!1};
        w.className = "" === m.aoColumns[n].sClass ? "dt-checkboxes-cell" : m.aoColumns[n].sClass + " dt-checkboxes-cell";
        null === m.aoColumns[n].sWidthOrig && (w.width = "1%");
        null === m.aoColumns[n].mRender && (w.render = function() {
          return '<input type="checkbox" class="dt-checkboxes">';
        });
        d.ext.internal._fnColumnOptions(m, n, w);
        v.removeClass("sorting");
        v.off(".dt");
        if (null === m.sAjaxSource) {
          var y = h.cells("tr", n);
          y.invalidate("data");
          a(y.nodes()).addClass(w.className);
        }
        b.s.data[n] = {};
        b.s.dataDisabled[n] = {};
        b.s.columns.push(n);
        m.aoColumns[n].checkboxes.selectRow && (m._select ? r = !0 : m.aoColumns[n].checkboxes.selectRow = !1);
        m.aoColumns[n].checkboxes.selectAll && (v.data("html", v.html()), null !== m.aoColumns[n].checkboxes.selectAllRender && (w = "", a.isFunction(m.aoColumns[n].checkboxes.selectAllRender) ? w = m.aoColumns[n].checkboxes.selectAllRender() : "string" === typeof m.aoColumns[n].checkboxes.selectAllRender && (w = m.aoColumns[n].checkboxes.selectAllRender), v.html(w).addClass("dt-checkboxes-select-all").attr("data-col", n)));
      }
    }
    if (u) {
      b.loadState();
      u = a(h.table().node());
      n = a(h.table().body());
      v = a(h.table().container());
      r && (u.addClass("dt-checkboxes-select"), u.on("user-select.dt.dtCheckboxes", function(a, c, d, f, g) {
        b.onDataTablesUserSelect(a, c, d, f, g);
      }), u.on("select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function(a, c, d, f) {
        b.onDataTablesSelectDeselect(a, d, f);
      }), h.select.info(!1), u.on("draw.dt.dtCheckboxes select.dt.dtCheckboxes deselect.dt.dtCheckboxes", function() {
        b.showInfoSelected();
      }));
      u.on("draw.dt.dtCheckboxes", function(a) {
        b.onDataTablesDraw(a);
      });
      n.on("click.dtCheckboxes", "input.dt-checkboxes", function(a) {
        b.onClick(a, this);
      });
      v.on("click.dtCheckboxes", 'thead th.dt-checkboxes-select-all input[type="checkbox"]', function(a) {
        b.onClickSelectAll(a, this);
      });
      v.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all", function() {
        a('input[type="checkbox"]', this).not(":disabled").trigger("click");
      });
      if (!r) {
        v.on("click.dtCheckboxes", "tbody td.dt-checkboxes-cell", function() {
          a('input[type="checkbox"]', this).not(":disabled").trigger("click");
        });
      }
      v.on("click.dtCheckboxes", "thead th.dt-checkboxes-select-all label, tbody td.dt-checkboxes-cell label", function(a) {
        a.preventDefault();
      });
      a(c).on("click.dtCheckboxes", '.fixedHeader-floating thead th.dt-checkboxes-select-all input[type="checkbox"]', function(a) {
        if (m._fixedHeader && m._fixedHeader.dom.header.floating) {
          b.onClickSelectAll(a, this);
        }
      });
      a(c).on("click.dtCheckboxes", ".fixedHeader-floating thead th.dt-checkboxes-select-all", function() {
        m._fixedHeader && m._fixedHeader.dom.header.floating && a('input[type="checkbox"]', this).trigger("click");
      });
      u.on("init.dt.dtCheckboxes", function() {
        b.onDataTablesInit();
      });
      u.on("stateSaveParams.dt.dtCheckboxes", function(a, c, d) {
        b.onDataTablesStateSave(a, c, d);
      });
      u.one("destroy.dt.dtCheckboxes", function(a, c) {
        b.onDataTablesDestroy(a, c);
      });
    }
  }, onDataTablesInit:function() {
    var b = this, c = b.s.dt, d = b.s.ctx;
    d.oFeatures.bServerSide || (d.oFeatures.bStateSave && b.updateState(), a(c.table().node()).on("xhr.dt.dtCheckboxes", function(a, c, d, f) {
      b.onDataTablesXhr(a.settings, d, f);
    }));
  }, onDataTablesUserSelect:function(a, b, c, d) {
    d = d.index().row;
    c = this.getSelectRowColIndex();
    b = b.cell({row:d, column:c}).data();
    this.isCellSelectable(c, b) || a.preventDefault();
  }, onDataTablesSelectDeselect:function(a, b, c) {
    var d = this.s.dt;
    this.s.ignoreSelect || "row" !== b || (b = this.getSelectRowColIndex(), null !== b && (c = d.cells(c, b), this.updateData(c, b, "select" === a.type ? !0 : !1), this.updateCheckbox(c, b, "select" === a.type ? !0 : !1), this.updateSelectAll(b)));
  }, onDataTablesStateSave:function(b, c, d) {
    var f = this, g = f.s.ctx;
    d.checkboxes = [];
    a.each(f.s.columns, function(a, b) {
      g.aoColumns[b].checkboxes.stateSave && (d.checkboxes[b] = f.s.data[b]);
    });
  }, onDataTablesDestroy:function() {
    var b = this.s.dt, d = a(b.table().node()), f = a(b.table().body()), b = a(b.table().container());
    a(c).off("click.dtCheckboxes");
    b.off(".dtCheckboxes");
    f.off(".dtCheckboxes");
    d.off(".dtCheckboxes");
    this.s.data = {};
    this.s.dataDisabled = {};
    a(".dt-checkboxes-select-all", d).each(function(b, c) {
      a(c).html(a(c).data("html")).removeClass("dt-checkboxes-select-all");
    });
  }, onDataTablesDraw:function() {
    var b = this, c = b.s.ctx;
    (c.oFeatures.bServerSide || c.oFeatures.bDeferRender) && b.updateStateCheckboxes({page:"current", search:"none"});
    a.each(b.s.columns, function(a, c) {
      b.updateSelectAll(c);
    });
  }, onDataTablesXhr:function() {
    var b = this, c = b.s.ctx, d = a(b.s.dt.table().node());
    a.each(b.s.columns, function(a, c) {
      b.s.data[c] = {};
      b.s.dataDisabled[c] = {};
    });
    c.oFeatures.bStateSave && (b.loadState(), d.one("draw.dt.dtCheckboxes", function() {
      b.updateState();
    }));
  }, updateData:function(a, b, c) {
    var d = this.s.dt, f = this.s.ctx;
    f.aoColumns[b].checkboxes && (a.data().each(function(a) {
      c ? f.checkboxes.s.data[b][a] = 1 : delete f.checkboxes.s.data[b][a];
    }), f.oFeatures.bStateSave && f.aoColumns[b].checkboxes.stateSave && d.state.save());
  }, updateSelect:function(a, b) {
    var c = this.s.dt;
    this.s.ctx._select && (this.s.ignoreSelect = !0, b ? c.rows(a).select() : c.rows(a).deselect(), this.s.ignoreSelect = !1);
  }, updateCheckbox:function(b, c, d) {
    var f = this.s.ctx;
    b = b.nodes();
    b.length && (a("input.dt-checkboxes", b).not(":disabled").prop("checked", d), a.isFunction(f.aoColumns[c].checkboxes.selectCallback) && f.aoColumns[c].checkboxes.selectCallback(b, d));
  }, updateState:function() {
    var b = this;
    b.updateStateCheckboxes({page:"all", search:"none"});
    a.each(b.s.columns, function(a, c) {
      b.updateSelectAll(c);
    });
  }, updateStateCheckboxes:function(b) {
    var c = this, d = c.s.ctx;
    c.s.dt.cells("tr", c.s.columns, b).every(function(b, f) {
      var g = this.data(), h = c.isCellSelectable(f, g);
      d.checkboxes.s.data[f].hasOwnProperty(g) && (c.updateCheckbox(this, f, !0), d.aoColumns[f].checkboxes.selectRow && h && c.updateSelect(b, !0));
      h || a("input.dt-checkboxes", this.node()).prop("disabled", !0);
    });
  }, onClick:function(b, c) {
    var d = this, f = d.s.dt, g = d.s.ctx;
    var h = a(c).closest("td");
    h = h.parents(".DTFC_Cloned").length ? f.fixedColumns().cellIndex(h) : h;
    var v = f.cell(h), w = v.index().column;
    g.aoColumns[w].checkboxes.selectRow ? setTimeout(function() {
      var a = v.data(), a = d.s.data[w].hasOwnProperty(a);
      a !== c.checked && (d.updateCheckbox(v, w, a), d.updateSelectAll(w));
    }, 0) : (v.checkboxes.select(c.checked), b.stopPropagation());
  }, onClickSelectAll:function(b, c) {
    var d = this.s.dt, f = this.s.ctx;
    var g = a(c).closest("th");
    g = g.parents(".DTFC_Cloned").length ? d.fixedColumns().cellIndex(g).column : d.column(g).index();
    a(c).data("is-changed", !0);
    d.column(g, {page:f.aoColumns[g].checkboxes && f.aoColumns[g].checkboxes.selectAllPages ? "all" : "current", search:"applied"}).checkboxes.select(c.checked);
    b.stopPropagation();
  }, loadState:function() {
    var b = this, c = b.s.dt, d = b.s.ctx;
    if (d.oFeatures.bStateSave) {
      var f = c.state.loaded();
      a.each(b.s.columns, function(a, c) {
        f && f.checkboxes && f.checkboxes.hasOwnProperty(c) && d.aoColumns[c].checkboxes.stateSave && (b.s.data[c] = f.checkboxes[c]);
      });
    }
  }, updateSelectAll:function(b) {
    var c = this, d = c.s.dt, f = c.s.ctx;
    if (f.aoColumns[b].checkboxes && f.aoColumns[b].checkboxes.selectAll) {
      var g = d.cells("tr", b, {page:f.aoColumns[b].checkboxes.selectAllPages ? "all" : "current", search:"applied"}), d = d.table().container(), d = a('.dt-checkboxes-select-all[data-col="' + b + '"] input[type="checkbox"]', d), n = 0, v = 0, g = g.data();
      a.each(g, function(a, d) {
        c.isCellSelectable(b, d) ? c.s.data[b].hasOwnProperty(d) && n++ : v++;
      });
      f._fixedHeader && f._fixedHeader.dom.header.floating && (d = a('.fixedHeader-floating .dt-checkboxes-select-all[data-col="' + b + '"] input[type="checkbox"]'));
      if (0 === n) {
        var w = g = !1;
      } else {
        n + v === g.length ? (g = !0, w = !1) : w = g = !0;
      }
      var y = d.data("is-changed"), q = d.prop("checked"), l = d.prop("indeterminate");
      if (y || q !== g || l !== w) {
        d.data("is-changed", !1), d.prop({checked:g, indeterminate:w}), a.isFunction(f.aoColumns[b].checkboxes.selectAllCallback) && f.aoColumns[b].checkboxes.selectAllCallback(d.closest("th").get(0), g, w);
      }
    }
  }, showInfoSelected:function() {
    var b = this.s.dt, c = this.s.ctx;
    if (c.aanFeatures.i) {
      var d = this.getSelectRowColIndex();
      if (null !== d) {
        var f = 0, r;
        for (r in c.checkboxes.s.data[d]) {
          c.checkboxes.s.data[d].hasOwnProperty(r) && f++;
        }
        a.each(c.aanFeatures.i, function(c, d) {
          c = a(d);
          d = a('<span class="select-info"/>');
          var g = f;
          d.append(a('<span class="select-item"/>').append(b.i18n("select.rows", {_:"%d rows selected", 0:"", 1:"1 row selected"}, g)));
          g = c.children("span.select-info");
          g.length && g.remove();
          "" !== d.text() && c.append(d);
        });
      }
    }
  }, isCellSelectable:function(a, b) {
    return this.s.ctx.checkboxes.s.dataDisabled[a].hasOwnProperty(b) ? !1 : !0;
  }, getCellIndex:function(a) {
    var b = this.s.dt;
    return this.s.ctx._oFixedColumns ? b.fixedColumns().cellIndex(a) : b.cell(a).index();
  }, getSelectRowColIndex:function() {
    for (var a = this.s.ctx, b = null, c = 0; c < a.aoColumns.length; c++) {
      if (a.aoColumns[c].checkboxes && a.aoColumns[c].checkboxes.selectRow) {
        b = c;
        break;
      }
    }
    return b;
  }, updateFixedColumn:function(a) {
    var b = this.s.dt, c = this.s.ctx;
    if (c._oFixedColumns) {
      var d = c.aoColumns.length - c._oFixedColumns.s.iRightColumns - 1;
      (a < c._oFixedColumns.s.iLeftColumns || a > d) && b.fixedColumns().update();
    }
  }};
  f.defaults = {stateSave:!0, selectRow:!1, selectAll:!0, selectAllPages:!0, selectCallback:null, selectAllCallback:null, selectAllRender:'<input type="checkbox">'};
  b = a.fn.dataTable.Api;
  b.register("checkboxes()", function() {
    return this;
  });
  b.registerPlural("columns().checkboxes.select()", "column().checkboxes.select()", function(b) {
    "undefined" === typeof b && (b = !0);
    return this.iterator("column-rows", function(c, d, f, g, n) {
      if (c.aoColumns[d].checkboxes) {
        var h = [];
        a.each(n, function(a, b) {
          h.push({row:b, column:d});
        });
        f = this.cells(h);
        f = f.data();
        var m = [], h = [];
        a.each(f, function(a, b) {
          c.checkboxes.isCellSelectable(d, b) && (h.push({row:n[a], column:d}), m.push(n[a]));
        });
        f = this.cells(h);
        c.checkboxes.updateData(f, d, b);
        c.checkboxes.updateCheckbox(f, d, b);
        c.aoColumns[d].checkboxes.selectRow && c.checkboxes.updateSelect(m, b);
        c._oFixedColumns ? setTimeout(function() {
          c.checkboxes.updateSelectAll(d);
        }, 0) : c.checkboxes.updateSelectAll(d);
        c.checkboxes.updateFixedColumn(d);
      }
    }, 1);
  });
  b.registerPlural("cells().checkboxes.select()", "cell().checkboxes.select()", function(a) {
    "undefined" === typeof a && (a = !0);
    return this.iterator("cell", function(b, c, d) {
      if (b.aoColumns[d].checkboxes) {
        var f = this.cells([{row:c, column:d}]), g = this.cell({row:c, column:d}).data();
        b.checkboxes.isCellSelectable(d, g) && (b.checkboxes.updateData(f, d, a), b.checkboxes.updateCheckbox(f, d, a), b.aoColumns[d].checkboxes.selectRow && b.checkboxes.updateSelect(c, a), b._oFixedColumns ? setTimeout(function() {
          b.checkboxes.updateSelectAll(d);
        }, 0) : b.checkboxes.updateSelectAll(d), b.checkboxes.updateFixedColumn(d));
      }
    }, 1);
  });
  b.registerPlural("cells().checkboxes.enable()", "cell().checkboxes.enable()", function(b) {
    "undefined" === typeof b && (b = !0);
    return this.iterator("cell", function(c, d, f) {
      if (c.aoColumns[f].checkboxes) {
        var g = this.cell({row:d, column:f}), h = g.data();
        b ? delete c.checkboxes.s.dataDisabled[f][h] : c.checkboxes.s.dataDisabled[f][h] = 1;
        (g = g.node()) && a("input.dt-checkboxes", g).prop("disabled", !b);
        c.aoColumns[f].checkboxes.selectRow && c.checkboxes.s.data[f].hasOwnProperty(h) && c.checkboxes.updateSelect(d, b);
      }
    }, 1);
  });
  b.registerPlural("cells().checkboxes.disable()", "cell().checkboxes.disable()", function(a) {
    "undefined" === typeof a && (a = !0);
    return this.checkboxes.enable(!a);
  });
  b.registerPlural("columns().checkboxes.deselect()", "column().checkboxes.deselect()", function(a) {
    "undefined" === typeof a && (a = !0);
    return this.checkboxes.select(!a);
  });
  b.registerPlural("cells().checkboxes.deselect()", "cell().checkboxes.deselect()", function(a) {
    "undefined" === typeof a && (a = !0);
    return this.checkboxes.select(!a);
  });
  b.registerPlural("columns().checkboxes.deselectAll()", "column().checkboxes.deselectAll()", function() {
    return this.iterator("column", function(a, b) {
      a.aoColumns[b].checkboxes && (a.checkboxes.s.data[b] = {}, this.column(b).checkboxes.select(!1));
    }, 1);
  });
  b.registerPlural("columns().checkboxes.selected()", "column().checkboxes.selected()", function() {
    return this.iterator("column-rows", function(b, c, d, f, r) {
      if (b.aoColumns[c].checkboxes) {
        var g = [];
        if (b.oFeatures.bServerSide) {
          a.each(b.checkboxes.s.data[c], function(a) {
            b.checkboxes.isCellSelectable(c, a) && g.push(a);
          });
        } else {
          var h = [];
          a.each(r, function(a, b) {
            h.push({row:b, column:c});
          });
          d = this.cells(h).data();
          a.each(d, function(a, d) {
            b.checkboxes.s.data[c].hasOwnProperty(d) && b.checkboxes.isCellSelectable(c, d) && g.push(d);
          });
        }
        return g;
      }
      return [];
    }, 1);
  });
  f.version = "1.2.11";
  a.fn.DataTable.Checkboxes = f;
  a.fn.dataTable.Checkboxes = f;
  a(c).on("preInit.dt.dtCheckboxes", function(a, b) {
    "dt" === a.namespace && new f(b);
  });
  return f;
});
$.fn.dataTableExt.oPagination.two_button = {fnInit:function(a, b, c) {
  var d = document.createElement("span"), f = document.createElement("span");
  d.className = "paginate_button previous fa fa-angle-left fa-2x";
  f.className = "paginate_button next fa-angle-right fa-2x";
  b.appendChild(d);
  b.appendChild(f);
  $(d).click(function() {
    a.oApi._fnPageChange(a, "previous");
    c(a);
  });
  $(f).click(function() {
    a.oApi._fnPageChange(a, "next");
    c(a);
  });
  $(d).bind("selectstart", function() {
    return !1;
  });
  $(f).bind("selectstart", function() {
    return !1;
  });
}, fnUpdate:function(a, b) {
  if (a.aanFeatures.p) {
    b = a.aanFeatures.p;
    for (var c = 0, d = b.length; c < d; c++) {
      var f = b[c].getElementsByTagName("span");
      f[0].className = 0 === a._iDisplayStart ? "paginate_disabled_previous fa fa-caret-left fa-2x" : "paginate_enabled_previous fa fa-caret-left fa-2x";
      a.fnDisplayEnd() == a.fnRecordsDisplay() ? f[1].className = "paginate_disabled_next fa fa-caret-right fa-2x" : f[1].className = "paginate_enabled_next fa fa-caret-right fa-2x";
    }
  }
}};
DataTablesBehavior = {properties:{multiSelect:{type:Boolean, value:!1}, selection:{type:Array, notify:!0}, meta:{type:Object, value:null}, data:{type:Object}, options:{type:String}, namespace:{value:null, type:String}}, observers:["_dataChanged(data,meta)"], _createTable:function(a, b, c) {
  console.log("_createTable:", a);
  null == this.asyncRunning ? this._tableRecalcJob(function() {
  }.bind(this)) : this.asyncRunning = !0;
  this.__createTable(a, b, c);
}, recalc:function() {
  console.log("recalc:", this._api);
  this._api && (this._api.responsive.recalc(), this._api.columns.adjust());
}, createNew:function() {
  this._api.destroy(!1);
  this._api = null;
}, __createTable:function(a, b, c) {
  this.dataSet = b;
  c = c ? this._parseOptions(c) : this.options ? this._parseOptions(this.options) : {dom:"t", scrollY:"50vh", paging:!1};
  this._api && this._api.destroy(!1);
  var d = this, f = $(this.$.dataTablesId);
  a = "string" === typeof a ? JSON5.parse(a) : simpl4.util.Merge.clone(a);
  this._translate(a);
  if (null == a[0].class || -1 == a[0].class.indexOf("control")) {
    a.splice(0, 0, {data:"__control", class:"control"}), c.responsive = {details:{type:"column"}};
  }
  b.forEach(function(a, b) {
    a.__control = "";
  }.bind(this));
  this._api = f.DataTable(jQuery.extend({initComplete:function(a, b) {
    d.fire("init-complete", {settings:a, json:b});
  }, language:this._getLang(), paging:!0, pagingType:"two_button", bSort:!1, bFilter:!0, bDestroy:!0, bLengthChange:!0, stateSave:!1, _columnDefs:[{className:"control", orderable:!1, targets:0}], data:b, columns:a}, c));
  $(this.root.querySelectorAll("table.dataTables")).attr("id", "dataTablesId");
  this.querySelector("div.dataTables_scrollBody").classList.add("smooth-scrollbar");
  this._createRowListener();
  this._addDetailCopier(f, this._api);
}, getApi:function() {
  return this._api;
}, _addDetailCopier:function(a, b) {
  var c = this;
  a.on("keyup change", ".child input, .child select, .child textarea", function(a) {
    a = $(this);
    var c = a.closest("ul").data("dtr-index"), d = a.closest("li").data("dtr-index"), c = b.cell({row:c, column:d}).node();
    $("input, select, textarea", c).val(a.val());
    a.is(":checked") && $("input", c).prop("checked", !0);
  });
  a.on("click", ".child iron-icon", function(a) {
    var b = c._getIndexDetail(a.target), d = c._copySelection(c._api.rows(b.row).data());
    this.fire("rows-selected", {dt:c, doubleTap:!1, index:b, target:a.target, rows:d});
  });
}, _createRowListener:function() {
  for (var a = this, b = this._api.rows().nodes(), c = 0; c < b.length; c++) {
    $(b[c]).swipe({tap:function(b, c) {
      a._tapAction(c, a._getIndex(c), $(c).closest("tr"), !1);
    }, doubleTap:function(b, c) {
      a._tapAction(c, a._getIndex(c), $(c).closest("tr"), !0);
    }, threshold:50});
  }
}, _tapAction:function(a, b, c, d) {
  this.currentRowIndex = c.index();
  this.multiSelect ? this._tapActionMulti(a, b, c, d) : this._tapActionSingle(a, b, c, d);
}, _tapActionSingle:function(a, b, c, d) {
  $(c).hasClass("selected");
  this.unselectAll();
  $(c).addClass("selected");
  c = this._copySelection(this._api.rows(".selected").data());
  this.fire("rows-selected", {dt:this, doubleTap:d, index:b, target:a, rows:c});
  this.selection = c;
}, _tapActionMulti:function(a, b, c, d) {
  $(c).toggleClass("selected");
  c = this._copySelection(this._api.rows(".selected").data());
  this.fire("rows-selected", {dt:this, doubleTap:d, index:b, target:a, rows:c});
  this.selection = c;
}, _getIndexDetail:function(a) {
  a = $(a).closest("li");
  return {row:a.attr("data-dt-row"), column:a.attr("data-dt-column")};
}, _getIndex:function(a) {
  a = $(a).closest("td");
  return this._api.cell(a).index();
}, getSelection:function() {
  return this.selection;
}, unselectAll:function() {
  if (null != this._api) {
    var a = this._api.rows().nodes();
    null != a && $(a).removeClass("selected");
  }
}, _copySelection:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    b.push(a[c]);
  }
  return b;
}, _dataChanged:function() {
  !0 === this.internalDataChanged ? this.internalDataChanged = null : this.async(function() {
    this.__dataChanged();
  }, 10);
}, __dataChanged:function() {
  if (null == this.meta || 0 == this.meta.length) {
    if (null == this.data || 0 == this.data.length) {
      return;
    }
    0 < this.data.length && (this.preparedMeta = this._prepareMetaFromData(this.data));
  } else {
    this.preparedMeta = this._prepareMeta(this.meta);
  }
  null != this.preparedMeta && (null == this._api ? (null == this.data && (this.internalDataChanged = !0, this.data = []), this._createTable(this.preparedMeta, this.data, this.options)) : (this._api.clear(), null != this.data && this.data.forEach(function(a, b) {
    a.__control = "";
    this._api.row.add(a);
  }.bind(this)), this._api.draw(), this._createRowListener()));
}, _prepareMeta:function(a) {
  var b = a.fields;
  if (null == b) {
    return a;
  }
  var c = a.aliases, d = [];
  b.forEach(function(a, b) {
    b = c[b];
    var f = a;
    b && b.match(/^[@%]/) && (f = tr(b.substring(1)));
    d.push({title:f, data:a});
  }, this);
  return d;
}, _prepareMetaFromData:function(a) {
  if (null != a && (Array.isArray(a) || (a = a.result), 0 != a.length)) {
    for (var b = [], c = 0; c < a.length; c++) {
      var d = Object.keys(a[c]);
      d.length > b.length && (b = d);
    }
    var f = [];
    b.forEach(function(a) {
      f.push({title:a, data:a});
    }, this);
    return f;
  }
}, _tableRecalcJob:function(a) {
  function b() {
    var a = c.$.dataTablesId.offsetWidth;
    0 < a && a != d && c.recalc();
    d = a;
    setTimeout(b, 30);
  }
  var c = this, d = -1;
  b();
}, _parseOptions:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, _translate:function(a) {
  for (var b = Object.keys(a), c = 0; c < b.length; c++) {
    var d = b[c], f = a[d].title;
    f && f.match(/^[@%]/) && (a[d].title = tr(f.substring(1)));
  }
  return a;
}, _getLang:function() {
  return {sEmptyTable:tr("datatables.sEmptyTable"), sInfo:tr("datatables.sInfo"), sInfoEmpty:tr("datatables.sInfoEmpty"), sInfoFiltered:tr("datatables.sInfoFiltered"), sInfoPostFix:tr("datatables.sInfoPostFix"), sInfoThousands:tr("datatables.sInfoThousands"), sLengthMenu:tr("datatables.sLengthMenu"), sLoadingRecords:tr("datatables.sLoadingRecords"), sProcessing:tr("datatables.sProcessing"), sSearch:tr("datatables.sSearch"), sZeroRecords:tr("datatables.sZeroRecords"), oPaginate:{sFirst:tr("datatables.sFirst"), 
  sPrevious:tr("datatables.sPrevious"), sNext:tr("datatables.sNext"), sLast:tr("datatables.sLast")}, oAria:{sSortAscending:tr("datatables.sSortAscending"), sSortDescending:tr("datatables.sSortDescending")}};
}};
Polymer({is:"simpl-datatables", behaviors:[ModernizrBehavior, DataTablesBehavior]});
$jscomp.initSymbol();
$jscomp.initSymbol();
$jscomp.initSymbolIterator();
var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(a) {
  return typeof a;
} : function(a) {
  $jscomp.initSymbol();
  $jscomp.initSymbol();
  $jscomp.initSymbol();
  return a && "function" === typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
};
(function(a, b) {
  "object" === ("undefined" === typeof exports ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? module.exports = b() : "function" === typeof define && define.amd ? define(b) : a.Tabulator = b();
})(this, function() {
  Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {value:function(a, b) {
    if (null == this) {
      throw new TypeError('"this" is null or not defined');
    }
    var c = Object(this), d = c.length >>> 0;
    if ("function" !== typeof a) {
      throw new TypeError("predicate must be a function");
    }
    for (var f = 0; f < d;) {
      if (a.call(b, c[f], f, c)) {
        return f;
      }
      f++;
    }
    return -1;
  }});
  Array.prototype.find || Object.defineProperty(Array.prototype, "find", {value:function(a, b) {
    if (null == this) {
      throw new TypeError('"this" is null or not defined');
    }
    var c = Object(this), d = c.length >>> 0;
    if ("function" !== typeof a) {
      throw new TypeError("predicate must be a function");
    }
    for (var f = 0; f < d;) {
      var g = c[f];
      if (a.call(b, g, f, c)) {
        return g;
      }
      f++;
    }
  }});
  var a = function(a) {
    this.table = a;
    this.headersElement = this.createHeadersElement();
    this.element = this.createHeaderElement();
    this.rowManager = null;
    this.columns = [];
    this.columnsByIndex = [];
    this.columnsByField = [];
    this.scrollLeft = 0;
    this.element.insertBefore(this.headersElement, this.element.firstChild);
  };
  a.prototype.createHeadersElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-headers");
    return a;
  };
  a.prototype.createHeaderElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-header");
    return a;
  };
  a.prototype.setRowManager = function(a) {
    this.rowManager = a;
  };
  a.prototype.getElement = function() {
    return this.element;
  };
  a.prototype.getHeadersElement = function() {
    return this.headersElement;
  };
  a.prototype.scrollHorizontal = function(a) {
    var b = this.element.scrollWidth - this.table.element.clientWidth;
    this.element.scrollLeft = a;
    this.element.style.marginLeft = a > b ? -(a - b) + "px" : 0;
    this.scrollLeft = a;
    this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layout();
  };
  a.prototype.setColumns = function(a, b) {
    for (var c = this; c.headersElement.firstChild;) {
      c.headersElement.removeChild(c.headersElement.firstChild);
    }
    c.columns = [];
    c.columnsByIndex = [];
    c.columnsByField = [];
    c.table.modExists("frozenColumns") && c.table.modules.frozenColumns.reset();
    a.forEach(function(a, b) {
      c._addColumn(a);
    });
    c._reIndexColumns();
    c.table.options.responsiveLayout && c.table.modExists("responsiveLayout", !0) && c.table.modules.responsiveLayout.initialize();
    c.redraw(!0);
  };
  a.prototype._addColumn = function(a, b, d) {
    a = new c(a, this);
    var l = a.getElement(), f = d ? this.findColumnIndex(d) : d;
    d && -1 < f ? (f = this.columns.indexOf(d.getTopColumn()), d = d.getElement(), b ? (this.columns.splice(f, 0, a), d.parentNode.insertBefore(l, d)) : (this.columns.splice(f + 1, 0, a), d.parentNode.insertBefore(l, d.nextSibling))) : b ? (this.columns.unshift(a), this.headersElement.insertBefore(a.getElement(), this.headersElement.firstChild)) : (this.columns.push(a), this.headersElement.appendChild(a.getElement()));
    return a;
  };
  a.prototype.registerColumnField = function(a) {
    a.definition.field && (this.columnsByField[a.definition.field] = a);
  };
  a.prototype.registerColumnPosition = function(a) {
    this.columnsByIndex.push(a);
  };
  a.prototype._reIndexColumns = function() {
    this.columnsByIndex = [];
    this.columns.forEach(function(a) {
      a.reRegisterPosition();
    });
  };
  a.prototype._verticalAlignHeaders = function() {
    var a = this, b = 0;
    a.columns.forEach(function(a) {
      a.clearVerticalAlign();
      a = a.getHeight();
      a > b && (b = a);
    });
    a.columns.forEach(function(c) {
      c.verticalAlign(a.table.options.columnVertAlign, b);
    });
    a.rowManager.adjustTableSize();
  };
  a.prototype.findColumn = function(a) {
    if ("object" == ("undefined" === typeof a ? "undefined" : _typeof(a))) {
      if (a instanceof c) {
        return a;
      }
      if (a instanceof b) {
        return a._getSelf() || !1;
      }
      if (a instanceof HTMLElement) {
        return this.columns.find(function(b) {
          return b.element === a;
        }) || !1;
      }
    } else {
      return this.columnsByField[a] || !1;
    }
    return !1;
  };
  a.prototype.getColumnByField = function(a) {
    return this.columnsByField[a];
  };
  a.prototype.getColumnByIndex = function(a) {
    return this.columnsByIndex[a];
  };
  a.prototype.getColumns = function() {
    return this.columns;
  };
  a.prototype.findColumnIndex = function(a) {
    return this.columnsByIndex.findIndex(function(b) {
      return a === b;
    });
  };
  a.prototype.getRealColumns = function() {
    return this.columnsByIndex;
  };
  a.prototype.traverse = function(a) {
    this.columnsByIndex.forEach(function(b, c) {
      a(b, c);
    });
  };
  a.prototype.getDefinitions = function(a) {
    var b = [];
    this.columnsByIndex.forEach(function(c) {
      (!a || a && c.visible) && b.push(c.getDefinition());
    });
    return b;
  };
  a.prototype.getDefinitionTree = function() {
    var a = [];
    this.columns.forEach(function(b) {
      a.push(b.getDefinition(!0));
    });
    return a;
  };
  a.prototype.getComponents = function(a) {
    var b = [];
    (a ? this.columns : this.columnsByIndex).forEach(function(a) {
      b.push(a.getComponent());
    });
    return b;
  };
  a.prototype.getWidth = function() {
    var a = 0;
    this.columnsByIndex.forEach(function(b) {
      b.visible && (a += b.getWidth());
    });
    return a;
  };
  a.prototype.moveColumn = function(a, b, c) {
    this._moveColumnInArray(this.columns, a, b, c);
    this._moveColumnInArray(this.columnsByIndex, a, b, c, !0);
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.initialize();
    this.table.options.columnMoved && this.table.options.columnMoved.call(this.table, a.getComponent(), this.table.columnManager.getComponents());
    this.table.options.persistentLayout && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("columns");
  };
  a.prototype._moveColumnInArray = function(a, b, c, d, f) {
    var l = a.indexOf(b);
    if (-1 < l) {
      a.splice(l, 1);
      var p = a.indexOf(c);
      -1 < p ? d && (p += 1) : p = l;
      a.splice(p, 0, b);
      f && this.table.rowManager.rows.forEach(function(a) {
        if (a.cells.length) {
          var b = a.cells.splice(l, 1)[0];
          a.cells.splice(p, 0, b);
        }
      });
    }
  };
  a.prototype.scrollToColumn = function(a, b, c) {
    var d = this, l = 0, f = 0, g = 0, h = a.getElement();
    return new Promise(function(p, t) {
      "undefined" === typeof b && (b = d.table.options.scrollToColumnPosition);
      "undefined" === typeof c && (c = d.table.options.scrollToColumnIfVisible);
      if (a.visible) {
        switch(b) {
          case "middle":
          case "center":
            g = -d.element.clientWidth / 2;
            break;
          case "right":
            g = h.clientWidth - d.headersElement.clientWidth;
        }
        if (!c && (f = h.offsetLeft, 0 < f && f + h.offsetWidth < d.element.clientWidth)) {
          return !1;
        }
        l = h.offsetLeft + d.element.scrollLeft + g;
        l = Math.max(Math.min(l, d.table.rowManager.element.scrollWidth - d.table.rowManager.element.clientWidth), 0);
        d.table.rowManager.scrollHorizontal(l);
        d.scrollHorizontal(l);
        p();
      } else {
        console.warn("Scroll Error - Column not visible"), t("Scroll Error - Column not visible");
      }
    });
  };
  a.prototype.generateCells = function(a) {
    var b = [];
    this.columnsByIndex.forEach(function(c) {
      b.push(c.generateCell(a));
    });
    return b;
  };
  a.prototype.getFlexBaseWidth = function() {
    var a = this, b = a.table.element.clientWidth, c = 0;
    a.rowManager.element.scrollHeight > a.rowManager.element.clientHeight && (b -= a.rowManager.element.offsetWidth - a.rowManager.element.clientWidth);
    this.columnsByIndex.forEach(function(d) {
      if (d.visible) {
        var l = d.definition.width || 0;
        d = "undefined" == typeof d.minWidth ? a.table.options.columnMinWidth : parseInt(d.minWidth);
        l = "string" == typeof l ? -1 < l.indexOf("%") ? b / 100 * parseInt(l) : parseInt(l) : l;
        c += l > d ? l : d;
      }
    });
    return c;
  };
  a.prototype.addColumn = function(a, b, c) {
    a = this._addColumn(a, b, c);
    this._reIndexColumns();
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.initialize();
    this.table.modExists("columnCalcs") && this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);
    this.redraw();
    "fitColumns" != this.table.modules.layout.getMode() && a.reinitializeWidth();
    this._verticalAlignHeaders();
    this.table.rowManager.reinitialize();
  };
  a.prototype.deregisterColumn = function(a) {
    var b = a.getField();
    b && delete this.columnsByField[b];
    b = this.columnsByIndex.indexOf(a);
    -1 < b && this.columnsByIndex.splice(b, 1);
    b = this.columns.indexOf(a);
    -1 < b && this.columns.splice(b, 1);
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.initialize();
    this.redraw();
  };
  a.prototype.redraw = function(a) {
    a && (r.prototype.helpers.elVisible(this.element) && this._verticalAlignHeaders(), this.table.rowManager.resetScroll(), this.table.rowManager.reinitialize());
    "fitColumns" == this.table.modules.layout.getMode() ? this.table.modules.layout.layout() : a ? this.table.modules.layout.layout() : this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.update();
    this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layout();
    this.table.modExists("columnCalcs") && this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);
    a && (this.table.options.persistentLayout && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("columns"), this.table.modExists("columnCalcs") && this.table.modules.columnCalcs.redraw());
    this.table.footerManager.redraw();
  };
  var b = function(a) {
    this._column = a;
    this.type = "ColumnComponent";
  };
  b.prototype.getElement = function() {
    return this._column.getElement();
  };
  b.prototype.getDefinition = function() {
    return this._column.getDefinition();
  };
  b.prototype.getField = function() {
    return this._column.getField();
  };
  b.prototype.getCells = function() {
    var a = [];
    this._column.cells.forEach(function(b) {
      a.push(b.getComponent());
    });
    return a;
  };
  b.prototype.getVisibility = function() {
    return this._column.visible;
  };
  b.prototype.show = function() {
    this._column.isGroup ? this._column.columns.forEach(function(a) {
      a.show();
    }) : this._column.show();
  };
  b.prototype.hide = function() {
    this._column.isGroup ? this._column.columns.forEach(function(a) {
      a.hide();
    }) : this._column.hide();
  };
  b.prototype.toggle = function() {
    this._column.visible ? this.hide() : this.show();
  };
  b.prototype.delete = function() {
    this._column.delete();
  };
  b.prototype.getSubColumns = function() {
    var a = [];
    this._column.columns.length && this._column.columns.forEach(function(b) {
      a.push(b.getComponent());
    });
    return a;
  };
  b.prototype.getParentColumn = function() {
    return this._column.parent instanceof c ? this._column.parent.getComponent() : !1;
  };
  b.prototype._getSelf = function() {
    return this._column;
  };
  b.prototype.scrollTo = function() {
    return this._column.table.columnManager.scrollToColumn(this._column);
  };
  b.prototype.getTable = function() {
    return this._column.table;
  };
  b.prototype.headerFilterFocus = function() {
    this._column.table.modExists("filter", !0) && this._column.table.modules.filter.setHeaderFilterFocus(this._column);
  };
  b.prototype.reloadHeaderFilter = function() {
    this._column.table.modExists("filter", !0) && this._column.table.modules.filter.reloadHeaderFilter(this._column);
  };
  b.prototype.setHeaderFilterValue = function(a) {
    this._column.table.modExists("filter", !0) && this._column.table.modules.filter.setHeaderFilterValue(this._column, a);
  };
  var c = function q(a, b) {
    var c = this;
    this.table = b.table;
    this.definition = a;
    this.parent = b;
    this.type = "column";
    this.columns = [];
    this.cells = [];
    this.element = this.createElement();
    this.contentElement = !1;
    this.groupElement = this.createGroupElement();
    this.tooltip = this.isGroup = !1;
    this.setFieldValue = this.getFieldValue = this.fieldStructure = this.field = this.hozAlign = "";
    this.setField(this.definition.field);
    this.modules = {};
    this.cellEvents = {cellClick:!1, cellDblClick:!1, cellContext:!1, cellTap:!1, cellDblTap:!1, cellTapHold:!1};
    this.minWidth = this.width = null;
    this.widthFixed = !1;
    this.visible = !0;
    a.columns ? (this.isGroup = !0, a.columns.forEach(function(a, b) {
      a = new q(a, c);
      c.attachColumn(a);
    }), c.checkColumnVisibility()) : b.registerColumnField(this);
    a.rowHandle && !1 !== this.table.options.movableRows && this.table.modExists("moveRow") && this.table.modules.moveRow.setHandle(!0);
    this._buildHeader();
  };
  c.prototype.createElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-col");
    a.setAttribute("role", "columnheader");
    a.setAttribute("aria-sort", "none");
    return a;
  };
  c.prototype.createGroupElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-col-group-cols");
    return a;
  };
  c.prototype.setField = function(a) {
    this.fieldStructure = (this.field = a) ? this.table.options.nestedFieldSeparator ? a.split(this.table.options.nestedFieldSeparator) : [a] : [];
    this.getFieldValue = 1 < this.fieldStructure.length ? this._getNestedData : this._getFlatData;
    this.setFieldValue = 1 < this.fieldStructure.length ? this._setNesteData : this._setFlatData;
  };
  c.prototype.registerColumnPosition = function(a) {
    this.parent.registerColumnPosition(a);
  };
  c.prototype.registerColumnField = function(a) {
    this.parent.registerColumnField(a);
  };
  c.prototype.reRegisterPosition = function() {
    this.isGroup ? this.columns.forEach(function(a) {
      a.reRegisterPosition();
    }) : this.registerColumnPosition(this);
  };
  c.prototype.setTooltip = function() {
    var a = this, b = a.definition, c = b.headerTooltip || !1 === b.tooltip ? b.headerTooltip : a.table.options.tooltipsHeader;
    c ? !0 === c ? b.field ? a.table.modules.localize.bind("columns|" + b.field, function(c) {
      a.element.setAttribute("title", c || b.title);
    }) : a.element.setAttribute("title", b.title) : ("function" == typeof c && (c = c(a.getComponent()), !1 === c && (c = "")), a.element.setAttribute("title", c)) : a.element.setAttribute("title", "");
  };
  c.prototype._buildHeader = function() {
    for (var a = this, b = a.definition; a.element.firstChild;) {
      a.element.removeChild(a.element.firstChild);
    }
    b.headerVertical && (a.element.classList.add("tabulator-col-vertical"), "flip" === b.headerVertical && a.element.classList.add("tabulator-col-vertical-flip"));
    a.contentElement = a._bindEvents();
    a.contentElement = a._buildColumnHeaderContent();
    a.element.appendChild(a.contentElement);
    a.isGroup ? a._buildGroupHeader() : a._buildColumnHeader();
    a.setTooltip();
    a.table.options.resizableColumns && a.table.modExists("resizeColumns") && a.table.modules.resizeColumns.initializeColumn("header", a, a.element);
    b.headerFilter && a.table.modExists("filter") && a.table.modExists("edit") && ("undefined" !== typeof b.headerFilterPlaceholder && b.field && a.table.modules.localize.setHeaderFilterColumnPlaceholder(b.field, b.headerFilterPlaceholder), a.table.modules.filter.initializeColumn(a));
    a.table.modExists("frozenColumns") && a.table.modules.frozenColumns.initializeColumn(a);
    a.table.options.movableColumns && !a.isGroup && a.table.modExists("moveColumn") && a.table.modules.moveColumn.initializeColumn(a);
    (b.topCalc || b.bottomCalc) && a.table.modExists("columnCalcs") && a.table.modules.columnCalcs.initializeColumn(a);
    a.element.addEventListener("mouseenter", function(b) {
      a.setTooltip();
    });
  };
  c.prototype._bindEvents = function() {
    var a = this, b = a.definition;
    "function" == typeof b.headerClick && a.element.addEventListener("click", function(c) {
      b.headerClick(c, a.getComponent());
    });
    "function" == typeof b.headerDblClick && a.element.addEventListener("dblclick", function(c) {
      b.headerDblClick(c, a.getComponent());
    });
    "function" == typeof b.headerContext && a.element.addEventListener("contextmenu", function(c) {
      b.headerContext(c, a.getComponent());
    });
    if ("function" == typeof b.headerTap) {
      var c = !1;
      a.element.addEventListener("touchstart", function(a) {
        c = !0;
      });
      a.element.addEventListener("touchend", function(d) {
        c && b.headerTap(d, a.getComponent());
        c = !1;
      });
    }
    if ("function" == typeof b.headerDblTap) {
      var d = null;
      a.element.addEventListener("touchend", function(c) {
        d ? (clearTimeout(d), d = null, b.headerDblTap(c, a.getComponent())) : d = setTimeout(function() {
          clearTimeout(d);
          d = null;
        }, 300);
      });
    }
    if ("function" == typeof b.headerTapHold) {
      var f = null;
      a.element.addEventListener("touchstart", function(d) {
        clearTimeout(f);
        f = setTimeout(function() {
          clearTimeout(f);
          f = null;
          c = !1;
          b.headerTapHold(d, a.getComponent());
        }, 1000);
      });
      a.element.addEventListener("touchend", function(a) {
        clearTimeout(f);
        f = null;
      });
    }
    "function" == typeof b.cellClick && (a.cellEvents.cellClick = b.cellClick);
    "function" == typeof b.cellDblClick && (a.cellEvents.cellDblClick = b.cellDblClick);
    "function" == typeof b.cellContext && (a.cellEvents.cellContext = b.cellContext);
    "function" == typeof b.cellTap && (a.cellEvents.cellTap = b.cellTap);
    "function" == typeof b.cellDblTap && (a.cellEvents.cellDblTap = b.cellDblTap);
    "function" == typeof b.cellTapHold && (a.cellEvents.cellTapHold = b.cellTapHold);
    "function" == typeof b.cellEdited && (a.cellEvents.cellEdited = b.cellEdited);
    "function" == typeof b.cellEditing && (a.cellEvents.cellEditing = b.cellEditing);
    "function" == typeof b.cellEditCancelled && (a.cellEvents.cellEditCancelled = b.cellEditCancelled);
  };
  c.prototype._buildColumnHeader = function() {
    var a = this, b = a.definition, c = a.table;
    c.modExists("sort") && c.modules.sort.initializeColumn(a, a.contentElement);
    c.modExists("format") && c.modules.format.initializeColumn(a);
    "undefined" != typeof b.editor && c.modExists("edit") && c.modules.edit.initializeColumn(a);
    "undefined" != typeof b.validator && c.modExists("validate") && c.modules.validate.initializeColumn(a);
    c.modExists("mutator") && c.modules.mutator.initializeColumn(a);
    c.modExists("accessor") && c.modules.accessor.initializeColumn(a);
    _typeof(c.options.responsiveLayout) && c.modExists("responsiveLayout") && c.modules.responsiveLayout.initializeColumn(a);
    "undefined" != typeof b.visible && (b.visible ? a.show(!0) : a.hide(!0));
    b.cssClass && b.cssClass.split(" ").forEach(function(b) {
      a.element.classList.add(b);
    });
    b.field && this.element.setAttribute("tabulator-field", b.field);
    a.setMinWidth("undefined" == typeof b.minWidth ? a.table.options.columnMinWidth : b.minWidth);
    a.reinitializeWidth();
    a.tooltip = a.definition.tooltip || !1 === a.definition.tooltip ? a.definition.tooltip : a.table.options.tooltips;
    a.hozAlign = "undefined" == typeof a.definition.align ? "" : a.definition.align;
  };
  c.prototype._buildColumnHeaderContent = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-col-content");
    a.appendChild(this._buildColumnHeaderTitle());
    return a;
  };
  c.prototype._buildColumnHeaderTitle = function() {
    var a = this, b = a.definition, c = a.table, d = document.createElement("div");
    d.classList.add("tabulator-col-title");
    if (b.editableTitle) {
      var f = document.createElement("input");
      f.classList.add("tabulator-title-editor");
      f.addEventListener("click", function(a) {
        a.stopPropagation();
        f.focus();
      });
      f.addEventListener("change", function() {
        b.title = f.value;
        c.options.columnTitleChanged.call(a.table, a.getComponent());
      });
      d.appendChild(f);
      b.field ? c.modules.localize.bind("columns|" + b.field, function(a) {
        f.value = a || b.title || "&nbsp";
      }) : f.value = b.title || "&nbsp";
    } else {
      b.field ? c.modules.localize.bind("columns|" + b.field, function(c) {
        a._formatColumnHeaderTitle(d, c || b.title || "&nbsp");
      }) : a._formatColumnHeaderTitle(d, b.title || "&nbsp");
    }
    return d;
  };
  c.prototype._formatColumnHeaderTitle = function(a, b) {
    if (this.definition.titleFormatter && this.table.modExists("format")) {
      var c = this.table.modules.format.getFormatter(this.definition.titleFormatter);
      var d = {getValue:function() {
        return b;
      }, getElement:function() {
        return a;
      }};
      var l = this.definition.titleFormatterParams || {};
      l = "function" === typeof l ? l() : l;
      c = c.call(this.table.modules.format, d, l);
      switch("undefined" === typeof c ? "undefined" : _typeof(c)) {
        case "object":
          c instanceof Node ? this.element.appendChild(c) : (this.element.innerHTML = "", console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", c));
          break;
        case "undefined":
        case "null":
          this.element.innerHTML = "";
          break;
        default:
          this.element.innerHTML = c;
      }
    } else {
      a.innerHTML = b;
    }
  };
  c.prototype._buildGroupHeader = function() {
    this.element.classList.add("tabulator-col-group");
    this.element.setAttribute("role", "columngroup");
    this.element.setAttribute("aria-title", this.definition.title);
    this.element.appendChild(this.groupElement);
  };
  c.prototype._getFlatData = function(a) {
    return a[this.field];
  };
  c.prototype._getNestedData = function(a) {
    for (var b = this.fieldStructure, c = b.length, d, f = 0; f < c && (d = a = a[b[f]], a); f++) {
    }
    return d;
  };
  c.prototype._setFlatData = function(a, b) {
    this.field && (a[this.field] = b);
  };
  c.prototype._setNesteData = function(a, b) {
    for (var c = this.fieldStructure, d = c.length, l = 0; l < d; l++) {
      l == d - 1 ? a[c[l]] = b : (a[c[l]] || (a[c[l]] = {}), a = a[c[l]]);
    }
  };
  c.prototype.attachColumn = function(a) {
    this.groupElement ? (this.columns.push(a), this.groupElement.appendChild(a.getElement())) : console.warn("Column Warning - Column being attached to another column instead of column group");
  };
  c.prototype.verticalAlign = function(a, b) {
    b = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : b || this.parent.getHeadersElement().clientHeight;
    this.element.style.height = b + "px";
    this.isGroup && (this.groupElement.style.minHeight = b - this.contentElement.offsetHeight + "px");
    this.isGroup || "top" === a || (this.element.style.paddingTop = "bottom" === a ? this.element.clientHeight - this.contentElement.offsetHeight + "px" : (this.element.clientHeight - this.contentElement.offsetHeight) / 2 + "px");
    this.columns.forEach(function(b) {
      b.verticalAlign(a);
    });
  };
  c.prototype.clearVerticalAlign = function() {
    this.element.style.paddingTop = "";
    this.element.style.height = "";
    this.element.style.minHeight = "";
    this.groupElement.style.minHeight = "";
    this.columns.forEach(function(a) {
      a.clearVerticalAlign();
    });
  };
  c.prototype.getElement = function() {
    return this.element;
  };
  c.prototype.getGroupElement = function() {
    return this.groupElement;
  };
  c.prototype.getField = function() {
    return this.field;
  };
  c.prototype.getFirstColumn = function() {
    return this.isGroup ? this.columns.length ? this.columns[0].getFirstColumn() : !1 : this;
  };
  c.prototype.getLastColumn = function() {
    return this.isGroup ? this.columns.length ? this.columns[this.columns.length - 1].getLastColumn() : !1 : this;
  };
  c.prototype.getColumns = function() {
    return this.columns;
  };
  c.prototype.getCells = function() {
    return this.cells;
  };
  c.prototype.getTopColumn = function() {
    return this.parent.isGroup ? this.parent.getTopColumn() : this;
  };
  c.prototype.getDefinition = function(a) {
    var b = [];
    this.isGroup && a && (this.columns.forEach(function(a) {
      b.push(a.getDefinition(!0));
    }), this.definition.columns = b);
    return this.definition;
  };
  c.prototype.checkColumnVisibility = function() {
    var a = !1;
    this.columns.forEach(function(b) {
      b.visible && (a = !0);
    });
    a ? (this.show(), this.parent.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), !1)) : this.hide();
  };
  c.prototype.show = function(a, b) {
    this.visible || (this.visible = !0, this.element.style.display = "", this.parent.isGroup && this.parent.checkColumnVisibility(), this.cells.forEach(function(a) {
      a.show();
    }), this.isGroup || null !== this.width || this.reinitializeWidth(), this.table.columnManager._verticalAlignHeaders(), this.table.options.persistentLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.persistence.save("columns"), !b && this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible), a || this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), 
    !0));
  };
  c.prototype.hide = function(a, b) {
    this.visible && (this.visible = !1, this.element.style.display = "none", this.table.columnManager._verticalAlignHeaders(), this.parent.isGroup && this.parent.checkColumnVisibility(), this.cells.forEach(function(a) {
      a.hide();
    }), this.table.options.persistentLayout && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("columns"), !b && this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible), a || this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), !1));
  };
  c.prototype.matchChildWidths = function() {
    var a = 0;
    this.contentElement && this.columns.length && (this.columns.forEach(function(b) {
      a += b.getWidth();
    }), this.contentElement.style.maxWidth = a - 1 + "px");
  };
  c.prototype.setWidth = function(a) {
    this.widthFixed = !0;
    this.setWidthActual(a);
  };
  c.prototype.setWidthActual = function(a) {
    isNaN(a) && (a = Math.floor(this.table.element.clientWidth / 100 * parseInt(a)));
    this.width = a = Math.max(this.minWidth, a);
    this.element.style.width = a ? a + "px" : "";
    this.isGroup || this.cells.forEach(function(b) {
      b.setWidth(a);
    });
    this.parent.isGroup && this.parent.matchChildWidths();
    this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layout();
  };
  c.prototype.checkCellHeights = function() {
    var a = [];
    this.cells.forEach(function(b) {
      b.row.heightInitialized && (null !== b.row.getElement().offsetParent ? (a.push(b.row), b.row.clearCellHeight()) : b.row.heightInitialized = !1);
    });
    a.forEach(function(a) {
      a.calcHeight();
    });
    a.forEach(function(a) {
      a.setCellHeight();
    });
  };
  c.prototype.getWidth = function() {
    return this.width;
  };
  c.prototype.getHeight = function() {
    return this.element.offsetHeight;
  };
  c.prototype.setMinWidth = function(a) {
    this.minWidth = a;
    this.element.style.minWidth = a ? a + "px" : "";
    this.cells.forEach(function(b) {
      b.setMinWidth(a);
    });
  };
  c.prototype.delete = function() {
    this.isGroup && this.columns.forEach(function(a) {
      a.delete();
    });
    for (var a = this.cells.length, b = 0; b < a; b++) {
      this.cells[0].delete();
    }
    this.element.parentNode.removeChild(this.element);
    this.table.columnManager.deregisterColumn(this);
  };
  c.prototype.generateCell = function(a) {
    a = new m(this, a);
    this.cells.push(a);
    return a;
  };
  c.prototype.reinitializeWidth = function(a) {
    this.widthFixed = !1;
    "undefined" === typeof this.definition.width || a || this.setWidth(this.definition.width);
    this.table.modExists("filter") && this.table.modules.filter.hideHeaderFilterElements();
    this.fitToData();
    this.table.modExists("filter") && this.table.modules.filter.showHeaderFilterElements();
  };
  c.prototype.fitToData = function() {
    this.widthFixed || (this.element.style.width = "", this.cells.forEach(function(a) {
      a.setWidth("");
    }));
    var a = this.element.offsetWidth;
    this.width && this.widthFixed || (this.cells.forEach(function(b) {
      b = b.getWidth();
      b > a && (a = b);
    }), a && this.setWidthActual(a + 1));
  };
  c.prototype.deleteCell = function(a) {
    a = this.cells.indexOf(a);
    -1 < a && this.cells.splice(a, 1);
  };
  c.prototype.getComponent = function() {
    return new b(this);
  };
  var d = function(a) {
    this.table = a;
    this.element = this.createHolderElement();
    this.tableElement = this.createTableElement();
    this.columnManager = null;
    this.height = 0;
    this.firstRender = !1;
    this.renderMode = "classic";
    this.rows = [];
    this.activeRows = [];
    this.activeRowsCount = 0;
    this.displayRows = [];
    this.scrollLeft = this.scrollTop = this.displayRowsCount = 0;
    this.vDomRowHeight = 20;
    this.vDomBottomPad = this.vDomTopPad = this.vDomScrollPosBottom = this.vDomScrollPosTop = this.vDomBottom = this.vDomTop = 0;
    this.vDomMaxRenderChain = 90;
    this.vDomWindowBuffer = 0;
    this.vDomWindowMinTotalRows = 20;
    this.vDomWindowMinMarginRows = 5;
    this.vDomTopNewRows = [];
    this.vDomBottomNewRows = [];
  };
  d.prototype.createHolderElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-tableHolder");
    a.setAttribute("tabindex", 0);
    return a;
  };
  d.prototype.createTableElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-table");
    return a;
  };
  d.prototype.getElement = function() {
    return this.element;
  };
  d.prototype.getTableElement = function() {
    return this.tableElement;
  };
  d.prototype.getRowPosition = function(a, b) {
    return b ? this.activeRows.indexOf(a) : this.rows.indexOf(a);
  };
  d.prototype.setColumnManager = function(a) {
    this.columnManager = a;
  };
  d.prototype.initialize = function() {
    var a = this;
    a.setRenderMode();
    a.element.appendChild(a.tableElement);
    a.firstRender = !0;
    a.element.addEventListener("scroll", function() {
      var b = a.element.scrollLeft;
      a.scrollLeft != b && (a.columnManager.scrollHorizontal(b), a.table.options.groupBy && a.table.modules.groupRows.scrollHeaders(b), a.table.modExists("columnCalcs") && a.table.modules.columnCalcs.scrollHorizontal(b));
      a.scrollLeft = b;
    });
    "virtual" === this.renderMode && a.element.addEventListener("scroll", function() {
      var b = a.element.scrollTop, c = a.scrollTop > b;
      a.scrollTop != b ? (a.scrollTop = b, a.scrollVertical(c), "scroll" == a.table.options.ajaxProgressiveLoad && a.table.modules.ajax.nextPage(a.element.scrollHeight - a.element.clientHeight - b)) : a.scrollTop = b;
    });
  };
  d.prototype.findRow = function(a) {
    var b = this;
    if ("object" == ("undefined" === typeof a ? "undefined" : _typeof(a))) {
      if (a instanceof g) {
        return a;
      }
      if (a instanceof f) {
        return a._getSelf() || !1;
      }
      if (a instanceof HTMLElement) {
        return b.rows.find(function(b) {
          return b.element === a;
        }) || !1;
      }
    } else {
      if ("undefined" != typeof a && null !== a) {
        return b.rows.find(function(c) {
          return c.data[b.table.options.index] == a;
        }) || !1;
      }
    }
    return !1;
  };
  d.prototype.getRowFromPosition = function(a, b) {
    return b ? this.activeRows[a] : this.rows[a];
  };
  d.prototype.scrollToRow = function(a, b, c) {
    var d = this, l = this.getDisplayRows().indexOf(a), f = a.getElement(), p, g = 0;
    return new Promise(function(a, t) {
      if (-1 < l) {
        "undefined" === typeof b && (b = d.table.options.scrollToRowPosition);
        "undefined" === typeof c && (c = d.table.options.scrollToRowIfVisible);
        if ("nearest" === b) {
          switch(d.renderMode) {
            case "classic":
              p = r.prototype.helpers.elOffset(f).top;
              b = Math.abs(d.element.scrollTop - p) > Math.abs(d.element.scrollTop + d.element.clientHeight - p) ? "bottom" : "top";
              break;
            case "virtual":
              b = Math.abs(d.vDomTop - l) > Math.abs(d.vDomBottom - l) ? "bottom" : "top";
          }
        }
        if (!c && r.prototype.helpers.elVisible(f) && (g = r.prototype.helpers.elOffset(f).top - r.prototype.helpers.elOffset(d.element).top, 0 < g && g < d.element.clientHeight - f.offsetHeight)) {
          return !1;
        }
        switch(d.renderMode) {
          case "classic":
            d.element.scrollTop = r.prototype.helpers.elOffset(f).top - r.prototype.helpers.elOffset(d.element).top + d.element.scrollTop;
            break;
          case "virtual":
            d._virtualRenderFill(l, !0);
        }
        switch(b) {
          case "middle":
          case "center":
            d.element.scrollTop -= d.element.clientHeight / 2;
            break;
          case "bottom":
            d.element.scrollTop = d.element.scrollTop - d.element.clientHeight + f.offsetHeight;
        }
        a();
      } else {
        console.warn("Scroll Error - Row not visible"), t("Scroll Error - Row not visible");
      }
    });
  };
  d.prototype.setData = function(a, b) {
    var c = this, d = this;
    return new Promise(function(l, f) {
      b && c.getDisplayRows().length ? d.table.options.pagination ? d._setDataActual(a, !0) : c.reRenderInPosition(function() {
        d._setDataActual(a);
      }) : (c.resetScroll(), c._setDataActual(a));
      l();
    });
  };
  d.prototype._setDataActual = function(a, b) {
    var c = this;
    c.table.options.dataLoading.call(this.table, a);
    c.rows.forEach(function(a) {
      a.wipe();
    });
    c.rows = [];
    this.table.options.history && this.table.modExists("history") && this.table.modules.history.clear();
    Array.isArray(a) ? (this.table.modExists("selectRow") && this.table.modules.selectRow.clearSelectionData(), a.forEach(function(a, b) {
      a && "object" === ("undefined" === typeof a ? "undefined" : _typeof(a)) ? (a = new g(a, c), c.rows.push(a)) : console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:", a);
    }), c.table.options.dataLoaded.call(this.table, a), c.refreshActiveData(!1, !1, b)) : console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ", "undefined" === typeof a ? "undefined" : _typeof(a), "\nData:     ", a);
  };
  d.prototype.deleteRow = function(a) {
    var b = this.rows.indexOf(a), c = this.activeRows.indexOf(a);
    -1 < c && this.activeRows.splice(c, 1);
    -1 < b && this.rows.splice(b, 1);
    this.setActiveRows(this.activeRows);
    this.displayRowIterator(function(b) {
      var c = b.indexOf(a);
      -1 < c && b.splice(c, 1);
    });
    this.reRenderInPosition();
    this.table.options.rowDeleted.call(this.table, a.getComponent());
    this.table.options.dataEdited.call(this.table, this.getData());
    this.table.options.groupBy && this.table.modExists("groupRows") ? this.table.modules.groupRows.updateGroupRows(!0) : this.table.options.pagination && this.table.modExists("page") ? this.refreshActiveData(!1, !1, !0) : this.table.options.pagination && this.table.modExists("page") && this.refreshActiveData("page");
  };
  d.prototype.addRow = function(a, b, c, d) {
    d = this.addRowActual(a, b, c, d);
    this.table.options.history && this.table.modExists("history") && this.table.modules.history.action("rowAdd", d, {data:a, pos:b, index:c});
    return d;
  };
  d.prototype.addRows = function(a, b, c) {
    var d = this, l = this, f = [];
    return new Promise(function(p, g) {
      b = d.findAddRowPos(b);
      Array.isArray(a) || (a = [a]);
      ("undefined" == typeof c && b || "undefined" !== typeof c && !b) && a.reverse();
      a.forEach(function(a, d) {
        a = l.addRow(a, b, c, !0);
        f.push(a);
      });
      d.table.options.groupBy && d.table.modExists("groupRows") ? d.table.modules.groupRows.updateGroupRows(!0) : d.table.options.pagination && d.table.modExists("page") ? d.refreshActiveData(!1, !1, !0) : d.reRenderInPosition();
      d.table.modExists("columnCalcs") && d.table.modules.columnCalcs.recalc(d.table.rowManager.activeRows);
      p(f);
    });
  };
  d.prototype.findAddRowPos = function(a) {
    "undefined" === typeof a && (a = this.table.options.addRowPos);
    "pos" === a && (a = !0);
    "bottom" === a && (a = !1);
    return a;
  };
  d.prototype.addRowActual = function(a, b, c, d) {
    var l = a instanceof g ? a : new g(a || {}, this), f = this.findAddRowPos(b);
    !c && this.table.options.pagination && "page" == this.table.options.paginationAddRow && (a = this.getDisplayRows(), f ? a.length ? c = a[0] : this.activeRows.length && (c = this.activeRows[this.activeRows.length - 1], f = !1) : a.length && (c = a[a.length - 1], f = a.length < this.table.modules.page.getPageSize() ? !1 : !0));
    c && (c = this.findRow(c));
    this.table.options.groupBy && this.table.modExists("groupRows") && (this.table.modules.groupRows.assignRowToGroup(l), a = l.getGroup().rows, 1 < a.length && (!c || c && -1 == a.indexOf(c) ? f ? a[0] !== l && (c = a[0], this._moveRowInArray(l.getGroup().rows, l, c, f)) : a[a.length - 1] !== l && (c = a[a.length - 1], this._moveRowInArray(l.getGroup().rows, l, c, f)) : this._moveRowInArray(l.getGroup().rows, l, c, f)));
    c ? (a = this.rows.indexOf(c), b = this.activeRows.indexOf(c), this.displayRowIterator(function(a) {
      var b = a.indexOf(c);
      -1 < b && a.splice(f ? b : b + 1, 0, l);
    }), -1 < b && this.activeRows.splice(f ? b : b + 1, 0, l), -1 < a && this.rows.splice(f ? a : a + 1, 0, l)) : f ? (this.displayRowIterator(function(a) {
      a.unshift(l);
    }), this.activeRows.unshift(l), this.rows.unshift(l)) : (this.displayRowIterator(function(a) {
      a.push(l);
    }), this.activeRows.push(l), this.rows.push(l));
    this.setActiveRows(this.activeRows);
    this.table.options.rowAdded.call(this.table, l.getComponent());
    this.table.options.dataEdited.call(this.table, this.getData());
    d || this.reRenderInPosition();
    return l;
  };
  d.prototype.moveRow = function(a, b, c) {
    this.table.options.history && this.table.modExists("history") && this.table.modules.history.action("rowMove", a, {pos:this.getRowPosition(a), to:b, after:c});
    this.moveRowActual(a, b, c);
    this.table.options.rowMoved.call(this.table, a.getComponent());
  };
  d.prototype.moveRowActual = function(a, b, c) {
    var d = this;
    this._moveRowInArray(this.rows, a, b, c);
    this._moveRowInArray(this.activeRows, a, b, c);
    this.displayRowIterator(function(l) {
      d._moveRowInArray(l, a, b, c);
    });
    if (this.table.options.groupBy && this.table.modExists("groupRows")) {
      var l = b.getGroup(), f = a.getGroup();
      l === f ? this._moveRowInArray(l.rows, a, b, c) : (f && f.removeRow(a), l.insertRow(a, b, c));
    }
  };
  d.prototype._moveRowInArray = function(a, b, c, d) {
    if (b !== c) {
      var l = a.indexOf(b);
      if (-1 < l) {
        a.splice(l, 1);
        var f = a.indexOf(c);
        -1 < f ? d ? a.splice(f + 1, 0, b) : a.splice(f, 0, b) : a.splice(l, 0, b);
      }
      if (a === this.getDisplayRows()) {
        for (b = f > l ? f : l + 1, l = l < f ? l : f; l <= b; l++) {
          a[l] && this.styleRow(a[l], l);
        }
      }
    }
  };
  d.prototype.clearData = function() {
    this.setData([]);
  };
  d.prototype.getRowIndex = function(a) {
    return this.findRowIndex(a, this.rows);
  };
  d.prototype.getDisplayRowIndex = function(a) {
    a = this.getDisplayRows().indexOf(a);
    return -1 < a ? a : !1;
  };
  d.prototype.nextDisplayRow = function(a, b) {
    a = this.getDisplayRowIndex(a);
    var c = !1;
    !1 !== a && a < this.displayRowsCount - 1 && (c = this.getDisplayRows()[a + 1]);
    return !c || c instanceof g && "row" == c.type ? c : this.nextDisplayRow(c, b);
  };
  d.prototype.prevDisplayRow = function(a, b) {
    a = this.getDisplayRowIndex(a);
    var c = !1;
    a && (c = this.getDisplayRows()[a - 1]);
    return !c || c instanceof g && "row" == c.type ? c : this.prevDisplayRow(c, b);
  };
  d.prototype.findRowIndex = function(a, b) {
    if (a = this.findRow(a)) {
      if (a = b.indexOf(a), -1 < a) {
        return a;
      }
    }
    return !1;
  };
  d.prototype.getData = function(a, b) {
    var c = [];
    (a ? this.activeRows : this.rows).forEach(function(a) {
      c.push(a.getData(b || "data"));
    });
    return c;
  };
  d.prototype.getHtml = function(a) {
    a = this.getData(a);
    var b = [], c = "", d = "";
    this.table.columnManager.getColumns().forEach(function(a) {
      var d = a.getDefinition();
      a.visible && !d.hideInHtml && (c += "<th>" + (d.title || "") + "</th>", b.push(a));
    });
    a.forEach(function(a) {
      var c = "";
      b.forEach(function(b) {
        b = b.getFieldValue(a);
        if ("undefined" === typeof b || null === b) {
          b = ":";
        }
        c += "<td>" + b + "</td>";
      });
      d += "<tr>" + c + "</tr>";
    });
    return "<table>\n\n\t\t\t<thead>\n\n\t\t\t<tr>" + c + "</tr>\n\n\t\t\t</thead>\n\n\t\t\t<tbody>" + d + "</tbody>\n\n\t\t\t</table>";
  };
  d.prototype.getComponents = function(a) {
    var b = [];
    (a ? this.activeRows : this.rows).forEach(function(a) {
      b.push(a.getComponent());
    });
    return b;
  };
  d.prototype.getDataCount = function(a) {
    return a ? this.rows.length : this.activeRows.length;
  };
  d.prototype._genRemoteRequest = function() {
    var a = this, b = a.table, c = b.options, d = {};
    if (b.modExists("page")) {
      if (c.ajaxSorting) {
        var f = a.table.modules.sort.getSort();
        f.forEach(function(a) {
          delete a.column;
        });
        d[a.table.modules.page.paginationDataSentNames.sorters] = f;
      }
      c.ajaxFiltering && (c = a.table.modules.filter.getFilters(!0, !0), d[a.table.modules.page.paginationDataSentNames.filters] = c);
      a.table.modules.ajax.setParams(d, !0);
    }
    b.modules.ajax.sendRequest().then(function(b) {
      a.setData(b);
    }).catch(function(a) {
    });
  };
  d.prototype.filterRefresh = function() {
    var a = this.table, b = a.options, c = this.scrollLeft;
    b.ajaxFiltering ? "remote" == b.pagination && a.modExists("page") ? (a.modules.page.reset(!0), a.modules.page.setPage(1).then(function() {
    }).catch(function() {
    })) : b.ajaxProgressiveLoad ? a.modules.ajax.loadData().then(function() {
    }).catch(function() {
    }) : this._genRemoteRequest() : this.refreshActiveData("filter");
    this.scrollHorizontal(c);
  };
  d.prototype.sorterRefresh = function() {
    var a = this.table, b = this.table.options, c = this.scrollLeft;
    b.ajaxSorting ? ("remote" == b.pagination || b.progressiveLoad) && a.modExists("page") ? (a.modules.page.reset(!0), a.modules.page.setPage(1).then(function() {
    }).catch(function() {
    })) : b.ajaxProgressiveLoad ? a.modules.ajax.loadData().then(function() {
    }).catch(function() {
    }) : this._genRemoteRequest() : this.refreshActiveData("sort");
    this.scrollHorizontal(c);
  };
  d.prototype.scrollHorizontal = function(a) {
    this.scrollLeft = a;
    this.element.scrollLeft = a;
    this.table.options.groupBy && this.table.modules.groupRows.scrollHeaders(a);
    this.table.modExists("columnCalcs") && this.table.modules.columnCalcs.scrollHorizontal(a);
  };
  d.prototype.refreshActiveData = function(a, b, c) {
    var d = this.table;
    a || (a = "all");
    d.options.selectable && !d.options.selectablePersistence && d.modExists("selectRow") && d.modules.selectRow.deselectRows();
    switch(a) {
      case "all":
      case "filter":
        b ? b = !1 : d.modExists("filter") ? this.setActiveRows(d.modules.filter.filter(this.rows)) : this.setActiveRows(this.rows.slice(0));
      case "sort":
        b ? b = !1 : d.modExists("sort") && d.modules.sort.sort();
      case "display":
        this.resetDisplayRows();
      case "freeze":
        b ? b = !1 : this.table.modExists("frozenRows") && d.modules.frozenRows.isFrozen() && (d.modules.frozenRows.getDisplayIndex() || d.modules.frozenRows.setDisplayIndex(this.getNextDisplayIndex()), a = d.modules.frozenRows.getDisplayIndex(), a = this.setDisplayRows(d.modules.frozenRows.getRows(this.getDisplayRows(a - 1)), a), !0 !== a && d.modules.frozenRows.setDisplayIndex(a));
      case "group":
        b ? b = !1 : d.options.groupBy && d.modExists("groupRows") && (d.modules.groupRows.getDisplayIndex() || d.modules.groupRows.setDisplayIndex(this.getNextDisplayIndex()), a = d.modules.groupRows.getDisplayIndex(), a = this.setDisplayRows(d.modules.groupRows.getRows(this.getDisplayRows(a - 1)), a), !0 !== a && d.modules.groupRows.setDisplayIndex(a));
      case "tree":
        b ? b = !1 : d.options.dataTree && d.modExists("dataTree") && (d.modules.dataTree.getDisplayIndex() || d.modules.dataTree.setDisplayIndex(this.getNextDisplayIndex()), a = d.modules.dataTree.getDisplayIndex(), a = this.setDisplayRows(d.modules.dataTree.getRows(this.getDisplayRows(a - 1)), a), !0 !== a && d.modules.dataTree.setDisplayIndex(a)), d.options.pagination && d.modExists("page") && !c && "local" == d.modules.page.getMode() && d.modules.page.reset();
      case "page":
        !b && d.options.pagination && d.modExists("page") && (d.modules.page.getDisplayIndex() || d.modules.page.setDisplayIndex(this.getNextDisplayIndex()), a = d.modules.page.getDisplayIndex(), "local" == d.modules.page.getMode() && d.modules.page.setMaxRows(this.getDisplayRows(a - 1).length), a = this.setDisplayRows(d.modules.page.getRows(this.getDisplayRows(a - 1)), a), !0 !== a && d.modules.page.setDisplayIndex(a));
    }
    r.prototype.helpers.elVisible(this.element) && (c ? this.reRenderInPosition() : (this.renderTable(), d.options.layoutColumnsOnNewData && this.table.columnManager.redraw(!0)));
    d.modExists("columnCalcs") && d.modules.columnCalcs.recalc(this.activeRows);
  };
  d.prototype.setActiveRows = function(a) {
    this.activeRows = a;
    this.activeRowsCount = this.activeRows.length;
  };
  d.prototype.resetDisplayRows = function() {
    this.displayRows = [];
    this.displayRows.push(this.activeRows.slice(0));
    this.displayRowsCount = this.displayRows[0].length;
    this.table.modExists("frozenRows") && this.table.modules.frozenRows.setDisplayIndex(0);
    this.table.options.groupBy && this.table.modExists("groupRows") && this.table.modules.groupRows.setDisplayIndex(0);
    this.table.options.pagination && this.table.modExists("page") && this.table.modules.page.setDisplayIndex(0);
  };
  d.prototype.getNextDisplayIndex = function() {
    return this.displayRows.length;
  };
  d.prototype.setDisplayRows = function(a, b) {
    b && "undefined" != typeof this.displayRows[b] ? (this.displayRows[b] = a, a = !0) : (this.displayRows.push(a), a = b = this.displayRows.length - 1);
    b == this.displayRows.length - 1 && (this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length);
    return a;
  };
  d.prototype.getDisplayRows = function(a) {
    return "undefined" == typeof a ? this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [] : this.displayRows[a] || [];
  };
  d.prototype.displayRowIterator = function(a) {
    this.displayRows.forEach(a);
    this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;
  };
  d.prototype.getRows = function() {
    return this.rows;
  };
  d.prototype.reRenderInPosition = function(a) {
    if ("virtual" == this.getRenderMode()) {
      for (var b = this.element.scrollTop, c = !1, d = !1, f = this.scrollLeft, g = this.getDisplayRows(), h = this.vDomTop; h <= this.vDomBottom; h++) {
        if (g[h]) {
          var m = b - g[h].getElement().offsetTop;
          if (!1 === d || Math.abs(m) < d) {
            d = m, c = h;
          } else {
            break;
          }
        }
      }
      a && a();
      this._virtualRenderFill(!1 === c ? this.displayRowsCount - 1 : c, !0, d || 0);
      this.scrollHorizontal(f);
    } else {
      this.renderTable();
    }
  };
  d.prototype.setRenderMode = function() {
    this.renderMode = (this.table.element.clientHeight || this.table.options.height) && this.table.options.virtualDom ? "virtual" : "classic";
  };
  d.prototype.getRenderMode = function() {
    return this.renderMode;
  };
  d.prototype.renderTable = function() {
    this.table.options.renderStarted.call(this.table);
    this.element.scrollTop = 0;
    switch(this.renderMode) {
      case "classic":
        this._simpleRender();
        break;
      case "virtual":
        this._virtualRenderFill();
    }
    this.firstRender && (this.displayRowsCount ? (this.firstRender = !1, this.table.modules.layout.layout()) : this.renderEmptyScroll());
    this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layout();
    !this.displayRowsCount && this.table.options.placeholder && (this.renderMode && this.table.options.placeholder.setAttribute("tabulator-render-mode", this.renderMode), this.getElement().appendChild(this.table.options.placeholder));
    this.table.options.renderComplete.call(this.table);
  };
  d.prototype._simpleRender = function() {
    this._clearVirtualDom();
    this.displayRowsCount ? this.checkClassicModeGroupHeaderWidth() : this.renderEmptyScroll();
  };
  d.prototype.checkClassicModeGroupHeaderWidth = function() {
    var a = this, b = this.tableElement, c = !0;
    a.getDisplayRows().forEach(function(d, l) {
      a.styleRow(d, l);
      b.appendChild(d.getElement());
      d.initialize(!0);
      "group" !== d.type && (c = !1);
    });
    b.style.minWidth = c ? a.table.columnManager.getWidth() + "px" : "";
  };
  d.prototype.renderEmptyScroll = function() {
    this.tableElement.style.minWidth = this.table.columnManager.getWidth() + "px";
    this.tableElement.style.minHeight = "1px";
    this.tableElement.style.visibility = "hidden";
  };
  d.prototype._clearVirtualDom = function() {
    var a = this.tableElement;
    for (this.table.options.placeholder && this.table.options.placeholder.parentNode && this.table.options.placeholder.parentNode.removeChild(this.table.options.placeholder); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
    a.style.paddingTop = "";
    a.style.paddingBottom = "";
    a.style.minWidth = "";
    a.style.minHeight = "";
    a.style.visibility = "";
    this.vDomBottomPad = this.vDomTopPad = this.vDomBottom = this.vDomTop = this.scrollLeft = this.scrollTop = 0;
  };
  d.prototype.styleRow = function(a, b) {
    a = a.getElement();
    b % 2 ? (a.classList.add("tabulator-row-even"), a.classList.remove("tabulator-row-odd")) : (a.classList.add("tabulator-row-odd"), a.classList.remove("tabulator-row-even"));
  };
  d.prototype._virtualRenderFill = function(a, b, c) {
    var d = this.tableElement, l = this.element, f = 0, p = 0, g = 0, h = 0, m = !0, n = this.getDisplayRows();
    a = a || 0;
    c = c || 0;
    if (a) {
      for (; d.firstChild;) {
        d.removeChild(d.firstChild);
      }
      f = (this.displayRowsCount - a + 1) * this.vDomRowHeight;
      f < this.height && (a -= Math.ceil((this.height - f) / this.vDomRowHeight), 0 > a && (a = 0));
      f = Math.min(Math.max(Math.floor(this.vDomWindowBuffer / this.vDomRowHeight), this.vDomWindowMinMarginRows), a);
      a -= f;
    } else {
      this._clearVirtualDom();
    }
    if (this.displayRowsCount && r.prototype.helpers.elVisible(this.element)) {
      this.vDomTop = a;
      for (this.vDomBottom = a - 1; (p <= this.height + this.vDomWindowBuffer || h < this.vDomWindowMinTotalRows) && this.vDomBottom < this.displayRowsCount - 1;) {
        var q = this.vDomBottom + 1, u = n[q];
        this.styleRow(u, q);
        d.appendChild(u.getElement());
        u.initialized ? u.heightInitialized || u.normalizeHeight(!0) : u.initialize(!0);
        h < f ? g += u.getHeight() : p += u.getHeight();
        "group" !== u.type && (m = !1);
        this.vDomBottom++;
        h++;
      }
      a ? (this.vDomTopPad = b ? this.vDomRowHeight * this.vDomTop + c : this.scrollTop - g, this.vDomBottomPad = this.vDomBottom == this.displayRowsCount - 1 ? 0 : Math.max(this.vDomScrollHeight - this.vDomTopPad - p - g, 0)) : (this.vDomTopPad = 0, this.vDomRowHeight = Math.floor((p + g) / h), this.vDomBottomPad = this.vDomRowHeight * (this.displayRowsCount - this.vDomBottom - 1), this.vDomScrollHeight = g + p + this.vDomBottomPad - this.height);
      d.style.paddingTop = this.vDomTopPad + "px";
      d.style.paddingBottom = this.vDomBottomPad + "px";
      b && (this.scrollTop = this.vDomTopPad + g + c - (this.element.scrollWidth > this.element.clientWidth ? this.element.offsetHeight - this.element.clientHeight : 0));
      this.scrollTop = Math.min(this.scrollTop, this.element.scrollHeight - this.height);
      this.element.scrollWidth > this.element.offsetWidth && b && (this.scrollTop += this.element.offsetHeight - this.element.clientHeight);
      this.vDomScrollPosBottom = this.vDomScrollPosTop = this.scrollTop;
      l.scrollTop = this.scrollTop;
      d.style.minWidth = m ? this.table.columnManager.getWidth() + "px" : "";
      this.table.options.groupBy && "fitDataFill" != this.table.modules.layout.getMode() && this.displayRowsCount == this.table.modules.groupRows.countGroups() && (this.tableElement.style.minWidth = this.table.columnManager.getWidth());
    } else {
      this.renderEmptyScroll();
    }
  };
  d.prototype.scrollVertical = function(a) {
    var b = this.scrollTop - this.vDomScrollPosTop, c = this.scrollTop - this.vDomScrollPosBottom, d = 2 * this.vDomWindowBuffer;
    -b > d || c > d ? (a = this.scrollLeft, this._virtualRenderFill(Math.floor(this.element.scrollTop / this.element.scrollHeight * this.displayRowsCount)), this.scrollHorizontal(a)) : a ? (0 > b && this._addTopRow(-b), 0 > b && this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer && this._removeBottomRow(-c)) : (0 <= b && this.scrollTop > this.vDomWindowBuffer && this._removeTopRow(b), 0 <= c && this._addBottomRow(c));
  };
  d.prototype._addTopRow = function(a) {
    var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, c = this.tableElement, d = this.getDisplayRows();
    if (this.vDomTop) {
      var f = this.vDomTop - 1, g = d[f], h = g.getHeight() || this.vDomRowHeight;
      a >= h && (this.styleRow(g, f), c.insertBefore(g.getElement(), c.firstChild), g.initialized && g.heightInitialized || (this.vDomTopNewRows.push(g), g.heightInitialized || g.clearCellHeight()), g.initialize(), this.vDomTopPad -= h, 0 > this.vDomTopPad && (this.vDomTopPad = f * this.vDomRowHeight), f || (this.vDomTopPad = 0), c.style.paddingTop = this.vDomTopPad + "px", this.vDomScrollPosTop -= h, this.vDomTop--);
      a = -(this.scrollTop - this.vDomScrollPosTop);
      b < this.vDomMaxRenderChain && this.vDomTop && a >= (d[this.vDomTop - 1].getHeight() || this.vDomRowHeight) ? this._addTopRow(a, b + 1) : this._quickNormalizeRowHeight(this.vDomTopNewRows);
    }
  };
  d.prototype._removeTopRow = function(a) {
    var b = this.tableElement, c = this.getDisplayRows()[this.vDomTop], d = c.getHeight() || this.vDomRowHeight;
    a >= d && (a = c.getElement(), a.parentNode.removeChild(a), this.vDomTopPad += d, b.style.paddingTop = this.vDomTopPad + "px", this.vDomScrollPosTop += this.vDomTop ? d : d + this.vDomWindowBuffer, this.vDomTop++, a = this.scrollTop - this.vDomScrollPosTop, this._removeTopRow(a));
  };
  d.prototype._addBottomRow = function(a) {
    var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, c = this.tableElement, d = this.getDisplayRows();
    if (this.vDomBottom < this.displayRowsCount - 1) {
      var f = this.vDomBottom + 1, g = d[f], h = g.getHeight() || this.vDomRowHeight;
      if (a >= h) {
        this.styleRow(g, f);
        c.appendChild(g.getElement());
        g.initialized && g.heightInitialized || (this.vDomBottomNewRows.push(g), g.heightInitialized || g.clearCellHeight());
        g.initialize();
        this.vDomBottomPad -= h;
        if (0 > this.vDomBottomPad || f == this.displayRowsCount - 1) {
          this.vDomBottomPad = 0;
        }
        c.style.paddingBottom = this.vDomBottomPad + "px";
        this.vDomScrollPosBottom += h;
        this.vDomBottom++;
      }
      a = this.scrollTop - this.vDomScrollPosBottom;
      b < this.vDomMaxRenderChain && this.vDomBottom < this.displayRowsCount - 1 && a >= (d[this.vDomBottom + 1].getHeight() || this.vDomRowHeight) ? this._addBottomRow(a, b + 1) : this._quickNormalizeRowHeight(this.vDomBottomNewRows);
    }
  };
  d.prototype._removeBottomRow = function(a) {
    var b = this.tableElement, c = this.getDisplayRows()[this.vDomBottom], d = c.getHeight() || this.vDomRowHeight;
    a >= d && (a = c.getElement(), a.parentNode && a.parentNode.removeChild(a), this.vDomBottomPad += d, 0 > this.vDomBottomPad && (this.vDomBottomPad = 0), b.style.paddingBottom = this.vDomBottomPad + "px", this.vDomScrollPosBottom -= d, this.vDomBottom--, a = -(this.scrollTop - this.vDomScrollPosBottom), this._removeBottomRow(a));
  };
  d.prototype._quickNormalizeRowHeight = function(a) {
    a.forEach(function(a) {
      a.calcHeight();
    });
    a.forEach(function(a) {
      a.setCellHeight();
    });
    a.length = 0;
  };
  d.prototype.normalizeHeight = function() {
    this.activeRows.forEach(function(a) {
      a.normalizeHeight();
    });
  };
  d.prototype.adjustTableSize = function() {
    if ("virtual" === this.renderMode) {
      this.height = this.element.clientHeight;
      this.vDomWindowBuffer = this.table.options.virtualDomBuffer || this.height;
      var a = this.columnManager.getElement().offsetHeight + (this.table.footerManager && !this.table.footerManager.external ? this.table.footerManager.getElement().offsetHeight : 0);
      this.element.style.minHeight = "calc(100% - " + a + "px)";
      this.element.style.height = "calc(100% - " + a + "px)";
      this.element.style.maxHeight = "calc(100% - " + a + "px)";
    }
  };
  d.prototype.reinitialize = function() {
    this.rows.forEach(function(a) {
      a.reinitialize();
    });
  };
  d.prototype.redraw = function(a) {
    var b = this.scrollLeft;
    this.adjustTableSize();
    a ? this.renderTable() : ("classic" == self.renderMode ? self.table.options.groupBy ? self.refreshActiveData("group", !1, !1) : this._simpleRender() : (this.reRenderInPosition(), this.scrollHorizontal(b)), this.displayRowsCount || this.table.options.placeholder && this.getElement().appendChild(this.table.options.placeholder));
  };
  d.prototype.resetScroll = function() {
    this.element.scrollLeft = 0;
    this.element.scrollTop = 0;
    if ("ie" === this.table.browser) {
      var a = document.createEvent("Event");
      a.initEvent("scroll", !1, !0);
      this.element.dispatchEvent(a);
    } else {
      this.element.dispatchEvent(new Event("scroll"));
    }
  };
  var f = function(a) {
    this._row = a;
  };
  f.prototype.getData = function(a) {
    return this._row.getData(a);
  };
  f.prototype.getElement = function() {
    return this._row.getElement();
  };
  f.prototype.getCells = function() {
    var a = [];
    this._row.getCells().forEach(function(b) {
      a.push(b.getComponent());
    });
    return a;
  };
  f.prototype.getCell = function(a) {
    return (a = this._row.getCell(a)) ? a.getComponent() : !1;
  };
  f.prototype.getIndex = function() {
    return this._row.getData("data")[this._row.table.options.index];
  };
  f.prototype.getPosition = function(a) {
    return this._row.table.rowManager.getRowPosition(this._row, a);
  };
  f.prototype.delete = function() {
    return this._row.delete();
  };
  f.prototype.scrollTo = function() {
    return this._row.table.rowManager.scrollToRow(this._row);
  };
  f.prototype.update = function(a) {
    return this._row.updateData(a);
  };
  f.prototype.normalizeHeight = function() {
    this._row.normalizeHeight(!0);
  };
  f.prototype.select = function() {
    this._row.table.modules.selectRow.selectRows(this._row);
  };
  f.prototype.deselect = function() {
    this._row.table.modules.selectRow.deselectRows(this._row);
  };
  f.prototype.toggleSelect = function() {
    this._row.table.modules.selectRow.toggleRow(this._row);
  };
  f.prototype.isSelected = function() {
    return this._row.table.modules.selectRow.isRowSelected(this._row);
  };
  f.prototype._getSelf = function() {
    return this._row;
  };
  f.prototype.freeze = function() {
    this._row.table.modExists("frozenRows", !0) && this._row.table.modules.frozenRows.freezeRow(this._row);
  };
  f.prototype.unfreeze = function() {
    this._row.table.modExists("frozenRows", !0) && this._row.table.modules.frozenRows.unfreezeRow(this._row);
  };
  f.prototype.treeCollapse = function() {
    this._row.table.modExists("dataTree", !0) && this._row.table.modules.dataTree.collapseRow(this._row);
  };
  f.prototype.treeExpand = function() {
    this._row.table.modExists("dataTree", !0) && this._row.table.modules.dataTree.expandRow(this._row);
  };
  f.prototype.treeToggle = function() {
    this._row.table.modExists("dataTree", !0) && this._row.table.modules.dataTree.toggleRow(this._row);
  };
  f.prototype.getTreeParent = function() {
    return this._row.table.modExists("dataTree", !0) ? this._row.table.modules.dataTree.getTreeParent(this._row) : !1;
  };
  f.prototype.getTreeChildren = function() {
    return this._row.table.modExists("dataTree", !0) ? this._row.table.modules.dataTree.getTreeChildren(this._row) : !1;
  };
  f.prototype.reformat = function() {
    return this._row.reinitialize();
  };
  f.prototype.getGroup = function() {
    return this._row.getGroup().getComponent();
  };
  f.prototype.getTable = function() {
    return this._row.table;
  };
  f.prototype.getNextRow = function() {
    return this._row.nextRow();
  };
  f.prototype.getPrevRow = function() {
    return this._row.prevRow();
  };
  var g = function(a, b) {
    this.table = b.table;
    this.parent = b;
    this.data = {};
    this.type = "row";
    this.element = this.createElement();
    this.modules = {};
    this.cells = [];
    this.outerHeight = this.height = 0;
    this.heightInitialized = this.initialized = !1;
    this.setData(a);
    this.generateElement();
  };
  g.prototype.createElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-row");
    a.setAttribute("role", "row");
    return a;
  };
  g.prototype.getElement = function() {
    return this.element;
  };
  g.prototype.detachElement = function() {
    this.element && this.element.parentNode && this.element.parentNode.removeChild(this.element);
  };
  g.prototype.generateElement = function() {
    var a = this;
    !1 !== a.table.options.selectable && a.table.modExists("selectRow") && a.table.modules.selectRow.initializeRow(this);
    !1 !== a.table.options.movableRows && a.table.modExists("moveRow") && a.table.modules.moveRow.initializeRow(this);
    !1 !== a.table.options.dataTree && a.table.modExists("dataTree") && a.table.modules.dataTree.initializeRow(this);
    a.table.options.rowClick && a.element.addEventListener("click", function(b) {
      a.table.options.rowClick(b, a.getComponent());
    });
    a.table.options.rowDblClick && a.element.addEventListener("dblclick", function(b) {
      a.table.options.rowDblClick(b, a.getComponent());
    });
    a.table.options.rowContext && a.element.addEventListener("contextmenu", function(b) {
      a.table.options.rowContext(b, a.getComponent());
    });
    if (a.table.options.rowTap) {
      var b = !1;
      a.element.addEventListener("touchstart", function(a) {
        b = !0;
      });
      a.element.addEventListener("touchend", function(c) {
        b && a.table.options.rowTap(c, a.getComponent());
        b = !1;
      });
    }
    if (a.table.options.rowDblTap) {
      var c = null;
      a.element.addEventListener("touchend", function(b) {
        c ? (clearTimeout(c), c = null, a.table.options.rowDblTap(b, a.getComponent())) : c = setTimeout(function() {
          clearTimeout(c);
          c = null;
        }, 300);
      });
    }
    if (a.table.options.rowTapHold) {
      var d = null;
      a.element.addEventListener("touchstart", function(c) {
        clearTimeout(d);
        d = setTimeout(function() {
          clearTimeout(d);
          d = null;
          b = !1;
          a.table.options.rowTapHold(c, a.getComponent());
        }, 1000);
      });
      a.element.addEventListener("touchend", function(a) {
        clearTimeout(d);
        d = null;
      });
    }
  };
  g.prototype.generateCells = function() {
    this.cells = this.table.columnManager.generateCells(this);
  };
  g.prototype.initialize = function(a) {
    var b = this;
    if (!b.initialized || a) {
      for (b.deleteCells(); b.element.firstChild;) {
        b.element.removeChild(b.element.firstChild);
      }
      this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layoutRow(this);
      this.generateCells();
      b.cells.forEach(function(a) {
        b.element.appendChild(a.getElement());
        a.cellRendered();
      });
      a && b.normalizeHeight();
      b.table.options.dataTree && b.table.modExists("dataTree") && b.table.modules.dataTree.layoutRow(this);
      "collapse" === b.table.options.responsiveLayout && b.table.modExists("responsiveLayout") && b.table.modules.responsiveLayout.layoutRow(this);
      b.table.options.rowFormatter && b.table.options.rowFormatter(b.getComponent());
      b.table.options.resizableRows && b.table.modExists("resizeRows") && b.table.modules.resizeRows.initializeRow(b);
      b.initialized = !0;
    }
  };
  g.prototype.reinitializeHeight = function() {
    this.heightInitialized = !1;
    null !== this.element.offsetParent && this.normalizeHeight(!0);
  };
  g.prototype.reinitialize = function() {
    this.heightInitialized = this.initialized = !1;
    this.height = 0;
    null !== this.element.offsetParent && this.initialize(!0);
  };
  g.prototype.calcHeight = function() {
    var a = 0, b = this.table.options.resizableRows ? this.element.clientHeight : 0;
    this.cells.forEach(function(b) {
      b = b.getHeight();
      b > a && (a = b);
    });
    this.height = Math.max(a, b);
    this.outerHeight = this.element.offsetHeight;
  };
  g.prototype.setCellHeight = function() {
    var a = this.height;
    this.cells.forEach(function(b) {
      b.setHeight(a);
    });
    this.heightInitialized = !0;
  };
  g.prototype.clearCellHeight = function() {
    this.cells.forEach(function(a) {
      a.clearHeight();
    });
  };
  g.prototype.normalizeHeight = function(a) {
    a && this.clearCellHeight();
    this.calcHeight();
    this.setCellHeight();
  };
  g.prototype.setHeight = function(a) {
    this.height = a;
    this.setCellHeight();
  };
  g.prototype.setHeight = function(a, b) {
    if (this.height != a || b) {
      this.height = a, this.setCellHeight(), this.outerHeight = this.element.offsetHeight;
    }
  };
  g.prototype.getHeight = function() {
    return this.outerHeight;
  };
  g.prototype.getWidth = function() {
    return this.element.offsetWidth;
  };
  g.prototype.deleteCell = function(a) {
    a = this.cells.indexOf(a);
    -1 < a && this.cells.splice(a, 1);
  };
  g.prototype.setData = function(a) {
    this.table.modExists("mutator") ? this.data = this.table.modules.mutator.transformRow(a, "data") : this.data = a;
  };
  g.prototype.updateData = function(a) {
    var b = this, c = this, d = r.prototype.helpers.elVisible(this.element);
    return new Promise(function(f, l) {
      "string" === typeof a && (a = JSON.parse(a));
      c.table.modExists("mutator") && (a = c.table.modules.mutator.transformRow(a, "data", !0));
      for (var g in a) {
        c.data[g] = a[g];
      }
      for (g in a) {
        (l = b.getCell(g)) && l.getValue() != a[g] && (l.setValueProcessData(a[g]), d && l.cellRendered());
      }
      d ? (c.normalizeHeight(), c.table.options.rowFormatter && c.table.options.rowFormatter(c.getComponent())) : (b.initialized = !1, b.height = 0);
      c.table.options.rowUpdated.call(b.table, c.getComponent());
      f();
    });
  };
  g.prototype.getData = function(a) {
    if (a) {
      if (this.table.modExists("accessor")) {
        return this.table.modules.accessor.transformRow(this.data, a);
      }
    } else {
      return this.data;
    }
  };
  g.prototype.getCell = function(a) {
    var b = !1;
    a = this.table.columnManager.findColumn(a);
    return b = this.cells.find(function(b) {
      return b.column === a;
    });
  };
  g.prototype.getCellIndex = function(a) {
    return this.cells.findIndex(function(b) {
      return b === a;
    });
  };
  g.prototype.findNextEditableCell = function(a) {
    var b = !1;
    if (a < this.cells.length - 1) {
      for (a += 1; a < this.cells.length; a++) {
        var c = this.cells[a];
        if (c.column.modules.edit && r.prototype.helpers.elVisible(c.getElement())) {
          var d = !0;
          "function" == typeof c.column.modules.edit.check && (d = c.column.modules.edit.check(c.getComponent()));
          if (d) {
            b = c;
            break;
          }
        }
      }
    }
    return b;
  };
  g.prototype.findPrevEditableCell = function(a) {
    var b = !1;
    if (0 < a) {
      for (--a; 0 <= a; a--) {
        var c = this.cells[a], d = !0;
        if (c.column.modules.edit && r.prototype.helpers.elVisible(c.getElement()) && ("function" == typeof c.column.modules.edit.check && (d = c.column.modules.edit.check(c.getComponent())), d)) {
          b = c;
          break;
        }
      }
    }
    return b;
  };
  g.prototype.getCells = function() {
    return this.cells;
  };
  g.prototype.nextRow = function() {
    var a = this.table.rowManager.nextDisplayRow(this, !0);
    return a ? a.getComponent() : !1;
  };
  g.prototype.prevRow = function() {
    var a = this.table.rowManager.prevDisplayRow(this, !0);
    return a ? a.getComponent() : !1;
  };
  g.prototype.delete = function() {
    var a = this;
    return new Promise(function(b, c) {
      c = a.table.rowManager.getRowIndex(a);
      a.deleteActual();
      a.table.options.history && a.table.modExists("history") && (c && (c = a.table.rowManager.rows[c - 1]), a.table.modules.history.action("rowDelete", a, {data:a.getData(), pos:!c, index:c}));
      b();
    });
  };
  g.prototype.deleteActual = function() {
    this.table.rowManager.getRowIndex(this);
    this.table.modExists("selectRow") && this.table.modules.selectRow._deselectRow(this, !0);
    this.table.rowManager.deleteRow(this);
    this.deleteCells();
    this.heightInitialized = this.initialized = !1;
    this.modules.group && this.modules.group.removeRow(this);
    this.table.modExists("columnCalcs") && (this.table.options.groupBy && this.table.modExists("groupRows") ? this.table.modules.columnCalcs.recalcRowGroup(this) : this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows));
  };
  g.prototype.deleteCells = function() {
    for (var a = this.cells.length, b = 0; b < a; b++) {
      this.cells[0].delete();
    }
  };
  g.prototype.wipe = function() {
    for (this.deleteCells(); this.element.firstChild;) {
      this.element.removeChild(this.element.firstChild);
    }
    this.element.parentNode && this.element.parentNode.removeChild(this.element);
  };
  g.prototype.getGroup = function() {
    return this.modules.group || !1;
  };
  g.prototype.getComponent = function() {
    return new f(this);
  };
  var h = function(a) {
    this._cell = a;
  };
  h.prototype.getValue = function() {
    return this._cell.getValue();
  };
  h.prototype.getOldValue = function() {
    return this._cell.getOldValue();
  };
  h.prototype.getElement = function() {
    return this._cell.getElement();
  };
  h.prototype.getRow = function() {
    return this._cell.row.getComponent();
  };
  h.prototype.getData = function() {
    return this._cell.row.getData();
  };
  h.prototype.getField = function() {
    return this._cell.column.getField();
  };
  h.prototype.getColumn = function() {
    return this._cell.column.getComponent();
  };
  h.prototype.setValue = function(a, b) {
    "undefined" == typeof b && (b = !0);
    this._cell.setValue(a, b);
  };
  h.prototype.restoreOldValue = function() {
    this._cell.setValueActual(this._cell.getOldValue());
  };
  h.prototype.edit = function(a) {
    return this._cell.edit(a);
  };
  h.prototype.cancelEdit = function() {
    this._cell.cancelEdit();
  };
  h.prototype.nav = function() {
    return this._cell.nav();
  };
  h.prototype.checkHeight = function() {
    this._cell.checkHeight();
  };
  h.prototype.getTable = function() {
    return this._cell.table;
  };
  h.prototype._getSelf = function() {
    return this._cell;
  };
  var m = function(a, b) {
    this.table = a.table;
    this.column = a;
    this.row = b;
    this.minWidth = this.width = this.height = this.oldValue = this.value = this.element = null;
    this.build();
  };
  m.prototype.build = function() {
    this.generateElement();
    this.setWidth(this.column.width);
    this._configureCell();
    this.setValueActual(this.column.getFieldValue(this.row.data));
  };
  m.prototype.generateElement = function() {
    this.element = document.createElement("div");
    this.element.className = "tabulator-cell";
    this.element.setAttribute("role", "gridcell");
    this.element = this.element;
  };
  m.prototype._configureCell = function() {
    var a = this, b = a.column.cellEvents, c = a.element, d = this.column.getField();
    c.style.textAlign = a.column.hozAlign;
    d && c.setAttribute("tabulator-field", d);
    a.column.definition.cssClass && a.column.definition.cssClass.split(" ").forEach(function(a) {
      c.classList.add(a);
    });
    (b.cellClick || a.table.options.cellClick) && a.element.addEventListener("click", function(c) {
      var d = a.getComponent();
      b.cellClick && b.cellClick.call(a.table, c, d);
      a.table.options.cellClick && a.table.options.cellClick.call(a.table, c, d);
    });
    (b.cellDblClick || this.table.options.cellDblClick) && c.addEventListener("dblclick", function(c) {
      var d = a.getComponent();
      b.cellDblClick && b.cellDblClick.call(a.table, c, d);
      a.table.options.cellDblClick && a.table.options.cellDblClick.call(a.table, c, d);
    });
    (b.cellContext || this.table.options.cellContext) && c.addEventListener("contextmenu", function(c) {
      var d = a.getComponent();
      b.cellContext && b.cellContext.call(a.table, c, d);
      a.table.options.cellContext && a.table.options.cellContext.call(a.table, c, d);
    });
    "hover" === this.table.options.tooltipGenerationMode && c.addEventListener("mouseenter", function(b) {
      a._generateTooltip();
    });
    if (b.cellTap || this.table.options.cellTap) {
      var f = !1;
      c.addEventListener("touchstart", function(a) {
        f = !0;
      });
      c.addEventListener("touchend", function(c) {
        if (f) {
          var d = a.getComponent();
          b.cellTap && b.cellTap.call(a.table, c, d);
          a.table.options.cellTap && a.table.options.cellTap.call(a.table, c, d);
        }
        f = !1;
      });
    }
    if (b.cellDblTap || this.table.options.cellDblTap) {
      var g = null;
      c.addEventListener("touchend", function(c) {
        if (g) {
          clearTimeout(g);
          g = null;
          var d = a.getComponent();
          b.cellDblTap && b.cellDblTap.call(a.table, c, d);
          a.table.options.cellDblTap && a.table.options.cellDblTap.call(a.table, c, d);
        } else {
          g = setTimeout(function() {
            clearTimeout(g);
            g = null;
          }, 300);
        }
      });
    }
    if (b.cellTapHold || this.table.options.cellTapHold) {
      var h = null;
      c.addEventListener("touchstart", function(c) {
        clearTimeout(h);
        h = setTimeout(function() {
          clearTimeout(h);
          h = null;
          f = !1;
          var d = a.getComponent();
          b.cellTapHold && b.cellTapHold.call(a.table, c, d);
          a.table.options.cellTapHold && a.table.options.cellTapHold.call(a.table, c, d);
        }, 1000);
      });
      c.addEventListener("touchend", function(a) {
        clearTimeout(h);
        h = null;
      });
    }
    a.column.modules.edit && a.table.modules.edit.bindEditor(a);
    a.column.definition.rowHandle && !1 !== a.table.options.movableRows && a.table.modExists("moveRow") && a.table.modules.moveRow.initializeCell(a);
    a.column.visible || a.hide();
  };
  m.prototype._generateContents = function() {
    var a = this.table.modExists("format") ? this.table.modules.format.formatValue(this) : this.element.innerHTML = this.value;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "object":
        if (a instanceof Node) {
          for (; this.element.firstChild;) {
            this.element.removeChild(this.element.firstChild);
          }
          this.element.appendChild(a);
        } else {
          this.element.innerHTML = "", null != a && console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", a);
        }
        break;
      case "undefined":
      case "null":
        this.element.innerHTML = "";
        break;
      default:
        this.element.innerHTML = a;
    }
  };
  m.prototype.cellRendered = function() {
    this.table.modExists("format") && this.table.modules.format.cellRendered && this.table.modules.format.cellRendered(this);
  };
  m.prototype._generateTooltip = function() {
    var a = this.column.tooltip;
    a ? (!0 === a ? a = this.value : "function" == typeof a && (a = a(this.getComponent()), !1 === a && (a = "")), "undefined" === typeof a && (a = ""), this.element.setAttribute("title", a)) : this.element.setAttribute("title", "");
  };
  m.prototype.getElement = function() {
    return this.element;
  };
  m.prototype.getValue = function() {
    return this.value;
  };
  m.prototype.getOldValue = function() {
    return this.oldValue;
  };
  m.prototype.setValue = function(a, b) {
    this.setValueProcessData(a, b) && (this.table.options.history && this.table.modExists("history") && this.table.modules.history.action("cellEdit", this, {oldValue:this.oldValue, newValue:this.value}), a = this.getComponent(), this.column.cellEvents.cellEdited && this.column.cellEvents.cellEdited.call(this.table, a), this.table.options.cellEdited.call(this.table, a), this.table.options.dataEdited.call(this.table, this.table.rowManager.getData()));
    this.table.modExists("columnCalcs") && (this.column.definition.topCalc || this.column.definition.bottomCalc) && (this.table.options.groupBy && this.table.modExists("groupRows") ? this.table.modules.columnCalcs.recalcRowGroup(this.row) : this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows));
  };
  m.prototype.setValueProcessData = function(a, b) {
    var c = !1;
    this.value != a && (c = !0, b && this.column.modules.mutate && (a = this.table.modules.mutator.transformCell(this, a)));
    this.setValueActual(a);
    return c;
  };
  m.prototype.setValueActual = function(a) {
    this.oldValue = this.value;
    this.value = a;
    this.column.setFieldValue(this.row.data, a);
    this._generateContents();
    this._generateTooltip();
    this.table.options.resizableColumns && this.table.modExists("resizeColumns") && this.table.modules.resizeColumns.initializeColumn("cell", this.column, this.element);
    this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layoutElement(this.element, this.column);
  };
  m.prototype.setWidth = function(a) {
    this.width = a;
    this.element.style.width = a ? a + "px" : "";
  };
  m.prototype.getWidth = function() {
    return this.width || this.element.offsetWidth;
  };
  m.prototype.setMinWidth = function(a) {
    this.minWidth = a;
    this.element.style.minWidth = a ? a + "px" : "";
  };
  m.prototype.checkHeight = function() {
    this.row.reinitializeHeight();
  };
  m.prototype.clearHeight = function() {
    this.element.style.height = "";
    this.height = null;
  };
  m.prototype.setHeight = function(a) {
    this.height = a;
    this.element.style.height = a ? a + "px" : "";
  };
  m.prototype.getHeight = function() {
    return this.height || this.element.offsetHeight;
  };
  m.prototype.show = function() {
    this.element.style.display = "";
  };
  m.prototype.hide = function() {
    this.element.style.display = "none";
  };
  m.prototype.edit = function(a) {
    if (this.table.modExists("edit", !0)) {
      return this.table.modules.edit.editCell(this, a);
    }
  };
  m.prototype.cancelEdit = function() {
    if (this.table.modExists("edit", !0)) {
      var a = this.table.modules.edit.getCurrentCell();
      a && a._getSelf() === this ? this.table.modules.edit.cancelEdit() : console.warn("Cancel Editor Error - This cell is not currently being edited ");
    }
  };
  m.prototype.delete = function() {
    this.element.parentNode.removeChild(this.element);
    this.column.deleteCell(this);
    this.row.deleteCell(this);
  };
  m.prototype.nav = function() {
    var a = this, b = !1, c = this.row.getCellIndex(this);
    return {next:function() {
      var b = this.right();
      if (b) {
        return !0;
      }
      if (b = a.table.rowManager.nextDisplayRow(a.row, !0)) {
        if (b = b.findNextEditableCell(-1)) {
          return b.edit(), !0;
        }
      }
      return !1;
    }, prev:function() {
      var b = this.left();
      if (b) {
        return !0;
      }
      if (b = a.table.rowManager.prevDisplayRow(a.row, !0)) {
        if (b = b.findPrevEditableCell(b.cells.length)) {
          return b.edit(), !0;
        }
      }
      return !1;
    }, left:function() {
      return (b = a.row.findPrevEditableCell(c)) ? (b.edit(), !0) : !1;
    }, right:function() {
      return (b = a.row.findNextEditableCell(c)) ? (b.edit(), !0) : !1;
    }, up:function() {
      var b = a.table.rowManager.prevDisplayRow(a.row, !0);
      b && b.cells[c].edit();
    }, down:function() {
      var b = a.table.rowManager.nextDisplayRow(a.row, !0);
      b && b.cells[c].edit();
    }};
  };
  m.prototype.getIndex = function() {
    this.row.getCellIndex(this);
  };
  m.prototype.getComponent = function() {
    return new h(this);
  };
  var u = function(a) {
    this.table = a;
    this.active = !1;
    this.element = this.createElement();
    this.external = !1;
    this.links = [];
    this._initialize();
  };
  u.prototype.createElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-footer");
    return a;
  };
  u.prototype._initialize = function(a) {
    if (this.table.options.footerElement) {
      switch(_typeof(this.table.options.footerElement)) {
        case "string":
          "<" === this.table.options.footerElement[0] ? this.element.innerHTML = this.table.options.footerElement : (this.external = !0, this.element = document.querySelector(this.table.options.footerElement));
          break;
        default:
          this.element = this.table.options.footerElement;
      }
    }
  };
  u.prototype.getElement = function() {
    return this.element;
  };
  u.prototype.append = function(a, b) {
    this.activate(b);
    this.element.appendChild(a);
    this.table.rowManager.adjustTableSize();
  };
  u.prototype.prepend = function(a, b) {
    this.activate(b);
    this.element.insertBefore(a, this.element.firstChild);
    this.table.rowManager.adjustTableSize();
  };
  u.prototype.remove = function(a) {
    a.parentNode.removeChild(a);
    this.deactivate();
  };
  u.prototype.deactivate = function(a) {
    if (!this.element.firstChild || a) {
      this.external || this.element.parentNode.removeChild(this.element), this.active = !1;
    }
  };
  u.prototype.activate = function(a) {
    this.active || (this.active = !0, this.external || (this.table.element.appendChild(this.getElement()), this.table.element.style.display = ""));
    a && this.links.push(a);
  };
  u.prototype.redraw = function() {
    this.links.forEach(function(a) {
      a.footerRedraw();
    });
  };
  var r = function l(a, b) {
    this.options = {};
    this.footerManager = this.rowManager = this.columnManager = null;
    this.browser = "";
    this.browserSlow = !1;
    this.modules = {};
    this.initializeElement(a);
    this.initializeOptions(b || {});
    this._create();
    l.prototype.comms.register(this);
  };
  r.prototype.defaultOptions = {height:!1, layout:"fitData", layoutColumnsOnNewData:!1, columnMinWidth:40, columnVertAlign:"top", resizableColumns:!0, resizableRows:!1, autoResize:!0, columns:[], data:[], nestedFieldSeparator:".", tooltips:!1, tooltipsHeader:!1, tooltipGenerationMode:"load", initialSort:!1, initialFilter:!1, columnHeaderSortMulti:!0, sortOrderReverse:!1, footerElement:!1, index:"id", keybindings:[], clipboard:!1, clipboardCopyStyled:!0, clipboardCopySelector:"active", clipboardCopyFormatter:"table", 
  clipboardPasteParser:"table", clipboardPasteAction:"insert", clipboardCopyConfig:!1, clipboardCopied:function() {
  }, clipboardPasted:function() {
  }, clipboardPasteError:function() {
  }, downloadDataFormatter:!1, downloadReady:function(a, b) {
    return b;
  }, downloadComplete:!1, downloadConfig:!1, dataTree:!1, dataTreeBranchElement:!0, dataTreeChildIndent:9, dataTreeChildField:"_children", dataTreeCollapseElement:!1, dataTreeExpandElement:!1, dataTreeStartExpanded:!1, dataTreeRowExpanded:function() {
  }, dataTreeRowCollapsed:function() {
  }, addRowPos:"bottom", selectable:"highlight", selectableRangeMode:"drag", selectableRollingSelection:!0, selectablePersistence:!0, selectableCheck:function(a, b) {
    return !0;
  }, headerFilterPlaceholder:!1, history:!1, locale:!1, langs:{}, virtualDom:!0, persistentLayout:!1, persistentSort:!1, persistentFilter:!1, persistenceID:"", persistenceMode:!0, responsiveLayout:!1, responsiveLayoutCollapseStartOpen:!0, responsiveLayoutCollapseUseFormatters:!0, responsiveLayoutCollapseFormatter:!1, pagination:!1, paginationSize:!1, paginationButtonCount:5, paginationElement:!1, paginationDataSent:{}, paginationDataReceived:{}, paginationAddRow:"page", ajaxURL:!1, ajaxURLGenerator:!1, 
  ajaxParams:{}, ajaxConfig:"get", ajaxContentType:"form", ajaxRequestFunc:!1, ajaxLoader:!0, ajaxLoaderLoading:!1, ajaxLoaderError:!1, ajaxFiltering:!1, ajaxSorting:!1, ajaxProgressiveLoad:!1, ajaxProgressiveLoadDelay:0, ajaxProgressiveLoadScrollMargin:0, groupBy:!1, groupStartOpen:!0, groupValues:!1, groupHeader:!1, movableColumns:!1, movableRows:!1, movableRowsConnectedTables:!1, movableRowsSender:!1, movableRowsReceiver:"insert", movableRowsSendingStart:function() {
  }, movableRowsSent:function() {
  }, movableRowsSentFailed:function() {
  }, movableRowsSendingStop:function() {
  }, movableRowsReceivingStart:function() {
  }, movableRowsReceived:function() {
  }, movableRowsReceivedFailed:function() {
  }, movableRowsReceivingStop:function() {
  }, scrollToRowPosition:"top", scrollToRowIfVisible:!0, scrollToColumnPosition:"left", scrollToColumnIfVisible:!0, rowFormatter:!1, placeholder:!1, tableBuilding:function() {
  }, tableBuilt:function() {
  }, renderStarted:function() {
  }, renderComplete:function() {
  }, rowClick:!1, rowDblClick:!1, rowContext:!1, rowTap:!1, rowDblTap:!1, rowTapHold:!1, rowAdded:function() {
  }, rowDeleted:function() {
  }, rowMoved:function() {
  }, rowUpdated:function() {
  }, rowSelectionChanged:function() {
  }, rowSelected:function() {
  }, rowDeselected:function() {
  }, rowResized:function() {
  }, cellClick:!1, cellDblClick:!1, cellContext:!1, cellTap:!1, cellDblTap:!1, cellTapHold:!1, cellEditing:function() {
  }, cellEdited:function() {
  }, cellEditCancelled:function() {
  }, columnMoved:!1, columnResized:function() {
  }, columnTitleChanged:function() {
  }, columnVisibilityChanged:function() {
  }, htmlImporting:function() {
  }, htmlImported:function() {
  }, dataLoading:function() {
  }, dataLoaded:function() {
  }, dataEdited:function() {
  }, ajaxRequesting:function() {
  }, ajaxResponse:!1, ajaxError:function() {
  }, dataFiltering:!1, dataFiltered:!1, dataSorting:function() {
  }, dataSorted:function() {
  }, groupToggleElement:"arrow", groupClosedShowCalcs:!1, dataGrouping:function() {
  }, dataGrouped:!1, groupVisibilityChanged:function() {
  }, groupClick:!1, groupDblClick:!1, groupContext:!1, groupTap:!1, groupDblTap:!1, groupTapHold:!1, columnCalcs:!0, pageLoaded:function() {
  }, localized:function() {
  }, validationFailed:function() {
  }, historyUndo:function() {
  }, historyRedo:function() {
  }};
  r.prototype.initializeOptions = function(a) {
    for (var b in this.defaultOptions) {
      b in a ? this.options[b] = a[b] : Array.isArray(this.defaultOptions[b]) ? this.options[b] = [] : "object" === _typeof(this.defaultOptions[b]) ? this.options[b] = {} : this.options[b] = this.defaultOptions[b];
    }
  };
  r.prototype.initializeElement = function(a) {
    if (a instanceof HTMLElement) {
      return this.element = a, !0;
    }
    if ("string" === typeof a) {
      if (this.element = document.querySelector(a)) {
        return !0;
      }
      console.error("Tabulator Creation Error - no element found matching selector: ", a);
      return !1;
    }
    console.error("Tabulator Creation Error - Invalid element provided:", a);
    return !1;
  };
  r.prototype._mapDepricatedFunctionality = function() {
  };
  r.prototype._create = function() {
    this._clearObjectPointers();
    this._mapDepricatedFunctionality();
    this.bindModules();
    "TABLE" === this.element.tagName && this.modExists("htmlTableImport", !0) && this.modules.htmlTableImport.parseTable();
    this.columnManager = new a(this);
    this.rowManager = new d(this);
    this.footerManager = new u(this);
    this.columnManager.setRowManager(this.rowManager);
    this.rowManager.setColumnManager(this.columnManager);
    this._buildElement();
    this._loadInitialData();
  };
  r.prototype._clearObjectPointers = function() {
    this.options.columns = this.options.columns.slice(0);
    this.options.data = this.options.data.slice(0);
  };
  r.prototype._buildElement = function() {
    var a = this.element, b = this.modules, c = this.options;
    c.tableBuilding.call(this);
    a.classList.add("tabulator");
    for (a.setAttribute("role", "grid"); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
    c.height && (c.height = isNaN(c.height) ? c.height : c.height + "px", a.style.height = c.height);
    this.rowManager.initialize();
    this._detectBrowser();
    this.modExists("layout", !0) && b.layout.initialize(c.layout);
    !1 !== c.headerFilterPlaceholder && b.localize.setHeaderFilterPlaceholder(c.headerFilterPlaceholder);
    for (var d in c.langs) {
      b.localize.installLang(d, c.langs[d]);
    }
    b.localize.setLocale(c.locale);
    if ("string" == typeof c.placeholder) {
      d = document.createElement("div");
      d.classList.add("tabulator-placeholder");
      var f = document.createElement("span");
      f.innerHTML = c.placeholder;
      d.appendChild(f);
      c.placeholder = d;
    }
    a.appendChild(this.columnManager.getElement());
    a.appendChild(this.rowManager.getElement());
    c.footerElement && this.footerManager.activate();
    c.dataTree && this.modExists("dataTree", !0) && b.dataTree.initialize();
    (c.persistentLayout || c.persistentSort || c.persistentFilter) && this.modExists("persistence", !0) && b.persistence.initialize(c.persistenceMode, c.persistenceID);
    c.persistentLayout && this.modExists("persistence", !0) && (c.columns = b.persistence.load("columns", c.columns));
    c.movableRows && this.modExists("moveRow") && b.moveRow.initialize();
    this.modExists("columnCalcs") && b.columnCalcs.initialize();
    this.columnManager.setColumns(c.columns);
    this.modExists("frozenRows") && this.modules.frozenRows.initialize();
    (c.persistentSort || c.initialSort) && this.modExists("sort", !0) && (a = [], c.persistentSort && this.modExists("persistence", !0) ? (a = b.persistence.load("sort"), !1 === a && c.initialSort && (a = c.initialSort)) : c.initialSort && (a = c.initialSort), b.sort.setSort(a));
    (c.persistentFilter || c.initialFilter) && this.modExists("filter", !0) && (a = [], c.persistentFilter && this.modExists("persistence", !0) ? (a = b.persistence.load("filter"), !1 === a && c.initialFilter && (a = c.initialFilter)) : c.initialFilter && (a = c.initialFilter), b.filter.setFilter(a));
    this.modExists("ajax") && b.ajax.initialize();
    c.pagination && this.modExists("page", !0) && b.page.initialize();
    c.groupBy && this.modExists("groupRows", !0) && b.groupRows.initialize();
    this.modExists("keybindings") && b.keybindings.initialize();
    this.modExists("selectRow") && b.selectRow.clearSelectionData(!0);
    c.autoResize && this.modExists("resizeTable") && b.resizeTable.initialize();
    this.modExists("clipboard") && b.clipboard.initialize();
    c.tableBuilt.call(this);
  };
  r.prototype._loadInitialData = function() {
    this.options.pagination && this.modExists("page") ? (this.modules.page.reset(!0), "local" == this.options.pagination ? this.options.data.length ? this.rowManager.setData(this.options.data) : (this.options.ajaxURL || this.options.ajaxURLGenerator) && this.modExists("ajax") ? this.modules.ajax.loadData().then(function() {
    }).catch(function() {
    }) : this.rowManager.setData(this.options.data) : this.options.ajaxURL ? this.modules.page.setPage(1).then(function() {
    }).catch(function() {
    }) : this.rowManager.setData([])) : this.options.data.length ? this.rowManager.setData(this.options.data) : (this.options.ajaxURL || this.options.ajaxURLGenerator) && this.modExists("ajax") ? this.modules.ajax.loadData().then(function() {
    }).catch(function() {
    }) : this.rowManager.setData(this.options.data);
  };
  r.prototype.destroy = function() {
    var a = this.element;
    r.prototype.comms.deregister(this);
    this.rowManager.rows.forEach(function(a) {
      a.wipe();
    });
    this.rowManager.rows = [];
    this.rowManager.activeRows = [];
    this.rowManager.displayRows = [];
    this.options.autoResize && this.modExists("resizeTable") && this.modules.resizeTable.clearBindings();
    for (this.modExists("keybindings") && this.modules.keybindings.clearBindings(); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
    a.classList.remove("tabulator");
  };
  r.prototype._detectBrowser = function() {
    var a = navigator.userAgent;
    -1 < a.indexOf("Trident") ? (this.browser = "ie", this.browserSlow = !0) : -1 < a.indexOf("Edge") ? (this.browser = "edge", this.browserSlow = !0) : (-1 < a.indexOf("Firefox") ? this.browser = "firefox" : this.browser = "other", this.browserSlow = !1);
  };
  r.prototype.setData = function(a, b, c) {
    this.modExists("ajax") && this.modules.ajax.blockActiveRequest();
    return this._setData(a, b, c);
  };
  r.prototype._setData = function(a, b, c, d) {
    if ("string" === typeof a) {
      if (0 == a.indexOf("{") || 0 == a.indexOf("[")) {
        return this.rowManager.setData(JSON.parse(a), d);
      }
      if (this.modExists("ajax", !0)) {
        return b && this.modules.ajax.setParams(b), c && this.modules.ajax.setConfig(c), this.modules.ajax.setUrl(a), "remote" == this.options.pagination && this.modExists("page", !0) ? (this.modules.page.reset(!0), this.modules.page.setPage(1)) : this.modules.ajax.loadData(d);
      }
    } else {
      return a ? this.rowManager.setData(a, d) : this.modExists("ajax") && (this.modules.ajax.getUrl || this.options.ajaxURLGenerator) ? "remote" == this.options.pagination && this.modExists("page", !0) ? (this.modules.page.reset(!0), this.modules.page.setPage(1)) : this.modules.ajax.loadData(d) : this.rowManager.setData([], d);
    }
  };
  r.prototype.clearData = function() {
    this.modExists("ajax") && this.modules.ajax.blockActiveRequest();
    this.rowManager.clearData();
  };
  r.prototype.getData = function(a) {
    return this.rowManager.getData(a);
  };
  r.prototype.getDataCount = function(a) {
    return this.rowManager.getDataCount(a);
  };
  r.prototype.searchRows = function(a, b, c) {
    if (this.modExists("filter", !0)) {
      return this.modules.filter.search("rows", a, b, c);
    }
  };
  r.prototype.searchData = function(a, b, c) {
    if (this.modExists("filter", !0)) {
      return this.modules.filter.search("data", a, b, c);
    }
  };
  r.prototype.getHtml = function(a) {
    return this.rowManager.getHtml(a);
  };
  r.prototype.getAjaxUrl = function() {
    if (this.modExists("ajax", !0)) {
      return this.modules.ajax.getUrl();
    }
  };
  r.prototype.replaceData = function(a, b, c) {
    this.modExists("ajax") && this.modules.ajax.blockActiveRequest();
    return this._setData(a, b, c, !0);
  };
  r.prototype.updateData = function(a) {
    var b = this, c = this, d = 0;
    return new Promise(function(f, l) {
      b.modExists("ajax") && b.modules.ajax.blockActiveRequest();
      "string" === typeof a && (a = JSON.parse(a));
      a ? a.forEach(function(a) {
        var b = c.rowManager.findRow(a[c.options.index]);
        b && (d++, b.updateData(a).then(function() {
          d--;
          d || f();
        }));
      }) : (console.warn("Update Error - No data provided"), l("Update Error - No data provided"));
    });
  };
  r.prototype.addData = function(a, b, c) {
    var d = this;
    return new Promise(function(f, l) {
      d.modExists("ajax") && d.modules.ajax.blockActiveRequest();
      "string" === typeof a && (a = JSON.parse(a));
      a ? d.rowManager.addRows(a, b, c).then(function(a) {
        var b = [];
        a.forEach(function(a) {
          b.push(a.getComponent());
        });
        f(b);
      }) : (console.warn("Update Error - No data provided"), l("Update Error - No data provided"));
    });
  };
  r.prototype.updateOrAddData = function(a) {
    var b = this, c = this, d = [], f = 0;
    return new Promise(function(l, g) {
      b.modExists("ajax") && b.modules.ajax.blockActiveRequest();
      "string" === typeof a && (a = JSON.parse(a));
      a ? a.forEach(function(a) {
        var b = c.rowManager.findRow(a[c.options.index]);
        f++;
        b ? b.updateData(a).then(function() {
          f--;
          d.push(b.getComponent());
          f || l(d);
        }) : c.rowManager.addRows(a).then(function(a) {
          f--;
          d.push(a[0].getComponent());
          f || l(d);
        });
      }) : (console.warn("Update Error - No data provided"), g("Update Error - No data provided"));
    });
  };
  r.prototype.getRow = function(a) {
    var b = this.rowManager.findRow(a);
    if (b) {
      return b.getComponent();
    }
    console.warn("Find Error - No matching row found:", a);
    return !1;
  };
  r.prototype.getRowFromPosition = function(a, b) {
    if (b = this.rowManager.getRowFromPosition(a, b)) {
      return b.getComponent();
    }
    console.warn("Find Error - No matching row found:", a);
    return !1;
  };
  r.prototype.deleteRow = function(a) {
    var b = this;
    return new Promise(function(c, d) {
      var f = b.rowManager.findRow(a);
      f ? f.delete().then(function() {
        c();
      }).catch(function(a) {
        d(a);
      }) : (console.warn("Delete Error - No matching row found:", a), d("Delete Error - No matching row found"));
    });
  };
  r.prototype.addRow = function(a, b, c) {
    var d = this;
    return new Promise(function(f, l) {
      "string" === typeof a && (a = JSON.parse(a));
      d.rowManager.addRows(a, b, c).then(function(a) {
        d.modExists("columnCalcs") && d.modules.columnCalcs.recalc(d.rowManager.activeRows);
        f(a[0].getComponent());
      });
    });
  };
  r.prototype.updateOrAddRow = function(a, b) {
    var c = this;
    return new Promise(function(d, f) {
      var l = c.rowManager.findRow(a);
      "string" === typeof b && (b = JSON.parse(b));
      l ? l.updateData(b).then(function() {
        c.modExists("columnCalcs") && c.modules.columnCalcs.recalc(c.rowManager.activeRows);
        d(l.getComponent());
      }).catch(function(a) {
        f(a);
      }) : l = c.rowManager.addRows(b).then(function(a) {
        c.modExists("columnCalcs") && c.modules.columnCalcs.recalc(c.rowManager.activeRows);
        d(a[0].getComponent());
      }).catch(function(a) {
        f(a);
      });
    });
  };
  r.prototype.updateRow = function(a, b) {
    var c = this;
    return new Promise(function(d, f) {
      var l = c.rowManager.findRow(a);
      "string" === typeof b && (b = JSON.parse(b));
      l ? l.updateData(b).then(function() {
        d(l.getComponent());
      }).catch(function(a) {
        f(a);
      }) : (console.warn("Update Error - No matching row found:", a), f("Update Error - No matching row found"));
    });
  };
  r.prototype.scrollToRow = function(a, b, c) {
    var d = this;
    return new Promise(function(f, l) {
      var g = d.rowManager.findRow(a);
      g ? d.rowManager.scrollToRow(g, b, c).then(function() {
        f();
      }).catch(function(a) {
        l(a);
      }) : (console.warn("Scroll Error - No matching row found:", a), l("Scroll Error - No matching row found"));
    });
  };
  r.prototype.getRows = function(a) {
    return this.rowManager.getComponents(a);
  };
  r.prototype.getRowPosition = function(a, b) {
    var c = this.rowManager.findRow(a);
    if (c) {
      return this.rowManager.getRowPosition(c, b);
    }
    console.warn("Position Error - No matching row found:", a);
    return !1;
  };
  r.prototype.copyToClipboard = function(a, b, c, d) {
    this.modExists("clipboard", !0) && this.modules.clipboard.copy(a, b, c, d);
  };
  r.prototype.setColumns = function(a) {
    this.columnManager.setColumns(a);
  };
  r.prototype.getColumns = function(a) {
    return this.columnManager.getComponents(a);
  };
  r.prototype.getColumn = function(a) {
    var b = this.columnManager.findColumn(a);
    if (b) {
      return b.getComponent();
    }
    console.warn("Find Error - No matching column found:", a);
    return !1;
  };
  r.prototype.getColumnDefinitions = function() {
    return this.columnManager.getDefinitionTree();
  };
  r.prototype.getColumnLayout = function() {
    if (this.modExists("persistence", !0)) {
      return this.modules.persistence.parseColumns(this.columnManager.getColumns());
    }
  };
  r.prototype.setColumnLayout = function(a) {
    return this.modExists("persistence", !0) ? (this.columnManager.setColumns(this.modules.persistence.mergeDefinition(this.options.columns, a)), !0) : !1;
  };
  r.prototype.showColumn = function(a) {
    var b = this.columnManager.findColumn(a);
    if (b) {
      b.show(), this.options.responsiveLayout && this.modExists("responsiveLayout", !0) && this.modules.responsiveLayout.update();
    } else {
      return console.warn("Column Show Error - No matching column found:", a), !1;
    }
  };
  r.prototype.hideColumn = function(a) {
    var b = this.columnManager.findColumn(a);
    if (b) {
      b.hide(), this.options.responsiveLayout && this.modExists("responsiveLayout", !0) && this.modules.responsiveLayout.update();
    } else {
      return console.warn("Column Hide Error - No matching column found:", a), !1;
    }
  };
  r.prototype.toggleColumn = function(a) {
    var b = this.columnManager.findColumn(a);
    if (b) {
      b.visible ? b.hide() : b.show();
    } else {
      return console.warn("Column Visibility Toggle Error - No matching column found:", a), !1;
    }
  };
  r.prototype.addColumn = function(a, b, c) {
    c = this.columnManager.findColumn(c);
    this.columnManager.addColumn(a, b, c);
  };
  r.prototype.deleteColumn = function(a) {
    var b = this.columnManager.findColumn(a);
    if (b) {
      b.delete();
    } else {
      return console.warn("Column Delete Error - No matching column found:", a), !1;
    }
  };
  r.prototype.scrollToColumn = function(a, b, c) {
    var d = this;
    return new Promise(function(f, l) {
      var g = d.columnManager.findColumn(a);
      g ? d.columnManager.scrollToColumn(g, b, c).then(function() {
        f();
      }).catch(function(a) {
        l(a);
      }) : (console.warn("Scroll Error - No matching column found:", a), l("Scroll Error - No matching column found"));
    });
  };
  r.prototype.setLocale = function(a) {
    this.modules.localize.setLocale(a);
  };
  r.prototype.getLocale = function() {
    return this.modules.localize.getLocale();
  };
  r.prototype.getLang = function(a) {
    return this.modules.localize.getLang(a);
  };
  r.prototype.redraw = function(a) {
    this.columnManager.redraw(a);
    this.rowManager.redraw(a);
  };
  r.prototype.setHeight = function(a) {
    this.options.height = isNaN(a) ? a : a + "px";
    this.element.style.height = this.options.height;
    this.rowManager.redraw();
  };
  r.prototype.setSort = function(a, b) {
    this.modExists("sort", !0) && (this.modules.sort.setSort(a, b), this.rowManager.sorterRefresh());
  };
  r.prototype.getSorters = function() {
    if (this.modExists("sort", !0)) {
      return this.modules.sort.getSort();
    }
  };
  r.prototype.clearSort = function() {
    this.modExists("sort", !0) && (this.modules.sort.clear(), this.rowManager.sorterRefresh());
  };
  r.prototype.setFilter = function(a, b, c) {
    this.modExists("filter", !0) && (this.modules.filter.setFilter(a, b, c), this.rowManager.filterRefresh());
  };
  r.prototype.addFilter = function(a, b, c) {
    this.modExists("filter", !0) && (this.modules.filter.addFilter(a, b, c), this.rowManager.filterRefresh());
  };
  r.prototype.getFilters = function(a) {
    if (this.modExists("filter", !0)) {
      return this.modules.filter.getFilters(a);
    }
  };
  r.prototype.setHeaderFilterFocus = function(a) {
    if (this.modExists("filter", !0)) {
      var b = this.columnManager.findColumn(a);
      if (b) {
        this.modules.filter.setHeaderFilterFocus(b);
      } else {
        return console.warn("Column Filter Focus Error - No matching column found:", a), !1;
      }
    }
  };
  r.prototype.setHeaderFilterValue = function(a, b) {
    if (this.modExists("filter", !0)) {
      var c = this.columnManager.findColumn(a);
      if (c) {
        this.modules.filter.setHeaderFilterValue(c, b);
      } else {
        return console.warn("Column Filter Error - No matching column found:", a), !1;
      }
    }
  };
  r.prototype.getHeaderFilters = function() {
    if (this.modExists("filter", !0)) {
      return this.modules.filter.getHeaderFilters();
    }
  };
  r.prototype.removeFilter = function(a, b, c) {
    this.modExists("filter", !0) && (this.modules.filter.removeFilter(a, b, c), this.rowManager.filterRefresh());
  };
  r.prototype.clearFilter = function(a) {
    this.modExists("filter", !0) && (this.modules.filter.clearFilter(a), this.rowManager.filterRefresh());
  };
  r.prototype.clearHeaderFilter = function() {
    this.modExists("filter", !0) && (this.modules.filter.clearHeaderFilter(), this.rowManager.filterRefresh());
  };
  r.prototype.selectRow = function(a) {
    this.modExists("selectRow", !0) && this.modules.selectRow.selectRows(a);
  };
  r.prototype.deselectRow = function(a) {
    this.modExists("selectRow", !0) && this.modules.selectRow.deselectRows(a);
  };
  r.prototype.toggleSelectRow = function(a) {
    this.modExists("selectRow", !0) && this.modules.selectRow.toggleRow(a);
  };
  r.prototype.getSelectedRows = function() {
    if (this.modExists("selectRow", !0)) {
      return this.modules.selectRow.getSelectedRows();
    }
  };
  r.prototype.getSelectedData = function() {
    if (this.modExists("selectRow", !0)) {
      return this.modules.selectRow.getSelectedData();
    }
  };
  r.prototype.setMaxPage = function(a) {
    if (this.options.pagination && this.modExists("page")) {
      this.modules.page.setMaxPage(a);
    } else {
      return !1;
    }
  };
  r.prototype.setPage = function(a) {
    return this.options.pagination && this.modExists("page") ? this.modules.page.setPage(a) : new Promise(function(a, b) {
      b();
    });
  };
  r.prototype.setPageSize = function(a) {
    if (this.options.pagination && this.modExists("page")) {
      this.modules.page.setPageSize(a), this.modules.page.setPage(1).then(function() {
      }).catch(function() {
      });
    } else {
      return !1;
    }
  };
  r.prototype.getPageSize = function() {
    if (this.options.pagination && this.modExists("page", !0)) {
      return this.modules.page.getPageSize();
    }
  };
  r.prototype.previousPage = function() {
    if (this.options.pagination && this.modExists("page")) {
      this.modules.page.previousPage();
    } else {
      return !1;
    }
  };
  r.prototype.nextPage = function() {
    if (this.options.pagination && this.modExists("page")) {
      this.modules.page.nextPage();
    } else {
      return !1;
    }
  };
  r.prototype.getPage = function() {
    return this.options.pagination && this.modExists("page") ? this.modules.page.getPage() : !1;
  };
  r.prototype.getPageMax = function() {
    return this.options.pagination && this.modExists("page") ? this.modules.page.getPageMax() : !1;
  };
  r.prototype.setGroupBy = function(a) {
    if (this.modExists("groupRows", !0)) {
      this.options.groupBy = a, this.modules.groupRows.initialize(), this.rowManager.refreshActiveData("display");
    } else {
      return !1;
    }
  };
  r.prototype.setGroupStartOpen = function(a) {
    if (this.modExists("groupRows", !0)) {
      this.options.groupStartOpen = a, this.modules.groupRows.initialize(), this.options.groupBy ? this.rowManager.refreshActiveData("group") : console.warn("Grouping Update - cant refresh view, no groups have been set");
    } else {
      return !1;
    }
  };
  r.prototype.setGroupHeader = function(a) {
    if (this.modExists("groupRows", !0)) {
      this.options.groupHeader = a, this.modules.groupRows.initialize(), this.options.groupBy ? this.rowManager.refreshActiveData("group") : console.warn("Grouping Update - cant refresh view, no groups have been set");
    } else {
      return !1;
    }
  };
  r.prototype.getGroups = function(a) {
    return this.modExists("groupRows", !0) ? this.modules.groupRows.getGroups(!0) : !1;
  };
  r.prototype.getGroupedData = function() {
    if (this.modExists("groupRows", !0)) {
      return this.options.groupBy ? this.modules.groupRows.getGroupedData() : this.getData();
    }
  };
  r.prototype.getCalcResults = function() {
    return this.modExists("columnCalcs", !0) ? this.modules.columnCalcs.getResults() : !1;
  };
  r.prototype.navigatePrev = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().prev()) : !1;
  };
  r.prototype.navigateNext = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().next()) : !1;
  };
  r.prototype.navigateLeft = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().left()) : !1;
  };
  r.prototype.navigateRight = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().right()) : !1;
  };
  r.prototype.navigateUp = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().up()) : !1;
  };
  r.prototype.navigateDown = function() {
    var a;
    return this.modExists("edit", !0) && (a = this.modules.edit.currentCell) ? (e.preventDefault(), a.nav().dpwn()) : !1;
  };
  r.prototype.undo = function() {
    return this.options.history && this.modExists("history", !0) ? this.modules.history.undo() : !1;
  };
  r.prototype.redo = function() {
    return this.options.history && this.modExists("history", !0) ? this.modules.history.redo() : !1;
  };
  r.prototype.getHistoryUndoSize = function() {
    return this.options.history && this.modExists("history", !0) ? this.modules.history.getHistoryUndoSize() : !1;
  };
  r.prototype.getHistoryRedoSize = function() {
    return this.options.history && this.modExists("history", !0) ? this.modules.history.getHistoryRedoSize() : !1;
  };
  r.prototype.download = function(a, b, c) {
    this.modExists("download", !0) && this.modules.download.download(a, b, c);
  };
  r.prototype.tableComms = function(a, b, c, d) {
    this.modules.comms.receive(a, b, c, d);
  };
  r.prototype.moduleBindings = {};
  r.prototype.extendModule = function(a, b, c) {
    if (r.prototype.moduleBindings[a]) {
      if (a = r.prototype.moduleBindings[a].prototype[b]) {
        if ("object" == ("undefined" === typeof c ? "undefined" : _typeof(c))) {
          for (var d in c) {
            a[d] = c[d];
          }
        } else {
          console.warn("Module Error - Invalid value type, it must be an object");
        }
      } else {
        console.warn("Module Error - property does not exist:", b);
      }
    } else {
      console.warn("Module Error - module does not exist:", a);
    }
  };
  r.prototype.registerModule = function(a, b) {
    r.prototype.moduleBindings[a] = b;
  };
  r.prototype.bindModules = function() {
    this.modules = {};
    for (var a in r.prototype.moduleBindings) {
      this.modules[a] = new r.prototype.moduleBindings[a](this);
    }
  };
  r.prototype.modExists = function(a, b) {
    if (this.modules[a]) {
      return !0;
    }
    b && console.error("Tabulator Module Not Installed: " + a);
    return !1;
  };
  r.prototype.helpers = {elVisible:function(a) {
    return !(0 >= a.offsetWidth && 0 >= a.offsetHeight);
  }, elOffset:function(a) {
    a = a.getBoundingClientRect();
    return {top:a.top + window.pageYOffset - document.documentElement.clientTop, left:a.left + window.pageXOffset - document.documentElement.clientLeft};
  }, deepClone:function(a) {
    var b = Array.isArray(a) ? [] : {}, c;
    for (c in a) {
      null != a[c] && "object" === _typeof(a[c]) ? b[c] = a[c] instanceof Date ? new Date(a[c]) : this.deepClone(a[c]) : b[c] = a[c];
    }
    return b;
  }};
  r.prototype.comms = {tables:[], register:function(a) {
    r.prototype.comms.tables.push(a);
  }, deregister:function(a) {
    a = r.prototype.comms.tables.indexOf(a);
    -1 < a && r.prototype.comms.tables.splice(a, 1);
  }, lookupTable:function(a) {
    var b = [], c;
    if ("string" === typeof a) {
      if (a = document.querySelectorAll(a), a.length) {
        for (var d = 0; d < a.length; d++) {
          (c = r.prototype.comms.matchElement(a[d])) && b.push(c);
        }
      }
    } else {
      a instanceof HTMLElement || a instanceof r ? (c = r.prototype.comms.matchElement(a)) && b.push(c) : Array.isArray(a) ? a.forEach(function(a) {
        b = b.concat(r.prototype.comms.lookupTable(a));
      }) : console.warn("Table Connection Error - Invalid Selector", a);
    }
    return b;
  }, matchElement:function(a) {
    return r.prototype.comms.tables.find(function(b) {
      return a instanceof r ? b === a : b.element === a;
    });
  }};
  var n = function(a) {
    this.table = a;
    this.mode = null;
  };
  n.prototype.initialize = function(a) {
    this.modes[a] ? this.mode = a : (console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : " + a), this.mode = "fitData");
    this.table.element.setAttribute("tabulator-layout", this.mode);
  };
  n.prototype.getMode = function() {
    return this.mode;
  };
  n.prototype.layout = function() {
    this.modes[this.mode].call(this, this.table.columnManager.columnsByIndex);
  };
  n.prototype.modes = {fitData:function(a) {
    a.forEach(function(a) {
      a.reinitializeWidth();
    });
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.update();
  }, fitDataFill:function(a) {
    a.forEach(function(a) {
      a.reinitializeWidth();
    });
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.update();
  }, fitColumns:function(a) {
    function b(a) {
      return "string" == typeof a ? -1 < a.indexOf("%") ? d / 100 * parseInt(a) : parseInt(a) : a;
    }
    function c(a, d, f, l) {
      function g(a) {
        return b(a.width) - f * (a.column.definition.widthShrink || 0);
      }
      var p = [], h = 0, t = 0, m = 0, n = t = 0, x = [];
      a.forEach(function(a, b) {
        b = l ? g(a) : f * (a.column.definition.widthGrow || 1);
        a.column.minWidth >= b ? p.push(a) : (x.push(a), n += l ? a.column.definition.widthShrink || 1 : a.column.definition.widthGrow || 1);
      });
      p.length ? (p.forEach(function(a) {
        h += l ? a.width - a.column.minWidth : a.column.minWidth;
        a.width = a.column.minWidth;
      }), t = d - h, m = n ? Math.floor(t / n) : t, t = t - m * n + c(x, t, m, l)) : (t = n ? d - Math.floor(d / n) * n : d, x.forEach(function(a) {
        a.width = l ? g(a) : f * (a.column.definition.widthGrow || 1);
      }));
      return t;
    }
    var d = this.table.element.clientWidth, f = 0, l = 0, g = 0, h = 0, m = [], n = [], r = 0, u = h = 0;
    this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", !0) && this.table.modules.responsiveLayout.update();
    this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight && (d -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth);
    a.forEach(function(a) {
      if (a.visible) {
        var c = a.definition.width;
        var d = parseInt(a.minWidth);
        c ? (c = b(c), f += c > d ? c : d, a.definition.widthShrink && (n.push({column:a, width:c > d ? c : d}), r += a.definition.widthShrink)) : (m.push({column:a, width:0}), g += a.definition.widthGrow || 1);
      }
    });
    l = d - f;
    h = Math.floor(l / g);
    u = c(m, l, h, !1);
    m.length && 0 < u && (m[m.length - 1].width += +u);
    m.forEach(function(a) {
      l -= a.width;
    });
    h = Math.abs(u) + l;
    0 < h && r && (u = c(n, h, Math.floor(h / r), !0));
    n.length && (n[n.length - 1].width -= u);
    m.forEach(function(a) {
      a.column.setWidth(a.width);
    });
    n.forEach(function(a) {
      a.column.setWidth(a.width);
    });
  }};
  r.prototype.registerModule("layout", n);
  n = function(a) {
    this.table = a;
    this.locale = "default";
    this.lang = !1;
    this.bindings = {};
  };
  n.prototype.setHeaderFilterPlaceholder = function(a) {
    this.langs.default.headerFilters.default = a;
  };
  n.prototype.setHeaderFilterColumnPlaceholder = function(a, b) {
    this.langs.default.headerFilters.columns[a] = b;
    this.lang && !this.lang.headerFilters.columns[a] && (this.lang.headerFilters.columns[a] = b);
  };
  n.prototype.installLang = function(a, b) {
    this.langs[a] ? this._setLangProp(this.langs[a], b) : this.langs[a] = b;
  };
  n.prototype._setLangProp = function(a, b) {
    for (var c in b) {
      a[c] && "object" == _typeof(a[c]) ? this._setLangProp(a[c], b[c]) : a[c] = b[c];
    }
  };
  n.prototype.setLocale = function(a) {
    function b(a, c) {
      for (var d in a) {
        "object" == _typeof(a[d]) ? (c[d] || (c[d] = {}), b(a[d], c[d])) : c[d] = a[d];
      }
    }
    a = a || "default";
    !0 === a && navigator.language && (a = navigator.language.toLowerCase());
    if (a && !this.langs[a]) {
      var c = a.split("-")[0];
      this.langs[c] ? (console.warn("Localization Error - Exact matching locale not found, using closest match: ", a, c), a = c) : (console.warn("Localization Error - Matching locale not found, using default: ", a), a = "default");
    }
    this.locale = a;
    this.lang = r.prototype.helpers.deepClone(this.langs.default || {});
    "default" != a && b(this.langs[a], this.lang);
    this.table.options.localized.call(this.table, this.locale, this.lang);
    this._executeBindings();
  };
  n.prototype.getLocale = function(a) {
    return self.locale;
  };
  n.prototype.getLang = function(a) {
    return a ? this.langs[a] : this.lang;
  };
  n.prototype.getText = function(a, b) {
    a = (b ? a + "|" + b : a).split("|");
    return this._getLangElement(a, this.locale) || "";
  };
  n.prototype._getLangElement = function(a, b) {
    var c = this.lang;
    a.forEach(function(a) {
      c && (a = c[a], c = "undefined" != typeof a ? a : !1);
    });
    return c;
  };
  n.prototype.bind = function(a, b) {
    this.bindings[a] || (this.bindings[a] = []);
    this.bindings[a].push(b);
    b(this.getText(a), this.lang);
  };
  n.prototype._executeBindings = function() {
    var a = this, b = function(b) {
      a.bindings[b].forEach(function(c) {
        c(a.getText(b), a.lang);
      });
    }, c;
    for (c in a.bindings) {
      b(c);
    }
  };
  n.prototype.langs = {"default":{groups:{item:"item", items:"items"}, columns:{}, ajax:{loading:"Loading", error:"Error"}, pagination:{first:"First", first_title:"First Page", last:"Last", last_title:"Last Page", prev:"Prev", prev_title:"Prev Page", next:"Next", next_title:"Next Page"}, headerFilters:{"default":"filter column...", columns:{}}}};
  r.prototype.registerModule("localize", n);
  n = function(a) {
    this.table = a;
  };
  n.prototype.getConnections = function(a) {
    var b = this, c = [];
    r.prototype.comms.lookupTable(a).forEach(function(a) {
      b.table !== a && c.push(a);
    });
    return c;
  };
  n.prototype.send = function(a, b, c, d) {
    var f = this, l = this.getConnections(a);
    l.forEach(function(a) {
      a.tableComms(f.table.element, b, c, d);
    });
    !l.length && a && console.warn("Table Connection Error - No tables matching selector found", a);
  };
  n.prototype.receive = function(a, b, c, d) {
    if (this.table.modExists(b)) {
      return this.table.modules[b].commsReceived(a, c, d);
    }
    console.warn("Inter-table Comms Error - no such module:", b);
  };
  r.prototype.registerModule("comms", n);
  n = function(a) {
    this.table = a;
    this.allowedTypes = ["", "data", "download", "clipboard"];
  };
  n.prototype.initializeColumn = function(a) {
    var b = this, c = !1, d = {};
    this.allowedTypes.forEach(function(f) {
      f = "accessor" + (f.charAt(0).toUpperCase() + f.slice(1));
      var l;
      a.definition[f] && (l = b.lookupAccessor(a.definition[f])) && (c = !0, d[f] = {accessor:l, params:a.definition[f + "Params"] || {}});
    });
    c && (a.modules.accessor = d);
  };
  n.prototype.lookupAccessor = function(a) {
    var b = !1;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        this.accessors[a] ? b = this.accessors[a] : console.warn("Accessor Error - No such accessor found, ignoring: ", a);
        break;
      case "function":
        b = a;
    }
    return b;
  };
  n.prototype.transformRow = function(a, b) {
    var c = "accessor" + (b.charAt(0).toUpperCase() + b.slice(1)), d = r.prototype.helpers.deepClone(a || {});
    this.table.columnManager.traverse(function(a) {
      var f;
      if (a.modules.accessor && (f = a.modules.accessor[c] || a.modules.accessor.accessor || !1)) {
        var l = a.getFieldValue(d);
        if ("undefined" != l) {
          var g = a.getComponent();
          var p = "function" === typeof f.params ? f.params(l, d, b, g) : f.params;
          a.setFieldValue(d, f.accessor(l, d, b, p, g));
        }
      }
    });
    return d;
  };
  n.prototype.accessors = {};
  r.prototype.registerModule("accessor", n);
  n = function(a) {
    this.table = a;
    this.config = !1;
    this.url = "";
    this.params = this.urlGenerator = !1;
    this.loaderElement = this.createLoaderElement();
    this.msgElement = this.createMsgElement();
    this.loading = this.progressiveLoad = this.loaderPromise = this.errorElement = this.loadingElement = !1;
    this.requestOrder = 0;
  };
  n.prototype.initialize = function() {
    this.loaderElement.appendChild(this.msgElement);
    if (this.table.options.ajaxLoaderLoading) {
      if ("string" == typeof this.table.options.ajaxLoaderLoading) {
        var a = document.createElement("template");
        a.innerHTML = this.table.options.ajaxLoaderLoading.trim();
        this.loadingElement = a.content.firstChild;
      } else {
        this.loadingElement = this.table.options.ajaxLoaderLoading;
      }
    }
    this.loaderPromise = this.table.options.ajaxRequestFunc || this.defaultLoaderPromise;
    this.urlGenerator = this.table.options.ajaxURLGenerator || this.defaultURLGenerator;
    this.table.options.ajaxLoaderError && (this.errorElement = this.table.options.ajaxLoaderError);
    this.table.options.ajaxParams && this.setParams(this.table.options.ajaxParams);
    this.table.options.ajaxConfig && this.setConfig(this.table.options.ajaxConfig);
    this.table.options.ajaxURL && this.setUrl(this.table.options.ajaxURL);
    this.table.options.ajaxProgressiveLoad && (this.table.options.pagination ? (this.progressiveLoad = !1, console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time")) : this.table.modExists("page") ? (this.progressiveLoad = this.table.options.ajaxProgressiveLoad, this.table.modules.page.initializeProgressive(this.progressiveLoad)) : console.error("Pagination plugin is required for progressive ajax loading"));
  };
  n.prototype.createLoaderElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-loader");
    return a;
  };
  n.prototype.createMsgElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-loader-msg");
    a.setAttribute("role", "alert");
    return a;
  };
  n.prototype.setParams = function(a, b) {
    if (b) {
      this.params = this.params || {};
      for (var c in a) {
        this.params[c] = a[c];
      }
    } else {
      this.params = a;
    }
  };
  n.prototype.getParams = function() {
    return this.params || {};
  };
  n.prototype.setConfig = function(a) {
    this._loadDefaultConfig();
    if ("string" == typeof a) {
      this.config.method = a;
    } else {
      for (var b in a) {
        this.config[b] = a[b];
      }
    }
  };
  n.prototype._loadDefaultConfig = function(a) {
    if (!this.config || a) {
      this.config = {};
      for (var b in this.defaultConfig) {
        this.config[b] = this.defaultConfig[b];
      }
    }
  };
  n.prototype.setUrl = function(a) {
    this.url = a;
  };
  n.prototype.getUrl = function() {
    return this.url;
  };
  n.prototype.loadData = function(a) {
    return this.progressiveLoad ? this._loadDataProgressive() : this._loadDataStandard(a);
  };
  n.prototype.nextPage = function(a) {
    if (!this.loading) {
      var b = this.table.options.ajaxProgressiveLoadScrollMargin || 2 * this.table.rowManager.getElement().clientHeight;
      a < b && this.table.modules.page.nextPage().then(function() {
      }).catch(function() {
      });
    }
  };
  n.prototype.blockActiveRequest = function() {
    this.requestOrder++;
  };
  n.prototype._loadDataProgressive = function() {
    this.table.rowManager.setData([]);
    return this.table.modules.page.setPage(1);
  };
  n.prototype._loadDataStandard = function(a) {
    var b = this;
    return new Promise(function(c, d) {
      b.sendRequest(a).then(function(f) {
        b.table.rowManager.setData(f, a).then(function() {
          c();
        }).catch(function(a) {
          d(a);
        });
      }).catch(function(a) {
        d(a);
      });
    });
  };
  n.prototype.generateParamsList = function(a, b) {
    var c = this, d = [];
    b = b || "";
    if (Array.isArray(a)) {
      a.forEach(function(a, f) {
        d = d.concat(c.generateParamsList(a, b ? b + "[" + f + "]" : f));
      });
    } else {
      if ("object" === ("undefined" === typeof a ? "undefined" : _typeof(a))) {
        for (var f in a) {
          d = d.concat(c.generateParamsList(a[f], b ? b + "[" + f + "]" : f));
        }
      } else {
        d.push({key:b, value:a});
      }
    }
    return d;
  };
  n.prototype.serializeParams = function(a) {
    var b = [];
    this.generateParamsList(a).forEach(function(a) {
      b.push(encodeURIComponent(a.key) + "=" + encodeURIComponent(a.value));
    });
    return b.join("&");
  };
  n.prototype.sendRequest = function(a) {
    var b = this, c = this, d = c.url;
    c.requestOrder++;
    var f = c.requestOrder;
    c._loadDefaultConfig();
    return new Promise(function(l, g) {
      !1 !== c.table.options.ajaxRequesting.call(b.table, c.url, c.params) ? (c.loading = !0, a || c.showLoader(), b.loaderPromise(d, c.config, c.params).then(function(a) {
        f === c.requestOrder ? (c.table.options.ajaxResponse && (a = c.table.options.ajaxResponse.call(c.table, c.url, c.params, a)), l(a)) : console.warn("Ajax Response Blocked - An active ajax request was blocked by an attempt to change table data while the request was being made");
        c.hideLoader();
        c.loading = !1;
      }).catch(function(a) {
        console.error("Ajax Load Error: ", a);
        c.table.options.ajaxError.call(c.table, a);
        c.showError();
        setTimeout(function() {
          c.hideLoader();
        }, 3000);
        c.loading = !1;
        g();
      })) : g();
    });
  };
  n.prototype.showLoader = function() {
    if ("function" === typeof this.table.options.ajaxLoader ? this.table.options.ajaxLoader() : this.table.options.ajaxLoader) {
      for (this.hideLoader(); this.msgElement.firstChild;) {
        this.msgElement.removeChild(this.msgElement.firstChild);
      }
      this.msgElement.classList.remove("tabulator-error");
      this.msgElement.classList.add("tabulator-loading");
      this.loadingElement ? this.msgElement.appendChild(this.loadingElement) : this.msgElement.innerHTML = this.table.modules.localize.getText("ajax|loading");
      this.table.element.appendChild(this.loaderElement);
    }
  };
  n.prototype.showError = function() {
    for (this.hideLoader(); this.msgElement.firstChild;) {
      this.msgElement.removeChild(this.msgElement.firstChild);
    }
    this.msgElement.classList.remove("tabulator-loading");
    this.msgElement.classList.add("tabulator-error");
    this.errorElement ? this.msgElement.appendChild(this.errorElement) : this.msgElement.innerHTML = this.table.modules.localize.getText("ajax|error");
    this.table.element.appendChild(this.loaderElement);
  };
  n.prototype.hideLoader = function() {
    this.loaderElement.parentNode && this.loaderElement.parentNode.removeChild(this.loaderElement);
  };
  n.prototype.defaultConfig = {method:"GET"};
  n.prototype.defaultURLGenerator = function(a, b, c) {
    a && c && Object.keys(c).length && (!b.method || "get" == b.method.toLowerCase()) && (b.method = "get", a += "?" + this.serializeParams(c));
    return a;
  };
  n.prototype.defaultLoaderPromise = function(a, b, c) {
    var d = this, f;
    return new Promise(function(l, g) {
      a = d.urlGenerator(a, b, c);
      if ("get" != b.method) {
        if (f = "object" === _typeof(d.table.options.ajaxContentType) ? d.table.options.ajaxContentType : d.contentTypeFormatters[d.table.options.ajaxContentType]) {
          for (var p in f.headers) {
            b.headers || (b.headers = {}), "undefined" === typeof b.headers[p] && (b.headers[p] = f.headers[p]);
          }
          b.body = f.body.call(d, a, b, c);
        } else {
          console.warn("Ajax Error - Invalid ajaxContentType value:", d.table.options.ajaxContentType);
        }
      }
      a ? ("undefined" === typeof b.credentials && (b.credentials = "include"), "undefined" === typeof b.headers && (b.headers = {}), "undefined" === typeof b.headers.Accept && (b.headers.Accept = "application/json"), "undefined" === typeof b.headers["X-Requested-With"] && (b.headers["X-Requested-With"] = "XMLHttpRequest"), fetch(a, b).then(function(a) {
        a.ok ? a.json().then(function(a) {
          l(a);
        }).catch(function(a) {
          g(a);
          console.warn("Ajax Load Error - Invalid JSON returned", a);
        }) : (console.error("Ajax Load Error - Connection Error: " + a.status, a.statusText), g(a));
      }).catch(function(a) {
        console.error("Ajax Load Error - Connection Error: ", a);
        g(a);
      })) : (console.warn("Ajax Load Error - No URL Set"), l([]));
    });
  };
  n.prototype.contentTypeFormatters = {json:{headers:{"Content-Type":"application/json"}, body:function(a, b, c) {
    return JSON.stringify(c);
  }}, form:{headers:{}, body:function(a, b, c) {
    a = this.generateParamsList(c);
    var d = new FormData;
    a.forEach(function(a) {
      d.append(a.key, a.value);
    });
    return d;
  }}};
  r.prototype.registerModule("ajax", n);
  n = function(a) {
    this.table = a;
    this.topCalcs = [];
    this.botCalcs = [];
    this.genColumn = !1;
    this.topElement = this.createElement();
    this.botElement = this.createElement();
    this.botInitialized = this.topInitialized = this.botRow = this.topRow = !1;
    this.initialize();
  };
  n.prototype.createElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-calcs-holder");
    return a;
  };
  n.prototype.initialize = function() {
    this.genColumn = new c({field:"value"}, this);
  };
  n.prototype.registerColumnField = function() {
  };
  n.prototype.initializeColumn = function(a) {
    var b = a.definition, c = {topCalcParams:b.topCalcParams || {}, botCalcParams:b.bottomCalcParams || {}};
    if (b.topCalc) {
      switch(_typeof(b.topCalc)) {
        case "string":
          this.calculations[b.topCalc] ? c.topCalc = this.calculations[b.topCalc] : console.warn("Column Calc Error - No such calculation found, ignoring: ", b.topCalc);
          break;
        case "function":
          c.topCalc = b.topCalc;
      }
      c.topCalc && (a.modules.columnCalcs = c, this.topCalcs.push(a), "group" != this.table.options.columnCalcs && this.initializeTopRow());
    }
    if (b.bottomCalc) {
      switch(_typeof(b.bottomCalc)) {
        case "string":
          this.calculations[b.bottomCalc] ? c.botCalc = this.calculations[b.bottomCalc] : console.warn("Column Calc Error - No such calculation found, ignoring: ", b.bottomCalc);
          break;
        case "function":
          c.botCalc = b.bottomCalc;
      }
      c.botCalc && (a.modules.columnCalcs = c, this.botCalcs.push(a), "group" != this.table.options.columnCalcs && this.initializeBottomRow());
    }
  };
  n.prototype.removeCalcs = function() {
    var a = !1;
    this.topInitialized && (this.topInitialized = !1, this.topElement.parentNode.removeChild(this.topElement), a = !0);
    this.botInitialized && (this.botInitialized = !1, this.table.footerManager.remove(this.botElement), a = !0);
    a && this.table.rowManager.adjustTableSize();
  };
  n.prototype.initializeTopRow = function() {
    this.topInitialized || (this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling), this.topInitialized = !0);
  };
  n.prototype.initializeBottomRow = function() {
    this.botInitialized || (this.table.footerManager.prepend(this.botElement), this.botInitialized = !0);
  };
  n.prototype.scrollHorizontal = function(a) {
    this.table.columnManager.getElement();
    this.botInitialized && (this.botRow.getElement().style.marginLeft = -a + "px");
  };
  n.prototype.recalc = function(a) {
    var b;
    if (this.topInitialized || this.botInitialized) {
      this.rowsToData(a);
      if (this.topInitialized) {
        for (this.topRow = b = this.generateRow("top", this.rowsToData(a)); this.topElement.firstChild;) {
          this.topElement.removeChild(this.topElement.firstChild);
        }
        this.topElement.appendChild(b.getElement());
        b.initialize(!0);
      }
      if (this.botInitialized) {
        for (this.botRow = b = this.generateRow("bottom", this.rowsToData(a)); this.botElement.firstChild;) {
          this.botElement.removeChild(this.botElement.firstChild);
        }
        this.botElement.appendChild(b.getElement());
        b.initialize(!0);
      }
      this.table.rowManager.adjustTableSize();
      this.table.modExists("frozenColumns") && this.table.modules.frozenColumns.layout();
    }
  };
  n.prototype.recalcRowGroup = function(a) {
    this.recalcGroup(this.table.modules.groupRows.getRowGroup(a));
  };
  n.prototype.recalcGroup = function(a) {
    if (a && a.calcs) {
      if (a.calcs.bottom) {
        var b = this.rowsToData(a.rows);
        b = this.generateRowData("bottom", b);
        a.calcs.bottom.updateData(b);
        a.calcs.bottom.reinitialize();
      }
      a.calcs.top && (b = this.rowsToData(a.rows), b = this.generateRowData("top", b), a.calcs.top.updateData(b), a.calcs.top.reinitialize());
    }
  };
  n.prototype.generateTopRow = function(a) {
    return this.generateRow("top", this.rowsToData(a));
  };
  n.prototype.generateBottomRow = function(a) {
    return this.generateRow("bottom", this.rowsToData(a));
  };
  n.prototype.rowsToData = function(a) {
    var b = [];
    a.forEach(function(a) {
      b.push(a.getData());
    });
    return b;
  };
  n.prototype.generateRow = function(a, b) {
    var c = this;
    b = this.generateRowData(a, b);
    c.table.modExists("mutator") && c.table.modules.mutator.disable();
    var d = new g(b, this);
    c.table.modExists("mutator") && c.table.modules.mutator.enable();
    d.getElement().classList.add("tabulator-calcs", "tabulator-calcs-" + a);
    d.type = "calc";
    d.generateCells = function() {
      var b = [];
      c.table.columnManager.columnsByIndex.forEach(function(f) {
        if (f.visible) {
          c.genColumn.setField(f.getField());
          c.genColumn.hozAlign = f.hozAlign;
          f.definition[a + "CalcFormatter"] && c.table.modExists("format") ? c.genColumn.modules.format = {formatter:c.table.modules.format.getFormatter(f.definition[a + "CalcFormatter"]), params:f.definition[a + "CalcFormatterParams"]} : c.genColumn.modules.format = {formatter:c.table.modules.format.getFormatter("plaintext"), params:{}};
          c.genColumn.definition.cssClass = f.definition.cssClass;
          var l = new m(c.genColumn, d);
          l.column = f;
          l.setWidth(f.width);
          f.cells.push(l);
          b.push(l);
        }
      });
      this.cells = b;
    };
    return d;
  };
  n.prototype.generateRowData = function(a, b) {
    var c = {}, d = "top" == a ? "topCalc" : "botCalc", f, l;
    ("top" == a ? this.topCalcs : this.botCalcs).forEach(function(a) {
      var g = [];
      a.modules.columnCalcs && a.modules.columnCalcs[d] && (b.forEach(function(b) {
        g.push(a.getFieldValue(b));
      }), l = d + "Params", f = "function" === typeof a.modules.columnCalcs[l] ? a.modules.columnCalcs[l](value, b) : a.modules.columnCalcs[l], a.setFieldValue(c, a.modules.columnCalcs[d](g, b, f)));
    });
    return c;
  };
  n.prototype.hasTopCalcs = function() {
    return !!this.topCalcs.length;
  };
  n.prototype.hasBottomCalcs = function() {
    return !!this.botCalcs.length;
  };
  n.prototype.redraw = function() {
    this.topRow && this.topRow.normalizeHeight(!0);
    this.botRow && this.botRow.normalizeHeight(!0);
  };
  n.prototype.getResults = function() {
    var a = this, b = {};
    if (this.table.options.groupBy && this.table.modExists("groupRows")) {
      var c = this.table.modules.groupRows.getGroups(!0);
      c.forEach(function(c) {
        b[c.getKey()] = a.getGroupResults(c);
      });
    } else {
      b = {top:this.topRow ? this.topRow.getData() : {}, bottom:this.botRow ? this.botRow.getData() : {}};
    }
    return b;
  };
  n.prototype.getGroupResults = function(a) {
    var b = this, c = a._getSelf(), d = {}, f = {};
    a.getSubGroups().forEach(function(a) {
      d[a.getKey()] = b.getGroupResults(a);
    });
    return f = {top:c.calcs.top ? c.calcs.top.getData() : {}, bottom:c.calcs.bottom ? c.calcs.bottom.getData() : {}, groups:d};
  };
  n.prototype.calculations = {avg:function(a, b, c) {
    b = 0;
    c = "undefined" !== typeof c.precision ? c.precision : 2;
    a.length && (b = a.reduce(function(a, b) {
      b = Number(b);
      return a + b;
    }), b /= a.length, b = !1 !== c ? b.toFixed(c) : b);
    return parseFloat(b).toString();
  }, max:function(a, b, c) {
    var d = null;
    b = "undefined" !== typeof c.precision ? c.precision : !1;
    a.forEach(function(a) {
      a = Number(a);
      if (a > d || null === d) {
        d = a;
      }
    });
    return null !== d ? !1 !== b ? d.toFixed(b) : d : "";
  }, min:function(a, b, c) {
    var d = null;
    b = "undefined" !== typeof c.precision ? c.precision : !1;
    a.forEach(function(a) {
      a = Number(a);
      if (a < d || null === d) {
        d = a;
      }
    });
    return null !== d ? !1 !== b ? d.toFixed(b) : d : "";
  }, sum:function(a, b, c) {
    var d = 0;
    b = "undefined" !== typeof c.precision ? c.precision : !1;
    a.length && a.forEach(function(a) {
      a = Number(a);
      d += isNaN(a) ? 0 : Number(a);
    });
    return !1 !== b ? d.toFixed(b) : d;
  }, concat:function(a, b, c) {
    b = 0;
    a.length && (b = a.reduce(function(a, b) {
      return String(a) + String(b);
    }));
    return b;
  }, count:function(a, b, c) {
    var d = 0;
    a.length && a.forEach(function(a) {
      a && d++;
    });
    return d;
  }};
  r.prototype.registerModule("columnCalcs", n);
  n = function(a) {
    this.table = a;
    this.mode = !0;
    this.copySelector = !1;
    this.copySelectorParams = {};
    this.copyFormatter = !1;
    this.copyFormatterParams = {};
    this.pasteParser = function() {
    };
    this.pasteAction = function() {
    };
    this.htmlElement = !1;
    this.config = {};
    this.blocked = !0;
  };
  n.prototype.initialize = function() {
    var a = this;
    this.mode = this.table.options.clipboard;
    !0 !== this.mode && "copy" !== this.mode || this.table.element.addEventListener("copy", function(b) {
      a.processConfig();
      if (!a.blocked) {
        b.preventDefault();
        var c = a.generateContent();
        window.clipboardData && window.clipboardData.setData ? window.clipboardData.setData("Text", c) : b.clipboardData && b.clipboardData.setData ? (b.clipboardData.setData("text/plain", c), a.htmlElement && b.clipboardData.setData("text/html", a.htmlElement.outerHTML)) : b.originalEvent && b.originalEvent.clipboardData.setData && (b.originalEvent.clipboardData.setData("text/plain", c), a.htmlElement && b.originalEvent.clipboardData.setData("text/html", a.htmlElement.outerHTML));
        a.table.options.clipboardCopied.call(this.table, c);
        a.reset();
      }
    });
    !0 !== this.mode && "paste" !== this.mode || this.table.element.addEventListener("paste", function(b) {
      a.paste(b);
    });
    this.setPasteParser(this.table.options.clipboardPasteParser);
    this.setPasteAction(this.table.options.clipboardPasteAction);
  };
  n.prototype.processConfig = function() {
    var a = {columnHeaders:"groups", rowGroups:!0};
    "undefined" !== typeof this.table.options.clipboardCopyHeader && (a.columnHeaders = this.table.options.clipboardCopyHeader, console.warn("DEPRECATION WANRING - clipboardCopyHeader option has been depricated, please use the columnHeaders property on the clipboardCopyConfig option"));
    if (this.table.options.clipboardCopyConfig) {
      for (var b in this.table.options.clipboardCopyConfig) {
        a[b] = this.table.options.clipboardCopyConfig[b];
      }
    }
    a.rowGroups && this.table.options.groupBy && this.table.modExists("groupRows") && (this.config.rowGroups = !0);
    this.config.columnHeaders = a.columnHeaders ? "groups" !== a.columnHeaders && !0 !== a || this.table.columnManager.columns.length == this.table.columnManager.columnsByIndex.length ? "columns" : "groups" : !1;
  };
  n.prototype.reset = function() {
    this.blocked = !1;
    this.originalSelectionText = "";
  };
  n.prototype.setPasteAction = function(a) {
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        (this.pasteAction = this.pasteActions[a]) || console.warn("Clipboard Error - No such paste action found:", a);
        break;
      case "function":
        this.pasteAction = a;
    }
  };
  n.prototype.setPasteParser = function(a) {
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        (this.pasteParser = this.pasteParsers[a]) || console.warn("Clipboard Error - No such paste parser found:", a);
        break;
      case "function":
        this.pasteParser = a;
    }
  };
  n.prototype.paste = function(a) {
    var b;
    if (this.checkPaseOrigin(a)) {
      var c = this.getPasteData(a);
      (b = this.pasteParser.call(this, c)) ? (a.preventDefault(), this.table.modExists("mutator") && (b = this.mutateData(b)), a = this.pasteAction.call(this, b), this.table.options.clipboardPasted.call(this.table, c, b, a)) : this.table.options.clipboardPasteError.call(this.table, c);
    }
  };
  n.prototype.mutateData = function(a) {
    var b = this, c = [];
    Array.isArray(a) ? a.forEach(function(a) {
      c.push(b.table.modules.mutator.transformRow(a, "clipboard"));
    }) : c = a;
    return c;
  };
  n.prototype.checkPaseOrigin = function(a) {
    var b = !0;
    if ("DIV" != a.target.tagName || this.table.modules.edit.currentCell) {
      b = !1;
    }
    return b;
  };
  n.prototype.getPasteData = function(a) {
    var b;
    window.clipboardData && window.clipboardData.getData ? b = window.clipboardData.getData("Text") : a.clipboardData && a.clipboardData.getData ? b = a.clipboardData.getData("text/plain") : a.originalEvent && a.originalEvent.clipboardData.getData && (b = a.originalEvent.clipboardData.getData("text/plain"));
    return b;
  };
  n.prototype.copy = function(a, b, c, d, f) {
    this.blocked = !1;
    if (!0 === this.mode || "copy" === this.mode) {
      if ("undefined" != typeof window.getSelection && "undefined" != typeof document.createRange) {
        var l = document.createRange();
        l.selectNodeContents(this.table.element);
        var g = window.getSelection();
        g.toString() && f && (a = "userSelection", c = "raw", b = g.toString());
        g.removeAllRanges();
        g.addRange(l);
      } else {
        "undefined" != typeof document.selection && "undefined" != typeof document.body.createTextRange && (textRange = document.body.createTextRange(), textRange.moveToElementText(this.table.element), textRange.select());
      }
      this.setSelector(a);
      this.copySelectorParams = "undefined" != typeof b && null != b ? b : this.config.columnHeaders;
      this.setFormatter(c);
      this.copyFormatterParams = "undefined" != typeof d && null != d ? d : {};
      document.execCommand("copy");
      g && g.removeAllRanges();
    }
  };
  n.prototype.setSelector = function(a) {
    a = a || this.table.options.clipboardCopySelector;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        this.copySelectors[a] ? this.copySelector = this.copySelectors[a] : console.warn("Clipboard Error - No such selector found:", a);
        break;
      case "function":
        this.copySelector = a;
    }
  };
  n.prototype.setFormatter = function(a) {
    a = a || this.table.options.clipboardCopyFormatter;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        this.copyFormatters[a] ? this.copyFormatter = this.copyFormatters[a] : console.warn("Clipboard Error - No such formatter found:", a);
        break;
      case "function":
        this.copyFormatter = a;
    }
  };
  n.prototype.generateContent = function() {
    this.htmlElement = !1;
    var a = this.copySelector.call(this, this.config, this.copySelectorParams);
    return this.copyFormatter.call(this, a, this.config, this.copyFormatterParams);
  };
  n.prototype.generateSimpleHeaders = function(a) {
    var b = [];
    a.forEach(function(a) {
      b.push(a.definition.title);
    });
    return b;
  };
  n.prototype.generateColumnGroupHeaders = function(a) {
    var b = this, c = [];
    this.table.columnManager.columns.forEach(function(a) {
      (a = b.processColumnGroup(a)) && c.push(a);
    });
    return c;
  };
  n.prototype.processColumnGroup = function(a) {
    var b = this, c = a.columns, d = {type:"group", title:a.definition.title, column:a};
    if (c.length) {
      if (d.subGroups = [], d.width = 0, c.forEach(function(a) {
        if (a = b.processColumnGroup(a)) {
          d.width += a.width, d.subGroups.push(a);
        }
      }), !d.width) {
        return !1;
      }
    } else {
      if (a.field && a.visible) {
        d.width = 1;
      } else {
        return !1;
      }
    }
    return d;
  };
  n.prototype.groupHeadersToRows = function(a) {
    function b(a, f) {
      "undefined" === typeof d[f] && (d[f] = []);
      d[f].push(a.title);
      a.subGroups ? a.subGroups.forEach(function(a) {
        b(a, f + 1);
      }) : c();
    }
    function c() {
      var a = 0;
      d.forEach(function(b) {
        b = b.length;
        b > a && (a = b);
      });
      d.forEach(function(b) {
        var c = b.length;
        if (c < a) {
          for (; c < a; c++) {
            b.push("");
          }
        }
      });
    }
    var d = [];
    a.forEach(function(a) {
      b(a, 0);
    });
    return d;
  };
  n.prototype.rowsToData = function(a, b, c) {
    var d = this.table.columnManager.columnsByIndex, f = [];
    a.forEach(function(a) {
      var b = [], c = a.getData("clipboard");
      d.forEach(function(a) {
        a = a.getFieldValue(c);
        switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
          case "object":
            a = JSON.stringify(a);
            break;
          case "undefined":
          case "null":
            a = "";
        }
        b.push(a);
      });
      f.push(b);
    });
    return f;
  };
  n.prototype.buildComplexRows = function(a) {
    var b = this, c = [];
    this.table.modules.groupRows.getGroups().forEach(function(a) {
      c.push(b.processGroupData(a));
    });
    return c;
  };
  n.prototype.processGroupData = function(a) {
    var b = this, c = a.getSubGroups(), d = {type:"group", key:a.key};
    c.length ? (d.subGroups = [], c.forEach(function(a) {
      d.subGroups.push(b.processGroupData(a));
    })) : d.rows = a.getRows(!0);
    return d;
  };
  n.prototype.buildOutput = function(a, b, c) {
    var d = this, f = [], l = this.table.columnManager.columnsByIndex;
    b.columnHeaders && ("groups" == b.columnHeaders ? (l = this.generateColumnGroupHeaders(this.table.columnManager.columns), f = f.concat(this.groupHeadersToRows(l))) : f.push(this.generateSimpleHeaders(l)));
    this.table.options.clipboardCopyStyled && this.generateHTML(a, l, b, c);
    b.rowGroups ? a.forEach(function(a) {
      f = f.concat(d.parseRowGroupData(a, b, c));
    }) : f = f.concat(this.rowsToData(a, b, c));
    return f;
  };
  n.prototype.parseRowGroupData = function(a, b, c) {
    var d = this, f = [];
    f.push([a.key]);
    a.subGroups ? a.subGroups.forEach(function(a) {
      f = f.concat(d.parseRowGroupData(a, b, c));
    }) : f = f.concat(this.rowsToData(a.rows, b, c));
    return f;
  };
  n.prototype.generateHTML = function(a, b, c, d) {
    function f() {
      var a = document.createElement("tr");
      b.forEach(function(b) {
        var c = document.createElement("th");
        c.innerHTML = b.definition.title;
        m.mapElementStyles(b.getElement(), c, "border-top border-left border-right border-bottom background-color color font-weight font-family font-size".split(" "));
        a.appendChild(c);
      });
      m.mapElementStyles(m.table.columnManager.getHeadersElement(), a, "border-top border-left border-right border-bottom background-color color font-weight font-family font-size".split(" "));
      m.htmlElement.appendChild(document.createElement("thead").appendChild(a));
    }
    function l(a) {
      var b = document.createElement("thead");
      a.forEach(function(a) {
        var c = document.createElement("tr");
        a.forEach(function(a) {
          var b = document.createElement("th");
          1 < a.width && (b.colSpan = a.width);
          1 < a.height && (b.rowSpan = a.height);
          b.innerHTML = a.title;
          m.mapElementStyles(a.element, b, "border-top border-left border-right border-bottom background-color color font-weight font-family font-size".split(" "));
          c.appendChild(b);
        });
        m.mapElementStyles(m.table.columnManager.getHeadersElement(), c, "border-top border-left border-right border-bottom background-color color font-weight font-family font-size".split(" "));
        b.appendChild(c);
      });
      m.htmlElement.appendChild(b);
    }
    function g(a, b) {
      "undefined" === typeof n[b] && (n[b] = []);
      n[b].push({title:a.title, width:a.width, height:1, children:!!a.subGroups, element:a.column.getElement()});
      a.subGroups && a.subGroups.forEach(function(a) {
        g(a, b + 1);
      });
    }
    function p() {
      n.forEach(function(a, b) {
        a.forEach(function(a) {
          a.children || (a.height = n.length - b);
        });
      });
    }
    function h(a) {
      a.forEach(function(a, c) {
        var d = document.createElement("tr"), f = a.getData("clipboard");
        a = v;
        b.forEach(function(a, b) {
          b = document.createElement("td");
          var c = a.getFieldValue(f);
          switch("undefined" === typeof c ? "undefined" : _typeof(c)) {
            case "object":
              c = JSON.stringify(c);
              break;
            case "undefined":
            case "null":
              c = "";
          }
          b.innerHTML = c;
          a.definition.align && (b.style.textAlign = a.definition.align);
          O && m.mapElementStyles(O, b, "border-top border-left border-right border-bottom color font-weight font-family font-size".split(" "));
          d.appendChild(b);
        });
        c % 2 || !r || (a = r);
        c % 2 && u && (a = u);
        a && m.mapElementStyles(a, d, "border-top border-left border-right border-bottom color font-weight font-family font-size background-color".split(" "));
        x.appendChild(d);
      });
    }
    function t(a) {
      var c = document.createElement("tr"), d = document.createElement("td");
      d.colSpan = b.length;
      d.innerHTML = a.key;
      c.appendChild(d);
      x.appendChild(c);
      m.mapElementStyles(w, c, "border-top border-left border-right border-bottom color font-weight font-family font-size background-color".split(" "));
      a.subGroups ? a.subGroups.forEach(function(a) {
        t(a);
      }) : h(a.rows);
    }
    var m = this, n = [];
    this.htmlElement = document.createElement("table");
    m.mapElementStyles(this.table.element, this.htmlElement, ["border-top", "border-left", "border-right", "border-bottom"]);
    c.columnHeaders && ("groups" == c.columnHeaders ? (b.forEach(function(a) {
      g(a, 0);
    }), p(), l(n)) : f());
    b = this.table.columnManager.columnsByIndex;
    var x = document.createElement("tbody");
    if (window.getComputedStyle) {
      var r = this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)");
      var u = this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)");
      var v = this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)");
      var w = this.table.element.getElementsByClassName("tabulator-group")[0];
      if (v) {
        d = v.getElementsByClassName("tabulator-cell");
        var O = d[0];
      }
    }
    c.rowGroups ? a.forEach(function(a) {
      t(a);
    }) : h(a);
    this.htmlElement.appendChild(x);
  };
  n.prototype.mapElementStyles = function(a, b, c) {
    var d = {"background-color":"backgroundColor", color:"fontColor", "font-weight":"fontWeight", "font-family":"fontFamily", "font-size":"fontSize", "border-top":"borderTop", "border-left":"borderLeft", "border-right":"borderRight", "border-bottom":"borderBottom"};
    if (window.getComputedStyle) {
      var f = window.getComputedStyle(a);
      c.forEach(function(a) {
        b.style[d[a]] = f.getPropertyValue(a);
      });
    }
  };
  n.prototype.copySelectors = {userSelection:function(a, b) {
    return b;
  }, selected:function(a, b) {
    var c = [];
    this.table.modExists("selectRow", !0) && (c = this.table.modules.selectRow.getSelectedRows());
    a.rowGroups && console.warn("Clipboard Warning - select coptSelector does not support row groups");
    return this.buildOutput(c, a, b);
  }, table:function(a, b) {
    a.rowGroups && console.warn("Clipboard Warning - table coptSelector does not support row groups");
    return this.buildOutput(this.table.rowManager.getComponents(), a, b);
  }, active:function(a, b) {
    var c = a.rowGroups ? this.buildComplexRows(a) : this.table.rowManager.getComponents(!0);
    return this.buildOutput(c, a, b);
  }};
  n.prototype.copyFormatters = {raw:function(a, b) {
    return a;
  }, table:function(a, b) {
    var c = [];
    a.forEach(function(a) {
      a.forEach(function(a) {
        "undefined" == typeof a && (a = "");
        a = "undefined" == typeof a || null === a ? "" : a.toString();
        a.match(/\r|\n/) && a.split('"').join('""');
      });
      c.push(a.join("\t"));
    });
    return c.join("\n");
  }};
  n.prototype.pasteParsers = {table:function(a) {
    var b = [], c = !0, d = this.table.columnManager.columns, f = [], l = [];
    a = a.split("\n");
    a.forEach(function(a) {
      b.push(a.split("\t"));
    });
    if (!b.length || 1 === b.length && 2 > b[0].length) {
      return !1;
    }
    b[0].forEach(function(a) {
      var b = d.find(function(b) {
        return a && b.definition.title && a.trim() && b.definition.title.trim() === a.trim();
      });
      b ? f.push(b) : c = !1;
    });
    c || (c = !0, f = [], b[0].forEach(function(a) {
      var b = d.find(function(b) {
        return a && b.field && a.trim() && b.field.trim() === a.trim();
      });
      b ? f.push(b) : c = !1;
    }), c || (f = this.table.columnManager.columnsByIndex));
    c && b.shift();
    b.forEach(function(a) {
      var b = {};
      a.forEach(function(a, c) {
        f[c] && (b[f[c].field] = a);
      });
      l.push(b);
    });
    return l;
  }};
  n.prototype.pasteActions = {replace:function(a) {
    return this.table.setData(a);
  }, update:function(a) {
    return this.table.updateOrAddData(a);
  }, insert:function(a) {
    return this.table.addData(a);
  }};
  r.prototype.registerModule("clipboard", n);
  n = function(a) {
    this.table = a;
    this.indent = 10;
    this.field = "";
    this.branchEl = this.expandEl = this.collapseEl = null;
    this.startOpen = function() {
    };
    this.displayIndex = 0;
  };
  n.prototype.initialize = function() {
    var a = null, b = this.table.options;
    this.field = b.dataTreeChildField;
    this.indent = b.dataTreeChildIndent;
    b.dataTreeBranchElement && (!0 === b.dataTreeBranchElement ? (this.branchEl = document.createElement("div"), this.branchEl.classList.add("tabulator-data-tree-branch")) : "string" === typeof b.dataTreeBranchElement ? (a = document.createElement("div"), a.innerHTML = b.dataTreeBranchElement, this.branchEl = a.firstChild) : this.branchEl = b.dataTreeBranchElement);
    b.dataTreeCollapseElement ? "string" === typeof b.dataTreeCollapseElement ? (a = document.createElement("div"), a.innerHTML = b.dataTreeCollapseElement, this.collapseEl = a.firstChild) : this.collapseEl = b.dataTreeCollapseElement : (this.collapseEl = document.createElement("div"), this.collapseEl.classList.add("tabulator-data-tree-control"), this.collapseEl.innerHTML = "<div class='tabulator-data-tree-control-collapse'></div>");
    b.dataTreeExpandElement ? "string" === typeof b.dataTreeExpandElement ? (a = document.createElement("div"), a.innerHTML = b.dataTreeExpandElement, this.expandEl = a.firstChild) : this.expandEl = b.dataTreeExpandElement : (this.expandEl = document.createElement("div"), this.expandEl.classList.add("tabulator-data-tree-control"), this.expandEl.innerHTML = "<div class='tabulator-data-tree-control-expand'></div>");
    switch(_typeof(b.dataTreeStartExpanded)) {
      case "boolean":
        this.startOpen = function(a, c) {
          return b.dataTreeStartExpanded;
        };
        break;
      case "function":
        this.startOpen = b.dataTreeStartExpanded;
        break;
      default:
        this.startOpen = function(a, c) {
          return b.dataTreeStartExpanded[c];
        };
    }
  };
  n.prototype.initializeRow = function(a) {
    var b = "undefined" !== typeof a.getData()[this.field];
    a.modules.dataTree = {index:0, open:b ? this.startOpen(a.getComponent(), 0) : !1, controlEl:!1, branchEl:!1, parent:!1, children:b};
  };
  n.prototype.layoutRow = function(a) {
    var b = a.getCells()[0].getElement(), c = a.modules.dataTree;
    b.style.paddingLeft = parseInt(window.getComputedStyle(b, null).getPropertyValue("padding-left")) + c.index * this.indent + "px";
    c.branchEl && c.branchEl.parentNode.removeChild(c.branchEl);
    this.generateControlElement(a, b);
    c.index && this.branchEl && (c.branchEl = this.branchEl.cloneNode(!0), b.insertBefore(c.branchEl, b.firstChild), b.style.paddingLeft = parseInt(b.style.paddingLeft) + (c.branchEl.offsetWidth + c.branchEl.style.marginRight) * (c.index - 1) + "px");
  };
  n.prototype.generateControlElement = function(a, b) {
    var c = this, d = a.modules.dataTree;
    b = b || a.getCells()[0].getElement();
    var f = d.controlEl;
    !1 !== d.children && (d.open ? (d.controlEl = this.collapseEl.cloneNode(!0), d.controlEl.addEventListener("click", function(b) {
      b.stopPropagation();
      c.collapseRow(a);
    })) : (d.controlEl = this.expandEl.cloneNode(!0), d.controlEl.addEventListener("click", function(b) {
      b.stopPropagation();
      c.expandRow(a);
    })), d.controlEl.addEventListener("mousedown", function(a) {
      a.stopPropagation();
    }), f && f.parentNode === b ? f.parentNode.replaceChild(d.controlEl, f) : b.insertBefore(d.controlEl, b.firstChild));
  };
  n.prototype.setDisplayIndex = function(a) {
    this.displayIndex = a;
  };
  n.prototype.getDisplayIndex = function() {
    return this.displayIndex;
  };
  n.prototype.getRows = function(a) {
    var b = this, c = [];
    a.forEach(function(a, d) {
      c.push(a);
      a instanceof g && (d = a.modules.dataTree.children, d.index || !1 === d.children || (a = b.getChildren(a), a.forEach(function(a) {
        c.push(a);
      })));
    });
    return c;
  };
  n.prototype.getChildren = function(a) {
    var b = this, c = a.modules.dataTree, d = [];
    !1 !== c.children && c.open && (Array.isArray(c.children) || (c.children = this.generateChildren(a)), c.children.forEach(function(a) {
      d.push(a);
      b.getChildren(a).forEach(function(a) {
        d.push(a);
      });
    }));
    return d;
  };
  n.prototype.generateChildren = function(a) {
    var b = this, c = [];
    a.getData()[this.field].forEach(function(d) {
      d = new g(d || {}, b.table.rowManager);
      d.modules.dataTree.index = a.modules.dataTree.index + 1;
      d.modules.dataTree.parent = a;
      d.modules.dataTree.open = b.startOpen(a, d.modules.dataTree.index);
      c.push(d);
    });
    return c;
  };
  n.prototype.expandRow = function(a, b) {
    b = a.modules.dataTree;
    !1 !== b.children && (b.open = !0, a.reinitialize(), this.table.rowManager.refreshActiveData("tree", !1, !0), this.table.options.dataTreeRowExpanded(a.getComponent(), a.modules.dataTree.index));
  };
  n.prototype.collapseRow = function(a) {
    var b = a.modules.dataTree;
    !1 !== b.children && (b.open = !1, a.reinitialize(), this.table.rowManager.refreshActiveData("tree", !1, !0), this.table.options.dataTreeRowCollapsed(a.getComponent(), a.modules.dataTree.index));
  };
  n.prototype.toggleRow = function(a) {
    var b = a.modules.dataTree;
    !1 !== b.children && (b.open ? this.collapseRow(a) : this.expandRow(a));
  };
  n.prototype.getTreeParent = function(a) {
    return a.modules.dataTree.parent ? a.modules.dataTree.parent.getComponent() : !1;
  };
  n.prototype.getTreeChildren = function(a) {
    var b = a.modules.dataTree, c = [];
    b.children && (Array.isArray(b.children) || (b.children = this.generateChildren(a)), b.children.forEach(function(a) {
      a instanceof g && c.push(a.getComponent());
    }));
    return c;
  };
  n.prototype.checkForRestyle = function(a) {
    a.row.cells.indexOf(a) || !1 !== a.row.modules.dataTree.children && a.row.reinitialize();
  };
  r.prototype.registerModule("dataTree", n);
  n = function(a) {
    this.table = a;
    this.fields = {};
    this.columnsByIndex = [];
    this.columnsByField = {};
    this.config = {};
  };
  n.prototype.download = function(a, b, c, d) {
    function f(c, f) {
      d ? d(c) : l.triggerDownload(c, f, a, b);
    }
    var l = this, g = !1;
    this.processConfig();
    "function" == typeof a ? g = a : l.downloaders[a] ? g = l.downloaders[a] : console.warn("Download Error - No such download type found: ", a);
    this.processColumns();
    g && g.call(this, l.processDefinitions(), l.processData(), c || {}, f, this.config);
  };
  n.prototype.processConfig = function() {
    var a = {columnGroups:!0, rowGroups:!0};
    if (this.table.options.downloadConfig) {
      for (var b in this.table.options.downloadConfig) {
        a[b] = this.table.options.downloadConfig[b];
      }
    }
    a.rowGroups && this.table.options.groupBy && this.table.modExists("groupRows") && (this.config.rowGroups = !0);
    a.columnGroups && this.table.columnManager.columns.length != this.table.columnManager.columnsByIndex.length && (this.config.columnGroups = !0);
  };
  n.prototype.processColumns = function() {
    var a = this;
    a.columnsByIndex = [];
    a.columnsByField = {};
    a.table.columnManager.columnsByIndex.forEach(function(b) {
      b.field && b.visible && !1 !== b.definition.download && (a.columnsByIndex.push(b), a.columnsByField[b.field] = b);
    });
  };
  n.prototype.processDefinitions = function() {
    var a = this, b = [];
    this.config.columnGroups ? a.table.columnManager.columns.forEach(function(c) {
      (c = a.processColumnGroup(c)) && b.push(c);
    }) : a.columnsByIndex.forEach(function(c) {
      !1 !== c.download && b.push(a.processDefinition(c));
    });
    return b;
  };
  n.prototype.processColumnGroup = function(a) {
    var b = this, c = a.columns, d = {type:"group", title:a.definition.title};
    if (c.length) {
      if (d.subGroups = [], d.width = 0, c.forEach(function(a) {
        if (a = b.processColumnGroup(a)) {
          d.width += a.width, d.subGroups.push(a);
        }
      }), !d.width) {
        return !1;
      }
    } else {
      if (a.field && a.visible && !1 !== a.definition.download) {
        d.width = 1, d.definition = this.processDefinition(a);
      } else {
        return !1;
      }
    }
    return d;
  };
  n.prototype.processDefinition = function(a) {
    var b = {}, c;
    for (c in a.definition) {
      b[c] = a.definition[c];
    }
    "undefined" != typeof a.definition.downloadTitle && (b.title = a.definition.downloadTitle);
    return b;
  };
  n.prototype.processData = function() {
    var a = this, b = [], c = [];
    this.config.rowGroups ? (c = this.table.modules.groupRows.getGroups(), c.forEach(function(c) {
      b.push(a.processGroupData(c));
    })) : b = this.table.rowManager.getData(!0, "download");
    "function" == typeof this.table.options.downloadDataFormatter && (b = this.table.options.downloadDataFormatter(b));
    return b;
  };
  n.prototype.processGroupData = function(a) {
    var b = this, c = a.getSubGroups(), d = {type:"group", key:a.key};
    c.length ? (d.subGroups = [], c.forEach(function(a) {
      d.subGroups.push(b.processGroupData(a));
    })) : d.rows = a.getData(!0, "download");
    return d;
  };
  n.prototype.triggerDownload = function(a, b, c, d) {
    var f = document.createElement("a");
    b = new Blob([a], {type:b});
    d = d || "Tabulator." + ("function" === typeof c ? "txt" : c);
    if (b = this.table.options.downloadReady.call(this.table, a, b)) {
      navigator.msSaveOrOpenBlob ? navigator.msSaveOrOpenBlob(b, d) : (f.setAttribute("href", window.URL.createObjectURL(b)), f.setAttribute("download", d), f.style.display = "none", document.body.appendChild(f), f.click(), document.body.removeChild(f)), this.table.options.downloadComplete && this.table.options.downloadComplete();
    }
  };
  n.prototype.getFieldValue = function(a, b) {
    return (a = this.columnsByField[a]) ? a.getFieldValue(b) : !1;
  };
  n.prototype.commsReceived = function(a, b, c) {
    switch(b) {
      case "intercept":
        this.download(c.type, "", c.options, c.intercept);
    }
  };
  n.prototype.downloaders = {csv:function(a, b, c, d, f) {
    function l() {
      a.forEach(function(a) {
        m.push('"' + String(a.title).split('"').join('""') + '"');
        n.push(a.field);
      });
    }
    function g(a, b) {
      a.subGroups ? a.subGroups.forEach(function(a) {
        g(a, b + 1);
      }) : (m.push('"' + String(a.title).split('"').join('""') + '"'), n.push(a.definition.field));
    }
    function p(a) {
      a.forEach(function(a) {
        var b = [];
        n.forEach(function(c) {
          c = t.getFieldValue(c, a);
          switch("undefined" === typeof c ? "undefined" : _typeof(c)) {
            case "object":
              c = JSON.stringify(c);
              break;
            case "undefined":
            case "null":
              c = "";
          }
          b.push('"' + String(c).split('"').join('""') + '"');
        });
        r.push(b.join(x));
      });
    }
    function h(a) {
      a.subGroups ? a.subGroups.forEach(function(a) {
        h(a);
      }) : p(a.rows);
    }
    var t = this, m = [], n = [], x = c && c.delimiter ? c.delimiter : ",";
    f.columnGroups ? (console.warn("Download Warning - CSV downloader cannot process column groups"), a.forEach(function(a) {
      g(a, 0);
    })) : l();
    var r = [m.join(x)];
    f.rowGroups ? (console.warn("Download Warning - CSV downloader cannot process row groups"), b.forEach(function(a) {
      h(a);
    })) : p(b);
    d(r.join("\n"), "text/csv");
  }, json:function(a, b, c, d, f) {
    a = JSON.stringify(b, null, "\t");
    d(a, "application/json");
  }, pdf:function(a, b, c, d, f) {
    function l() {
      a.forEach(function(a) {
        a.field && (x.push(a.title || ""), n.push(a.field));
      });
    }
    function g(a, b) {
      a.subGroups ? a.subGroups.forEach(function(a) {
        g(a, b + 1);
      }) : (x.push(a.title || ""), n.push(a.definition.field));
    }
    function p(a) {
      switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
        case "object":
          a = JSON.stringify(a);
          break;
        case "undefined":
        case "null":
          a = "";
      }
      return a;
    }
    function h(a) {
      a.forEach(function(a) {
        var b = [];
        n.forEach(function(c) {
          c = m.getFieldValue(c, a);
          b.push(p(c));
        });
        r.push(b);
      });
    }
    function t(a) {
      var b = [];
      b.push(p(a.key));
      u.push(r.length);
      r.push(b);
      a.subGroups ? a.subGroups.forEach(function(a) {
        t(a);
      }) : h(a.rows);
    }
    var m = this, n = [], x = [], r = [], u = [], z = {}, v = {}, w = c.jsPDF || {}, P = c && c.title ? c.title : "";
    w.orientation || (w.orientation = c.orientation || "landscape");
    w.unit || (w.unit = "pt");
    f.columnGroups ? (console.warn("Download Warning - PDF downloader cannot process column groups"), a.forEach(function(a) {
      g(a, 0);
    })) : l();
    f.rowGroups ? b.forEach(function(a) {
      t(a);
    }) : h(b);
    var I = new jsPDF(w);
    c && c.autoTable && (z = "function" === typeof c.autoTable ? c.autoTable(I) || {} : c.autoTable);
    if (f.rowGroups) {
      var Q = function(a, b) {
        if (-1 < u.indexOf(b.row.index)) {
          for (var c in v) {
            a.styles[c] = v[c];
          }
        }
      }, v = c.rowGroupStyles || {fontStyle:"bold", fontSize:12, cellPadding:6, fillColor:220};
      if (z.createdCell) {
        var ba = z.createdCell;
        z.createdCell = function(a, b) {
          Q(a, b);
          ba(a, b);
        };
      } else {
        z.createdCell = Q;
      }
    }
    P && (z.addPageContent = function(a) {
      I.text(P, 40, 30);
    });
    I.autoTable(x, r, z);
    d(I.output("arraybuffer"), "application/pdf");
  }, xlsx:function(a, b, c, d, f) {
    function l() {
      function c() {
        a.forEach(function(a) {
          x.push(a.title);
          r.push(a.field);
        });
        u.push(x);
      }
      function d(a, b) {
        "undefined" === typeof x[b] && (x[b] = []);
        "undefined" === typeof m[b] && (m[b] = []);
        1 < a.width && m[b].push({type:"hoz", start:x[b].length, end:x[b].length + a.width - 1});
        x[b].push(a.title);
        a.subGroups ? a.subGroups.forEach(function(a) {
          d(a, b + 1);
        }) : (r.push(a.definition.field), l(r.length - 1, b), m[b].push({type:"vert", start:r.length - 1}));
      }
      function l() {
        var a = 0;
        x.forEach(function(b) {
          b = b.length;
          b > a && (a = b);
        });
        x.forEach(function(b) {
          var c = b.length;
          if (c < a) {
            for (; c < a; c++) {
              b.push("");
            }
          }
        });
      }
      function p() {
        var a = [];
        t.forEach(function(b) {
          a.push({s:{r:b, c:0}, e:{r:b, c:r.length - 1}});
        });
        m.forEach(function(b, c) {
          b.forEach(function(b) {
            "hoz" === b.type ? a.push({s:{r:c, c:b.start}, e:{r:c, c:b.end}}) : c != x.length - 1 && a.push({s:{r:c, c:b.start}, e:{r:x.length - 1, c:b.start}});
          });
        });
        return a;
      }
      function h(a) {
        a.forEach(function(a) {
          var b = [];
          r.forEach(function(c) {
            c = g.getFieldValue(c, a);
            b.push("object" === ("undefined" === typeof c ? "undefined" : _typeof(c)) ? JSON.stringify(c) : c);
          });
          u.push(b);
        });
      }
      function n(a) {
        var b = [];
        b.push(a.key);
        t.push(u.length);
        u.push(b);
        a.subGroups ? a.subGroups.forEach(function(a) {
          n(a);
        }) : h(a.rows);
      }
      var x = [], r = [], u = [];
      f.columnGroups ? (a.forEach(function(a) {
        d(a, 0);
      }), x.forEach(function(a) {
        u.push(a);
      })) : c();
      f.rowGroups ? b.forEach(function(a) {
        n(a);
      }) : h(b);
      return function() {
        var a = {}, b = {s:{c:0, r:0}, e:{c:r.length, r:u.length}};
        XLSX.utils.sheet_add_aoa(a, u);
        a["!ref"] = XLSX.utils.encode_range(b);
        b = p();
        b.length && (a["!merges"] = b);
        return a;
      }();
    }
    var g = this, p = c.sheetName || "Sheet1", h = {SheetNames:[], Sheets:{}}, t = [], m = [];
    if (c.sheetOnly) {
      d(l());
    } else {
      if (c.sheets) {
        for (var n in c.sheets) {
          !0 === c.sheets[n] ? (h.SheetNames.push(n), h.Sheets[n] = l()) : (h.SheetNames.push(n), this.table.modules.comms.send(c.sheets[n], "download", "intercept", {type:"xlsx", options:{sheetOnly:!0}, intercept:function(a) {
            h.Sheets[n] = a;
          }}));
        }
      } else {
        h.SheetNames.push(p), h.Sheets[p] = l();
      }
      c = XLSX.write(h, {bookType:"xlsx", bookSST:!0, type:"binary"});
      d(function(a) {
        for (var b = new ArrayBuffer(a.length), c = new Uint8Array(b), d = 0; d != a.length; ++d) {
          c[d] = a.charCodeAt(d) & 255;
        }
        return b;
      }(c), "application/octet-stream");
    }
  }};
  r.prototype.registerModule("download", n);
  n = function(a) {
    this.table = a;
    this.invalidEdit = this.recursionBlock = this.mouseClick = this.currentCell = !1;
  };
  n.prototype.initializeColumn = function(a) {
    var b = {editor:!1, blocked:!1, check:a.definition.editable, params:a.definition.editorParams || {}};
    switch(_typeof(a.definition.editor)) {
      case "string":
        "tick" === a.definition.editor && (a.definition.editor = "tickCross", console.warn("DEPRECATION WANRING - the tick editor has been depricated, please use the tickCross editor"));
        this.editors[a.definition.editor] ? b.editor = this.editors[a.definition.editor] : console.warn("Editor Error - No such editor found: ", a.definition.editor);
        break;
      case "function":
        b.editor = a.definition.editor;
        break;
      case "boolean":
        !0 === a.definition.editor && ("function" !== typeof a.definition.formatter ? ("tick" === a.definition.formatter && (a.definition.formatter = "tickCross", console.warn("DEPRECATION WANRING - the tick editor has been depricated, please use the tickCross editor")), b.editor = this.editors[a.definition.formatter] ? this.editors[a.definition.formatter] : this.editors.input) : console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ", a.definition.formatter));
    }
    b.editor && (a.modules.edit = b);
  };
  n.prototype.getCurrentCell = function() {
    return this.currentCell ? this.currentCell.getComponent() : !1;
  };
  n.prototype.clearEditor = function() {
    var a = this.currentCell;
    this.invalidEdit = !1;
    if (a) {
      this.currentCell = !1;
      var b = a.getElement();
      b.classList.remove("tabulator-validation-fail");
      for (b.classList.remove("tabulator-editing"); b.firstChild;) {
        b.removeChild(b.firstChild);
      }
      a.row.getElement().classList.remove("tabulator-row-editing");
    }
  };
  n.prototype.cancelEdit = function() {
    if (this.currentCell) {
      var a = this.currentCell, b = this.currentCell.getComponent();
      this.clearEditor();
      a.setValueActual(a.getValue());
      a.column.cellEvents.cellEditCancelled && a.column.cellEvents.cellEditCancelled.call(this.table, b);
      this.table.options.cellEditCancelled.call(this.table, b);
    }
  };
  n.prototype.bindEditor = function(a) {
    var b = this, c = a.getElement();
    c.setAttribute("tabindex", 0);
    c.addEventListener("click", function(a) {
      c.classList.contains("tabulator-editing") || c.focus();
    });
    c.addEventListener("mousedown", function(a) {
      b.mouseClick = !0;
    });
    c.addEventListener("focus", function(c) {
      b.recursionBlock || b.edit(a, c, !1);
    });
  };
  n.prototype.focusCellNoEvent = function(a) {
    this.recursionBlock = !0;
    a.getElement().focus();
    this.recursionBlock = !1;
  };
  n.prototype.editCell = function(a, b) {
    this.focusCellNoEvent(a);
    this.edit(a, !1, b);
  };
  n.prototype.edit = function(a, b, c) {
    function d(b) {
      if (g.currentCell === a) {
        var c = !0;
        a.column.modules.validate && g.table.modExists("validate") && (c = g.table.modules.validate.validate(a.column.modules.validate, a.getComponent(), b));
        !0 === c ? (g.clearEditor(), a.setValue(b, !0), g.table.options.dataTree && g.table.modExists("dataTree") && g.table.modules.dataTree.checkForRestyle(a)) : (g.invalidEdit = !0, t.classList.add("tabulator-validation-fail"), g.focusCellNoEvent(a), h(), g.table.options.validationFailed.call(g.table, a.getComponent(), b, c));
      }
    }
    function f() {
      g.currentCell === a && (g.cancelEdit(), g.table.options.dataTree && g.table.modExists("dataTree") && g.table.modules.dataTree.checkForRestyle(a));
    }
    function l(a) {
      h = a;
    }
    var g = this, p = !0, h = function() {
    }, t = a.getElement();
    if (this.currentCell) {
      this.invalidEdit || this.cancelEdit();
    } else {
      if (!a.column.modules.edit.blocked) {
        b && b.stopPropagation();
        switch(_typeof(a.column.modules.edit.check)) {
          case "function":
            p = a.column.modules.edit.check(a.getComponent());
            break;
          case "boolean":
            p = a.column.modules.edit.check;
        }
        if (p || c) {
          g.cancelEdit();
          g.currentCell = a;
          c = a.getComponent();
          this.mouseClick && (this.mouseClick = !1, a.column.cellEvents.cellClick && a.column.cellEvents.cellClick.call(this.table, b, c));
          a.column.cellEvents.cellEditing && a.column.cellEvents.cellEditing.call(this.table, c);
          g.table.options.cellEditing.call(this.table, c);
          b = "function" === typeof a.column.modules.edit.params ? a.column.modules.edit.params(c) : a.column.modules.edit.params;
          b = a.column.modules.edit.editor.call(g, c, l, d, f, b);
          if (!1 !== b) {
            if (b instanceof Node) {
              t.classList.add("tabulator-editing");
              for (a.row.getElement().classList.add("tabulator-row-editing"); t.firstChild;) {
                t.removeChild(t.firstChild);
              }
              t.appendChild(b);
              h();
              b = t.children;
              for (c = 0; c < b.length; c++) {
                b[c].addEventListener("click", function(a) {
                  a.stopPropagation();
                });
              }
            } else {
              return console.warn("Edit Error - Editor should return an instance of Node, the editor returned:", b), t.blur(), !1;
            }
          } else {
            return t.blur(), !1;
          }
          return !0;
        }
      }
      this.mouseClick = !1;
      t.blur();
      return !1;
    }
  };
  n.prototype.editors = {input:function(a, b, c, d, f) {
    function l(a) {
      (null === g || "undefined" === typeof g) && "" !== p.value || p.value != g ? c(p.value) : d();
    }
    var g = a.getValue(), p = document.createElement("input");
    p.setAttribute("type", "text");
    p.style.padding = "4px";
    p.style.width = "100%";
    p.style.boxSizing = "border-box";
    p.value = "undefined" !== typeof g ? g : "";
    b(function() {
      p.focus();
      p.style.height = "100%";
    });
    p.addEventListener("change", l);
    p.addEventListener("blur", l);
    p.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 13:
          c(p.value);
          break;
        case 27:
          d();
      }
    });
    return p;
  }, textarea:function(a, b, c, d, f) {
    function l(b) {
      (null === g || "undefined" === typeof g) && "" !== p.value || p.value != g ? (c(p.value), setTimeout(function() {
        a.getRow().normalizeHeight();
      }, 300)) : d();
    }
    var g = a.getValue();
    f = String(null !== g && "undefined" !== g ? g : "");
    f.match(/(?:\r\n|\r|\n)/g);
    var p = document.createElement("textarea"), h = 0;
    p.style.display = "block";
    p.style.padding = "2px";
    p.style.height = "100%";
    p.style.width = "100%";
    p.style.boxSizing = "border-box";
    p.style.whiteSpace = "pre-wrap";
    p.style.resize = "none";
    p.value = f;
    b(function() {
      p.focus();
      p.style.height = "100%";
    });
    p.addEventListener("change", l);
    p.addEventListener("blur", l);
    p.addEventListener("keyup", function() {
      p.style.height = "";
      var b = p.scrollHeight;
      p.style.height = b + "px";
      b != h && (h = b, a.getRow().normalizeHeight());
    });
    p.addEventListener("keydown", function(a) {
      27 == a.keyCode && d();
    });
    return p;
  }, number:function(a, b, c, d, f) {
    function l() {
      var a = p.value;
      isNaN(a) || "" === a || (a = Number(a));
      a != g ? c(a) : d();
    }
    var g = a.getValue(), p = document.createElement("input");
    p.setAttribute("type", "number");
    "undefined" != typeof f.max && p.setAttribute("max", f.max);
    "undefined" != typeof f.min && p.setAttribute("min", f.min);
    "undefined" != typeof f.step && p.setAttribute("step", f.step);
    p.style.padding = "4px";
    p.style.width = "100%";
    p.style.boxSizing = "border-box";
    p.value = g;
    b(function() {
      p.focus();
      p.style.height = "100%";
      p.addEventListener("blur", function(a) {
        l();
      });
    });
    p.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 13:
        case 9:
          l();
          break;
        case 27:
          d();
      }
    });
    return p;
  }, range:function(a, b, c, d, f) {
    function l() {
      var a = p.value;
      isNaN(a) || "" === a || (a = Number(a));
      a != g ? c(a) : d();
    }
    var g = a.getValue(), p = document.createElement("input");
    p.setAttribute("type", "range");
    "undefined" != typeof f.max && p.setAttribute("max", f.max);
    "undefined" != typeof f.min && p.setAttribute("min", f.min);
    "undefined" != typeof f.step && p.setAttribute("step", f.step);
    p.style.padding = "4px";
    p.style.width = "100%";
    p.style.boxSizing = "border-box";
    p.value = g;
    b(function() {
      p.focus();
      p.style.height = "100%";
    });
    p.addEventListener("blur", function(a) {
      l();
    });
    p.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 13:
        case 9:
          l();
          break;
        case 27:
          d();
      }
    });
    return p;
  }, select:function(a, b, c, d, f) {
    function l() {
      var b = {}, c = a.getColumn()._getSelf();
      n.table.getData().forEach(function(a) {
        a = c.getFieldValue(a);
        null !== a && "undefined" !== typeof a && "" !== a && (b[a] = !0);
      });
      return Object.keys(b);
    }
    function g(b, c) {
      function d(a) {
        a = {label:f.listItemFormatter ? f.listItemFormatter(a.value, a.label) : a.label, value:a.value, element:!1};
        a.value === c && h(a);
        l.push(a);
        g.push(a);
        return a;
      }
      var l = [], g = [];
      "function" == typeof b && (b = b(a));
      if (Array.isArray(b)) {
        b.forEach(function(a) {
          if ("object" === ("undefined" === typeof a ? "undefined" : _typeof(a))) {
            if (a.options) {
              var b = {label:a.label, group:!0, element:!1};
              g.push(b);
              a.options.forEach(function(a) {
                d(a);
              });
            } else {
              d(a);
            }
          } else {
            b = {label:f.listItemFormatter ? f.listItemFormatter(a, a) : a, value:a, element:!1}, b.value === c && h(b), l.push(b), g.push(b);
          }
        });
      } else {
        for (var t in b) {
          var m = {label:f.listItemFormatter ? f.listItemFormatter(t, b[t]) : b[t], value:t, element:!1};
          m.value === c && h(m);
          l.push(m);
          g.push(m);
        }
      }
      w = l;
      O = g;
      p();
    }
    function p() {
      for (; v.firstChild;) {
        v.removeChild(v.firstChild);
      }
      O.forEach(function(a) {
        var b = a.element;
        b || (a.group ? (b = document.createElement("div"), b.classList.add("tabulator-edit-select-list-group"), b.tabIndex = 0, b.innerHTML = "" === a.label ? "&nbsp;" : a.label) : (b = document.createElement("div"), b.classList.add("tabulator-edit-select-list-item"), b.tabIndex = 0, b.innerHTML = "" === a.label ? "&nbsp;" : a.label, b.addEventListener("click", function() {
          h(a);
          t();
        }), a === P && b.classList.add("active")), b.addEventListener("mousedown", function() {
          I = !1;
          setTimeout(function() {
            I = !0;
          }, 10);
        }), a.element = b);
        v.appendChild(b);
      });
    }
    function h(a) {
      P && P.element && P.element.classList.remove("active");
      P = a;
      z.value = "&nbsp;" === a.label ? "" : a.label;
      a.element && a.element.classList.add("active");
    }
    function t() {
      m();
      u !== P.value ? (u = P.value, c(P.value)) : d();
    }
    function m() {
      v.parentNode && v.parentNode.removeChild(v);
    }
    var n = this, x = a.getElement(), u = a.getValue(), z = document.createElement("input"), v = document.createElement("div"), w = [], O = [], P = {}, I = !0;
    if (Array.isArray(f) || !Array.isArray(f) && "object" === ("undefined" === typeof f ? "undefined" : _typeof(f)) && !f.values) {
      console.warn("DEPRECATION WANRING - values for the select editor must now be passed into the values property of the editorParams object, not as the editorParams object"), f = {values:f};
    }
    z.setAttribute("type", "text");
    z.style.padding = "4px";
    z.style.width = "100%";
    z.style.boxSizing = "border-box";
    z.readOnly = !0;
    z.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 38:
          a.stopImmediatePropagation();
          a.stopPropagation();
          a = w.indexOf(P);
          0 < a && h(w[a - 1]);
          break;
        case 40:
          a.stopImmediatePropagation();
          a.stopPropagation();
          a = w.indexOf(P);
          a < w.length - 1 && (-1 == a ? h(w[0]) : h(w[a + 1]));
          break;
        case 13:
          t();
          break;
        case 27:
          m(), d();
      }
    });
    z.addEventListener("blur", function(a) {
      I && (m(), d());
    });
    z.addEventListener("focus", function(a) {
      v.parentNode || (!0 === f.values ? g(l(), u) : g(f.values || [], u), a = r.prototype.helpers.elOffset(x), v.style.minWidth = x.offsetWidth + "px", v.style.top = a.top + x.offsetHeight + "px", v.style.left = a.left + "px", document.body.appendChild(v));
    });
    v = document.createElement("div");
    v.classList.add("tabulator-edit-select-list");
    b(function() {
      z.style.height = "100%";
      z.focus();
    });
    return z;
  }, autocomplete:function(a, b, c, d, f) {
    function l() {
      var b = {}, c = a.getColumn()._getSelf();
      n.table.getData().forEach(function(a) {
        a = c.getFieldValue(a);
        null !== a && "undefined" !== typeof a && "" !== a && (b[a] = !0);
      });
      return Object.keys(b);
    }
    function g(a, b) {
      var c = [];
      if (Array.isArray(a)) {
        a.forEach(function(a) {
          a = {title:f.listItemFormatter ? f.listItemFormatter(a, a) : a, value:a, element:!1};
          a.value === b && t(a);
          c.push(a);
        });
      } else {
        for (var d in a) {
          var l = {title:f.listItemFormatter ? f.listItemFormatter(d, a[d]) : a[d], value:d, element:!1};
          l.value === b && t(l);
          c.push(l);
        }
      }
      w = c;
    }
    function p(a, b) {
      var c = [];
      f.searchFunc ? c = f.searchFunc(a, P) : "" === a ? f.showListOnEmpty && w.forEach(function(a) {
        c.push(a);
      }) : w.forEach(function(b) {
        (null !== b.value || "undefined" !== typeof b.value) && (-1 < String(b.value).toLowerCase().indexOf(String(a).toLowerCase()) || -1 < String(b.title).toLowerCase().indexOf(String(a).toLowerCase())) && c.push(b);
      });
      O = c;
      h(b);
    }
    function h(a) {
      for (var b = !1; v.firstChild;) {
        v.removeChild(v.firstChild);
      }
      O.forEach(function(c) {
        var d = c.element;
        d || (d = document.createElement("div"), d.classList.add("tabulator-edit-select-list-item"), d.tabIndex = 0, d.innerHTML = c.title, d.addEventListener("click", function() {
          t(c);
          m();
        }), d.addEventListener("mousedown", function() {
          Q = !1;
          setTimeout(function() {
            Q = !0;
          }, 10);
        }), c.element = d, a && c.value == u && (z.value = c.title, c.element.classList.add("active"), b = !0), c === I && (c.element.classList.add("active"), b = !0));
        v.appendChild(d);
      });
      b || t(!1);
    }
    function t(a, b) {
      I && I.element && I.element.classList.remove("active");
      (I = a) && a.element && a.element.classList.add("active");
    }
    function m() {
      v.parentNode && v.parentNode.removeChild(v);
      I ? u !== I.value ? (u = I.value, z.value = I.value, c(z.value)) : d() : f.freetext ? (u = z.value, c(z.value)) : f.allowEmpty && "" === z.value ? (u = z.value, c(z.value)) : d();
    }
    var n = this, x = a.getElement(), u = a.getValue(), z = document.createElement("input"), v = document.createElement("div"), w = [], O = [], P = [], I = {}, Q = !0;
    z.setAttribute("type", "text");
    z.style.padding = "4px";
    z.style.width = "100%";
    z.style.boxSizing = "border-box";
    z.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 38:
          a.stopImmediatePropagation();
          a.stopPropagation();
          a = O.indexOf(I);
          0 < a ? t(O[a - 1]) : t(!1);
          break;
        case 40:
          a.stopImmediatePropagation();
          a.stopPropagation();
          a = O.indexOf(I);
          a < O.length - 1 && (-1 == a ? t(O[0]) : t(O[a + 1]));
          break;
        case 13:
          m();
          break;
        case 27:
          v.parentNode && v.parentNode.removeChild(v), d();
      }
    });
    z.addEventListener("keyup", function(a) {
      switch(a.keyCode) {
        case 38:
        case 37:
        case 39:
        case 40:
        case 13:
        case 27:
          break;
        default:
          p(z.value);
      }
    });
    z.addEventListener("blur", function(a) {
      Q && m();
    });
    z.addEventListener("focus", function(a) {
      if (!v.parentNode) {
        for (; v.firstChild;) {
          v.removeChild(v.firstChild);
        }
        P = !0 === f.values ? l() : f.values || [];
        g(P, u);
        a = r.prototype.helpers.elOffset(x);
        v.style.minWidth = x.offsetWidth + "px";
        v.style.top = a.top + x.offsetHeight + "px";
        v.style.left = a.left + "px";
        document.body.appendChild(v);
      }
      z.value = u;
      p(u, !0);
    });
    v = document.createElement("div");
    v.classList.add("tabulator-edit-select-list");
    b(function() {
      z.style.height = "100%";
      z.focus();
    });
    return z;
  }, star:function(a, b, c, d, f) {
    function l(a) {
      t.forEach(function(b, c) {
        c < a ? ("ie" == p.table.browser ? b.setAttribute("class", "tabulator-star-active") : b.classList.replace("tabulator-star-inactive", "tabulator-star-active"), b.innerHTML = '<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>') : ("ie" == p.table.browser ? 
        b.setAttribute("class", "tabulator-star-inactive") : b.classList.replace("tabulator-star-active", "tabulator-star-inactive"), b.innerHTML = '<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>');
      });
    }
    function g(a) {
      var b = n.cloneNode(!0);
      t.push(b);
      b.addEventListener("mouseover", function(b) {
        b.stopPropagation();
        l(a);
      });
      b.addEventListener("click", function(b) {
        b.stopPropagation();
        c(a);
      });
      m.appendChild(b);
    }
    var p = this;
    b = a.getElement();
    var h = a.getValue();
    a = b.getElementsByTagName("svg").length || 5;
    f = b.getElementsByTagName("svg")[0] ? b.getElementsByTagName("svg")[0].getAttribute("width") : 14;
    var t = [], m = document.createElement("div"), n = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    b.style.whiteSpace = "nowrap";
    b.style.overflow = "hidden";
    b.style.textOverflow = "ellipsis";
    m.style.verticalAlign = "middle";
    m.style.display = "inline-block";
    m.style.padding = "4px";
    n.setAttribute("width", f);
    n.setAttribute("height", f);
    n.setAttribute("viewBox", "0 0 512 512");
    n.setAttribute("xml:space", "preserve");
    n.style.padding = "0 1px";
    for (f = 1; f <= a; f++) {
      g(f);
    }
    h = Math.min(parseInt(h), a);
    l(h);
    m.addEventListener("mouseover", function(a) {
      l(0);
    });
    m.addEventListener("click", function(a) {
      c(0);
    });
    b.addEventListener("blur", function(a) {
      d();
    });
    b.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 39:
          h = a = h + 1;
          l(a);
          break;
        case 37:
          h = a = h - 1;
          l(a);
          break;
        case 13:
          c(h);
          break;
        case 27:
          d();
      }
    });
    return m;
  }, progress:function(a, b, c, d, f) {
    function l() {
      var a = h * Math.round(n.offsetWidth / (g.clientWidth / 100)) + p;
      c(a);
      g.setAttribute("aria-valuenow", a);
      g.setAttribute("aria-label", t);
    }
    var g = a.getElement();
    b = "undefined" === typeof f.max ? g.getElementsByTagName("div")[0].getAttribute("max") || 100 : f.max;
    var p = "undefined" === typeof f.min ? g.getElementsByTagName("div")[0].getAttribute("min") || 0 : f.min, h = (b - p) / 100, t = a.getValue() || 0, m = document.createElement("div"), n = document.createElement("div"), x, r;
    m.style.position = "absolute";
    m.style.right = "0";
    m.style.top = "0";
    m.style.bottom = "0";
    m.style.width = "5px";
    m.classList.add("tabulator-progress-handle");
    n.style.display = "inline-block";
    n.style.position = "absolute";
    n.style.top = "8px";
    n.style.bottom = "8px";
    n.style.left = "4px";
    n.style.marginRight = "4px";
    n.style.backgroundColor = "#488CE9";
    n.style.maxWidth = "100%";
    n.style.minWidth = "0%";
    g.style.padding = "0 4px";
    t = Math.min(parseFloat(t), b);
    t = Math.max(parseFloat(t), p);
    t = 100 - Math.round((t - p) / h);
    n.style.right = t + "%";
    g.setAttribute("aria-valuemin", p);
    g.setAttribute("aria-valuemax", b);
    n.appendChild(m);
    m.addEventListener("mousedown", function(a) {
      x = a.screenX;
      r = n.offsetWidth;
    });
    m.addEventListener("mouseover", function() {
      m.style.cursor = "ew-resize";
    });
    g.addEventListener("mousemove", function(a) {
      x && (n.style.width = r + a.screenX - x + "px");
    });
    g.addEventListener("mouseup", function(a) {
      x && (a.stopPropagation(), a.stopImmediatePropagation(), r = x = !1, l());
    });
    g.addEventListener("keydown", function(a) {
      switch(a.keyCode) {
        case 39:
          n.style.width = n.clientWidth + g.clientWidth / 100 + "px";
          break;
        case 37:
          n.style.width = n.clientWidth - g.clientWidth / 100 + "px";
          break;
        case 13:
          l();
          break;
        case 27:
          d();
      }
    });
    g.addEventListener("blur", function() {
      d();
    });
    return n;
  }, tickCross:function(a, b, c, d, f) {
    function l(a) {
      if (p) {
        if (a) {
          return t ? h : g.checked;
        }
        if (g.checked && !t) {
          return g.checked = !1, t = g.indeterminate = !0, h;
        }
        t = !1;
      }
      return g.checked;
    }
    a = a.getValue();
    var g = document.createElement("input"), p = f.tristate, h = "undefined" === typeof f.indeterminateValue ? null : f.indeterminateValue, t = !1;
    g.setAttribute("type", "checkbox");
    g.style.marginTop = "5px";
    g.style.boxSizing = "border-box";
    g.value = a;
    !p || "undefined" !== typeof a && a !== h && "" !== a || (t = !0, g.indeterminate = !0);
    "firefox" != this.table.browser && b(function() {
      g.focus();
    });
    g.checked = !0 === a || "true" === a || "True" === a || 1 === a;
    g.addEventListener("change", function(a) {
      c(l());
    });
    g.addEventListener("blur", function(a) {
      c(l(!0));
    });
    g.addEventListener("keydown", function(a) {
      13 == a.keyCode && c(l());
      27 == a.keyCode && d();
    });
    return g;
  }};
  r.prototype.registerModule("edit", n);
  n = function(a) {
    this.table = a;
    this.filterList = [];
    this.headerFilters = {};
    this.headerFilterElements = [];
    this.headerFilterColumns = [];
    this.changed = !1;
  };
  n.prototype.initializeColumn = function(a, b) {
    var c = this, d = a.getField(), f;
    a.modules.filter = {success:function(b) {
      var l = "input" == a.modules.filter.tagType && "text" == a.modules.filter.attrType || "textarea" == a.modules.filter.tagType ? "partial" : "match", g = "";
      if ("undefined" === typeof f || f !== b) {
        f = b;
        if (a.modules.filter.emptyFunc(b)) {
          delete c.headerFilters[d];
        } else {
          a.modules.filter.value = b;
          switch(_typeof(a.definition.headerFilterFunc)) {
            case "string":
              if (c.filters[a.definition.headerFilterFunc]) {
                g = a.definition.headerFilterFunc;
                var p = function(d) {
                  return c.filters[a.definition.headerFilterFunc](b, a.getFieldValue(d));
                };
              } else {
                console.warn("Header Filter Error - Matching filter function not found: ", a.definition.headerFilterFunc);
              }
              break;
            case "function":
              g = p = function(c) {
                var d = a.definition.headerFilterFuncParams || {}, f = a.getFieldValue(c), d = "function" === typeof d ? d(b, f, c) : d;
                return a.definition.headerFilterFunc(b, f, c, d);
              };
          }
          if (!p) {
            switch(l) {
              case "partial":
                p = function(c) {
                  return -1 < String(a.getFieldValue(c)).toLowerCase().indexOf(String(b).toLowerCase());
                };
                g = "like";
                break;
              default:
                p = function(c) {
                  return a.getFieldValue(c) == b;
                }, g = "=";
            }
          }
          c.headerFilters[d] = {value:b, func:p, type:g};
        }
        c.changed = !0;
        c.table.rowManager.filterRefresh();
      }
    }, attrType:!1, tagType:!1, emptyFunc:!1};
    this.generateHeaderFilterElement(a);
  };
  n.prototype.generateHeaderFilterElement = function(a, b) {
    function c() {
    }
    var d = this, f = a.modules.filter.success, l = a.getField(), g;
    if (a.modules.filter.headerElement && a.modules.filter.headerElement.parentNode) {
      var p = a.modules.filter.headerElement.parentNode;
      var h = d.headerFilterElements.indexOf(p);
      0 <= h && d.headerFilterElements.splice(h, 1);
      var m = d.headerFilterColumns.indexOf(m);
      0 <= m && d.headerFilterColumns.splice(m, 1);
      a.contentElement.removeChild(p);
    }
    if (l) {
      a.modules.filter.emptyFunc = a.definition.headerFilterEmptyCheck || function(a) {
        return !a && "0" !== a;
      };
      var n = document.createElement("div");
      n.classList.add("tabulator-header-filter");
      switch(_typeof(a.definition.headerFilter)) {
        case "string":
          if (d.table.modules.edit.editors[a.definition.headerFilter]) {
            var r = d.table.modules.edit.editors[a.definition.headerFilter];
            "tick" !== a.definition.headerFilter && "tickCross" !== a.definition.headerFilter || a.definition.headerFilterEmptyCheck || (a.modules.filter.emptyFunc = function(a) {
              return !0 !== a && !1 !== a;
            });
          } else {
            console.warn("Filter Error - Cannot build header filter, No such editor found: ", a.definition.editor);
          }
          break;
        case "function":
          r = a.definition.headerFilter;
          break;
        case "boolean":
          a.modules.edit && a.modules.edit.editor ? r = a.modules.edit.editor : a.definition.formatter && d.table.modules.edit.editors[a.definition.formatter] ? (r = d.table.modules.edit.editors[a.definition.formatter], "tick" !== a.definition.formatter && "tickCross" !== a.definition.formatter || a.definition.headerFilterEmptyCheck || (a.modules.filter.emptyFunc = function(a) {
            return !0 !== a && !1 !== a;
          })) : r = d.table.modules.edit.editors.input;
      }
      if (r) {
        if (p = {getValue:function() {
          return "undefined" !== typeof b ? b : "";
        }, getField:function() {
          return a.definition.field;
        }, getElement:function() {
          return n;
        }, getColumn:function() {
          return a.getComponent();
        }, getRow:function() {
          return {normalizeHeight:function() {
          }};
        }}, h = a.definition.headerFilterParams || {}, h = "function" === typeof h ? h.call(d.table) : h, g = r.call(this.table.modules.edit, p, function() {
        }, f, c, h)) {
          if (g instanceof Node) {
            l ? d.table.modules.localize.bind("headerFilters|columns|" + a.definition.field, function(a) {
              g.setAttribute("placeholder", "undefined" !== typeof a && a ? a : d.table.modules.localize.getText("headerFilters|default"));
            }) : d.table.modules.localize.bind("headerFilters|default", function(a) {
              g.setAttribute("placeholder", "undefined" !== typeof d.column.definition.headerFilterPlaceholder && d.column.definition.headerFilterPlaceholder ? d.column.definition.headerFilterPlaceholder : a);
            });
            g.addEventListener("click", function(a) {
              a.stopPropagation();
              g.focus();
            });
            var u = !1;
            l = function(a) {
              u && clearTimeout(u);
              u = setTimeout(function() {
                f(g.value);
              }, 300);
            };
            a.modules.filter.headerElement = g;
            a.modules.filter.attrType = g.hasAttribute("type") ? g.getAttribute("type").toLowerCase() : "";
            a.modules.filter.tagType = g.tagName.toLowerCase();
            !1 !== a.definition.headerFilterLiveFilter && ("autocomplete" === a.definition.headerFilter || "autocomplete" === a.definition.editor && !0 === a.definition.headerFilter || (g.addEventListener("keyup", l), g.addEventListener("search", l), "number" == a.modules.filter.attrType && g.addEventListener("change", function(a) {
              f(g.value);
            }), "text" == a.modules.filter.attrType && "ie" !== this.table.browser && g.setAttribute("type", "search")), "input" != a.modules.filter.tagType && "select" != a.modules.filter.tagType && "textarea" != a.modules.filter.tagType || g.addEventListener("mousedown", function(a) {
              a.stopPropagation();
            }));
            n.appendChild(g);
            a.contentElement.appendChild(n);
            d.headerFilterElements.push(g);
            d.headerFilterColumns.push(a);
          } else {
            console.warn("Filter Error - Cannot add filter to " + l + " column, editor should return an instance of Node, the editor returned:", g);
          }
        } else {
          console.warn("Filter Error - Cannot add filter to " + l + " column, editor returned a value of false");
        }
      }
    } else {
      console.warn("Filter Error - Cannot add header filter, column has no field set:", a.definition.title);
    }
  };
  n.prototype.hideHeaderFilterElements = function() {
    this.headerFilterElements.forEach(function(a) {
      a.style.display = "none";
    });
  };
  n.prototype.showHeaderFilterElements = function() {
    this.headerFilterElements.forEach(function(a) {
      a.style.display = "";
    });
  };
  n.prototype.setHeaderFilterFocus = function(a) {
    a.modules.filter && a.modules.filter.headerElement ? a.modules.filter.headerElement.focus() : console.warn("Column Filter Focus Error - No header filter set on column:", a.getField());
  };
  n.prototype.setHeaderFilterValue = function(a, b) {
    a && (a.modules.filter && a.modules.filter.headerElement ? (this.generateHeaderFilterElement(a, b), a.modules.filter.success(b)) : console.warn("Column Filter Error - No header filter set on column:", a.getField()));
  };
  n.prototype.reloadHeaderFilter = function(a) {
    a && (a.modules.filter && a.modules.filter.headerElement ? this.generateHeaderFilterElement(a, a.modules.filter.value) : console.warn("Column Filter Error - No header filter set on column:", a.getField()));
  };
  n.prototype.hasChanged = function() {
    var a = this.changed;
    this.changed = !1;
    return a;
  };
  n.prototype.setFilter = function(a, b, c) {
    this.filterList = [];
    Array.isArray(a) || (a = [{field:a, type:b, value:c}]);
    this.addFilter(a);
  };
  n.prototype.addFilter = function(a, b, c) {
    var d = this;
    Array.isArray(a) || (a = [{field:a, type:b, value:c}]);
    a.forEach(function(a) {
      if (a = d.findFilter(a)) {
        d.filterList.push(a), d.changed = !0;
      }
    });
    this.table.options.persistentFilter && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("filter");
  };
  n.prototype.findFilter = function(a) {
    var b = this, c;
    if (Array.isArray(a)) {
      return this.findSubFilters(a);
    }
    var d = !1;
    "function" == typeof a.field ? d = function(b) {
      return a.field(b, a.type || {});
    } : b.filters[a.type] ? d = (c = b.table.columnManager.getColumnByField(a.field)) ? function(d) {
      return b.filters[a.type](a.value, c.getFieldValue(d));
    } : function(c) {
      return b.filters[a.type](a.value, c[a.field]);
    } : console.warn("Filter Error - No such filter type found, ignoring: ", a.type);
    a.func = d;
    return a.func ? a : !1;
  };
  n.prototype.findSubFilters = function(a) {
    var b = this, c = [];
    a.forEach(function(a) {
      (a = b.findFilter(a)) && c.push(a);
    });
    return c.length ? c : !1;
  };
  n.prototype.getFilters = function(a, b) {
    var c = [];
    a && (c = this.getHeaderFilters());
    this.filterList.forEach(function(a) {
      c.push({field:a.field, type:a.type, value:a.value});
    });
    b && c.forEach(function(a) {
      "function" == typeof a.type && (a.type = "function");
    });
    return c;
  };
  n.prototype.getHeaderFilters = function() {
    var a = [], b;
    for (b in this.headerFilters) {
      a.push({field:b, type:this.headerFilters[b].type, value:this.headerFilters[b].value});
    }
    return a;
  };
  n.prototype.removeFilter = function(a, b, c) {
    var d = this;
    Array.isArray(a) || (a = [{field:a, type:b, value:c}]);
    a.forEach(function(a) {
      var b = -1, b = "object" == _typeof(a.field) ? d.filterList.findIndex(function(b) {
        return a === b;
      }) : d.filterList.findIndex(function(b) {
        return a.field === b.field && a.type === b.type && a.value === b.value;
      });
      -1 < b ? (d.filterList.splice(b, 1), d.changed = !0) : console.warn("Filter Error - No matching filter type found, ignoring: ", a.type);
    });
    this.table.options.persistentFilter && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("filter");
  };
  n.prototype.clearFilter = function(a) {
    this.filterList = [];
    a && this.clearHeaderFilter();
    this.changed = !0;
    this.table.options.persistentFilter && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("filter");
  };
  n.prototype.clearHeaderFilter = function() {
    var a = this;
    this.headerFilters = {};
    this.headerFilterColumns.forEach(function(b) {
      b.modules.filter.value = null;
      a.reloadHeaderFilter(b);
    });
    this.changed = !0;
  };
  n.prototype.search = function(a, b, c, d) {
    var f = this, l = [], g = [];
    Array.isArray(b) || (b = [{field:b, type:c, value:d}]);
    b.forEach(function(a) {
      (a = f.findFilter(a)) && g.push(a);
    });
    this.table.rowManager.rows.forEach(function(b) {
      var c = !0;
      g.forEach(function(a) {
        f.filterRecurse(a, b.getData()) || (c = !1);
      });
      c && l.push("data" === a ? b.getData("data") : b.getComponent());
    });
    return l;
  };
  n.prototype.filter = function(a, b) {
    var c = this, d = [], f = [];
    c.table.options.dataFiltering && c.table.options.dataFiltering.call(c.table, c.getFilters());
    c.table.options.ajaxFiltering || !c.filterList.length && !Object.keys(c.headerFilters).length ? d = a.slice(0) : a.forEach(function(a) {
      c.filterRow(a) && d.push(a);
    });
    c.table.options.dataFiltered && (d.forEach(function(a) {
      f.push(a.getComponent());
    }), c.table.options.dataFiltered.call(c.table, c.getFilters(), f));
    return d;
  };
  n.prototype.filterRow = function(a, b) {
    var c = this, d = !0, f = a.getData();
    c.filterList.forEach(function(a) {
      c.filterRecurse(a, f) || (d = !1);
    });
    for (var l in c.headerFilters) {
      c.headerFilters[l].func(f) || (d = !1);
    }
    return d;
  };
  n.prototype.filterRecurse = function(a, b) {
    var c = this, d = !1;
    Array.isArray(a) ? a.forEach(function(a) {
      c.filterRecurse(a, b) && (d = !0);
    }) : d = a.func(b);
    return d;
  };
  n.prototype.filters = {"=":function(a, b) {
    return b == a ? !0 : !1;
  }, "<":function(a, b) {
    return b < a ? !0 : !1;
  }, "<=":function(a, b) {
    return b <= a ? !0 : !1;
  }, ">":function(a, b) {
    return b > a ? !0 : !1;
  }, ">=":function(a, b) {
    return b >= a ? !0 : !1;
  }, "!=":function(a, b) {
    return b != a ? !0 : !1;
  }, regex:function(a, b) {
    "string" == typeof a && (a = new RegExp(a));
    return a.test(b);
  }, like:function(a, b) {
    return null === a || "undefined" === typeof a ? b === a ? !0 : !1 : "undefined" !== typeof b && null !== b ? -1 < String(b).toLowerCase().indexOf(a.toLowerCase()) ? !0 : !1 : !1;
  }, "in":function(a, b) {
    if (Array.isArray(a)) {
      return -1 < a.indexOf(b);
    }
    console.warn("Filter Error - filter value is not an array:", a);
    return !1;
  }};
  r.prototype.registerModule("filter", n);
  n = function(a) {
    this.table = a;
  };
  n.prototype.initializeColumn = function(a) {
    var b = {params:a.definition.formatterParams || {}};
    switch(_typeof(a.definition.formatter)) {
      case "string":
        "tick" === a.definition.formatter && (a.definition.formatter = "tickCross", "undefined" == typeof b.params.crossElement && (b.params.crossElement = !1), console.warn("DEPRECATION WANRING - the tick formatter has been depricated, please use the tickCross formatter with the crossElement param set to false"));
        this.formatters[a.definition.formatter] ? b.formatter = this.formatters[a.definition.formatter] : (console.warn("Formatter Error - No such formatter found: ", a.definition.formatter), b.formatter = this.formatters.plaintext);
        break;
      case "function":
        b.formatter = a.definition.formatter;
        break;
      default:
        b.formatter = this.formatters.plaintext;
    }
    a.modules.format = b;
  };
  n.prototype.cellRendered = function(a) {
    a.column.modules.format.renderedCallback && a.column.modules.format.renderedCallback();
  };
  n.prototype.formatValue = function(a) {
    var b = a.getComponent(), c = "function" === typeof a.column.modules.format.params ? a.column.modules.format.params(b) : a.column.modules.format.params;
    return a.column.modules.format.formatter.call(this, b, c, function(b) {
      a.column.modules.format.renderedCallback = b;
    });
  };
  n.prototype.sanitizeHTML = function(a) {
    if (a) {
      var b = {"&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#39;", "/":"&#x2F;", "`":"&#x60;", "=":"&#x3D;"};
      return String(a).replace(/[&<>"'`=\/]/g, function(a) {
        return b[a];
      });
    }
    return a;
  };
  n.prototype.emptyToSpace = function(a) {
    return null === a || "undefined" === typeof a ? "&nbsp" : a;
  };
  n.prototype.getFormatter = function(a) {
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        this.formatters[a] ? a = this.formatters[a] : (console.warn("Formatter Error - No such formatter found: ", a), a = this.formatters.plaintext);
        break;
      case "function":
        break;
      default:
        a = this.formatters.plaintext;
    }
    return a;
  };
  n.prototype.formatters = {plaintext:function(a, b, c) {
    return this.emptyToSpace(this.sanitizeHTML(a.getValue()));
  }, html:function(a, b, c) {
    return a.getValue();
  }, textarea:function(a, b, c) {
    a.getElement().style.whiteSpace = "pre-wrap";
    return this.emptyToSpace(this.sanitizeHTML(a.getValue()));
  }, money:function(a, b, c) {
    var d = parseFloat(a.getValue());
    var f = b.decimal || ".";
    c = b.thousand || ",";
    var g = b.symbol || "", l = !!b.symbolAfter;
    b = "undefined" !== typeof b.precision ? b.precision : 2;
    if (isNaN(d)) {
      return this.emptyToSpace(this.sanitizeHTML(a.getValue()));
    }
    b = !1 !== b ? d.toFixed(b) : d;
    b = String(b).split(".");
    a = b[0];
    f = 1 < b.length ? f + b[1] : "";
    for (b = /(\d+)(\d{3})/; b.test(a);) {
      a = a.replace(b, "$1" + c + "$2");
    }
    return l ? a + f + g : g + a + f;
  }, link:function(a, b, c) {
    c = this.sanitizeHTML(a.getValue());
    var d = b.urlPrefix || "", f = this.emptyToSpace(c), g = document.createElement("a");
    if (b.labelField) {
      var l = a.getData();
      f = l[b.labelField];
    }
    if (b.label) {
      switch(_typeof(b.label)) {
        case "string":
          f = b.label;
          break;
        case "function":
          f = b.label(a);
      }
    }
    b.urlField && (l = a.getData(), c = l[b.urlField]);
    if (b.url) {
      switch(_typeof(b.url)) {
        case "string":
          c = b.url;
          break;
        case "function":
          c = b.url(a);
      }
    }
    g.setAttribute("href", d + c);
    b.target && g.setAttribute("target", b.target);
    g.innerHTML = this.emptyToSpace(f);
    return g;
  }, image:function(a, b, c) {
    c = document.createElement("img");
    c.setAttribute("src", a.getValue());
    switch(_typeof(b.height)) {
      case "number":
        c.style.height = b.height + "px";
        break;
      case "string":
        c.style.height = b.height;
    }
    switch(_typeof(b.width)) {
      case "number":
        c.style.width = b.width + "px";
        break;
      case "string":
        c.style.width = b.width;
    }
    c.addEventListener("load", function() {
      a.getRow().normalizeHeight();
    });
    return c;
  }, tickCross:function(a, b, c) {
    c = a.getValue();
    a = a.getElement();
    var d = b.allowEmpty, f = "undefined" !== typeof b.tickElement ? b.tickElement : '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>', 
    g = "undefined" !== typeof b.crossElement ? b.crossElement : '<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
    if (b.allowTruthy && c || !0 === c || "true" === c || "True" === c || 1 === c || "1" === c) {
      return a.setAttribute("aria-checked", !0), f || "";
    }
    if (!d || "null" !== c && "" !== c && null !== c && "undefined" !== typeof c) {
      return a.setAttribute("aria-checked", !1), g || "";
    }
    a.setAttribute("aria-checked", "mixed");
    return "";
  }, datetime:function(a, b, c) {
    var d = b.inputFormat || "YYYY-MM-DD hh:mm:ss";
    c = b.outputFormat || "DD/MM/YYYY hh:mm:ss";
    b = "undefined" !== typeof b.invalidPlaceholder ? b.invalidPlaceholder : "";
    a = a.getValue();
    d = moment(a, d);
    return d.isValid() ? d.format(c) : !0 === b ? a : "function" === typeof b ? b(a) : b;
  }, datetimediff:function(a, b, c) {
    var d = b.inputFormat || "YYYY-MM-DD hh:mm:ss";
    c = "undefined" !== typeof b.invalidPlaceholder ? b.invalidPlaceholder : "";
    var f = "undefined" !== typeof b.suffix ? b.suffix : !1, g = "undefined" !== typeof b.unit ? b.unit : void 0, l = "undefined" !== typeof b.humanize ? b.humanize : !1;
    b = "undefined" !== typeof b.date ? b.date : moment();
    a = a.getValue();
    d = moment(a, d);
    return d.isValid() ? l ? moment.duration(d.diff(b)).humanize(f) : d.diff(b, g) + (f ? " " + f : "") : !0 === c ? a : "function" === typeof c ? c(a) : c;
  }, lookup:function(a, b, c) {
    a = a.getValue();
    return "undefined" === typeof b[a] ? (console.warn("Missing display value for " + a), a) : b[a];
  }, star:function(a, b, c) {
    c = a.getValue();
    a = a.getElement();
    b = b && b.stars ? b.stars : 5;
    var d = document.createElement("span"), f = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    d.style.verticalAlign = "middle";
    f.setAttribute("width", "14");
    f.setAttribute("height", "14");
    f.setAttribute("viewBox", "0 0 512 512");
    f.setAttribute("xml:space", "preserve");
    f.style.padding = "0 1px";
    c = parseInt(c) < b ? parseInt(c) : b;
    for (var g = 1; g <= b; g++) {
      var l = f.cloneNode(!0);
      l.innerHTML = g <= c ? '<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>' : '<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
      d.appendChild(l);
    }
    a.style.whiteSpace = "nowrap";
    a.style.overflow = "hidden";
    a.style.textOverflow = "ellipsis";
    a.setAttribute("aria-label", c);
    return d;
  }, progress:function(a, b, c) {
    c = this.sanitizeHTML(a.getValue()) || 0;
    a = a.getElement();
    var d = b && b.max ? b.max : 100, f = b && b.min ? b.min : 0, g = b && b.legendAlign ? b.legendAlign : "center";
    var l = parseFloat(c) <= d ? parseFloat(c) : d;
    l = parseFloat(l) >= f ? parseFloat(l) : f;
    l = Math.round((l - f) / ((d - f) / 100));
    switch(_typeof(b.color)) {
      case "string":
        var p = b.color;
        break;
      case "function":
        p = b.color(c);
        break;
      case "object":
        if (Array.isArray(b.color)) {
          var h = 100 / b.color.length;
          h = Math.floor(l / h);
          h = Math.min(h, b.color.length - 1);
          h = Math.max(h, 0);
          p = b.color[h];
          break;
        }
      default:
        p = "#2DC214";
    }
    switch(_typeof(b.legend)) {
      case "string":
        var m = b.legend;
        break;
      case "function":
        m = b.legend(c);
        break;
      case "boolean":
        m = c;
        break;
      default:
        m = !1;
    }
    switch(_typeof(b.legendColor)) {
      case "string":
        var n = b.legendColor;
        break;
      case "function":
        n = b.legendColor(c);
        break;
      case "object":
        Array.isArray(b.legendColor) && (h = 100 / b.legendColor.length, h = Math.floor(l / h), h = Math.min(h, b.legendColor.length - 1), h = Math.max(h, 0), n = b.legendColor[h]);
        break;
      default:
        n = "#000";
    }
    a.style.minWidth = "30px";
    a.style.position = "relative";
    a.setAttribute("aria-label", l);
    return "<div style='position:absolute; top:8px; bottom:8px; left:4px; right:4px;'  data-max='" + d + "' data-min='" + f + "'><div style='position:relative; height:100%; width:calc(" + l + "%); background-color:" + p + "; display:inline-block;'></div></div>" + (m ? "<div style='position:absolute; top:4px; left:0; text-align:" + g + "; width:100%; color:" + n + ";'>" + m + "</div>" : "");
  }, color:function(a, b, c) {
    a.getElement().style.backgroundColor = this.sanitizeHTML(a.getValue());
    return "";
  }, buttonTick:function(a, b, c) {
    return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>';
  }, buttonCross:function(a, b, c) {
    return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
  }, rownum:function(a, b, c) {
    return this.table.rowManager.activeRows.indexOf(a.getRow()._getSelf()) + 1;
  }, handle:function(a, b, c) {
    a.getElement().classList.add("tabulator-row-handle");
    return "<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>";
  }, responsiveCollapse:function(a, b, c) {
    function d(b) {
      var c = a.getRow().getElement().getElementsByClassName("tabulator-responsive-collapse")[0];
      (f = b) ? (g.classList.add("open"), c && (c.style.display = "")) : (g.classList.remove("open"), c && (c.style.display = "none"));
    }
    var f = !1, g = document.createElement("div");
    g.classList.add("tabulator-responsive-collapse-toggle");
    g.innerHTML = "<span class='tabulator-responsive-collapse-toggle-open'>+</span><span class='tabulator-responsive-collapse-toggle-close'>-</span>";
    a.getElement().classList.add("tabulator-row-handle");
    this.table.options.responsiveLayoutCollapseStartOpen && (f = !0);
    g.addEventListener("click", function() {
      d(!f);
    });
    d(f);
    return g;
  }};
  r.prototype.registerModule("format", n);
  n = function(a) {
    this.table = a;
    this.leftColumns = [];
    this.rightColumns = [];
    this.rightMargin = this.leftMargin = 0;
    this.initializationMode = "left";
    this.active = !1;
  };
  n.prototype.reset = function() {
    this.initializationMode = "left";
    this.leftColumns = [];
    this.rightColumns = [];
    this.active = !1;
  };
  n.prototype.initializeColumn = function(a) {
    var b = {margin:0, edge:!1};
    a.definition.frozen ? a.parent.isGroup ? console.warn("Frozen Column Error - Grouped columns cannot be frozen") : a.isGroup ? console.warn("Frozen Column Error - Column Groups cannot be frozen") : (b.position = this.initializationMode, "left" == this.initializationMode ? this.leftColumns.push(a) : this.rightColumns.unshift(a), this.active = !0, a.modules.frozen = b) : this.initializationMode = "right";
  };
  n.prototype.layout = function() {
    var a = this, b = 0;
    a.active && (a.leftMargin = a._calcSpace(a.leftColumns, a.leftColumns.length), a.table.columnManager.headersElement.style.marginLeft = a.leftMargin + "px", a.rightMargin = a._calcSpace(a.rightColumns, a.rightColumns.length), a.table.columnManager.element.style.paddingRight = a.rightMargin + "px", a.table.rowManager.activeRows.forEach(function(b) {
      a.layoutRow(b);
    }), a.table.modExists("columnCalcs") && (a.table.modules.columnCalcs.topInitialized && a.table.modules.columnCalcs.topRow && a.layoutRow(a.table.modules.columnCalcs.topRow), a.table.modules.columnCalcs.botInitialized && a.table.modules.columnCalcs.botRow && a.layoutRow(a.table.modules.columnCalcs.botRow)), a.leftColumns.forEach(function(b, c) {
      b.modules.frozen.margin = a._calcSpace(a.leftColumns, c) + a.table.columnManager.scrollLeft;
      b.modules.frozen.edge = c == a.leftColumns.length - 1 ? !0 : !1;
      a.layoutColumn(b);
    }), b = a.table.rowManager.element.clientWidth + a.table.columnManager.scrollLeft, a.rightColumns.forEach(function(c, d) {
      c.modules.frozen.margin = b - a._calcSpace(a.rightColumns, d + 1);
      c.modules.frozen.edge = d == a.rightColumns.length - 1 ? !0 : !1;
      a.layoutColumn(c);
    }), this.table.rowManager.tableElement.style.marginRight = this.rightMargin + "px");
  };
  n.prototype.layoutColumn = function(a) {
    var b = this;
    b.layoutElement(a.getElement(), a);
    a.cells.forEach(function(c) {
      b.layoutElement(c.getElement(), a);
    });
  };
  n.prototype.layoutRow = function(a) {
    a.getElement().style.paddingLeft = this.leftMargin + "px";
  };
  n.prototype.layoutElement = function(a, b) {
    b.modules.frozen && (a.style.position = "absolute", a.style.left = b.modules.frozen.margin + "px", a.classList.add("tabulator-frozen"), b.modules.frozen.edge && a.classList.add("tabulator-frozen-" + b.modules.frozen.position));
  };
  n.prototype._calcSpace = function(a, b) {
    for (var c = 0, d = 0; d < b; d++) {
      a[d].visible && (c += a[d].getWidth());
    }
    return c;
  };
  r.prototype.registerModule("frozenColumns", n);
  n = function(a) {
    this.table = a;
    this.topElement = document.createElement("div");
    this.rows = [];
    this.displayIndex = 0;
  };
  n.prototype.initialize = function() {
    this.rows = [];
    this.topElement.classList.add("tabulator-frozen-rows-holder");
    this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);
  };
  n.prototype.setDisplayIndex = function(a) {
    this.displayIndex = a;
  };
  n.prototype.getDisplayIndex = function() {
    return this.displayIndex;
  };
  n.prototype.isFrozen = function() {
    return !!this.rows.length;
  };
  n.prototype.getRows = function(a) {
    var b = a.slice(0);
    this.rows.forEach(function(a) {
      a = b.indexOf(a);
      -1 < a && b.splice(a, 1);
    });
    return b;
  };
  n.prototype.freezeRow = function(a) {
    a.modules.frozen ? console.warn("Freeze Error - Row is already frozen") : (a.modules.frozen = !0, this.topElement.appendChild(a.getElement()), a.initialize(), a.normalizeHeight(), this.table.rowManager.adjustTableSize(), this.rows.push(a), this.table.rowManager.refreshActiveData("display"), this.styleRows());
  };
  n.prototype.unfreezeRow = function(a) {
    var b = this.rows.indexOf(a);
    a.modules.frozen ? (a.modules.frozen = !1, a = a.getElement(), a.parentNode.removeChild(a), this.table.rowManager.adjustTableSize(), this.rows.splice(b, 1), this.table.rowManager.refreshActiveData("display"), this.rows.length && this.styleRows()) : console.warn("Freeze Error - Row is already unfrozen");
  };
  n.prototype.styleRows = function(a) {
    var b = this;
    this.rows.forEach(function(a, c) {
      b.table.rowManager.styleRow(a, c);
    });
  };
  r.prototype.registerModule("frozenRows", n);
  var v = function(a) {
    this._group = a;
    this.type = "GroupComponent";
  };
  v.prototype.getKey = function() {
    return this._group.key;
  };
  v.prototype.getElement = function() {
    return this._group.element;
  };
  v.prototype.getRows = function() {
    return this._group.getRows(!0);
  };
  v.prototype.getSubGroups = function() {
    return this._group.getSubGroups(!0);
  };
  v.prototype.getParentGroup = function() {
    return this._group.parent ? this._group.parent.getComponent() : !1;
  };
  v.prototype.getVisibility = function() {
    return this._group.visible;
  };
  v.prototype.show = function() {
    this._group.show();
  };
  v.prototype.hide = function() {
    this._group.hide();
  };
  v.prototype.toggle = function() {
    this._group.toggleVisibility();
  };
  v.prototype._getSelf = function() {
    return this._group;
  };
  v.prototype.getTable = function() {
    return this._group.table;
  };
  var w = function(a, b, c, d, f, g, h) {
    this.groupManager = a;
    this.parent = b;
    this.key = d;
    this.level = c;
    this.field = f;
    this.addRow = (this.hasSubGroups = c < a.groupIDLookups.length - 1) ? this._addRowToGroup : this._addRow;
    this.type = "group";
    this.old = h;
    this.rows = [];
    this.groups = [];
    this.groupList = [];
    this.generator = g;
    this.elementContents = !1;
    this.outerHeight = this.height = 0;
    this.initialized = !1;
    this.calcs = {};
    this.initialized = !1;
    this.modules = {};
    this.visible = h ? h.visible : "undefined" !== typeof a.startOpen[c] ? a.startOpen[c] : a.startOpen[0];
    this.createElements();
    this.addBindings();
    this.createValueGroups();
  };
  w.prototype.createElements = function() {
    this.element = document.createElement("div");
    this.element.classList.add("tabulator-row");
    this.element.classList.add("tabulator-group");
    this.element.classList.add("tabulator-group-level-" + this.level);
    this.element.setAttribute("role", "rowgroup");
    this.arrowElement = document.createElement("div");
    this.arrowElement.classList.add("tabulator-arrow");
  };
  w.prototype.createValueGroups = function() {
    var a = this, b = this.level + 1;
    this.groupManager.allowedValues && this.groupManager.allowedValues[b] && this.groupManager.allowedValues[b].forEach(function(c) {
      a._createGroup(c, b);
    });
  };
  w.prototype.addBindings = function() {
    var a = this;
    a.groupManager.table.options.groupClick && a.element.addEventListener("click", function(b) {
      a.groupManager.table.options.groupClick(b, a.getComponent());
    });
    a.groupManager.table.options.groupDblClick && a.element.addEventListener("dblclick", function(b) {
      a.groupManager.table.options.groupDblClick(b, a.getComponent());
    });
    a.groupManager.table.options.groupContext && a.element.addEventListener("contextmenu", function(b) {
      a.groupManager.table.options.groupContext(b, a.getComponent());
    });
    if (a.groupManager.table.options.groupTap) {
      var b = !1;
      a.element.addEventListener("touchstart", function(a) {
        b = !0;
      });
      a.element.addEventListener("touchend", function(c) {
        b && a.groupManager.table.options.groupTap(c, a.getComponent());
        b = !1;
      });
    }
    if (a.groupManager.table.options.groupDblTap) {
      var c = null;
      a.element.addEventListener("touchend", function(b) {
        c ? (clearTimeout(c), c = null, a.groupManager.table.options.groupDblTap(b, a.getComponent())) : c = setTimeout(function() {
          clearTimeout(c);
          c = null;
        }, 300);
      });
    }
    if (a.groupManager.table.options.groupTapHold) {
      var d = null;
      a.element.addEventListener("touchstart", function(c) {
        clearTimeout(d);
        d = setTimeout(function() {
          clearTimeout(d);
          d = null;
          b = !1;
          a.groupManager.table.options.groupTapHold(c, a.getComponent());
        }, 1000);
      });
      a.element.addEventListener("touchend", function(a) {
        clearTimeout(d);
        d = null;
      });
    }
    if (a.groupManager.table.options.groupToggleElement) {
      var f = "arrow" == a.groupManager.table.options.groupToggleElement ? a.arrowElement : a.element;
      f.addEventListener("click", function(b) {
        b.stopPropagation();
        b.stopImmediatePropagation();
        a.toggleVisibility();
      });
    }
  };
  w.prototype._createGroup = function(a, b) {
    var c = b + "_" + a;
    a = new w(this.groupManager, this, b, a, this.groupManager.groupIDLookups[b].field, this.groupManager.headerGenerator[b] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[c] : !1);
    this.groups[c] = a;
    this.groupList.push(a);
  };
  w.prototype._addRowToGroup = function(a) {
    var b = this.level + 1;
    if (this.hasSubGroups) {
      var c = this.groupManager.groupIDLookups[b].func(a.getData()), d = b + "_" + c;
      this.groupManager.allowedValues && this.groupManager.allowedValues[b] ? this.groups[d] && this.groups[d].addRow(a) : (this.groups[d] || this._createGroup(c, b), this.groups[d].addRow(a));
    }
  };
  w.prototype._addRow = function(a) {
    this.rows.push(a);
    a.modules.group = this;
  };
  w.prototype.insertRow = function(a, b, c) {
    var d = this.conformRowData({});
    a.updateData(d);
    b = this.rows.indexOf(b);
    -1 < b ? c ? this.rows.splice(b + 1, 0, a) : this.rows.splice(b, 0, a) : c ? this.rows.push(a) : this.rows.unshift(a);
    a.modules.group = this;
    this.generateGroupHeaderContents();
    this.groupManager.table.modExists("columnCalcs") && "table" != this.groupManager.table.options.columnCalcs && this.groupManager.table.modules.columnCalcs.recalcGroup(this);
  };
  w.prototype.getRowIndex = function(a) {
  };
  w.prototype.conformRowData = function(a) {
    this.field ? a[this.field] = this.key : console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function");
    this.parent && (a = this.parent.conformRowData(a));
    return a;
  };
  w.prototype.removeRow = function(a) {
    a = this.rows.indexOf(a);
    -1 < a && this.rows.splice(a, 1);
    this.rows.length ? (this.generateGroupHeaderContents(), this.groupManager.table.modExists("columnCalcs") && "table" != this.groupManager.table.options.columnCalcs && this.groupManager.table.modules.columnCalcs.recalcGroup(this)) : (this.parent ? this.parent.removeGroup(this) : this.groupManager.removeGroup(this), this.groupManager.updateGroupRows(!0));
  };
  w.prototype.removeGroup = function(a) {
    var b = a.level + "_" + a.key;
    this.groups[b] && (delete this.groups[b], a = this.groupList.indexOf(a), -1 < a && this.groupList.splice(a, 1), this.groupList.length || (this.parent ? this.parent.removeGroup(this) : this.groupManager.removeGroup(this)));
  };
  w.prototype.getHeadersAndRows = function(a) {
    var b = [];
    b.push(this);
    this._visSet();
    this.visible ? this.groupList.length ? this.groupList.forEach(function(c) {
      b = b.concat(c.getHeadersAndRows(a));
    }) : (!a && "table" != this.groupManager.table.options.columnCalcs && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasTopCalcs() && (this.calcs.top && this.calcs.top.detachElement(), this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows), b.push(this.calcs.top)), b = b.concat(this.rows), !a && "table" != this.groupManager.table.options.columnCalcs && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs() && 
    (this.calcs.bottom && this.calcs.bottom.detachElement(), this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows), b.push(this.calcs.bottom))) : !this.groupList.length && "table" != this.groupManager.table.options.columnCalcs && this.groupManager.table.options.groupClosedShowCalcs && this.groupManager.table.modExists("columnCalcs") && (!a && this.groupManager.table.modules.columnCalcs.hasTopCalcs() && (this.calcs.top && this.calcs.top.detachElement(), this.calcs.top = 
    this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows), b.push(this.calcs.top)), !a && this.groupManager.table.modules.columnCalcs.hasBottomCalcs() && (this.calcs.bottom && this.calcs.bottom.detachElement(), this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows), b.push(this.calcs.bottom)));
    return b;
  };
  w.prototype.getData = function(a, b) {
    var c = [];
    this._visSet();
    (!a || a && this.visible) && this.rows.forEach(function(a) {
      c.push(a.getData(b || "data"));
    });
    return c;
  };
  w.prototype.getRowCount = function() {
    var a = 0;
    this.groupList.length ? this.groupList.forEach(function(b) {
      a += b.getRowCount();
    }) : a = this.rows.length;
    return a;
  };
  w.prototype.toggleVisibility = function() {
    this.visible ? this.hide() : this.show();
  };
  w.prototype.hide = function() {
    this.visible = !1;
    "classic" != this.groupManager.table.rowManager.getRenderMode() || this.groupManager.table.options.pagination ? this.groupManager.updateGroupRows(!0) : (this.element.classList.remove("tabulator-group-visible"), this.groupList.length ? this.groupList.forEach(function(a) {
      a.getHeadersAndRows().forEach(function(a) {
        a.detachElement();
      });
    }) : this.rows.forEach(function(a) {
      a = a.getElement();
      a.parentNode.removeChild(a);
    }), this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex()), this.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth());
    this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), !1);
  };
  w.prototype.show = function() {
    this.visible = !0;
    if ("classic" != this.groupManager.table.rowManager.getRenderMode() || this.groupManager.table.options.pagination) {
      this.groupManager.updateGroupRows(!0);
    } else {
      this.element.classList.add("tabulator-group-visible");
      var a = this.getElement();
      this.groupList.length ? this.groupList.forEach(function(b) {
        b.getHeadersAndRows().forEach(function(b) {
          var c = b.getElement();
          a.parentNode.insertBefore(c, a.nextSibling);
          b.initialize();
          a = c;
        });
      }) : this.rows.forEach(function(b) {
        var c = b.getElement();
        a.parentNode.insertBefore(c, a.nextSibling);
        b.initialize();
        a = c;
      });
      this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());
      this.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth();
    }
    this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), !0);
  };
  w.prototype._visSet = function() {
    var a = [];
    "function" == typeof this.visible && (this.rows.forEach(function(b) {
      a.push(b.getData());
    }), this.visible = this.visible(this.key, this.getRowCount(), a, this.getComponent()));
  };
  w.prototype.getRowGroup = function(a) {
    var b = !1;
    this.groupList.length ? this.groupList.forEach(function(c) {
      (c = c.getRowGroup(a)) && (b = c);
    }) : this.rows.find(function(b) {
      return b === a;
    }) && (b = this);
    return b;
  };
  w.prototype.getSubGroups = function(a) {
    var b = [];
    this.groupList.forEach(function(c) {
      b.push(a ? c.getComponent() : c);
    });
    return b;
  };
  w.prototype.getRows = function(a) {
    var b = [];
    this.rows.forEach(function(c) {
      b.push(a ? c.getComponent() : c);
    });
    return b;
  };
  w.prototype.generateGroupHeaderContents = function() {
    var a = [];
    this.rows.forEach(function(b) {
      a.push(b.getData());
    });
    for (this.elementContents = this.generator(this.key, this.getRowCount(), a, this.getComponent()); this.element.firstChild;) {
      this.element.removeChild(this.element.firstChild);
    }
    "string" === typeof this.elementContents ? this.element.innerHTML = this.elementContents : this.element.appendChild(this.elementContents);
    this.element.insertBefore(this.arrowElement, this.element.firstChild);
  };
  w.prototype.getElement = function() {
    this.addBindingsd = !1;
    this._visSet();
    this.visible ? this.element.classList.add("tabulator-group-visible") : this.element.classList.remove("tabulator-group-visible");
    for (var a = 0; a < this.element.childNodes.length; ++a) {
      this.element.childNodes[a].parentNode.removeChild(this.element.childNodes[a]);
    }
    this.generateGroupHeaderContents();
    return this.element;
  };
  w.prototype.detachElement = function() {
    this.element && this.element.parentNode && this.element.parentNode.removeChild(this.element);
  };
  w.prototype.normalizeHeight = function() {
    this.setHeight(this.element.clientHeight);
  };
  w.prototype.initialize = function(a) {
    if (!this.initialized || a) {
      this.normalizeHeight(), this.initialized = !0;
    }
  };
  w.prototype.reinitialize = function() {
    this.initialized = !1;
    this.height = 0;
    r.prototype.helpers.elVisible(this.element) && this.initialize(!0);
  };
  w.prototype.setHeight = function(a) {
    this.height != a && (this.height = a, this.outerHeight = this.element.offsetHeight);
  };
  w.prototype.getHeight = function() {
    return this.outerHeight;
  };
  w.prototype.getGroup = function() {
    return this;
  };
  w.prototype.reinitializeHeight = function() {
  };
  w.prototype.calcHeight = function() {
  };
  w.prototype.setCellHeight = function() {
  };
  w.prototype.clearCellHeight = function() {
  };
  w.prototype.getComponent = function() {
    return new v(this);
  };
  n = function(a) {
    this.table = a;
    this.groupIDLookups = !1;
    this.startOpen = [function() {
      return !1;
    }];
    this.headerGenerator = [function() {
      return "";
    }];
    this.groupList = [];
    this.allowedValues = !1;
    this.groups = {};
    this.displayIndex = 0;
  };
  n.prototype.initialize = function() {
    var a = this, b = a.table.options.groupBy, c = a.table.options.groupStartOpen, d = a.table.options.groupHeader;
    this.allowedValues = a.table.options.groupValues;
    a.headerGenerator = [function() {
      return "";
    }];
    this.startOpen = [function() {
      return !1;
    }];
    a.table.modules.localize.bind("groups|item", function(b, c) {
      a.headerGenerator[0] = function(a, d, f) {
        return ("undefined" === typeof a ? "" : a) + "<span>(" + d + " " + (1 === d ? b : c.groups.items) + ")</span>";
      };
    });
    this.groupIDLookups = [];
    Array.isArray(b) || b ? this.table.modExists("columnCalcs") && "table" != this.table.options.columnCalcs && "both" != this.table.options.columnCalcs && this.table.modules.columnCalcs.removeCalcs() : this.table.modExists("columnCalcs") && "group" != this.table.options.columnCalcs && this.table.columnManager.getRealColumns().forEach(function(b) {
      b.definition.topCalc && a.table.modules.columnCalcs.initializeTopRow();
      b.definition.bottomCalc && a.table.modules.columnCalcs.initializeBottomRow();
    });
    Array.isArray(b) || (b = [b]);
    b.forEach(function(b, c) {
      var d;
      var f = "function" == typeof b ? b : (d = a.table.columnManager.getColumnByField(b)) ? function(a) {
        return d.getFieldValue(a);
      } : function(a) {
        return a[b];
      };
      a.groupIDLookups.push({field:"function" === typeof b ? !1 : b, func:f, values:a.allowedValues ? a.allowedValues[c] : !1});
    });
    c && (Array.isArray(c) || (c = [c]), c.forEach(function(a) {
    }), a.startOpen = c);
    d && (a.headerGenerator = Array.isArray(d) ? d : [d]);
    this.initialized = !0;
  };
  n.prototype.setDisplayIndex = function(a) {
    this.displayIndex = a;
  };
  n.prototype.getDisplayIndex = function() {
    return this.displayIndex;
  };
  n.prototype.getRows = function(a) {
    return this.groupIDLookups.length ? (this.table.options.dataGrouping.call(this.table), this.generateGroups(a), this.table.options.dataGrouped && this.table.options.dataGrouped.call(this.table, this.getGroups(!0)), this.updateGroupRows()) : a.slice(0);
  };
  n.prototype.getGroups = function(a) {
    var b = [];
    this.groupList.forEach(function(c) {
      b.push(a ? c.getComponent() : c);
    });
    return b;
  };
  n.prototype.pullGroupListData = function(a) {
    var b = this, c = [];
    a.forEach(function(a) {
      var d = {level:0, rowCount:0, headerContent:""}, f = [];
      a.hasSubGroups ? (f = b.pullGroupListData(a.groupList), d.level = a.level, d.rowCount = f.length - a.groupList.length, d.headerContent = a.generator(a.key, d.rowCount, a.rows, a), c.push(d), c = c.concat(f)) : (d.level = a.level, d.headerContent = a.generator(a.key, a.rows.length, a.rows, a), d.rowCount = a.getRows().length, c.push(d), a.getRows().forEach(function(a) {
        c.push(a.getData("data"));
      }));
    });
    return c;
  };
  n.prototype.getGroupedData = function() {
    return this.pullGroupListData(this.groupList);
  };
  n.prototype.getRowGroup = function(a) {
    var b = !1;
    this.groupList.forEach(function(c) {
      (c = c.getRowGroup(a)) && (b = c);
    });
    return b;
  };
  n.prototype.countGroups = function() {
    return this.groupList.length;
  };
  n.prototype.generateGroups = function(a) {
    var b = this, c = b.groups;
    b.groups = {};
    b.groupList = [];
    this.allowedValues && this.allowedValues[0] ? (this.allowedValues[0].forEach(function(a) {
      b.createGroup(a, 0, c);
    }), a.forEach(function(a) {
      b.assignRowToExistingGroup(a, c);
    })) : a.forEach(function(a) {
      b.assignRowToGroup(a, c);
    });
  };
  n.prototype.createGroup = function(a, b, c) {
    var d = b + "_" + a;
    c = c || [];
    a = new w(this, !1, b, a, this.groupIDLookups[0].field, this.headerGenerator[0], c[d]);
    this.groups[d] = a;
    this.groupList.push(a);
  };
  n.prototype.assignRowToGroup = function(a, b) {
    var c = this.groupIDLookups[0].func(a.getData()), d = "0_" + c;
    this.groups[d] || this.createGroup(c, 0, b);
    this.groups[d].addRow(a);
  };
  n.prototype.assignRowToExistingGroup = function(a, b) {
    b = "0_" + this.groupIDLookups[0].func(a.getData());
    this.groups[b] && this.groups[b].addRow(a);
  };
  n.prototype.assignRowToGroup = function(a, b) {
    var c = this.groupIDLookups[0].func(a.getData()), d = !this.groups["0_" + c];
    d && this.createGroup(c, 0, b);
    this.groups["0_" + c].addRow(a);
    return !d;
  };
  n.prototype.updateGroupRows = function(a) {
    var b = [];
    this.groupList.forEach(function(a) {
      b = b.concat(a.getHeadersAndRows());
    });
    a && (a = this.table.rowManager.setDisplayRows(b, this.getDisplayIndex()), !0 !== a && this.setDisplayIndex(a), this.table.rowManager.refreshActiveData("group", !0, !0));
    return b;
  };
  n.prototype.scrollHeaders = function(a) {
    this.groupList.forEach(function(b) {
      b.arrowElement.style.marginLeft = a + "px";
    });
  };
  n.prototype.removeGroup = function(a) {
    var b = a.level + "_" + a.key;
    this.groups[b] && (delete this.groups[b], a = this.groupList.indexOf(a), -1 < a && this.groupList.splice(a, 1));
  };
  r.prototype.registerModule("groupRows", n);
  n = function(a) {
    this.table = a;
    this.history = [];
    this.index = -1;
  };
  n.prototype.clear = function() {
    this.history = [];
    this.index = -1;
  };
  n.prototype.action = function(a, b, c) {
    this.history = this.history.slice(0, this.index + 1);
    this.history.push({type:a, component:b, data:c});
    this.index++;
  };
  n.prototype.getHistoryUndoSize = function() {
    return this.index + 1;
  };
  n.prototype.getHistoryRedoSize = function() {
    return this.history.length - (this.index + 1);
  };
  n.prototype.undo = function() {
    if (-1 < this.index) {
      var a = this.history[this.index];
      this.undoers[a.type].call(this, a);
      this.index--;
      this.table.options.historyUndo.call(this.table, a.type, a.component.getComponent(), a.data);
      return !0;
    }
    console.warn("History Undo Error - No more history to undo");
    return !1;
  };
  n.prototype.redo = function() {
    if (this.history.length - 1 > this.index) {
      this.index++;
      var a = this.history[this.index];
      this.redoers[a.type].call(this, a);
      this.table.options.historyRedo.call(this.table, a.type, a.component.getComponent(), a.data);
      return !0;
    }
    console.warn("History Redo Error - No more history to redo");
    return !1;
  };
  n.prototype.undoers = {cellEdit:function(a) {
    a.component.setValueProcessData(a.data.oldValue);
  }, rowAdd:function(a) {
    a.component.deleteActual();
  }, rowDelete:function(a) {
    var b = this.table.rowManager.addRowActual(a.data.data, a.data.pos, a.data.index);
    this._rebindRow(a.component, b);
  }, rowMove:function(a) {
    this.table.rowManager.moveRowActual(a.component, this.table.rowManager.rows[a.data.pos], !1);
    this.table.rowManager.redraw();
  }};
  n.prototype.redoers = {cellEdit:function(a) {
    a.component.setValueProcessData(a.data.newValue);
  }, rowAdd:function(a) {
    var b = this.table.rowManager.addRowActual(a.data.data, a.data.pos, a.data.index);
    this._rebindRow(a.component, b);
  }, rowDelete:function(a) {
    a.component.deleteActual();
  }, rowMove:function(a) {
    this.table.rowManager.moveRowActual(a.component, this.table.rowManager.rows[a.data.pos], !1);
    this.table.rowManager.redraw();
  }};
  n.prototype._rebindRow = function(a, b) {
    this.history.forEach(function(c) {
      if (c.component instanceof g) {
        c.component === a && (c.component = b);
      } else {
        if (c.component instanceof m && c.component.row === a) {
          var d = c.component.column.getField();
          d && (c.component = b.getCell(d));
        }
      }
    });
  };
  r.prototype.registerModule("history", n);
  n = function(a) {
    this.table = a;
    this.fieldIndex = [];
    this.hasIndex = !1;
  };
  n.prototype.parseTable = function() {
    var a = this.table.element, b = this.table.options, c = a.getElementsByTagName("th"), d = a.getElementsByTagName("tbody")[0], f = [];
    this.hasIndex = !1;
    this.table.options.htmlImporting.call(this.table);
    d = d ? d.getElementsByTagName("tr") : [];
    this._extractOptions(a, b);
    c.length ? this._extractHeaders(c, d) : this._generateBlankHeaders(c, d);
    for (c = 0; c < d.length; c++) {
      var g = d[c].getElementsByTagName("td"), h = {};
      this.hasIndex || (h[b.index] = c);
      for (var m = 0; m < g.length; m++) {
        var n = g[m];
        "undefined" !== typeof this.fieldIndex[m] && (h[this.fieldIndex[m]] = n.innerHTML);
      }
      f.push(h);
    }
    d = document.createElement("div");
    c = a.attributes;
    for (m in c) {
      "object" == _typeof(c[m]) && d.setAttribute(c[m].name, c[m].value);
    }
    a.parentNode.replaceChild(d, a);
    b.data = f;
    this.table.options.htmlImported.call(this.table);
    this.table.element = d;
  };
  n.prototype._extractOptions = function(a, b) {
    a = a.attributes;
    for (var c in a) {
      var d = a[c];
      if (d && "object" == ("undefined" === typeof d ? "undefined" : _typeof(d)) && d.name && 0 === d.name.indexOf("tabulator-")) {
        var f = d.name.replace("tabulator-", "");
        for (var g in b) {
          g.toLowerCase() == f && (b[g] = this._attribValue(d.value));
        }
      }
    }
  };
  n.prototype._attribValue = function(a) {
    return "true" === a ? !0 : "false" === a ? !1 : a;
  };
  n.prototype._findCol = function(a) {
    return this.table.options.columns.find(function(b) {
      return b.title === a;
    }) || !1;
  };
  n.prototype._extractHeaders = function(a, b) {
    for (b = 0; b < a.length; b++) {
      var c = a[b], d = !1, f = this._findCol(c.textContent), g;
      f ? d = !0 : f = {title:c.textContent.trim()};
      f.field || (f.field = c.textContent.trim().toLowerCase().replace(" ", "_"));
      (g = c.getAttribute("width")) && !f.width && (f.width = g);
      g = c.attributes;
      this._extractOptions(c, f);
      for (var l in g) {
        var c = g[l];
        if (c && "object" == ("undefined" === typeof c ? "undefined" : _typeof(c)) && c.name && 0 === c.name.indexOf("tabulator-")) {
          var h = c.name.replace("tabulator-", "");
          f[h] = this._attribValue(c.value);
        }
      }
      this.fieldIndex[b] = f.field;
      f.field == this.table.options.index && (this.hasIndex = !0);
      d || this.table.options.columns.push(f);
    }
  };
  n.prototype._generateBlankHeaders = function(a, b) {
    for (b = 0; b < a.length; b++) {
      var c = a[b], d = {title:"", field:"col" + b};
      this.fieldIndex[b] = d.field;
      if (c = c.getAttribute("width")) {
        d.width = c;
      }
      this.table.options.columns.push(d);
    }
  };
  r.prototype.registerModule("htmlTableImport", n);
  n = function(a) {
    this.table = a;
    this.pressedKeys = this.watchKeys = null;
    this.keydownBinding = this.keyupBinding = !1;
  };
  n.prototype.initialize = function() {
    var a = this.table.options.keybindings, b = {};
    this.watchKeys = {};
    this.pressedKeys = [];
    if (!1 !== a) {
      for (var c in this.bindings) {
        b[c] = this.bindings[c];
      }
      if (Object.keys(a).length) {
        for (var d in a) {
          b[d] = a[d];
        }
      }
      this.mapBindings(b);
      this.bindEvents();
    }
  };
  n.prototype.mapBindings = function(a) {
    var b = this, c = this, d = function(d) {
      b.actions[d] ? a[d] && ("object" !== _typeof(a[d]) && (a[d] = [a[d]]), a[d].forEach(function(a) {
        c.mapBinding(d, a);
      })) : console.warn("Key Binding Error - no such action:", d);
    }, f;
    for (f in a) {
      d(f);
    }
  };
  n.prototype.mapBinding = function(a, b) {
    var c = this, d = {action:this.actions[a], keys:[], ctrl:!1, shift:!1};
    b.toString().toLowerCase().split(" ").join("").split("+").forEach(function(a) {
      switch(a) {
        case "ctrl":
          d.ctrl = !0;
          break;
        case "shift":
          d.shift = !0;
          break;
        default:
          a = parseInt(a), d.keys.push(a), c.watchKeys[a] || (c.watchKeys[a] = []), c.watchKeys[a].push(d);
      }
    });
  };
  n.prototype.bindEvents = function() {
    var a = this;
    this.keyupBinding = function(b) {
      var c = b.keyCode, d = a.watchKeys[c];
      d && (a.pressedKeys.push(c), d.forEach(function(c) {
        a.checkBinding(b, c);
      }));
    };
    this.keydownBinding = function(b) {
      b = b.keyCode;
      a.watchKeys[b] && (b = a.pressedKeys.indexOf(b), -1 < b && a.pressedKeys.splice(b, 1));
    };
    this.table.element.addEventListener("keydown", this.keyupBinding);
    this.table.element.addEventListener("keyup", this.keydownBinding);
  };
  n.prototype.clearBindings = function() {
    this.keyupBinding && this.table.element.removeEventListener("keydown", this.keyupBinding);
    this.keydownBinding && this.table.element.removeEventListener("keyup", this.keydownBinding);
  };
  n.prototype.checkBinding = function(a, b) {
    var c = this, d = !0;
    return a.ctrlKey == b.ctrl && a.shiftKey == b.shift ? (b.keys.forEach(function(a) {
      -1 == c.pressedKeys.indexOf(a) && (d = !1);
    }), d && b.action.call(c, a), !0) : !1;
  };
  n.prototype.bindings = {navPrev:"shift + 9", navNext:9, navUp:38, navDown:40, scrollPageUp:33, scrollPageDown:34, scrollToStart:36, scrollToEnd:35, undo:"ctrl + 90", redo:"ctrl + 89", copyToClipboard:"ctrl + 67"};
  n.prototype.actions = {keyBlock:function(a) {
    a.stopPropagation();
    a.preventDefault();
  }, scrollPageUp:function(a) {
    var b = this.table.rowManager, c = b.scrollTop - b.height;
    a.preventDefault();
    b.displayRowsCount && (0 <= c ? b.element.scrollTop = c : b.scrollToRow(b.getDisplayRows()[0]));
    this.table.element.focus();
  }, scrollPageDown:function(a) {
    var b = this.table.rowManager, c = b.scrollTop + b.height, d = b.element.scrollHeight;
    a.preventDefault();
    b.displayRowsCount && (c <= d ? b.element.scrollTop = c : b.scrollToRow(b.getDisplayRows()[b.displayRowsCount - 1]));
    this.table.element.focus();
  }, scrollToStart:function(a) {
    var b = this.table.rowManager;
    a.preventDefault();
    b.displayRowsCount && b.scrollToRow(b.getDisplayRows()[0]);
    this.table.element.focus();
  }, scrollToEnd:function(a) {
    var b = this.table.rowManager;
    a.preventDefault();
    b.displayRowsCount && b.scrollToRow(b.getDisplayRows()[b.displayRowsCount - 1]);
    this.table.element.focus();
  }, navPrev:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().prev());
  }, navNext:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().next());
  }, navLeft:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().left());
  }, navRight:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().right());
  }, navUp:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().up());
  }, navDown:function(a) {
    var b;
    this.table.modExists("edit") && (b = this.table.modules.edit.currentCell) && (a.preventDefault(), b.nav().down());
  }, undo:function(a) {
    if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
      var b = this.table.modules.edit.currentCell;
      b || (a.preventDefault(), this.table.modules.history.undo());
    }
  }, redo:function(a) {
    if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
      var b = this.table.modules.edit.currentCell;
      b || (a.preventDefault(), this.table.modules.history.redo());
    }
  }, copyToClipboard:function(a) {
    this.table.modules.edit.currentCell || this.table.modExists("clipboard", !0) && this.table.modules.clipboard.copy(this.table.options.selectable && "highlight" != this.table.options.selectable ? "selected" : "active", null, null, null, !0);
  }};
  r.prototype.registerModule("keybindings", n);
  n = function(a) {
    this.table = a;
    this.placeholderElement = this.createPlaceholderElement();
    this.checkTimeout = this.hoverElement = !1;
    this.checkPeriod = 250;
    this.toColAfter = this.toCol = this.moving = !1;
    this.startX = 0;
    this.autoScrollMargin = 40;
    this.autoScrollStep = 5;
    this.autoScrollTimeout = !1;
    this.moveHover = this.moveHover.bind(this);
    this.endMove = this.endMove.bind(this);
  };
  n.prototype.createPlaceholderElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-col");
    a.classList.add("tabulator-col-placeholder");
    return a;
  };
  n.prototype.initializeColumn = function(a) {
    var b = this, c = {};
    if (!a.modules.frozen) {
      var d = a.getElement();
      c.mousemove = function(c) {
        if (a.parent === b.moving.parent) {
          if (c.pageX - r.prototype.helpers.elOffset(d).left + b.table.columnManager.element.scrollLeft > a.getWidth() / 2) {
            b.toCol === a && b.toColAfter || (d.parentNode.insertBefore(b.placeholderElement, d.nextSibling), b.moveColumn(a, !0));
          } else {
            if (b.toCol !== a || b.toColAfter) {
              d.parentNode.insertBefore(b.placeholderElement, d), b.moveColumn(a, !1);
            }
          }
        }
      }.bind(b);
      d.addEventListener("mousedown", function(c) {
        1 === c.which && (b.checkTimeout = setTimeout(function() {
          b.startMove(c, a);
        }, b.checkPeriod));
      });
      d.addEventListener("mouseup", function(a) {
        1 === a.which && b.checkTimeout && clearTimeout(b.checkTimeout);
      });
    }
    a.modules.moveColumn = c;
  };
  n.prototype.startMove = function(a, b) {
    var c = b.getElement();
    this.moving = b;
    this.startX = a.pageX - r.prototype.helpers.elOffset(c).left;
    this.table.element.classList.add("tabulator-block-select");
    this.placeholderElement.style.width = b.getWidth() + "px";
    this.placeholderElement.style.height = b.getHeight() + "px";
    c.parentNode.insertBefore(this.placeholderElement, c);
    c.parentNode.removeChild(c);
    this.hoverElement = c.cloneNode(!0);
    this.hoverElement.classList.add("tabulator-moving");
    this.table.columnManager.getElement().appendChild(this.hoverElement);
    this.hoverElement.style.left = "0";
    this.hoverElement.style.bottom = "0";
    this._bindMouseMove();
    document.body.addEventListener("mousemove", this.moveHover);
    document.body.addEventListener("mouseup", this.endMove);
    this.moveHover(a);
  };
  n.prototype._bindMouseMove = function() {
    this.table.columnManager.columnsByIndex.forEach(function(a) {
      a.modules.moveColumn.mousemove && a.getElement().addEventListener("mousemove", a.modules.moveColumn.mousemove);
    });
  };
  n.prototype._unbindMouseMove = function() {
    this.table.columnManager.columnsByIndex.forEach(function(a) {
      a.modules.moveColumn.mousemove && a.getElement().removeEventListener("mousemove", a.modules.moveColumn.mousemove);
    });
  };
  n.prototype.moveColumn = function(a, b) {
    var c = this.moving.getCells();
    this.toCol = a;
    (this.toColAfter = b) ? a.getCells().forEach(function(a, b) {
      a = a.getElement();
      a.parentNode.insertBefore(c[b].getElement(), a.nextSibling);
    }) : a.getCells().forEach(function(a, b) {
      a = a.getElement();
      a.parentNode.insertBefore(c[b].getElement(), a);
    });
  };
  n.prototype.endMove = function(a) {
    1 === a.which && (this._unbindMouseMove(), this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling), this.placeholderElement.parentNode.removeChild(this.placeholderElement), this.hoverElement.parentNode.removeChild(this.hoverElement), this.table.element.classList.remove("tabulator-block-select"), this.toCol && this.table.columnManager.moveColumn(this.moving, this.toCol, this.toColAfter), this.toColAfter = this.toCol = this.moving = !1, document.body.removeEventListener("mousemove", 
    this.moveHover), document.body.removeEventListener("mouseup", this.endMove));
  };
  n.prototype.moveHover = function(a) {
    var b = this, c = b.table.columnManager.getElement(), d = c.scrollLeft;
    a = a.pageX - r.prototype.helpers.elOffset(c).left + d;
    var f;
    b.hoverElement.style.left = a - b.startX + "px";
    a - d < b.autoScrollMargin && !b.autoScrollTimeout && (b.autoScrollTimeout = setTimeout(function() {
      f = Math.max(0, d - 5);
      b.table.rowManager.getElement().scrollLeft = f;
      b.autoScrollTimeout = !1;
    }, 1));
    d + c.clientWidth - a < b.autoScrollMargin && !b.autoScrollTimeout && (b.autoScrollTimeout = setTimeout(function() {
      f = Math.min(c.clientWidth, d + 5);
      b.table.rowManager.getElement().scrollLeft = f;
      b.autoScrollTimeout = !1;
    }, 1));
  };
  r.prototype.registerModule("moveColumn", n);
  n = function(a) {
    this.table = a;
    this.placeholderElement = this.createPlaceholderElement();
    this.checkTimeout = this.hoverElement = !1;
    this.checkPeriod = 150;
    this.hasHandle = this.toRowAfter = this.toRow = this.moving = !1;
    this.startX = this.startY = 0;
    this.moveHover = this.moveHover.bind(this);
    this.endMove = this.endMove.bind(this);
    this.connection = this.tableRowDropEvent = !1;
    this.connections = [];
    this.connectedRow = this.connectedTable = !1;
  };
  n.prototype.createPlaceholderElement = function() {
    var a = document.createElement("div");
    a.classList.add("tabulator-row");
    a.classList.add("tabulator-row-placeholder");
    return a;
  };
  n.prototype.initialize = function(a) {
    this.connection = this.table.options.movableRowsConnectedTables;
  };
  n.prototype.setHandle = function(a) {
    this.hasHandle = a;
  };
  n.prototype.initializeRow = function(a) {
    var b = this, c = {};
    c.mouseup = function(c) {
      b.tableRowDrop(c, a);
    }.bind(b);
    c.mousemove = function(c) {
      if (c.pageY - r.prototype.helpers.elOffset(a.element).top + b.table.rowManager.element.scrollTop > a.getHeight() / 2) {
        b.toRow === a && b.toRowAfter || (c = a.getElement(), c.parentNode.insertBefore(b.placeholderElement, c.nextSibling), b.moveRow(a, !0));
      } else {
        if (b.toRow !== a || b.toRowAfter) {
          c = a.getElement(), c.parentNode.insertBefore(b.placeholderElement, c), b.moveRow(a, !1);
        }
      }
    }.bind(b);
    if (!this.hasHandle) {
      var d = a.getElement();
      d.addEventListener("mousedown", function(c) {
        1 === c.which && (b.checkTimeout = setTimeout(function() {
          b.startMove(c, a);
        }, b.checkPeriod));
      });
      d.addEventListener("mouseup", function(a) {
        1 === a.which && b.checkTimeout && clearTimeout(b.checkTimeout);
      });
    }
    a.modules.moveRow = c;
  };
  n.prototype.initializeCell = function(a) {
    var b = this, c = a.getElement();
    c.addEventListener("mousedown", function(c) {
      1 === c.which && (b.checkTimeout = setTimeout(function() {
        b.startMove(c, a.row);
      }, b.checkPeriod));
    });
    c.addEventListener("mouseup", function(a) {
      1 === a.which && b.checkTimeout && clearTimeout(b.checkTimeout);
    });
  };
  n.prototype._bindMouseMove = function() {
    this.table.rowManager.getDisplayRows().forEach(function(a) {
      "row" === a.type && a.modules.moveRow.mousemove && a.getElement().addEventListener("mousemove", a.modules.moveRow.mousemove);
    });
  };
  n.prototype._unbindMouseMove = function() {
    this.table.rowManager.getDisplayRows().forEach(function(a) {
      "row" === a.type && a.modules.moveRow.mousemove && a.getElement().removeEventListener("mousemove", a.modules.moveRow.mousemove);
    });
  };
  n.prototype.startMove = function(a, b) {
    var c = b.getElement();
    this.setStartPosition(a, b);
    this.moving = b;
    this.table.element.classList.add("tabulator-block-select");
    this.placeholderElement.style.width = b.getWidth() + "px";
    this.placeholderElement.style.height = b.getHeight() + "px";
    this.connection ? (this.table.element.classList.add("tabulator-movingrow-sending"), this.connectToTables(b)) : (c.parentNode.insertBefore(this.placeholderElement, c), c.parentNode.removeChild(c));
    this.hoverElement = c.cloneNode(!0);
    this.hoverElement.classList.add("tabulator-moving");
    this.connection ? (document.body.appendChild(this.hoverElement), this.hoverElement.style.left = "0", this.hoverElement.style.top = "0", this.hoverElement.style.width = this.table.element.clientWidth + "px", this.hoverElement.style.whiteSpace = "nowrap", this.hoverElement.style.overflow = "hidden", this.hoverElement.style.pointerEvents = "none") : (this.table.rowManager.getTableElement().appendChild(this.hoverElement), this.hoverElement.style.left = "0", this.hoverElement.style.top = "0", this._bindMouseMove());
    document.body.addEventListener("mousemove", this.moveHover);
    document.body.addEventListener("mouseup", this.endMove);
    this.moveHover(a);
  };
  n.prototype.setStartPosition = function(a, b) {
    b = b.getElement();
    this.connection ? (b = b.getBoundingClientRect(), this.startX = b.left - a.pageX + window.scrollX, this.startY = b.top - a.pageY + window.scrollY) : this.startY = a.pageY - b.getBoundingClientRect().top;
  };
  n.prototype.endMove = function(a) {
    a && 1 !== a.which || (this._unbindMouseMove(), this.connection || (this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling), this.placeholderElement.parentNode.removeChild(this.placeholderElement)), this.hoverElement.parentNode.removeChild(this.hoverElement), this.table.element.classList.remove("tabulator-block-select"), this.toRow && this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter), this.toRowAfter = this.toRow = this.moving = 
    !1, document.body.removeEventListener("mousemove", this.moveHover), document.body.removeEventListener("mouseup", this.endMove), this.connection && (this.table.element.classList.remove("tabulator-movingrow-sending"), this.disconnectFromTables()));
  };
  n.prototype.moveRow = function(a, b) {
    this.toRow = a;
    this.toRowAfter = b;
  };
  n.prototype.moveHover = function(a) {
    this.connection ? this.moveHoverConnections.call(this, a) : this.moveHoverTable.call(this, a);
  };
  n.prototype.moveHoverTable = function(a) {
    var b = this.table.rowManager.getElement(), c = b.scrollTop;
    a = a.pageY - b.getBoundingClientRect().top + c;
    this.hoverElement.style.top = a - this.startY + "px";
  };
  n.prototype.moveHoverConnections = function(a) {
    this.hoverElement.style.left = this.startX + a.pageX + "px";
    this.hoverElement.style.top = this.startY + a.pageY + "px";
  };
  n.prototype.connectToTables = function(a) {
    var b = this.table.modules.comms.getConnections(this.connection);
    this.table.options.movableRowsSendingStart.call(this.table, b);
    this.table.modules.comms.send(this.connection, "moveRow", "connect", {row:a});
  };
  n.prototype.disconnectFromTables = function() {
    var a = this.table.modules.comms.getConnections(this.connection);
    this.table.options.movableRowsSendingStop.call(this.table, a);
    this.table.modules.comms.send(this.connection, "moveRow", "disconnect");
  };
  n.prototype.connect = function(a, b) {
    if (this.connectedTable) {
      return console.warn("Move Row Error - Table cannot accept connection, already connected to table:", this.connectedTable), !1;
    }
    this.connectedTable = a;
    this.connectedRow = b;
    this.table.element.classList.add("tabulator-movingrow-receiving");
    this.table.rowManager.getDisplayRows().forEach(function(a) {
      "row" === a.type && a.modules.moveRow && a.modules.moveRow.mouseup && a.getElement().addEventListener("mouseup", a.modules.moveRow.mouseup);
    });
    this.tableRowDropEvent = this.tableRowDrop.bind(this);
    this.table.element.addEventListener("mouseup", this.tableRowDropEvent);
    this.table.options.movableRowsReceivingStart.call(this.table, b, a);
    return !0;
  };
  n.prototype.disconnect = function(a) {
    a === this.connectedTable ? (this.connectedRow = this.connectedTable = !1, this.table.element.classList.remove("tabulator-movingrow-receiving"), this.table.rowManager.getDisplayRows().forEach(function(a) {
      "row" === a.type && a.modules.moveRow && a.modules.moveRow.mouseup && a.getElement().removeEventListener("mouseup", a.modules.moveRow.mouseup);
    }), this.table.element.removeEventListener("mouseup", this.tableRowDropEvent), this.table.options.movableRowsReceivingStop.call(this.table, a)) : console.warn("Move Row Error - trying to disconnect from non connected table");
  };
  n.prototype.dropComplete = function(a, b, c) {
    var d = !1;
    if (c) {
      switch(_typeof(this.table.options.movableRowsSender)) {
        case "string":
          d = this.senders[this.table.options.movableRowsSender];
          break;
        case "function":
          d = this.table.options.movableRowsSender;
      }
      d ? d.call(this, this.moving.getComponent(), b ? b.getComponent() : void 0, a) : this.table.options.movableRowsSender && console.warn("Mover Row Error - no matching sender found:", this.table.options.movableRowsSender);
      this.table.options.movableRowsSent.call(this.table, this.moving.getComponent(), b ? b.getComponent() : void 0, a);
    } else {
      this.table.options.movableRowsSentFailed.call(this.table, this.moving.getComponent(), b ? b.getComponent() : void 0, a);
    }
    this.endMove();
  };
  n.prototype.tableRowDrop = function(a, b) {
    var c = !1, d = !1;
    a.stopImmediatePropagation();
    switch(_typeof(this.table.options.movableRowsReceiver)) {
      case "string":
        c = this.receivers[this.table.options.movableRowsReceiver];
        break;
      case "function":
        c = this.table.options.movableRowsReceiver;
    }
    c ? d = c.call(this, this.connectedRow.getComponent(), b ? b.getComponent() : void 0, this.connectedTable) : console.warn("Mover Row Error - no matching receiver found:", this.table.options.movableRowsReceiver);
    d ? this.table.options.movableRowsReceived.call(this.table, this.connectedRow.getComponent(), b ? b.getComponent() : void 0, this.connectedTable) : this.table.options.movableRowsReceivedFailed.call(this.table, this.connectedRow.getComponent(), b ? b.getComponent() : void 0, this.connectedTable);
    this.table.modules.comms.send(this.connectedTable, "moveRow", "dropcomplete", {row:b, success:d});
  };
  n.prototype.receivers = {insert:function(a, b, c) {
    this.table.addRow(a.getData(), void 0, b);
    return !0;
  }, add:function(a, b, c) {
    this.table.addRow(a.getData());
    return !0;
  }, update:function(a, b, c) {
    return b ? (b.update(a.getData()), !0) : !1;
  }, replace:function(a, b, c) {
    return b ? (this.table.addRow(a.getData(), void 0, b), b.delete(), !0) : !1;
  }};
  n.prototype.senders = {delete:function(a, b, c) {
    a.delete();
  }};
  n.prototype.commsReceived = function(a, b, c) {
    switch(b) {
      case "connect":
        return this.connect(a, c.row);
      case "disconnect":
        return this.disconnect(a);
      case "dropcomplete":
        return this.dropComplete(a, c.row, c.success);
    }
  };
  r.prototype.registerModule("moveRow", n);
  n = function(a) {
    this.table = a;
    this.allowedTypes = ["", "data", "edit", "clipboard"];
    this.enabled = !0;
  };
  n.prototype.initializeColumn = function(a) {
    var b = this, c = !1, d = {};
    this.allowedTypes.forEach(function(f) {
      f = "mutator" + (f.charAt(0).toUpperCase() + f.slice(1));
      var g;
      a.definition[f] && (g = b.lookupMutator(a.definition[f])) && (c = !0, d[f] = {mutator:g, params:a.definition[f + "Params"] || {}});
    });
    c && (a.modules.mutate = d);
  };
  n.prototype.lookupMutator = function(a) {
    var b = !1;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        this.mutators[a] ? b = this.mutators[a] : console.warn("Mutator Error - No such mutator found, ignoring: ", a);
        break;
      case "function":
        b = a;
    }
    return b;
  };
  n.prototype.transformRow = function(a, b, c) {
    var d = "mutator" + (b.charAt(0).toUpperCase() + b.slice(1)), f;
    this.enabled && this.table.columnManager.traverse(function(g) {
      var l;
      if (g.modules.mutate && (l = g.modules.mutate[d] || g.modules.mutate.mutator || !1) && (f = g.getFieldValue(a), !c || c && "undefined" !== typeof f)) {
        var h = g.getComponent();
        var p = "function" === typeof l.params ? l.params(f, a, b, h) : l.params;
        g.setFieldValue(a, l.mutator(f, a, b, p, h));
      }
    });
    return a;
  };
  n.prototype.transformCell = function(a, b) {
    var c = a.column.modules.mutate.mutatorEdit || a.column.modules.mutate.mutator || !1;
    return c ? c.mutator(b, a.row.getData(), "edit", c.params, a.getComponent()) : b;
  };
  n.prototype.enable = function() {
    this.enabled = !0;
  };
  n.prototype.disable = function() {
    this.enabled = !1;
  };
  n.prototype.mutators = {};
  r.prototype.registerModule("mutator", n);
  n = function(a) {
    this.table = a;
    this.mode = "local";
    this.progressiveLoad = !1;
    this.size = 0;
    this.page = 1;
    this.count = 5;
    this.max = 1;
    this.displayIndex = 0;
    this.createElements();
  };
  n.prototype.createElements = function() {
    this.element = document.createElement("span");
    this.element.classList.add("tabulator-paginator");
    this.pagesElement = document.createElement("span");
    this.pagesElement.classList.add("tabulator-pages");
    var a = document.createElement("button");
    a.classList.add("tabulator-page");
    a.setAttribute("type", "button");
    a.setAttribute("role", "button");
    a.setAttribute("aria-label", "");
    a.setAttribute("title", "");
    this.firstBut = a.cloneNode(!0);
    this.firstBut.setAttribute("data-page", "first");
    this.prevBut = a.cloneNode(!0);
    this.prevBut.setAttribute("data-page", "prev");
    this.nextBut = a.cloneNode(!0);
    this.nextBut.setAttribute("data-page", "next");
    this.lastBut = a.cloneNode(!0);
    this.lastBut.setAttribute("data-page", "last");
  };
  n.prototype.initialize = function(a) {
    var b = this, c;
    for (c in b.table.options.paginationDataSent) {
      b.paginationDataSentNames[c] = b.table.options.paginationDataSent[c];
    }
    for (var d in b.table.options.paginationDataReceived) {
      b.paginationDataReceivedNames[d] = b.table.options.paginationDataReceived[d];
    }
    b.table.modules.localize.bind("pagination|first", function(a) {
      b.firstBut.innerHTML = a;
    });
    b.table.modules.localize.bind("pagination|first_title", function(a) {
      b.firstBut.setAttribute("aria-label", a);
      b.firstBut.setAttribute("title", a);
    });
    b.table.modules.localize.bind("pagination|prev", function(a) {
      b.prevBut.innerHTML = a;
    });
    b.table.modules.localize.bind("pagination|prev_title", function(a) {
      b.prevBut.setAttribute("aria-label", a);
      b.prevBut.setAttribute("title", a);
    });
    b.table.modules.localize.bind("pagination|next", function(a) {
      b.nextBut.innerHTML = a;
    });
    b.table.modules.localize.bind("pagination|next_title", function(a) {
      b.nextBut.setAttribute("aria-label", a);
      b.nextBut.setAttribute("title", a);
    });
    b.table.modules.localize.bind("pagination|last", function(a) {
      b.lastBut.innerHTML = a;
    });
    b.table.modules.localize.bind("pagination|last_title", function(a) {
      b.lastBut.setAttribute("aria-label", a);
      b.lastBut.setAttribute("title", a);
    });
    b.firstBut.addEventListener("click", function() {
      b.setPage(1);
    });
    b.prevBut.addEventListener("click", function() {
      b.previousPage();
    });
    b.nextBut.addEventListener("click", function() {
      b.nextPage().then(function() {
      }).catch(function() {
      });
    });
    b.lastBut.addEventListener("click", function() {
      b.setPage(b.max);
    });
    b.table.options.paginationElement && (b.element = b.table.options.paginationElement);
    b.element.appendChild(b.firstBut);
    b.element.appendChild(b.prevBut);
    b.element.appendChild(b.pagesElement);
    b.element.appendChild(b.nextBut);
    b.element.appendChild(b.lastBut);
    b.table.options.paginationElement || a || b.table.footerManager.append(b.element, b);
    b.mode = b.table.options.pagination;
    b.size = b.table.options.paginationSize || Math.floor(b.table.rowManager.getElement().clientHeight / 24);
    b.count = b.table.options.paginationButtonCount;
  };
  n.prototype.initializeProgressive = function(a) {
    this.initialize(!0);
    this.mode = "progressive_" + a;
    this.progressiveLoad = !0;
  };
  n.prototype.setDisplayIndex = function(a) {
    this.displayIndex = a;
  };
  n.prototype.getDisplayIndex = function() {
    return this.displayIndex;
  };
  n.prototype.setMaxRows = function(a) {
    this.max = a ? Math.ceil(a / this.size) : 1;
    this.page > this.max && (this.page = this.max);
  };
  n.prototype.reset = function(a) {
    if ("local" == this.mode || a) {
      this.page = 1;
    }
    return !0;
  };
  n.prototype.setMaxPage = function(a) {
    this.max = a || 1;
    this.page > this.max && (this.page = this.max, this.trigger());
  };
  n.prototype.setPage = function(a) {
    var b = this;
    return new Promise(function(c, d) {
      0 < a && a <= b.max ? (b.page = a, b.trigger().then(function() {
        c();
      }).catch(function() {
        d();
      })) : (console.warn("Pagination Error - Requested page is out of range of 1 - " + b.max + ":", a), d());
    });
  };
  n.prototype.setPageSize = function(a) {
    0 < a && (this.size = a);
  };
  n.prototype._setPageButtons = function() {
    for (var a = Math.floor((this.count - 1) / 2), b = Math.ceil((this.count - 1) / 2), a = this.max - this.page + a + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - a, 1), b = this.page <= b ? Math.min(this.count, this.max) : Math.min(this.page + b, this.max); this.pagesElement.firstChild;) {
      this.pagesElement.removeChild(this.pagesElement.firstChild);
    }
    1 == this.page ? (this.firstBut.disabled = !0, this.prevBut.disabled = !0) : (this.firstBut.disabled = !1, this.prevBut.disabled = !1);
    this.page == this.max ? (this.lastBut.disabled = !0, this.nextBut.disabled = !0) : (this.lastBut.disabled = !1, this.nextBut.disabled = !1);
    for (; a <= b; a++) {
      0 < a && a <= this.max && this.pagesElement.appendChild(this._generatePageButton(a));
    }
    this.footerRedraw();
  };
  n.prototype._generatePageButton = function(a) {
    var b = this, c = document.createElement("button");
    c.classList.add("tabulator-page");
    a == b.page && c.classList.add("active");
    c.setAttribute("type", "button");
    c.setAttribute("role", "button");
    c.setAttribute("aria-label", "Show Page " + a);
    c.setAttribute("title", "Show Page " + a);
    c.setAttribute("data-page", a);
    c.textContent = a;
    c.addEventListener("click", function(c) {
      b.setPage(a);
    });
    return c;
  };
  n.prototype.previousPage = function() {
    var a = this;
    return new Promise(function(b, c) {
      1 < a.page ? (a.page--, a.trigger().then(function() {
        b();
      }).catch(function() {
        c();
      })) : (console.warn("Pagination Error - Previous page would be less than page 1:", 0), c());
    });
  };
  n.prototype.nextPage = function() {
    var a = this;
    return new Promise(function(b, c) {
      a.page < a.max ? (a.page++, a.trigger().then(function() {
        b();
      }).catch(function() {
        c();
      })) : (a.progressiveLoad || console.warn("Pagination Error - Next page would be greater than maximum page of " + a.max + ":", a.max + 1), c());
    });
  };
  n.prototype.getPage = function() {
    return this.page;
  };
  n.prototype.getPageMax = function() {
    return this.max;
  };
  n.prototype.getPageSize = function(a) {
    return this.size;
  };
  n.prototype.getMode = function() {
    return this.mode;
  };
  n.prototype.getRows = function(a) {
    if ("local" == this.mode) {
      var b = [];
      var c = this.size * (this.page - 1);
      var d = c + parseInt(this.size);
      for (this._setPageButtons(); c < d; c++) {
        a[c] && b.push(a[c]);
      }
      return b;
    }
    this._setPageButtons();
    return a.slice(0);
  };
  n.prototype.trigger = function() {
    var a = this, b;
    return new Promise(function(c, d) {
      switch(a.mode) {
        case "local":
          b = a.table.rowManager.scrollLeft;
          a.table.rowManager.refreshActiveData("page");
          a.table.rowManager.scrollHorizontal(b);
          a.table.options.pageLoaded.call(a.table, a.getPage());
          c();
          break;
        case "remote":
        case "progressive_load":
        case "progressive_scroll":
          a.table.modules.ajax.blockActiveRequest();
          a._getRemotePage().then(function() {
            c();
          }).catch(function() {
            d();
          });
          break;
        default:
          console.warn("Pagination Error - no such pagination mode:", a.mode), d();
      }
    });
  };
  n.prototype._getRemotePage = function() {
    var a = this, b = this, c, d;
    return new Promise(function(f, g) {
      b.table.modExists("ajax", !0) || g();
      c = r.prototype.helpers.deepClone(b.table.modules.ajax.getParams() || {});
      d = b.table.modules.ajax.getParams();
      d[a.paginationDataSentNames.page] = b.page;
      a.size && (d[a.paginationDataSentNames.size] = a.size);
      if (a.table.options.ajaxSorting && a.table.modExists("sort")) {
        var l = b.table.modules.sort.getSort();
        l.forEach(function(a) {
          delete a.column;
        });
        d[a.paginationDataSentNames.sorters] = l;
      }
      a.table.options.ajaxFiltering && a.table.modExists("filter") && (l = b.table.modules.filter.getFilters(!0, !0), d[a.paginationDataSentNames.filters] = l);
      b.table.modules.ajax.setParams(d);
      b.table.modules.ajax.sendRequest(a.progressiveLoad).then(function(a) {
        b._parseRemoteData(a);
        f();
      }).catch(function(a) {
        g();
      });
      b.table.modules.ajax.setParams(c);
    });
  };
  n.prototype._parseRemoteData = function(a) {
    var b = this;
    "undefined" === typeof a[this.paginationDataReceivedNames.last_page] && console.warn("Remote Pagination Error - Server response missing '" + this.paginationDataReceivedNames.last_page + "' property");
    if (a[this.paginationDataReceivedNames.data]) {
      if (this.max = parseInt(a[this.paginationDataReceivedNames.last_page]) || 1, this.progressiveLoad) {
        switch(this.mode) {
          case "progressive_load":
            this.table.rowManager.addRows(a[this.paginationDataReceivedNames.data]);
            this.page < this.max && setTimeout(function() {
              b.nextPage().then(function() {
              }).catch(function() {
              });
            }, b.table.options.ajaxProgressiveLoadDelay);
            break;
          case "progressive_scroll":
            a = this.table.rowManager.getData().concat(a[this.paginationDataReceivedNames.data]), this.table.rowManager.setData(a, !0), a = this.table.options.ajaxProgressiveLoadScrollMargin || 2 * this.table.rowManager.element.clientHeight, b.table.rowManager.element.scrollHeight <= b.table.rowManager.element.clientHeight + a && b.nextPage().then(function() {
            }).catch(function() {
            });
        }
      } else {
        var c = this.table.rowManager.scrollLeft;
        this.table.rowManager.setData(a[this.paginationDataReceivedNames.data]);
        this.table.rowManager.scrollHorizontal(c);
        this.table.columnManager.scrollHorizontal(c);
        this.table.options.pageLoaded.call(this.table, this.getPage());
      }
    } else {
      console.warn("Remote Pagination Error - Server response missing '" + this.paginationDataReceivedNames.data + "' property");
    }
  };
  n.prototype.footerRedraw = function() {
    var a = this.table.footerManager.element;
    0 > Math.ceil(a.clientWidth) - a.scrollWidth ? this.pagesElement.style.display = "none" : (this.pagesElement.style.display = "", 0 > Math.ceil(a.clientWidth) - a.scrollWidth && (this.pagesElement.style.display = "none"));
  };
  n.prototype.paginationDataSentNames = {page:"page", size:"size", sorters:"sorters", filters:"filters"};
  n.prototype.paginationDataReceivedNames = {current_page:"current_page", last_page:"last_page", data:"data"};
  r.prototype.registerModule("page", n);
  n = function(a) {
    this.table = a;
    this.id = this.mode = "";
    this.persistProps = ["field", "width", "visible"];
  };
  n.prototype.initialize = function(a, b) {
    this.mode = !0 !== a ? a : "undefined" !== typeof window.localStorage ? "local" : "cookie";
    this.id = "tabulator-" + (b || this.table.element.getAttribute("id") || "");
  };
  n.prototype.load = function(a, b) {
    a = this.retreiveData(a);
    b && (a = a ? this.mergeDefinition(b, a) : b);
    return a;
  };
  n.prototype.retreiveData = function(a) {
    var b = "";
    a = this.id + ("columns" === a ? "" : "-" + a);
    switch(this.mode) {
      case "local":
        b = localStorage.getItem(a);
        break;
      case "cookie":
        var c = document.cookie, d = c.indexOf(a + "=");
        -1 < d && (c = c.substr(d), b = c.indexOf(";"), -1 < b && (c = c.substr(0, b)), b = c.replace(a + "=", ""));
        break;
      default:
        console.warn("Persistance Load Error - invalid mode selected", this.mode);
    }
    return b ? JSON.parse(b) : !1;
  };
  n.prototype.mergeDefinition = function(a, b) {
    var c = this, d = [];
    b = b || [];
    b.forEach(function(b, f) {
      if (f = c._findColumn(a, b)) {
        f.width = b.width, f.visible = b.visible, f.columns && (f.columns = c.mergeDefinition(f.columns, b.columns)), d.push(f);
      }
    });
    a.forEach(function(a, f) {
      c._findColumn(b, a) || (d.length > f ? d.splice(f, 0, a) : d.push(a));
    });
    return d;
  };
  n.prototype._findColumn = function(a, b) {
    var c = b.columns ? "group" : b.field ? "field" : "object";
    return a.find(function(a) {
      switch(c) {
        case "group":
          return a.title === b.title && a.columns.length === b.columns.length;
        case "field":
          return a.field === b.field;
        case "object":
          return a === b;
      }
    });
  };
  n.prototype.save = function(a) {
    var b = {};
    switch(a) {
      case "columns":
        b = this.parseColumns(this.table.columnManager.getColumns());
        break;
      case "filter":
        b = this.table.modules.filter.getFilters();
        break;
      case "sort":
        b = this.validateSorters(this.table.modules.sort.getSort());
    }
    this.saveData(this.id + ("columns" === a ? "" : "-" + a), b);
  };
  n.prototype.validateSorters = function(a) {
    a.forEach(function(a) {
      a.column = a.field;
      delete a.field;
    });
    return a;
  };
  n.prototype.saveData = function(a, b) {
    b = JSON.stringify(b);
    switch(this.mode) {
      case "local":
        localStorage.setItem(a, b);
        break;
      case "cookie":
        var c = new Date;
        c.setDate(c.getDate() + 10000);
        document.cookie = a + "=" + b + "; expires=" + c.toUTCString();
        break;
      default:
        console.warn("Persistance Save Error - invalid mode selected", this.mode);
    }
  };
  n.prototype.parseColumns = function(a) {
    var b = this, c = [];
    a.forEach(function(a) {
      var d = {};
      a.isGroup ? (d.title = a.getDefinition().title, d.columns = b.parseColumns(a.getColumns())) : (d.title = a.getDefinition().title, d.field = a.getField(), d.width = a.getWidth(), d.visible = a.visible);
      c.push(d);
    });
    return c;
  };
  r.prototype.registerModule("persistence", n);
  n = function(a) {
    this.table = a;
    this.startWidth = this.startX = this.startColumn = !1;
    this.prevHandle = this.handle = null;
  };
  n.prototype.initializeColumn = function(a, b, c) {
    var d = this, f = !1, g = this.table.options.resizableColumns;
    "header" === a && (f = "textarea" == b.definition.formatter || b.definition.variableHeight, b.modules.resize = {variableHeight:f});
    if (!0 === g || g == a) {
      a = document.createElement("div"), a.className = "tabulator-col-resize-handle", f = document.createElement("div"), f.className = "tabulator-col-resize-handle prev", a.addEventListener("click", function(a) {
        a.stopPropagation();
      }), a.addEventListener("mousedown", function(a) {
        var c = b.getLastColumn();
        c && d._checkResizability(c) && (d.startColumn = b, d._mouseDown(a, c));
      }), a.addEventListener("dblclick", function(a) {
        d._checkResizability(b) && b.reinitializeWidth(!0);
      }), f.addEventListener("click", function(a) {
        a.stopPropagation();
      }), f.addEventListener("mousedown", function(a) {
        var c;
        if (c = b.getFirstColumn()) {
          c = d.table.columnManager.findColumnIndex(c), (c = 0 < c ? d.table.columnManager.getColumnByIndex(c - 1) : !1) && d._checkResizability(c) && (d.startColumn = b, d._mouseDown(a, c));
        }
      }), f.addEventListener("dblclick", function(a) {
        if (a = b.getFirstColumn()) {
          a = d.table.columnManager.findColumnIndex(a), (a = 0 < a ? d.table.columnManager.getColumnByIndex(a - 1) : !1) && d._checkResizability(a) && a.reinitializeWidth(!0);
        }
      }), c.appendChild(a), c.appendChild(f);
    }
  };
  n.prototype._checkResizability = function(a) {
    return "undefined" != typeof a.definition.resizable ? a.definition.resizable : this.table.options.resizableColumns;
  };
  n.prototype._mouseDown = function(a, b) {
    function c(a) {
      b.setWidth(f.startWidth + (a.screenX - f.startX));
      !f.table.browserSlow && b.modules.resize && b.modules.resize.variableHeight && b.checkCellHeights();
    }
    function d(a) {
      f.startColumn.modules.edit && (f.startColumn.modules.edit.blocked = !1);
      f.table.browserSlow && b.modules.resize && b.modules.resize.variableHeight && b.checkCellHeights();
      document.body.removeEventListener("mouseup", d);
      document.body.removeEventListener("mousemove", c);
      f.table.element.classList.remove("tabulator-block-select");
      f.table.options.persistentLayout && f.table.modExists("persistence", !0) && f.table.modules.persistence.save("columns");
      f.table.options.columnResized.call(f.table, b.getComponent());
    }
    var f = this;
    f.table.element.classList.add("tabulator-block-select");
    a.stopPropagation();
    f.startColumn.modules.edit && (f.startColumn.modules.edit.blocked = !0);
    f.startX = a.screenX;
    f.startWidth = b.getWidth();
    document.body.addEventListener("mousemove", c);
    document.body.addEventListener("mouseup", d);
  };
  r.prototype.registerModule("resizeColumns", n);
  n = function(a) {
    this.table = a;
    this.startHeight = this.startY = this.startColumn = !1;
    this.prevHandle = this.handle = null;
  };
  n.prototype.initializeRow = function(a) {
    var b = this, c = a.getElement(), d = document.createElement("div");
    d.className = "tabulator-row-resize-handle";
    var f = document.createElement("div");
    f.className = "tabulator-row-resize-handle prev";
    d.addEventListener("click", function(a) {
      a.stopPropagation();
    });
    d.addEventListener("mousedown", function(c) {
      b.startRow = a;
      b._mouseDown(c, a);
    });
    f.addEventListener("click", function(a) {
      a.stopPropagation();
    });
    f.addEventListener("mousedown", function(c) {
      var d = b.table.rowManager.prevDisplayRow(a);
      d && (b.startRow = d, b._mouseDown(c, d));
    });
    c.appendChild(d);
    c.appendChild(f);
  };
  n.prototype._mouseDown = function(a, b) {
    function c(a) {
      b.setHeight(d.startHeight + (a.screenY - d.startY));
    }
    var d = this;
    d.table.element.classList.add("tabulator-block-select");
    a.stopPropagation();
    d.startY = a.screenY;
    d.startHeight = b.getHeight();
    document.body.addEventListener("mousemove", c);
    document.body.addEventListener("mouseup", function(a) {
      document.body.removeEventListener("mouseup", c);
      document.body.removeEventListener("mousemove", c);
      d.table.element.classList.remove("tabulator-block-select");
      d.table.options.rowResized.call(this.table, b.getComponent());
    });
  };
  r.prototype.registerModule("resizeRows", n);
  n = function(a) {
    this.table = a;
    this.observer = this.binding = !1;
  };
  n.prototype.initialize = function(a) {
    var b = this.table;
    "undefined" !== typeof ResizeObserver && "virtual" === b.rowManager.getRenderMode() ? (this.observer = new ResizeObserver(function(a) {
      b.redraw();
    }), this.observer.observe(b.element)) : (this.binding = function() {
      b.redraw();
    }, window.addEventListener("resize", this.binding));
  };
  n.prototype.clearBindings = function(a) {
    this.binding && window.removeEventListener("resize", this.binding);
    this.observer && this.observer.unobserve(this.table.element);
  };
  r.prototype.registerModule("resizeTable", n);
  n = function(a) {
    this.table = a;
    this.columns = [];
    this.hiddenColumns = [];
    this.mode = "";
    this.index = 0;
    this.collapseFormatter = [];
    this.collapseStartOpen = !0;
  };
  n.prototype.initialize = function() {
    var a = this, b = [];
    this.mode = this.table.options.responsiveLayout;
    this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;
    this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;
    this.hiddenColumns = [];
    this.table.columnManager.columnsByIndex.forEach(function(c, d) {
      c.modules.responsive && c.modules.responsive.order && c.modules.responsive.visible && (c.modules.responsive.index = d, b.push(c), c.visible || "collapse" !== a.mode || a.hiddenColumns.push(c));
    });
    b = b.reverse();
    this.columns = b = b.sort(function(a, b) {
      return b.modules.responsive.order - a.modules.responsive.order || b.modules.responsive.index - a.modules.responsive.index;
    });
    "collapse" === this.mode && this.generateCollapsedContent();
  };
  n.prototype.initializeColumn = function(a) {
    var b = a.getDefinition();
    a.modules.responsive = {order:"undefined" === typeof b.responsive ? 1 : b.responsive, visible:!1 === b.visible ? !1 : !0};
  };
  n.prototype.layoutRow = function(a) {
    var b = a.getElement(), c = document.createElement("div");
    c.classList.add("tabulator-responsive-collapse");
    b.classList.contains("tabulator-calcs") || (a.modules.responsiveLayout = {element:c}, this.collapseStartOpen || (c.style.display = "none"), b.appendChild(c), this.generateCollapsedRowContent(a));
  };
  n.prototype.updateColumnVisibility = function(a, b) {
    a.modules.responsive && (a.modules.responsive.visible = b, this.initialize());
  };
  n.prototype.hideColumn = function(a) {
    a.hide(!1, !0);
    "collapse" === this.mode && (this.hiddenColumns.unshift(a), this.generateCollapsedContent());
  };
  n.prototype.showColumn = function(a) {
    a.show(!1, !0);
    a.setWidth(a.getWidth());
    "collapse" === this.mode && (a = this.hiddenColumns.indexOf(a), -1 < a && this.hiddenColumns.splice(a, 1), this.generateCollapsedContent());
  };
  n.prototype.update = function() {
    for (var a = !0; a;) {
      var b = "fitColumns" == this.table.modules.layout.getMode() ? this.table.columnManager.getFlexBaseWidth() : this.table.columnManager.getWidth(), b = this.table.columnManager.element.clientWidth - b;
      if (0 > b) {
        (b = this.columns[this.index]) ? (this.hideColumn(b), this.index++) : a = !1;
      } else {
        var c = this.columns[this.index - 1];
        c ? 0 < b ? b >= c.getWidth() ? (this.showColumn(c), this.index--) : a = !1 : a = !1 : a = !1;
      }
      this.table.rowManager.activeRowsCount || this.table.rowManager.renderEmptyScroll();
    }
  };
  n.prototype.generateCollapsedContent = function() {
    var a = this;
    this.table.rowManager.getDisplayRows().forEach(function(b) {
      a.generateCollapsedRowContent(b);
    });
  };
  n.prototype.generateCollapsedRowContent = function(a) {
    var b;
    if (a.modules.responsiveLayout) {
      for (b = a.modules.responsiveLayout.element; b.firstChild;) {
        b.removeChild(b.firstChild);
      }
      (a = this.collapseFormatter(this.generateCollapsedRowData(a))) && b.appendChild(a);
    }
  };
  n.prototype.generateCollapsedRowData = function(a) {
    var b = this, c = a.getData(), d = {}, f;
    this.hiddenColumns.forEach(function(g) {
      var l = g.getFieldValue(c);
      g.definition.title && g.field && (g.modules.format && b.table.options.responsiveLayoutCollapseUseFormatters ? (f = {value:!1, data:{}, getValue:function() {
        return l;
      }, getData:function() {
        return c;
      }, getElement:function() {
        return document.createElement("div");
      }, getRow:function() {
        return a.getComponent();
      }, getColumn:function() {
        return g.getComponent();
      }}, d[g.definition.title] = g.modules.format.formatter.call(b.table.modules.format, f, g.modules.format.params)) : d[g.definition.title] = l);
    });
    return d;
  };
  n.prototype.formatCollapsedData = function(a) {
    var b = document.createElement("table"), c = "", d;
    for (d in a) {
      c += "<tr><td><strong>" + d + "</strong></td><td>" + a[d] + "</td></tr>";
    }
    b.innerHTML = c;
    return Object.keys(a).length ? b : "";
  };
  r.prototype.registerModule("responsiveLayout", n);
  n = function(a) {
    this.table = a;
    this.lastClickedRow = this.selecting = !1;
    this.selectPrev = [];
    this.selectedRows = [];
  };
  n.prototype.clearSelectionData = function(a) {
    this.lastClickedRow = this.selecting = !1;
    this.selectPrev = [];
    this.selectedRows = [];
    a || this._rowSelectionChanged();
  };
  n.prototype.initializeRow = function(a) {
    var b = this, c = a.getElement(), d = function A() {
      setTimeout(function() {
        b.selecting = !1;
      }, 50);
      document.body.removeEventListener("mouseup", A);
    };
    a.modules.select = {selected:!1};
    b.table.options.selectableCheck.call(this.table, a.getComponent()) ? (c.classList.add("tabulator-selectable"), c.classList.remove("tabulator-unselectable"), b.table.options.selectable && "highlight" != b.table.options.selectable && (b.table.options.selectableRangeMode && "click" === b.table.options.selectableRangeMode ? c.addEventListener("click", function(c) {
      if (c.shiftKey) {
        b.lastClickedRow = b.lastClickedRow || a;
        var d = b.table.rowManager.getDisplayRowIndex(b.lastClickedRow), f = b.table.rowManager.getDisplayRowIndex(a), g = d <= f ? d : f, d = d >= f ? d : f, g = b.table.rowManager.getDisplayRows().slice(0).splice(g, d - g + 1);
        c.ctrlKey ? (g.forEach(function(a) {
          a !== b.lastClickedRow && b.toggleRow(a);
        }), b.lastClickedRow = a) : (b.deselectRows(), b.selectRows(g));
      } else {
        c.ctrlKey ? b.toggleRow(a) : (b.deselectRows(), b.selectRows(a)), b.lastClickedRow = a;
      }
    }) : (c.addEventListener("click", function(c) {
      b.selecting || b.toggleRow(a);
    }), c.addEventListener("mousedown", function(c) {
      if (c.shiftKey) {
        return b.selecting = !0, b.selectPrev = [], document.body.addEventListener("mouseup", d), document.body.addEventListener("keyup", d), b.toggleRow(a), !1;
      }
    }), c.addEventListener("mouseenter", function(c) {
      b.selecting && (b.toggleRow(a), b.selectPrev[1] == a && b.toggleRow(b.selectPrev[0]));
    }), c.addEventListener("mouseout", function(c) {
      b.selecting && b.selectPrev.unshift(a);
    })))) : (c.classList.add("tabulator-unselectable"), c.classList.remove("tabulator-selectable"));
  };
  n.prototype.toggleRow = function(a) {
    this.table.options.selectableCheck.call(this.table, a.getComponent()) && (a.modules.select.selected ? this._deselectRow(a) : this._selectRow(a));
  };
  n.prototype.selectRows = function(a) {
    var b = this;
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "undefined":
        b.table.rowManager.rows.forEach(function(a) {
          b._selectRow(a, !0, !0);
        });
        b._rowSelectionChanged();
        break;
      case "boolean":
        !0 === a && (b.table.rowManager.activeRows.forEach(function(a) {
          b._selectRow(a, !0, !0);
        }), b._rowSelectionChanged());
        break;
      default:
        Array.isArray(a) ? (a.forEach(function(a) {
          b._selectRow(a, !0, !0);
        }), b._rowSelectionChanged()) : b._selectRow(a, !1, !0);
    }
  };
  n.prototype._selectRow = function(a, b, c) {
    if (!isNaN(this.table.options.selectable) && !0 !== this.table.options.selectable && !c && this.selectedRows.length >= this.table.options.selectable) {
      if (this.table.options.selectableRollingSelection) {
        this._deselectRow(this.selectedRows[0]);
      } else {
        return !1;
      }
    }
    (c = this.table.rowManager.findRow(a)) ? -1 == this.selectedRows.indexOf(c) && (c.modules.select.selected = !0, c.getElement().classList.add("tabulator-selected"), this.selectedRows.push(c), b || (this.table.options.rowSelected.call(this.table, c.getComponent()), this._rowSelectionChanged())) : b || console.warn("Selection Error - No such row found, ignoring selection:" + a);
  };
  n.prototype.isRowSelected = function(a) {
    return -1 !== this.selectedRows.indexOf(a);
  };
  n.prototype.deselectRows = function(a) {
    var b = this;
    if ("undefined" == typeof a) {
      a = b.selectedRows.length;
      for (var c = 0; c < a; c++) {
        b._deselectRow(b.selectedRows[0], !0);
      }
      b._rowSelectionChanged();
    } else {
      Array.isArray(a) ? (a.forEach(function(a) {
        b._deselectRow(a, !0);
      }), b._rowSelectionChanged()) : b._deselectRow(a);
    }
  };
  n.prototype._deselectRow = function(a, b) {
    var c = this.table.rowManager.findRow(a);
    c ? (a = this.selectedRows.findIndex(function(a) {
      return a == c;
    }), -1 < a && (c.modules.select.selected = !1, c.getElement().classList.remove("tabulator-selected"), this.selectedRows.splice(a, 1), b || (this.table.options.rowDeselected.call(this.table, c.getComponent()), this._rowSelectionChanged()))) : b || console.warn("Deselection Error - No such row found, ignoring selection:" + a);
  };
  n.prototype.getSelectedData = function() {
    var a = [];
    this.selectedRows.forEach(function(b) {
      a.push(b.getData());
    });
    return a;
  };
  n.prototype.getSelectedRows = function() {
    var a = [];
    this.selectedRows.forEach(function(b) {
      a.push(b.getComponent());
    });
    return a;
  };
  n.prototype._rowSelectionChanged = function() {
    this.table.options.rowSelectionChanged.call(this.table, this.getSelectedData(), this.getSelectedRows());
  };
  r.prototype.registerModule("selectRow", n);
  n = function(a) {
    this.table = a;
    this.sortList = [];
    this.changed = !1;
  };
  n.prototype.initializeColumn = function(a, b) {
    var c = this, d = !1;
    switch(_typeof(a.definition.sorter)) {
      case "string":
        c.sorters[a.definition.sorter] ? d = c.sorters[a.definition.sorter] : console.warn("Sort Error - No such sorter found: ", a.definition.sorter);
        break;
      case "function":
        d = a.definition.sorter;
    }
    a.modules.sort = {sorter:d, dir:"none", params:a.definition.sorterParams || {}, startingDir:a.definition.headerSortStartingDir || "asc"};
    if (!1 !== a.definition.headerSort) {
      d = a.getElement();
      d.classList.add("tabulator-sortable");
      var f = document.createElement("div");
      f.classList.add("tabulator-arrow");
      b.appendChild(f);
      d.addEventListener("click", function(b) {
        var d = "", f = [], g = !1;
        a.modules.sort && (d = "asc" == a.modules.sort.dir ? "desc" : "desc" == a.modules.sort.dir ? "asc" : a.modules.sort.startingDir, c.table.options.columnHeaderSortMulti && (b.shiftKey || b.ctrlKey) ? (f = c.getSort(), g = f.findIndex(function(b) {
          return b.field === a.getField();
        }), -1 < g ? (f[g].dir = "asc" == f[g].dir ? "desc" : "asc", g != f.length - 1 && f.push(f.splice(g, 1)[0])) : f.push({column:a, dir:d}), c.setSort(f)) : c.setSort(a, d), c.table.rowManager.sorterRefresh());
      });
    }
  };
  n.prototype.hasChanged = function() {
    var a = this.changed;
    this.changed = !1;
    return a;
  };
  n.prototype.getSort = function() {
    var a = [];
    this.sortList.forEach(function(b) {
      b.column && a.push({column:b.column.getComponent(), field:b.column.getField(), dir:b.dir});
    });
    return a;
  };
  n.prototype.setSort = function(a, b) {
    var c = this, d = [];
    Array.isArray(a) || (a = [{column:a, dir:b}]);
    a.forEach(function(a) {
      var b;
      (b = c.table.columnManager.findColumn(a.column)) ? (a.column = b, d.push(a), c.changed = !0) : console.warn("Sort Warning - Sort field does not exist and is being ignored: ", a.column);
    });
    c.sortList = d;
    this.table.options.persistentSort && this.table.modExists("persistence", !0) && this.table.modules.persistence.save("sort");
  };
  n.prototype.clear = function() {
    this.setSort([]);
  };
  n.prototype.findSorter = function(a) {
    var b = this.table.rowManager.activeRows[0], c = "string", d;
    if (b && (b = b.getData(), d = a.getField())) {
      switch(a = a.getFieldValue(b), "undefined" === typeof a ? "undefined" : _typeof(a)) {
        case "undefined":
          c = "string";
          break;
        case "boolean":
          c = "boolean";
          break;
        default:
          isNaN(a) || "" === a ? a.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i) && (c = "alphanum") : c = "number";
      }
    }
    return this.sorters[c];
  };
  n.prototype.sort = function() {
    var a = this;
    var b = this.table.options.sortOrderReverse ? a.sortList.slice().reverse() : a.sortList;
    a.table.options.dataSorting && a.table.options.dataSorting.call(a.table, a.getSort());
    a.clearColumnHeaders();
    a.table.options.ajaxSorting ? b.forEach(function(b, c) {
      a.setColumnHeader(b.column, b.dir);
    }) : b.forEach(function(c, d) {
      c.column && c.column.modules.sort && (c.column.modules.sort.sorter || (c.column.modules.sort.sorter = a.findSorter(c.column)), a._sortItem(c.column, c.dir, b, d));
      a.setColumnHeader(c.column, c.dir);
    });
    a.table.options.dataSorted && a.table.options.dataSorted.call(a.table, a.getSort(), a.table.rowManager.getComponents(!0));
  };
  n.prototype.clearColumnHeaders = function() {
    this.table.columnManager.getRealColumns().forEach(function(a) {
      a.modules.sort && (a.modules.sort.dir = "none", a.getElement().setAttribute("aria-sort", "none"));
    });
  };
  n.prototype.setColumnHeader = function(a, b) {
    a.modules.sort.dir = b;
    a.getElement().setAttribute("aria-sort", b);
  };
  n.prototype._sortItem = function(a, b, c, d) {
    var f = this, g = f.table.rowManager.activeRows, h = "function" === typeof a.modules.sort.params ? a.modules.sort.params(a.getComponent(), b) : a.modules.sort.params;
    g.sort(function(g, l) {
      var p = f._sortRow(g, l, a, b, h);
      if (0 === p && d) {
        for (var m = d - 1; 0 <= m && (p = f._sortRow(g, l, c[m].column, c[m].dir, h), 0 === p); m--) {
        }
      }
      return p;
    });
  };
  n.prototype._sortRow = function(a, b, c, d, f) {
    var g = "asc" == d ? a : b;
    var h = "asc" == d ? b : a;
    a = c.getFieldValue(g.getData());
    b = c.getFieldValue(h.getData());
    a = "undefined" !== typeof a ? a : "";
    b = "undefined" !== typeof b ? b : "";
    g = g.getComponent();
    h = h.getComponent();
    return c.modules.sort.sorter.call(this, a, b, g, h, c.getComponent(), d, f);
  };
  n.prototype.sorters = {number:function(a, b, c, d, f, g, h) {
    c = h.alignEmptyValues;
    a = parseFloat(String(a).replace(",", ""));
    b = parseFloat(String(b).replace(",", ""));
    if (isNaN(a)) {
      a = isNaN(b) ? 0 : -1;
    } else {
      if (isNaN(b)) {
        a = 1;
      } else {
        return a - b;
      }
    }
    if ("top" === c && "desc" === g || "bottom" === c && "asc" === g) {
      a *= -1;
    }
    return a;
  }, string:function(a, b, c, d, f, g, h) {
    c = h.alignEmptyValues;
    var l;
    if (a) {
      if (b) {
        switch(_typeof(h.locale)) {
          case "boolean":
            h.locale && (l = this.table.modules.localize.getLocale());
            break;
          case "string":
            l = h.locale;
        }
        return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), l);
      }
      a = 1;
    } else {
      a = b ? -1 : 0;
    }
    if ("top" === c && "desc" === g || "bottom" === c && "asc" === g) {
      a *= -1;
    }
    return a;
  }, date:function(a, b, c, d, f, g, h) {
    h.format || (h.format = "DD/MM/YYYY");
    return this.sorters.datetime.call(this, a, b, c, d, f, g, h);
  }, time:function(a, b, c, d, f, g, h) {
    h.format || (h.format = "hh:mm");
    return this.sorters.datetime.call(this, a, b, c, d, f, g, h);
  }, datetime:function(a, b, c, d, f, g, h) {
    c = h.format || "DD/MM/YYYY hh:mm:ss";
    h = h.alignEmptyValues;
    if ("undefined" != typeof moment) {
      a = moment(a, c);
      b = moment(b, c);
      if (a.isValid()) {
        if (b.isValid()) {
          return a - b;
        }
        a = 1;
      } else {
        a = b.isValid() ? -1 : 0;
      }
      if ("top" === h && "desc" === g || "bottom" === h && "asc" === g) {
        a *= -1;
      }
      return a;
    }
    console.error("Sort Error - 'datetime' sorter is dependant on moment.js");
  }, boolean:function(a, b, c, d, f, g, h) {
    return (!0 === a || "true" === a || "True" === a || 1 === a ? 1 : 0) - (!0 === b || "true" === b || "True" === b || 1 === b ? 1 : 0);
  }, array:function(a, b, c, d, f, g, h) {
    function l(a) {
      switch(m) {
        case "length":
          return a.length;
        case "sum":
          return a.reduce(function(a, b) {
            return a + b;
          });
        case "max":
          return Math.max.apply(null, a);
        case "min":
          return Math.min.apply(null, a);
        case "avg":
          return a.reduce(function(a, b) {
            return a + b;
          }) / a.length;
      }
    }
    d = c = 0;
    var m = h.type || "length";
    h = h.alignEmptyValues;
    c = 0;
    if (Array.isArray(a)) {
      if (Array.isArray(b)) {
        return c = a ? l(a) : 0, d = b ? l(b) : 0, c - d;
      }
      h = 1;
    } else {
      h = Array.isArray(b) ? -1 : 0;
    }
    if ("top" === h && "desc" === g || "bottom" === h && "asc" === g) {
      c *= -1;
    }
    return c;
  }, exists:function(a, b, c, d, f, g, h) {
    return ("undefined" == typeof a ? 0 : 1) - ("undefined" == typeof b ? 0 : 1);
  }, alphanum:function(a, b, c, d, f, g, h) {
    c = 0;
    d = /(\d+)|(\D+)/g;
    f = /\d/;
    h = h.alignEmptyValues;
    if (a || 0 === a) {
      if (b || 0 === b) {
        if (isFinite(a) && isFinite(b)) {
          return a - b;
        }
        g = String(a).toLowerCase();
        b = String(b).toLowerCase();
        if (g === b) {
          return 0;
        }
        if (!f.test(g) || !f.test(b)) {
          return g > b ? 1 : -1;
        }
        g = g.match(d);
        b = b.match(d);
        for (d = g.length > b.length ? b.length : g.length; c < d;) {
          if (a = g[c], h = b[c++], a !== h) {
            return isFinite(a) && isFinite(h) ? ("0" === a.charAt(0) && (a = "." + a), "0" === h.charAt(0) && (h = "." + h), a - h) : a > h ? 1 : -1;
          }
        }
        return g.length > b.length;
      }
      c = 1;
    } else {
      c = b || 0 === b ? -1 : 0;
    }
    if ("top" === h && "desc" === g || "bottom" === h && "asc" === g) {
      c *= -1;
    }
    return c;
  }};
  r.prototype.registerModule("sort", n);
  n = function(a) {
    this.table = a;
  };
  n.prototype.initializeColumn = function(a) {
    var b = this, c = [], d;
    a.definition.validator && (Array.isArray(a.definition.validator) ? a.definition.validator.forEach(function(a) {
      (d = b._extractValidator(a)) && c.push(d);
    }) : (d = this._extractValidator(a.definition.validator)) && c.push(d), a.modules.validate = c.length ? c : !1);
  };
  n.prototype._extractValidator = function(a) {
    switch("undefined" === typeof a ? "undefined" : _typeof(a)) {
      case "string":
        var b = a.split(":", 2);
        a = b.shift();
        b = b[0];
        return this._buildValidator(a, b);
      case "function":
        return this._buildValidator(a);
      case "object":
        return this._buildValidator(a.type, a.parameters);
    }
  };
  n.prototype._buildValidator = function(a, b) {
    var c = "function" == typeof a ? a : this.validators[a];
    if (c) {
      return {type:"function" == typeof a ? "function" : a, func:c, params:b};
    }
    console.warn("Validator Setup Error - No matching validator found:", a);
    return !1;
  };
  n.prototype.validate = function(a, b, c) {
    var d = this, f = [];
    a && a.forEach(function(a) {
      a.func.call(d, b, c, a.params) || f.push({type:a.type, parameters:a.params});
    });
    return f.length ? f : !0;
  };
  n.prototype.validators = {integer:function(a, b, c) {
    if ("" === b || null === b || "undefined" === typeof b) {
      return !0;
    }
    b = Number(b);
    return "number" === typeof b && isFinite(b) && Math.floor(b) === b;
  }, float:function(a, b, c) {
    if ("" === b || null === b || "undefined" === typeof b) {
      return !0;
    }
    b = Number(b);
    return "number" === typeof b && isFinite(b) && 0 !== b % 1;
  }, numeric:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : !isNaN(b);
  }, string:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : isNaN(b);
  }, max:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : parseFloat(b) <= c;
  }, min:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : parseFloat(b) >= c;
  }, minLength:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : String(b).length >= c;
  }, maxLength:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : String(b).length <= c;
  }, in:function(a, b, c) {
    if ("" === b || null === b || "undefined" === typeof b) {
      return !0;
    }
    "string" == typeof c && (c = c.split("|"));
    return "" === b || -1 < c.indexOf(b);
  }, regex:function(a, b, c) {
    return "" === b || null === b || "undefined" === typeof b ? !0 : (new RegExp(c)).test(b);
  }, unique:function(a, b, c) {
    if ("" === b || null === b || "undefined" === typeof b) {
      return !0;
    }
    var d = !0, f = a.getData(), g = a.getColumn()._getSelf();
    this.table.rowManager.rows.forEach(function(a) {
      a = a.getData();
      a !== f && b == g.getFieldValue(a) && (d = !1);
    });
    return d;
  }, required:function(a, b, c) {
    return "" !== b & null !== b && "undefined" !== typeof b;
  }};
  r.prototype.registerModule("validate", n);
  return r;
});
Polymer({is:"simpl-tabulator", properties:{data:{type:Object}, meta:{type:Object}}, observers:["dataChanged(data,meta)"], behaviors:[ModernizrBehavior, StyleScopeBehavior], dataChanged:function() {
  this.createTable();
}, createTable:function() {
  this.table = new Tabulator(this.$.tabulator_table, this.meta);
  this.table.setData(this.data);
}});
Polymer({is:"simpl-crudtable", behaviors:[DataTablesBehavior, ModernizrBehavior, StyleScopeBehavior], properties:{selectButtonEnabled:{type:Boolean, value:!1}, disableSpinner:{type:Boolean, value:!1}, dtOptions:{type:String, value:""}, buttons:{type:String}, filter:{type:Object}}, observers:["filterChanged(filter.*,dtOptions)", "buttonsChanged(buttons,isAttached,selectButtonEnabled)", "selectionChanged(selection)"], ready:function() {
}, attached:function() {
  this.isAttached = !0;
}, addAction:function() {
  this.fire("add-action", {entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, editAction:function() {
  null != this.selection && this.fire("edit-action", {data:this.selection[0], dataSet:this.dataSet, rowIndex:this.currentRowIndex, entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, showAction:function() {
  null != this.selection && this.fire("show-action", {data:this.selection[0], entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, detailAction:function() {
  null != this.selection && this.fire("detail-action", {data:this.selection[0]});
}, delAction:function() {
  null != this.selection && this.fire("del-action", {data:this.selection[0], entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, refreshAction:function() {
  this.fire("refresh-action", {entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, selectAction:function() {
  this.selectButtonEnabled ? this.fire("select-action", {data:{}}) : null != this.selection && this.fire("select-action", {data:this.selection[0]});
}, cancelAction:function() {
  this.fire("cancel-action", {});
}, copyAction:function() {
  null != this.selection && this.fire("copy-action", {data:this.selection[0], entity:this.entity, entityChild:this.id, table:this, namespace:this.namespace});
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, selectionChanged:function() {
  if (null != this.buttonDef) {
    this.buttonDef.edit.disabled = this.buttonDef.copy.disabled = this.buttonDef.show.disabled = this.buttonDef.select.disabled = this.buttonDef.detail.disabled = null == this.selection;
    for (var a = 0; a < this.buttonList.length; a++) {
      "add" != this.buttonList[a].name && "cancel" != this.buttonList[a].name && "refresh" != this.buttonList[a].name && (0 != this.selectButtonEnabled && "select" == this.buttonList[0].name || this.set("buttonList." + a + ".disabled", null == this.selection));
    }
    this.selectButtonEnabled && (this.buttonDef.select.disabled = !1);
  }
}, buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", text:tr("button.new"), disabled:!1}, edit:{action:this.editAction, icon:"create", text:tr("button.edit"), disabled:!0}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}, refresh:{action:this.refreshAction, icon:"refresh", text:tr("button.refresh"), disabled:!1}, show:{action:this.showAction, icon:"bookmark-outline", text:tr("button.show"), disabled:!0}, copy:{action:this.copyAction, icon:"content-copy", text:tr("button.copy"), 
  disabled:!0}, detail:{action:this.detailAction, icon:"view-list", text:tr("button.details"), disabled:!0}, select:{action:this.selectAction, icon:"check", text:tr("button.select"), disabled:this.selectButtonEnabled ? !1 : !0}, cancel:{action:this.cancelAction, icon:"cancel", text:tr("button.cancel"), disabled:!1}};
  this.buttonDef = a;
  var b = [];
  _.isEmpty(this.buttons) || this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, filterChanged:function(a, b) {
  if (this.filter) {
    this.entity = this.filter.entity;
    this.namespace = this.filter.namespace || simpl4.util.BaseManager.getNamespace();
    a = !1;
    if (null == this.dtMeta || null == this._api) {
      a = !0;
    }
    a && (this.dtMeta = this.preProcessMeta(simpl4EntityManager.getEntityViewFields(this.filter.entity, "main-grid", !0, {namespace:this.namespace})));
    null == this.dtMeta || 0 == this.dtMeta.length ? console.error("crudtable.nometa:", this.filter) : (this.showSpinner(this.$.dataTablesId), this.getData(this.filter, a));
  }
}, showSpinner:function(a) {
  this.disableSpinner || this.async(function() {
    var a = this.querySelector(".spinner");
    a && (a.innerHTML = "", Spinners.create(a, {radius:22, dashes:30, width:2.5, height:10, opacity:1, padding:3, rotation:600, color:"#000000"}).play());
  }, 50);
}, _dataComplete:function(a, b) {
  this.async(function() {
    var a = this.querySelector(".spinner");
    a && (a.innerHTML = "");
  }, 150);
  this.dataSet = this.preProcessData(a);
  b ? this._createTable(this.dtMeta, this.dataSet, this.dtOptions) : (this._api.clear(), this.dataSet.forEach(function(a, b) {
    a.__control = "";
    this._api.row.add(a);
  }.bind(this)), this._api.draw(), this._createRowListener());
}, preProcessData:function(a) {
  var b = Object.keys(this.selectableList || {}), c = Object.keys(this.dateList || {}), d = Object.keys(this.datetimeList || {});
  a.forEach(function(a) {
    b.forEach(function(b) {
      a[b + "_display"] = this.selectableList[b][a[b]];
    }, this);
    c.forEach(function(b) {
      a[b + "_display"] = this.getDate(a[b]);
    }, this);
    d.forEach(function(b) {
      a[b + "_display"] = this.getDatetime(a[b]);
    }, this);
  }, this);
  return a;
}, metaChanged:function() {
  this.dtMeta = this.preProcessMeta(this.meta);
}, preProcessMeta:function(a) {
  this.selectableList = {};
  this.dateList = {};
  this.datetimeList = {};
  this.columns = [];
  var b = "data", c = this.entity;
  0 < this.entity.indexOf(":") && (b = this.entity.split(":")[0], c = this.entity.split(":")[1]);
  var d = [];
  a.forEach(function(a) {
    var f = a.name;
    a.hidden || (a.selectable_items && (this.selectableList[a.name] = this.toMap(a.selectable_items.getItems()), f = a.name + "_display"), "date" == a.datatype && (this.dateList[a.name] = !0, f = a.name + "_display"), "datetime" == a.datatype && (this.datetimeList[a.name] = !0, f = a.name + "_display"), f = {title:a.title || tr(b + "." + c + "." + a.name), data:f, visible:!0 !== a.invisible, class:a.tags, mRender:this.renderColumn.bind(this)}, 0 == f.visible && (f.class = "never"), d.push(f), this.columns.push(a.name));
  }, this);
  this.allModList = [];
  this.allModList.concat(this.selectableList);
  this.allModList.concat(this.dateList);
  this.allModList.concat(this.datetimeList);
  return d;
}, renderColumn:function(a, b, c, d) {
  a = d.settings.aoColumns[d.col].mData;
  d = d.settings.aoColumns[d.col].sClass;
  if ("mobile" == Detectizr.device.type && d && -1 < d.toLowerCase().indexOf("phone")) {
    return "<div class='phone'><a href='tel:" + c[a] + "'>" + c[a] + "</a></div>";
  }
  if ("document" == this.entity && "filename" == a) {
    d = encodeURIComponent(JSON.stringify(this._getRpcHeader(c.id)));
    b = simpl4.util.Rpc._getUserName();
    var f = simpl4.util.Rpc._getPassword();
    return "<div class='filename'><a class='filename' target='_blank' href='/rpc/get?credentials=" + simpl4.util.Base64.encode(b + ":" + f) + "&rpc=" + d + "'>" + c[a] + "</a></div>";
  }
  return c[a];
}, toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.value] = a.label;
  }, this);
  return b;
}, _getRpcHeader:function(a) {
  return {service:"data", method:"queryOne", params:{storeId:this.namespace + "_data", entity:"document", getContent:!0, id:a}};
}, getDatetime:function(a) {
  return null == a ? "--" : moment(parseInt(a)).format("L HH:mm");
}, getDate:function(a) {
  return null == a ? "--" : moment(parseInt(a)).format("L");
}, refresh:function() {
  this.filterChanged();
}, getData:function(a, b) {
  this.selection = null;
  var c = simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-grid", {namespace:this.namespace}), d = simpl4.util.EntityManager.getPropertiesForEntity(a.entity, {namespace:this.namespace}), f = null, g = this.dtMeta;
  if (g) {
    for (var f = [], h = 0; h < g.length; h++) {
      if (null != g[h].data) {
        if (g[h].data.endsWith("_display")) {
          var m = g[h].data;
          f.push(m.substring(0, m.length - 8));
        } else {
          f.push(g[h].data);
        }
      }
    }
  }
  g = "data";
  h = a.entity;
  0 < a.entity.indexOf(":") && (g = a.entity.split(":")[0], h = a.entity.split(":")[1]);
  a.rpc ? (a = simpl4.util.Rpc.rpcSync("data:query", a.rpc), this._dataComplete(a.rows, b)) : (d.customServiceRead ? (d = d.customServiceRead, -1 == d.indexOf(":") && (d = "camelRoute:" + d), -1 == d.indexOf(".") && (d = d.split(":"), d = d[0] + ":" + this.namespace + "." + d[1]), a = {service:d.split(":")[0], method:d.split(":")[1], parameter:{storeId:this.namespace + "_" + g, pageSize:100, orderby:c.orderby, uuid:window.uuid, entity:h, fields:f, filter:a}, async:!0, context:this, failed:function(a) {
    console.error("simpl-crudtable1:", a);
    this.fire("error", {error:a});
  }, completed:function(a) {
    console.error("completed:", a);
    this._dataComplete(a, b);
  }}) : a = {service:"data", method:"query", parameter:{storeId:this.namespace + "_" + g, pageSize:100, orderby:c.orderby, entity:h, fields:f, filter:a}, async:!0, context:this, failed:function(a) {
    console.error("simpl-crudtable2:", a);
    this.fire("error", {error:a});
  }, completed:function(a) {
    console.log("completed2:", a.rows);
    this._dataComplete(a.rows, b);
  }}, simpl4.util.Rpc.rpcAsync(a));
}});
Polymer({is:"simpl-executefilter", properties:{pagesize:{type:Number, value:100}, offset:{type:Number, value:0}, params:{type:Object, value:function() {
  return {};
}, notify:!0}, meta:{notify:!0, type:Object}, data:{type:Object, notify:!0}, name:{value:null, type:String}, namespace:{value:null, type:String}}, observers:["paramsChanged(params.*,name,namespace)"], ready:function() {
}, paramsChanged:function() {
  console.log("executefilter.paramsChanged:", this.params);
  this.execute(!0);
}, parseParams:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, execute:function(a) {
  var b = this.parseParams(this.params), c = this.namespace || simpl4.util.BaseManager.getNamespace();
  console.debug("execute.namespace:", c);
  console.debug("execute.name:", this.name);
  console.debug("execute.params:", b);
  console.debug("execute.pagesize:", this.pagesize);
  console.debug("execute.offset:", this.offset);
  var d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("data:executeFilterByName", {storeId:c + "_data", withMeta:a, pageSize:this.pagesize, offset:this.offset, params:b, name:this.name});
  } catch (f) {
    console.error("executefilter:", f.stack);
    return;
  }
  a && (this.meta = d.meta, console.log("Meta:", this.meta));
  console.log("executeFilter.data:", d.rows);
  this.data = d.rows;
}});
Polymer({is:"simpl-buildfilter", properties:{params:{type:Object, notify:!0}, namespace:{value:null, type:String}, name:{value:null, type:String}, filter:{value:null, notify:!0, type:String}}, observers:["paramsChanged(params.*,name)"], paramsChanged:function() {
  this.build(!0);
}, parseParams:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, insertFilterParams:function(a, b) {
  if (null == a) {
    return !1;
  }
  var c = !0, d = a.label;
  null == a.connector && null != d && d.match(/^[a-zA-Z].*/) && (null != b && (-1 < Object.keys(b).indexOf(d) || -1 < Object.keys(b).indexOf(d.toLowerCase())) ? (c = b[d], null == c && (d = d.toLowerCase(), c = b[d]), null != c && (a.data = c), c = !0) : c = !1, delete a.connector, delete a.label);
  for (var d = a.children, f = [], g = 0; g < d.length; g++) {
    var h = d[g];
    this.insertFilterParams(h, b) && f.push(h);
  }
  a.children = f;
  return c;
}, addPack:function(a, b) {
  return 0 < a.indexOf(":") ? a : b + ":" + a;
}, build:function(a) {
  var b = this.parseParams(this.params);
  a = this.namespace || simpl4.util.BaseManager.getNamespace();
  console.log("buildFilter.build:", a + "." + this.name + "/", b);
  var b = simpl4.util.Rpc.rpcSync("git:searchContent", {reponame:a, name:this.name, type:"sw.filter"}), c = b.filter;
  this.insertFilterParams(c, this.params);
  c.namespace = a;
  c.entity = this.addPack(b.modulename, b.pack);
  console.log("buildFilter.filter:", c);
  this.set("filter", c);
}});
FormBehavior = {_valueChanged:function(a) {
  var b = this._getData(), c = simpl4.util.BaseManager.getLanguage(), c = {$mode:this.mode, $lang:c}, c = simpl4.util.Merge.merge(!0, b, c);
  this.saveDisabled = this._isSaveDisabled(c);
  this._errorMessage = null;
  for (var b = 0, d = this.fields.length; b < d; b++) {
    var f = this.fields[b];
    var g = f.getAttribute("enabled-expr");
    a = f.getAttribute("readonly-expr");
    var h = f.getAttribute("content-expr");
    this._isNotEmpty(a) ? (a = this._maskedEval(a, c)) ? f.setAttribute("disabled", "r") : f.removeAttribute("disabled") : this._isNotEmpty(g) && ((a = this._maskedEval(g, c)) ? f.removeAttribute("disabled") : f.setAttribute("disabled", "e"));
    a = f.getAttribute("exclude-expr");
    this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? f.setAttribute("hidden", "") : f.removeAttribute("hidden"));
    a = f.getAttribute("invisible-expr");
    this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? f.setAttribute("visibility", "hidden") : f.removeAttribute("visibility"));
    this._isNotEmpty(h) && (a = this._maskedEval(h, c), f.setValue(a));
  }
  null == this.groups && (this.groups = []);
  b = 0;
  for (d = this.groups.length; b < d; b++) {
    h = this.groups[b], g = h.getAttribute("enabled-expr"), a = h.getAttribute("readonly-expr"), h.getAttribute("content-expr"), this._isNotEmpty(a) ? (a = this._maskedEval(a, c)) ? h.setAttribute("disabled", "r") : h.removeAttribute("disabled") : this._isNotEmpty(g) && ((a = this._maskedEval(g, c)) ? h.removeAttribute("disabled") : h.setAttribute("disabled", "e")), a = h.getAttribute("exclude-expr"), this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? h.setAttribute("hidden", "") : h.removeAttribute("hidden")), 
    a = h.getAttribute("invisible-expr"), this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? h.setAttribute("visibility", "hidden") : h.removeAttribute("visibility"));
  }
  c = this.$.formdiv.parentNode.querySelectorAll("xaction-button");
  for (b = 0; b < c.length; b++) {
    d = c[b], "execute" == d.xaction && (this.saveDisabled ? d.setAttribute("disabled", "") : d.removeAttribute("disabled"));
  }
}, _isSaveDisabled:function(a) {
  var b = this._form.xf_save_disabled;
  if (this._isEmpty(b)) {
    return !1;
  }
  try {
    return this._maskedEval(b, a);
  } catch (c) {
    console.error("_postProcessLocalForm:", c);
  }
}, _isNotEmpty:function(a) {
  return null == a || 0 == a.length ? !1 : !0;
}, created:function() {
}, ready:function() {
}, _shapesChanged:function() {
  console.debug("simpl-baseform._shapesChanged");
  this._valueChanged();
}, validate:function(a) {
  var b = [], c = this._filterToArray("input-field,checkbox-field,select-field", this.$.formdiv, !0, !1);
  Array.prototype.forEach.call(c, function(a) {
    a.setInvalid(!1);
  });
  0 < c.length && (regula.bind({elements:c}), b = regula.validate({elements:c}), b.forEach(function(b) {
    b.failingElements.forEach(function(c) {
      c.setInvalid(!0 !== a ? !0 : !1);
      c.setErrorMessage(1 != a ? b.message : null);
    });
  }));
  for (var c = this._filterToArray("gridinput-field,tableselect-field,upload-field,embeddedobj-inline-field,linkedobj-field,linkedlist-field,embeddedobj-field,embeddedprimitivecollection-field,embeddedlist-field,tree-field,select-field", this.$.formdiv, !0, !0), d = 0; d < c.length; d++) {
    if ("SELECT-FIELD" != c[d].tagName || null == c[d].getAttribute("gridfield")) {
      if ("EMBEDDEDPRIMITIVECOLLECTION-FIELD" != c[d].tagName || null == c[d].getAttribute("gridfield")) {
        var f = c[d].isInvalid;
        c[d].checkConstraints();
        c[d].isInvalid && b.push("Error");
        !0 === a && c[d].setInvalid(f);
      }
    }
  }
  this._validateLocal(b);
  this._validateService(b);
  return 0 == b.length;
}, _validateLocal:function(a) {
  var b = this._form.xf_validate_local;
  if (this._isEmpty(b)) {
    return null;
  }
  for (var c = this._getData(), d = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $lang:d}, d = simpl4.util.Merge.merge(!0, c, d), f = b.items, b = [], c = 0; c < f.length; c++) {
    var g = f[c];
    !1 === this._maskedEval(g.expr, d) == 0 && ((g = g.errormsg) && g.match(/^[@%]/) && (g = tr(g.substring(1))), a.push(g), b.push(g));
  }
  d = a = "";
  for (c = 0; c < b.length; c++) {
    a += d + b[c], d = "<br/>";
  }
  this._setGlobalErrorMessage(a);
}, _validateService:function(a) {
  var b = this._form.xf_validate_service;
  if (this._isEmpty(b)) {
    return null;
  }
  try {
    -1 == b.indexOf(".") && (b = this.namespace + "." + b);
    for (var c = simpl4.util.BaseManager.getLanguage(), d = this._getData(), f = simpl4.util.Rpc.rpcSync("camelRoute:" + b, {data:d, lang:c, formName:this._removeExtension(this.formName), mode:this.mode, uuid:window.uuid}), c = [], d = 0; d < f.length; d++) {
      var g = f[d], h = g.message, m = g.path;
      h && h.match(/^[@%]/) && (h = tr(h.substring(1)));
      var u = !1;
      if (m) {
        var r = this._getField(m);
        r && (r.setInvalid(!0), r.setErrorMessage(h), u = !0);
      }
      a.push(h);
      u || c.push(h);
    }
    f = a = "";
    for (d = 0; d < c.length; d++) {
      a += f + c[d], f = "<br/>";
    }
    this._setGlobalErrorMessage(a);
  } catch (n) {
    console.error("_validateServiceForm.call:camelRoute:" + b), console.error("_validateServiceForm:", n);
  }
}, _setGlobalErrorMessage:function(a) {
  _.isEmpty(a) || (this._errorMessage = a, this.async(function() {
    var b = this.querySelector("#globalErrorId");
    null != b && (b.innerHTML = a);
  }, 50));
}, _getExcludes:function(a) {
  var b = [], c = this;
  $("simpl-form", this.$.formdiv).each(function(d) {
    b = b.concat(c._filterToArray(a, this, !1, !1));
  });
  return b;
}, _filterToArray:function(a, b, c, d) {
  var f = null;
  !0 === c && (f = this._getExcludes(a));
  var g = [];
  $(a, b).each(function(a) {
    a = this.getAttribute("hidden");
    if (d || null == a) {
      if (a = this.getAttribute("data-constraints"), d || null != a && 0 < a.length) {
        f ? 0 > f.indexOf(this) && g.push(this) : g.push(this);
      }
    }
  });
  return g;
}, isNumEmpty:function(a) {
  return null == a || 0 == a || isNaN(a) || "" == a ? !0 : !1;
}, _maskedEval:function(a, b, c) {
  try {
    return b._ = _, b.moment = moment, b.accounting = accounting, b.Math = Math, b.form = this, b.tr = window.tr, b.JSON = window.JSON5, b.console = window.console, b.isNumEmpty = this.isNumEmpty, b.parseFloat = window.parseFloat, b.parseInt = window.parseInt, b.isNaN = window.isNaN, metaes.evaluate(a.toString(), b);
  } catch (d) {
    console.error("\t" + d), console.debug("Form._maskedEval.script:", a), console.debug("Form._maskedEval.env:", b);
  }
  return c;
}, _maskedEvalNoError:function(a, b, c) {
  try {
    return b._ = _, b.moment = moment, b.accounting = accounting, b.Math = Math, b.form = this, b.tr = window.tr, b.parseFloat = window.parseFloat, b.parseInt = window.parseInt, b.isNaN = window.isNaN, metaes.evaluate(a.toString(), b);
  } catch (d) {
  }
  return c;
}, _whenFieldsReady:function(a) {
  function b() {
    null != c.fields && 0 < c.fields.length ? a() : setTimeout(b, 20);
  }
  var c = this;
  b();
}, _getField:function(a) {
  return this.fieldsMap[a];
}, _getLabel:function(a) {
  return this.fieldsMap[a].label;
}, _dataChanged:function() {
  !0 !== this.internal && this.__dataChanged();
  this.internal = !1;
}, __dataChanged:function() {
  this._whenFieldsReady(function() {
    this.preProcessData || this._doPreProcess();
    simpl4.util.Merge.merge(!1, this.data, this.preProcessData);
    this.preProcessData = null;
    this._setData(this.data);
  }.bind(this));
}, _setFieldData:function(a) {
  Object.keys(a).forEach(function(b) {
    var c = this._getField(b);
    null != c && null != c.setValue && (c.setInvalid && c.setInvalid(!1), c.setValue(a[b]));
  }, this);
}, setState:function(a) {
  this.setData(a);
}, setData:function(a) {
  this.resetData = jQuery.extend({}, a);
  null != a && (this.internal = !0, this.data = a, this.__dataChanged());
}, _setData:function(a) {
  null != a && (this.fields.forEach(function(b) {
    if (null != b.setValue) {
      b.withoutCheck = !0;
      b.setInvalid && (b.setInvalid(!1), b.setErrorMessage(null));
      var c = a[b.name];
      b.expressionIn && (c = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:c}, c = simpl4.util.Merge.merge(!0, a, c), c = this._maskedEval(b.expressionIn, c));
      var d = b.defaultvalue;
      null == c ? (d = this._maskedEvalNoError(d, {}, d), b.setValue(d)) : b.setValue(c);
      b.withoutCheck = !1;
    }
  }, this), this._valueChanged());
}, clearData:function() {
  this.fields.forEach(function(a) {
    null != a.setValue && (a.withoutCheck = !0, a.setInvalid && a.setInvalid(!1), a.setValue(null));
  }, this);
}, updateData:function(a) {
  this.internal = !0;
  this.data = this.data || {};
  Object.keys(a).forEach(function(b) {
    this.data[b] = a[b];
    var c = this.fieldsMap[b];
    if (c) {
      c.withoutCheck = !0;
      c.setInvalid && c.setInvalid(!1);
      var d = this.data[b];
      b = d;
      c.expressionIn && (d = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:d}, d = simpl4.util.Merge.merge(!0, a, d), d = this._maskedEval(c.expressionIn, d), console.log("expressionIn(" + c.name + "\t," + c.expressionIn + "\t," + b + ") -> ", d));
      c.setValue(d);
    }
  }.bind(this));
  this._valueChanged();
}, _getData:function() {
  var a = simpl4.util.Merge.merge(!0, this.data);
  this.fields.forEach(function(b) {
    null != b.getValue && (a[b.name] = b.getValue());
  }, this);
  return a;
}, getState:function() {
  return this.getData();
}, getData:function() {
  var a = simpl4.util.Merge.merge(!0, this.data);
  this.fields.forEach(function(b) {
    null != b.getValue && (a[b.name] = b.getValue());
  }, this);
  this.fields.forEach(function(b) {
    if (null != b.getValue && null != b.expressionOut) {
      b.getValue();
      var c = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:b.getValue()}, c = simpl4.util.Merge.merge(!0, a, c);
      a[b.name] = this._maskedEval(b.expressionOut, c);
    }
  }, this);
  return a;
}, setItems:function(a) {
  this._whenFieldsReady(function() {
    this._setItems(a);
  }.bind(this));
}, _setItems:function(a) {
  this.fields.forEach(function(b) {
    null != b.setItems && null != a[b.name] && b.setItems(a[b.name]);
  }, this);
}, _getSelectionLists:function(a) {
  if (this._isEmpty(a)) {
    return {};
  }
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var b = {service:"camelRoute", method:a, parameter:{lang:simpl4.util.BaseManager.getLanguage(), mode:this.mode, uuid:window.uuid}, async:!1, context:this, failed:function(a) {
      console.error("_getSelectionLists:", a);
      console.log(a.stack);
    }, completed:function(a) {
      console.log("_getSelectionLists._selectionLists:", a);
      this._selectionLists = a;
    }};
    return simpl4.util.Rpc.rpcAsync(b);
  } catch (c) {
    console.error("_getSelectionLists.call:camelRoute:" + a), console.error("_getSelectionLists:", c);
  }
}, _postProcessService:function() {
  var a = this._form.xf_postprocess_service, b = this._form.xf_postprocess_service_mode;
  if (b != this.mode && "edit_add" != b || this._isEmpty(a)) {
    return null;
  }
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var c = simpl4.util.BaseManager.getLanguage(), d = this._getData(), f = simpl4.util.Rpc.rpcSync("camelRoute:" + a, {formData:d, lang:c, formName:this._removeExtension(this.formName), mode:this.mode, prePost:"post", uuid:window.uuid});
    console.log("_postProcessForm.replaceFormData:", f);
    return f;
  } catch (g) {
    console.error("_postProcessForm.call:camelRoute:" + a), console.error("_postProcessForm:", g);
  }
}, _postProcessLocal:function() {
  var a = this._form.xf_postprocess_local;
  if (this._isEmpty(a)) {
    return null;
  }
  try {
    var b = this._getData(), c = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $uuid:window.uuid, $lang:c}, d = simpl4.util.Merge.merge(!0, b, d);
    return this._maskedEval(a, d);
  } catch (f) {
    console.error("_postProcessLocalForm:", f);
  }
}, _preProcessService:function() {
  var a = this._form.xf_preprocess_service, b = this._form.xf_preprocess_service_mode, b = b == this.mode || "edit_add" == b;
  if (!b || this._isEmpty(a)) {
    return null;
  }
  console.log("_preProcessService:", a + "/" + b + "/preProcessData:", this.preProcessData + "/data:", this.data);
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var c = {service:"camelRoute", method:a, parameter:{formData:this.data, lang:simpl4.util.BaseManager.getLanguage(), formName:this._removeExtension(this.formName), mode:this.mode, prePost:"pre", uuid:window.uuid}, async:!1, context:this, failed:function(a) {
      console.error("_postProcessForm:", a);
      console.log(a.stack);
    }, completed:function(a) {
      console.log("_preProcessService.replaceFormData:", a);
      null != a && (this._preData = a, a._selectionLists && (this._selectionLists = a._selectionLists));
    }};
    return simpl4.util.Rpc.rpcAsync(c);
  } catch (d) {
    console.error("_postProcessServic:", d), console.debug("_postProcessService.call:method:" + a);
  }
}, _preProcessLocal:function() {
  var a = this._form.xf_preprocess_local;
  if (this._isEmpty(a)) {
    return null;
  }
  try {
    var b = this.data, c = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $lang:c}, d = simpl4.util.Merge.merge(!0, b, d), f = this._maskedEval(a, d);
    null != f && (this._preData = f, console.log("_preProcessLocal.replaceFormData:", f));
  } catch (g) {
    console.error("_preProcessLocal:", g), console.debug("_preProcessLocal.script:", a);
  }
}, _doPreProcess:function() {
  this._preProcessService();
  var a = this._preData;
  this._preProcessLocal();
  this.preProcessData = simpl4.util.Merge.merge(!0, a, this._preData);
  this._preData = null;
}, _formNameChanged:function() {
  this.async(function() {
    this.__formNameChanged();
  }, 10);
}, __formNameChanged:function() {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this._preData = null;
  "empty" != this.formName && this.async(function() {
    try {
      var a = simpl4FormManager.getForm(this.formName, this.namespace);
    } catch (b) {
      console.error(b);
      return;
    }
    this._form = a.properties;
    this.defaultButtons = a.properties.xf_default_buttons;
    this.formVar = a.properties.xf_name;
    this._getSelectionLists(a.properties.xf_method_fetch);
    this._doPreProcess();
    this.shapes = this._prepareShape(a).childShapes;
    this._shapeMap = {};
    this._buildShapeMap(this.shapes[0]);
    this.async(function() {
      this.fields = this._filterToArray("[field]", this.$.formdiv, !0, !0);
      this.groups = this._filterToArray("simpl-group", this.$.formdiv, !0, !0);
      this.fieldsMap = this._toMap(this.fields);
      this.fields.forEach(function(a) {
        a.setForm(this);
      }, this);
      this.fire("form-ready", this);
      this._valueChanged();
      null == this.resetData && (this.resetData = this._getData());
    }, 1);
  }, 1);
}, _specChanged:function() {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this.async(function() {
    this.shapes = this.spec;
    this._shapeMap = {};
    this.shapes = [this._prepareShape(this.shapes[0])];
    this._buildShapeMap(this.shapes[0]);
    this.async(function() {
      this.fields = this._filterToArray("[field]", this.$.formdiv, !0, !0);
      this.groups = this._filterToArray("simpl-group", this.$.formdiv, !0, !0);
      this.fields.forEach(function(a) {
        a.setForm(this);
      }, this);
      this.fieldsMap = this._toMap(this.fields);
      this._valueChanged();
      this.fire("form-ready", this);
      null == this.resetData && (this.resetData = this._getData());
    }, 1);
  }, 1);
}, _formTabRenderer:function(a) {
  for (var b = 0; b < shapes.length; b++) {
    a = shapes[b], this._formElementRenderer(a);
  }
}, _formElementSelector:function(a) {
  for (var b = 0; b < a.length; b++) {
    var c = a[b];
    this.isField(c.id) && this._formElementRenderer(c);
    this.isTabView(c.id) && this._formTabRenderer(c.childShapes);
    (this.isGroup(c.id) || this.isRow(c.id) || this.isForm(c.id)) && this._formElementSelector(c.childShapes);
  }
}, _formElementRenderer:function(a) {
  this.isEnumSelect(a.id) && (this._itemMap[a.xf_id] = a.items);
}, getItems:function(a) {
  return this._itemMap[a];
}, initForm:function(a, b) {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this._itemMap = {};
  this._preData = null;
  this.namespace = a;
  a = simpl4FormManager.getForm(b, a);
  this._form = a.properties;
  this.formVar = a.properties.xf_name;
  this._getSelectionLists(a.properties.xf_method_fetch);
  this._doPreProcess();
  this.shapes = this._prepareShape(a).childShapes;
  this._shapeMap = {};
  this._buildShapeMap(this.shapes[0]);
  this._formElementSelector(this.shapes);
}, _toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.name] = a;
  }, this);
  return b;
}, _convertType:function(a) {
  return "datetime" == a ? "date" : "password" == a ? "text" : a;
}, _buildShapeMap:function(a) {
  a.xf_id && (this._shapeMap[a.xf_id] = a);
  a = a.childShapes;
  for (var b = 0; a && b < a.length; b++) {
    this._buildShapeMap(a[b]);
  }
}, _prepareShape:function(a) {
  var b = !1;
  if (null == a.stencil) {
    var c = {}, b = !0;
    c.stencil = {id:a.id};
    a.id = null;
    c.childShapes = a.childShapes;
    a.childShapes = null;
    c.properties = a;
    a = c;
  }
  a = this._cleanShape(a);
  "Input" == a.id && (a.regulaConstraints = this._constructRegulaConstraints(a["xf_constraint_" + this._convertType(a.xf_type)], a.xf_errormsg));
  !1 === b && (a.childShapes = _.sortBy(a.childShapes, function(a) {
    return 10000 * a.bounds.upperLeft.y + a.bounds.upperLeft.x;
  }));
  b = a.childShapes || [];
  a.childShapes = [];
  for (var c = null, d = 0; d < b.length; d++) {
    if ("Tabview" == a.id) {
      a.childShapes.push(this._prepareShape(b[d]));
    } else {
      if (0 == d || 0 < d && this._isLineBreak(b[d - 1], b[d])) {
        c = {id:"Row", childShapes:[]}, a.childShapes.push(c);
      }
      c.childShapes.push(this._prepareShape(b[d]));
    }
  }
  return a;
}, _cleanShape:function(a) {
  if ("input" == a.stencil.id.toLowerCase() || "textarea" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "upload" == a.stencil.id.toLowerCase() || "embeddedlist" == a.stencil.id.toLowerCase() || "linkedlist" == a.stencil.id.toLowerCase() || "embeddedprimitivecollection" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "embeddedobj" == a.stencil.id.toLowerCase() || "moduleselector" == a.stencil.id.toLowerCase() || "enumselect" == a.stencil.id.toLowerCase() || 
  "treeselect" == a.stencil.id.toLowerCase() || "tableselect" == a.stencil.id.toLowerCase() || "gridinput" == a.stencil.id.toLowerCase() || "checkbox" == a.stencil.id.toLowerCase() || "custom" == a.stencil.id.toLowerCase() || "page" == a.stencil.id.toLowerCase() || "group" == a.stencil.id.toLowerCase()) {
    var b = this._getLabelShape(a.childShapes);
    null != b ? (a.properties.label = b.properties.xf_text, null != a.properties.xf_id && "" != a.properties.xf_id || !a.properties.label || (a.properties.xf_id = a.properties.label.toLowerCase().replace(/\s/g, "")), 1 == a.childShapes.length && (a.childShapes = []), (b = a.properties.label) && b.match(/^[@%]/) && (a.properties.label = tr(b.substring(1)))) : null == a.properties.label && (a.properties.label = "");
    b = this._getHelpShape(a.childShapes);
    null != b ? (a.properties.help = b.properties.xf_message, 1 == a.childShapes.length && (a.childShapes = []), (b = a.properties.help) && b.match(/^[@%]/) && (a.properties.help = tr(b.substring(1)))) : a.properties.help = null;
    !this._isEmpty(a.properties.xf_default) && "input" == a.stencil.id.toLowerCase() && a.properties.xf_type.startsWith("date") && (b = a.properties.xf_default, "now" == a.properties.xf_default ? a.properties.xf_default = Date.create().getTime() : null != b && "string" === typeof b && 0 < b.length && (a.properties.xf_default = Date.create(b).getTime(), isNaN(a.properties.xf_default) && console.error("form-behavior:parse.error.DefaultDate(" + a.properties.xf_id + "):" + b)));
    _.isEmpty(a.properties.xf_required) && (a.properties.xf_required = "false");
    "textarea" == a.stencil.id.toLowerCase() && null == a.properties.xf_rows && (a.properties.xf_rows = 3);
    "moduleselector" == a.stencil.id.toLowerCase() && (a.properties.xf_namespace = this.namespace);
    if ("embeddedprimitivecollection" == a.stencil.id.toLowerCase()) {
      var c = [];
      "map" == a.properties.xf_collectiontype && (b = {id:"Input", type:"text", colname:"key"}, b.display = a.properties.xf_keylabel, b.display && b.display.match(/^[@%]/) && (b.display = tr(b.display.substring(1))), b.regulaConstraints = '@NotBlank(message="darf nicht leer sein")', c.push(b));
      b = {id:"Input", colname:"value"};
      b.type = a.properties.xf_type;
      b.display = a.properties.xf_valuelabel;
      b.valuetype = a.properties.xf_valuetype;
      b.display && b.display.match(/^[@%]/) && (b.display = tr(b.display.substring(1)));
      b.regulaConstraints = this._constructRegulaConstraints(a.properties["xf_constraint_" + this._convertType(a.properties.xf_type)], a.properties.xf_errormsg);
      c.push(b);
      a.properties.columns = c;
    }
    if ("embeddedlist" == a.stencil.id.toLowerCase() || "linkedlist" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "embeddedobj" == a.stencil.id.toLowerCase()) {
      null == a.properties.xf_namespace && (a.properties.xf_namespace = this.namespace), (b = a.bounds) ? a.properties.height = b.lowerRight.y - b.upperLeft.y : a.properties.xf_height && (a.properties.height = a.properties.xf_height);
    }
    if ("gridinput" == a.stencil.id.toLowerCase()) {
      c = a.properties;
      c.columns = c.xf_columns.items;
      for (var d = 0; d < c.columns.length; d++) {
        b = c.columns[d];
        b.display && b.display.match(/^[@%]/) && (b.display = tr(b.display.substring(1)));
        b.label && b.label.match(/^[@%]/) && (b.label = tr(b.label.substring(1)));
        if ("selection" == b.type) {
          b.id = "Enumselect";
          try {
            if (b.parameter && b.parameter.startsWith("enumeration")) {
              var f = simpl4FormManager.createSelectableItems(this.namespace, this.formName, c.xf_id, b.parameter);
              b.items = f.getItems();
            } else {
              b.parameter && (b.items = JSONPath({json:this._selectionLists, path:b.parameter, callback:function() {
              }})[0]);
            }
          } catch (g) {
            console.error("JSONPath:", g);
          }
        }
        if ("TreeSelection" == b.type) {
          b.id = "Treeselect";
          try {
            b.parameter && b.parameter.startsWith("service") ? (f = simpl4FormManager.createSelectableItems(this.namespace, this.formName, c.xf_id, b.parameter), b.items = f.getItems()) : b.items = JSONPath({json:this._selectionLists, path:b.parameter, callback:function() {
            }})[0];
          } catch (g) {
            console.error("JSONPath:", g);
          }
        }
      }
      c.xf_columns = void 0;
      b = a.bounds;
      c.height = b.lowerRight.y - b.upperLeft.y;
    }
    "page" == a.stencil.id.toLowerCase() && (b = a.properties.xf_label) && b.match(/^[@%]/) && (a.properties.label = tr(b.substring(1)));
    "enumselect" != a.stencil.id.toLowerCase() && "tableselect" != a.stencil.id.toLowerCase() && "treeselect" != a.stencil.id.toLowerCase() || this._handleSelectionLists(a, "");
    "embeddedprimitivecollection" == a.stencil.id.toLowerCase() && (this._handleSelectionLists(a, "value"), a.properties.items && 0 < a.properties.items.length && ("map" == a.properties.xf_collectiontype ? (a.properties.columns[1].items = a.properties.items, a.properties.columns[1].id = "Enumselect") : (a.properties.columns[0].items = a.properties.items, a.properties.columns[0].id = "Enumselect")));
    "embeddedprimitivecollection" == a.stencil.id.toLowerCase() && "map" == a.properties.xf_collectiontype && (a.properties.items = null, this._handleSelectionLists(a, "key"), a.properties.items && 0 < a.properties.items.length && (a.properties.columns[0].items = a.properties.items, a.properties.columns[0].id = "Enumselect"));
  } else {
    if ("actionbutton" == a.stencil.id.toLowerCase()) {
      f = a.properties.xf_iconname;
      b = a.properties.xf_action;
      c = a.properties.xf_enter;
      if (null == f || "" == f) {
        a.properties.xf_iconname = "execute" == b ? "check" : "clear";
      }
      null == this.enterAction && !0 === c && (this.enterAction = b);
      (b = a.properties.xf_label) && b.match(/^[@%]/) && (a.properties.xf_label = tr(b.substring(1)));
    } else {
      "alert" == a.stencil.id.toLowerCase() ? (f = simpl4.util.BaseManager.getLanguage(), a.properties.xf_message = a.properties["xf_message_" + f] ? this._expandString(a.properties["xf_message_" + f], this.variables) : this._expandString(a.properties.xf_message, this.variables)) : a.properties.label = "";
    }
  }
  null == a.properties.xf_type && (a.properties.xf_type = "noop");
  return _.extend(a.properties, {bounds:a.bounds}, a.stencil, {childShapes:a.childShapes});
}, _getHelpShape:function(a) {
  if (null == a) {
    return null;
  }
  for (var b = 0; b < a.length && null != a[b].stencil; b++) {
    if ("help" == a[b].stencil.id.toLowerCase()) {
      return a[b];
    }
  }
  return null;
}, _getLabelShape:function(a) {
  if (null == a) {
    return null;
  }
  for (var b = 0; b < a.length && null != a[b].stencil; b++) {
    if ("label" == a[b].stencil.id.toLowerCase()) {
      return a[b];
    }
  }
  return null;
}, _isLineBreak:function(a, b) {
  if (null == a.bounds) {
    return !1;
  }
  var c = !1;
  a.bounds.upperLeft.y != b.bounds.upperLeft.y && (c = !0);
  return c;
}, _handleSelectionLists:function(a, b) {
  var c = "tableselect" == a.stencil.id.toLowerCase(), d = "treeselect" == a.stencil.id.toLowerCase(), f = a.properties, g = f["xf_enumembed" + b], h = f["xf_enum" + b], m = f["xf_service" + b], u = f["xf_filter" + b], r = f["xf_resource" + b], n = f.xf_jsonpath;
  var v = f["xf_parammapping" + b];
  b = f["xf_resultmapping" + b];
  var w = f.xf_varname, y = f.xf_namespace;
  y && "-" != y || (y = this.namespace);
  this._isEmpty(w) ? this._isEmpty(n) ? !d && !c && g && 0 < g.totalCount ? (v = simpl4FormManager.createSelectableItems(y, this.formName, f.xf_id, g), f.items = v.getItems()) : !d && !c && h && 0 < h.totalCount ? (v = simpl4FormManager.createSelectableItems(y, this.formName, f.xf_id, JSON.stringify(h)), f.items = v.getItems()) : d && r ? (b = simpl4.util.Rpc.rpcSync("resource:getResourceTree", {namespace:y, types:r.split(",")}), f.items = null != f.xf_default ? [{label:"-", id:f.xf_default}].concat(b.children) : 
  b.children, console.log("treeitem:", f.items)) : d || this._isEmpty(u) ? this._isEmpty(m) ? null == f.items && h && 0 < h.totalCount && (v = simpl4FormManager.createSelectableItems(y, this.formName, f.xf_id, JSON.stringify(h)), f.items = v.getItems()) : (c = {totalCount:1, enumDescription:"sw.service:" + m, items:[]}, c.params = this._doParameterMapping(v), v = simpl4FormManager.createSelectableItems(y, this.formName, f.xf_id, JSON.stringify(c), this.variables), f.items = this._doResultMapping(v.getItems(), 
  b)) : (c = {totalCount:1, enumDescription:"sw.filter:" + u, items:[]}, c.params = this._doParameterMapping(v), c.checkParams = !0, v = simpl4FormManager.createSelectableItems(y, this.formName, f.xf_id, JSON.stringify(c)), y = v.getItems(), v.getMissingParamList() ? (console.error("Filter:", c), console.error("Filter.misingParameters:", v.getMissingParamList())) : f.items = this._doResultMapping(y, b)) : (v = JSONPath({json:this._selectionLists, path:n, callback:function() {
  }}), f.items = null == v || 0 == v.length ? [] : v[0], f.items = this._doResultMapping(f.items, b)) : (f.items = this.variables[w], d || (f.items = this._doResultMapping(f.items, b)));
  if ("tableselect" == a.stencil.id.toLowerCase() && (null == f.items && (f.items = []), b = (b = f.xf_columns) ? b.items : [], f.meta = [], b.forEach(function(a, b) {
    var c = b = a.display;
    c && c.match(/^[@%]/) && (b = tr(c.substring(1)));
    null == b && (b = xf_id + "." + a.colname);
    f.meta.push({title:b, data:a.colname});
  }, this), !f.height)) {
    if (b = a.bounds) {
      f.height = b.lowerRight.y - b.upperLeft.y;
    }
    if (null == f.height || 75 > f.height) {
      f.height = 75;
    }
  }
  if (f.items && 0 < f.items.length && !this._isEmpty(a.properties.xf_default) && a.properties.xf_default.startsWith("#")) {
    try {
      a.properties.xf_default = f.items[parseInt(a.properties.xf_default.substring(1))].value;
    } catch (q) {
      console.error("set xf_default(" + a.properties.xf_id + "):", q);
    }
  }
}, _doParameterMapping:function(a) {
  var b = {};
  if (!a) {
    return b;
  }
  console.log("----paramMapping:", a);
  var c = simpl4.util.Merge.merge(!0, this.preProcessData, this._getData());
  c.$uuid = window.uuid;
  c.$lang = simpl4.util.BaseManager.getLanguage();
  c.$mode = this.mode;
  console.log("----paramEnv:", c);
  a = a.items;
  for (var d = 0; d < a.length; d++) {
    b[a[d].param] = this._maskedEval(a[d].formexpr, c);
  }
  console.log("====paramMap:", b);
  return b;
}, _doResultMapping:function(a, b) {
  console.log("----resultList:", a);
  if ("string" == typeof a) {
    return console.error("----doResultMapping.cannot handle String result:", a), [];
  }
  var c = [];
  if (null == b || this._isEmpty(b.items)) {
    return a;
  }
  b = b.items;
  for (var d = 0; d < a.length; d++) {
    var f = a[d], g = clone(f);
    _.isString(f) && (g = {self:f});
    for (var h = 0; h < b.length; h++) {
      var m = b[h].mapping, u = b[h].resultexpr;
      _.isString(f) && (f = {self:f});
      g[m] = this._maskedEval(u, f);
    }
    c.push(g);
  }
  console.log("====selectionList:", c);
  return c;
}, _constructRegulaConstraints:function(a, b) {
  if (null == a || 0 == a.length) {
    return "";
  }
  a = a.replace(/DecimalMin/g, "Min");
  a = a.replace(/DecimalMax/g, "Max");
  a = JSON.parse(a);
  var c = "", d = "", f = this;
  Object.keys(a).forEach(function(g) {
    var h, m = a[g];
    if (!0 === m[0]) {
      c += d + "@" + f._mapKeys(g);
      var u = f._constraintParams[g];
      b ? (msg = b) && msg.match(/^[@%]/) && (msg = tr(msg.substring(1))) : msg = tr("validation." + f._mapKeys(g));
      for (h = 0; u && h < u.length; h++) {
        var r = u[h];
        var n = m[h + 1];
        "Size" != g && "Length" != g || 1 != h || (n = n || "512");
        var v = r;
        "regex" == r && (v += "p");
        msg = msg.replace("{" + v + "}", n);
      }
      c += '(message="' + msg + '"';
      if (u && 0 < u.length && (h = u[0], n = "format" == h ? '"YMD"' : m[1], "regex" == h && (n = this._correctRegex(m[1])), c += "," + h + "=" + n, 1 < u.length)) {
        h = u[1];
        n = m[2];
        if (null == n || "" == n) {
          if ("Size" == g || "Length" == g) {
            n = "512";
          }
        }
        c += "," + h + "=" + n;
      }
      c += ")";
      d = " ";
    }
  }, this);
  return c;
}, _correctRegex:function(a) {
  return null == a ? "/.*/" : 0 === a.indexOf("/") ? a : "/" + a + "/";
}, _mapKeys:function(a) {
  return "NotNull" == a ? "NotEmpty" : "Size" == a ? "Length" : a;
}, _constraintParams:{Max:["value"], Min:["value"], Range:["min", "max"], Pattern:["regex"], Length:["min", "max"], Size:["min", "max"], Digits:["integer", "fraction"], Past:["format"], Future:["format"], Step:["min", "max", "value"]}, _isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}, _removeExtension:function(a) {
  return a.endsWith(".form") ? a.substring(0, a.length - 5) : a;
}, _expandString:function(a, b) {
  if (null == a || 0 == a.length) {
    return "";
  }
  for (var c = 0, d = 0, f = null, g = "", h = 0, m = 0, u = 0; u < a.length; u++) {
    u < a.length - 2 && "${" == a.substring(u, u + 2) ? (0 == h && (m = u + 2), h++) : "}" == a.charAt(u) && 0 < h ? (--h, 0 == h && (c++, f = this._maskedEval(a.substring(m, u), b), g += f)) : 0 == h && (g += a.charAt(u), d++);
  }
  return 1 == c && 0 == d ? f : g;
}};
FieldBehavior = {properties:{readonly:{value:!1, type:Boolean}, autofocus:{value:!1, type:Boolean}, disabled:{value:!1, type:Boolean}, label:{value:null, type:String}, name:{value:null, type:String}, value:{type:String}, defaultValue:{value:null, type:String}, editValue:{value:null, type:String}}, created:function() {
  this._iid = getShortId();
}, attached:function() {
  this.isDomReady = !0;
}, detached:function() {
}, setForm:function(a) {
  this.form = a;
  this.convertNullToEmpty = !0 === a._form.xf_string_null_in_empty;
}, getPack:function() {
  return null == this.form ? null : this.form.pack;
}, setValue:function(a) {
  this.value = a;
}, getValue:function() {
  return this.value;
}, observers:["disabledChanged(disabled)"], getForm:function() {
  return this.form;
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}, disabledChanged:function(a) {
  this.alwaysFloatLabel = this.disabled;
}, _focusBlurHandler:function(a) {
  (a.path ? a.path[0] : a.target) === this && this._setFocused("focus" === a.type);
}, checkConstraints:function() {
  var a = this.getAttribute("data-constraints");
  if (null != a && 0 != a.length) {
    var b = [this];
    regula.bind({elements:b});
    this.async(function() {
      var a = regula.validate({elements:b});
      this.setInvalid(0 < a.length);
      0 < a.length ? this.setErrorMessage(a[0].message) : this.setErrorMessage(null);
    });
  }
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.invalid = a;
}};
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
})(function(a) {
  var b = {options:{optionClass:"", dropdownClass:"", autoinit:!1, callback:!1, onSelected:!1, dynamicOptLabel:"Add a new option..."}, init:function(c) {
    function d(d) {
      if (!d.data("dropdownjs") && d.is("select")) {
        var f = d.attr("multiple"), h = d.attr("data-dynamic-opts"), m = a(), u = a("<div></div>");
        u.addClass("dropdownjs").addClass(c.dropdownStyle);
        u.data("select", d);
        u.data("options", c);
        var r = a("<input type=text readonly class=fakeinput>");
        a.material && r.data("mdproc", !0);
        u.append(r);
        var n = a("<ul></ul>");
        n.data("select", d);
        u.append(n);
        r.attr("placeholder", d.attr("placeholder"));
        d.find("option").each(function() {
          var c = a(this);
          b._addOption(n, c);
        });
        h && (m = a("<li class=dropdownjs-add></li>"), m.append("<input>"), m.find("input").attr("placeholder", c.dynamicOptLabel), n.append(m));
        u.find("li");
        if (f) {
          b._select(u, d.find(":selected"));
        } else {
          var v = d.find(":selected").length ? d.find(":selected").last() : d.find("option, li").first();
          b._select(u, v);
        }
        r.addClass(d[0].className);
        d.hide().attr("data-dropdownjs", !0);
        d.after(u);
        c.callback && c.callback(u);
        n.on("click", "li:not(.dropdownjs-add)", function(c) {
          b._select(u, a(this));
          d.change();
        });
        n.on("keydown", "li:not(.dropdownjs-add)", function(c) {
          if (27 === c.which) {
            return a(".dropdownjs > ul > li").attr("tabindex", -1), r.removeClass("focus").blur();
          }
          if (32 === c.which && !a(c.target).is("input")) {
            return b._select(u, a(this)), !1;
          }
        });
        n.on("focus", "li:not(.dropdownjs-add)", function() {
        });
        if (h && h.length) {
          m.on("keydown", function(b) {
            if (13 === b.which) {
              b = a("<option>");
              var c = m.find("input").val();
              m.find("input").val("");
              b.attr("value", c);
              b.text(c);
              d.append(b);
            }
          });
        }
        d.on("DOMNodeInserted", function(a) {
        });
        r.on("click focus", function(b) {
          b.stopPropagation();
          if (!d.is(":disabled")) {
            a(".dropdownjs > ul > li").attr("tabindex", -1);
            a(".dropdownjs > input").not(a(this)).removeClass("focus").blur();
            a(".dropdownjs > ul > li").not(".dropdownjs-add").attr("tabindex", 0);
            b = a(this).offset().top - a(document).scrollTop();
            a(this).offset();
            a(document).scrollLeft();
            var c = a(window).height() - (a(this).offset().top - a(document).scrollTop());
            a(window).width();
            a(this).offset();
            a(document).scrollLeft();
            var f = c;
            200 > f && b > c ? (f = b, n.attr("placement", "top-left")) : n.attr("placement", "bottom-left");
            console.log("height:", f);
            a(this).next("ul").css("max-height", f - 20);
            a(this).addClass("focus");
          }
        });
        a(document).on("click", function(b) {
          f && a(b.target).parents(".dropdownjs").length || a(b.target).parents(".dropdownjs-add").length || a(b.target).is(".dropdownjs-add") || (a(".dropdownjs > ul > li").attr("tabindex", -1), r.removeClass("focus"));
        });
      }
    }
    c = c ? a.extend(b.options, c) : b.options;
    if (c.autoinit) {
      a(document).on("DOMNodeInserted", function(b) {
        b = a(b.target);
        b.is("select") && b.is(c.autoinit) && d(b);
      });
    }
    a(this).each(function() {
      d(a(this));
    });
  }, select:function(c) {
    c = a(this).find('[value="' + c + '"]');
    b._select(a(this), c);
  }, _select:function(b, d) {
    if (!d.is(".dropdownjs-add")) {
      var c = b.data("select"), g = b.data("options"), h = b.find("input.fakeinput"), m = c.attr("multiple");
      b = b.find("li");
      if (m) {
        d.toggleClass("selected");
        var u = c.find('[value="' + d.attr("value") + '"]');
        u.prop("selected") ? u.prop("selected", !0) : u.prop("selected", !1);
        var r = [];
        b.each(function() {
          a(this).hasClass("selected") && r.push(a(this).text());
        });
        h.val(r.join(", "));
      }
      m || (b.not(d).removeClass("selected"), d.addClass("selected"), c.val(d.attr("value")), h.val(d.text().trim()));
      a.material && (h.val().trim() ? c.removeClass("empty") : c.addClass("empty"));
      if (g.onSelected) {
        g.onSelected(d.attr("value"));
      }
    }
  }, _addOption:function(b, d) {
    var c = a("<li></li>");
    c.addClass(this.options.optionStyle);
    d.text() ? c.text(d.text()) : c.html("&nbsp;");
    c.attr("value", d.val());
    b.data("select").attr("data-dynamic-opts") && (c.append("<span class=close></span>"), c.find(".close").on("click", function() {
      c.remove();
      d.remove();
    }));
    d.prop("selected") && c.attr("selected", !0);
    b.find(".dropdownjs-add").length ? b.find(".dropdownjs-add").before(c) : b.append(c);
  }};
  a.fn.dropdown = function(c) {
    if (b[c]) {
      return b[c].apply(this, Array.prototype.slice.call(arguments, 1));
    }
    if ("object" === typeof c | !c) {
      return b.init.apply(this, arguments);
    }
    a.error("Method " + c + " does not exists on jQuery.dropdown");
  };
});
Polymer({is:"html-echo", behaviors:[FieldBehavior], properties:{html:{observer:"htmlChanged", type:String}}, htmlChanged:function() {
  Polymer.dom(this).innerHTML = this.html;
}, setValue:function(a) {
  Polymer.dom(this).innerHTML = a;
}});
Polymer({is:"input-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, FieldBehavior, ModernizrBehavior], properties:{compact:{value:!1, type:Boolean}, noLabelFloat:{type:Boolean, computed:"_noLabelFloat(floatingLabel)"}, floatingLabel:{value:"true", type:String}, name:{type:String}, type:{value:"text", observer:"typeChanged", type:String}, step:{type:String}, max:{type:String}, min:{type:String}}, hasDate:!1, observers:["editValueChanged(editValue)", 
"valueChanged(value)", "validateAttributes(type)"], _noLabelFloat:function() {
  return "false" === this.floatingLabel || !1 === this.floatingLabel;
}, typeChanged:function() {
  this.type && this.type.match(/^date/) && (this._origType = this.type, this.hasDate || (this.type = "text", this.$.input.setAttribute("type", "text")));
  this.type && this.type.match(/^password/) && (this.autocomplete = "new-password");
}, isText:function() {
  return this.type && this.type.match(/^text/) ? !0 : !1;
}, isNumber:function() {
  return this.type && this.type.match(/^number$/) && !this.isDecimal() ? !0 : !1;
}, isDecimal:function() {
  return this._origType && this._origType.match(/^decimal/) ? !0 : !1;
}, isDate:function() {
  return this.isDateYearMonth() || this._origType && this._origType.match(/^date/) ? !0 : !1;
}, isDateYearMonth:function() {
  return this._origType && this._origType.match(/^dateyearmonth/) ? !0 : !1;
}, isDateTime:function() {
  return this._origType && this._origType.match(/^datetime/) ? !0 : !1;
}, created:function() {
  this._origType = null;
}, ready:function() {
  var a = this;
  Object.keys(this.properties).forEach(function(b) {
    void 0 === a.properties[b] && void 0 === a[b] && a.$.input.hasAttribute(b) && a.$.input.removeAttribute(b);
  });
}, attached:function() {
  this.pickerType = "bootstrap";
  window.pickerType && (this.pickerType = window.pickerType);
  if (null == this.label || "" == this.label) {
    this.label = this.name;
  }
  this.validateAttributes();
  this.decorator = this.$.decorator;
  this.input = this.$.input;
  this.validateAttributes();
  "number" == this.type && (this.preventInvalidInput = !0);
  var a = this.isDateTime();
  this.isDate() && !this.hasDate && (this.datetimePicker = this.getDatePicker(a, {}), this.hasTouch() && 1 != window.isGes && (this.readonly = !0), this._date && this.datetimePickerGotoDate(this._date));
  this.isDate() && this.hasDate && this.async(function() {
    this.alwaysFloatLabel = this.decorator._inputHasContent = !0;
  });
  this.compact && (jQuery(this.decorator).addClass("compact"), jQuery(this.$.input).addClass("compact"), is_chromium && !this.isDate() && jQuery(this.$.input).css("margin-top", "0px"));
}, i18n_de:{previousMonth:"Vorheriger Monat", nextMonth:"Nächster Monat", months:"Januar Februar März April Mai Juni Juli August September Oktober November Dezember".split(" "), weekdays:"Sontag Montag Dienstag Mittwoch Donnerstag Freitag Samstag".split(" "), weekdaysShort:"So Mo Di Mi Do Fr Sa".split(" ")}, i18n_en:{previousMonth:"Previous Month", nextMonth:"Next Month", months:"January February March April May June July August September October November December".split(" "), weekdays:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), 
weekdaysShort:"Sun Mon Tue Wed Thu Fri Sat".split(" "), midnight:"Midnight", noon:"Noon"}, tooltips:{today:"Go to today", clear:"Clear selection", close:"Close the picker", selectMonth:"Select Month", prevMonth:"Previous Month", nextMonth:"Next Month", selectYear:"Select Year", prevYear:"Previous Year", nextYear:"Next Year", selectDecade:"Select Decade", prevDecade:"Previous Decade", nextDecade:"Next Decade", prevCentury:"Previous Century", nextCentury:"Next Century", pickHour:"Pick Hour", incrementHour:"Increment Hour", 
decrementHour:"Decrement Hour", pickMinute:"Pick Minute", incrementMinute:"Increment Minute", decrementMinute:"Decrement Minute", pickSecond:"Pick Second", incrementSecond:"Increment Second", decrementSecond:"Decrement Second", togglePeriod:"Toggle Period", selectTime:"Select Time"}, tooltips_de:{today:"Heute auswählen", clear:"Löschen", close:"Schließen", selectMonth:"Monat auswählen", prevMonth:"vorheriger Monat", nextMonth:"nächster Monat", selectYear:"Jahr auswählen", prevYear:"vorheriges Jahr", 
nextYear:"nächstes Jahr", selectDecade:"Dekade auswählen", prevDecade:"vorherige Dekade", nextDecade:"nächste Dekade", prevCentury:"vorheriges Jahrhundert", nextCentury:"nächstes Jahrhundert", pickHour:"Stunde auswählen", incrementHour:"Stunde +1", decrementHour:"Stunde -1", pickMinute:"Minute auswählen", incrementMinute:"Minute +1", decrementMinute:"Minute -1", pickSecond:"Sekunde auswählen", incrementSecond:"Sekunde +1", decrementSecond:"Sekunde -1", togglePeriod:"Periode umschalten", selectTime:"Zeit auswählen"}, 
isAuthorizedType:function() {
  return -1 != "checkbox color date datetime datetime-local dateyearmonth email file month number password radio range tel text time url week".split(" ").indexOf(this.type);
}, lpad:function(a, b) {
  b = b || 2;
  return a.toString().length < b ? this.lpad("0" + a, b) : a;
}, validateAttributes:function() {
  this.input && ("text" == this.type || this.isAuthorizedType() || (this._origType = this.type, "double" == this.type || "decimal" == this.type ? (this.step = "0.01", this.type = "number") : "integer" == this.type ? (this.step = "1", this.type = "number") : this.type = "text"), is_edge && "number" == this.type && (this.type = "text"), this.isDateTime() && this.hasDate ? this.input.setAttribute("type", "datetime-local") : this.isDateYearMonth() && this.hasDate ? this.input.setAttribute("type", "date") : 
  this.input.setAttribute("type", this.type));
}, committedValueChanged:function() {
}, editValueChanged:function() {
  null != this.type && (this.isDate() && !this.hasDate ? this.value = this._i18nToIso(this.editValue) : this.value = this.editValue, this.fire("value-changed", this));
}, valueChanged:function() {
  this.$.decorator && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this.isDate() && (a = this.hasDate ? this._toIso(a) : this._convertDate(a));
  this.editValue = a;
}, getValue:function() {
  return this.isDate() && "string" === typeof this.value && !this._isIsoDate(this.value) ? null : this.isNumber() && null != this.value ? parseInt(this.value) : this.isDecimal() && null != this.value ? ("string" === typeof this.value && 0 <= this.value.indexOf(",") && (this.value = this.value.replace(/,/, ".")), parseFloat(this.value)) : null == this.value && this.isText() && this.convertNullToEmpty ? "" : this.value;
}, getDatePicker:function(a, b) {
  if ("pikaday" == this.pickerType) {
    return a = new Pikaday({field:this.$.input, trigger:this.$.input, onSelect:function(a) {
    }.bind(this), i18n:"de" == simpl4.util.BaseManager.getLanguage() ? this.i18n_de : this.i18n_en, format:simpl4.util.BaseManager.getDateFormat() + (a ? " HH:mm" : ""), showTime:a, showSeconds:!1, use24hour:"de" == simpl4.util.BaseManager.getLanguage() ? !0 : !1, firstDay:1, yearRange:[1900, 2030]});
  }
  if ("bootstrap" == this.pickerType) {
    a = simpl4.util.BaseManager.getDateFormat() + (a ? " HH:mm" : "");
    b = this.isDateYearMonth() ? "months" : "days";
    var c = "MYd", c = this.isDateYearMonth() ? "MY" : this.isDateTime() ? "MYdhm" : "MYd", d = this["tooltips_" + simpl4.util.BaseManager.getLanguage()], f = simpl4.util.BaseManager.getLanguage();
    a = $(this.$.input).datetimepicker({locale:f, viewMode:b, showComponents:c, ignoreReadonly:!0, tooltips:d, focusOnShow:!1, format:a, showTodayButton:!0, showClear:!1, showClose:!0});
    var g = this;
    a.on("dp.change", function(a) {
      g.editValue = $(g.$.input).val();
    });
    return a;
  }
}, datetimePickerGotoDate:function(a) {
  "pikaday" == this.pickerType && this.datetimePicker.gotoDate(a);
}, _convertDate:function(a) {
  if (!a) {
    return this.datetimePicker ? this.datetimePickerGotoDate(new Date) : this._date = new Date, null;
  }
  a = this._toIso(a);
  this._date = this._isoToDate(a);
  this.datetimePicker && (this.datetimePickerGotoDate(this._date), this._date = null);
  return this._isoToI18n(a);
}, _toIso:function(a) {
  var b = a;
  if ("number" === typeof a || "string" === typeof a && !a.match(/[-]/)) {
    b = this.isDateTime(), b = moment(parseInt(a)).format(b ? "YYYY-MM-DDTHH:mm" : "YYYY-MM-DD");
  }
  return b;
}, _isoToI18n:function(a) {
  a = moment(a);
  var b = this.isDateTime(), b = simpl4.util.BaseManager.getDateFormat() + (b ? " HH:mm" : "");
  return a.format(b);
}, _isoToDate:function(a) {
  return moment(a).toDate();
}, _i18nToIso:function(a) {
  this.isDateTime() ? (a = moment(a, simpl4.util.BaseManager.getDateFormat() + " HH:mm"), a = a.year() + "-" + this.lpad(a.month() + 1) + "-" + this.lpad(a.date()) + "T" + this.lpad(a.hour()) + ":" + this.lpad(a.minute())) : (a = moment(a, simpl4.util.BaseManager.getDateFormat()), a = a.year() + "-" + this.lpad(a.month() + 1) + "-" + this.lpad(a.date()));
  return a;
}, _isIsoDate:function(a) {
  return this.isDateTime() ? a.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})/) : a.match(/(\d{4})-(\d{2})-(\d{2})/);
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  null != this.decorator && (this.invalid = a);
}, hasTouch:function() {
  return "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch;
}, setCustomValidity:function(a) {
}});
Polymer({is:"multiline-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, FieldBehavior], observers:["editValueChanged(editValue)"], properties:{}, editValueChanged:function() {
  this.value = this.editValue;
  this.fire("value-changed", this);
}, valueChanged:function() {
  this.$.decorator && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this.editValue = a;
}});
Polymer({is:"upload-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], listeners:{"upload-complete":"valueChanged"}, properties:{required:{value:"", type:String}, value:{type:Object}, maxsize:{value:0}, multi:{type:Boolean, value:!0}}, ready:function() {
  this.isInvalid = !1;
}, valueChanged:function(a) {
  var b = this.form._getField("filename");
  null != b && b.setValue(a.detail.target.file.name);
  this.multi ? this.value[a.detail.target.file.name] = a.detail.target.result : (this.value = {}, this.value[a.detail.currentTarget.file.name] = a.detail.currentTarget.result);
  this.fire("value-changed", this);
  this.checkConstraints();
}, getValue:function() {
  return this.value;
}, setValue:function(a) {
  this.value = {};
  this.disabled = !1;
  a = this.form._getField("filename");
  null == a || this.isEmpty(a.getValue()) || (this.disabled = !0);
  this.$.input.clear();
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || 0 < Object.keys(this.value).length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}});
Polymer({is:"custom-field", behaviors:[FieldBehavior], properties:{elementname:{type:String}, url:{observer:"urlChanged", type:String}}, observers:[], urlChanged:function() {
  null != this.url && this.importHref(this.url + "?time=" + (new Date).getTime(), this.onResponse.bind(this));
}, onResponse:function(a) {
  a = a.target.import.body;
  for (var b = this.$.insertPoint; b.firstChild;) {
    Polymer.dom(b).removeChild(b.firstChild);
  }
  a && a.firstElementChild && (1 == $(a).children().length ? Polymer.dom(b).appendChild(a.firstElementChild) : Polymer.dom(b).appendChild(a));
  this.field = this.querySelector(this.elementname);
  this.field.setValue(this.value);
  this.field.label = this.label;
}, setValue:function(a) {
  this.value = a;
  null != this.field && (console.log("Custom(" + this.name + ").setValue:", this.value), this.field.setValue(a));
}, getValue:function() {
  if (null == this.field) {
    return console.log("custom-field.getValue:field is null"), null;
  }
  this.value = this.field.getValue();
  console.log("Custom(" + this.name + ").getValue:", this.value);
  return this.value;
}, valueChanged:function(a) {
  1 == this.isDomReady && this.withoutCheck && (this.withoutCheck = !1);
}});
Polymer({is:"checkbox-field", behaviors:[FieldBehavior], properties:{compact:{value:!1, type:Boolean}}, observers:["valueChanged(value)"], attached:function() {
  this.compact && jQuery(this).addClass("compact");
}, setValue:function(a) {
  null == a && (a = !1);
  this.value = a;
}, getValue:function() {
  return this.value;
}, valueChanged:function(a) {
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : (this.checkConstraints(), this.fire("value-changed", this)));
}});
Polymer({is:"toggle-field"});
Polymer({is:"select-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], _listeners:{"value-changed":"ignore"}, properties:{multiple:{value:!1}, compact:{value:!1}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}, required:{value:"false", type:String}, delimiter:{type:String, value:","}, combobox:{type:Boolean, value:!1}, diacritics:{type:Boolean, value:!0}, createFilter:{type:String, value:null}, 
highlight:{type:Boolean, value:!0}, persist:{type:Boolean, value:!1}, openOnFocus:{type:Boolean, value:!0}, maxOptions:{type:Number, value:1000}, maxItems:{type:Number, value:1}, hideSelected:{type:Boolean, value:!0}, closeAfterSelect:{type:Boolean, value:!1}, allowEmptyOption:{type:Boolean, value:!1}, scrollDuration:{type:Number, value:60}, loadThrottle:{type:Number, value:300}, loadingClass:{type:String, value:"loading"}, preload:{type:String, value:!1}, dropdownParent:{type:String, value:"body"}, 
addPrecedence:{type:Boolean, value:!1}, selectOnTab:{type:Boolean, value:!1}, options:{type:Array, value:[]}, optgroups:{type:Array, value:[]}, dataAttr:{type:String, value:"data-data"}, valueField:{type:String, value:"value"}, optgroupValueField:{type:String, value:"value"}, labelField:{type:String, value:"text"}, optgroupLabelField:{type:String, value:"label"}, optgroupField:{type:String, value:"optgroup"}, sortField:{type:String, value:"$order"}, searchField:{type:Array, value:["text"]}, searchConjunction:{type:String, 
value:"and"}, lockOptgroupOrder:{type:Boolean, value:!1}, copyClassesToDropdown:{type:Boolean, value:!0}, ajaxOptions:{type:String, value:null}, ajaxOptionsRoot:{type:String, value:null}, ajaxOptionsDataType:{type:String, value:null}, mutationObserver:{value:function() {
  var a = new MutationObserver(this.mutated.bind(this));
  a.observe(this, {attributes:!0, attributeOldValue:!0, attributeFilter:["disabled"]});
  return a;
}}}, listeners:{"value-changed":"_formValueChanged"}, observers:["valueChanged(value)", "compactChanged(compact)", "jsonItemsChanged(jsonItems)"], mutated:function(a) {
  var b = this;
  a.forEach(function(a) {
    a.target.getAttribute("name");
    var c = a.target.getAttribute("disabled");
    if (a.oldValue != c) {
      a = b.querySelector(".focused-line");
      var f = b.querySelector('input[type="text"]');
      null != a && ("r" == c ? (a.style.display = "none", f && f.setAttribute("tabindex", "-1")) : (a.style.display = "block", f && f.removeAttribute("tabindex")));
    }
  });
}, ready:function() {
  this.isInvalid = !1;
}, compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, setItems:function(a) {
  this.items = a;
}, itemsChanged:function() {
  if (null != this.form || _.isEmpty(this.parentName)) {
    for (var a = this.$.select; a.firstChild;) {
      a.removeChild(a.firstChild);
    }
    if (null != this.items) {
      this.selectize && this.selectize.clearOptions();
      if (_.isEmpty(this.parentName) || !_.isEmpty(this.parentName) && !_.isEmpty(this.parentValue)) {
        if (this.items.length) {
          for (var b = 0; b < this.items.length; b++) {
            var c = this.items[b], d = _.isEmpty(c.parent) ? null : c.parent.split(",");
            if (_.isEmpty(this.parentValue) || null == d || !(0 > _.indexOf(d, this.parentValue))) {
              if (this.selectize) {
                this.selectize.addOption({value:c.value, text:c.label});
              } else {
                var d = document.createElement("option"), f = document.createTextNode(c.label);
                d.value = c.value;
                Polymer.dom(d).appendChild(f);
                Polymer.dom(a).appendChild(d);
              }
            }
          }
        } else {
          var g = this.items;
          Object.keys(g).forEach(function(b) {
            b = g[b];
            var c = _.isEmpty(b.parent) ? null : b.parent.split(",");
            if (_.isEmpty(this.parentValue) || null == c || !(0 > _.indexOf(c, this.parentValue))) {
              if (this.selectize) {
                this.selectize.addOption({value:b.value, text:b.label});
              } else {
                var c = document.createElement("option"), d = document.createTextNode(b.label);
                c.value = b.value;
                Polymer.dom(c).appendChild(d);
                Polymer.dom(a).appendChild(c);
              }
            }
          });
        }
      }
      this.selectize && this.selectize.refreshOptions(!1);
    }
  }
}, valueChanged:function(a) {
  !0 !== this._invalueSetting && (this.async(function() {
    this.selectize && this.selectize.getValue() != this.value && (this._invalueSetting = !0, this.selectize.setValue(this.value), this._invalueSetting = !1);
  }, 300), 1 == this.isDomReady && (this.withoutCheck ? (this.withoutCheck = !1, this.setInvalid(!1)) : this.checkConstraints()));
}, setValue:function(a) {
  this.value = a;
  this.selectize ? this.selectize.setValue(a) : this.__value = a;
}, getValue:function() {
  return !0 !== this.multiple && this.value && Array.isArray(this.value) && 0 < this.value.length ? null == this.value[0] && this.convertNullToEmpty ? "" : this.value[0] : null == this.value && this.convertNullToEmpty ? "" : this.value;
}, onFocus:function(a) {
}, onCreate:function(a) {
  return this.combobox ? {value:a, text:a} : !1;
}, onChange:function(a) {
  "null" == a && (a = null);
  this.isEmpty(this.value) && this.isEmpty(a) || (this.value = a, this.fire("value-changed", this));
}, createSelectize:function() {
  !0 === this.multiple && (this.maxItems = 1000);
  var a = {delimiter:this.delimiter, diacritics:this.diacritics, create:this.combobox, createOnBlur:this.onCreate.bind(this), createFilter:this.createFilter, highlight:this.highlight, persist:this.persist, openOnFocus:this.openOnFocus, maxOptions:this.maxOptions, maxItems:this.maxItems, hideSelected:this.hideSelected, closeAfterSelect:this.closeAfterSelect, alglowEmptyOption:this.allowEmptyOption, scrollDuration:this.scrollDuration, loadThrottle:this.loadThrottle, loadingClass:this.loadingClass, 
  preload:this.preload, dropdownParent:this.dropdownParent, addPrecedence:this.addPrecedence, selectOnTab:this.selectOnTab, options:this.options, optgroups:this.optgroups, dataAttr:this.dataAttr, valueField:this.valueField, optgroupValueField:this.optgroupValueField, labelField:this.labelField, optgroupLabelField:this.optgroupLabelField, optgroupField:this.optgroupField, sortField:this.sortField, searchField:this.searchField, searchConjunction:this.searchConjunction, lockOptgroupOrder:this.lockOptgroupOrder, 
  copyClassesToDropdown:this.copyClassesToDropdown, onChange:this.onChange.bind(this), onFocus:this.onFocus.bind(this)};
  this.selectize = $(this.$.select).selectize(a)[0].selectize;
  this.__value && (this.selectize.setValue(this.__value), this.__value = null);
}, ignore:function(a) {
  "FORM-ELEMENT-RENDERER" != this.parentNode.tagName && (a.preventDefault(), a.stopPropagation());
}, attached:function() {
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  this.alwaysFloatLabel = !0;
  this.placeholder = " ";
  this.isDomReady = !0;
  this.compact && this.compactChanged();
  this.createSelectize();
  this.selectizeControl = this.$.decorator.querySelector(".selectize-control");
}, isEmpty:function(a) {
  return Array.isArray(a) ? 0 == a.length : null == a || "" == a ? !0 : !1;
}, checkConstraints:function() {
  var a = this.getAttribute("data-constraints");
  null != a && 0 < a.length ? this._checkConstraints(a) : (this.setInvalid(!1), this.isRequired() && this.isEmpty(this.value) && (this.setInvalid(!0), this.setErrorMessage(tr("This field is required"))));
}, _checkConstraints:function(a) {
  var b = [this];
  regula.bind({elements:b});
  this.async(function() {
    var a = regula.validate({elements:b});
    this.setInvalid(0 < a.length);
    0 < a.length ? this.setErrorMessage(a[0].message) : this.setErrorMessage(null);
  });
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, _formValueChanged:function(a) {
  for (var b = a.detail.name, c = this.getFieldsWithParent(), d = 0; d < c.length; d++) {
    var f = c[d];
    f.parentName == b && (f.parentValue = a.detail.getValue(), f.itemsChanged(), f.setValue(f.defaultvalue));
  }
}, getFieldsWithParent:function() {
  if (this.fieldsWithParent) {
    return this.fieldsWithParent;
  }
  var a = [];
  if (null == this.form) {
    return [];
  }
  this.form.fields.forEach(function(b) {
    _.isEmpty(b.parentName) || a.push(b);
  }, this);
  return this.fieldsWithParent = a;
}, isParentDest:function(a) {
  for (var b = this.getFieldsWithParent(), c = 0; c < b.length; c++) {
    if (b[c].parentName == a) {
      return !0;
    }
  }
  return !1;
}, setForm:function(a) {
  this.form = a;
  this.convertNullToEmpty = !0 === a._form.xf_string_null_in_empty;
  !this.isParentDest(this.name) && _.isEmpty(this.parentName) || this.itemsChanged();
  null == this.getValue() && this.setValue(this.defaultvalue);
}, isRequired:function() {
  if (!this.form) {
    return !1;
  }
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"tree-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], properties:{selectedItem:{observer:"selectedItemChanged", notify:!0, type:Object}, jqtree:{notify:!0, type:Object}, multiple:{value:!1}, compact:{value:!1}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}, required:{value:"false", type:String}, closeAfterSelect:{type:Boolean, value:!1}}, observers:["valueChanged(value)", 
"compactChanged(compact)", "jsonItemsChanged(jsonItems)"], ready:function() {
  this.isInvalid = !1;
  this.options = {autoOpen:!0};
}, compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, itemsChanged:function() {
}, valueChanged:function(a) {
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  var b = a;
  if (_.isString(b)) {
    try {
      b = JSON5.parse(b);
    } catch (c) {
    }
  }
  b && b.id && (b = b.id);
  if (Number.isInteger(b) || !_.isEmpty(b)) {
    b = this.jqtree.tree("getNodeById", b);
    console.log("node:", b);
    b ? (this.jqtree.tree("selectNode", b), this.jqtree.tree("scrollToNode", b), this.$.dropdownId.querySelector("#input").value = b.name) : this.$.dropdownId.querySelector("#input").value = null;
    try {
      this.selectedItemChanged(a);
    } catch (c) {
    }
  } else {
    this.jqtree.tree("selectNode", null), this.selectedItem = null, this.$.dropdownId.querySelector("#input").value = "", this.setInvalid(!1);
  }
}, getValue:function() {
  return null == this.value ? null : this.value;
}, selectedItemChanged:function(a) {
  this.value = a;
  this.checkConstraints();
  this.fire("value-changed", this);
}, attached:function() {
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  this.alwaysFloatLabel = !0;
  this.placeholder = " ";
  this.isDomReady = !0;
  this.compact && this.compactChanged();
}, isEmpty:function(a) {
  return Array.isArray(a) ? 0 == a.length : null == a || "" == a ? !0 : !1;
}, checkConstraints:function() {
  this.setInvalid(!1);
  this.isRequired() && this.isEmpty(this.value) && (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  if (null == this.form) {
    return !1;
  }
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"dropdown-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], properties:{multiple:{value:!1}, compact:{value:!1}, _dropdown:{type:Object}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}}, observers:["valueChanged(value)", "compactChanged(compact)", "jsonItemsChanged(jsonItems)"], compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, itemsChanged:function() {
  for (var a = this.$.select; a.firstChild;) {
    a.removeChild(a.firstChild);
  }
  if (null != this.items) {
    for (var b = 0; b < this.items.length; b++) {
      var c = this.items[b], d = document.createElement("option"), f = document.createTextNode(c.label);
      d.value = c.value;
      Polymer.dom(d).appendChild(f);
      Polymer.dom(a).appendChild(d);
    }
  }
}, valueChanged:function(a) {
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this._dropdown.data("options", this._options);
  this.value = a;
  this.async(function() {
    $(this._dropdown).dropdown("select", this.value);
  }, 10);
}, getValue:function() {
  return this.value;
}, onSelected:function(a) {
  void 0 != a && (this.value = a, this.fire("value-changed", this));
}, onCallback:function(a) {
  this._dropdown = a;
  this.setStyleScope(this._dropdown.get(0), "style-scope", this.tagName.toLowerCase());
}, attached:function() {
  this.isDomReady = !0;
  this.compact && this.compactChanged();
  this._options = {onSelected:this.onSelected.bind(this), callback:this.onCallback.bind(this), optionClass:this.name};
  this.async(function() {
    $(this.$.select).dropdown(this._options);
  });
}});
Polymer({is:"gridinput-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, DialogBehavior, FormBehavior, FieldBehavior], properties:{required:{value:"", type:String}, columns:{value:null, observer:"columnsChanged", type:Array}, lines:{value:function() {
  return [];
}, type:Array}, entity:{type:String}, search:{value:!1, type:Boolean}, arrows:{value:!0, type:Boolean}, height:{value:null, type:String}}, listeners:{"value-changed":"_valueChanged", "internal-xaction":"_internalXAction"}, observers:["entityChanged(entity,namespace)"], ready:function() {
  this.isInvalid = !1;
  this.push("lines", {});
}, clearLines:function(a) {
  this.lines = [];
  for (var b = [], c = 0; c <= a; c++) {
    b.push({});
  }
  this.lines = b;
  this.setDefaultValue(0);
}, insertLines:function(a) {
  for (var b = clone(this.lines), c = 0; c < b.length; c++) {
    b[c] = this.getLineValues(c);
  }
  for (var d = this._lid, c = 0; c < a.length; c++) {
    0 == c ? b[d] = a[c] : b.splice(d + c, 0, a[c]);
  }
  this.lines = b;
  this.async(function() {
    for (var a = 0; a < b.length; a++) {
      this.setDefaultValue(a), this.setLineValues(b[a], a);
    }
  }, 100);
}, _valueChanged:function(a) {
  if (!this.inFire) {
    for (var b = a.target.parentNode.dataset.lid, c = {}, d = {}, f = 0; f < this.columns.length; f++) {
      if (a = this.querySelector("#id" + b + "_" + f), null != a) {
        var g = this.columns[f];
        c[g.colname] = a.getValue();
        d[g.colname] = a;
      }
    }
    Object.keys(this.exprMap).forEach(function(a) {
      var b = this.form._maskedEval(this.exprMap[a], c, "");
      d[a] && d[a].setValue(b);
    }.bind(this));
  }
}, getValue:function() {
  if (!0 === this.locked) {
    return null;
  }
  for (var a = [], b = 0; b < this.lines.length; b++) {
    a.push(this.getLineValues(b));
  }
  return a;
}, setValue:function(a) {
  this.locked = !0;
  null == a || 0 == a.length ? (this.clearLines(0), this.async(function() {
    this.setLineValues({}, 0);
    this.locked = !1;
  }, 100)) : (this.locked = !0, this.clearLines(a.length - 1), this.async(function() {
    for (var b = 0; b < a.length; b++) {
      this.setLineValues(a[b], b);
    }
    this.locked = !1;
  }, 10));
}, getContainerStyle:function() {
  return "border:0px solid #f5f5f5;padding:2px;min-height:" + this.height + "px";
}, getElementId:function(a, b) {
  return "id" + a + "_" + b;
}, entityChanged:function() {
  this.async(function() {
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHeader:function(a) {
  this.pack = this.getPack() || "data";
  return tr(this.pack + "." + this.getSimpleEntityName(a));
}, _search:function(a) {
  this._lid = parseInt(a.target.dataset.lid);
  (this._entityName = this.entityName) ? (this.$.filterId.doSearch(), this.async(function() {
    this.openDialog(this.$.searchDialog);
  }, 250)) : this.fire("gridfield-search", this);
}, rowsSelected:function(a) {
  a.detail.doubleTap && (a = a.detail.rows[0], this.closeDialog(this.$.searchDialog), console.log("data:", a), this.setLineValues(a, this._lid));
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.searchDialog);
  }, 50);
}, getHelp:function() {
  return tr("crud2.select_with");
}, columnsChanged:function() {
  console.debug("gi.columnsChanged:", this.columns);
  var a = {};
  this.columns.each(function(b) {
    _.isEmpty(b.regulaConstraints) && (b.regulaConstraints = this._constructRegulaConstraints(b.constraints, b.errormsg));
    b.label = b.display;
    "Enumselect" != b.id && (b.id = "Input");
    b.xf_type = b.type;
    b.xf_id = b.colname;
    b.parameter && b.parameter.startsWith("expr:") && (a[b.colname] = b.parameter.substring(5));
  }.bind(this));
  this.exprMap = a;
}, addLine:function(a) {
  var b = parseInt(a.target.dataset.lid);
  this.push("lines", {});
  this.async(function() {
    for (var a = b + 1, d = this.lines.length - 1; d - 1 > b; d--) {
      this._upLine(d);
    }
    this.setDefaultValue(a);
  }, 20);
}, removeLine:function(a) {
  1 < this.lines.length && this.splice("lines", a.target.dataset.lid, 1);
  this.inFire = !0;
  this.fire("value-changed", this);
  this.inFire = !1;
}, upLine:function(a) {
  a = parseInt(a.target.dataset.lid);
  0 != a && 1 != this.lines.length && this._upLine(a);
}, _upLine:function(a) {
  var b = this.getLineValues(a - 1);
  this.setLineValues(this.getLineValues(a), a - 1);
  this.setLineValues(b, a);
}, downLine:function(a) {
  a = parseInt(a.target.dataset.lid);
  if (a != this.lines.length - 1 && 1 != this.lines.length) {
    var b = this.getLineValues(a + 1);
    this.setLineValues(this.getLineValues(a), a + 1);
    this.setLineValues(b, a);
  }
}, setLineValues:function(a, b) {
  for (var c = 0; c < this.columns.length; c++) {
    var d = this.querySelector("#id" + b + "_" + c), f = this.columns[c], g = a[f.colname];
    d.getGridField().withoutCheck = !0;
    null == g && f.xf_default && (g = f.xf_default);
    d.setValue(g);
  }
}, getLineValues:function(a) {
  for (var b = {}, c = 0; c < this.columns.length; c++) {
    var d = this.querySelector("#id" + a + "_" + c).getValue();
    b[this.columns[c].colname] = d;
  }
  return b;
}, setDefaultValue:function(a) {
  for (var b = 0; b < this.columns.length; b++) {
    var c = this.querySelector("#id" + a + "_" + b), d = this.columns[b], f = null;
    c.getGridField().withoutCheck = !0;
    null == f && d.xf_default && (f = d.xf_default);
    d.items && c.getGridField().setItems(d.items);
    c.setValue(f);
  }
}, checkConstraints:function() {
  this.setInvalid(!1);
  for (var a = 0; a < this.lines.length; a++) {
    this.validateLine(a);
  }
}, getColFlex:function(a) {
  return null != a && 0 < parseInt(a) ? "" : "flex";
}, getColStyle:function(a) {
  return null != a && 0 < parseInt(a) ? "width:" + a + "px;min-width:" + a + "px;" : "";
}, validateLine:function(a) {
  for (var b = 0; b < this.columns.length; b++) {
    var c = this.querySelector("#id" + a + "_" + b).getGridField();
    c.getAttribute("data-constraints") && (regula.bind({elements:[c]}), regula.validate({elements:[c]}));
  }
}, setItems:function(a) {
  this.clearLines(0);
  for (var b = 0; b < this.columns.length; b++) {
    var c = this.querySelector("#id0_" + b).getGridField();
    if (null == c.setItems || null == a[c.name]) {
      break;
    }
    console.log("field(" + c.name + "):", a);
    c.setItems(a[c.name]);
    this.columns[b].items = a[c.name];
  }
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"tableselect-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{multiSelect:{value:!1, type:Boolean}, required:{value:"", type:String}, items:{observer:"itemsChanged", type:Object}, selection:{type:Object, notify:!0}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["selectionChanged(selection)"], getHeight:function() {
  return "height:" + this.height + "px";
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.selection && 0 < this.selection.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.$.dataTable.unselectAll();
  this.value = null;
}, getValue:function() {
  return this.multiSelect ? this.value : Array.isArray(this.value) && 0 < this.value.length ? this.value[0] : null;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, selectionChanged:function() {
  this.value = this.selection;
  this.checkConstraints();
  this.fire("value-changed", this);
}, heightChanged:function() {
  this.dataTablesOptions = {paging:!0, dom:"rt", scrollCollapse:!1, scrollY:this.height - 40 + "px"};
  this.setInvalid(!1);
}, itemsChanged:function(a) {
}, setItems:function(a) {
  this.items = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"linkedlist-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{required:{value:"", type:String}, entity:{value:null, type:String}, namespace:{value:null, type:String}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["entityChanged(entity,namespace)"], onChanged:function(a) {
  console.log("onChanged:", a);
  this.value = a.detail.data;
}, entityChanged:function() {
  console.log("Field.linkedlist-field.entityChanged:", this.entity + "/" + this.namespace);
  this.setInvalid(!1);
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.value && 0 < this.value.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.value = a;
  this.querySelector("#miniId").setData(a);
}, getValue:function() {
  return this.value;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, heightChanged:function() {
  this.setInvalid(!1);
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"embeddedlist-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{required:{value:"", type:String}, entity:{value:null, type:String}, attributeGroup:{value:null, type:String}, complexName:{value:null, type:String}, namespace:{value:null, type:String}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["entityChanged(entity,namespace)", "attributeGroupChanged(attributeGroup,complexName, namespace)"], 
onChanged:function(a) {
  console.log("onChanged:", a);
  this.value = a.detail.data;
}, entityChanged:function() {
  console.log("Field.embeddedlist-field.entityChanged:", this.entity + "/" + this.namespace);
  this.setInvalid(!1);
}, attributeGroupChanged:function() {
  console.log("Field.embeddedlist-field.attributeGroupChanged:", this.attributeGroup + "/" + this.namespace);
  this.setInvalid(!1);
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.value && 0 < this.value.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.value = a;
  this.querySelector("#miniId").setData(a);
}, getValue:function() {
  return this.value;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, heightChanged:function() {
  this.setInvalid(!1);
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"embeddedprimitivecollection-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{required:{value:"", type:String}, namespace:{value:null, type:String}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["columnsChanged(columns)", "regulaConstraintsChanged(regulaConstraints)"], regulaConstraintsChanged:function() {
  console.log("Field.embeddedprimitivecollection-field.regulaConstraintsChanged:", this.regulaConstraintsChanged);
}, columnsChanged:function() {
  console.log("Field.embeddedprimitivecollection-field.columnsChanged:", this.columns);
}, checkConstraints:function() {
  this.setInvalid(!1);
  var a = this.isDup();
  null != a && (this.setInvalid(!0), this.setErrorMessage(tr("form.key_exists") + " : " + a));
}, setValue:function(a) {
  console.log("setValue(" + this.name + "):", a);
  a = null == a ? {} : a;
  for (var b = Object.keys(a), c = [], d = 0; d < b.length; d++) {
    var f = b[d], g = a[b[d]], h = {};
    "map" == this.collectionType && (h.key = f);
    h.value = g;
    c.push(h);
  }
  this.$.inputId.setValue(c);
}, getValue:function() {
  this.checkConstraints();
  var a = "map" == this.collectionType ? {} : [], b = this.$.inputId.getValue();
  if (null == b || 0 == b.length) {
    return a;
  }
  for (var c = 0; c < b.length; c++) {
    var d = b[c].value;
    "map" == this.collectionType ? a[b[c].key] = d : a.add(d);
  }
  return a;
}, isDup:function() {
  if ("map" != this.collectionType) {
    return null;
  }
  var a = this.$.inputId.getValue();
  if (null == a || 0 == a.length) {
    return null;
  }
  for (var b = {}, c = 0; c < a.length; c++) {
    var d = a[c].key;
    if (b[d]) {
      if (a = this.columns[0].items) {
        for (c = 0; c < a.length; c++) {
          if (a[c].value == d) {
            d = a[c].label;
            break;
          }
        }
      }
      return d;
    }
    b[d] = !0;
  }
  return null;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, heightChanged:function() {
  this.setInvalid(!1);
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"linkedobj-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, DialogBehavior, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, isMetaNull:function() {
  return null == this.meta;
}, isFilter:function(a) {
  return null != this.filter;
}, ready:function() {
  console.log("Field.linkedobj.ready:", this.entity + "/" + this.namespace);
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
}, actionCallback:function() {
  this._entityName = this.entityName;
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.linkedObjDialog);
  }, 250);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, rowsSelected:function(a) {
  a.detail.doubleTap && (this.data = a.detail.rows[0], this.closeDialog(this.$.linkedObjDialog), a = this._maskedEval(this.props.title_expression, this.data), this.id = this.data.id || this.data._id, this.editValue = a || this.id || ".");
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.linkedObjDialog);
  }, 50);
}, editValueChanged:function() {
  this.editValue ? "odata" == this.getPack() ? this.value = this.data : this.value = this.editValue + "/" + this.id : this.value = null;
  console.log("editValueChanged(" + this.getPack() + "," + this.entityName + "," + this.name + "):", this.value);
  this.fire("value-changed", this);
}, getValue:function(a) {
  console.log("getValue(" + this.entityName + "," + this.name + "):", this.value);
  return this.value;
}, setValue:function(a) {
  null != a ? _.isString(a) ? (a = a.split("/"), this.editValue = a[0], this.id = a[1]) : (this.data = a, this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || this.data.id | NaN) : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  this.async(function() {
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  this.pack = this.getPack() || "data";
  return tr(this.pack + "." + this.getSimpleEntityName(a));
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("LinkedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"embeddedobj-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, DialogBehavior, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, ready:function() {
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
  this.buttonsave = {icon:"undo", position:"form", text:tr("button.take_over"), disabled:!1};
  this.buttoncancel = {icon:"cancel", position:"form", text:tr("button.cancel"), disabled:!1};
}, setFormSpec:function(a, b) {
  a = simpl4FormManager.getCrudForm(b, a);
  console.log("setFormSpec(" + this.name + "):", a);
  "string" === typeof a ? this.formName = a : this.formSpec = [a];
}, actionCallback:function() {
  this._pack = this.getPack();
  this.$.formid.setData(this.data);
  this.async(function() {
    this.openDialog(this.$.embeddedObjDialog);
  }, 50);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, takeOverAction:function(a) {
  this.data = this.$.formid.getData();
  this.closeDialog(this.$.embeddedObjDialog);
  this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || ".";
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.embeddedObjDialog);
  }, 50);
}, editValueChanged:function() {
  this.value = this.editValue ? this.data : null;
  console.log("editValueChanged(" + this.name + "):", this.value);
  this.fire("value-changed", this);
}, setValue:function(a) {
  null != a ? (this.data = a, this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || ".") : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  console.log("entityChanged(" + this.name + "):", this.entity);
  this.async(function() {
    null != this.entity && this.setFormSpec(this.namespace, this.entity);
  }, 10);
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("EmbeddedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"embeddedobj-inline-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, formexpression:{type:String}, entity:{type:String}}, observers:["entityChanged(entity,namespace)"], setFormSpec:function(a, b) {
  a = simpl4FormManager.getCrudForm(b, a);
  console.log("setFormSpec(" + this.name + "):", a);
  "string" === typeof a ? this.formName = a : this.formSpec = [a];
}, checkConstraints:function() {
  var a = this.getFormElement().validate();
  this.setInvalid(!a);
}, setInvalid:function(a) {
  this.isInvalid = a;
}, getValue:function(a) {
  a = null;
  try {
    a = this.getFormElement().getData();
  } catch (b) {
    return null;
  }
  return a;
}, setValue:function(a) {
  this.formexpressionChanged();
  this.value = a || {};
  this.async(function() {
    this.getFormElement().setData(this.value);
  }, 100);
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, formexpressionChanged:function() {
  if (null != this.formexpression) {
    var a = this._maskedEval(this.formexpression, this.getFormData(), null);
    console.log("formexpressionChanged(" + this.name + "," + this.formexpression + "):", a);
    null != a && (this.formName = a, this.variables = this.form.variables);
  }
}, onFormReady:function() {
  console.log("onFormReady:", this.value);
  this.getFormElement().setData(this.value);
}, entityChanged:function() {
  console.log("entityChanged(" + this.name + "):", this.entity);
  this.async(function() {
    null != this.entity && (this.setFormSpec(this.namespace, this.entity), this._pack = this.getPack());
  }, 10);
}, getFormData:function() {
  try {
    return this.form._getData();
  } catch (a) {
    return console.error(a), {};
  }
}, getFormElement:function() {
  return this.querySelector("#formid");
}, _maskedEval:function(a, b, c) {
  try {
    return metaes.evaluate(a.toString(), b);
  } catch (d) {
    console.log("EmbeddedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"db-selector-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, isMetaNull:function() {
  return null == this.meta;
}, isFilter:function(a) {
  return null != this.filter;
}, ready:function() {
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
}, actionCallback:function() {
  this.async(function() {
    this.$.selectorDialog.open();
  }, 50);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, selectAction:function(a) {
  a = a.detail.data;
  this.$.selectorDialog.close();
  this.assignValues(a);
}, assignValues:function(a) {
  for (var b = JSON.parse(this.fieldlist).items, c = 0; c < b.length; c++) {
    var d = b[c], f = d.path + "." + d.id, f = a[f];
    null == f && (f = d.id, f = a[f]);
    void 0 == f && (f = null);
    d = d.form_fieldname ? d.form_fieldname : d.db_fieldname;
    try {
      var g = this.form._getField(d);
      null == g ? console.error("db-selector-field.assignValue:field:" + d + " not found") : g.setValue(f);
    } catch (h) {
      console.error("db-selector-field.Cannot set value:" + h + "/" + h.stack);
    }
  }
}, getFieldDesc:function(a, b) {
  var c = this.fieldmap[a];
  null == c && (this.getSelectableFields(a), c = this.fieldmap[a]);
  for (a = 0; a < c.length; a++) {
    var d = c[a];
    if (!d.hidden && d.id == b) {
      return d;
    }
  }
  return null;
}, getSelectableFields:function(a) {
  var b = this.fieldmap[a];
  if (void 0 === b) {
    try {
      var c = simpl4.util.EntityManager, d = c.getEntityViewFields(a, this.namespace, "report", !1), b = c.buildColModel(d, this.namespace, a, "search");
      this.fieldmap[a] = b;
    } catch (f) {
      console.error("db-selector-field.getSelectableFields:" + f.stack);
      return;
    }
  }
  return b;
}, fieldlistChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  for (var a = [], b = [], c = [], d = JSON.parse(this.fieldlist).items, f = 0; f < d.length; f++) {
    var g = d[f];
    if (!0 === g.display) {
      var h = this.getFieldDesc(g.module, g.id);
      if (null == h) {
        return console.error('db-selector-field.fieldlistChanged:field("' + g.id + '") not found in "' + g.module + '"'), null;
      }
      var m = h.datatype;
      m && m.match("^array") || (h = simpl4.util.Merge.deepmerge({}, h), h.fqn = g.path + "." + g.id, h.label = tr("data." + simpl4.util.Inflector.getEntityName(g.module)) + "/" + tr("data." + g.module + "." + g.id), h.title = h.label, b.push(h.fqn), c.push(g.mapping), h.id = h.fqn, h.name = h.fqn, a.push(h));
    }
  }
  this.meta = a;
}, cancelAction:function() {
  this.async(function() {
    this.$.selectorDialog.close();
  }, 50);
}, editValueChanged:function() {
  this.value = this.editValue ? this.editValue + "/" + this.id : null;
  this.fire("value-changed", this);
}, setValue:function(a) {
  null != a ? (a = a.split("/"), this.editValue = a[0], this.id = a[1]) : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  this.async(function() {
    console.log("Field(" + this.name + "):entityChanged:" + this.getPack() + "/" + this.getSimpleEntityName(this.entity) + "/" + this.namespace);
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHeader:function(a) {
  var b = this.getPack() || "data";
  return tr(b + "." + this.getSimpleEntityName(a));
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("DbSelectorField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"xaction-button", behaviors:[Polymer.PaperButtonBehavior], properties:{xaction:{type:String}, xid:{type:String}}});
Polymer({is:"simpl-group"});
Polymer({is:"simpl-row"});
FormElementSelectorBehavior = {isTabView:function(a) {
  return "Tabview" == a;
}, isEnumSelect:function(a) {
  return "Enumselect" == a;
}, isTreeSelect:function(a) {
  return "Treeselect" == a;
}, isUpload:function(a) {
  return "Upload" == a;
}, isModuleSelector:function(a) {
  return "Moduleselector" == a;
}, isAlert:function(a) {
  return "Alert" == a;
}, isCustom:function(a) {
  return "Custom" == a;
}, isActionButton:function(a) {
  return "ActionButton" == a;
}, isTableSelect:function(a) {
  return "Tableselect" == a;
}, isEmbeddedList:function(a) {
  return "EmbeddedList" == a;
}, isEmbeddedPrimitiveCollection:function(a) {
  return "EmbeddedPrimitiveCollection" == a;
}, isLinkedList:function(a) {
  return "LinkedList" == a;
}, isEmbeddedObj:function(a) {
  return "EmbeddedObj" == a.id && (!a.xf_inline || !1 === a.xf_inline);
}, isEmbeddedObjInline:function(a) {
  return "EmbeddedObj" == a.id && a.xf_inline;
}, isGridInput:function(a) {
  return "Gridinput" == a;
}, isTextArea:function(a) {
  return "Textarea" == a;
}, isLinkedObj:function(a) {
  return "LinkedObj" == a;
}, isGroup:function(a) {
  return "Group" == a;
}, isRow:function(a) {
  return "Row" == a;
}, isPage:function(a) {
  return "Page" == a;
}, isForm:function(a) {
  return "Form" == a;
}, isField:function(a) {
  return "Input" == a || "Tableselect" == a || "Gridinput" == a || "EmbeddedList" == a || "EmbeddedPrimitiveCollection" == a || "LinkedList" == a || "Enumselect" == a || "Treeselect" == a || "Upload" == a || "Custom" == a || "Textarea" == a || "LinkedObj" == a || "EmbeddedObj" == a || "Moduleselector" == a || "Alert" == a || "break" == a;
}, isInputAndBoolean:function(a, b) {
  return "Input" == a && "boolean" == b;
}, isInputAndNotBoolean:function(a, b) {
  return "Input" == a && "boolean" != b;
}, tabTitle:function(a) {
  return a;
}};
Polymer({is:"grid-element-renderer", properties:{item:{observer:"itemChanged", type:Object}}, behaviors:[FormElementSelectorBehavior], setValue:function(a) {
  this._getGridField().setValue(a);
}, getGridField:function() {
  return this._getGridField();
}, getValue:function() {
  return this._getGridField().getValue();
}, itemChanged:function() {
}, _getGridField:function() {
  return this.field ? this.field : this.field = this.querySelector("[gridfield]");
}, attached:function() {
}});
Polymer({is:"form-element-renderer", properties:{item:{observer:"itemChanged", type:Object}}, behaviors:[FormElementSelectorBehavior], itemChanged:function() {
}, getActionButtonColor:function(a) {
  return "min-width:140px !important;";
}, getActionButtonClasses:function(a) {
  return "execute" == a ? "button button_primary" : "button";
}, _internalXAction:function(a) {
  this.fire("internal-xaction", null, {node:a.target || a.srcElement});
}, attached:function() {
}});
Polymer({is:"form-tab-renderer", behaviors:[FormElementSelectorBehavior], properties:{item:{type:Object}, pagesStyle:{computed:"computePagesStyle(item)"}}, observers:["routeChanged(route)"], getId:function(a) {
  return "div" + a;
}, getElementStyle:function() {
  return "display:block;padding-top:0px;padding-bottom:0px;";
}, getPageStyle:function() {
  return "margin-top:0px;padding:0px;";
}, computePagesStyle:function(a) {
  for (var b = 0, c = 0; c < a.childShapes.length; c++) {
    var d = a.childShapes[c], f = 0;
    d && d.bounds && (f = d.bounds.lowerRight.y - d.bounds.upperLeft.y);
    b = Math.max(b, f);
  }
  0 == b && (b = 500);
  return "overflow:hidden;min-height:" + (b - 30) + "px;";
}, ready:function() {
  var a = this.item.selected;
  !a && 0 < this.item.childShapes.length && (a = this.item.childShapes[0].xf_id);
  this.tabsId = a;
}});
Polymer({is:"form-element-selector", properties:{items:{type:Object}}, behaviors:[FormElementSelectorBehavior], attached:function() {
}});
Polymer({is:"simpl-form", behaviors:[Polymer.IronA11yKeysBehavior, FormBehavior, TranslationsBehavior], properties:{namespace:{type:String}, formName:{type:String}, mode:{type:String}, data:{type:Object}, variables:{type:Object}, enterAction:{type:String, value:null}, enterDisabled:{type:Boolean, value:!1}, saveDisabled:{type:Boolean, value:!1, notify:!0}}, observers:["_dataChanged(data.*)", "_specChanged(spec.*)", "_formNameChanged(formName)"], listeners:{"value-changed":"_valueChanged", "internal-xaction":"_internalXAction"}, 
keyBindings:{enter:"_enterPressed"}, _enterPressed:function() {
  var a = this.enterAction;
  if (null == a && !0 === this._form.xf_default_buttons && null != this._form.xf_used_default_buttons) {
    for (var b = this._form.xf_used_default_buttons.items, c = 0; c < b.length; c++) {
      var d = b[c];
      !0 === d.enter && (a = d.action);
    }
  }
  console.log("_enterPressedForm:", this.saveDisabled + "/" + a);
  this.enterDisabled || null == a || !0 === this.saveDisabled || this._internalXAction({xaction:a});
}, _getButtonLabel:function(a) {
  return a && a.startsWith("@") ? tr(a.substring(1)) : a;
}, __isSaveDisabled:function(a, b) {
  return this.saveDisabled && "execute" == b.action;
}, _internalXAction:function(a) {
  var b = a.target || a.srcElement, b = b || a;
  a = this.getData();
  "reset" === b.xaction && (console.log("resetData:", this.resetData), this._setData(this.resetData));
  if ("cancel" !== b.xaction && "reset" !== b.xaction) {
    var c = this._postProcessService();
    null != c && (this._setFieldData(c), a = simpl4.util.Merge.deepmerge(a, c));
    c = this._postProcessLocal();
    null != c && (this._setFieldData(c), a = simpl4.util.Merge.deepmerge(a, c));
    c = this.validate();
  }
  this.fire("xaction", {xaction:b.xaction, xid:b.xid, formVar:this.formVar, data:a, valid:c});
}, attached:function() {
  this.saveDisabled = !1;
}});
(function() {
  Polymer({is:"simpl-carousel", properties:{items:{type:Object}}, getSelector:function(a) {
    return "*[data-index='" + a + "']";
  }, get pageWidth() {
    return this.getBoundingClientRect().width;
  }, attached:function() {
    this.threshold = 0.2;
    this.carousel = this.$.carousel;
    this.carousel.selected = 0;
    this.addEventListener("track", function(a) {
      if ("start" !== a.detail.state) {
        var b = 0 > a.detail.dx, c = 0 < a.detail.dx;
        Math.abs(a.detail.dx) / this.pageWidth > this.threshold && (c && this.prev(), b && this.next());
      }
    });
  }, detached:function() {
    this.carousel = null;
  }, next:function() {
    this.entryAnimation = "slide-from-right-animation";
    $(this.$.carousel.querySelectorAll("section")).css("display", "");
    $(this.$.carousel.querySelector("section.iron-selected")).css("display", "none");
    this.carousel.selected = this.carousel.items.length === this.carousel.selected + 1 ? 0 : this.carousel.selected + 1;
  }, prev:function() {
    this.entryAnimation = "slide-from-left-animation";
    $(this.$.carousel.querySelectorAll("section")).css("display", "");
    $(this.$.carousel.querySelector("section.iron-selected")).css("display", "none");
    this.carousel.selected = 0 === this.carousel.selected ? this.carousel.items.length - 1 : this.carousel.selected - 1;
  }, get selected() {
    if (null != this.carousel) {
      return this.carousel.selected;
    }
  }});
})();
ScrollbarBehavior = {attached:function() {
  !1 !== this._autoScrollbar && this.async(function() {
    this._initScrollbars();
    $(".panel").on("onFullScreen.lobiPanel", function(a, b) {
      a = b.$body[0].querySelectorAll(".smooth-scrollbar");
      for (b = 0; b < a.length; b++) {
        var c = Scrollbar.get(a[b]);
        c && (c.setPosition(0, 0), c.update());
      }
    }.bind(this));
  }, 1000);
}, _initScrollbar:function(a) {
  var b = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  b || window.Scrollbar.init(a || this, {speed:b ? 1 : 4, damping:b ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10});
}, _initScrollbars:function(a) {
  a = a || this;
  var b = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints, c = [];
  b || (c = this._toElementArray(a.querySelectorAll(".dataTables_scrollBody")));
  a = this._toElementArray(a.querySelectorAll(".smooth-scrollbar"));
  c = c.concat(a);
  console.log("smoothElementArray(" + this.tagName + "):", c);
  for (a = 0; a < c.length; a++) {
    window.Scrollbar.init(c[a], {speed:b ? 1 : 4, damping:b ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10}), c[a].setAttribute("scrollbar", "");
  }
}, _toElementArray:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    b.push(a[c]);
  }
  return b;
}};
(function() {
  Polymer({is:"simpl-socialbuttons", properties:{data:{observer:"dataChanged", value:null, type:String}, text:{value:null, type:String}, url:{value:null, type:String}}, attached:function() {
    console.log("attached:", this.data);
  }, dataChanged:function() {
    this.async(function() {
      var a = this.data.split(",");
      console.log("dataChanged:", this.data);
      console.log("url:", this.url);
      $("#socialbuttons").jsSocials({url:this.url, text:this.text, shares:a});
    }, 100);
  }});
})();
Polymer({is:"simpl-upload", properties:{target:{type:String, value:""}, progressHidden:{type:Boolean, value:!1}, droppable:{type:Boolean, value:!1}, dropText:{type:String, value:"Drop Files Here"}, multi:{type:Boolean, value:!1}, maxsize:{value:0}, files:{type:Array, value:function() {
  return [];
}}, method:{type:String, value:"PUT"}, raised:{type:Boolean, value:!1}, noink:{type:Boolean, value:!1}, headers:{type:Object, value:{}}, retryText:{type:String, value:"Retry Upload"}, removeText:{type:String, value:"Remove"}, successText:{type:String, value:"Success"}, errorText:{type:String, value:"Error uploading file..."}, _shownDropText:{type:Boolean, value:!1}}, behaviors:[TranslationsBehavior], clear:function() {
  $(this.$.fileInput).val(null);
  this.set("files", []);
  this._showDropText();
}, ready:function() {
  this.raised && this.toggleAttribute("raised", !0, this.$.button);
  this.noink && this.toggleAttribute("noink", !0, this.$.button);
  this.droppable && (this._showDropText(), this.setupDrop());
}, setupDrop:function() {
  var a = this.$.UploadBorder;
  this.toggleClass("enabled", !0, a);
  this.ondragover = function(b) {
    b.stopPropagation();
    this.toggleClass("hover", !0, a);
    return !1;
  };
  this.ondragleave = function() {
    this.toggleClass("hover", !1, a);
    return !1;
  };
  this.ondrop = function(b) {
    this.toggleClass("hover", !1, a);
    b.preventDefault();
    for (var c = b.dataTransfer.files.length, d = 0; d < c; d++) {
      var f = b.dataTransfer.files[d];
      f.progress = 0;
      f.error = !1;
      f.complete = !1;
      0 == this.multi && this.clear();
      console.log("maxsize:", this.maxsize);
      0 != this.maxsize && f.size > this.maxsize ? (console.log("too large"), this.fire("upload-maxsize", {file:f})) : (this.push("files", f), this.uploadFile(f));
    }
  };
}, _fileClick:function() {
  var a = this.$.fileInput;
  if (a && document.createEvent) {
    var b = document.createEvent("MouseEvents");
    b.initEvent("click", !0, !1);
    a.dispatchEvent(b);
  }
}, _fileChange:function(a) {
  for (var b = a.target.files.length, c = 0; c < b; c++) {
    var d = a.target.files[c];
    d.progress = 0;
    d.error = !1;
    d.complete = !1;
    0 == this.multi && this.clear();
    console.log("maxsize:", this.maxsize);
    0 != this.maxsize && d.size > this.maxsize ? (console.log("too large"), this.fire("upload-maxsize", {file:d})) : (this.push("files", d), this.uploadFile(d));
  }
}, cancel:function(a) {
  a && a.xhr && (a.xhr.abort(), this.splice("files", this.files.indexOf(a), 1), this._showDropText());
}, _cancelUpload:function(a) {
  this.cancel(a.model.__data__.item);
}, _retryUpload:function(a) {
  a.model.set("item.error", !1);
  a.model.set("item.progress", 0);
  var b = this;
  this.async(function() {
    b.uploadFile(a.model.__data__.item);
  }, 50);
}, _showDropText:function() {
  this.set("_shownDropText", !this.files.length && this.droppable);
}, uploadFile:function(a) {
  if (a) {
    this._showDropText();
    var b = "files." + this.files.indexOf(a), c = new FileReader;
    c.file = a;
    c.onloadend = function(a) {
      console.log("onloadend:", a);
      this.set(b + ".complete", !0);
      this.fire("upload-complete", a);
    }.bind(this);
    c.readAsDataURL(a);
  }
}});
Polymer({is:"simpl-tree", properties:{nameProp:{value:"name", type:String}, data:{observer:"dataChanged", type:Object}, opened:{value:!1, type:Boolean}, idProp:{value:"path", type:String}, childrenProp:{value:"children", type:String}, selected:{observer:"selectedChanged", type:String}}, ready:function(a) {
  this.iconOpen = "hardware:keyboard-arrow-right";
  this.iconClose = "hardware:keyboard-arrow-down";
  this.iconBOM = "arrow-drop-down";
}, toggleEvent:function(a) {
  a.preventDefault();
  a.stopPropagation();
  a = a.target || a.srcElement;
  this.toggleChildren(a.parentNode, a);
}, toggleChildren:function(a, b) {
  -1 < a.className.indexOf("parent") && a.nextElementSibling && ("none" === a.nextElementSibling.style.display ? (a.className = "parent expanded", a.nextElementSibling.style.display = "block", b.setAttribute("icon", this.iconClose)) : (a.className = "parent collapsed", a.nextElementSibling.style.display = "none", b.setAttribute("icon", this.iconOpen)));
}, openChildren:function(a, b) {
  -1 < a.className.indexOf("parent") && a.nextElementSibling && "none" === a.nextElementSibling.style.display && (a.className = "parent expanded", a.nextElementSibling.style.display = "block", b.setAttribute("icon", this.iconClose));
}, _selectItem:function(a) {
  var b = a.target || a.srcElement;
  a = b;
  b = b.parentNode;
  b = b.getAttribute("idvalue");
  console.log("selectItem:", b);
  null != b && (this.prevSelected && this.prevSelected.removeAttribute("selected"), b = this.getItemById(b, this.data), this.fire("item-selected", {item:b}), a.setAttribute("selected", ""), this.prevSelected = a);
}, selectedChanged:function() {
  var a = this._tree.querySelector('[idvalue="' + this.selected + '"] span');
  this.openTree(a);
  this.prevSelected && this.prevSelected.removeAttribute("selected");
  this.prevSelected = a;
  a.setAttribute("selected", "");
  a = this.getItemById(this.selected, this.data);
  this.fire("item-selected", {item:a});
}, openTree:function(a) {
  for (a = a.parentElement; a && "DIV" == a.nodeName;) {
    a = a.parentElement;
    if ("LI" != a.nodeName) {
      break;
    }
    a = a.parentElement.parentElement;
    a = a.querySelector("div[idvalue]");
    var b = a.querySelector("iron-icon");
    this.openChildren(a, b);
  }
}, getItemById:function(a, b) {
  if (b[this.idProp] == a) {
    return b;
  }
  for (var c = b[this.childrenProp], d = 0; c && d < c.length; d++) {
    if (b = this.getItemById(a, c[d])) {
      return b;
    }
  }
  return null;
}, dataChanged:function() {
  this._createRoot();
}, _createRoot:function() {
  var a = document.createElement("div");
  Polymer.dom(a).setAttribute("id", "main");
  this._tree = a;
  this.$.treeRootId.firstChild && Polymer.dom(this.$.treeRootId).removeChild(this.$.treeRootId.firstChild);
  Polymer.dom(this.$.treeRootId).appendChild(a);
  console.log("simpl-tree._createRoot:", this.data);
  this._createNode(a, this.data, this.opened ? !0 : !1);
}, _createNode:function(a, b, c) {
  var d = document.createElement("div");
  Polymer.dom(d).classList.add("layout");
  Polymer.dom(d).classList.add("horizontal");
  d.addEventListener("click", this._selectItem.bind(this));
  Polymer.dom(a).appendChild(d);
  var f = !1;
  b.children && 0 < b.children.length && (Polymer.dom(d).classList.add("parent"), f = !0);
  Polymer.dom(d).classList.add(c ? "expanded" : "collapsed");
  Polymer.dom(d).setAttribute("idvalue", b[this.idProp]);
  var g = document.createElement("iron-icon");
  Polymer.dom(d).appendChild(g);
  f && Polymer.dom(g).setAttribute("icon", c ? "hardware:keyboard-arrow-down" : "hardware:keyboard-arrow-right");
  g.addEventListener("click", this.toggleEvent.bind(this));
  g = document.createElement("span");
  Polymer.dom(d).appendChild(g);
  Polymer.dom(g).classList.add("truncate");
  Polymer.dom(g).setAttribute("style", f ? "color:black;" : "color:gray;");
  Polymer.dom(g).setAttribute("title", b[this.nameProp]);
  d = document.createTextNode(b[this.nameProp]);
  Polymer.dom(g).appendChild(d);
  d = document.createElement("ul");
  Polymer.dom(d).setAttribute("style", c ? "display:block;" : "display:none;");
  Polymer.dom(a).appendChild(d);
  if (f) {
    for (a = 0; a < b.children.length; a++) {
      c = b.children[a], f = document.createElement("li"), Polymer.dom(d).appendChild(f), this._createNode(f, c, !1);
    }
  }
}, detached:function() {
}, attributeChanged:function(a, b, c) {
}});
(function() {
  Polymer({is:"simpl-toast", properties:{text:{type:String}, duration:{type:Number, value:3000}, type:{type:String}, heat:{type:String}, shelf:{type:String}, _breads:{type:Array, value:function() {
    return [];
  }}}, show:function(a, b, c, d, f) {
    this._bake({text:a, type:b || "info", duration:c, heat:f || "high", shelf:d || "bottom-left"});
  }, _bake:function(a) {
    var b = a.text || this.text;
    b && b.trim().length && (this.push("_breads", a), this._emptyTheToaster());
  }, _emptyTheToaster:function() {
    if (this._breads.length) {
      var a = this._breads[0], b = a.duration || this.duration, c = a.type || this.type, d = a.heat || this.heat, f = a.shelf || this.shelf, g = this.$.toast;
      this.shift("_breads");
      g.text = a.text || this.text;
      g.duration = b;
      this._turnOnTheToaster(c, d, f);
      this.async(function() {
        g.show();
      }, 100);
      this.async(function() {
        this._emptyTheToaster();
      }, b + 500);
    } else {
      this.async(function() {
        this._turnOffTheToaster();
      }, 1000);
    }
  }, _turnOnTheToaster:function(a, b, c) {
    var d = this.$.grill;
    a = a && a.toLowerCase() || "";
    this.toggleClass("info", "info" === a, d);
    this.toggleClass("success", "success" === a, d);
    this.toggleClass("warning", "warning" === a, d);
    this.toggleClass("error", "error" === a, d);
    b = b && b.toLowerCase() || "";
    this.toggleClass("low", "low" === b, d);
    this.toggleClass("middle", "middle" === b, d);
    this.toggleClass("high", "high" === b, d);
    c = c && c.toLowerCase() || "";
    this.toggleClass("top-left", "top-left" === c);
    this.toggleClass("top-right", "top-right" === c);
    this.toggleClass("bottom-left", "bottom-left" === c);
    this.toggleClass("bottom-right", "bottom-right" === c);
    "error" == a && (this.icon = "error");
    "info" == a && (this.icon = "info");
    "warning" == a && (this.icon = "warning");
    "success" == a && (this.icon = "check");
    0 <= c.indexOf("right") && (this.style.right = d.clientWidth + 24 + "px");
  }, close:function() {
    this.$.toast.hide();
  }, _turnOffTheToaster:function() {
    var a = this.$.grill;
    this.toggleClass("low", !1, a);
    this.toggleClass("middle", !1, a);
    this.toggleClass("high", !1, a);
  }});
})();
Polymer({is:"simpl-svg-hscroll", properties:{contentStyle:{computed:"getContentStyle(height)"}, src:{value:null, type:String}, height:{value:null, type:String}}, getContentStyle:function() {
  return "height:" + this.height + "px;";
}, attached:function() {
  var a = this.$.objId;
  a.addEventListener("load", function() {
    var b = a.getSVGDocument(), c = b.querySelector("svg");
    SVG(c);
    var d = SVG.get("layer1", b);
    $(c).swipe({swipe:function(a, b, c, m, u, r) {
      console.log("You swiped " + b + "/" + Math.pow(c, 2) / 100 + "/" + u);
      c = Math.pow(c, 2) / 100;
      0 != u && ("right" == b ? d.transform({x:c}, !0) : "left" == b && d.transform({x:-c}, !0));
    }, allowPageScroll:"vertical", threshold:0});
  });
}});
Polymer({is:"simpl-animatable-page", behaviors:[Polymer.NeonAnimatableBehavior], properties:{animationConfig:{type:Object, value:function() {
  return {entry:{name:"slide-from-right-animation", node:this}, exit:{name:"slide-left-animation", node:this}};
}}}});
Polymer({is:"simpl-zoom", properties:{styleClosed:{computed:"computeStyleClosed(maxWidthClosed)"}, backdrop:{value:!1, type:Boolean}, maxWidthClosed:{value:"600px", type:String}, image:{type:String}}, computeStyleClosed:function() {
  return "width:" + this.maxWidthClosed;
}, _dialogOpened:function() {
  this.async(function() {
    this.dialogOpened();
  }, 50);
}, dialogOpened:function() {
  this.dh = $(this.$.imageDialog).height();
  null == this.ih && (this.ih = $(this.$.bigImage).height());
  $(this.$.bigImage).panzoom({disablePan:!0});
  $(this.$.bigImage).pep({useCSSTranslation:!1, velocityMultiplier:1.0, allowDragEventPropagation:!1, xonstrainTo:"window"});
  $(this.$.bigImage).panzoom("zoom", this.dh / this.ih * 0.85);
  $(this.$.imageDialog).offset({top:0, left:this.isDrawerOpen() ? 230 : 0});
  $("#scroller", this).height(this.dh);
  $(this.$.bigImage).offset({top:58, left:this.isDrawerOpen() ? 230 : 0});
  var a = this, b = new Hammer.Manager(this.$.bigImage, {});
  b.add(new Hammer.Tap({event:"doubletap", taps:2, threshold:50, interval:400, time:250}));
  b.on("doubletap", function(b) {
    console.log("about to close");
    a.dialogClose();
  });
}, attached:function() {
  var a = this, b = new Hammer.Manager(this.$.imageClosed, {});
  b.add(new Hammer.Tap({event:"doubletap", taps:2, threshold:10, interval:250, time:250}));
  b.on("doubletap pinch", function(b) {
    console.log("about to open");
    a.dialogOpen();
  });
  0 <= Detectizr.browser.userAgent.indexOf("edge/") && (this.$.closedImageId.src = this.image, this.$.bigImage.src = this.image);
}, dialogOpen:function() {
  try {
    this._setParentsScrolling(!0);
  } catch (a) {
    alert(a);
  }
  this.async(function() {
    this.$.imageDialog.open();
    this.showMainToolbar(!1);
  }, 50);
}, dialogClose:function() {
  this.async(function() {
    this.$.imageDialog.close();
    this.showMainToolbar(!0);
  }, 50);
}, dialogClosed:function() {
  this._setParentsScrolling(!1);
  this.showMainToolbar(!0);
}, showMainToolbar:function(a) {
  a ? $("#mainToolbar").show() : $("#mainToolbar").hide();
}, isDrawerOpen:function() {
  return !1;
}, detached:function() {
}, _setParentsScrolling:function(a) {
  console.log("_setParentsScrolling,", this.tagName);
  if ("-webkit-overflow-scrolling" in this.style) {
    for (var b = Polymer.dom(this).parentNode; b;) {
      a ? b.style && (b._oldWebkitOverflowScrolling = b.style["-webkit-overflow-scrolling"], b.style["-webkit-overflow-scrolling"] = "auto") : "_oldWebkitOverflowScrolling" in b && (b.style["-webkit-overflow-scrolling"] = b._oldWebkitOverflowScrolling, delete b._oldWebkitOverflowScrolling), b = b.parentNode;
    }
  }
}});
Polymer({is:"simpl-viewer", properties:{}, observers:[], ready:function() {
  this.panelBackgroundColor = "#666666";
  this.panelHeader = "Maschine";
  this.panelHeaderBom = "Stückliste";
  this.panelHeaderDrawing = "Zeichnung";
  this.showAssemblies = !0;
  this.dataTablesOptions = {paging:!0, dom:"frtiS", scrollY:"150px"};
  simpl4.util.MessageManager.installMessages("bhs");
  var a = null;
  try {
    a = simpl4.util.Rpc.rpcSync("bhs:getBOMTree", {namespace:"bhs", machine:"2100097"});
  } catch (b) {
    alert("Viewer._init:" + b);
    return;
  }
  null == this.showAssemblies || "false" != this.showAssemblies && !1 !== this.showAssemblies || ($(this.$.assemblyId).css("display", "none"), $(this.$.viewerAndListId).attr("vl100", ""), $(this.$.viewerAndListId).removeAttr("vl66"));
  this.assemblies = a;
  window.buttonClicked = this.buttonClicked.bind(this);
}, tableHeightChanged:function() {
  this.tableHeight && (this.dataTablesOptions.scrollY = this.tableHeight + "px");
}, viewerHeightChanged:function() {
  this.viewerHeight && ($(this.$.viewer).css("min-height", this.viewerHeight + "px"), $(this.$.viewer).css("height", this.viewerHeight + "px"));
}, attached:function(a) {
  a = simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/openseadragon/";
  this._openSeadragon = OpenSeadragon({hash:"hash_" + this, element:this.$.viewer, prefixUrl:a, zoomPerClick:2.0, showFullPageControl:!1, autoHideControls:!1, navigatorMaintainSizeRatio:!0, navigatorSizeRatio:0.22, navigatorPosition:"BOTTOM_LEFT", showNavigator:!0});
  this.assemblyTableMeta = this.getAssembyTableMeta();
  this._openSeadragon.addHandler("open", this._addOverlays.bind(this));
  this._openSeadragon.addViewerInputHook({hooks:[{tracker:"viewer", handler:"clickHandler", hookHandler:this.onViewerClick.bind(this)}]});
  this.selected = "2100097.141027600.135450200";
  navigator.userAgent.match(/android/i) && $(this.$.viewer.querySelector(".openseadragon-container")).css("overflow", "auto");
  if (window.etk) {
    window.etk.onExternalReady();
  }
}, panelOpen:function() {
  $(window).trigger("resize.DT-dataTablesId");
  $(window).trigger("resize.dtr");
}, selectedAssemblyChanged:function(a) {
  console.log("Details:", a.detail);
  var b = a.detail.item, c = b.part;
  a = simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/png_" + c + "/map.xml";
  var d = this.getHotspots(a);
  this._hotspots = d;
  this.showLoading("Loading " + b.name + "...");
  setTimeout(function() {
    console.log("selectedAssemblyChanged:", b);
    this.panelHeaderBom = "Stückliste(" + b.name + ")";
    this.assemblyTableData = this.getAssembyTableData(b.path);
    this.open(c, d, "page-width");
  }.bind(this), 10);
}, showLoading:function(a) {
  this.toastMessage = a;
  this.$.toast.show();
}, partSelected:function(a) {
  a = a.detail.rows[0];
  console.log("partSelected:", a.part);
  this.selectHotspot(a.part);
}, open:function(a, b, c) {
  b = this._getParameter(a);
  this._openSeadragon.open({width:b.width, height:b.height, tileSize:256, getTileUrl:function(b, c, g) {
    return simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/deep/SD_" + a + "/" + b + "/" + c + "_" + g + ".png";
  }});
}, close:function() {
  this._openSeadragon.close();
}, selectHotspot:function(a, b) {
  this._selectHotspot(a, !1);
}, destroy:function() {
  this._openSeadragon.destroy();
}, getHotspots:function(a) {
  var b;
  jQuery.ajax({url:a, async:!1, dataType:"text", success:function(a) {
    b = a;
  }});
  return (new simpl4.util.Xml2Json).convert(b).area;
}, getAssembyTableMeta:function(a) {
  a = [];
  var b = {data:"menge", title:"", class:"input menge"};
  b.mRender = this.renderColumn;
  a.push(b);
  b = {data:"basket", title:"", class:"wbutton", icon:"basket.gif"};
  b.mRender = this.renderColumn;
  a.push(b);
  b = {data:"part", class:"teilenummer alignLeft", width:"50"};
  b.title = tr("bomviewer.part");
  a.push(b);
  b = {data:"name", class:"teilename", width:"70"};
  b.title = tr("bomviewer.name");
  a.push(b);
  b = {data:"name2", title:"Beschreibung"};
  a.push(b);
  b = {data:"qty"};
  b.title = tr("bomviewer.qty");
  b.width = "20";
  a.push(b);
  b = {data:"price"};
  b.title = tr("bomviewer.price");
  return a;
}, renderColumn:function(a, b, c, d) {
  a = d.settings.aoColumns[d.col].mData;
  d = d.settings.aoColumns[d.col].sClass;
  b = simpl4.util.BaseManager.getBaseUrl();
  var f = simpl4.util.BaseManager.getNamespace();
  return d && -1 < d.toLowerCase().indexOf("input") ? "<div style='' class='input'><input id='id" + c.part + "' style='padding:0px !important; padding-top:3px !important; ;max-width:38px;margin:0px;font-size:10px;height:16px;xidth:100%;' type='text'></input></div>" : d && -1 < d.toLowerCase().indexOf("wbutton") ? "<div onClick='window.buttonClicked(" + c.part + ");' class='wbutton'><input style='height:16px;background:#787878;' src='" + b + "/repo/" + f + "/basket.gif' type='image'></input></div>" : 
  c[a];
}, buttonClicked:function(a) {
  var b = $(document.querySelector("html /deep/ #id" + a)), c = this.isEmpty(b.val()) ? 1 : parseInt(b.val());
  console.log("Part:" + a + "/" + c);
  !isNaN(c) && 0 < c && (b.val(null), window.etk && window.etk.addToBasket(a, c));
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}, getAssembyTableData:function(a) {
  try {
    var b = simpl4.util.Rpc.rpcSync("bhs:getAssembly", {namespace:"bhs", path:a + ".*{1}"});
    b.forEach(function(a) {
      this._hasHotspot(a.part) || (a.name = "<span style='color:rgba(0, 0, 0, 0.5);'>" + a.name + "</span>");
    }.bind(this));
    return b;
  } catch (c) {
    alert("BOMViewer._getAssemby:" + c);
  }
}, _hasHotspot:function(a) {
  null == this._hotspotMap && (this._hotspotMap = {}, this._hotspots.forEach(function(a) {
    this._hotspotMap[a.href] = !0;
  }.bind(this)));
  return this._hotspotMap[a];
}, _selectHotspot:function(a, b) {
  var c;
  if (!0 !== this.internalHotspotEvent) {
    for (var d = this.$.viewer.getElementsByClassName("hotspot"), f = null, g = 0; g < d.length; g++) {
      var h = d[g];
      jQuery(h).removeClass("selected");
      (c = h.$$hotspot) && c.href == a && (jQuery(h).addClass("selected"), f || (f = h));
    }
    !b && f && (c = f.$$hotspot, this._openSeadragon.viewport.panTo(c.p, !0));
  }
}, _addOverlays:function(a) {
  console.log("addOverlays:", a);
  a = a.eventSource;
  for (var b = this._hotspots, c = 0; c < b.length; c++) {
    var d = b[c], f = d.coords.split(","), g = 5.0 * f[0], h = 5.0 * f[1], f = a.viewport.imageToViewportRectangle(g, h, 5.0 * (f[2] - f[0] + 2), 5.0 * (f[3] - f[1] + 2)), g = a.viewport.imageToViewportCoordinates(g, h), d = this.createDiv(d.href, g);
    a.addOverlay(d, f);
  }
}, createDiv:function(a, b) {
  var c = document.createElement("div");
  c.className = "hotspot";
  c.$$hotspot = {p:b, href:a};
  return c;
}, onViewerClick:function(a) {
  var b = a.originalEvent, b = b.target || b.srcElement;
  b.$$hotspot && (a.preventDefaultAction = !0, a.stopBubbling = !0, b = b.$$hotspot, console.log("onViewerClick:", b), this._selectHotspot(b.href, !0), this.internalHotspotEvent = !0, this.selectBom(b.href), this.internalHotspotEvent = !1, a.preventDefaultAction = !0);
}, selectBom:function(a) {
  var b = this.$.bomTable, c = b._api, d = c.rows(function(b, c, d) {
    return c.part === a ? !0 : !1;
  });
  console.log("RowNodes:", d[0]);
  b.unselectAll();
  c.rows(d[0]).nodes().to$().addClass("selected");
  0 < d[0].length && (console.log("RowNodes:", d[0][0]), b = c.scroller(), console.log("Scroller:", b), b.scrollToRow(d[0][0] - 2, !1));
}, _getParameter:function(a) {
  return {123490603:{width:5263, height:3719}, 123551E3:{width:5263, height:3719}, 123555401:{width:5263, height:3719}, 123565300:{width:5263, height:3719}, 124451600:{width:4950, height:3825}, 124665200:{width:4950, height:3825}, 124665600:{width:5263, height:3719}, 124665700:{width:4950, height:3825}, 124751400:{width:5263, height:3719}, 124769600:{width:4950, height:3825}, 125429200:{width:5263, height:3719}, 125684601:{width:4950, height:3825}, 125684602:{width:4950, height:3825}, 127323700:{width:5263, 
  height:3719}, 128486700:{width:5263, height:3719}, 129729E3:{width:4950, height:3825}, 132818800:{width:5263, height:3719}, 132885800:{width:4950, height:3825}, 133294500:{width:5263, height:3719}, 133336500:{width:5263, height:3719}, 133424600:{width:5263, height:3719}, 133682500:{width:4950, height:3825}, 133777E3:{width:5263, height:3719}, 133793603:{width:7444, height:5263}, 133967200:{width:5263, height:3719}, 133971600:{width:5263, height:3719}, 133974300:{width:4950, height:3825}, 133974600:{width:4950, 
  height:3825}, 133999600:{width:5263, height:3719}, 134000600:{width:5263, height:3719}, 134000601:{width:5263, height:3719}, 134006E3:{width:5263, height:3719}, 134006001:{width:5263, height:3719}, 134102600:{width:5263, height:3719}, 134179500:{width:5263, height:3719}, 134413200:{width:4950, height:3825}, 134777700:{width:4950, height:3825}, 134861900:{width:5263, height:3719}, 134953200:{width:5263, height:3719}, 135096200:{width:5263, height:3719}, 135161500:{width:4950, height:3825}, 135224600:{width:4950, 
  height:3825}, 135234600:{width:4950, height:3825}, 135450200:{width:5263, height:3719}, 136421400:{width:5263, height:3719}, 136421800:{width:5263, height:3719}, 136924204:{width:3831, height:2394}, 137421800:{width:4950, height:3825}, 137756400:{width:5263, height:3719}, 138412E3:{width:5263, height:3719}, 139094200:{width:5263, height:3719}, 140645400:{width:4950, height:3825}, 140755100:{width:5263, height:3719}, 140755101:{width:4950, height:3825}, 140763300:{width:4950, height:3825}, 140763301:{width:5263, 
  height:3719}, 140779200:{width:3831, height:2394}, 140833100:{width:5263, height:3719}, 140833200:{width:5263, height:3719}, 141012800:{width:5263, height:3719}, 141027500:{width:3844, height:2394}, 141027600:{width:3844, height:2394}, 141027700:{width:3844, height:2394}, 141027800:{width:3831, height:2388}, 141027900:{width:3844, height:2394}, 141042700:{width:4950, height:3825}, 141078500:{width:5263, height:3719}, 141078600:{width:5263, height:3719}, 141078900:{width:5263, height:3719}, 141216100:{width:4950, 
  height:3825}, 141363400:{width:3831, height:2394}, 141363500:{width:5263, height:3719}, 141371E3:{width:3831, height:2388}, 141371800:{width:5263, height:3719}, 141378900:{width:3831, height:2394}, 141379300:{width:5263, height:3719}, 142080900:{width:4950, height:3825}, 145023400:{width:5263, height:3719}, 145028200:{width:5263, height:3719}, 145651400:{width:5263, height:3719}, 145661E3:{width:4950, height:3825}, 2100097:{width:3831, height:2388}}[a];
}});
Polymer({is:"simpl-xhr", request:function(a) {
  var b = new XMLHttpRequest, c = a.url, d = a.method || "GET", f = !a.sync, g = this.toQueryString(a.params);
  g && "GET" == d.toUpperCase() && (c += (0 < c.indexOf("?") ? "&" : "?") + g);
  g = this.isBodyMethod(d) ? a.body || g : null;
  b.open(d, c, f);
  a.responseType && (b.responseType = a.responseType);
  a.withCredentials && (b.withCredentials = !0);
  this.makeReadyStateHandler(b, a.callback);
  this.setRequestHeaders(b, a.headers);
  b.send(g);
  if (!f) {
    b.onreadystatechange(b);
  }
  return b;
}, toQueryString:function(a) {
  var b = [];
  for (d in a) {
    var c = a[d];
    var d = encodeURIComponent(d);
    b.push(null == c ? d : d + "=" + encodeURIComponent(c));
  }
  return b.join("&");
}, isBodyMethod:function(a) {
  return this.bodyMethods[(a || "").toUpperCase()];
}, bodyMethods:{POST:1, PUT:1, PATCH:1, DELETE:1}, makeReadyStateHandler:function(a, b) {
  a.onreadystatechange = function() {
    4 == a.readyState && b && b.call(null, a.response, a);
  };
}, setRequestHeaders:function(a, b) {
  if (b) {
    for (var c in b) {
      a.setRequestHeader(c, b[c]);
    }
  }
}});
!function() {
  Polymer({is:"app-grid", behaviors:[Polymer.Templatizer], properties:{itemWidth:{type:Number, value:128}, itemHeight:{type:Number, value:128}, itemSpacing:{type:Number, value:16}, items:{type:Array, value:function() {
    return [];
  }, observer:"_itemsChanged"}}, attached:function() {
    window.addEventListener("resize", this._layout.bind(this));
  }, detached:function() {
    window.removeEventListener("resize", this._layout);
  }, get parent() {
    return this.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? this.parentNode.host : this.parentNode;
  }, addItems:function(a) {
    gridEl = Polymer.dom(this.$.grid);
    for (k = 0; k < a.length; k++) {
      var b = document.createElement("div");
      b.classList.add("item-container");
      b.style.width = this.itemWidth + "px";
      b.style.height = this.itemHeight + "px";
      b.style.margin = 0;
      b.style.opacity = 0;
      gridEl.appendChild(b);
      userEl = this.stamp(null);
      userEl.item = a[k];
      b.appendChild(userEl.root);
    }
    this._layout();
  }, removeAllItems:function() {
    for (var a = Polymer.dom(this.$.grid); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
  }, _itemsChanged:function(a, b) {
    (b = Polymer.dom(this).querySelector("template")) && this.templatize(b);
    for (b = Polymer.dom(this.$.grid); b.firstChild;) {
      b.removeChild(b.firstChild);
    }
    for (k = 0; k < a.length; k++) {
      var c = document.createElement("div");
      c.classList.add("item-container");
      c.style.width = this.itemWidth + "px";
      c.style.height = this.itemHeight + "px";
      c.style.margin = 0;
      c.style.opacity = 0;
      b.appendChild(c);
      userEl = this.stamp(null);
      userEl.item = a[k];
      c.appendChild(userEl.root);
    }
    this._layout();
  }, _layout:function() {
    var a;
    var b = Polymer.dom(this.$.grid).node;
    var c = Polymer.dom(b).querySelectorAll(".item-container");
    if (0 < c.length) {
      var d = +window.getComputedStyle(b).width.replace("px", "");
      var f = this.itemWidth + this.itemSpacing;
      var g = this.itemHeight + this.itemSpacing;
      var h = Math.floor(d / f);
      var m = this.itemSpacing;
      var u = (d - h * this.itemWidth - (h - 1) * this.itemSpacing) / 2;
      for (a = 0; a < c.length; a++) {
        d = c[a];
        var r = Math.floor(a % h);
        var n = Math.floor(a / h);
        d.style.opacity = 1;
        d.style.top = n * g + m + "px";
        d.style.left = r * f + u + "px";
      }
      b.style.height = (n + 1) * g + m + "px";
    }
  }});
}();
(function() {
  Polymer({is:"simpl-websocket", properties:{namespace:{type:String}, websocketName:{type:String}, osgiService:{type:String}, connected:{type:Boolean, value:!1, notify:!0}, recvMessage:{type:Object, notify:!0}}, observers:[], sendMessage:function(a) {
    if (!this.connected) {
      throw Error("simpl-websocket.send(...): not connected.");
    }
    a = JSON.stringify(a);
    console.log("<- sendMessage:", a);
    this.socket.onNext(a);
  }, closeConnection:function() {
    this.socket.onCompleted();
  }, openConnection:function(a, b) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), d = simpl4.util.Base64.encode(d + ":" + c), c = simpl4.util.BaseManager.getBaseUrl(), c = c.replace("http", "ws");
    a = a || {};
    a.credentials = d;
    a.namespace || (a.namespace = this.namespace);
    a.name || (a.name = this.websocketName);
    a.connectionKey || (a.connectionKey = getShortId());
    a.osgiService = this.osgiService;
    a = $.param(a);
    this.url = c + "/ws/xyz?" + a;
    a = Rx.Observer.create(function(a) {
      console.info("-> websocket open");
      this.connected = !0;
    }.bind(this));
    c = Rx.Observer.create(function(a) {
      console.log("websocket is about to close:", a);
      this.connected = !1;
    }.bind(this));
    this.socket = simpl4.util.Rx.observableFromWebSocket(this.url, {timeoutCallback:b, debug:!1, reconnectInterval:50}, a, c);
    var f = this;
    this.socket.subscribe(function(a) {
      var b = a.data, b = JSON.parse(b);
      f.fire("message", {data:b});
      f.async(function() {
        f.recvMessage = b;
      }, null, 0);
    }, function(a) {
      console.error("Error:" + a.reason + "(" + a.code + ")");
      var b = {errorMessage:a.reason};
      f.async(function() {
        f.recvMessage = b;
      }, null, 0);
    }, function() {
      console.info("websocket closed");
      f.connected = !1;
    });
  }});
})();
(function() {
  Polymer({is:"simpl-websocket-plain", properties:{namespace:{type:String}, websocketName:{type:String}, osgiservice:{type:String}, connected:{type:Boolean, notify:!0}, recvMessage:{type:Object, notify:!0}}, connected:!1, send:function(a) {
    if (!this.connected) {
      throw Error("simpl-websocket-plain.send(...): not connected.");
    }
    a = JSON.stringify(a);
    console.log("<- sendMessage:", a);
    this.wssocket.send(a);
  }, sendMessage:function(a) {
    this.send(a);
  }, closeConnection:function() {
    this.wssocket.close();
  }, openConnection:function(a, b) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), d = simpl4.util.Base64.encode(d + ":" + c), c = simpl4.util.BaseManager.getBaseUrl(), c = c.replace("http", "ws");
    a = a || {};
    a.namespace = this.namespace;
    a.credentials = d;
    a.osgiService = this.osgiService;
    a.name = this.websocketName;
    a.connectionKey || (a.connectionKey = getShortId());
    a = $.param(a);
    this.url = c + "/ws/xyz?" + a;
    var f = this;
    this.wssocket = b = new ReconnectingWebSocket(this.url, null, {timeoutCallback:b, debug:!1, reconnectInterval:50});
    b.onopen = function(a) {
      f.connected = !0;
    };
    b.onclose = function(a) {
      console.log("onclose:", a);
      f.connected = !1;
      var b = {errorMessage:a.reason};
      f.async(function() {
        f.recvMessage = b;
      }, null, 0);
    };
    b.onerror = function(a) {
      console.error("WebSocket Error " + a);
    };
    b.onmessage = function(a) {
      var b = JSON.parse(a.data);
      f.async(function() {
        f.recvMessage = b;
      }, null, 0);
    };
  }});
})();
Polymer({is:"simpl-chat", behaviors:[TranslationsBehavior], properties:{demotext:{value:!1, type:Boolean}, chatList:{value:function() {
  return [];
}, type:Array}, connected:{value:!1, type:Boolean}, chatId:{value:"main", notify:!0, type:String}}, observers:["connectedChanged(connected)", "recvMessageChanged(recvMessage)", "chatIdChanged(chatId)"], attached:function() {
  this.chatId = "main";
}, ready:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.viewId = "loginView";
  this.camelWS = !1;
  this.recvMessage = null;
  this.autoConnect = !0;
  this.resourceId = null;
  this.pausingTimeout = 2500;
  this.isCurrentParticipant = !1;
  this.resourceId = getShortId();
  this.addUserCallback = this.addUser.bind(this);
  this.addGroupCallback = this.addGroup.bind(this);
  this.loginCallback = this.login.bind(this);
  this.joinRoomCallback = this.joinRoom.bind(this);
  this.leaveRoomCallback = this.leaveRoom.bind(this);
  window.addEventListener("unload", function(a) {
    !0 === this.connected && this.sendChatState("gone");
  }.bind(this));
  this.loginData = {username:Simpl4.Cache.getItem("chat.username"), password:Simpl4.Cache.getItem("chat.password"), domain:Simpl4.Cache.getItem("chat.domain")};
}, sendMessageInput:function() {
  var a = this.chatHash[this.chatId], b = this.querySelector("#messageInput-" + a.id), c = a.participant || $(this.querySelector("#participant-" + a.id)).val();
  if (this.isEmpty(c) && "mixedchat" === a.type) {
    this.showError("no participant selected"), console.error("no participant selected");
  } else {
    if ("" != b.value) {
      var d = {body:b.value, from:this.loginData.username};
      this.isEmpty(c) || (d.participant = c);
      "groupchat" === a.type && (d.room = a.id);
      "groupchat" !== a.type && (d.style = "background:light-yellow;", d.time = this.getTime(), this.getMessageBoxTemplate().unshift("items", d));
      this.$.websocket.sendMessage(d);
      b.setValue("");
      this.sendChatState("active");
      a.isComposing = !1;
    }
  }
}, recvMessageChanged:function() {
  var a = this.recvMessage;
  if (null != a) {
    a.time = this.getTime();
    console.log("-> recvMessage", a);
    var b = null;
    if (a.errorMessage) {
      b = a.errorMessage, (a = a.request) && a.command && "open" === a.command && this.async(function() {
        this.connected = !1;
      }, null, 30), this.showError(this.mapSomeErrors(b)), console.error(b), a && a.room && this.removeChat(a.room);
    } else {
      if ("groupchat" == a.type ? (b = this.getNameFromJid(a.from), a.from = a.from.split("/")[1], b = this.chatHash[b]) : "chat" == a.type && ((b = this.chatHash[this.getNameFromJid(a.from)]) || (b = this.chatHash.main)), this.isEmpty(a.body) || (a.style = "background:#f8f8f8;", this.getMessageBoxTemplate().unshift("items", a)), b && a.chatState && (b.chatState = tr("chat.state_" + a.chatState)), b && "groupchat" === b.type && (b.chatState = ""), b && "mixedchat" === b.type && $(this.querySelector("#participant-" + 
      this.chatId)).val() != this.getNameAndDomainFromJid(a.from) && (b.chatState = ""), a.rosterEntries && (b = this.filterSingleChat(a.rosterEntries), b.sort(this.sortRosterEntries), this.rosterEntries = b), a.presence && (b = this.getNameFromJid(a.from), b = this.chatHash[b])) {
        b = this.getChatIndex(b), console.log("index:", b), this.set("chatList." + b + ".presence", a.presence), console.log("chat.presence:", this.chatList[b].presence);
      }
    }
  }
}, login:function(a) {
  a = this.querySelector("#loginForm").getData();
  if (!this.isEmpty(a.username)) {
    this.isEmpty(a.resource) || (this.resourceId = a.resource);
    this.loginData = a;
    Simpl4.Cache.setItem("chat.username", this.loginData.username);
    Simpl4.Cache.setItem("chat.password", this.loginData.password);
    Simpl4.Cache.setItem("chat.domain", this.loginData.domain);
    this.rosterEntries = [];
    this.chatId = "main";
    this.resetChatList();
    var b = {};
    this.camelWS ? (b.camelHeaders = JSON.stringify({xmppUsername:a.username, xmppPassword:a.password, xmppResourceId:this.resourceId}), b.closeCommandBody = JSON.stringify({command:"close"}), b.connectionKey = a.username + "/" + this.resourceId) : (b.username = a.username, b.password = a.password, b.resourceId = this.resourceId);
    this.$.websocket.openConnection(b, this.socketTimeoutCallback.bind(this));
  }
}, disconnect:function() {
  this.sendChatState("gone");
  this.async(function() {
    this.removeAllChat();
    this.$.websocket.closeConnection();
  }, null, 300);
}, socketTimeoutCallback:function() {
  this.async(function() {
    this.sendOpen();
    for (var a = 0; a < this.chatList.length; a++) {
      var b = this.chatList[a];
      "groupchat" === b.type && this.sendJoin(b);
    }
  }, null, 500);
}, connectedChanged:function() {
  !0 === this.connected ? (this.viewId = "chatView", this.sendOpen()) : this.viewId = "loginView";
  if (!0 === this.connected) {
    this.bindFocusListener(!0);
  } else {
    for (var a = 0; this.chatList && a < this.chatList.length; a++) {
      "groupchat" !== this.chatList[a].type && this.bindFocusListener(!1);
    }
  }
}, bindFocusListener:function(a) {
  this.async(function() {
    var b = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input");
    a ? ($(b).on("focus", this.chatEventListener.bind(this)), $(b).on("blur", this.chatEventListener.bind(this))) : ($(b).off("focus", this.chatEventListener), $(b).off("blur", this.chatEventListener));
  }, null, 100);
}, showJoinRoomForm:function() {
  this.viewId = "joinRoomView";
  simpl4.util.Rpc.rpcAsync({service:"xmpp", method:"getRooms", parameter:{serviceName:"conference"}, async:!0, context:this, failed:function(a) {
    console.error("showJoinRoomForm:", a);
  }, completed:function(a) {
    for (var b = [], c = 0; c < a.length; c++) {
      var d = {};
      d.name = a[c].name;
      d.description = a[c].description;
      b.push(d);
    }
    a = {room:b};
    this.querySelector("#joinRoomForm").setItems(a);
  }});
}, joinRoom:function(a) {
  var b = a.detail.data;
  this.viewId = "chatView";
  if ("cancel" != a.detail.xaction && null != b.room) {
    var c = {};
    c.id = b.room.length ? b.room[0].name : b.room.name;
    c.description = b.room.length ? b.room[0].description : b.room.description;
    this.chatHash[c.id] ? this.set("chatId", c.id) : (c.messages = [], c.type = "groupchat", this.addChat(c), this.async(function() {
      this.set("chatId", c.id);
      this.sendJoin();
    }, null, 300));
    this.$.chatTabId.selected = c.id;
  }
}, openSingleChat:function() {
  var a = $(this.querySelector("#participant-" + this.chatId)).val(), b = {};
  b.id = this.getNameFromJid(a);
  b.participant = a;
  b.type = "singlechat";
  this.addChat(b);
  this.bindFocusListener(!0);
  this.updateRoster();
  $(this.querySelector("#participant-" + this.chatId)).val(null);
  this.isCurrentParticipant = !1;
  try {
    this.set("chatId", b.id);
  } catch (c) {
  }
}, showLeaveRoomForm:function() {
  this.viewId = "leaveRoomView";
  for (var a = [], b = 0; b < this.chatList.length; b++) {
    "groupchat" === this.chatList[b].type && a.push({name:this.chatList[b].id, description:this.chatList[b].description});
  }
  this.async(function() {
    var b = this.querySelector("#leaveRoomForm");
    b.setItems({room:a});
    b.querySelector("simpl-form /deep/ xaction-button").innerHTML = '<iron-icon icon="launch"></iron-icon>' + tr("chat.leaveRoom");
  }, 30);
}, leaveRoom:function(a) {
  var b = this.querySelector("#leaveRoomForm").getData();
  this.viewId = "chatView";
  "cancel" != a.detail.xaction && null != b.room && (a = b.room[0].name, this.$.websocket.sendMessage({command:"leaveRoom", parameter:{room:a}}), this.removeChat(a));
}, showAddUserForm:function() {
  this.viewId = "addUserView";
}, showAddGroupForm:function() {
  this.viewId = "addGroupView";
}, addUser:function(a) {
  var b = this.querySelector("#addUserForm");
  if ("execute" != a.detail.xaction || 0 != b.validate()) {
    if (this.viewId = "chatView", "cancel" != a.detail.xaction && (a = b.getData(), !this.isEmpty(a.username))) {
      var b = this.loginData.domain, c = a.username;
      -1 != c.indexOf("@") || this.isEmpty(b) || (c = c + "@" + b);
      this.$.websocket.sendMessage({command:"addUser", parameter:{username:c, nickname:a.nickname}});
    }
  }
}, addGroup:function(a) {
  var b = this.querySelector("#addGroupForm");
  if ("execute" != a.detail.xaction || 0 != b.validate()) {
    this.viewId = "chatView", "cancel" != a.detail.xaction && (a = addUserForm.getData(), this.isEmpty(a.groupname) || this.$.websocket.sendMessage({command:"addGroup", parameter:{groupname:a.groupname}}));
  }
}, onMessageKeydown:function(a) {
  a.keyCode && 13 == a.keyCode && this.sendMessageInput();
}, chatEventListener:function(a) {
  var b = this.chatHash[this.chatId];
  if ("groupchat" !== b.type) {
    var c = a.type;
    "keyup" == c && 13 != a.keyCode && ((a = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input"), $(a).val() && 0 == b.isComposing) ? (b.isComposing = !0, this.checkPausingTimeout = setTimeout(this.checkPausing.bind(this), this.pausingTimeout), this.sendChatState("composing")) : $(a).val() || 1 != b.isComposing ? $(a).val() && 1 == b.isComposing && (clearTimeout(this.checkPausingTimeout), this.checkPausingTimeout = setTimeout(this.checkPausing.bind(this), this.pausingTimeout)) : 
    (b.isComposing = !1, this.sendChatState("active")));
    "focus" == c && (a = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input"), $(a).val() ? this.sendChatState("paused") : this.sendChatState("active"));
    "blur" == c && this.sendChatState("inactive");
  }
}, checkPausing:function() {
  var a = this.chatHash[this.chatId];
  a.isComposing && (this.sendChatState("paused"), a.isComposing = !1);
}, sendOpen:function(a) {
  var b = {command:"open", participant:"dummy"};
  this.async(function() {
    this.$.websocket.sendMessage(b);
  }, null, 20);
}, sendJoin:function(a) {
  null == a && (a = this.chatHash[this.chatId]);
  "groupchat" === a.type && this.$.websocket.sendMessage({body:"", from:this.loginData.username, room:a.id});
}, sendChatState:function(a) {
  var b = this.chatHash[this.chatId], c = b.participant || $(this.querySelector("#participant-" + b.id)).val();
  this.isEmpty(c) ? "mixedchat" === b.type && console.error("no participant selected") : this.$.websocket.sendMessage({command:"chatState", participant:c, parameter:{state:a}});
}, sortRosterEntries:function(a, b) {
  return a.username < b.username ? -1 : a.username > b.username ? 1 : 0;
}, getMessageBoxTemplate:function() {
  return this.querySelector("#messageBoxTemplate-" + this.chatHash[this.chatId].id);
}, showError:function(a) {
  this.errorMessage = a;
  this.$.toast_error.show();
}, getTime:function() {
  return "[" + moment().format(" HH:mm.ss") + "]";
}, chatIdChanged:function() {
  this.querySelector("#chatPages");
  this.chatHash && (this.currentChat = this.chatHash[this.chatId]);
}, getNameFromJid:function(a) {
  return -1 == a.indexOf("@") ? a : a.split("@")[0];
}, getNameAndDomainFromJid:function(a) {
  return -1 == a.indexOf("/") ? a : a.split("/")[0];
}, setCurrentParticipant:function(a) {
  var b = this.chatHash[this.chatId];
  $(this.querySelector("#participant-" + b.id)).val(a.target.dataset.username);
  this.isCurrentParticipant = !0;
  b.chatState = "";
}, filterSingleChat:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    this.chatHash[this.getNameFromJid(a[c].username)] || b.push(a[c]);
  }
  return b;
}, updateRoster:function() {
  this.rosterEntries = this.filterSingleChat(this.rosterEntries);
}, resetChatList:function() {
  this.arrayClear(this.chatList);
  var a = {id:"main", isComposing:!1, messages:[], type:"mixedchat"};
  this.currentChat = a;
  this.addChat(a);
}, removeAllChat:function() {
  this.splice("chatList", 1, this.chatList.length - 1);
  this.chatHash = this.toHash(this.chatList);
  this.set("chatId", "main");
}, removeChat:function(a) {
  for (var b = 0; b < this.chatList.length; b++) {
    if (a === this.chatList[b].id) {
      this.splice("chatList", b, 1);
      break;
    }
  }
  this.chatHash = this.toHash(this.chatList);
  this.set("chatId", "main");
}, addChat:function(a) {
  a.messages = [];
  a.presence = [];
  a.isComposing = !1;
  a.chatState = "";
  this.push("chatList", a);
  this.chatHash = this.toHash(this.chatList);
}, arrayClear:function(a) {
  0 != a.length && this.splice("chatList", 0, a.length);
}, getChatIndex:function(a) {
  for (var b = 0; b < this.chatList.length; b++) {
    if (a.id === this.chatList[b].id) {
      return b;
    }
  }
}, toHash:function(a) {
  for (var b = {}, c = 0; c < a.length; c++) {
    b[a[c].id] = a[c];
  }
  return b;
}, isChatType:function(a, b) {
  return a == b;
}, isView:function(a, b) {
  return a == b;
}, strcat:function(a, b) {
  return a + b;
}, isLang:function(a) {
  var b = Simpl4.Cache.getItem("lang");
  return a == b;
}, mapSomeErrors:function(a) {
  return 0 < a.indexOf("not-authorized") ? tr("chat.not-authorized") : 0 < a.indexOf("registration-required") ? tr("chat.registration-required") : a;
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}});
Polymer({is:"simpl-processcontroller", properties:{namespace:{type:String}, name:{type:String}, parameter:{type:String}}, observers:["nameChanged(namespace,name,parameter)"], behaviors:[LobiboxBehavior], ready:function() {
  this.panelBackgroundColor = "black";
  this.panelHeader = "";
  this.formName = null;
  console.log("ProcessController.ready");
}, attached:function() {
  console.log("ProcessController.attached:", this.namespace + "/" + this.name + "/" + this.paramObject);
  this.name && this.namespace && this.paramObject && this.startByName(this.namespace, this.name, this.paramObject);
}, isParamsOk:function(a, b) {
  return null != this.namespace && null != this.formName;
}, nameChanged:function() {
  var a = null;
  this.parameter && this.parameter.startsWith("{") && (a = JSON.parse(this.parameter));
  this.paramObject = a || {};
}, startByName:function(a, b, c) {
  this.namespace = a || simpl4.util.BaseManager.getNamespace();
  var d = this.getProcessDefinition(a, b);
  null == d ? this.alert("ProcessController.workflow(" + a + "," + b + ") not found") : (console.log("ProcessController:startByName" + a + "/" + b), this.start(d, c));
}, start:function(a, b, c) {
  this.processDefinition = a;
  this.processName = a.name;
  this.namespace = this.processDefinition.key.substring(0, this.processDefinition.key.indexOf("_"));
  console.log("Start:" + JSON.stringify(a, null, 2));
  console.log("startFormResourceKey:" + this.processDefinition.startFormResourceKey);
  this.processDefinition.startFormResourceKey ? this.showForm(null, c) : (a = b || {}, a.processDefinitionId = this.processDefinition.id, this.completeActivity(a, null, c));
}, showForm:function(a, b) {
  b && (this.finishCallback = b);
  var c = null, d = null, f = null;
  null == a ? (c = this.processDefinition.startFormResourceKey, this.namespace = this.processDefinition.key.substring(0, this.processDefinition.key.indexOf("_")), f = this.processName) : (c = a.formResourceKey, a.processName && (this.processName = a.processName), f = this.processName, d = a.name, this.namespace = a.processDefinitionKey.substring(0, a.processDefinitionKey.indexOf("-")));
  if (null == c) {
    this.handleExecuteButton(null, a, null, null, b);
  } else {
    var g = this.getFormName(c);
    console.log("{task,process}Name:" + d + "/" + f);
    console.log("formResourceKey:" + c);
    console.log("formName:" + g);
    console.log("namespace:" + this.namespace);
    var h = this;
    this.actionCallback = function(c) {
      console.log("ProcessController.actionCallback:", c.detail);
      var d = c.detail.xaction, f = c.detail.xid, g = c.detail.data, m = c.detail.formVar;
      c = c.detail.valid;
      if ("execute" == d) {
        if (!c) {
          Lobibox.notify("error", {delay:6000, icon:"vaadin-icons:exclamation", msg:tr("process.form_incomplete")});
          return;
        }
        h.handleExecuteButton(g, a, m, f, b);
      }
      "cancel" == d && h.finishCallback && h.finishCallback();
    };
    var m = {}, u = null;
    null != a ? (m = this.getProcessVariables(this.namespace, c, a.processInstanceId), u = this.getMappedFormValues(a.id, a.processInstanceId)) : m.__namespace = simpl4.util.BaseManager.getNamespace();
    this.panelHeader = d ? tr(f) + "/" + d : tr(f);
    this.variables = m;
    this.formName = "empty";
    this.async(function() {
      this.formName = g;
      console.log("formName:", g);
      this.async(function() {
        var a = this.querySelector("#formid");
        console.log("form:", a);
        a.setData(u);
      }, 300);
    }, 100);
  }
}, getFormName:function(a) {
  return -1 == a.indexOf(",") ? a : a.split(",")[0];
}, handleExecuteButton:function(a, b, c, d, f) {
  var g = {}, h = {};
  a && Object.keys(a).forEach(function(b, c) {
    b.match("^__") || (h[b] = a[b]);
  });
  null != d && (h.actionButton = d);
  null == b && (g.processDefinitionId = this.processDefinition.id);
  c && (g[this.removeSuffix(c)] = h);
  console.log("processVariables:" + JSON.stringify(g, null, 2));
  this.completeActivity(g, b, f);
}, removeSuffix:function(a) {
  return a.match(/.*\.form$/) ? a.substring(0, a.length - 5) : a;
}, getMappedFormValues:function(a, b) {
  var c = function(a) {
    this.alert("<div style='width:100%;overflow:auto'>" + a + "</div>");
  }.bind(this), d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("process:getTaskFormProperties", {executionId:b, taskId:a});
  } catch (f) {
    this.alert("ProcessController.getMappedFormValues:" + f);
    c.call(this, f);
    return;
  }
  return d && d.values ? (a = JSON.stringify(d.values), console.warn("values:" + a), d.values) : null;
}, getProcessVariables:function(a, b, c) {
  var d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("process:getVariables", {namespace:a, formId:b, executionId:c});
  } catch (f) {
    this.alert("ProcessController.getProcessVariables:" + f);
    return;
  }
  return d;
}, completeActivity:function(a, b, c) {
  JSON.stringify(a);
  var d = function(a) {
    var d = JSON.stringify(a);
    console.log("ret:" + d);
    d = a.id;
    b && (d = JSON.stringify(b), console.log("task:" + d), d = b.executionId);
    (d = this.getTasks(d)) && 0 < d.total ? this.showForm(d.data[0], c) : b ? this.finish(tr("processes.taskform.started") + " -> ID" + b.processInstanceId, c) : this.finish(tr("processes.startform.started") + " -> ID" + (b ? b.processInstanceId : a.id), c);
  }.bind(this), f = function(a) {
    console.log("ret:" + JSON.stringify(a));
    a = a.message ? a.message : a.toString();
    a = a.replace(/\|/g, "<br/>");
    a = a.replace(/Script.*groovy: [0-9]{0,4}:/g, "<br/><br/>");
    a = a.replace(/ for class: Script[0-9]{1,2}/g, "");
    a = a.replace(/Script[0-9]{1,2}/g, "");
    a = a.replace(/Application error 500:/g, "");
    a = a.replace(/:java.lang.RuntimeException/g, "");
    a = a.replace(/:Line:/g, "<br/>Line:");
    a = a.replace(/: {0,2}Line:/g, "<br/>Line:");
    a = simpl4.util.Text.explode(a, 100);
    a = "<b>" + tr("processes." + (null != b ? "taskform" : "startform") + ".notstarted") + ": </b><pre style='font-size:10px'>" + a + "</pre>";
    this.alert(a, "large");
    null != b && this.showForm(b, c);
  }.bind(this), g = null;
  if (null == b) {
    return g = {service:"process", method:"startProcessInstance", parameter:{namespace:this.namespace ? this.namespace : simpl4.util.BaseManager.getNamespace(), processDefinitionId:a.processDefinitionId, processDefinitionKey:a.processDefinitionKey, processDefinitionName:a.processDefinitionName, businessKey:a.businessKey, startParams:a}, async:!1, context:this, failed:f, completed:d}, simpl4.util.Rpc.rpcAsync(g);
  }
  this.completeTask(b.id, a, d, f);
}, completeTask:function(a, b, c, d) {
  var f = function(a) {
    if (a) {
      for (var b = "", c = 0; c < a.length; c++) {
        var d = a[c];
        if (d.time) {
          var f = new Date;
          f.setTime(d.time);
          var g = simpl4.util.BaseManager.getLanguage();
          d.message = d.message.replace("{0}", f.toString("de" == g ? "d.M.yyyy" : "M/d/yyyy"));
        }
        d.message && d.message.match(/^@/) && (d.message = tr(d.message.substring(1)));
        d.message && d.message.match(/^%/) && (d.message = tr(d.message.substring(1)));
        b = d.path ? b + (d.path + " : " + d.message + "<br />") : b + (d.message + "<br />");
      }
      this.alert(b);
    }
  }.bind(this), g = null;
  try {
    g = simpl4.util.Rpc.rpcSync("process:executeTaskOperation", {taskId:a, operation:"complete", startParams:b});
    console.error("RET:" + g.success);
    if (!0 === g.success) {
      return c.call(this, g), g;
    }
    f(g.errors);
  } catch (h) {
    d.call(this, h);
    return;
  }
  return g;
}, getTasks:function(a) {
  var b = null, c = simpl4.util.BaseManager.getUser();
  try {
    b = simpl4.util.Rpc.rpcSync("process:getTasks", {queryParams:{assignee:c, processInstanceId:a}, listParams:{size:1000}});
  } catch (d) {
    this.alert("ProcessController.getTasks:" + d);
    return;
  }
  return b;
}, getProcessDefinition:function(a, b) {
  var c = null;
  try {
    c = simpl4.util.Rpc.rpcSync("process:getProcessDefinitions", {namespace:a ? a : simpl4.util.BaseManager.getNamespace(), version:-1, key:b});
  } catch (d) {
    this.alert("ProcessController.getProcessDefinitions:" + d);
    return;
  }
  a = c.data;
  return 0 < a.length ? a[0] : null;
}, finish:function(a, b) {
  this.notify(a, "success", 8000);
  this.async(function() {
    b();
  }, 500);
}, alert:function(a, b) {
  Lobibox.notify("error", {size:b || "normal", delay:6000, icon:"vaadin-icons:exclamation", msg:a});
}});
Polymer({is:"simpl-processes", behaviors:[DataTablesBehavior, ModernizrBehavior, TranslationsBehavior], properties:{namespace:{type:String}}, observers:["selectionChanged(selection)"], attached:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.panelBackgroundColor = "black";
  this.panelHeader = tr("tr.menu.process_list");
  this.dtMeta = null;
  this.pageSelected = 0;
  this.action = tr("processexplorer.definition.start_workflow");
  this.currentProcess = null;
  this.meta = this.getMeta();
  this.data = this.getProcessDefinitions();
}, startProcess:function(a) {
  var b = this;
  this.$.processController.start(this.selection[0], {}, function() {
    b.pageSelected = 0;
  });
  this.async(function() {
    b.pageSelected = 1;
  }, 200);
}, selectionChanged:function() {
  this.currentProcess = this.selection[0].key;
}, getCurrentProcessDescription:function() {
  return this.action + " (" + this.currentProcess + ")";
}, getMeta:function() {
  var a = [], b = {data:"id", title:"Id"};
  a.push(b);
  b = {data:"key"};
  b.title = tr("tasks.table.processName");
  a.push(b);
  return a;
}, getProcessDefinitions:function() {
  var a = null, b = this.namespace || simpl4.util.BaseManager.getNamespace();
  try {
    a = simpl4.util.Rpc.rpcSync("process:getProcessDefinitions", {namespace:b, version:-1});
  } catch (c) {
    alert("ProcessDefinitions.getProcessDefinitions:" + c);
    return;
  }
  return a.data;
}});
Polymer({is:"simpl-tasks", behaviors:[DataTablesBehavior, StyleScopeBehavior, ModernizrBehavior, TranslationsBehavior], properties:{namespace:{type:String}}, observers:["taskListModeSelectedChanged(taskListModeSelected)", "selectionChanged(selection)"], ready:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.panelBackgroundColor = "black";
  this.panelHeader = tr("tasks.table.assigned");
  this.meta = null;
  this.action = tr("tasks.table.complete");
  this.currentTask = null;
  this.pageSelected = 0;
  channel.subscribe("route.changed", function(a) {
    "tasklist" == a.route && 0 == this.pageSelected && (console.debug("TaskList active:" + this.taskListModeSelected), this.taskListModeSelectedChanged(0 == this.taskListModeSelected ? 0 : 1));
  }.bind(this));
}, attached:function() {
  this.meta = this.getMeta();
  this.taskListModeSelected = 1;
}, startTask:function(a) {
  console.log("startTask:", this.selection[0]);
  a = this.selection[0];
  a.fromTaskList = !0;
  var b = this;
  this.$.processController.showForm(a, function() {
    b.async(function() {
      b.pageSelected = 0;
      b.taskListModeSelectedChanged(0 == this.taskListModeSelected ? 0 : 1);
    }, 50);
  });
  this.async(function() {
    b.pageSelected = 1;
  }, 200);
}, selectionChanged:function() {
  var a = this.selection[0];
  this.currentTask = a.processName + " / " + a.name;
}, taskListModeSelectedChanged:function(a) {
  this.action = 1 == a ? tr("tasks.task.complete") : tr("tasks.task.claim");
  this.panelHeader = 1 == a ? tr("tasks.table.assigned") : tr("tasks.table.not_assigned");
  this.data = this.getTasks(1 == a ? "assigned" : "notassigned");
  this.currentTask = null;
}, getCurrentTaskDescription:function() {
  return this.action + " (" + this.currentTask + ")";
}, getMeta:function() {
  var a = [], b = {data:"name"};
  b.title = tr("tasks.table.name");
  a.push(b);
  b = {data:"processName"};
  b.title = tr("tasks.table.processName");
  a.push(b);
  b = {data:"processTenantId"};
  b.title = tr("tasks.table.processCategory");
  a.push(b);
  b = {data:"id"};
  b.title = tr("tasks.table.taskid");
  a.push(b);
  b = {data:"processInstanceId"};
  b.title = tr("tasks.table.processInstanceId");
  a.push(b);
  b = {data:"description"};
  b.title = tr("tasks.table.description");
  a.push(b);
  b = {data:"createTime"};
  b.title = tr("tasks.table.time");
  a.push(b);
  return a;
}, getTasks:function(a) {
  this.userid = simpl4.util.BaseManager.getUser();
  try {
    var b = {assignee:this.userid, tenantId:this.namespace};
    "notassigned" == a && (b = {candidate:this.userid, tenantId:this.namespace});
    a = [];
    for (var c = simpl4.util.Rpc.rpcSync("process:getTasks", {queryParams:b, listParams:{size:1000}}).data, b = 0; b < c.length; b++) {
      var d = c[b];
      null == d.assignee ? (d.assigned = tr("tasks.table.not_assigned"), d.action = tr("tasks.table.claim")) : (d.assigned = d.assignee, d.action = tr("tasks.table.complete"));
      a.push(d);
    }
    return this.dataSet = a;
  } catch (f) {
    console.log("Tasks.getTasks:", f), alert("Tasks.getTasks:" + f);
  }
}});
DmnFieldBehavior = {behaviors:[Polymer.IronFormElementBehavior, Polymer.IronControlState], observers:["setValue(value)", "expressionValueChanged(expressionValue)"], attached:function() {
  this.appendItems();
}, focus:function() {
  this.$.expressionInput.focus();
}, appendItems:function() {
  for (var a = this.items, b = this.$.operationSelect; b.firstChild;) {
    b.removeChild(b.firstChild);
  }
  for (var c = 0; c < a.length; c++) {
    var d = a[c], f = document.createElement("option"), g = document.createTextNode(d.label);
    f.value = d.value;
    Polymer.dom(f).appendChild(g);
    Polymer.dom(b).appendChild(f);
  }
}, expressionValueChanged:function() {
  this.value || (this.value = {});
  this.value.expr = this.expressionValue;
}, operationValueChanged:function() {
  this.operationValue = this.$.operationSelect.value;
  this.value || (this.value = {});
  this.value.op = this.operationValue;
}, setValue:function(a) {
  a ? this.async(function() {
    this.$.operationSelect.value = this.getOp(a.op);
    this.expressionValue = a.expr;
  }, 10) : this.async(function() {
    this.$.operationSelect.value = this.getOp(null);
  }, 10);
}, getValue:function() {
  return {op:this.operationValue, expr:this.expressionValue};
}, getOp:function(a) {
  return a || this.items[0].value;
}};
Polymer({is:"dmn-string", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:"==~", label:"==~"}, {value:"startsWith", label:"startsWith"}, {value:"endsWith", label:"endsWith"}, {value:"contains", label:"contains"}, {value:"equalsIgnoreCase", label:"equalsIgnoreCase"}];
}});
Polymer({is:"dmn-integer", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:">", label:">"}, {value:"<", label:"<"}, {value:">=", label:">="}, {value:"<=", label:"<="}];
}});
Polymer({is:"dmn-date", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:">", label:">"}, {value:"<", label:"<"}];
}});
Polymer({is:"dmn-list", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"oneOf", label:"oneOf"}, {value:"notOneOf", label:"notOneOf"}];
}});
Polymer({is:"dmn-paramdialog", behaviors:[DialogBehavior, TranslationsBehavior], onTap:function() {
  if (this.$.formId.validate()) {
    console.log("val");
    var a = this.$.formId.getData();
    console.log("fire:" + this.type + "paramdialog-ok");
    this.fire(this.type + "paramdialog-ok", {index:this.index, data:a});
  }
}, close:function(a) {
  this.destroyDialog(this.$.dialogId);
}, open:function(a, b) {
  this.formname = "dmn" + a + ".form";
  this.type = a;
  this.index = b;
  this.icon = "input" === this.type ? "icons:file-download" : "icons:file-upload";
  this.$.formId.setData({});
  this.openDialog(this.$.dialogId, "inherit");
}});
Polymer({is:"dmn-testdialog", behaviors:[DialogBehavior, TranslationsBehavior], isBoolean:function(a) {
  return "boolean" == a.variableType;
}, isString:function(a) {
  return "boolean" != a.variableType && "date" != a.realType;
}, isDate:function(a) {
  return "date" == a.realType;
}, onTest:function() {
  for (var a = {}, b = 0; b < this.decision.columns.conditions.length; b++) {
    var c = this.decision.columns.conditions[b], d = this.inputArea.querySelector("#" + c.variableName).getValue(), f = null;
    "string" == c.variableType && (f = "");
    null == d && (d = f);
    a[c.variableName] = "date" == c.realType ? moment(d).valueOf() : "integer" == c.variableType ? parseInt(d) : "double" == c.variableType ? parseFloat(d) : d;
  }
  console.log("variables:", a);
  this.doTest(a);
}, doTest:function(a) {
  var b = {service:"dmn", method:"executeDecision", parameter:{namespace:"mdm", variables:a, decisionString:JSON.stringify(this.decision)}, async:!0, context:this, failed:function(a) {
    console.error("executeDecision:", a);
    if (null != a) {
      this.$.toastId.show(tr("error"), "error", "10000");
      try {
        0 < a.message.indexOf("MultipleCompilationErrors") ? this.testResult = a.message.substring(this.getPosition(a.message, ":", 5) + 1) : this.testResult = a.message.substring(this.getPosition(a.message, ":", 2) + 1);
      } catch (d) {
      }
    }
  }, completed:function(b) {
    console.log("executeDecision.ret:", b);
    this.$.toastId.show(tr("Test ok"), "success", "10000");
    b = JSON.stringify({vars:a, result:b}, null, 2);
    this.testResult = b.substr(2, b.length - 3);
  }};
  simpl4.util.Rpc.rpcAsync(b);
}, getPosition:function(a, b, c) {
  return a.split(b, c).join(b).length;
}, onClose:function() {
  this.destroyDialog(this.$.dialogId);
}, open:function(a) {
  this.decision = a;
  this.inputArea = this.$.inputAreaId;
  this.openDialog(this.$.dialogId, "inherit");
}});
(function() {
  var a = [].indexOf || function(a) {
    for (var b = 0, c = this.length; b < c; b++) {
      if (b in this && this[b] === a) {
        return b;
      }
    }
    return -1;
  };
  var b = function() {
    function b(a, c) {
      var d;
      this.config = a;
      this.actionStack = c;
      this.dirtyCells = [];
      this.dirtyRows = [];
      this.copiedGridChange = this.config.copiedGridChange;
      this.uniqueValueKey = this.config.uniqueValueKey;
      this.rowIndex = this.config.rowIndex;
      this.useFixedHeaders = this.config.useFixedHeaders;
      this.element = this.config.element;
      this.contextMenu = new b.ContextMenu(this);
      this.themeName = this.config.themeName;
      this.customTheme = this.config.themeTemplate;
      this.theme = new b.Theme(this.themeName, this.customTheme);
      this.lastDragOver = this.draggingRow = null;
      this.lastDragOverIsBeforeFirstRow = !1;
      this.lastClickCell = null;
      this.headers = [];
      this.rows = [];
      this.subtotalRows = [];
      this.cols = [];
      this.source = this.config.rows;
      this.redCells = [];
      this.activeCells = [];
      this.openCell = this.selectedCol = this.selectionEnd = this.selectionStart = this.copiedCells = null;
      this.state = "ready";
      this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      this.topOffset = this.config.topOffset ? this.config.topOffset : 0;
      if (this.config.custom) {
        a = this.config.custom;
        for (d in a) {
          c = a[d], d in this.config.custom && this.set(d, c);
        }
        delete this.config.custom;
      }
      this.config.initialize && this.init();
      this.actionStack || (this.actionStack = new b.ActionStack(this));
      this.config.selectedCell && ((d = this.getCell(this.config.selectedCell[0], this.config.selectedCell[1])) && d.makeActive(), this.config.selectedCell = void 0);
    }
    b.prototype.init = function() {
      this.config.beforeInit && this.config.beforeInit();
      b.Hook.prototype.initTableHooks(this);
      this.build();
      this.events();
      this.render();
      this.removeBrowserHighlighting();
      this.rowIndex || this.setRowIndexes();
      this.config.afterInit && this.config.afterInit();
    };
    b.prototype.setRowIndexes = function() {
      var a, b;
      if (!this.config.uniqueValueKey) {
        return !1;
      }
      var c = {};
      var h = this.config.uniqueValueKey;
      var m = this.source;
      var u = a = 0;
      for (b = m.length; a < b; u = ++a) {
        var r = m[u];
        c[u] = r[h];
      }
      return this.rowIndex = c;
    };
    b.prototype.removeBrowserHighlighting = function() {
      var a;
      var b = "-webkit-touch-callout -webkit-user-select -khtml-user-select -moz-user-select -ms-user-select user-select".split(" ");
      var c = [];
      var h = 0;
      for (a = b.length; h < a; h++) {
        var m = b[h];
        c.push(this.tableEl.style[m] = "none");
      }
      return c;
    };
    b.prototype.build = function() {
      var a, c;
      var g = document.createElement("tr");
      if (this.config.includeRowHandles) {
        var h = document.createElement("th");
        g.appendChild(h);
      }
      var m = this.config.cols;
      h = a = 0;
      for (c = m.length; a < c; h = ++a) {
        h = m[h], h = new b.Column(h, this), this.cols.push(h), g.appendChild(h.element);
      }
      this.thead = document.createElement("thead");
      var u = this;
      this.thead.ondragenter = function() {
        var a;
        u.lastDragOverIsBeforeFirstRow = !0;
        if (a = u.lastDragOver) {
          return a.element.style.borderBottom = a.oldBorderBottom, a.element.style.borderTop = u.theme.borders.dragBorderStyle;
        }
      };
      this.thead.ondragleave = function() {
        var a = u.rows[0];
        return a.element.style.borderTop = a.oldBorderTop;
      };
      this.thead.appendChild(g);
      g = document.createElement("tbody");
      m = this.source;
      h = a = 0;
      for (c = m.length; a < c; h = ++a) {
        h = m[h];
        switch(h.gridEditRowType) {
          case "static":
            h = new b.StaticRow(h, this);
            break;
          case "subtotal":
            h = new b.SubTotalRow(h, this);
            break;
          case "heading":
            h = new b.HeaderRow(h, this);
            break;
          case "custom":
            var r = h.customClassName || "GenericRow";
            h = new b[r](h, this);
            break;
          default:
            h = new b.GenericRow(h, this);
        }
        this.rows.push(h);
        g.appendChild(h.element);
      }
      h = document.createElement("table");
      b.Utilities.prototype.setAttributes(h, {id:"editable-grid", "class":this.config.tableClass});
      h.appendChild(this.thead);
      h.appendChild(g);
      this.tableEl = h;
      if (this.useFixedHeaders) {
        return this.element.style.overflowY = "scroll", b.Utilities.prototype.fixHeaders(this), window.addEventListener("resize", function() {
          return b.Utilities.prototype.fixHeaders(u);
        });
      }
    };
    b.prototype.rebuild = function(a) {
      var b;
      null == a && (a = null);
      this.contextMenu.hide();
      var c = Object.create(this.config);
      c.rowIndex = this.rowIndex;
      if (null !== a) {
        for (b in a) {
          c[b] = a[b];
        }
      }
      c.copiedGridChange = this.copiedGridChange;
      a = this.actionStack;
      this.destroy();
      return this.constructor(c, a);
    };
    b.prototype.hideControl = function() {
      if (this.openCell) {
        return this.openCell.edit(this.openCell.control.value);
      }
    };
    b.prototype.events = function() {
      var c = this;
      document.onkeydown = function(b) {
        var d;
        if (c.activeCell()) {
          var f = b.keyCode;
          var m = b.shiftKey;
          var u = b.ctrlKey;
          if ((d = b.metaKey) || u) {
            if (f && 91 !== f && 92 !== f && (d = c.contextMenu.actionCallbacks.byControl[f])) {
              return b.preventDefault(), c.contextMenu.execute(d, b);
            }
          } else {
            switch(f) {
              case 8:
                c.openCell || (b.preventDefault(), c["delete"]());
                break;
              case 9:
                return b.preventDefault(), m ? c.moveTo(c.previousCell()) : c.moveTo(c.nextCell());
              case 13:
                c.activeCell().onReturnKeyPress();
                break;
              case 16:
                break;
              case 32:
                c.openCell || (b.preventDefault(), c.activeCell().onSpaceKeyPress());
                break;
              case 37:
                c.moveTo(c.previousCell());
                break;
              case 38:
                c.moveTo(c.aboveCell());
                break;
              case 39:
                c.activeCell().isBeingEdited() || c.moveTo(c.nextCell());
                break;
              case 40:
                c.moveTo(c.belowCell());
                break;
              case 46:
                c.openCell || (b.preventDefault(), c["delete"]());
                break;
              default:
                return 0 <= a.call([96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], f) && (f -= 48), c.openCellAndPopulateInitialValue(m, f);
            }
          }
        }
      };
      window.onresize = function() {
        if (c.openCell) {
          return b.Utilities.prototype.setStyles(c.openCell.control, c.openCell.position());
        }
      };
      window.onscroll = function() {
        if (c.openCell) {
          return c.openCell.reposition();
        }
      };
      this.element.onscroll = function(a) {
        c.openCell && c.openCell.reposition();
        if (c.useFixedHeaders) {
          return b.Utilities.prototype.repositionFixedHeader(c);
        }
      };
      this.tableEl.oncontextmenu = function(a) {
        return !1;
      };
      document.oncontextmenu = function(a) {
        return c.contextMenu.element === a.target ? !1 : !0;
      };
      return document.onclick = function(a) {
        var d = c.firstActiveCell();
        c.isDescendant(a.target || c.contextMenu.isVisible()) || !1 !== (null != d && 0 <= Polymer.dom(a).path.indexOf(d.control)) || (null != d && d.isBeingEdited() && null != d && d.edit(null != d ? d.control.value : void 0), b.Utilities.prototype.clearActiveCells(c));
        return c.contextMenu.hide();
      };
    };
    b.prototype.render = function() {
      this.element.hasChildNodes() && (this.element = this.config.element || document.querySelectorAll("#gridedit")[0]);
      return this.element.appendChild(this.tableEl);
    };
    b.prototype.getCell = function(a, b) {
      try {
        return this.rows[a].cells[b];
      } catch (g) {
      }
    };
    b.prototype.set = function(a, b) {
      if (void 0 !== a) {
        return this.config[a] = b;
      }
    };
    b.prototype.activeCell = function() {
      return 1 < this.activeCells.length ? this.activeCells : this.activeCells[0];
    };
    b.prototype.firstActiveCell = function() {
      return this.activeCells[0];
    };
    b.prototype.nextCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.next() : void 0;
    };
    b.prototype.previousCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.previous() : void 0;
    };
    b.prototype.aboveCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.above() : void 0;
    };
    b.prototype.belowCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.below() : void 0;
    };
    b.prototype.moveTo = function(a, b) {
      var c;
      if (a) {
        void 0 === b && (b = a.table.firstActiveCell());
        var d = a.table.getDirection(b, a);
        a.beforeNavigateTo && (c = a.beforeNavigateTo(a, b, d));
        !1 !== c && (a.isVisible() || (d = a.table.activeCell().address[0], c = a.address[0], b = 1, c < d && (b = -1), window.scrollBy(0, (null != a ? a.position().height : NaN) * b)), a.makeActive());
      }
      return !1;
    };
    b.prototype.getDirection = function(a, b) {
      var c;
      var d = a.address[0];
      var f = b.address[0];
      var u = a.address[1];
      var r = b.address[1];
      d === f ? u > r ? c = "left" : u < r ? c = "right" : console.log("Cannot calculate direction going from cell " + a.address + " to cell " + b.address) : d > f ? c = "up" : d < f ? c = "down" : console.log("Cannot calculate direction going from cell " + a.address + " to cell " + b.address);
      return c;
    };
    b.prototype.edit = function(a, b) {
      null == b && (b = null);
      if (null !== b) {
        return null != a ? a.cellTypeObject.edit(b) : void 0;
      }
      a.cellTypeObject.edit();
      return !1;
    };
    b.prototype["delete"] = function() {
      var a;
      var b = this.activeCells;
      var c = 0;
      for (a = b.length; c < a; c++) {
        var h = b[c];
        h.editable && h.value("");
      }
      return !0;
    };
    b.prototype.clearActiveCells = function() {
      return b.Utilities.prototype.clearActiveCells(this);
    };
    b.prototype.setSelection = function() {
      var a, b, c, h, m;
      if (this.selectionStart && this.selectionEnd && this.selectionStart !== this.selectionEnd) {
        var u = this.activeCells;
        var r = 0;
        for (a = u.length; r < a; r++) {
          var n = u[r];
          n.showInactive();
        }
        this.activeCells = [];
        var v = function() {
          h = [];
          for (var a = b = this.selectionStart.address[0], c = this.selectionEnd.address[0]; b <= c ? a <= c : a >= c; b <= c ? a++ : a--) {
            h.push(a);
          }
          return h;
        }.apply(this);
        r = function() {
          m = [];
          for (var a = c = this.selectionStart.address[1], b = this.selectionEnd.address[1]; c <= b ? a <= b : a >= b; c <= b ? a++ : a--) {
            m.push(a);
          }
          return m;
        }.apply(this);
        var w = 0;
        for (a = v.length; w < a; w++) {
          var y = v[w];
          var q = 0;
          for (u = r.length; q < u; q++) {
            n = r[q], this.rows[y].cells[n].addToSelection();
          }
        }
      }
    };
    b.prototype.data = function() {
      var a, b;
      var c = [];
      var h = this.rows;
      var m = 0;
      for (a = h.length; m < a; m++) {
        var u = h[m];
        var r = [];
        var n = u.cells;
        var v = 0;
        for (b = n.length; v < b; v++) {
          u = n[v], r.push(u.value());
        }
        c.push(r);
      }
      return c;
    };
    b.prototype.repopulate = function() {
      var a, b;
      var c = this.rows;
      var h = [];
      var m = 0;
      for (b = c.length; m < b; m++) {
        var u = c[m];
        h.push(function() {
          var b;
          var c = u.cells;
          var d = [];
          var f = 0;
          for (b = c.length; f < b; f++) {
            a = c[f], d.push(a.value(a.source[a.valueKey] || a.col.defaultValue, !1));
          }
          return d;
        }());
      }
      return h;
    };
    b.prototype.destroy = function() {
      var a;
      this.useFixedHeaders && this.fixedHeader && this.fixedHeader.table && this.fixedHeader.table.parentNode && document.body.removeChild(this.fixedHeader.table);
      this.element.removeChild(this.tableEl);
      var b = [];
      for (a in this) {
        b.push(delete this[a]);
      }
      return b;
    };
    b.prototype.isDescendant = function(a) {
      for (a = a.parentNode; null != a;) {
        if (a === this.tableEl) {
          return !0;
        }
        a = a.parentNode;
      }
      return !1;
    };
    b.prototype.addToStack = function(a) {
      return this.actionStack.addAction(a);
    };
    b.prototype.undo = function() {
      return this.actionStack.undo();
    };
    b.prototype.redo = function() {
      return this.actionStack.redo();
    };
    b.prototype.moveRow = function(a, c, g) {
      null == g && (g = !0);
      var d = this.source[a];
      if (b.Hook.prototype.run(this, "beforeMoveRow", a, c)) {
        return this.source.splice(a, 1), this.source.splice(c, 0, d), g && this.addToStack({type:"move-row", oldIndex:a, newIndex:c}), this.rebuild({rows:this.source, initialize:!0, selectedCell:[c, 0]}), this.setDirtyRows(), b.Hook.prototype.run(this, "afterMoveRow", a, c);
      }
    };
    b.prototype.moveRows = function(a, c, g, h) {
      null == h && (h = !0);
      if (b.Hook.prototype.run(this, "beforeMoveRows", a, c)) {
        var d = a;
        var f = c;
        var r = a + g;
        if (c > a) {
          if (c < r) {
            this.clearActiveCells();
            return;
          }
          c = c - g + 1;
        } else {
          d = a + g - 1;
        }
        var n = this.source.splice(a, g);
        for (r = n.pop(); r;) {
          this.source.splice(c, 0, r), r = n.pop();
        }
        h && this.addToStack({type:"move-rows", modifiedRowToMoveIndex:d, modifiedNewIndex:c, numRows:g, originalRowToMoveIndex:a, originalNewIndex:f});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[c, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterMoveRows", a, c, g);
      }
    };
    b.prototype.addRow = function(a, c, g) {
      var d;
      null == c && (c = !0);
      null == g && (g = !1);
      if (b.Hook.prototype.run(this, "beforeAddRow", a, g)) {
        if (g) {
          var f = g;
        } else {
          f = {};
          var u = this.cols;
          var r = 0;
          for (d = u.length; r < d; r++) {
            var n = u[r];
            f[n.valueKey] = n.defaultValue || "";
          }
        }
        a || 0 === a ? this.source.splice(a, 0, f) : (a = this.source.length - 1, this.source.push(f));
        c && this.addToStack({type:"add-row", index:a, rowObject:g});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterAddRow", a, g);
      }
    };
    b.prototype.addRows = function(a, c, g) {
      var d, f, u;
      null == c && (c = !0);
      null == g && (g = []);
      if (b.Hook.prototype.run(this, "beforeAddRows", a, g)) {
        var r = d = 0;
        for (f = g.length; d < f; r = ++d) {
          var n = g[r];
          r = a + r;
          if (n) {
            var v = n;
          } else {
            v = {};
            var w = this.cols;
            var y = 0;
            for (u = w.length; y < u; y++) {
              n = w[y], v[n.valueKey] = n.defaultValue || "";
            }
          }
          r || 0 === r ? this.source.splice(r, 0, v) : this.source.push(v);
        }
        c && this.addToStack({type:"add-rows", index:a, rowObjects:g});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterAddRows", a, g);
      }
    };
    b.prototype.addScatteredRows = function(a) {
      var b;
      var c = Object.keys(a);
      c = c.sort();
      var d = 0;
      for (b = c.length; d < b; d++) {
        var m = c[d];
        var u = a[m];
        this.source.splice(m, 0, u);
      }
      this.rebuild({rows:this.source, initialize:!0, selectedCell:[m, 0]});
      return this.setDirtyRows();
    };
    b.prototype.insertBelow = function() {
      var a = this.contextMenu.getUpperLeftPasteCell();
      if (b.Hook.prototype.run(this, "beforeInsertBelow", a)) {
        return this.addRow(a.address[0] + 1), this.setDirtyRows(), b.Hook.prototype.run(this, "afterInsertBelow", a);
      }
    };
    b.prototype.insertAbove = function() {
      var a = this.contextMenu.getUpperLeftPasteCell();
      if (b.Hook.prototype.run(this, "beforeInsertAbove", a)) {
        return this.addRow(a.address[0]), this.setDirtyRows(), b.Hook.prototype.run(this, "afterInsertAbove", a);
      }
    };
    b.prototype.removeRow = function(a, c) {
      null == c && (c = !0);
      if (b.Hook.prototype.run(this, "beforeRemoveRow", a)) {
        var d = this.source[a];
        this.source.splice(a, 1);
        c && this.addToStack({type:"remove-row", index:a, rowObject:d});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterRemoveRow", a);
      }
    };
    b.prototype.removeRows = function(a, c) {
      var d;
      null == c && (c = !0);
      if (b.Hook.prototype.run(this, "beforeRemoveRows", a)) {
        a = a.sort(function(a, b) {
          return b - a;
        });
        var f = {};
        var m = 0;
        for (d = a.length; m < d; m++) {
          var u = a[m];
          var r = this.source[u];
          f[u] = r;
          this.source.splice(u, 1);
        }
        c && this.addToStack({type:"remove-rows", rowIndexes:a, rowObjects:f});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[u, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterRemoveRows", a);
      }
    };
    b.prototype.selectRow = function(a, c) {
      if (this.activeCell() && a) {
        var d = this.activeCells[0].address[0];
        var f = a.shiftKey;
        var m = a.ctrlKey;
        a = a.metaKey;
        m || a || b.Utilities.prototype.clearActiveCells(this);
        if (f) {
          if (0 > d - c) {
            f = this.rows.slice(d, +c + 1 || 9e9);
            a = [];
            m = 0;
            for (d = f.length; m < d; m++) {
              c = f[m], a.push(c.select());
            }
            return a;
          }
          f = this.rows.slice(c, +d + 1 || 9e9);
          a = [];
          m = 0;
          for (d = f.length; m < d; m++) {
            c = f[m], a.push(c.select());
          }
          return a;
        }
        c = this.rows[c];
        return c.select();
      }
      c = this.rows[c];
      return c.select();
    };
    b.prototype.calculateSubtotals = function() {
      var a;
      var b = this.subtotalRows;
      var c = [];
      var h = 0;
      for (a = b.length; h < a; h++) {
        var m = b[h];
        c.push(m.calculate());
      }
      return c;
    };
    b.prototype.openCellAndPopulateInitialValue = function(a, c) {
      if (!this.openCell) {
        return this.activeCell().onKeyPress(b.Utilities.prototype.valueFromKey(c, a));
      }
    };
    b.prototype.checkIfCellIsDirty = function(a) {
      var b = this.dirtyCells.indexOf(a);
      if (-1 === b) {
        if (a.isDirty()) {
          return this.dirtyCells.push(a);
        }
      } else {
        if (!a.isDirty()) {
          return this.dirtyCells.splice(b, 1);
        }
      }
    };
    b.prototype.setDirtyRows = function() {
      var a;
      if (!this.config.uniqueValueKey) {
        return !1;
      }
      this.dirtyRows = [];
      var b = this.uniqueValueKey;
      var c = this.rowIndex;
      var h = [];
      for (a in c) {
        var m = c[a];
        m !== this.source[a][b] ? h.push(this.dirtyRows.push(a)) : h.push(void 0);
      }
      return h;
    };
    b.prototype.isDirty = function() {
      return 0 < this.dirtyRows.length || 0 < this.dirtyCells.length;
    };
    b.prototype.addUndoAction = function(a, b) {
      return this.actionStack.addUndo(a, b);
    };
    b.prototype.addRedoAction = function(a, b) {
      return this.actionStack.addRedo(a, b);
    };
    return b;
  }();
  ("undefined" !== typeof exports && null !== exports ? exports : window).GridEdit = b;
}).call(this);
(function() {
  GridEdit.ActionStack = function() {
    function a(a) {
      this.table = a;
      this.userDefinedActions = {undo:{}, redo:{}};
      this.index = -1;
      this.actions = [];
    }
    a.prototype.getCell = function(a) {
      return this.table.getCell(a.address[0], a.address[1]);
    };
    a.prototype.addAction = function(a) {
      0 < this.actions.length && this.index < this.actions.length - 1 && (this.actions = this.actions.splice(0, this.index + 1));
      this.actions.push(a);
      return this.index++;
    };
    a.prototype.addUndo = function(a, c) {
      return this.userDefinedActions.undo[a] = c;
    };
    a.prototype.addRedo = function(a, c) {
      return this.userDefinedActions.redo[a] = c;
    };
    a.prototype.undo = function() {
      var a, c;
      if (-1 < this.index) {
        this.index--;
        var d = this.actions[this.index + 1];
        switch(d.type) {
          case "cell-edit":
            var f = this.getCell(d);
            f.value(d.oldValue, !1);
            break;
          case "cut":
            d.grid.undo(!1, !1);
            break;
          case "paste-pasteGrid":
            d.pasteGrid.undo(d.x, d.y);
            break;
          case "paste-copyGrid":
            d.grid.undo(d.x, d.y);
            break;
          case "fill":
            d.grid.undo(!1, !1);
            break;
          case "add-row":
            this.table.removeRow(d.index, !1);
            break;
          case "remove-row":
            this.table.addRow(d.index, !1, d.rowObject);
            break;
          case "move-row":
            this.table.moveRow(d.newIndex, d.oldIndex, !1);
            break;
          case "add-rows":
            var g = [];
            f = a = 0;
            for (c = d.rowObjects.length; 0 <= c ? a < c : a > c; f = 0 <= c ? ++a : --a) {
              g.push(f + d.index);
            }
            this.table.removeRows(g, !1);
            break;
          case "remove-rows":
            this.table.addScatteredRows(d.rowObjects);
            break;
          case "move-rows":
            this.table.moveRows(d.modifiedNewIndex, d.modifiedRowToMoveIndex, d.numRows, !1);
            break;
          default:
            return this.userDefinedActions.undo[d.type](d);
        }
      }
    };
    a.prototype.redo = function() {
      if (this.index < this.actions.length - 1) {
        this.index++;
        var a = this.actions[this.index];
        switch(a.type) {
          case "cell-edit":
            var c = this.table.getCell(a.address[0], a.address[1]);
            c.value(a.newValue, !1);
            break;
          case "cut":
            a.grid.apply(!1, !1);
            break;
          case "paste-pasteGrid":
            a.grid.applyTo(a.pasteGrid);
            break;
          case "paste-copyGrid":
            a.grid.apply(a.x, a.y);
            break;
          case "fill":
            a.grid.apply(!1, !1);
            break;
          case "add-row":
            this.table.addRow(a.index, !1, a.rowObject);
            break;
          case "remove-row":
            this.table.removeRow(a.index, !1);
            break;
          case "move-row":
            this.table.moveRow(a.oldIndex, a.newIndex, !1);
            break;
          case "add-rows":
            this.table.addRows(a.index, !1, a.rowObjects);
            break;
          case "remove-rows":
            this.table.removeRows(a.rowIndexes, !1);
            break;
          case "move-rows":
            this.table.moveRows(a.originalRowToMoveIndex, a.originalNewIndex, a.numRows, !1);
            break;
          default:
            return this.userDefinedActions.redo[a.type](a);
        }
      }
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.ContextMenu = function() {
    function a(a) {
      var b;
      this.table = a;
      this.active = !1 !== this.table.config.includeContextMenu;
      this.userDefinedActions = this.table.config.contextMenuItems;
      this.userDefinedOrder = this.table.config.contextMenuOrder;
      a = /Mac/.test(navigator.platform) ? "Cmd" : "Ctrl";
      this.actionNodes = {};
      this.actionCallbacks = {byName:{}, byControl:{}};
      this.borderedCells = [];
      this.defaultActions = {cut:{name:"Cut", shortCut:a + "+X", callback:this.cut}, copy:{name:"Copy", shortCut:a + "+C", callback:this.copy}, paste:{name:"Paste", shortCut:a + "+V", callback:this.paste}, undo:{name:"Undo", shortCut:a + "+Z", callback:this.undo}, redo:{name:"Redo", shortCut:a + "+Y", callback:this.redo}, fill:{name:"Fill", shortCut:"", hasDivider:!0, callback:this.fill}, selectAll:{name:"Select All", shortCut:a + "+A", callback:this.selectAll}, insertBelow:{name:"Insert Row Below", 
      shortCut:"", callback:this.insertBelow}, insertAbove:{name:"Insert Row Above", shortCut:"", callback:this.insertAbove}, removeRow:{name:"Remove Row(s)", shortCut:"", callback:this.removeRow}};
      this.element = document.createElement("div");
      this.element.id = "gridedit-context-menu";
      this.element.style.position = "fixed";
      this.element.style.zIndex = "1040";
      this.menu = document.createElement("ul");
      GridEdit.Utilities.prototype.setAttributes(this.menu, {"class":"dmn-dropdown-menu", role:"menu", "aria-labelledby":"aria-labelledby", style:"display:block;position:static;margin-bottom:5px;"});
      if (this.active) {
        if (this.userDefinedOrder) {
          var d = this.userDefinedOrder;
          var f = 0;
          for (b = d.length; f < b; f++) {
            var g = d[f];
            (a = this.userDefinedActions ? this.userDefinedActions[g] || this.defaultActions[g] : this.defaultActions[g]) && this.addAction(a);
          }
        } else {
          f = this.defaultActions;
          for (g in f) {
            a = f[g], this.userDefinedActions && (this.userDefinedActions[g] || !1 === this.userDefinedActions[g]) || this.addAction(a);
          }
          f = this.userDefinedActions;
          for (g in f) {
            a = f[g], !1 !== this.userDefinedActions[g] && this.addAction(a);
          }
        }
      }
      this.element.appendChild(this.menu);
      this.events(this);
      GridEdit.Hook.prototype.initContextMenuHooks(this);
      this;
    }
    a.prototype.addDivider = function() {
      var a = document.createElement("li");
      GridEdit.Utilities.prototype.setAttributes(a, {"class":"divider"});
      return this.menu.appendChild(a);
    };
    a.prototype.addAction = function(a) {
      var b = document.createElement("li");
      b.setAttribute("name", a.name);
      document.createElement("div");
      var d = document.createElement("span");
      d.textContent = a.shortCut;
      GridEdit.Utilities.prototype.setAttributes(d, {style:"float: right !important;"});
      var f = document.createElement("a");
      f.textContent = a.name;
      f.setAttribute("name", a.name);
      GridEdit.Utilities.prototype.setAttributes(f, {"class":"enabled", tabIndex:"-1"});
      a.hasDivider && this.addDivider();
      f.appendChild(d);
      b.appendChild(f);
      this.actionNodes[a.name] = b;
      this.actionCallbacks.byName[a.name] = a.callback;
      (f = a.shortCut) && /(ctrl|cmd)/i.test(f) && (f = f.split("+")[1], f = f.charCodeAt(0), this.actionCallbacks.byControl[f] = a.callback);
      return this.menu.appendChild(b);
    };
    a.prototype.show = function(a, c, d) {
      this.cell = d;
      if (this.active) {
        this.cell && !this.cell.isActive() && this.cell.makeActive();
        this.cell && (this.cells = this.cell.table.activeCells);
        GridEdit.Utilities.prototype.setStyles(this.element, {left:a, top:c});
        document.body.appendChild(this.element);
        var b = this.element;
        setTimeout(function() {
          var a = b.getBoundingClientRect();
          var c = GridEdit.Utilities.prototype.getScreenDimensions();
          var d = c.height > a.height;
          var f = a.bottom > c.height;
          var r = 0 > a.top;
          var n = c.width > a.width;
          var v = a.right > c.width;
          var w = 0 > a.left;
          d ? (b.style.overflowY = "hidden", b.style.height = "auto", f && (f = a.top - (a.bottom - c.height), b.style.top = f + "px"), r && (r = a.bottom + Math.abs(a.top), b.style.bottom = r + "px")) : (b.style.top = 0, b.style.height = c.height + "px", b.style.overflowY = "scroll");
          if (n) {
            if (b.style.overflowX = "hidden", b.style.width = "auto", v && (v = a.left - (a.right - c.width), b.style.left = v + "px"), w) {
              return w = a.right + Math.abs(a.left), b.style.right = w + "px";
            }
          } else {
            return b.style.left = 0, b.style.width = c.width + "px", b.style.overflowX = "scroll";
          }
        }, 100);
        return !1;
      }
    };
    a.prototype.hide = function() {
      if (this.isVisible()) {
        return document.body.removeChild(this.element);
      }
    };
    a.prototype.isVisible = function() {
      return null != this.element.parentNode;
    };
    a.prototype.getTargetPasteCell = function() {
      return this.table.activeCells.sort(this.sortFunc)[0];
    };
    a.prototype.sortFunc = function(a, c) {
      return a.address[0] - c.address[0];
    };
    a.prototype.getUpperLeftPasteCell = function() {
      var a;
      var c = this.table.activeCells;
      var d = c[0];
      var f = 0;
      for (a = c.length; f < a; f++) {
        var g = c[f];
        var h = g.address[0];
        var m = g.address[1];
        h < d.address[0] ? d = g : h === d.address[0] && m < d.address[1] && (d = g);
      }
      return d;
    };
    a.prototype.displayBorders = function() {
      if (this.table.copiedGridChange) {
        return this.table.copiedGridChange.displayBorders();
      }
    };
    a.prototype.hideBorders = function() {
      if (this.table.copiedGridChange) {
        return this.table.copiedGridChange.removeBorders();
      }
    };
    a.prototype.cut = function(a, c) {
      var b = c.contextMenu;
      b.hideBorders();
      c.copiedGridChange = new GridEdit.GridChange(c.activeCells);
      a = new GridEdit.GridChange(c.activeCells, "ge-blank");
      a.apply(!1, !1);
      c.addToStack({type:"cut", grid:a});
      b.displayBorders();
      return b.hide();
    };
    a.prototype.copy = function(a, c) {
      a = c.contextMenu;
      c.copiedGridChange = new GridEdit.GridChange(c.activeCells);
      a.displayBorders();
      return a.hide();
    };
    a.prototype.paste = function(a, c) {
      a = c.contextMenu;
      a.hide();
      var b = a.getUpperLeftPasteCell();
      a = c.copiedGridChange;
      if (b.editable && a) {
        var f = new GridEdit.GridChange(c.activeCells);
        f.copyValues();
        var g = a.applyTo(f);
        var h = b.address[0];
        b = b.address[1];
        return "pasteGrid" === g ? c.addToStack({type:"paste-pasteGrid", grid:a, pasteGrid:f, x:h, y:b}) : c.addToStack({type:"paste-copyGrid", grid:a, x:h, y:b});
      }
    };
    a.prototype.fill = function(a, c) {
      a = c.contextMenu;
      var b = a.getUpperLeftPasteCell().value();
      b = new GridEdit.GridChange(c.activeCells, b);
      b.apply(!1, !1);
      c.addToStack({type:"fill", grid:b});
      return a.hide();
    };
    a.prototype.selectAll = function(a, c) {
      c.clearActiveCells();
      return setTimeout(function() {
        var a;
        var b = c.rows;
        var g = [];
        var h = 0;
        for (a = b.length; h < a; h++) {
          var m = b[h];
          g.push(m.select());
        }
        return g;
      }, 100);
    };
    a.prototype.insertBelow = function(a, c) {
      return c.insertBelow();
    };
    a.prototype.insertAbove = function(a, c) {
      return c.insertAbove();
    };
    a.prototype.removeRow = function(a, c) {
      var b;
      var f = new GridEdit.GridChange(c.activeCells);
      a = {};
      var g = f.cells;
      var h = 0;
      for (b = g.length; h < b; h++) {
        f = g[h], a[f.address[0]] = !0;
      }
      return c.removeRows(Object.keys(a));
    };
    a.prototype.undo = function(a, c) {
      return c.undo();
    };
    a.prototype.redo = function(a, c) {
      return c.redo();
    };
    a.prototype.toggle = function(a) {
      a = this.actionNodes[a].classList;
      a.toggle("enabled");
      return a.toggle("disabled");
    };
    a.prototype.execute = function(a, c) {
      this.table.openCell && this.table.openCell.hideControl();
      if (GridEdit.Hook.prototype.run(this, "beforeContextMenuAction", c, this.table)) {
        a(c, this.table);
        var b = this.table;
        setTimeout(function() {
          if (b.useFixedHeaders) {
            return GridEdit.Utilities.prototype.fixHeaders(b);
          }
        }, 100);
        return GridEdit.Hook.prototype.run(this, "afterContextMenuAction", c, this.table);
      }
    };
    a.prototype.events = function(a) {
      return this.element.onclick = function(b) {
        var c = b.target.getAttribute("name");
        return a.execute(a.actionCallbacks.byName[c], b);
      };
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Utilities = function() {
    function a() {
    }
    a.prototype.setAttributes = function(a, c) {
      var b, f;
      var g = [];
      for (b in c) {
        (f = c[b]) ? g.push(a.setAttribute(b, f)) : g.push(void 0);
      }
      return g;
    };
    a.prototype.setStyles = function(a, c) {
      var b;
      var f = [];
      for (b in c) {
        var g = c[b];
        f.push(a.style[b] = g + "px");
      }
      return f;
    };
    a.prototype.clearActiveCells = function(a) {
      var b, d;
      var f = a.redCells;
      var g = a.activeCells;
      a.openCell && a.openCell.edit(a.openCell.control.value);
      if (0 < f.length) {
        var h = b = 0;
        for (d = f.length; b < d; h = ++b) {
          h = f[h], null != h && h.makeInactive();
        }
        a.redCells = [];
      }
      if (0 < g.length) {
        h = b = 0;
        for (d = g.length; b < d; h = ++b) {
          h = g[h], null != h && h.makeInactive(), null != h && h.hideControl();
        }
        a.activeCells = [];
      }
      a.selectionStart = null;
      a.selectionEnd = null;
      a.contextMenu.hide();
      if (a.selectedCol) {
        return a.selectedCol.makeInactive();
      }
    };
    a.prototype.capitalize = function(a) {
      return a.toLowerCase().replace(/\b./g, function(a) {
        return a.toUpperCase();
      });
    };
    a.prototype.valueFromKey = function(a, c) {
      a = String.fromCharCode(a);
      return c ? a : a.toLowerCase();
    };
    a.prototype.getScreenDimensions = function() {
      var a = window;
      var c = document;
      var d = c.documentElement;
      c = c.getElementsByTagName("body")[0];
      return {width:a.innerWidth || d.clientWidth || c.clientWidth, height:a.innerHeight || d.clientHeight || c.clientHeight};
    };
    a.prototype.repositionFixedHeader = function(a) {
      var b;
      if (b = a.fixedHeader) {
        if (b = b.table) {
          var d = document.documentElement;
          d = (window.pageXOffset || d.scrollLeft) - (d.clientLeft || 0);
          a = a.thead;
          a = a.getBoundingClientRect();
          return b.style.left = a.left + d + "px";
        }
      }
    };
    a.prototype.fixHeaders = function(a) {
      clearTimeout(this.fixHeadersBuffer);
      return this.fixHeadersBuffer = setTimeout(function() {
        var b, d, f;
        var g = a.config.includeRowHandles ? 1 : 0;
        var h = a.thead;
        var m = h.getElementsByTagName("th");
        if (a.fixedHeader) {
          (b = a.fixedHeader.table) && b.parentNode && a.fixedHeader.table.parentNode.removeChild(b), b = a.fixedHeader.backgroundColor;
        } else {
          if (b = window.getComputedStyle(h).backgroundColor, "rgba(0, 0, 0, 0)" === b || "transparent" === b) {
            b = "white";
          }
        }
        var u = document.documentElement;
        var r = (window.pageXOffset || u.scrollLeft) - (u.clientLeft || 0);
        var n = (window.pageYOffset || u.scrollTop) - (u.clientTop || 0);
        u = a.element;
        var v = u.scrollLeft || 0;
        var w = u.scrollTop || 0;
        var y = h.getBoundingClientRect();
        u = document.createElement("table");
        u.className = a.tableEl.className + " ge-fixed-table-header";
        u.style.position = "absolute";
        u.style.top = y.top + n + w + "px";
        u.style.left = y.left + r + v + "px";
        u.style.width = y.width + "px";
        u.style.zIndex = 1039;
        u.style.pointerEvents = "none";
        r = document.createElement("thead");
        r.className = h.className;
        r.ondragenter = h.ondragenter;
        r.ondragleave = h.ondragleave;
        n = document.createElement("tr");
        var q = y = w = 0;
        for (f = m.length; y < f; q = ++y) {
          var l = m[q];
          h = l.getBoundingClientRect();
          v = document.createElement("th");
          v.innerHTML = l.innerHTML;
          v.className = l.className;
          v.style.position = "absolute";
          v.style.minWidth = h.width + "px";
          v.style.maxWidth = h.width + "px";
          v.style.minHeight = h.height + "px";
          v.style.maxHeight = h.height + "px";
          v.style.left = w + "px";
          v.style.backgroundColor = b;
          v.setAttribute("col-id", q - g);
          v.onclick = function(b) {
            b = this.getAttribute("col-id");
            var c = a.cols[b];
            GridEdit.Utilities.prototype.clearActiveCells(a);
            return setTimeout(function() {
              var a;
              c.makeActive();
              var b = c.cells;
              var d = [];
              var f = 0;
              for (a = b.length; f < a; f++) {
                var g = b[f];
                d.push(g.addToSelection());
              }
              return d;
            }, 0);
          };
          if (l = a.cols[q - g]) {
            for (d in q = l.headerStyle ? l.headerStyle : l.style, q) {
              l = q[d], v.style[d] = l;
            }
          }
          w += h.width;
          n.appendChild(v);
        }
        r.appendChild(n);
        u.appendChild(r);
        document.body.appendChild(u);
        return a.fixedHeader = {table:u, backgroundColor:b};
      }, 100);
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Column = function() {
    function a(a, c) {
      var b;
      this.attributes = a;
      this.table = c;
      this.id = this.index = this.table.cols.length;
      this.defaultValue = this.attributes.defaultValue;
      this.cellClass = this.attributes.cellClass;
      this.cells = [];
      this.element = document.createElement("th");
      this.textNode = document.createTextNode(this.attributes.label);
      this.element.appendChild(this.textNode);
      var f = this.attributes.format;
      this.format = function(a) {
        return f ? f(a) : a;
      };
      a = this.attributes;
      for (b in a) {
        c = a[b], this[b] = c;
      }
      delete this.attributes;
      this.applyStyle();
      this.events();
    }
    a.prototype.applyStyle = function() {
      var a;
      if (this.headerStyle) {
        var c = [];
        for (a in this.headerStyle) {
          c.push(this.element.style[a] = this.headerStyle[a]);
        }
        return c;
      }
      c = [];
      for (a in this.style) {
        c.push(this.element.style[a] = this.style[a]);
      }
      return c;
    };
    a.prototype.next = function() {
      return this.table.cols[this.index + 1];
    };
    a.prototype.previous = function() {
      return this.table.cols[this.index - 1];
    };
    a.prototype.makeActive = function() {
      this.element.classList.add("active");
      return this.table.selectedCol = this;
    };
    a.prototype.makeInactive = function() {
      this.element.classList.remove("active");
      return this.table.selectedCol = null;
    };
    a.prototype.events = function() {
      var a = this;
      var c = a.table;
      this.element.onclick = function(b) {
        var d;
        GridEdit.Utilities.prototype.clearActiveCells(c);
        a.makeActive();
        var g = a.cells;
        var h = [];
        var m = 0;
        for (d = g.length; m < d; m++) {
          b = g[m], h.push(b.addToSelection());
        }
        return h;
      };
      return this.element.onmousedown = function(b) {
        if (3 === b.which) {
          c.contextMenu.show(b.x, b.y, a.cells[0]);
        } else {
          return !1;
        }
      };
    };
    return a;
  }();
}).call(this);
(function() {
  var a = function(a, d) {
    function c() {
      this.constructor = a;
    }
    for (var g in d) {
      b.call(d, g) && (a[g] = d[g]);
    }
    c.prototype = d.prototype;
    a.prototype = new c;
    a.__super__ = d.prototype;
    return a;
  }, b = {}.hasOwnProperty;
  GridEdit.Row = function() {
    function a(a, b) {
      this.attributes = a;
      this.table = b;
      this.id = this.table.rows.length;
      this.cells = [];
      this.index = this.table.rows.length;
      this.element = document.createElement("tr");
      if (this.cssClass = this.attributes.cssClass) {
        this.element.className = this.cssClass;
      }
      this.oldBorderBottom = this.element.style.borderBottom;
      this.oldBorderTop = this.element.style.borderTop;
      this.type = this.attributes.gridEditRowType;
      this.alwaysPristine = !1;
      var c = this.table;
      var d = this;
      this.element.ondragenter = function(a) {
        c.lastDragOverIsBeforeFirstRow = !1;
        if (a = c.lastDragOver) {
          if (0 === d.index || a.index !== d.index) {
            a.element.style.borderBottom = d.oldBorderBottom, d.element.style.borderBottom = c.theme.borders.dragBorderStyle;
          }
        } else {
          d.element.style.borderBottom = c.theme.borders.dragBorderStyle;
        }
        return c.lastDragOver = d;
      };
      this.includeRowHandles = this.table.config.includeRowHandles;
      GridEdit.Utilities.prototype.setAttributes(this.element, {id:"row-" + this.id});
    }
    a.prototype.createCell = function(a) {
      var b = this.table.cols[this.cells.length].type;
      c;
      switch(b) {
        case "string":
          var c = new GridEdit.StringCell(a, this);
          break;
        case "dmn-string":
          c = new GridEdit.DMNStringCell(a, this, "dmn-string");
          break;
        case "dmn-integer":
          c = new GridEdit.DMNStringCell(a, this, "dmn-integer");
          break;
        case "dmn-double":
          c = new GridEdit.DMNStringCell(a, this, "dmn-integer");
          break;
        case "dmn-date":
          c = new GridEdit.DMNStringCell(a, this, "dmn-date");
          break;
        case "dmn-list":
          c = new GridEdit.DMNStringCell(a, this, "dmn-list");
          break;
        case "number":
          c = new GridEdit.NumberCell(a, this);
          break;
        case "date":
          c = new GridEdit.DateCell(a, this);
          break;
        case "html":
          c = new GridEdit.HTMLCell(a, this);
          break;
        case "select":
          c = new GridEdit.SelectCell(a, this);
          break;
        case "textarea":
          c = new GridEdit.TextAreaCell(a, this);
          break;
        case "checkbox":
          c = new GridEdit.CheckBoxCell(a, this);
          break;
        default:
          c = new GridEdit.GenericCell(a, this);
      }
      return c;
    };
    a.prototype.below = function() {
      return this.table.rows[this.index + 1];
    };
    a.prototype.above = function() {
      return this.table.rows[this.index - 1];
    };
    a.prototype.select = function() {
      var a;
      var b = this.cells;
      var c = [];
      var h = 0;
      for (a = b.length; h < a; h++) {
        var m = b[h];
        c.push(m.addToSelection());
      }
      return c;
    };
    a.prototype.afterEdit = function() {
      return this.table.calculateSubtotals();
    };
    a.prototype.addHandle = function() {
      if (this.includeRowHandles) {
        var a = new GridEdit.HandleCell(this);
        return this.element.appendChild(a.element);
      }
    };
    return a;
  }();
  GridEdit.GenericRow = function(b) {
    function c(a, b) {
      var d, f;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.editable = !0;
      this.addHandle();
      var g = this.table.cols;
      var r = d = 0;
      for (f = g.length; d < f; r = ++d) {
        var n = g[r];
        n = this.createCell(this.attributes[n.valueKey]);
        this.cells.push(n);
        this.table.cols[r].cells.push(n);
        this.element.appendChild(n.element);
      }
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
  GridEdit.StaticRow = function(b) {
    function c(a, b) {
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.addHandle();
      this.editable = this.attributes.editable = !1;
      this.element.innerHTML = this.attributes.html;
      this.type = "static";
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
  GridEdit.SubTotalRow = function(b) {
    function c(a, b) {
      var d, f;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.subtotalColumns = {};
      this.labels = this.attributes.labels;
      this.running = this.attributes.running;
      this.alwaysPristine = !0;
      this.addHandle();
      var g = this.table.cols;
      var r = d = 0;
      for (f = g.length; d < f; r = ++d) {
        var n = g[r];
        var v = new GridEdit.GenericCell("", this);
        v.editable = !1;
        if (this.labels) {
          var w = this.labels[n.valueKey];
          v.element.innerHTML = w || "";
        }
        this.cells.push(v);
        this.table.cols[r].cells.push(v);
        this.element.appendChild(v.element);
        this.attributes.subtotal[n.valueKey] && (this.subtotalColumns[n.valueKey] = r);
      }
      this.table.subtotalRows.push(this);
      this.calculate();
    }
    a(c, b);
    c.prototype.calculate = function() {
      var a, b;
      var c = -1;
      if (!this.running) {
        var d = this.table.subtotalRows;
        var u = 0;
        for (b = d.length; u < b; u++) {
          var r = d[u];
          r = r.index;
          r < this.index && r > c && (c = r);
        }
      }
      r = this.subtotalColumns;
      var n = [];
      for (a in r) {
        u = r[a];
        var v = 0;
        var w = this.table.rows;
        b = 0;
        for (d = w.length; b < d; b++) {
          var y = w[b];
          if (y.index > c) {
            if (y.index === this.index) {
              break;
            }
            "subtotal" !== y.type && "header" !== y.type && (y = y.cells[u]) && (v += Number(y.value()));
          }
        }
        n.push(this.cells[u].value(v, !1));
      }
      return n;
    };
    c.prototype.afterEdit = function() {
    };
    return c;
  }(GridEdit.Row);
  GridEdit.HeaderRow = function(b) {
    function c(a, b) {
      var d, f;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.editable = !0;
      this.addHandle();
      var g = this.table.cols;
      var r = d = 0;
      for (f = g.length; d < f; r = ++d) {
        var n = g[r];
        n = new GridEdit.HTMLCell(this.attributes[n.valueKey], this);
        n.editable = !0;
        this.cells.push(n);
        this.table.cols[r].cells.push(n);
        this.element.appendChild(n.element);
      }
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
}).call(this);
(function() {
  var a = function(a, d) {
    function c() {
      this.constructor = a;
    }
    for (var g in d) {
      b.call(d, g) && (a[g] = d[g]);
    }
    c.prototype = d.prototype;
    a.prototype = new c;
    a.__super__ = d.prototype;
    return a;
  }, b = {}.hasOwnProperty;
  GridEdit.Cell = function() {
    function a(a, b) {
      this.originalValue = a;
      this.row = b;
      this.index = this.row.cells.length;
      this.id = this.row.id + "-" + this.index;
      this.address = [this.row.id, this.index];
      this.table = this.row.table;
      this.meta = this.col = this.table.cols[this.index];
      this.element = document.createElement("td");
    }
    a.prototype.initialize = function() {
      this.initEditable();
      this.initValueKey();
      this.initSource();
      this.initOriginalValue();
      this.initSourceValue();
      this.initNode();
      this.initControl();
      this.applyControlBehavior();
      this.applyEventBehavior();
      GridEdit.Hook.prototype.initCellHooks(this);
      return this.applyStyle();
    };
    a.prototype.initOriginalValue = function() {
      if (void 0 === this.originalValue) {
        return this.originalValue = "";
      }
    };
    a.prototype.initSourceValue = function() {
      return this.source[this.valueKey] = this.originalValue;
    };
    a.prototype.initEditable = function() {
      return this.editable = !1 !== this.col.editable;
    };
    a.prototype.initValueKey = function() {
      return this.valueKey = this.col.valueKey;
    };
    a.prototype.initSource = function() {
      return this.source = this.table.config.rows[this.address[0]];
    };
    a.prototype.initControl = function() {
      return this.control = document.createElement("input");
    };
    a.prototype.initNode = function() {
      this.element.appendChild(document.createTextNode(this.col.format(this.originalValue)));
      if ((this.placeholder || this.col.placeholder) && !this.originalValue) {
        return this.renderPlaceholder();
      }
    };
    a.prototype.renderPlaceholder = function() {
      this.originalColor = this.element.style.color;
      this.element.style.color = "#ccc";
      return this.element.textContent = this.placeholder || this.col.placeholder;
    };
    a.prototype.showRed = function() {
      return this.showUneditable();
    };
    a.prototype.applyStyle = function() {
      var a;
      this.col.cellClass && this.element.classList.add(this.col.cellClass);
      if (this.col.style) {
        var b = [];
        for (a in this.col.style) {
          b.push(this.element.style[a] = this.col.style[a]);
        }
        return b;
      }
    };
    a.prototype.addToSelection = function() {
      this.showActive();
      return this.table.activeCells.push(this);
    };
    a.prototype.removeFromSelection = function() {
      var a = this.table.activeCells.indexOf(this);
      this.table.activeCells.splice(a, 1);
      return this.showInactive();
    };
    a.prototype.isActive = function() {
      return -1 !== this.table.activeCells.indexOf(this);
    };
    a.prototype.makeActive = function(a) {
      null == a && (a = !0);
      this.table.hideControl();
      a && GridEdit.Utilities.prototype.clearActiveCells(this.table);
      if (!this.isActive() && GridEdit.Hook.prototype.run(this, "beforeActivate", this)) {
        return this.showActive(), this.table.activeCells.push(this), this.table.selectionStart = this, (a = this.table.openCell) && a.edit(a.control.value), GridEdit.Hook.prototype.run(this, "afterActivate", this);
      }
    };
    a.prototype.makeInactive = function() {
      return this.showInactive();
    };
    a.prototype.showActive = function() {
      if (!this.isActive()) {
        return this.oldBackgroundColor = this.element.style.backgroundColor, this.element.style.backgroundColor = this.table.theme.cells.activeColor;
      }
    };
    a.prototype.showInactive = function() {
      return this.element.style.backgroundColor = this.oldBackgroundColor || "";
    };
    a.prototype.showUneditable = function() {
      this.element.style.backgroundColor = this.table.theme.cells.uneditableColor;
      if (this.table.mobile) {
        var a = this;
        return setTimeout(function() {
          return a.makeInactive();
        }, 1000);
      }
      return this.table.redCells.push(this);
    };
    a.prototype.edit = function(a) {
      null == a && (a = null);
      if (this.editable) {
        if (null !== a) {
          if (this.value(a), this.isBeingEdited()) {
            return this.hideControl();
          }
        } else {
          return this.showControl();
        }
      } else {
        return this.showUneditable();
      }
    };
    a.prototype.value = function(a, b) {
      null == a && (a = null);
      null == b && (b = !0);
      var c = this.source[this.valueKey] || this.col.defaultValue;
      c = "object" === typeof c ? JSON.parse(JSON.stringify(c)) : c;
      if (null !== a && a !== c) {
        a = this.formatValue(a);
        var d = this.value();
        if (GridEdit.Hook.prototype.run(this, "beforeEdit", this, d, a)) {
          return b && this.table.addToStack({type:"cell-edit", oldValue:d, newValue:a, address:this.address}), this.setValue(a), this.renderValue(a), this.row.afterEdit(), this.table.useFixedHeaders && GridEdit.Utilities.prototype.fixHeaders(this.table), GridEdit.Hook.prototype.run(this, "afterEdit", this, d, a, this.table.contextMenu.getUpperLeftPasteCell()), this.table.checkIfCellIsDirty(this), a;
        }
      }
      return c;
    };
    a.prototype.formatValue = function(a) {
      console.trace("Cell.formatValue:", a);
      return a;
    };
    a.prototype.setValue = function(a) {
      return this.source[this.valueKey] = a;
    };
    a.prototype.select = function() {
      return this.control.select();
    };
    a.prototype.renderValue = function(a) {
      if ((this.placeholder || this.col.placeholder) && "" === a) {
        return this.renderPlaceholder();
      }
      this.element.style.color = this.originalColor || "";
      return this.element.textContent = this.col.format(a);
    };
    a.prototype.isDirty = function() {
      return this.row.alwaysPristine ? !1 : this.originalValue !== this.value();
    };
    a.prototype.focus = function() {
      if (this.table.mobile) {
        return this.control.focus();
      }
      var a = this.control;
      return setTimeout(function() {
        a.focus();
        var b = 0;
        a.value && (b = a.value.length);
        if (a.setSelectionRange) {
          return a.setSelectionRange(b, b);
        }
        if (a.createTextRange) {
          var c = a.createTextRange();
          c.collapse(!0);
          c.moveEnd("character", b);
          c.moveStart("character", b);
          return c.select();
        }
      }, 0);
    };
    a.prototype.showControl = function(a) {
      null == a && (a = null);
      if (this.editable) {
        if (GridEdit.Hook.prototype.run(this, "beforeControlInit", this)) {
          return this.table.contextMenu.hideBorders(), this.renderControl(), this.setControlValue(a), this.table.openCell = this, this.focus(), GridEdit.Hook.prototype.run(this, "afterControlInit", this);
        }
      } else {
        return this.showUneditable();
      }
    };
    a.prototype.setControlValue = function(a) {
      return this.control.value = a;
    };
    a.prototype.renderControl = function() {
      GridEdit.Utilities.prototype.setStyles(this.control, this.position());
      this.table.element.appendChild(this.control);
      return this.control.style.position = "absolute";
    };
    a.prototype.hideControl = function() {
      if (GridEdit.Hook.prototype.run(this, "beforeControlHide", this)) {
        return this.isBeingEdited() && this.control.parentNode.removeChild(this.control), this.table.openCell = null, GridEdit.Hook.prototype.run(this, "afterControlHide", this);
      }
    };
    a.prototype.applyControlBehavior = function() {
      var a = this;
      var b = this.table;
      return this.control.onkeydown = function(c) {
        switch(c.which) {
          case 13:
            return a.edit(this.value);
          case 9:
            return a.edit(this.value), b.moveTo(b.nextCell());
        }
      };
    };
    a.prototype.position = function() {
      var a = this.element.getBoundingClientRect();
      return {top:this.element.offsetTop, bottom:this.element.offsetTop + a.height, left:this.element.offsetLeft, right:this.element.offsetLeft + a.width, width:a.width, height:a.height};
    };
    a.prototype.reposition = function() {
      if (!this.table.mobile) {
        return GridEdit.Utilities.prototype.setStyles(this.control, this.position());
      }
    };
    a.prototype.next = function() {
      var a;
      return this.row.cells[this.index + 1] || (null != (a = this.row.below()) ? a.cells[0] : void 0);
    };
    a.prototype.previous = function() {
      var a;
      return this.row.cells[this.index - 1] || (null != (a = this.row.above()) ? a.cells[this.row.cells.length - 1] : void 0);
    };
    a.prototype.above = function() {
      var a;
      return null != (a = this.row.above()) ? a.cells[this.index] : void 0;
    };
    a.prototype.below = function() {
      var a;
      return null != (a = this.row.below()) ? a.cells[this.index] : void 0;
    };
    a.prototype.isBefore = function(a) {
      return a.address[0] === this.address[0] && a.address[1] > this.address[1];
    };
    a.prototype.isAfter = function(a) {
      return a.address[0] === this.address[0] && a.address[1] < this.address[1];
    };
    a.prototype.isAbove = function(a) {
      return a.address[0] > this.address[0] && a.address[1] === this.address[1];
    };
    a.prototype.isBelow = function(a) {
      return a.address[0] < this.address[0] && a.address[1] === this.address[1];
    };
    a.prototype.addClass = function(a) {
      return this.element.classList.add(a);
    };
    a.prototype.removeClass = function(a) {
      return this.element.classList.remove(a);
    };
    a.prototype.isBeingEdited = function() {
      return this.control ? null != this.control.parentNode : !1;
    };
    a.prototype.toggleActive = function() {
      return this.isActive() ? this.removeFromSelection() : this.makeActive(!1);
    };
    a.prototype.isVisible = function() {
      var a = this.position();
      return a.top >= this.table.topOffset && a.bottom <= window.innerHeight;
    };
    a.prototype.onReturnKeyPress = function() {
      return this.table.moveTo(this.table.belowCell());
    };
    a.prototype.onSpaceKeyPress = function() {
      return this.edit();
    };
    a.prototype.onKeyPress = function(a) {
      return this.showControl(a);
    };
    a.prototype.applyEventBehavior = function() {
      var a = this;
      var b = this.table;
      var c = null;
      this.element.onfocus = function(b) {
        return a.reposition();
      };
      if (b.mobile) {
        var h = null;
        this.element.ontouchstart = function(a) {
          h = a.changedTouches[0].clientY;
          GridEdit.Utilities.prototype.clearActiveCells(b);
          if (b.openCell) {
            return b.openCell.hideControl();
          }
        };
        return this.element.ontouchend = function(b) {
          var c = b.changedTouches[0].clientY;
          if (2 > b.changedTouches.length && c === h) {
            return b.preventDefault(), a.edit();
          }
        };
      }
      this.element.onclick = function(d) {
        var f, g, h, m;
        b.contextMenu.hideBorders();
        if (b.lastClickCell === a) {
          GridEdit.Hook.prototype.run(a, "onDblClick", a, d) && (b.lastClickCell = null, a.showControl(a.value()));
        } else {
          if (b.lastClickCell = a, clearInterval(c), c = setTimeout(function() {
            return b.lastClickCell = null;
          }, 1000), GridEdit.Hook.prototype.run(a, "onClick", a, d)) {
            var w = d.ctrlKey;
            var y = d.metaKey;
            var q = d.shiftKey;
            d = function(a) {
            };
            if (g <= h) {
              for (f = g = m = g; m <= h ? g <= h : g >= h; f = m <= h ? ++g : --g) {
                f = b.getCell(l, f), f.makeActive(!1);
              }
            } else {
              for (f = h = m = h; m <= g ? h <= g : h >= g; f = m <= g ? ++h : --h) {
                f = b.getCell(l, f), f.makeActive(!1);
              }
            }
            (w || y) && a.toggleActive();
            if (q) {
              var l = b.activeCells[0];
              y = l.address[0];
              g = l.address[1];
              w = a.address[0];
              h = a.address[1];
              if (y <= w) {
                for (l = q = y; y <= w ? q <= w : q >= w; l = y <= w ? ++q : --q) {
                  d(l);
                }
              } else {
                for (l = q = w; w <= y ? q <= y : q >= y; l = w <= y ? ++q : --q) {
                  d(l);
                }
              }
            }
          }
        }
        return !1;
      };
      this.element.onmousedown = function(c) {
        if (3 === c.which) {
          b.contextMenu.show(c.x, c.y, a);
        } else {
          return c.shiftKey || c.ctrlKey || c.metaKey || (b.state = "selecting", a.makeActive()), !1;
        }
      };
      this.element.onmouseover = function(c) {
        if ("selecting" === b.state) {
          return b.selectionEnd = a, b.setSelection();
        }
      };
      return this.element.onmouseup = function(c) {
        if (3 !== c.which && (b.selectionEnd = a, b.state = "ready", !c.metaKey && !c.ctrlKey)) {
          return b.setSelection();
        }
      };
    };
    return a;
  }();
  GridEdit.StringCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "string";
      this.initialize();
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Cell);
  GridEdit.NumberCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "number";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.focus = function() {
      if (this.table.mobile) {
        return this.control.focus();
      }
      var a = this.control;
      return setTimeout(function() {
        return a.focus();
      }, 0);
    };
    c.prototype.initControl = function() {
      this.control = document.createElement("input");
      return this.control.type = "number";
    };
    c.prototype.normalizeValue = function(a) {
      if (null === a || void 0 === a || "" === a) {
        return null;
      }
      a = Number(a);
      return isNaN(a) ? null : a;
    };
    c.prototype.formatValue = function(a) {
      return this.normalizeValue(a);
    };
    c.prototype.setValue = function(a) {
      return this.source[this.valueKey] = this.normalizeValue(a);
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.CheckBoxCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "checkbox";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initialize = function() {
      this.initEditable();
      this.initValueKey();
      this.initSource();
      this.initOriginalValue();
      this.initSourceValue();
      this.applyEventBehavior();
      GridEdit.Hook.prototype.initCellHooks(this);
      this.applyStyle();
      this.initNode();
      this.toggleable = this.editable;
      this.editable = !1;
      return this.renderValue();
    };
    c.prototype.initNode = function() {
      var a = document.createElement("div");
      a.style.width = "1em";
      a.style.margin = "auto";
      this.span = document.createElement("span");
      a.appendChild(this.span);
      return this.element.appendChild(a);
    };
    c.prototype.edit = function() {
      return !1;
    };
    c.prototype.initControl = function() {
      return this.toggle();
    };
    c.prototype.renderControl = function() {
      return GridEdit.Utilities.prototype.clearActiveCells(this.table);
    };
    c.prototype.isBeingEdited = function() {
      return !1;
    };
    c.prototype.toggle = function() {
      return this.toggleable ? (this.value(!this.value()), this.setValue(this.value())) : this.showUneditable();
    };
    c.prototype.renderValue = function() {
      var a = this.toggleable ? "" : "disabled";
      return this.value() ? this.table.theme.inputs.checkbox.checkedClassName ? this.span.className = this.table.theme.inputs.checkbox.checkedClassName : this.span.innerHTML = "<input type='checkbox' " + a + " checked />" : this.table.theme.inputs.checkbox.uncheckedClassName ? this.span.className = this.table.theme.inputs.checkbox.uncheckedClassName : this.span.innerHTML = "<input type='checkbox' " + a + " />";
    };
    c.prototype.applyEventBehavior = function() {
      c.__super__.applyEventBehavior.apply(this, arguments);
      var a = this;
      return this.element.onclick = function(b) {
        a.table.contextMenu.hideBorders();
        return a.toggle();
      };
    };
    c.prototype.onSpaceKeyPress = function() {
      return this.toggle();
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.DateCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "date";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      return this.element.appendChild(document.createTextNode(this.toDateString(this.originalValue)));
    };
    c.prototype.initControl = function() {
      this.control = this.toDate();
      try {
        if (this.originalValue) {
          return this.control.valueAsDate = new Date(this.originalValue);
        }
      } catch (f) {
        return this.control.value = this.toDateString(new Date(this.originalValue));
      }
    };
    c.prototype.formatValue = function(a) {
      if (0 < a.length) {
        return this.toDateString(Date.parse(a));
      }
      if (a instanceof Date) {
        return this.toDateString(a);
      }
      if (0 === a.length) {
        try {
          this.control.valueAsDate = null;
        } catch (g) {
          this.control.value = "";
        }
        return "";
      }
    };
    c.prototype.setValue = function(a) {
      this.source[this.valueKey] = this.toDateObject(a);
      return this.setControlValue();
    };
    c.prototype.setControlValue = function() {
      try {
        return this.control.valueAsDate = this.source[this.valueKey];
      } catch (f) {
        return this.control.value = this.source[this.valueKey];
      }
    };
    c.prototype.renderValue = function() {
      return this.element.textContent = this.col.format(this.toDateString(this.value()));
    };
    c.prototype.toDateObject = function(a) {
      null == a && (a = null);
      return a && "" !== a ? (a = a.split("-"), new Date(a[2], a[0] - 1, a[1])) : null;
    };
    c.prototype.toDateString = function(a) {
      null == a && (a = null);
      a = a && "" !== a ? new Date(a) : this.value() ? new Date(this.value()) : null;
      return a instanceof Date ? isNaN(a.getTime()) ? "" : ("0" + (a.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + a.getUTCDate()).slice(-2) + "-" + a.getUTCFullYear() : "";
    };
    c.prototype.toDate = function() {
      var a = document.createElement("input");
      a.type = "text";
      a.value = this.toDateString();
      return a;
    };
    c.prototype.toDateInputString = function(a) {
      var b;
      null == a && (a = null);
      a && "" !== a ? b = new Date(a) : this.value() ? b = new Date(this.value()) : null;
      return b instanceof Date ? b.getUTCFullYear() + "-" + ("0" + (b.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + b.getUTCDate()).slice(-2) : "";
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.HTMLCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "html";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      this.htmlContent = this.col.defaultValue || this.originalValue || "";
      return this.element.appendChild(this.toFragment());
    };
    c.prototype.setValue = function(a) {
      this.htmlContent = a;
      a = this.toFragment();
      this.element.innerHTML = "";
      return this.element.appendChild(a);
    };
    c.prototype.toFragment = function() {
      var a = document.createElement("div");
      var b = document.createDocumentFragment();
      a.innerHTML = this.htmlContent;
      b.appendChild(a.firstChild || document.createTextNode(""));
      return b;
    };
    c.prototype.renderValue = function() {
      return this.htmlContent;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.SelectCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "select";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      var a = document.createTextNode(this.originalValue);
      return this.element.appendChild(a);
    };
    c.prototype.setControlValue = function() {
      var a, b, c;
      this.control.innerHTML = "";
      var d = this.meta.choices;
      var u = [];
      var r = 0;
      for (b = d.length; r < b; r++) {
        var n = d[r];
        var v = document.createElement("option");
        if (n instanceof Array) {
          var w = a = 0;
          for (c = n.length; a < c; w = ++a) {
            var y = n[w];
            0 === w && (v.value = y);
            1 === w && (v.text = y);
          }
        } else {
          v.value = v.text = n;
        }
        this.value() === n && (v.selected = !0);
        u.push(this.control.add(v));
      }
      return u;
    };
    c.prototype.initControl = function() {
      var a;
      var b = this;
      this.control = a = document.createElement("select");
      this.meta.choices || console.log("There is not a 'choices' key in cell " + this.address + " and you specified that it was of type 'select'");
      this.setControlValue();
      a.classList.add(this.table.theme.inputs.select.className);
      return a.onchange = function(a) {
        return b.edit(a.target.value);
      };
    };
    c.prototype.select = function() {
      return !1;
    };
    c.prototype.onSpaceKeyPress = function() {
      this.renderControl();
      var a = this.control;
      return setTimeout(function() {
        var b = document.createEvent("MouseEvents");
        b.initMouseEvent("mousedown", !0, !0, window);
        return a.dispatchEvent(b);
      }, 0);
    };
    c.prototype.onKeyPress = function(a) {
      var b, c;
      this.onSpaceKeyPress();
      var d = new RegExp("^" + a, "i");
      a = this.control;
      var f = a.options;
      var r = [];
      var n = b = 0;
      for (c = f.length; b < c; n = ++b) {
        var v = f[n];
        if (d.test(v.value)) {
          a.selectedIndex = n;
          break;
        } else {
          r.push(void 0);
        }
      }
      return r;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.TextAreaCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "textarea";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initControl = function() {
      var a = document.createElement("textarea");
      a.classList.add(this.table.theme.inputs.textarea.className);
      return this.control = a;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.DMNStringCell = function(b) {
    function c(a, b, d) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = d;
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initControl = function() {
      var a = document.createElement(this.type);
      a.classList.add(this.table.theme.inputs.textarea.className);
      return this.control = a;
    };
    c.prototype.format = function(a) {
      a || (a = this.col.defaultValue);
      return a && a.op ? a.op + " " + a.expr : null;
    };
    c.prototype.initNode = function() {
      this.element.appendChild(document.createTextNode(this.format(this.originalValue)));
    };
    c.prototype.renderValue = function(a) {
      this.element.style.color = this.originalColor || "";
      return this.element.textContent = this.format(a);
    };
    c.prototype.setValue = function(a) {
      return this.source[this.valueKey] = a;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.GenericCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "generic";
      this.initialize();
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Cell);
  GridEdit.HandleCell = function() {
    return function(a) {
      var b = this.row = a;
      var c = b.table;
      this.element = document.createElement("td");
      this.element.setAttribute("draggable", !0);
      this.element.className = c.theme.cells.handleClassName;
      a = document.createElement("div");
      a.innerHTML = "<span></span><span></span><span></span>";
      this.element.appendChild(a);
      this.element.onclick = function(a) {
        return b.table.selectRow(a, b.index);
      };
      this.element.ondragstart = function() {
        var a, d, f;
        b.cells[0].addToSelection();
        var u = new GridEdit.GridChange(c.activeCells);
        var r = a = d = u.lowRow;
        for (f = u.highRow; d <= f ? a <= f : a >= f; r = d <= f ? ++a : --a) {
          c.rows[r].select();
        }
        c.contextMenu.hideBorders();
        return c.draggingRow = u;
      };
      this.element.ondragend = function() {
        var a = c.draggingRow.lowRow;
        var b = c.draggingRow.highRow - c.draggingRow.lowRow + 1;
        var d = c.lastDragOver.index;
        var f = 0;
        0 === d ? c.lastDragOverIsBeforeFirstRow || 0 === a || f++ : a > d && f++;
        d += f;
        c.lastDragOver.element.style.borderBottom = c.lastDragOver.oldBorderBottom;
        c.lastDragOver.element.style.borderTop = c.lastDragOver.oldBorderTop;
        c.lastDragOver.element.style.borderTop = c.lastDragOver.oldBorderTop;
        c.lastDragOver = null;
        if (d !== a) {
          return c.moveRows(a, d, b, !0);
        }
      };
    };
  }();
}).call(this);
(function() {
  GridEdit.GridChange = function() {
    function a(a, c) {
      var b;
      this.cells = a;
      var f = "ge-blank" === c;
      this.changes = [];
      this.table = this.cells[0].col.table;
      this.borderStyle = this.table.theme.cells.selectionBorderStyle;
      this.highCol = this.highRow = 0;
      var g = this.cells;
      a = 0;
      for (b = g.length; a < b; a++) {
        var h = g[a];
        var m = h.address[0];
        var u = h.address[1];
        h = {row:m, col:u, value:f ? "" : c || h.value()};
        this.firstCell ? h.row < this.firstCell.row ? this.firstCell = h : h.row === this.firstCell.row && h.col < this.firstCell.col && (this.firstCell = h) : (this.firstCell = h, this.lowRow = h.row, this.lowCol = h.col);
        h.row > this.highRow && (this.highRow = h.row);
        h.col > this.highCol && (this.highCol = h.col);
        h.row < this.lowRow && (this.lowRow = h.row);
        h.col < this.lowCol && (this.lowCol = h.col);
        this.changes.push(h);
      }
      g = this.changes;
      a = 0;
      for (b = g.length; a < b; a++) {
        c = g[a], c.rowVector = c.row - this.firstCell.row, c.colVector = c.col - this.firstCell.col;
      }
      this.scattered = this.cells.length !== (this.highCol - this.lowCol + 1) * (this.highRow - this.lowRow + 1);
    }
    a.prototype.applyTo = function(a) {
      var b, d, f;
      var g = this.changes[0].value;
      if (a.scattered) {
        a.fill(g);
      } else {
        var h = this.width();
        g = this.height();
        var m = a.width();
        var u = a.height();
        if (m < h || u < g) {
          var r = a.firstCell.row;
          var n = a.firstCell.col;
          this.apply(r, n);
          return "copyGrid";
        }
        m = parseInt(m / h);
        u = parseInt(u / g);
        r = a.firstCell.row;
        n = a.firstCell.col;
        for (b = a = 0; 0 <= u ? a < u : a > u; b = 0 <= u ? ++a : --a) {
          b = r + b * g;
          var v = d = 0;
          for (f = m; 0 <= f ? d < f : d > f; v = 0 <= f ? ++d : --d) {
            v = n + v * h, this.apply(b, v);
          }
        }
      }
      return "pasteGrid";
    };
    a.prototype.copyValues = function() {
      var a, c;
      var d = this.firstCell.row;
      var f = this.firstCell.col;
      var g = this.changes;
      var h = [];
      var m = 0;
      for (c = g.length; m < c; m++) {
        var u = g[m];
        (a = this.table.getCell(d + u.rowVector, f + u.colVector)) && a.editable ? h.push(u.oldValue = a.value()) : h.push(void 0);
      }
      return h;
    };
    a.prototype.width = function() {
      return this.highCol - this.lowCol + 1;
    };
    a.prototype.height = function() {
      return this.highRow - this.lowRow + 1;
    };
    a.prototype.fill = function(a) {
      var b, d;
      var f = this.firstCell.row;
      var g = this.firstCell.col;
      var h = this.changes;
      var m = [];
      var u = 0;
      for (d = h.length; u < d; u++) {
        var r = h[u];
        (b = this.table.getCell(f + r.rowVector, g + r.colVector)) && b.editable ? (r.oldValue = b.value(), m.push(b.value(a, !1))) : m.push(r.oldValue = "");
      }
      return m;
    };
    a.prototype.apply = function(a, c) {
      var b, f;
      if (!1 === a || !1 === c) {
        a = this.firstCell.row, c = this.firstCell.col;
      }
      var g = this.changes;
      var h = [];
      var m = 0;
      for (f = g.length; m < f; m++) {
        var u = g[m];
        (b = this.table.getCell(a + u.rowVector, c + u.colVector)) && b.editable ? (u.oldValue = b.value(), h.push(b.value(u.value, !1))) : h.push(u.oldValue = "");
      }
      return h;
    };
    a.prototype.undo = function(a, c) {
      var b, f;
      if (!1 === a || !1 === c) {
        a = this.firstCell.row, c = this.firstCell.col;
      }
      var g = this.changes;
      var h = [];
      var m = 0;
      for (f = g.length; m < f; m++) {
        var u = g[m];
        (b = this.table.getCell(a + u.rowVector, c + u.colVector)) && b.editable ? h.push(b.value(u.oldValue, !1)) : h.push(void 0);
      }
      return h;
    };
    a.prototype.displayBorders = function() {
      var a;
      var c = this.cells;
      var d = [];
      var f = 0;
      for (a = c.length; f < a; f++) {
        var g = c[f];
        d.push(this.addBorder(g));
      }
      return d;
    };
    a.prototype.removeBorders = function() {
      var a;
      var c = this.cells;
      var d = [];
      var f = 0;
      for (a = c.length; f < a; f++) {
        var g = c[f];
        d.push(g.element.style.border = "");
      }
      return d;
    };
    a.prototype.addBorder = function(a) {
      var b = a.address[0];
      var d = a.address[1];
      if (this.scattered) {
        return a.element.style.border = this.borderStyle;
      }
      this.firstCell.row === this.highRow ? (a.element.style.borderTop = this.borderStyle, a.element.style.borderBottom = this.borderStyle) : b === this.lowRow ? a.element.style.borderTop = this.borderStyle : b === this.highRow && (a.element.style.borderBottom = this.borderStyle);
      if (this.firstCell.col === this.highCol) {
        return a.element.style.borderRight = this.borderStyle, a.element.style.borderLeft = this.borderStyle;
      }
      if (d === this.lowCol) {
        return a.element.style.borderLeft = this.borderStyle;
      }
      if (d === this.highCol) {
        return a.element.style.borderRight = this.borderStyle;
      }
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Theme = function() {
    function a(a, c) {
      this.themeName = a;
      switch(this.themeName) {
        case "bootstrap":
          this.apply(this.bootstrap);
          break;
        default:
          this.themeName = "default", this.apply(this["default"]);
      }
      c && (this.themeName += "-custom", this.apply(c));
    }
    a.prototype.apply = function(a) {
      var b;
      var d = function(a, b) {
        var c;
        var f = [];
        for (c in b) {
          var g = b[c];
          "object" === typeof g ? (a[c] || (a[c] = {}), f.push(d(a[c], g))) : f.push(a[c] = g);
        }
        return f;
      };
      var f = [];
      for (b in a) {
        var g = a[b];
        "object" === typeof g ? (this[b] || (this[b] = {}), f.push(d(this[b], g))) : f.push(this[b] = g);
      }
      return f;
    };
    a.prototype["default"] = {bootstrap:!1, cells:{activeColor:"#F1F1F1", uneditableColor:"#FFBBB3", handleClassName:"handle", selectionBorderStyle:"2px solid blue"}, borders:{dragBorderStyle:"3px solid rgb(160, 195, 240)"}, inputs:{textarea:{className:"grid-edit"}, select:{className:"grid-edit"}, checkbox:{checkedClassName:!1, uncheckedClassName:!1}}};
    a.prototype.bootstrap = {bootstrap:!0, cells:{activeColor:"#F1F1F1", uneditableColor:"#FFBBB3", handleClassName:"handle", selectionBorderStyle:"2px solid blue"}, borders:{dragBorderStyle:"3px solid rgb(160, 195, 240)"}, inputs:{textarea:{className:"form-control"}, select:{className:"form-control"}, checkbox:{checkedClassName:"glyphicon glyphicon-check", uncheckedClassName:"glyphicon glyphicon-unchecked"}}};
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Hook = function() {
    function a() {
    }
    a.prototype.run = function(a, c) {
      var b, f;
      if (a[c]) {
        var g = [];
        var h = b = 0;
        for (f = arguments.length; b < f; h = ++b) {
          var m = arguments[h];
          2 > h || g.push(m);
        }
        return !1 !== a[c].apply(a, g);
      }
      return !0;
    };
    a.prototype.initTableHooks = function(a) {
      var b = a.config;
      a.beforeMoveRow = b.beforeMoveRow;
      a.afterMoveRow = b.afterMoveRow;
      a.beforeMoveRows = b.beforeMoveRows;
      a.afterMoveRows = b.afterMoveRows;
      a.beforeAddRow = b.beforeAddRow;
      a.afterAddRow = b.afterAddRow;
      a.beforeAddRows = b.beforeAddRows;
      a.afterAddRows = b.afterAddRows;
      a.beforeRemoveRow = b.beforeRemoveRow;
      a.afterRemoveRow = b.afterRemoveRow;
      a.beforeRemoveRows = b.beforeRemoveRows;
      a.afterRemoveRows = b.afterRemoveRows;
      a.beforeInsertBelow = b.beforeInsertBelow;
      a.afterInsertBelow = b.afterInsertBelow;
      a.beforeInsertAbove = b.beforeInsertAbove;
      return a.afterInsertAbove = b.afterInsertAbove;
    };
    a.prototype.initContextMenuHooks = function(a) {
      var b = a.table.config;
      a.beforeContextMenuAction = b.beforeContextMenuAction;
      return a.afterContextMenuAction = b.afterContextMenuAction;
    };
    a.prototype.initCellHooks = function(a) {
      var b = a.table.config;
      a.beforeEdit = b.beforeEdit;
      a.afterEdit = b.afterEdit;
      a.beforeActivate = b.beforeCellActivate;
      a.afterActivate = b.afterCellActivate;
      a.beforeControlInit = b.beforeControlInit;
      a.afterControlInit = b.afterControlInit;
      a.beforeControlHide = b.beforeControlHide;
      a.afterControlHide = b.afterControlHide;
      a.beforeNavigateTo = b.beforeCellNavigateTo;
      a.onClick = b.onCellClick;
      return a.onDblClick = b.onCellDblClick;
    };
    return a;
  }();
}).call(this);
Polymer({is:"dmn-editor", properties:{regkey:{type:String}, namespace:{type:String}}, behaviors:[TranslationsBehavior, RegistryBehavior, DialogBehavior, LobiboxBehavior, StyleScopeBehavior], observers:["editValueChanged(editValue)"], attached:function() {
  this._registryAttributes = {subject:"decision", namespace:this.namespace};
  this._registryKey = "/decisions";
  this._currentRegistryName = null;
  this.cols = [];
  this.rows = [];
  var a = /Mac/.test(navigator.platform) ? "Cmd" : "Ctrl", a = new GridEdit({initialize:!0, cols:this.cols, rows:this.rows, tableClass:"dmnTable", element:this.$.gridedit, includeRowHandles:!0, includeContextMenu:!0, onCellClick:function(a) {
  }, contextMenuOrder:"undo redo insertInput insertOutput removeColumn removeRow".split(" "), contextMenuItems:{insertInput:{name:tr("dmn.insertInput"), shortCut:a + "+I", callback:this.insertInput.bind(this)}, insertOutput:{name:tr("dmn.insertOutput"), shortCut:a + "+O", callback:this.insertOutput.bind(this)}, removeColumn:{name:tr("dmn.removeColumn"), shortCut:a + "+R", callback:this.removeColumn.bind(this)}, removeRow:{name:tr("dmn.removeRow"), shortCut:a + "+K", callback:this.removeRow.bind(this)}}});
  a.addUndoAction("insert-column", function(a) {
    console.log("UndoAction:insert-column:", a);
    this.cols.splice(a.index, 1);
    this.gridRebuild();
  }.bind(this));
  a.addRedoAction("insert-column", function(a) {
    console.log("RedoAction:insert-column:", a);
    this.cols.splice(a.index, 0, a.col);
    this.gridRebuild();
  }.bind(this));
  a.addUndoAction("remove-column", function(a) {
    console.log("UndoAction:remove-column:", a);
    this.cols.splice(a.index, 0, a.col);
    this.gridRebuild();
  }.bind(this));
  a.addRedoAction("remove-column", function(a) {
    console.log("RedoAction:remove-column:", a);
    this.cols.splice(a.index, 1);
    this.gridRebuild();
  }.bind(this));
  this.gridedit = a;
  this.async(function() {
  }, 50);
}, onInputParamDialog:function(a) {
  this.$.dmnParamDialogId.close();
  this._insertInput(a.detail.index, a.detail.data);
}, addInput:function() {
  var a = _.filter(this.cols, function(b) {
    console.log("a:", a);
    return "input" == b.kind;
  }) || [];
  this.$.dmnParamDialogId.open("input", a.length);
}, insertInput:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index + 1;
  this.$.dmnParamDialogId.open("input", a);
}, _insertInput:function(a, b) {
  console.log("insertInput.index:", a + "/data:", b);
  var c = "dmn-" + b.type, d = {op:"list" == b.type ? "oneOf" : "=", expr:""};
  "boolean" == b.type && (c = "checkbox", d = !1);
  b = {defaultValue:d, kind:"input", label:"Input -> " + (b.label || b.name) + ":" + b.type, valueKey:b.name, type:c, editable:!0};
  this.gridedit.addToStack({type:"insert-column", index:a, col:b});
  this.cols.splice(a, 0, b);
  this.gridRebuild();
}, removeColumn:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index;
  var b = this.cols.splice(a, 1)[0];
  this.gridedit.addToStack({type:"remove-column", index:a, col:b});
  this.gridRebuild();
}, onOutputParamDialog:function(a) {
  this.$.dmnParamDialogId.close();
  this._insertOutput(a.detail.index, a.detail.data);
}, addOutput:function() {
  this.$.dmnParamDialogId.open("output", this.cols.length);
}, insertOutput:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index + 1;
  var b = _.filter(this.cols, function(a) {
    return "input" == a.kind;
  }).length || 0;
  a < b && (a = b);
  this.$.dmnParamDialogId.open("output", a);
}, _insertOutput:function(a, b) {
  console.log("insertOutput.index:", a + "/data:", b);
  b = {defaultValue:"", kind:"output", label:"Output -> " + (b.label || b.name) + ":" + b.type, valueKey:b.name, type:"string", exprType:b.type, editable:!0};
  this.gridedit.addToStack({type:"insert-column", index:a, col:b});
  this.cols.splice(a, 0, b);
  this.gridRebuild();
}, addRow:function() {
  this.gridedit.addRow(this.rows.length, !0);
}, removeRow:function() {
  var a = this.gridedit.activeCell();
  if (null != a) {
    if (1 < a.length) {
      for (var b = 0; b < a.length; b++) {
        this.gridedit.removeRow(a[b].row.index, !0);
      }
    } else {
      this.gridedit.removeRow(a.row.index, !0);
    }
  }
}, gridRebuild:function() {
  this.gridedit.repopulate();
  this.gridedit.rebuild({cols:this.cols});
  console.log("gridRebuild.data:", JSON.stringify(this.gridedit.data(), null, 2));
  this.refreshResize();
}, resetAll:function() {
  var a = this.gridedit.data();
  if (null != a) {
    for (var b = 0; b < a.length; b++) {
      this.gridedit.removeRow(0, !0);
    }
  }
}, doTest:function() {
  this.async(function() {
    var a = this.buildDecisionJson();
    0 < a.columns.conditions.length && this.$.dmnTestDialogId.open(a);
  }, 50);
}, getState:function() {
  var a = this.buildDecisionJson(), b = this.gridedit.data(), a = {decision:a, meta:{rows:b, cols:this.cols}};
  console.log("getState:", a);
  return a;
}, setState:function(a) {
  this.cols = a.meta.cols;
  a = a.meta.rows;
  for (var b = [], c = 0; c < a.length; c++) {
    for (var d = {}, f = 0; f < this.cols.length; f++) {
      d[this.cols[f].valueKey] = a[c][f];
    }
    b.push(d);
  }
  this.rows = b;
  this.gridedit.rebuild({initialize:!0, cols:this.cols, rows:this.rows});
  this.initDragTable();
}, getList:function(a) {
  return "['" + a.split(/,| /).join("','") + "']";
}, refreshResize:function() {
  var a = this.$.gridedit.querySelector("table.dmnTable");
  $(".rc-handle-container", $(this.$.gridedit)).remove();
  this.async(function() {
    $(a).resizableColumns({});
  }, 100);
}, initDragTable:function() {
  this.refreshResize();
}, buildValue:function(a, b, c) {
  if ("output" == a) {
    return c;
  }
  if ("boolean" == b.variableType) {
    return b.variableName + " ==  " + c;
  }
  a = "=" !== c.op ? c.op : "==";
  c = c.expr;
  return "date" == b.realType ? (console.log("Date.conv:", moment(c).valueOf()), b.variableName + " " + a + " " + moment(c).valueOf()) : "list" == b.variableType ? (b = this.getList(c) + ".contains(" + b.variableName + ")", console.log("List.conv:", b), "oneOf" == a ? b : "!" + b) : "string" == b.variableType && (c = "'" + c + "'", /^[a-z]/i.test(a)) ? b.variableName + "." + a + "(" + c + ")" : b.variableName + " " + a + " " + c;
}, buildDecisionJson:function() {
  var a = this.gridedit.data();
  console.log("doSave.cols:", JSON.stringify(this.cols, null, 2));
  console.log("doSave.data:", JSON.stringify(a, null, 2));
  var b = {}, c = [], d = [];
  b.conditions = c;
  b.actions = d;
  for (var f = 0; f < this.cols.length; f++) {
    var g = this.cols[f], h = {operation:"expr"};
    "checkbox" == g.type ? h.variableType = "boolean" : "dmn-date" == g.type ? (h.variableType = "long", h.realType = "date") : h.variableType = "input" == g.kind ? g.type.substring(4) : g.type;
    h.variableName = g.valueKey;
    h.data = [];
    "input" == g.kind ? c.push(h) : (h.variableType = g.exprType ? g.exprType : g.type, d.push(h));
    for (var m = 0; m < a.length; m++) {
      var u = this.buildValue(g.kind, h, a[m][f]);
      h.data.push(u);
    }
  }
  return {columns:b};
}, ready:function() {
}});
"use strict";
(function(a, b) {
  b = function(a) {
    this.element = a;
    this.reader = Polymer.dom(a.root).querySelector(".pdf-viewer");
    this.viewportOut = this.reader.querySelector(".pdf-viewport-out");
    this.toolbar = this.reader.querySelector(".pdf-toolbar");
    this.toolbarHeight = 0;
    this.title = this.toolbar.querySelector(".title");
    this.enableTextSelection = a.enableTextSelection;
    this.fitWidth = a.fitWidth;
    this.HEIGHT = a.getAttribute("height");
    this.viewport = this.reader.querySelector(".pdf-viewport");
    this.enableTextSelection && (this.textLayerDiv = this.reader.querySelector(".textLayer"), this.textLayerDivStyle = this.textLayerDiv.style);
    this.spinner = this.reader.querySelector(".spinner");
    this.totalPages = this.reader.querySelector("#totalPages");
    this.viewportStyle = this.viewport.style;
    this.viewportOutStyle = this.viewportOut.style;
    this.ctx = this.viewport.getContext("2d");
    this.SRC = a.src;
    this.pageRendering = !1;
    this.pageNumPending = null;
  };
  b.prototype.setSize = function(a, b) {
    this.WIDTH = this.viewportOut.offsetWidth;
    this.HEIGHT || (this.HEIGHT = this.viewportOut.offsetHeight);
    var c = this.HEIGHT;
    "height" === a && (c = b);
    this.viewportOutStyle.height = c + "px";
    this.spinner.style.top = (c - this.toolbarHeight) / 2 + "px";
  };
  b.prototype.setSrc = function(a) {
    this.SRC = a;
  };
  b.prototype.setFitWidth = function(a) {
    this.fitWidth = a;
  };
  b.prototype.queueRenderPage = function(a) {
    this.pageRendering ? this.pageNumPending = a : this.renderPDF(a);
  };
  b.prototype.notify = function(a, b, f, g) {
    var c = "vaadin-icons:info-circle-o";
    "success" == b ? c = "vaadin-icons:check-circle-o" : "warning" == b ? c = "vaadin-icons:warning" : "error" == b && (c = "vaadin-icons:exclamation");
    g = $.extend({}, {delay:f, icon:c, msg:a}, g);
    return Lobibox.notify(b, g);
  };
  b.prototype.clearCanvas = function() {
    var a = document.querySelector("canvas.pdf-viewport");
    if (null != a) {
      var b = a.getContext("2d");
      null != b && b.clearRect(0, 0, a.width, a.height);
    }
  };
  b.prototype.loadPDF = function() {
    this.setSize();
    var a = this;
    pdfjsLib.getDocument(this.SRC).then(function(b) {
      a.PDF = b;
      a.queueRenderPage(1);
      a.currentPage = 1;
      a.totalPages.innerHTML = a.PDF.numPages;
      a.totalPagesNum = a.PDF.numPages;
      a.currentZoomVal = a.fitZoomVal = a.widthZoomVal = 0;
      a.createDownloadLink();
    }, function() {
      var b = a.SRC.lastIndexOf("/") + 1, c = a.SRC.indexOf("?");
      console.log("b:", b + "/" + c);
      b = a.SRC.substr(b, c - b);
      a.notify("Cannot load:" + b, "error", 5000);
    });
  };
  b.prototype.renderPages = function(a) {
    var b = this;
    b.viewportOut.innerHTML = "";
    pdfjsLib.getDocument(this.SRC).then(function(a) {
      b.PDF = a;
      for (var c = 1; c <= b.PDF.numPages; c++) {
        a.getPage(c).then(b.renderPDF(c, null, !0));
      }
      b.currentPage = 1;
      b.totalPages.innerHTML = b.PDF.numPages;
      b.totalPagesNum = b.PDF.numPages;
      b.currentZoomVal || (b.currentZoomVal = b.fitZoomVal = b.widthZoomVal = 0);
      b.createDownloadLink();
    });
  };
  b.prototype.renderPDF = function(a, b, f) {
    if (null != a) {
      var c = this;
      c.pageRendering = !0;
      c.spinner.active = !0;
      this.PDF.getPage(a).then(function(d) {
        var g = d.pageInfo.rotate * Math.PI / 180;
        c.pageW = Math.abs(d.view[2] * Math.cos(g) + d.view[3] * Math.sin(g));
        c.pageH = Math.abs(d.view[3] * Math.cos(g) + d.view[2] * Math.sin(g));
        if (0 === c.currentZoomVal || b) {
          g = Math.round(c.WIDTH / c.pageW * 100) / 100;
          var h = Math.round((c.HEIGHT - c.toolbarHeight) / c.pageH * 100) / 100;
          g = Math.min(h, g);
          c.fitZoomVal = g;
          c.widthZoomVal = c.WIDTH / c.pageW;
          c.currentZoomVal = c.fitWidth ? c.widthZoomVal : c.fitZoomVal;
        }
        if (b) {
          c.zoomPage({target:c.zoomLvl});
        } else {
          g = c.currentZoomVal;
          var r = d.getViewport(g);
          c.ctx.height = r.height;
          c.ctx.width = r.width;
          c.pageW *= g;
          c.pageH *= g;
          c.setViewportPos();
          c.viewport.width = c.pageW;
          c.viewport.height = c.pageH;
          c.viewportStyle.width = c.pageW + "px";
          c.viewportStyle.height = c.pageH + "px";
          c.enableTextSelection && (c.textLayerDivStyle.width = c.pageW + "px", c.textLayerDivStyle.height = c.pageH + "px");
          c.ctx.clearRect(0, 0, c.viewport.width, c.viewport.height);
          if (f) {
            g = document.createElement("div");
            g.setAttribute("style", "position: relative");
            h = document.createElement("canvas");
            var n = document.createElement("div");
            n.setAttribute("style", "left: " + c.viewportStyle.left);
            n.className = "textLayer";
            var v = h.getContext("2d");
            n.height = r.height;
            n.width = r.width;
            c.viewportOut.appendChild(g);
            g.appendChild(h);
            g.appendChild(n);
            d.render({canvasContext:v, viewport:r});
            c.enableTextSelection && (c.textLayerDiv.innerHTML = "", d.getTextContent().then(function(b) {
              pdfjsLib.renderTextLayer({textContent:b, container:n, pageIndex:a, viewport:r, textDivs:[]});
            }));
          } else {
            d.render({canvasContext:c.ctx, viewport:r}).promise.then(function() {
              c.pageRendering = !1;
              c.spinner.active = !1;
              null !== c.pageNumPending && (c.renderPDF(c.pageNumPending), c.pageNumPending = null);
            });
          }
          c.enableTextSelection && (c.textLayerDiv.innerHTML = "", d.getTextContent().then(function(b) {
            pdfjsLib.renderTextLayer({textContent:b, container:c.textLayerDiv, pageIndex:a, viewport:r, textDivs:[]});
          }));
        }
      });
    }
  };
  b.prototype.setViewportPos = function() {
    this.viewportStyle.left = this.pageW < this.WIDTH ? (this.WIDTH - this.pageW) / 2 + "px" : 0;
    this.pageH < this.HEIGHT ? (this.viewportStyle.top = (this.HEIGHT - this.pageH - this.toolbarHeight) / 2 + "px", this.viewportStyle.topNum = Math.floor((this.HEIGHT - this.pageH - this.toolbarHeight) / 2) + this.toolbarHeight, this.enableTextSelection && (this.textLayerDivStyle.topNum = Math.floor((this.HEIGHT - this.pageH - this.toolbarHeight) / 2) + this.toolbarHeight)) : this.viewportStyle.top = 0;
    this.enableTextSelection && (this.textLayerDivStyle.left = this.viewportStyle.left, this.textLayerDivStyle.top = this.viewportStyle.top);
  };
  b.prototype.changePDFSource = function(a) {
    this.setSrc(a);
    this.loadPDF();
  };
  b.prototype.zoomInOut = function(a) {
    this.currentZoomVal = Math.round(10 * (Math.round(10 * this.currentZoomVal) / 10 + a)) / 10;
    this.queueRenderPage(this.currentPage);
  };
  b.prototype.zoomIn = function() {
    this.currentZoomVal = Math.round(10 * (Math.round(10 * this.currentZoomVal) / 10 + 0.1)) / 10;
    this.queueRenderPage(this.currentPage);
  };
  b.prototype.zoomOut = function() {
    this.currentZoomVal = Math.round(10 * (Math.round(10 * this.currentZoomVal) / 10 + -0.1)) / 10;
    this.queueRenderPage(this.currentPage);
  };
  b.prototype.zoomPageFit = function() {
    this.currentZoomVal = this.fitZoomVal;
    this.queueRenderPage(this.currentPage);
  };
  b.prototype.zoomWidthFit = function(a, b) {
    a && (this.WIDTH = a, this.HEIGHT = b, this.currentZoomVal = 0);
    this.queueRenderPage(this.currentPage);
  };
  b.prototype.getPageNum = function() {
    return this.PDF.numPages;
  };
  b.prototype.createDownloadLink = function() {
    var a = this;
    this.PDF.getData().then(function(b) {
      b = pdfjsLib.createBlob(b, "application/pdf");
      a.downloadLink = URL.createObjectURL(b);
    });
  };
  b.prototype.download = function(a) {
    a = document.createElement("a");
    var b = this.SRC.split("/");
    a.href = this.downloadLink;
    a.target = "_parent";
    "download" in a && (a.download = decodeURIComponent(b[b.length - 1]), b = a.download.indexOf("?"), 0 < b && (a.download = a.download.substring(0, b)));
    this.reader.appendChild(a);
    a.click();
    a.parentNode.removeChild(a);
  };
  a.Polymer.Reader = b;
})(window);
Polymer({is:"pdf-element", properties:{src:{type:String, reflectToAttribute:!0}, elevation:{type:Number, value:1}, downloadable:{type:Boolean, value:!1}, showFileName:{type:Boolean, value:!1}, showSpinner:{type:Boolean, value:!1}, enableTextSelection:{type:Boolean, value:!1}, fitWidth:{type:Boolean, value:!0}}, behaviors:[ScrollbarBehavior], attached:function() {
}, loadPDF:function() {
  this.debounce("loadPdf", function() {
    this._loadPDF();
  }.bind(this), 500);
}, _loadPDF:function() {
  this.getAttribute("src") && (this.instance.changePDFSource(this.getAttribute("src")), this.currentPage = 1, this.totalPages = this.instance.totalPages, this.fileName = this.src.split("/").pop(), this._setFitWidth(), this.$.zoomIcon.icon = "fullscreen");
}, attributeChanged:function(a, b) {
  "src" === a && (this.resetScrollbar(), this.src = this.getAttribute("src"), this._initializeReader(), this.instance.clearCanvas(), this.async(function() {
    this.src && this.instance.loadPDF();
    this._setFitWidth();
  }, 10));
}, _initializeReader:function() {
  this.instance = new Polymer.Reader(this);
  null != this.src && (this.fileName = this.src.split("/").pop());
  this.currentPage = 1;
}, _setFitWidth:function() {
  this.instance.setFitWidth(this.fitWidth);
}, zoomWidthFit:function(a, b) {
  b && (this.$.viewPortId.style.height = b + "px");
  this.instance.zoomWidthFit(a, b);
  this.updateScrollbar();
}, zoomInOut:function(a) {
  3 <= this.instance.currentZoomVal ? this.instance.currentZoomVal = 3 : 0.1 >= this.instance.currentZoomVal ? this.instance.currentZoomVal = 0.1 : (this.$.zoomIcon.icon = "fullscreen", this.instance.zoomInOut(a));
  this.updateScrollbar();
}, zoomIn:function() {
  this.zoomInOut(0.2);
  this.updateScrollbar();
}, zoomOut:function() {
  this.instance.zoomInOut(-0.2);
  this.updateScrollbar();
}, zoomWidthFit2:function() {
  this.instance.zoomWidthFit();
}, zoomFit:function() {
  this.instance.zoomPageFit();
  this.updateScrollbar();
}, pageNoCommitted:function() {
  var a = parseInt(this.$.input.value);
  this.resetScrollbar();
  1 <= a && a <= this.instance.totalPagesNum ? (this.instance.currentPage = a, this.instance.queueRenderPage(this.instance.currentPage), this.currentPage = a) : this.$.input.value = this.currentPage;
  this.$.input.blur();
}, showPrev:function() {
  1 < this.instance.currentPage && (this.resetScrollbar(), this.instance.currentPage--, this.instance.queueRenderPage(this.instance.currentPage), this.currentPage--);
}, showNext:function() {
  this.instance.totalPagesNum > this.instance.currentPage && (this.resetScrollbar(), this.instance.currentPage++, this.instance.queueRenderPage(this.instance.currentPage), this.currentPage++);
}, updateScrollbar:function() {
  this.async(function() {
    Scrollbar.get(this.$.viewPortId).update();
  }, 500);
}, resetScrollbar:function() {
  this.async(function() {
    var a = Scrollbar.get(this.$.viewPortId);
    a && a.setPosition(0, 0);
  }, 500);
}, close:function() {
  this.fire("close", {});
}, download:function() {
  this.instance.download();
}});
Polymer({is:"te-undo", behaviors:[TranslationsBehavior], attached:function() {
  null == this.undoStack && (this.facade = {update:this.update.bind(this)}, this.reset(), channel.subscribe("executeCommand", function(a) {
    this.handleExecuteCommand(a);
  }.bind(this)), channel.subscribe("doUndo", function(a) {
    this.doUndo();
  }.bind(this)), channel.subscribe("doRedo", function(a) {
    this.doRedo();
  }.bind(this)), channel.subscribe("resetUndo", function(a) {
    this.reset(a);
  }.bind(this)));
}, update:function() {
}, reset:function() {
  this.undoStack = [];
  this.redoStack = [];
}, handleExecuteCommand:function(a) {
  a.command && (this.undoStack.push(a.command), this.redoStack = [], a.command.execute(), this.publishState());
}, doUndo:function() {
  var a = this.undoStack.pop();
  a && (this.redoStack.push(a), a.rollback());
  this.publishState();
}, doRedo:function() {
  var a = this.redoStack.pop();
  a && (this.undoStack.push(a), a.execute());
  this.publishState();
}, publishState:function() {
  channel.publish("undoState", {canUndo:0 < this.undoStack.length, canRedo:0 < this.redoStack.length});
}});
ExecuteBehavior = {executeCommand:function(a) {
  channel.publish("executeCommand", {command:a});
}, redo:function(a) {
  channel.publish("doRedo", {});
}, undo:function(a) {
  channel.publish("doUndo", {});
}};
Polymer({is:"te-block", properties:{rightAlign:{type:Boolean, value:!1}, positionAbsolute:{type:Boolean, value:!1}, useHeight:{type:Boolean, value:!1}, whiteSpacesPreserve:{type:Boolean, value:!0}, helpTabId:{type:String, value:"0"}}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], ready:function() {
  $(this.$.allId).hover(this.focus.bind(this), this.blur.bind(this));
  this.blur();
}, attached:function() {
  !0 !== this.inited && (this.inited = !0, this.getMdFields("customer"), this.getMdFields("company"), this.leftSide = this.querySelector("#leftSide"), this.rightSide = this.querySelector("#rightSide"));
}, getColStyle:function(a, b) {
  return "width:" + a + ";text-align:" + b + ";";
}, isMacroBlock:function(a) {
  return "macro_block" == this.blocktype;
}, isTableBlock:function(a) {
  return "table_block" == this.blocktype;
}, isImageBlock:function(a) {
  return "image_block" == this.blocktype;
}, setBlockType:function(a) {
  this.blocktype = a;
  "table_block" == a && (this.tableColumns = this.$.tableEditDialog.getState().columns);
  "macro_block" == a && this.async(function() {
    var a = this.$.macroEditDialog.getState();
    null == a.macroNum && (a.macroNum = 1, this.macroTitle = "Macro1", this.$.macroEditDialog.setState(a));
  }, 200);
}, setState:function(a) {
  this.blocktype = a.blocktype;
  "table_block" == this.blocktype ? (this.$.tableEditDialog.setState(a), this.tableColumns = a.columns) : "macro_block" == this.blocktype ? (this.macroTitle = "Macro" + a.macroNum, this.$.macroEditDialog.setState(a)) : "image_block" == this.blocktype ? this.async(function() {
    this.$.imageEditDialog.setState(a);
    this.querySelector("#imageId").src = a.croppedImage;
  }, 100) : (null == this.mde && (this.mde = this.createMde()), this.mde.value(a.markdown), this.$.contentId.innerHTML = this.mde.markdown(this.mde.value()), this.positionAbsolute = a.positionAbsolute, this.useHeight = a.useHeight, this.whiteSpacesPreserve = null == a.whiteSpacesPreserve || "preserve" == a.whiteSpacesPreserve, this.rightAlign = "right" == a.textAlign, $(this.$.contentId).css({textAlign:a.textAlign}));
}, getState:function() {
  var a = {};
  "table_block" == this.blocktype ? a = this.$.tableEditDialog.getState() : "macro_block" == this.blocktype ? a = this.$.macroEditDialog.getState() : "image_block" == this.blocktype ? a = this.$.imageEditDialog.getState() : this.mde && (a.markdown = this.mde.value(), a.html = this.mde.markdown(this.mde.value()), a.textAlign = this.rightAlign ? "right" : "left", a.positionAbsolute = this.positionAbsolute, a.useHeight = this.useHeight, a.whiteSpacesPreserve = this.whiteSpacesPreserve ? "preserve" : 
  "ignore-if-surrounding-linefeed");
  var b = {};
  b.left = this.offsetLeft;
  b.right = this.offsetLeft + this.offsetWidth;
  b.bottom = this.offsetTop + this.offsetHeight;
  b.top = this.offsetTop;
  b.width = this.offsetWidth;
  b.height = this.offsetHeight;
  a.boundingBox = b;
  a.blocktype = this.blocktype;
  return a;
}, closeMdeNOK:function() {
  this.mde.value(this.oldText);
  this.rightAlign = this.oldRightAlign;
  this.positionAbsolute = this.oldPositionAbsolute;
  this.useHeight = this.oldUseHeight;
  this.whiteSpacesPreserve = this.oldWhiteSpacesPreserve;
  this.destroyDialog(this.$.mdeDialog);
}, closeMdeOK:function() {
  this.destroyDialog(this.$.mdeDialog);
  this.$.contentId.innerHTML = this.mde.markdown(this.mde.value());
  var a = this, b = clone(this.mde.value()), c = clone(this.oldText), d = this.oldRightAlign ? "right" : "left", f = this.rightAlign ? "right" : "left";
  this.executeCommand({execute:function() {
    console.log("execute:", b);
    console.log("executeMD:", a.mde.markdown(b));
    a.mde.value(b);
    a.$.contentId.innerHTML = a.mde.markdown(b);
    $(a.$.contentId).css({textAlign:f});
  }, rollback:function() {
    console.log("rollback:", c);
    console.log("rollbackMD:", a.mde.markdown(c));
    a.mde.value(c);
    a.$.contentId.innerHTML = a.mde.markdown(c);
    $(a.$.contentId).css({textAlign:d});
  }});
}, closeTableEdit:function(a) {
  var b = this, c = clone(a.detail.state), d = clone(b.oldTableState);
  this.executeCommand({execute:function() {
    b.$.tableEditDialog.setState(c);
    b.tableColumns = c.columns;
  }, rollback:function() {
    b.$.tableEditDialog.setState(d);
    b.tableColumns = d.columns;
  }});
}, closeMacroEdit:function(a) {
  console.log("data:", a.detail.state);
  this.macroTitle = "Macro" + a.detail.state.macroNum;
}, closeImageEdit:function(a) {
  var b = this, c = clone(a.detail.state), d = clone(b.oldImageState), f = b.querySelector("#imageId"), g = b.parentNode.getBoundingClientRect();
  this.executeCommand({execute:function() {
    b.$.imageEditDialog.setState(c);
    f.src = c.croppedImage;
    var a = c.croppedHeight / c.croppedWidth, d = $(b).width() * a;
    $(b).height(d);
    b.setDim(g, b.getBoundingClientRect(), a);
  }, rollback:function() {
    b.$.imageEditDialog.setState(d);
    f.src = d.croppedImage;
    var a = d.croppedHeight / d.croppedWidth, a = $(b).width() * a;
    $(b).height(a);
  }});
}, setDim:function(a, b, c) {
  console.log("pBB:", clone(a));
  console.log("bBB:", clone(b));
  var d = b.bottom - a.top;
  var f = b.right - a.left - a.width;
  console.log("overWidth:", f);
  if (0 < f) {
    f = b.width - f;
    var g = f * c;
    $(this).width(f);
    $(this).height(g);
  }
  f = d - a.height;
  console.log("overHeight:", f);
  0 < f && (g = b.height - f, f = g / c, $(this).width(f), $(this).height(g));
}, getMdFields:function(a) {
  var b = simpl4.util.BaseManager.getNamespace(), b = {service:"simpl4", method:b + ".getAttributes", parameter:{namespace:b, family:a, lang:Simpl4.Cache.getItem("lang")}, async:!0, context:this, failed:function(a) {
    console.error("failed:", a);
  }, completed:function(b) {
    console.log("getMdFields(" + a + "):", clone(b));
    b.map(function(b) {
      b.code = a + "." + b.code;
      return b;
    });
    this[a + "MetaList"] = b;
  }};
  simpl4.util.Rpc.rpcAsync(b);
}, tabSelected:function() {
}, close:function() {
  this.fire("blockclose", {id:this.id});
}, edit:function() {
  "table_block" == this.blocktype ? this.tedit() : "image_block" == this.blocktype ? this.iedit() : "macro_block" == this.blocktype ? this.macroedit() : this.medit();
}, tedit:function() {
  this.oldTableState = this.$.tableEditDialog.getState();
  this.$.tableEditDialog.open();
}, iedit:function() {
  this.$.imageEditDialog.open();
  this.async(function() {
    this.oldImageState = this.$.imageEditDialog.getOldState();
  }, 1000);
}, macroedit:function() {
  this.$.macroEditDialog.open();
  this.async(function() {
    this.oldMacroState = this.$.macroEditDialog.getOldState();
  }, 1000);
}, insertText:function(a) {
  a = a.currentTarget.dataset.name;
  var b = this.mde.codemirror;
  b.somethingSelected() ? b.replaceSelection(a) : b.replaceRange("${" + a + "}", b.getCursor());
}, medit:function() {
  null == this.mde && (this.mde = this.createMde());
  this.oldText = clone(this.mde.value());
  this.oldRightAlign = this.rightAlign;
  this.oldPositionAbsolute = this.positionAbsolute;
  this.oldUseHeight = this.useHeight;
  this.oldWhiteSpacesPreserve = this.whiteSpacesPreserve;
  console.log("oldText:", this.oldText);
  var a = this.querySelector(".gutter");
  this.openDialog(this.$.mdeDialog);
  this.async(function() {
    this.mde.value(this.oldText);
    null == a && this.splitDialog();
  }, 100);
}, createMde:function() {
  this.mde = new SimpleMDE({shortcuts:{drawTable:"Cmd-Alt-T"}, hideIcons:["link", "image", "side-by-side", "fullscreen"], showIcons:["undo", "redo", "table", "horizontal-rule"], insertTexts:{horizontalRule:["", "\n-----\n"], image:["![](http://", ")"], link:["[", "](http://)"], table:["", "\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n"]}, spellChecker:!1, element:this.$.mdeId});
  this.mde.codemirror.on("change", function() {
  }.bind(this));
  return this.mde;
}, splitDialog:function() {
  Split([this.leftSide, this.rightSide], {gutterSize:7, sizes:[60, 40], minSize:[300, 100]});
}, focus:function() {
  console.log("focus");
  $(this.$.handleId).show();
}, blur:function() {
  console.log("blur");
  $(this.$.handleId).hide();
}});
Polymer({is:"te-table", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], getId:function(a, b) {
  return a + b;
}, ready:function() {
  this.columns = [{id:"position", text:tr("te.position"), header1:tr("te.position.header"), header2:"", enabled:!0, width:"11%", align:"left"}, {id:"articleId", text:tr("te.articleId"), header1:tr("te.articleId.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"name", text:tr("te.name"), header1:tr("te.name.header"), header2:"", width:"34%", enabled:!1, align:"left"}, {id:"description", text:tr("te.description"), header1:tr("te.description.header"), header2:"", width:"34%", enabled:!0, 
  align:"left"}, {id:"amount", text:tr("te.amount"), header1:tr("te.amount.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"unit", text:tr("te.unit"), header1:tr("te.unit.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"retailPrice", text:tr("te.retailPrice"), header1:tr("te.retailPrice.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"total", text:tr("te.total"), header1:tr("te.total.header"), header2:"", width:"11%", enabled:!0, align:"left"}, 
  {id:"vat", text:tr("te.vat"), header1:tr("te.vat.header"), header2:"", width:"8%", enabled:!0, align:"left"}];
  this.filterEnabledColumns();
}, onTapColumnAdd:function(a) {
  var b = a.target.dataId;
  a = this.getColumnIndex(this.columns, b, a.target.dataCol);
  console.log("id(" + b + "):", a);
  this.$.columnDialogId.open(a);
}, onTapColumnDel:function(a) {
  a = this.getColumnIndex(this.columns, a.target.dataId, a.target.dataCol);
  this.splice("columns", a, 1);
  this.filterEnabledColumns();
}, columnAdd:function(a) {
  console.log("columnAdd:", a.detail);
  var b = a.detail.index;
  a = clone(a.detail.data);
  a.enabled = !0;
  a.align = "left";
  a.width = "10%";
  a.header2 = "";
  this.splice("columns", b + 1, 0, a);
  this.filterEnabledColumns();
}, closeNOK:function() {
  this.destroyDialog(this.$.tableDialog);
  this.columns = this.oldColumns;
  this.dataref = this.oldDataref;
  this.filterEnabledColumns();
}, closeOK:function() {
  this.destroyDialog(this.$.tableDialog);
  console.log("closeOK:", this.columns);
  this.fire("close-tableedit", {state:{columns:clone(this.columns)}});
}, getColStyle:function(a, b) {
  return "width:" + a + ";text-align:" + b + ";";
}, filterEnabledColumns:function() {
  var a = this.columns.filter(function(a) {
    return a.enabled;
  });
  this.enabledColumns = [];
  this.async(function() {
    this.enabledColumns = clone(a);
    console.log("enabledColumns:", this.enabledColumns);
  });
}, datarefChanged:function(a) {
  this.dataref = a.target.value;
}, header1Changed:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.header1 = a.target.value);
  });
  $(this.$.edittableHeaderId).children("th").each(function(c) {
    this.dataId == b && (this.querySelector("#h1").innerHTML = a.target.value);
  });
}, header2Changed:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.header2 = a.target.value);
  });
  $(this.$.edittableHeaderId).children("th").each(function(c) {
    this.dataId == b && (this.querySelector("#h2").innerHTML = a.target.value);
  });
}, alignChanged:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.align = a.target.value);
  });
  this.filterEnabledColumns();
  this.refreshResize();
}, checkboxChanged:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.enabled = 1 == a.target.checked);
  });
  this.filterEnabledColumns();
  this.refreshResize();
}, refreshResize:function() {
  $(".rc-handle-container", $(this.$.tableDialog)).remove();
  this.async(function() {
    $(this.$.edittableId).resizableColumns({stop:this.storeWidth.bind(this)});
  }, 100);
}, moveToIndex:function(a, b) {
  var c = this.columns.findIndex(function(a) {
    return a.id == b;
  });
  if (a != c) {
    var d = this.columns, f = d[a];
    d[a] = d[c];
    d[c] = f;
  }
}, storeWidth:function(a) {
  var b = this;
  $(this.$.edittableHeaderId).children("th").each(function(a) {
    b.getColumn(b.columns, this.dataId).width = this.style.width;
  });
}, getColumn:function(a, b) {
  for (var c = 0; c < a.length; c++) {
    if (a[c].id == b) {
      return a[c];
    }
  }
  return null;
}, getColumnIndex:function(a, b, c) {
  for (var d = 0; d < a.length; d++) {
    if (a[d].id == b) {
      return d;
    }
  }
  return c;
}, getState:function() {
  return {meta:{dataref:this.dataref}, columns:clone(this.columns)};
}, setState:function(a) {
  a.meta && (this.dataref = a.meta.dataref);
  this.columns = a.columns || this.columns;
  this.filterEnabledColumns();
}, open:function(a) {
  this.filterEnabledColumns();
  this.oldColumns = clone(this.columns);
  this.oldDataref = clone(this.dataref);
  this.openDialog(this.$.tableDialog);
  var b = this;
  $(this.$.edittableId).dragtable({placeholder:"placeholder", helperCells:":not(.footerrow td)", stop:function() {
    $(b.$.edittableHeaderId).children("th").each(function(a, d, f) {
      b.moveToIndex(a, this.dataId);
    });
    b.filterEnabledColumns();
    b.refreshResize();
  }});
  this.refreshResize();
}});
Polymer({is:"te-image", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], ready:function() {
}, closeNOK:function() {
  console.log("closeNOK(old:", this.oldState);
  this.setState(this.oldState);
  this.async(function() {
    this.closeDialog(this.$.imageDialog);
    this.isOpen = !1;
  }, 250);
}, closeOK:function() {
  this.closeDialog(this.$.imageDialog);
  this.fire("close-imageedit", {state:this.getState()});
  this.isOpen = !1;
}, setCropperData:function(a) {
  var b = this.$.cropBoxId.getImage();
  null == a.imageData.width ? this.$.cropBoxId.reset() : (b.cropper("setCropBoxData", a.cropBoxData), b.cropper("setCanvasData", a.canvasData), b.cropper("setImageData", a.imageData), console.debug("setCropperData.state:", a));
}, refreshState:function() {
  var a = this.$.cropBoxId.getImage();
  null == this.currentState && (this.currentState = {});
  var b = a.cropper("getCroppedCanvas");
  console.trace("refreshState.canvas:", b);
  b && (this.currentState.croppedImage = b.toDataURL(), this.currentState.croppedWidth = b.width, this.currentState.croppedHeight = b.height);
  this.currentState.cropBoxData = a.cropper("getCropBoxData");
  this.currentState.canvasData = a.cropper("getCanvasData");
  this.currentState.imageData = a.cropper("getImageData");
  this.currentState.containerData = a.cropper("getContainerData");
  console.debug("refreshState.currentState:", this.currentState);
  return this.currentState;
}, cropperReady:function(a) {
  this.currentState.file = a.detail.event.target.src;
  this.currentState.fileId = a.detail.fileId;
  console.log("Ready.currentFileId:", this.currentState.fileId);
}, getState:function() {
  if (this.notAppliedState) {
    return this.notAppliedState;
  }
  this.$.cropBoxId.gotoEditTab();
  return this.refreshState();
}, setState:function(a) {
  this.isOpen ? this._setState(a) : this.notAppliedState = a;
}, _setState:function(a) {
  null == this.currentState && (this.currentState = {});
  a.file && (console.log("stateFile:", a.file.toString().substring(0, 64)), this.$.cropBoxId.replaceImage(a.fileId, a.file), this.currentState.fileId = a.fileId, this.currentState.file = a.file);
  this.async(function() {
    a.file && this.setCropperData(a);
  }, 150);
}, getOldState:function() {
  return this.oldState;
}, open:function(a) {
  this.isOpen = !0;
  this.openDialog(this.$.imageDialog);
  console.log("ImageDialog.open");
  this.async(function() {
    this.notAppliedState && (this._setState(this.notAppliedState), this.notAppliedState = null);
    this.async(function() {
      this.oldState = clone(this.getState());
    }, 200);
  }, 200);
}});
Polymer({is:"te-macro", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], ready:function() {
  this.data = {};
}, closeNOK:function() {
  console.log("closeNOK(old:", this.oldState);
  this.setState(this.oldState);
  this.async(function() {
    this.closeDialog(this.$.macroDialog);
    this.isOpen = !1;
  }, 250);
}, closeOK:function() {
  this.closeDialog(this.$.macroDialog);
  this.fire("close-macroedit", {state:this.getState()});
  this.isOpen = !1;
}, getState:function() {
  return this.$.formId.getData();
}, setState:function(a) {
  return this.$.formId.setData(a);
}, getOldState:function() {
  return this.oldState;
}, onMacroChanged:function(a) {
  console.log(this.$.macroMenu.selectedItem);
}, open:function(a) {
  this.isOpen = !0;
  this.openDialog(this.$.macroDialog, 500);
  console.log("macroDialog.open");
  this.oldState = clone(this.getState());
}});
Polymer({is:"te-columndialog", behaviors:[DialogBehavior, TranslationsBehavior], onTap:function() {
  if (this.$.formId.validate()) {
    var a = this.$.formId.getData();
    this.fire("columndialog-ok", {index:this.index, data:a});
    this.destroyDialog(this.$.dialogId);
  }
}, close:function(a) {
  this.sd.parent().css("z-index", "inherit");
  this.destroyDialog(this.$.dialogId);
}, open:function(a) {
  this.index = a;
  this.$.formId.setData({});
  a = this.openDialog(this.$.dialogId, "inherit");
  a.parent().css("z-index", "555112");
  this.sd = a;
}});
Polymer({is:"te-paperarea", listeners:{blockclose:"blockclose"}, properties:{mainTabId:{type:String}, paperWidth:{type:String}, paperHeight:{type:String}, paperName:{type:String}}, behaviors:[TranslationsBehavior, ExecuteBehavior], isNotMacroPage:function(a) {
  return !a.startsWith("macro");
}, _createBlockFromState:function(a) {
  console.log("paperarea.setState(" + this.paperName + "," + i + "):", a);
  var b = a.boundingBox;
  this.createBlockFromState(a.blocktype, b.left, b.top, b.width, b.height).setState(a);
}, setState:function(a) {
  var b = a.absolute || a["static"];
  a = a.flow || [];
  for (var c = 0; c < b.length; c++) {
    this._createBlockFromState(b[c]);
  }
  for (c = 0; c < a.length; c++) {
    this._createBlockFromState(a[c]);
  }
}, getState:function() {
  for (var a = this.$.canvasId.querySelectorAll("te-block"), b = [], c = [], d = 0; d < a.length; d++) {
    var f = a[d].getState();
    !1 === f.positionAbsolute || "table_block" == f.blocktype || "additionalContent" == this.paperName || this.paperName.startsWith("macro") ? c.push(f) : b.push(f);
  }
  c.sort(function(a, b) {
    return a.boundingBox.top - b.boundingBox.top;
  });
  console.log("blockListFlow:", c);
  return {flow:c, absolute:b};
}, clear:function() {
  for (var a = this.$.canvasId.querySelectorAll("te-block"), b = 0; b < a.length; b++) {
    a[b].remove();
  }
}, setPaperSize:function() {
  if (null != this.dataPage1Form) {
    var a = this.$.canvasId, b = null, c = null;
    "page1Content" == this.paperName && (b = this.paperHeight - (this.dataPage1Form.topMargin + this.dataPage1Form.bottomMargin + this.dataPage1Form.headerHeight + this.dataPage1Form.footerHeight), c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "additionalContent" == this.paperName && (b = this.paperHeight - (this.dataPage1Form.topMargin + this.dataPage1Form.bottomMargin + this.dataPage1Form.headerHeight + this.dataPage1Form.footerHeight), c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro1" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro2" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro3" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page1Header" == this.paperName && (b = this.dataPage1Form.headerHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page1Footer" == this.paperName && (b = this.dataPage1Form.footerHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page2Header" == this.paperName && (b = this.dataPage2Form.headerHeight, c = this.paperWidth - (this.dataPage2Form.leftMargin + this.dataPage2Form.rightMargin));
    "page2Footer" == this.paperName && (b = this.dataPage2Form.footerHeight, c = this.paperWidth - (this.dataPage2Form.leftMargin + this.dataPage2Form.rightMargin));
    a.style.height = b + "px";
    a.style.width = c + "px";
  }
}, moveBlocksInto:function() {
  for (var a, b = this.$.canvasId, c = b.querySelectorAll("te-block"), b = b.getBoundingClientRect(), d = 0; d < c.length; d++) {
    var f = c[d];
    a = f.getBoundingClientRect();
    var g = a.bottom - b.top, h = a.right - b.left - b.width;
    0 < h && (a = $(f).offset(), $(f).offset({left:a.left - h, top:a.top}));
    h = g - b.height;
    0 < h && (a = $(f).offset(), $(f).offset({left:a.left, top:a.top - (h + 2)}));
  }
}, closeMenu:function() {
  this.$.blockMenuId.close();
  var a = new MouseEvent("mouseup", {view:window, bubbles:!0, cancelable:!0});
  this.$.canvasId.dispatchEvent(a);
}, attached:function() {
  if (!this.atta) {
    this.atta = !0;
    channel.subscribe("globalSetupPage1", function(a) {
      this.dataPage1Form = a.setup;
    }.bind(this));
    channel.subscribe("globalSetupPage2", function(a) {
      this.dataPage2Form = a.setup;
    }.bind(this));
    channel.subscribe("mainTabChanged", function(a) {
      this.async(function() {
        this.setPaperSize();
        this.moveBlocksInto();
      }, 250);
    }.bind(this));
    channel.subscribe("scrollOffset", function(a) {
      if ("page1Content" == this.paperName || "additionalContent" == this.paperName) {
        var b = a.offset.y;
        this.debounce("xxx", function() {
          $(this.$.toolbarId).offset();
          this.$.toolbarId.style.top = b + "px";
        }, 10);
      }
    }.bind(this));
    this.zoom = 1;
    this.setZoom();
    var a = this;
    this.async(function() {
      this.rect = this.$.canvasId.getBoundingClientRect();
    }, 100);
    this.async(function() {
      $(".draggable").drag({start:function(b) {
        a.rect = a.$.canvasId.getBoundingClientRect();
        b.dataTransfer.effectAllowed = $.dnd.EFFECT_ALL;
        $(this).addClass("active");
        console.log("start:", b.currentTarget.dataset.block);
        b.dataTransfer.setData("text", b.currentTarget.dataset.block);
      }, end:function(b) {
        console.log("end:", b);
        $(this).removeClass("active");
        a.fire("enddrag", {});
        a.closeMenu();
      }});
      $(".droppable", this).drop({drop:function(b) {
        var c = b.dataTransfer.getData("text");
        $(this).removeClass("active");
        a.createBlock(c, b.originalEvent.clientY, b.originalEvent.clientX);
      }, over:function(a) {
        a.dataTransfer.dropEffect = $.dnd.EFFECT_COPY;
      }, enter:function(a) {
        console.log("enter:", a);
      }, leave:function(a) {
        console.log("leave:", a);
      }});
    }, 100);
  }
}, blockclose:function(a) {
  console.log("close:", a);
  var b = this, c = $("#" + a.detail.id, this);
  this.executeCommand({execute:function() {
    c.detach();
    b.makeBlockDraggable();
  }, rollback:function() {
    c.appendTo(b.$.canvasId, b);
    b.makeBlockDraggable();
  }});
}, createBlockFromState:function(a, b, c, d, f) {
  var g = document.createElement("te-block");
  g.id = "blockId" + this.getId();
  g.className += "block";
  g.setBlockType(a);
  $("#canvasId", this).append(g);
  $(g).css({top:c, left:b, height:f + "px", width:d + "px"});
  this.makeBlockDraggable();
  return g;
}, createBlock:function(a, b, c) {
  var d = document.createElement("te-block");
  d.id = "blockId" + this.getId();
  d.className += "block";
  d.setBlockType(a);
  var f = (c - 75 - this.rect.left) / this.zoom;
  0 > f && (f = 0);
  var g = "150px";
  "table_block" == a && (f = 0, g = "100%");
  "macro_block" == a && (f = 0, g = "100%");
  this.async(function() {
    $(d).css({top:(b - this.rect.top) / this.zoom, left:f, height:"70px", width:g});
    this.makeBlockDraggable();
    this.moveBlocksInto();
  }, 10);
  var h = this;
  this.executeCommand({execute:function() {
    $("#canvasId", h).append(d);
  }, rollback:function() {
    $(d).detach();
  }});
}, makeBlockDraggable:function() {
  var a = this;
  $(".block", this).draggable({start:function(a, c) {
    console.log("start:", c);
  }, stop:function(b, c) {
    console.log("stop:", c);
    var d = clone(c.originalPosition), f = clone(c.position), g = c.helper.attr("id");
    a.executeCommand({execute:function() {
      $("#" + g, a).css({top:f.top, left:f.left});
    }, rollback:function() {
      $("#" + g, a).css({top:d.top, left:d.left});
    }});
  }, containment:this.$.canvasId, handle:this.$.contentId, drag:function(a, c) {
  }.bind(this), scroll:!1});
  $(".block", this).resizable({start:function(a, c) {
    console.log("start:", c);
  }, stop:function(b, c) {
    console.log("resizable:", c);
    var d = clone(c.originalSize), f = clone(c.size), g = c.element.attr("id");
    a.executeCommand({execute:function() {
      $("#" + g, a).css({height:f.height, width:f.width});
    }, rollback:function() {
      $("#" + g, a).css({height:d.height, width:d.width});
    }});
  }, minHeight:15, minWidth:60, containment:this.$.canvasId});
}, getId:function() {
  null == this.idCounter ? this.idCounter = 1 : this.idCounter++;
  return this.idCounter;
}, zoomOutAction:function() {
  this.zoom -= 0.1;
  0.4 > this.zoom && (this.zoom = 0.4);
  this.setZoom();
}, zoomInAction:function() {
  this.zoom += 0.1;
  2 < this.zoom && (this.zoom = 2);
  this.setZoom();
}, zoom100Action:function() {
  this.zoom = 1;
  this.setZoom();
}, setZoom:function() {
  this.zoom = Number(this.zoom.toFixed(2));
  console.log("zoom:", this.zoom);
  this.$.canvasId.setAttribute("style", "zoom:" + this.zoom);
  this.setPaperSize();
  channel.publish("zoom", {name:this.paperName});
}});
Polymer({is:"template-editor", listeners:{}, properties:{mainTabId:{type:String, value:"0"}}, behaviors:[TranslationsBehavior, LobiboxBehavior, ExecuteBehavior], isAddContent:function(a) {
  return "1" == a;
}, setState:function(a) {
  console.log("te-editor.setState:", a);
  this.lockValueChangeEvent = !0;
  var b = this.mainTabId;
  this.mainTabId = "0";
  this.page1FormId.setData(a.page1);
  this.page2FormId.setData(a.page2);
  this.$.macro1Enabled.checked = a.macro1Enabled;
  this.$.macro2Enabled.checked = a.macro2Enabled;
  this.$.macro3Enabled.checked = a.macro3Enabled;
  this.$.headerAsPage1.checked = a.headerAsPage1;
  this.$.footerAsPage1.checked = a.footerAsPage1;
  this.$.paramAsPage1.checked = a.paramAsPage1;
  channel.publish("globalSetupPage1", {setup:clone(a.page1)});
  channel.publish("globalSetupPage2", {setup:clone(a.page2)});
  Object.keys(a.areas).forEach(function(b) {
    var c = this.querySelector("te-paperarea#" + b);
    this.mainTabId = c.parentNode.getAttribute("main-item-id");
    if (1 != a.headerAsPage1 || "page2Header" != b) {
      if (1 != a.footerAsPage1 || "page2Footer" != b) {
        c.setState(a.areas[b]), c.setPaperSize();
      }
    }
  }.bind(this));
  this.mainTabId = b;
  this.lockValueChangeEvent = !1;
}, getState:function() {
  for (var a = this.mainTabId, b = {areas:{}}, c = this.querySelectorAll("te-paperarea"), d = 0; d < c.length; d++) {
    var f = c[d];
    this.mainTabId = f.parentNode.getAttribute("main-item-id");
    b.areas[f.id] = f.getState();
  }
  this.$.headerAsPage1.checked && (b.areas.page2Header = b.areas.page1Header);
  this.$.footerAsPage1.checked && (b.areas.page2Footer = b.areas.page1Footer);
  b.page1 = this.page1FormId.getData();
  b.page2 = this.$.paramAsPage1.checked ? b.page1 : this.page2FormId.getData();
  this.mainTabId = a;
  b.macro1Enabled = this.$.macro1Enabled.checked;
  b.macro2Enabled = this.$.macro2Enabled.checked;
  b.macro3Enabled = this.$.macro3Enabled.checked;
  b.headerAsPage1 = this.$.headerAsPage1.checked;
  b.footerAsPage1 = this.$.footerAsPage1.checked;
  b.paramAsPage1 = this.$.paramAsPage1.checked;
  console.log("te-editor.getState:", b);
  return b;
}, clear:function() {
  this.lockValueChangeEvent = !0;
  for (var a = this.querySelectorAll("te-paperarea"), b = 0; b < a.length; b++) {
    a[b].clear();
  }
  this.setDefaultPaperSize(!1);
  this.lockValueChangeEvent = !1;
}, onTapClear:function() {
  var a = this, b = clone(this.getState());
  this.executeCommand({execute:function() {
    a.clear();
  }, rollback:function() {
    a.setState(b);
  }});
}, getFo:function(a) {
  a = {service:"simpl4", method:"dashboard.getBillPdf", parameter:{wawidoc:JSON.stringify(a)}, async:!0, context:this, failed:function(a) {
    console.error("getFo.failed:", a);
  }, completed:function(a) {
    console.debug("getFo:", a);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, mainTabSelected:function(a) {
  channel.publish("mainTabChanged", {selectedTab:(a.srcElement || a.target).selected});
  this.async(function() {
    this.updateScrollbar();
  }, 100);
}, attached:function() {
  this.page1FormId = this.querySelector("#page1FormId");
  this.page2FormId = this.querySelector("#page2FormId");
  window.addEventListener("resize", this.setScrollAreaHeight.bind(this));
  this._initScrollbar();
  this.canUndo = this.canRedo = !1;
  this.currentTemplateName = null;
  channel.subscribe("undoState", function(a) {
    this.canUndo = a.canUndo;
    this.canRedo = a.canRedo;
  }.bind(this));
  channel.subscribe("zoom", function(a) {
    this.updateScrollbar();
  }.bind(this));
  this.setDefaultPaperSize(!0);
}, setDefaultPaperSize:function(a) {
  this.dataPage1Form = {leftMargin:28, rightMargin:28, topMargin:28, bottomMargin:28, headerHeight:100, footerHeight:100};
  this.dataPage2Form = {leftMargin:28, rightMargin:28, topMargin:28, bottomMargin:28, headerHeight:100, footerHeight:100};
  this.$.headerAsPage1.checked = !0;
  this.$.footerAsPage1.checked = !0;
  this.$.paramAsPage1.checked = !0;
  this.$.macro1Enabled.checked = !1;
  this.$.macro2Enabled.checked = !1;
  this.$.macro2Enabled.checked = !1;
  a ? this.async(function() {
    channel.publish("globalSetupPage1", {setup:clone(this.dataPage1Form)});
    channel.publish("globalSetupPage2", {setup:clone(this.dataPage1Form)});
    this.async(function() {
      this.$.page1Content.setPaperSize();
      this.$.additionalContent.setPaperSize();
    }, 100);
  }, 100) : (channel.publish("globalSetupPage1", {setup:clone(this.dataPage1Form)}), channel.publish("globalSetupPage2", {setup:clone(this.dataPage1Form)}), this.$.page1Content.setPaperSize(), this.$.additionalContent.setPaperSize());
}, updateScrollbar:function() {
  this.setScrollAreaHeight();
  this.async(function() {
    this._scrollbar.scrollTo(0, 0);
    this._scrollbar.update(!0);
  }, 100);
}, onSetup1ValueChanged:function(a) {
  !this.lockValueChangeEvent && this.page1FormId.validate() && this.debounce("onSetup1ValueChanged", function() {
    var b = a.detail.name, c = this.page1FormId.getData(), d = clone(this.dataPage1Form), f = this.dataPage1Form[b], g = c[b];
    this.dataPage1Form[b] = c[b];
    var h = clone(this.dataPage1Form), m = this;
    this.executeCommand({execute:function() {
      channel.publish("globalSetupPage1", {setup:h});
      m.updateFormFieldWithLock(m.page1FormId, b, g);
    }, rollback:function() {
      channel.publish("globalSetupPage1", {setup:d});
      m.updateFormFieldWithLock(m.page1FormId, b, f);
    }});
  }, 1000);
}, onSetup2ValueChanged:function(a) {
  !this.lockValueChangeEvent && this.page2FormId.validate() && this.debounce("onSetup2ValueChanged", function() {
    var b = a.detail.name, c = clone(this.dataPage1Form), d = this.page2FormId.getData(), f = this.dataPage2Form[b], g = d[b];
    this.dataPage2Form[b] = d[b];
    var h = clone(this.dataPage1Form), m = this;
    this.executeCommand({execute:function() {
      channel.publish("globalSetupPage2", {setup:h});
      m.updateFormFieldWithLock(m.page2FormId, b, g);
    }, rollback:function() {
      channel.publish("globalSetupPage2", {setup:c});
      m.updateFormFieldWithLock(m.page2FormId, b, f);
    }});
  }, 1000);
}, updateFormFieldWithLock:function(a, b, c) {
  var d = [];
  d[b] = c;
  this.lockValueChangeEvent = !0;
  a.updateData(d, !0);
  this.lockValueChangeEvent = !1;
}, setScrollAreaHeight:function() {
  var a = window.innerHeight - 193;
  this.$.scrollId.style.height = a + 30 + "px";
  return a;
}, _initScrollbar:function() {
  var a = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  this._scrollbar = window.Scrollbar.init(this.$.scrollId, {speed:a ? 1 : 4, damping:a ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10});
  this.setScrollAreaHeight();
  this.async(function() {
    this._scrollbar.update(!0);
  }, 100);
  this._scrollbar.addListener(function(a) {
    channel.publish("scrollOffset", {offset:a.offset});
  }.bind(this));
}, redoAction:function() {
  this.redo();
}, undoAction:function() {
  this.undo();
}, onTapSave:function() {
  this.debounce("onTapSave", function() {
    this._onTapSave();
  }, 250);
}, _onTapSave:function() {
  this.saveState(this.currentTemplateName, null);
}, onTapSaveUnder:function() {
  this.getState();
  var a = Lobibox.prompt("text", {height:200, title:tr("te.enter_name"), attrs:{pattern:"[A-Za-z0-9]{3,}", value:this.currentTemplateName}, callback:function(b, c, d) {
    console.log("callback:", a.getValue());
    _.isEmpty(a.getValue()) || this.saveState(a.getValue(), null);
  }.bind(this)});
}, saveState:function(a, b) {
  var c = b || this.getState();
  null == b && (this.currentTemplateName = a);
  a = {service:"registry", method:"set", parameter:{key:"/dashboard/template/" + a, permissions:{"add:role:reader":"ALLOW_READ"}, attributes:{subject:"template"}, value:JSON.stringify(c)}, async:!0, context:this, failed:function(a) {
    console.error("saveTemplate:", a);
    null != a && (0 < a.message.indexOf("OSecurity") ? this.notify(tr("nopermission"), "error", 8000) : this.notify(tr("error"), "error", 8000));
  }, completed:function(a) {
    this.notify(tr("te.template_saved"), "success", 8000);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, selectFromList:function(a, b, c, d) {
  var f = Lobibox.window({title:tr("te.select_template"), width:300, height:400, modal:!0, content:function() {
    return $(a);
  }, buttons:{select:{text:tr("button.select")}, close:{text:tr("button.cancel"), closeOnClick:!0}}, callback:function(a, h, m) {
    if ("select" === h && (a = a.$el[0].querySelector("#templateMenuId").selected, null != a)) {
      var g = clone(this.getState());
      this.currentTemplateName = c[a];
      var r = clone(JSON.parse(b[a]));
      if (d) {
        r.name = this.currentTemplateName, d(r);
      } else {
        var n = this;
        this.executeCommand({execute:function() {
          n.clear();
          n.setState(r);
        }, rollback:function() {
          n.clear();
          n.setState(g);
        }});
      }
      f.destroy();
    }
  }.bind(this)});
}, onTapLoad:function() {
  this.debounce("onTapLoad", function() {
    this._onTapLoad(null);
  }, 250);
}, _onTapLoad:function(a) {
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"getAll", parameter:{attributes:{subject:"template"}}, async:!0, context:this, failed:function(a) {
    console.error("getTemplates:", a);
    this.notify(tr("error"), "error", 8000);
  }, completed:function(b) {
    console.log("getTemplates.ret:", b);
    var c = '<paper-menu id="templateMenuId">', d = [], f = [], g;
    for (g in b) {
      var h = b[g].key, h = h.substring(h.lastIndexOf("/") + 1), c = c + ('<paper-item style="min-height:24px; font-size:14px;">' + h + "</paper-item>");
      d.push(b[g].value);
      f.push(h);
    }
    this.selectFromList(c + "</paper-menu>", d, f, a);
  }});
}, onTapExport:function() {
  this._onTapLoad(function(a) {
    console.log("onTapExport:", a);
    var b = this.querySelector('input#tempId[type="file"]');
    b.onchange = function(b) {
      b = b.target.files[0];
      console.log("file:", b);
      var c = new Blob([JSON.stringify(a, null, 2)], {type:"text/json"});
      saveAs(c, b.name);
    }.bind(this);
    $(b).trigger("click");
  }.bind(this));
}, onTapImport:function() {
  var a = this, b = this.querySelector('input#tempId[type="file"]');
  b.onchange = function(b) {
    var c = b.target.files;
    console.log("files:", b);
    var f = new FileReader;
    f.onload = function(b) {
      return function(c) {
        c = -1 == b.name.lastIndexOf(".") ? b.name : b.name.substring(0, b.name.lastIndexOf("."));
        var d = JSON.parse(f.result);
        console.log("basename:", c);
        console.log("state:", d);
        a.saveState(c, d);
      };
    }(c[0]);
    f.readAsBinaryString(c[0]);
  }.bind(this);
  $(b).trigger("click");
}});
(function() {
  Polymer({is:"paper-collapse-item", properties:{header:String, icon:String, src:String, opened:Boolean, _toggleIcon:{type:String, computed:"_computeToggleIcon(opened)"}}, _toggleOpened:function(a) {
    this.opened = (a = this.$.contentId.children) && a.length ? !this.opened : !1;
  }, _computeToggleIcon:function(a) {
    return a ? "icons:expand-less" : "icons:expand-more";
  }});
})();
Polymer({is:"fade-in-slide-from-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(100%)", opacity:"0"}, {transform:"translateX(50%)", opacity:"0"}, {transform:"none", opacity:"1"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-out-slide-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none", opacity:"1"}, {transform:"translateX(50%)", opacity:"1"}, {transform:"translateX(100%)", opacity:"0"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-in-slide-from-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(-100%)", opacity:"0"}, {transform:"translateX(-50%)", opacity:"0"}, {transform:"none", opacity:"1"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-out-slide-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none", opacity:"1"}, {transform:"translateX(-50%)", opacity:"0"}, {transform:"translateX(-100%)", opacity:"0"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
window.Stepper = window.Stepper || {};
Stepper.StepLabelBehavior = {properties:{icon:{type:String, computed:"_computeIcon(saved, editable)"}, opened:{type:Boolean, reflectToAttribute:!0}, selectable:{type:Boolean, reflectToAttribute:!0}, editable:{type:Boolean, reflectToAttribute:!0}, label:{type:String, notify:!0}, optional:{type:Boolean, notify:!0}, saved:{type:Boolean, reflectToAttribute:!0}, index:{type:Number}, stepperData:{type:Object}}, _computeIcon:function(a, b) {
  return a ? b ? "editor:mode-edit" : "done" : "";
}, _computeIsIconBadge:function(a) {
  return 0 < a.length;
}};
Polymer({is:"step-horizontal-label", behaviors:[Stepper.StepLabelBehavior], properties:{alternativeLabel:{type:Boolean, value:!1, reflectToAttribute:!0}}});
Polymer({is:"step-vertical-label", properties:{canSkip:{type:Boolean}}, behaviors:[Stepper.StepLabelBehavior]});
Polymer({is:"paper-step", behaviors:[Polymer.IronValidatableBehavior, Polymer.NeonAnimatableBehavior, Polymer.PaperItemBehavior, Polymer.PaperRippleBehavior], properties:{saved:{type:Boolean, value:!1, notify:!0, readOnly:!0}, editable:{type:Boolean, value:!1}, index:{type:Number, notify:!0, readOnly:!0}, topPos:{type:Number, value:100}, _previousSaved:{type:Boolean, readOnly:!0}, optional:{type:Boolean, value:!1}, selectable:{type:Boolean, computed:"_computeSelectable(_stepperData.linear, saved, editable, _previousSaved)", 
reflectToAttribute:!0, notify:!0}, disabled:{computed:"_computeDisabled(selectable)"}, label:{type:String, value:""}, opened:{type:Boolean, value:!1, notify:!0}, animationConfig:{readOnly:!0}, entryAnimation:{readOnly:!0}, exitAnimation:{readOnly:!0}, vertical:{type:Boolean, readOnly:!0, reflectToAttribute:!0}, horizontalHigherEntryAnimation:{type:String}, horizontalHigherExitAnimation:{type:String}, horizontalLowerEntryAnimation:{type:String}, horizontalLowerExitAnimation:{type:String}, _alternativeLabel:{type:Boolean, 
readOnly:!0}, _optionalText:{type:Boolean, readOnly:!0}, _attrForPrimaryButtonText:{type:String, readOnly:!0}, _stepper:{type:Object, readOnly:!0}, _stepperData:{type:Object, readOnly:!0}, _canSkip:{type:Boolean, readOnly:!0}, _hasBackStep:{type:Boolean, readOnly:!0}}, listeners:{"paper-step-vertical-skip-tapped":"skip", "paper-step-vertical-back-tapped":"back", "paper-step-vertical-continue-tapped":"continue", tap:"_tapHandler"}, observers:["_toggleClassPosition(index, _stepperData.stepNumber, vertical)", 
"_updateSlideshowViewportTop(optional, _alternativeLabel, vertical)", "_verticalChange(vertical)", "_focusedChanged(receivedFocusFromKeyboard)", "_labelElementChanged(_labelElement)"], _focusedChanged:function(a) {
  if (a) {
    this.ensureRipple();
    var b = this._rippleContainer.$.badge.getBoundingClientRect();
    this._ripple.downAction({detail:{x:b.left + 12, y:b.top + 12}});
  }
  this.hasRipple() && (this._ripple.holdDown = a);
}, _tapHandler:function(a) {
  var b = Polymer.dom(a).rootTarget;
  b !== this && b !== this._rippleContainer && a.stopImmediatePropagation();
}, skip:function() {
  this._stepper.progress();
}, back:function() {
  this._stepper.back();
}, save:function() {
  return this.saved && !this.editable || !this.validate() ? !1 : (this.saved ? this.fire("paper-step-updated") : (this._setSaved(!0), this.fire("paper-step-saved")), !0);
}, continue:function() {
  return this.save() ? (this._stepper.progress(), !0) : !1;
}, _updateSlideshowViewportTop:function(a, b, c) {
  c || this.async(function() {
    this.$$("#slideshowViewport").style.top = this.topPos + "px";
    this.fire("step-horizontal-label-resize");
  }, 1);
}, _toggleClassPosition:function(a, b, c) {
  this.async(function() {
    var d = this.$$(c ? "#verticalStepLabel" : "#horizontalStepLabel");
    this.toggleClass("first-step", 1 == a, d);
    this.toggleClass("last-step", a == b, d);
  });
}, _updateAnimationConfig:function() {
  var a = this.$$("#contentWrapper");
  this._setAnimationConfig({"higher-step-entry":{node:a, name:this.horizontalHigherEntryAnimation}, "higher-step-exit":{node:a, name:this.horizontalHigherExitAnimation}, "lower-step-entry":{node:a, name:this.horizontalLowerEntryAnimation}, "lower-step-exit":{node:a, name:this.horizontalLowerExitAnimation}});
}, _verticalChange:function(a) {
  this.async(function() {
    Polymer.dom(this.$$(a ? "#paperStepWrapper" : "#contentWrapper")).appendChild(this.$$("content") || this.create("content"));
    this._ripple = !1;
    this._rippleContainer = this.$$(a ? "#verticalStepLabel" : "#horizontalStepLabel");
    a || this._updateAnimationConfig();
  }.bind(this));
}, _computeSelectable:function(a, b, c, d) {
  return (!a || d) && (!b || c) || c && b;
}, _computeDisabled:function(a) {
  return !a;
}, _choosePrimaryButtonText:function(a) {
  return this._stepperData[a];
}, ensureRipple:function(a) {
  if (!this.hasRipple()) {
    this._ripple = this._createRipple();
    this._ripple.noink = this.noink;
    var b = this._rippleContainer || this.root;
    b && Polymer.dom(b.root).appendChild(this._ripple);
    if (a) {
      var b = Polymer.dom(this._rippleContainer || this), c = Polymer.dom(a).rootTarget;
      b.deepContains(c) && this._ripple.uiDownAction(a);
    }
  }
}});
"use strict";
Polymer({is:"paper-stepper", behaviors:[Polymer.IronMenuBehavior, Polymer.NeonAnimationRunnerBehavior, Polymer.IronResizableBehavior], properties:{opened:{type:Boolean, computed:"_computeOpened(_selectedIndex)", observer:"_openedChanged", notify:!0, reflectToAttribute:!0}, alternativeLabel:{type:Boolean, value:!1}, vertical:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, backText:{type:String, value:"BACK"}, finishText:{type:String, value:"FINISH"}, continueText:{type:String, value:"CONTINUE"}, 
skipText:{type:String, value:"SKIP"}, optionalText:{type:String, value:"Optional"}, updateText:{type:String, value:"UPDATE"}, linear:{type:Boolean, value:!1}, completed:{type:Boolean, value:!1, notify:!0, computed:"_computeCompleted(stepNumber, savedStepNumber)"}, hasSkipButton:{type:Boolean, value:!1}, hasBackButton:{type:Boolean, value:!1}, hasFinishButton:{type:Boolean, value:!1}, stepNumber:{type:Number, notify:!0, computed:"_computeStepNumber(items.length)"}, savedStepNumber:{type:Number, notify:!0, 
readOnly:!0}, selectedAttribute:{value:"opened", readOnly:!0}, selectable:{value:"paper-step"}, mutli:{value:!1, readOnly:!0}, responsiveCheckFrequence:{type:Number, value:200}, animateInitialSelection:{type:Boolean, value:!1}, horizontalHigherEntryAnimation:{type:String, value:"fade-in-slide-from-right-animation"}, horizontalHigherExitAnimation:{type:String, value:"fade-out-slide-right-animation"}, horizontalLowerEntryAnimation:{type:String, value:"fade-in-slide-from-left-animation"}, horizontalLowerExitAnimation:{type:String, 
value:"fade-out-slide-left-animation"}, _skipStepIndex:{type:Number, computed:"_compute_skipStepIndex(_selectedIndex)"}, _canSkip:{type:Boolean, notify:!0, computed:"_isntNull(_skipStepIndex)"}, _backStepIndex:{type:Number, computed:"_compute_backStepIndex(_selectedIndex)"}, _hasBackStep:{type:Boolean, computed:"_isntNull(_backStepIndex)"}, _selectedIndex:{type:Number, observer:"_selectedIndexChanged", readOnly:!0, value:-1}, _attrForSelectedStepPrimaryButtonText:{type:String, computed:"_compute__attrForSelectedStepPrimaryButtonText(_selectedIndex, stepNumber)"}}, 
_previousAnimatedStep:null, _previousSelected:null, keyBindings:{left:"_onLeftKey", right:"_onRightKey"}, listeners:{"iron-items-changed":"_initializeSteps", "paper-step-saved":"_stepSaved", transitionend:"_transitionEnd", "step-horizontal-label-resize":"_updateStepperClosedMaxHeight", "iron-resize":"_resizeHandler", "neon-animation-finish":"_onNeonAnimationFinish"}, observers:["_forwardCanSkip(_canSkip, selectedItem)", "_forwardHasBackStep(_hasBackStep, selectedItem)", "_forwardVertical(vertical)", 
"_forwardAlternativeLabel(alternativeLabel)", "_forwardStepperData(linear, backText, optionalText, finishText, continueText, skipText, updateText, hasSkipButton, hasBackButton)"], attached:function() {
  this._responsiveCheck();
}, back:function() {
  this.selectIndex(this._backStepIndex);
}, continue:function() {
  this.selectedItem && this.selectedItem.save() && this.progress();
}, progress:function() {
  if (!this.stepNumber) {
    return !1;
  }
  if (this.completed) {
    return this.selected = null, !0;
  }
  for (var a = (this._selectedIndex + 1) % this.stepNumber; a != this._selectedIndex; a = (a + 1) % this.stepNumber) {
    if (this.items[a].selectable) {
      return this.selectIndex(a), this.fire("paper-stepper-progressed"), !0;
    }
  }
  return !1;
}, reset:function() {
  this._setSavedStepNumber(0);
  this.selected = null;
  this.items.length && (this.items.map(function(a) {
    a._setSaved(!1);
    a._set_previousSaved(!1);
  }), this.items[0]._set_previousSaved(!0));
}, get _isRTL() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _onLeftKey:function(a) {
  this._isRTL ? this._focusNext() : this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onRightKey:function(a) {
  this._isRTL ? this._focusPrevious() : this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _selectSelected:function(a) {
  if (a = this._valueToItem(this.selected)) {
    var b = a.selectable;
    if (void 0 == b) {
      return;
    }
    if (!b) {
      this._previousSelected && this._previousSelected.selectable && (this.selected = this._valueForItem(this._previousSelected));
      this._previousSelected = null;
      return;
    }
  }
  this._selection.select(a);
  this._previousSelected = a;
  this._set_selectedIndex(this.indexOf(a));
  this.fallbackSelection && this.items.length && void 0 === this._selection.get() && (this.selected = this.fallbackSelection);
}, _updateStepperClosedMaxHeight:function() {
  this.debounce("updateStepperClosedMaxHeight", function() {
    this.customStyle["--label-wrapper-height"] = this.$$("#content-wrapper").clientHeight + "px";
    this.updateStyles();
  });
}, _openedChanged:function(a, b) {
  this.vertical || void 0 == b || this.toggleClass("collapsing", !0);
}, _transitionEnd:function(a) {
  "max-height" == a.propertyName && this.toggleClass("collapsing", !1);
}, _computeOpened:function(a) {
  return 0 <= a;
}, _stepSaved:function(a) {
  (a = this.items[this.indexOf(a.target) + 1]) && a._set_previousSaved(!0);
  this._setSavedStepNumber(this.savedStepNumber + 1);
}, _forwardVertical:function(a) {
  this.stepNumber && this.items.map(function(b) {
    b._setVertical(a);
  });
  this.setAttribute("role", a ? "menu" : "menubar");
}, _forwardStepperData:function(a, b, c, d, f, g, h, m, u) {
  this.stepNumber && this.items.map(function(r) {
    r._set_stepperData({linear:a, backText:b, optionalText:c, finishText:d, continueText:f, skipText:g, updateText:h, hasSkipButton:m, hasBackButton:u, stepNumber:this.stepNumber});
  }.bind(this));
}, _forwardAlternativeLabel:function(a) {
  this.stepNumber && this.items.map(function(b) {
    b._set_alternativeLabel(a);
  });
}, _computeStepNumber:function(a) {
  return a;
}, _selectedIndexChanged:function(a, b) {
  if (!this.vertical && 0 <= a && 0 <= b) {
    var c = this.items[b], d = this.items[a];
    d.classList.contains("neon-animating") && this.cancelAnimation();
    this._previousAnimatedStep && this._previousAnimatedStep.classList.contains("neon-animating") && (this.cancelAnimation(), this.toggleClass("neon-animating", !1, this._previousAnimatedStep));
    a = 0 < a - b;
    this.animationConfig = {"new-step-entry":{animatable:d, type:a ? d.horizontalHigherEntryAnimation && "higher-step-entry" : d.horizontalLowerEntryAnimation && "lower-step-entry"}, "old-step-exit":{animatable:c, type:a ? c.horizontalLowerExitAnimation && "lower-step-exit" : c.horizontalHigherExitAnimation && "higher-step-exit"}};
    this.animationConfig["new-step-entry"].type && (this.playAnimation("new-step-entry", {step:d}), this.toggleClass("neon-animating", !0, d));
    this.animationConfig["old-step-exit"].type && (this.playAnimation("old-step-exit", {step:c}), this.toggleClass("neon-animating", !0, c));
    this._previousAnimatedStep = c;
  }
}, _onNeonAnimationFinish:function(a) {
  (a = a.detail.step) && this.toggleClass("neon-animating", !1, a);
}, _forwardCanSkip:function(a, b) {
  b._set_canSkip(a);
}, _forwardHasBackStep:function(a, b) {
  b._set_hasBackStep(a);
}, _compute__attrForSelectedStepPrimaryButtonText:function(a) {
  if (0 > a) {
    return null;
  }
  a = this.selectedItem.saved ? "updateText" : 1 == this.stepNumber - this.savedStepNumber ? "finishText" : "continueText";
  this.selectedItem._set_attrForPrimaryButtonText(a);
  return a;
}, _isLastStep:function(a, b, c) {
  return c ? !1 : 1 == this.stepNumber - this.savedStepNumber && a == b;
}, _initializeSteps:function() {
  var a = 0, b = {linear:this.linear, backText:this.backText, optionalText:this.optionalText, finishText:this.finishText, continueText:this.continueText, skipText:this.skipText, updateText:this.updateText, hasSkipButton:this.hasSkipButton, hasBackButton:this.hasBackButton, stepNumber:this.stepNumber};
  this.items.map(function(c, d) {
    this.horizontalHigherEntryAnimation && !c.horizontalHigherEntryAnimation && (c.horizontalHigherEntryAnimation = this.horizontalHigherEntryAnimation);
    this.horizontalHigherExitAnimation && !c.horizontalHigherExitAnimation && (c.horizontalHigherExitAnimation = this.horizontalHigherExitAnimation);
    this.horizontalLowerEntryAnimation && !c.horizontalLowerEntryAnimation && (c.horizontalLowerEntryAnimation = this.horizontalLowerEntryAnimation);
    this.horizontalLowerExitAnimation && !c.horizontalLowerExitAnimation && (c.horizontalLowerExitAnimation = this.horizontalLowerExitAnimation);
    c._setIndex(d + 1);
    c._set_stepper(this);
    c._setVertical(this.vertical);
    c._set_alternativeLabel(this.alternativeLabel);
    c._set_stepperData(b);
    c._set_previousSaved(!d);
    c.saved && a++;
  }.bind(this));
  this._setSavedStepNumber(a);
  this._updateSelected();
}, _compute_skipStepIndex:function(a) {
  if (0 <= a && !this.completed) {
    for (var b = (a + 1) % this.stepNumber; b != a; b = (b + 1) % this.stepNumber) {
      if (this.items[b].selectable && !this.items[b].saved) {
        return b;
      }
    }
  }
  return null;
}, _compute_backStepIndex:function(a) {
  if (0 <= a) {
    for (--a; 0 <= a; a--) {
      if (this.items[a].selectable) {
        return a;
      }
    }
  }
  return null;
}, _isntNull:function(a) {
  return null != a;
}, _computeCompleted:function(a, b) {
  return b == a ? (this.fire("paper-stepper-completed"), !0) : !1;
}, _choosePrimaryButtonText:function(a) {
  return this[a];
}, _resizeHandler:function() {
  this.debounce("paper-stepper-responsive-check", function() {
    this._responsiveCheck();
  }, this.responsiveCheckFrequence);
}, _responsiveCheck:function() {
  var a = this.$.verticalResponsiveWidth.clientWidth;
  a && (this.vertical = !(this.clientWidth > a));
}});
Polymer({is:"paper-tabs-vertical", behaviors:[Polymer.IronResizableBehavior], properties:{attrForSelected:String, selected:{type:String, notify:!0}, noink:{type:Boolean, value:!1}, nobar:{type:Boolean, value:!1}, noslide:{type:Boolean, value:!1}, scrollable:{type:Boolean, value:!1}, disableDrag:{type:Boolean, value:!1}, hideScrollButton:{type:Boolean, value:!1}, alignBottom:{type:Boolean, value:!1}, step:{value:10}, holdDelay:{value:1}, tab:{observer:"tabChanged"}}, listeners:{"iron-resize":"onResize"}, 
ready:function() {
  this.onResize();
}, computeScrollButtonHidden:function(a, b) {
  return !this.scrollable || this.hideScrollButton;
}, computeIconClass:function(a) {
  if (a) {
    return "hide";
  }
}, computeTabsContentClass:function(a) {
  return a ? "scrollable" : "";
}, computeSelectionBarClass:function(a, b) {
  if (a) {
    return "hidden";
  }
  if (b) {
    return "align-bottom";
  }
}, trackStart:function(a) {
  if (this.scrollable && !this.disableDrag) {
    var b = a.target;
    b && b.cancelRipple && b.cancelRipple();
    this._startx = this.$.tabsContainer.scrollLeft;
    a.preventTap();
  }
}, trackx:function(a) {
  this.scrollable && !this.disableDrag && (this.$.tabsContainer.scrollLeft = this._startx - a.dx);
}, onResize:function() {
  this.debounce("resizeJob", this.resizeHandler, 10);
}, resizeHandler:function() {
  this.scroll();
  this.tabChanged(this.tab);
}, scroll:function() {
  if (this.scrollable) {
    var a = this.$.tabsContainer, b = a.scrollLeft;
    this.leftHidden = 0 === b;
    this.rightHidden = b === Math.max(0, a.scrollWidth - a.clientWidth);
  }
}, onLeftScrollButtonDown:function() {
  this._holdJob = setInterval(this.scrollToLeft.bind(this), this.holdDelay);
}, onRightScrollButtonDown:function() {
  this._holdJob = setInterval(this.scrollToRight.bind(this), this.holdDelay);
}, onScrollButtonUp:function() {
  clearInterval(this._holdJob);
  this._holdJob = null;
}, scrollToLeft:function() {
  this.$.tabsContainer.scrollLeft -= this.step;
}, scrollToRight:function() {
  this.$.tabsContainer.scrollLeft += this.step;
}, tabChanged:function(a, b) {
  if (a) {
    var c = this.$.tabsContent.getBoundingClientRect(), d = c.height, f = a.getBoundingClientRect(), c = f.top - c.top;
    this._pos = {height:this.calcPercent(f.height, d), top:this.calcPercent(c, d)};
    if (this.noslide || null == b) {
      this.positionBar(this._pos.height, this._pos.top);
    } else {
      var g = b.getBoundingClientRect();
      b = this.$.tabsContent.indexOf(b);
      a = this.$.tabsContent.indexOf(a);
      this.$.selectionBar.classList.add("expand");
      b < a ? this.positionBar(this.calcPercent(f.top + f.height - g.top, d) - 5, this._top) : this.positionBar(this.calcPercent(g.top + g.height - f.top, d) - 5, this.calcPercent(c, d) + 5);
      this.scrollable && this.scrollToSelectedIfNeeded(f.height, c);
    }
  } else {
    this.positionBar(0, 0);
  }
}, scrollToSelectedIfNeeded:function(a, b) {
  b -= this.$.tabsContainer.scrollLeft;
  0 > b ? this.$.tabsContainer.scrollLeft += b : (b += a - this.$.tabsContainer.offsetWidth, 0 < b && (this.$.tabsContainer.scrollLeft += b));
}, calcPercent:function(a, b) {
  return 100 * a / b;
}, positionBar:function(a, b) {
  this._height = a;
  this._top = b;
  this.transform("translate3d(0, " + b + "%, 0) scaleY(" + a / 100 + ")", this.$.selectionBar);
}, onBarTransitionEnd:function(a) {
  a = this.$.selectionBar.classList;
  a.contains("expand") ? (a.remove("expand"), a.add("contract"), this.positionBar(this._pos.height, this._pos.top)) : a.contains("contract") && a.remove("contract");
}});
Polymer({is:"paper-tab-vertical", properties:{noink:{type:Boolean, value:!1}}, listeners:{mousedown:"onDown", mouseup:"onUp"}, onDown:function(a) {
  var b = Polymer.dom(this).elementParent;
  this.noink || b && b.noink || this.$.ink.downAction(a);
}, onUp:function() {
  this.$.ink.upAction();
}, cancelRipple:function() {
  this.$.ink.upAction();
}});
(function() {
  function a(a) {
    return a.match(/^(.*?)\/?([^\/]+\.[^\/]+)?$/)[1] + "/";
  }
  Polymer({is:"iron-component-page", properties:{src:{type:String, observer:"_srcChanged"}, docSrc:{type:String, observer:"_srcChanged"}, base:{type:String, value:function() {
    return this.ownerDocument.baseURI.replace(/\#.*$/, "");
  }}, active:{type:String, notify:!0, value:""}, view:{type:String, value:"docs", notify:!0}, transitive:{type:Boolean, value:!1}, docElements:{type:Array, notify:!0, readOnly:!0, value:function() {
    return [];
  }}, docBehaviors:{type:Array, notify:!0, readOnly:!0, value:function() {
    return [];
  }}, docDemos:{type:Array, notify:!0, readOnly:!0}, scrollMode:{type:String, value:"waterfall"}, _activeDescriptor:Object, _fragmentPrefix:String, catalog:{type:Boolean, value:!1, reflectToAttribute:!0}, version:String, _analyzer:{type:Object, observer:"_analyzerChanged"}, _hydroDesc:{type:Object, observer:"_detectAnalyzer"}, _ajaxDesc:{type:Object, observer:"_detectAnalyzer"}, _loading:{type:Boolean, observer:"_loadingChanged"}, _hydroLoading:{type:Boolean, observer:"_detectLoading"}, _ajaxLoading:{type:Boolean, 
  observer:"_detectLoading"}, _demoUrl:{type:String, value:""}, _srcUrl:String}, observers:["_updateFrameSrc(view, base)", "_activeChanged(active, _analyzer)"], attached:function() {
    this.catalog || (this._setActiveFromHash(), this.listen(window, "hashchange", "_setActiveFromHash"));
  }, detached:function() {
    this.catalog || this.unlisten(window, "hashchange", "_setActiveFromHash");
  }, ready:function() {
    var a = this._loadJson();
    a ? (this.docElements = a, this._loading = !1) : this.src || this.catalog || this._srcChanged();
  }, _getVisableElements:function(a) {
    for (var b = [], d = 0; d < a.length; d++) {
      var f = a[d];
      console.log("is:", f.is + " -> " + f.show);
      f.show && b.push({is:f.is});
    }
    return b;
  }, _loadJson:function() {
    var a = "";
    Array.prototype.forEach.call(Polymer.dom(this).childNodes, function(b) {
      a += b.textContent;
    });
    a = a.trim();
    if ("" === a) {
      return null;
    }
    try {
      var c = JSON.parse(a);
      return Array.isArray(c) ? c : [];
    } catch (d) {
      throw console.error("Failure when parsing JSON:", a, d), d;
    }
  }, _setActiveFromHash:function(a) {
  }, _srcChanged:function() {
    if (this.docSrc) {
      if (!this.$.ajax.lastRequest || this.docSrc !== this.$.ajax.lastRequest.url && this.docSrc !== this._lastDocSrc) {
        this._ajaxLoading = !0, this._activeDescriptor = this._ajaxDesc = null, this.$.ajax.generateRequest();
      }
      this._lastDocSrc = this.docSrc;
    } else {
      if (this.src) {
        var b = (new URL(this.src, this.base)).toString();
      } else {
        b = a(this.base), b = (new URL(b.match(/([^\/]*)\/$/)[1] + ".html", b)).toString();
      }
      var c = b.match(/([^\/\.]+)\.github\.io\/([^\/]+)\/?([^\/]*)$/);
      c && (b = "https://cdn.rawgit.com/" + c[1] + "/" + c[2] + "/master/" + c[3]);
      this._baseUrl = a(b);
      this._srcUrl = b;
      this._hydroLoading || this.$.analyzer.analyze();
    }
  }, _updateFrameSrc:function(a) {
    if (!a || 0 !== a.indexOf("demo:")) {
      return "about:blank";
    }
    a = a.split(":")[1];
    a = (new URL(a, this.base)).toString();
    var b = this;
    this._iframe && Polymer.dom(this.$.demo).removeChild(this._iframe);
    this._iframe = document.createElement("iframe");
    this._iframe.src = a;
    this._iframe.allowFullscreen = !0;
    this._iframe.style.height = "0%";
    this._iframe.addEventListener("load", function() {
      var a = b._iframe.contentWindow;
      a.HTMLImports ? a.HTMLImports.whenReady(function() {
        a.Polymer ? a.Polymer.RenderStatus.afterNextRender(b, function() {
          b._iframe.style.height = "100%";
        }) : b._iframe.style.height = "100%";
      }) : b._iframe.style.height = "100%";
    });
    Polymer.dom(this.$.demo).appendChild(this._iframe);
  }, _getDefaultActive:function() {
    function b(a) {
      for (var b, c = 0; c < a.length; c++) {
        if ((b = a[c]) && b.contentHref && 0 < b.contentHref.indexOf(d)) {
          return b;
        }
      }
      return null;
    }
    var c, d = (this._srcUrl || this.base).replace(a(this.base), "");
    return (c = b(this.docElements) || b(this.docBehaviors)) ? c.is : 0 < this.docElements.length ? this.docElements[0].is : 0 < this.docBehaviors.length ? this.docBehaviors[0].is : null;
  }, _findDescriptor:function(a) {
    if (!this._analyzer) {
      return null;
    }
    var b = this._analyzer.elementsByTagName[a];
    if (b) {
      return b;
    }
    for (b = 0; b < this._analyzer.behaviors.length; b++) {
      if (this._analyzer.behaviors[b].is === a) {
        return this._analyzer.behaviors[b];
      }
    }
    return null;
  }, _activeChanged:function(a, c) {
    if ("" === a) {
      this.active = this._getDefaultActive();
    } else {
      if (this.async(function() {
        this.$.active.value = a;
      }), c && c.elementsByTagName) {
        this.$.headerPanel.scroller.scrollTop = 0;
        if (this._activeDescriptor = this._findDescriptor(a)) {
          var b;
          c = this._activeDescriptor.demos;
          if (this.view && c && c.length) {
            var f = this.view.split(":");
            "demo" == f[0] && (f[1] && (b = c.some(function(a, b) {
              if (a.path == f[1]) {
                return !0;
              }
            })), b || (this.view = "demo:" + c[0].path, b = !0));
          }
          void 0 == !b && (this.view = "docs");
          this._activeDescriptor.is && !document.title && (document.title = this._activeDescriptor.is + " documentation");
          this._fragmentPrefix = this._activeDescriptor.is && !this.catalog ? this._activeDescriptor.is + ":" : "";
          this.$.viewer.scrollToAnchor(window.location.hash);
        }
        this._setDocDemos(this._activeDescriptor ? this._activeDescriptor.demos : []);
      }
    }
  }, _loadingChanged:function() {
    this.toggleClass("loaded", !this._loading);
  }, _detectLoading:function() {
    this._loading = this.docSrc ? this._ajaxLoading : this._hydroLoading;
  }, _analyzerChanged:function() {
    var a = this._analyzer;
    this._setDocElements(a && a.elements ? a.elements : []);
    this._setDocBehaviors(a && a.behaviors ? a.behaviors : []);
    this._findDescriptor(this.active) || (this.active = this._getDefaultActive());
  }, _detectAnalyzer:function() {
    this._analyzer = this.docSrc ? this._ajaxDesc : this._hydroDesc;
  }, _handleMenuItemSelected:function(a) {
    a.target && a.target.value && (this.active = a.target.value);
  }, _handleAjaxResponse:function(a, c) {
    this._ajaxLoading = !1;
    this._ajaxLastUrl = c.url;
    this._ajaxDesc = c.response;
  }, _handleError:function(a) {
    this.fire("iron-component-page-error", a.detail);
  }, _handleComponentSelectedEvent:function(a) {
    this._findDescriptor(a.detail) ? this.active = a.detail : console.warn("Could not navigate to ", a.detail);
  }, marshal:function() {
    var a = JSON.stringify(this.docElements || [], null, "  ");
    return "<" + this.is + ">\n" + a.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "\n</" + this.is + ">";
  }, _demoView:function(a) {
    return "demo:" + a;
  }, _viewType:function(a) {
    return a ? a.split(":")[0] : null;
  }});
})();


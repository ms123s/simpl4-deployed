/*
   Copyright 2008-2015 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright 2014-2016 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license/mit

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright 2011-2016 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license/mit

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
 jquery.spinner v0.2.1 (https://vsn4ik.github.io/jquery.spinner/)
 Copyright 2013-2017 xixilive
 Licensed under the MIT license
 Cropper v3.0.0-rc.3
 https://github.com/fengyuanchen/cropper

 Copyright (c) 2017 Fengyuan Chen
 Released under the MIT license

 Date: 2017-07-07T13:00:47.346Z
 jQuery QueryBuilder 1.3.0
 Copyright 2014-2015 Damien "Mistic" Sorel (http://www.strangeplanet.fr)
 Licensed under MIT (http://opensource.org/licenses/MIT)
 DataTables 1.10.12
 ©2008-2015 SpryMedia Ltd - datatables.net/license
 Responsive 2.1.0
 2014-2016 SpryMedia Ltd - datatables.net/license
 Scroller 1.4.2
 ©2011-2016 SpryMedia Ltd - datatables.net/license
 toast.visible*/
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
  a != Array.prototype && a != Object.prototype && (a[b] = c.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.symbolCounter_ = 0;
$jscomp.Symbol = function(a) {
  return $jscomp.SYMBOL_PREFIX + (a || "") + $jscomp.symbolCounter_++;
};
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.arrayIterator(this);
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.arrayIterator = function(a) {
  var b = 0;
  return $jscomp.iteratorPrototype(function() {
    return b < a.length ? {done:!1, value:a[b++]} : {done:!0};
  });
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.makeIterator = function(a) {
  $jscomp.initSymbolIterator();
  var b = a[Symbol.iterator];
  return b ? b.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.owns = function(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
};
$jscomp.polyfill = function(a, b, c, d) {
  if (b) {
    c = $jscomp.global;
    a = a.split(".");
    for (d = 0; d < a.length - 1; d++) {
      var e = a[d];
      e in c || (c[e] = {});
      c = c[e];
    }
    a = a[a.length - 1];
    d = c[a];
    b = b(d);
    b != d && null != b && $jscomp.defineProperty(c, a, {configurable:!0, writable:!0, value:b});
  }
};
$jscomp.polyfill("WeakMap", function(a) {
  function b(a) {
    $jscomp.owns(a, d) || $jscomp.defineProperty(a, d, {value:{}});
  }
  function c(a) {
    var c = Object[a];
    c && (Object[a] = function(a) {
      b(a);
      return c(a);
    });
  }
  if (function() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), c = Object.seal({}), d = new a([[b, 2], [c, 3]]);
      if (2 != d.get(b) || 3 != d.get(c)) {
        return !1;
      }
      d.delete(b);
      d.set(c, 4);
      return !d.has(b) && 4 == d.get(c);
    } catch (n) {
      return !1;
    }
  }()) {
    return a;
  }
  var d = "$jscomp_hidden_" + Math.random().toString().substring(2);
  c("freeze");
  c("preventExtensions");
  c("seal");
  var e = 0, f = function(a) {
    this.id_ = (e += Math.random() + 1).toString();
    if (a) {
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  f.prototype.set = function(a, c) {
    b(a);
    if (!$jscomp.owns(a, d)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[d][this.id_] = c;
    return this;
  };
  f.prototype.get = function(a) {
    return $jscomp.owns(a, d) ? a[d][this.id_] : void 0;
  };
  f.prototype.has = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_);
  };
  f.prototype.delete = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_) ? delete a[d][this.id_] : !1;
  };
  return f;
}, "es6-impl", "es3");
$jscomp.iteratorFromArray = function(a, b) {
  $jscomp.initSymbolIterator();
  a instanceof String && (a += "");
  var c = 0, d = {next:function() {
    if (c < a.length) {
      var e = c++;
      return {value:b(e, a[e]), done:!1};
    }
    d.next = function() {
      return {done:!0, value:void 0};
    };
    return d.next();
  }};
  d[Symbol.iterator] = function() {
    return d;
  };
  return d;
};
$jscomp.polyfill("Array.prototype.keys", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a) {
      return a;
    });
  };
}, "es6-impl", "es3");
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function(a) {
  function b() {
    this.batch_ = null;
  }
  function c(a) {
    return a instanceof e ? a : new e(function(b, c) {
      b(a);
    });
  }
  if (a && !$jscomp.FORCE_POLYFILL_PROMISE) {
    return a;
  }
  b.prototype.asyncExecute = function(a) {
    null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_());
    this.batch_.push(a);
    return this;
  };
  b.prototype.asyncExecuteBatch_ = function() {
    var a = this;
    this.asyncExecuteFunction(function() {
      a.executeBatch_();
    });
  };
  var d = $jscomp.global.setTimeout;
  b.prototype.asyncExecuteFunction = function(a) {
    d(a, 0);
  };
  b.prototype.executeBatch_ = function() {
    for (; this.batch_ && this.batch_.length;) {
      var a = this.batch_;
      this.batch_ = [];
      for (var b = 0; b < a.length; ++b) {
        var c = a[b];
        delete a[b];
        try {
          c();
        } catch (n) {
          this.asyncThrow_(n);
        }
      }
    }
    this.batch_ = null;
  };
  b.prototype.asyncThrow_ = function(a) {
    this.asyncExecuteFunction(function() {
      throw a;
    });
  };
  var e = function(a) {
    this.state_ = 0;
    this.result_ = void 0;
    this.onSettledCallbacks_ = [];
    var b = this.createResolveAndReject_();
    try {
      a(b.resolve, b.reject);
    } catch (l) {
      b.reject(l);
    }
  };
  e.prototype.createResolveAndReject_ = function() {
    function a(a) {
      return function(d) {
        c || (c = !0, a.call(b, d));
      };
    }
    var b = this, c = !1;
    return {resolve:a(this.resolveTo_), reject:a(this.reject_)};
  };
  e.prototype.resolveTo_ = function(a) {
    if (a === this) {
      this.reject_(new TypeError("A Promise cannot resolve to itself"));
    } else {
      if (a instanceof e) {
        this.settleSameAsPromise_(a);
      } else {
        a: {
          switch(typeof a) {
            case "object":
              var b = null != a;
              break a;
            case "function":
              b = !0;
              break a;
            default:
              b = !1;
          }
        }
        b ? this.resolveToNonPromiseObj_(a) : this.fulfill_(a);
      }
    }
  };
  e.prototype.resolveToNonPromiseObj_ = function(a) {
    var b = void 0;
    try {
      b = a.then;
    } catch (l) {
      this.reject_(l);
      return;
    }
    "function" == typeof b ? this.settleSameAsThenable_(b, a) : this.fulfill_(a);
  };
  e.prototype.reject_ = function(a) {
    this.settle_(2, a);
  };
  e.prototype.fulfill_ = function(a) {
    this.settle_(1, a);
  };
  e.prototype.settle_ = function(a, b) {
    if (0 != this.state_) {
      throw Error("Cannot settle(" + a + ", " + b | "): Promise already settled in state" + this.state_);
    }
    this.state_ = a;
    this.result_ = b;
    this.executeOnSettledCallbacks_();
  };
  e.prototype.executeOnSettledCallbacks_ = function() {
    if (null != this.onSettledCallbacks_) {
      for (var a = this.onSettledCallbacks_, b = 0; b < a.length; ++b) {
        a[b].call(), a[b] = null;
      }
      this.onSettledCallbacks_ = null;
    }
  };
  var f = new b;
  e.prototype.settleSameAsPromise_ = function(a) {
    var b = this.createResolveAndReject_();
    a.callWhenSettled_(b.resolve, b.reject);
  };
  e.prototype.settleSameAsThenable_ = function(a, b) {
    var c = this.createResolveAndReject_();
    try {
      a.call(b, c.resolve, c.reject);
    } catch (n) {
      c.reject(n);
    }
  };
  e.prototype.then = function(a, b) {
    function c(a, b) {
      return "function" == typeof a ? function(b) {
        try {
          d(a(b));
        } catch (v) {
          f(v);
        }
      } : b;
    }
    var d, f, g = new e(function(a, b) {
      d = a;
      f = b;
    });
    this.callWhenSettled_(c(a, d), c(b, f));
    return g;
  };
  e.prototype.catch = function(a) {
    return this.then(void 0, a);
  };
  e.prototype.callWhenSettled_ = function(a, b) {
    function c() {
      switch(d.state_) {
        case 1:
          a(d.result_);
          break;
        case 2:
          b(d.result_);
          break;
        default:
          throw Error("Unexpected state: " + d.state_);
      }
    }
    var d = this;
    null == this.onSettledCallbacks_ ? f.asyncExecute(c) : this.onSettledCallbacks_.push(function() {
      f.asyncExecute(c);
    });
  };
  e.resolve = c;
  e.reject = function(a) {
    return new e(function(b, c) {
      c(a);
    });
  };
  e.race = function(a) {
    return new e(function(b, d) {
      for (var e = $jscomp.makeIterator(a), f = e.next(); !f.done; f = e.next()) {
        c(f.value).callWhenSettled_(b, d);
      }
    });
  };
  e.all = function(a) {
    var b = $jscomp.makeIterator(a), d = b.next();
    return d.done ? c([]) : new e(function(a, e) {
      function f(b) {
        return function(c) {
          g[b] = c;
          h--;
          0 == h && a(g);
        };
      }
      var g = [], h = 0;
      do {
        g.push(void 0), h++, c(d.value).callWhenSettled_(f(g.length - 1), e), d = b.next();
      } while (!d.done);
    });
  };
  return e;
}, "es6-impl", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, c, d) {
    var b = this.length || 0;
    0 > c && (c = Math.max(0, b + c));
    if (null == d || d > b) {
      d = b;
    }
    d = Number(d);
    0 > d && (d = Math.max(0, b + d));
    for (c = Number(c || 0); c < d; c++) {
      this[c] = a;
    }
    return this;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Array.from", function(a) {
  return a ? a : function(a, c, d) {
    $jscomp.initSymbolIterator();
    c = null != c ? c : function(a) {
      return a;
    };
    var b = [], f = a[Symbol.iterator];
    if ("function" == typeof f) {
      for (a = f.call(a); !(f = a.next()).done;) {
        b.push(c.call(d, f.value));
      }
    } else {
      for (var f = a.length, g = 0; g < f; g++) {
        b.push(c.call(d, a[g]));
      }
    }
    return b;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Math.sign", function(a) {
  return a ? a : function(a) {
    a = Number(a);
    return 0 === a || isNaN(a) ? a : 0 < a ? 1 : -1;
  };
}, "es6-impl", "es3");
$jscomp.checkStringArgs = function(a, b, c) {
  if (null == a) {
    throw new TypeError("The 'this' value for String.prototype." + c + " must not be null or undefined");
  }
  if (b instanceof RegExp) {
    throw new TypeError("First argument to String.prototype." + c + " must not be a regular expression");
  }
  return a + "";
};
$jscomp.polyfill("String.prototype.startsWith", function(a) {
  return a ? a : function(a, c) {
    var b = $jscomp.checkStringArgs(this, a, "startsWith");
    a += "";
    var e = b.length, f = a.length;
    c = Math.max(0, Math.min(c | 0, b.length));
    for (var g = 0; g < f && c < e;) {
      if (b[c++] != a[g++]) {
        return !1;
      }
    }
    return g >= f;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("String.prototype.endsWith", function(a) {
  return a ? a : function(a, c) {
    var b = $jscomp.checkStringArgs(this, a, "endsWith");
    a += "";
    void 0 === c && (c = b.length);
    c = Math.max(0, Math.min(c | 0, b.length));
    for (var e = a.length; 0 < e && 0 < c;) {
      if (b[--c] != a[--e]) {
        return !1;
      }
    }
    return 0 >= e;
  };
}, "es6-impl", "es3");
$jscomp.findInternal = function(a, b, c) {
  a instanceof String && (a = String(a));
  for (var d = a.length, e = 0; e < d; e++) {
    var f = a[e];
    if (b.call(c, f, e, a)) {
      return {i:e, v:f};
    }
  }
  return {i:-1, v:void 0};
};
$jscomp.polyfill("Array.prototype.find", function(a) {
  return a ? a : function(a, c) {
    return $jscomp.findInternal(this, a, c).v;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Array.prototype.values", function(a) {
  return a ? a : function() {
    return $jscomp.iteratorFromArray(this, function(a, c) {
      return c;
    });
  };
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.findIndex", function(a) {
  return a ? a : function(a, c) {
    return $jscomp.findInternal(this, a, c).i;
  };
}, "es6-impl", "es3");
(function() {
  function a() {
    document.body.removeAttribute("unresolved");
  }
  window.WebComponents ? addEventListener("WebComponentsReady", a) : "interactive" === document.readyState || "complete" === document.readyState ? a() : addEventListener("DOMContentLoaded", a);
})();
window.Polymer = {Settings:function() {
  for (var a = window.Polymer || {}, b = location.search.slice(1).split("&"), c = 0, d; c < b.length && (d = b[c]); c++) {
    d = d.split("="), d[0] && (a[d[0]] = d[1] || !0);
  }
  a.wantShadow = "shadow" === a.dom;
  a.hasShadow = !!Element.prototype.createShadowRoot;
  a.nativeShadow = a.hasShadow && !window.ShadowDOMPolyfill;
  a.useShadow = a.wantShadow && a.hasShadow;
  a.hasNativeImports = "import" in document.createElement("link");
  a.useNativeImports = a.hasNativeImports;
  a.useNativeCustomElements = !window.CustomElements || window.CustomElements.useNative;
  a.useNativeShadow = a.useShadow && a.nativeShadow;
  a.usePolyfillProto = !a.useNativeCustomElements && !Object.__proto__;
  return a;
}()};
(function() {
  var a = window.Polymer;
  window.Polymer = function(a) {
    "function" === typeof a && (a = a.prototype);
    a || (a = {});
    var c = b(a);
    a = c.prototype;
    var d = {prototype:a};
    a.extends && (d.extends = a.extends);
    Polymer.telemetry._registrate(a);
    document.registerElement(a.is, d);
    return c;
  };
  var b = function(a) {
    var b = Polymer.Base;
    a.extends && (b = Polymer.Base._getExtendedPrototype(a.extends));
    a = Polymer.Base.chainObject(a, b);
    a.registerCallback();
    return a.constructor;
  };
  if (a) {
    for (var c in a) {
      Polymer[c] = a[c];
    }
  }
  Polymer.Class = b;
})();
Polymer.telemetry = {registrations:[], _regLog:function(a) {
  console.log("[" + a.is + "]: registered");
}, _registrate:function(a) {
  this.registrations.push(a);
  Polymer.log && this._regLog(a);
}, dumpRegistrations:function() {
  this.registrations.forEach(this._regLog);
}};
Object.defineProperty(window, "currentImport", {enumerable:!0, configurable:!0, get:function() {
  return (document._currentScript || document.currentScript).ownerDocument;
}});
Polymer.RenderStatus = {_ready:!1, _callbacks:[], whenReady:function(a) {
  this._ready ? a() : this._callbacks.push(a);
}, _makeReady:function() {
  this._ready = !0;
  for (var a = 0; a < this._callbacks.length; a++) {
    this._callbacks[a]();
  }
  this._callbacks = [];
}, _catchFirstRender:function() {
  requestAnimationFrame(function() {
    Polymer.RenderStatus._makeReady();
  });
}, _afterNextRenderQueue:[], _waitingNextRender:!1, afterNextRender:function(a, b, c) {
  this._watchNextRender();
  this._afterNextRenderQueue.push([a, b, c]);
}, _watchNextRender:function() {
  if (!this._waitingNextRender) {
    this._waitingNextRender = !0;
    var a = function() {
      Polymer.RenderStatus._flushNextRender();
    };
    this._ready ? requestAnimationFrame(a) : this.whenReady(a);
  }
}, _flushNextRender:function() {
  var a = this;
  setTimeout(function() {
    a._flushRenderCallbacks(a._afterNextRenderQueue);
    a._afterNextRenderQueue = [];
    a._waitingNextRender = !1;
  });
}, _flushRenderCallbacks:function(a) {
  for (var b = 0, c; b < a.length; b++) {
    c = a[b], c[1].apply(c[0], c[2] || Polymer.nar);
  }
}};
window.HTMLImports ? HTMLImports.whenReady(function() {
  Polymer.RenderStatus._catchFirstRender();
}) : Polymer.RenderStatus._catchFirstRender();
Polymer.ImportStatus = Polymer.RenderStatus;
Polymer.ImportStatus.whenLoaded = Polymer.ImportStatus.whenReady;
(function() {
  var a = Polymer.Settings;
  Polymer.Base = {__isPolymerInstance__:!0, _addFeature:function(a) {
    this.extend(this, a);
  }, registerCallback:function() {
    this._desugarBehaviors();
    this._doBehavior("beforeRegister");
    this._registerFeatures();
    a.lazyRegister || this.ensureRegisterFinished();
  }, createdCallback:function() {
    this.__hasRegisterFinished || this._ensureRegisterFinished(this.__proto__);
    Polymer.telemetry.instanceCount++;
    this.root = this;
    this._doBehavior("created");
    this._initFeatures();
  }, ensureRegisterFinished:function() {
    this._ensureRegisterFinished(this);
  }, _ensureRegisterFinished:function(a) {
    a.__hasRegisterFinished !== a.is && (a.__hasRegisterFinished = a.is, a._finishRegisterFeatures && a._finishRegisterFeatures(), a._doBehavior("registered"));
  }, attachedCallback:function() {
    var a = this;
    Polymer.RenderStatus.whenReady(function() {
      a.isAttached = !0;
      a._doBehavior("attached");
    });
  }, detachedCallback:function() {
    this.isAttached = !1;
    this._doBehavior("detached");
  }, attributeChangedCallback:function(a, c, d) {
    this._attributeChangedImpl(a);
    this._doBehavior("attributeChanged", [a, c, d]);
  }, _attributeChangedImpl:function(a) {
    this._setAttributeToProperty(this, a);
  }, extend:function(a, c) {
    if (a && c) {
      for (var b = Object.getOwnPropertyNames(c), e = 0, f; e < b.length && (f = b[e]); e++) {
        this.copyOwnProperty(f, c, a);
      }
    }
    return a || c;
  }, mixin:function(a, c) {
    for (var b in c) {
      a[b] = c[b];
    }
    return a;
  }, copyOwnProperty:function(a, c, d) {
    (c = Object.getOwnPropertyDescriptor(c, a)) && Object.defineProperty(d, a, c);
  }, _log:console.log.apply.bind(console.log, console), _warn:console.warn.apply.bind(console.warn, console), _error:console.error.apply.bind(console.error, console), _logf:function() {
    return this._logPrefix.concat([this.is]).concat(Array.prototype.slice.call(arguments, 0));
  }};
  Polymer.Base._logPrefix = window.chrome || /firefox/i.test(navigator.userAgent) ? ["%c[%s::%s]:", "font-weight: bold; background-color:#EEEE00;"] : ["[%s::%s]:"];
  Polymer.Base.chainObject = function(a, c) {
    a && c && a !== c && (Object.__proto__ || (a = Polymer.Base.extend(Object.create(c), a)), a.__proto__ = c);
    return a;
  };
  Polymer.Base = Polymer.Base.chainObject(Polymer.Base, HTMLElement.prototype);
  Polymer.instanceof = window.CustomElements ? CustomElements.instanceof : function(a, c) {
    return a instanceof c;
  };
  Polymer.isInstance = function(a) {
    return !(!a || !a.__isPolymerInstance__);
  };
  Polymer.telemetry.instanceCount = 0;
})();
(function() {
  var a = {}, b = {}, c = function() {
    return document.createElement("dom-module");
  };
  c.prototype = Object.create(HTMLElement.prototype);
  Polymer.Base.extend(c.prototype, {constructor:c, createdCallback:function() {
    this.register();
  }, register:function(c) {
    if (c = c || this.id || this.getAttribute("name") || this.getAttribute("is")) {
      this.id = c, a[c] = this, b[c.toLowerCase()] = this;
    }
  }, import:function(c, f) {
    if (c) {
      var e = a[c] || b[c.toLowerCase()];
      if (!e) {
        a: {
          if (d) {
            for (var e = document._currentScript || document.currentScript, e = (e && e.ownerDocument || document).querySelectorAll("dom-module"), h = e.length - 1, l; 0 <= h && (l = e[h]); h--) {
              if (l.__upgraded__) {
                break a;
              } else {
                CustomElements.upgrade(l);
              }
            }
          }
        }
        e = a[c] || b[c.toLowerCase()];
      }
      e && f && (e = e.querySelector(f));
      return e;
    }
  }});
  var d = window.CustomElements && !CustomElements.useNative;
  document.registerElement("dom-module", c);
})();
Polymer.Base._addFeature({_prepIs:function() {
  if (!this.is) {
    var a = (document._currentScript || document.currentScript).parentNode;
    "dom-module" === a.localName && (this.is = a.id || a.getAttribute("name") || a.getAttribute("is"));
  }
  this.is && (this.is = this.is.toLowerCase());
}});
Polymer.Base._addFeature({behaviors:[], _desugarBehaviors:function() {
  this.behaviors.length && (this.behaviors = this._desugarSomeBehaviors(this.behaviors));
}, _desugarSomeBehaviors:function(a) {
  var b = [];
  a = this._flattenBehaviorsList(a);
  for (var c = a.length - 1; 0 <= c; c--) {
    var d = a[c];
    -1 === b.indexOf(d) && (this._mixinBehavior(d), b.unshift(d));
  }
  return b;
}, _flattenBehaviorsList:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    var d = a[c];
    d instanceof Array ? b = b.concat(this._flattenBehaviorsList(d)) : d ? b.push(d) : this._warn(this._logf("_flattenBehaviorsList", "behavior is null, check for missing or 404 import"));
  }
  return b;
}, _mixinBehavior:function(a) {
  for (var b = Object.getOwnPropertyNames(a), c = 0, d; c < b.length && (d = b[c]); c++) {
    Polymer.Base._behaviorProperties[d] || this.hasOwnProperty(d) || this.copyOwnProperty(d, a, this);
  }
}, _prepBehaviors:function() {
  this._prepFlattenedBehaviors(this.behaviors);
}, _prepFlattenedBehaviors:function(a) {
  for (var b = 0, c = a.length; b < c; b++) {
    this._prepBehavior(a[b]);
  }
  this._prepBehavior(this);
}, _doBehavior:function(a, b) {
  for (var c = 0; c < this.behaviors.length; c++) {
    this._invokeBehavior(this.behaviors[c], a, b);
  }
  this._invokeBehavior(this, a, b);
}, _invokeBehavior:function(a, b, c) {
  (a = a[b]) && a.apply(this, c || Polymer.nar);
}, _marshalBehaviors:function() {
  for (var a = 0; a < this.behaviors.length; a++) {
    this._marshalBehavior(this.behaviors[a]);
  }
  this._marshalBehavior(this);
}});
Polymer.Base._behaviorProperties = {hostAttributes:!0, beforeRegister:!0, registered:!0, properties:!0, observers:!0, listeners:!0, created:!0, attached:!0, detached:!0, attributeChanged:!0, ready:!0};
Polymer.Base._addFeature({_getExtendedPrototype:function(a) {
  return this._getExtendedNativePrototype(a);
}, _nativePrototypes:{}, _getExtendedNativePrototype:function(a) {
  var b = this._nativePrototypes[a];
  b || (b = this.getNativePrototype(a), b = this.extend(Object.create(b), Polymer.Base), this._nativePrototypes[a] = b);
  return b;
}, getNativePrototype:function(a) {
  return Object.getPrototypeOf(document.createElement(a));
}});
Polymer.Base._addFeature({_prepConstructor:function() {
  this._factoryArgs = this.extends ? [this.extends, this.is] : [this.is];
  var a = function() {
    return this._factory(arguments);
  };
  this.hasOwnProperty("extends") && (a.extends = this.extends);
  Object.defineProperty(this, "constructor", {value:a, writable:!0, configurable:!0});
  a.prototype = this;
}, _factory:function(a) {
  var b = document.createElement.apply(document, this._factoryArgs);
  this.factoryImpl && this.factoryImpl.apply(b, a);
  return b;
}});
Polymer.nob = Object.create(null);
Polymer.Base._addFeature({properties:{}, getPropertyInfo:function(a) {
  var b = this._getPropertyInfo(a, this.properties);
  if (!b) {
    for (var c = 0; c < this.behaviors.length; c++) {
      if (b = this._getPropertyInfo(a, this.behaviors[c].properties)) {
        return b;
      }
    }
  }
  return b || Polymer.nob;
}, _getPropertyInfo:function(a, b) {
  var c = b && b[a];
  "function" === typeof c && (c = b[a] = {type:c});
  c && (c.defined = !0);
  return c;
}, _prepPropertyInfo:function() {
  this._propertyInfo = {};
  for (var a = 0; a < this.behaviors.length; a++) {
    this._addPropertyInfo(this._propertyInfo, this.behaviors[a].properties);
  }
  this._addPropertyInfo(this._propertyInfo, this.properties);
  this._addPropertyInfo(this._propertyInfo, this._propertyEffects);
}, _addPropertyInfo:function(a, b) {
  if (b) {
    var c;
    for (c in b) {
      var d = a[c];
      var e = b[c];
      if ("_" !== c[0] || e.readOnly) {
        a[c] ? (d.type || (d.type = e.type), d.readOnly || (d.readOnly = e.readOnly)) : a[c] = {type:"function" === typeof e ? e : e.type, readOnly:e.readOnly, attribute:Polymer.CaseMap.camelToDashCase(c)};
      }
    }
  }
}});
Polymer.CaseMap = {_caseMap:{}, _rx:{dashToCamel:/-[a-z]/g, camelToDash:/([A-Z])/g}, dashToCamelCase:function(a) {
  return this._caseMap[a] || (this._caseMap[a] = 0 > a.indexOf("-") ? a : a.replace(this._rx.dashToCamel, function(a) {
    return a[1].toUpperCase();
  }));
}, camelToDashCase:function(a) {
  return this._caseMap[a] || (this._caseMap[a] = a.replace(this._rx.camelToDash, "-$1").toLowerCase());
}};
Polymer.Base._addFeature({_addHostAttributes:function(a) {
  this._aggregatedAttributes || (this._aggregatedAttributes = {});
  a && this.mixin(this._aggregatedAttributes, a);
}, _marshalHostAttributes:function() {
  this._aggregatedAttributes && this._applyAttributes(this, this._aggregatedAttributes);
}, _applyAttributes:function(a, b) {
  for (var c in b) {
    this.hasAttribute(c) || "class" === c || this.serializeValueToAttribute(b[c], c, this);
  }
}, _marshalAttributes:function() {
  this._takeAttributesToModel(this);
}, _takeAttributesToModel:function(a) {
  if (this.hasAttributes()) {
    for (var b in this._propertyInfo) {
      var c = this._propertyInfo[b];
      this.hasAttribute(c.attribute) && this._setAttributeToProperty(a, c.attribute, b, c);
    }
  }
}, _setAttributeToProperty:function(a, b, c, d) {
  this._serializing || (c = c || Polymer.CaseMap.dashToCamelCase(b), (d = d || this._propertyInfo && this._propertyInfo[c]) && !d.readOnly && (b = this.getAttribute(b), a[c] = this.deserialize(b, d.type)));
}, _serializing:!1, reflectPropertyToAttribute:function(a, b, c) {
  this._serializing = !0;
  c = void 0 === c ? this[a] : c;
  this.serializeValueToAttribute(c, b || Polymer.CaseMap.camelToDashCase(a));
  this._serializing = !1;
}, serializeValueToAttribute:function(a, b, c) {
  a = this.serialize(a);
  c = c || this;
  void 0 === a ? c.removeAttribute(b) : c.setAttribute(b, a);
}, deserialize:function(a, b) {
  switch(b) {
    case Number:
      a = Number(a);
      break;
    case Boolean:
      a = null != a;
      break;
    case Object:
      try {
        a = JSON.parse(a);
      } catch (c) {
      }
      break;
    case Array:
      try {
        a = JSON.parse(a);
      } catch (c) {
        a = null, console.warn("Polymer::Attributes: couldn`t decode Array as JSON");
      }
      break;
    case Date:
      a = new Date(a);
  }
  return a;
}, serialize:function(a) {
  switch(typeof a) {
    case "boolean":
      return a ? "" : void 0;
    case "object":
      if (a instanceof Date) {
        return a.toString();
      }
      if (a) {
        try {
          return JSON.stringify(a);
        } catch (b) {
          return "";
        }
      }
    default:
      return null != a ? a : void 0;
  }
}});
Polymer.version = "1.4.0";
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepBehaviors();
  this._prepConstructor();
  this._prepPropertyInfo();
}, _prepBehavior:function(a) {
  this._addHostAttributes(a.hostAttributes);
}, _marshalBehavior:function(a) {
}, _initFeatures:function() {
  this._marshalHostAttributes();
  this._marshalBehaviors();
}});
Polymer.Base._addFeature({_prepTemplate:function() {
  void 0 === this._template && (this._template = Polymer.DomModule.import(this.is, "template"));
  this._template && this._template.hasAttribute("is") && this._warn(this._logf("_prepTemplate", "top-level Polymer template must not be a type-extension, found", this._template, "Move inside simple <template>."));
  this._template && !this._template.content && window.HTMLTemplateElement && HTMLTemplateElement.decorate && HTMLTemplateElement.decorate(this._template);
}, _stampTemplate:function() {
  this._template && (this.root = this.instanceTemplate(this._template));
}, instanceTemplate:function(a) {
  return document.importNode(a._content || a.content, !0);
}});
(function() {
  var a = Polymer.Base.attachedCallback;
  Polymer.Base._addFeature({_hostStack:[], ready:function() {
  }, _registerHost:function(a) {
    (this.dataHost = a = a || Polymer.Base._hostStack[Polymer.Base._hostStack.length - 1]) && a._clients && a._clients.push(this);
    this._clients = null;
    this._clientsReadied = !1;
  }, _beginHosting:function() {
    Polymer.Base._hostStack.push(this);
    this._clients || (this._clients = []);
  }, _endHosting:function() {
    Polymer.Base._hostStack.pop();
  }, _tryReady:function() {
    this._readied = !1;
    this._canReady() && this._ready();
  }, _canReady:function() {
    return !this.dataHost || this.dataHost._clientsReadied;
  }, _ready:function() {
    this._beforeClientsReady();
    this._template && (this._setupRoot(), this._readyClients());
    this._clientsReadied = !0;
    this._clients = null;
    this._afterClientsReady();
    this._readySelf();
  }, _readyClients:function() {
    this._beginDistribute();
    var a = this._clients;
    if (a) {
      for (var c = 0, d = a.length, e; c < d && (e = a[c]); c++) {
        e._ready();
      }
    }
    this._finishDistribute();
  }, _readySelf:function() {
    this._doBehavior("ready");
    this._readied = !0;
    this._attachedPending && (this._attachedPending = !1, this.attachedCallback());
  }, _beforeClientsReady:function() {
  }, _afterClientsReady:function() {
  }, _beforeAttached:function() {
  }, attachedCallback:function() {
    this._readied ? (this._beforeAttached(), a.call(this)) : this._attachedPending = !0;
  }});
})();
Polymer.ArraySplice = function() {
  function a(a, b, e) {
    return {index:a, removed:b, addedCount:e};
  }
  function b() {
  }
  b.prototype = {calcEditDistances:function(a, b, e, f, g, h) {
    h = h - g + 1;
    e = e - b + 1;
    for (var c = Array(h), d = 0; d < h; d++) {
      c[d] = Array(e), c[d][0] = d;
    }
    for (var p = 0; p < e; p++) {
      c[0][p] = p;
    }
    for (d = 1; d < h; d++) {
      for (p = 1; p < e; p++) {
        if (this.equals(a[b + p - 1], f[g + d - 1])) {
          c[d][p] = c[d - 1][p - 1];
        } else {
          var q = c[d - 1][p] + 1, m = c[d][p - 1] + 1;
          c[d][p] = q < m ? q : m;
        }
      }
    }
    return c;
  }, spliceOperationsFromEditDistances:function(a) {
    for (var b = a.length - 1, c = a[0].length - 1, f = a[b][c], g = []; 0 < b || 0 < c;) {
      if (0 == b) {
        g.push(2), c--;
      } else {
        if (0 == c) {
          g.push(3), b--;
        } else {
          var h = a[b - 1][c - 1], l = a[b - 1][c], n = a[b][c - 1];
          var p = l < n ? l < h ? l : h : n < h ? n : h;
          p == h ? (h == f ? g.push(0) : (g.push(1), f = h), b--, c--) : p == l ? (g.push(3), b--, f = l) : (g.push(2), c--, f = n);
        }
      }
    }
    g.reverse();
    return g;
  }, calcSplices:function(b, d, e, f, g, h) {
    var c = 0, n = 0, p = Math.min(e - d, h - g);
    0 == d && 0 == g && (c = this.sharedPrefix(b, f, p));
    e == b.length && h == f.length && (n = this.sharedSuffix(b, f, p - c));
    d += c;
    g += c;
    e -= n;
    h -= n;
    if (0 == e - d && 0 == h - g) {
      return [];
    }
    if (d == e) {
      for (b = a(d, [], 0); g < h;) {
        b.removed.push(f[g++]);
      }
      return [b];
    }
    if (g == h) {
      return [a(d, [], e - d)];
    }
    h = this.spliceOperationsFromEditDistances(this.calcEditDistances(b, d, e, f, g, h));
    b = void 0;
    e = [];
    for (c = 0; c < h.length; c++) {
      switch(h[c]) {
        case 0:
          b && (e.push(b), b = void 0);
          d++;
          g++;
          break;
        case 1:
          b || (b = a(d, [], 0));
          b.addedCount++;
          d++;
          b.removed.push(f[g]);
          g++;
          break;
        case 2:
          b || (b = a(d, [], 0));
          b.addedCount++;
          d++;
          break;
        case 3:
          b || (b = a(d, [], 0)), b.removed.push(f[g]), g++;
      }
    }
    b && e.push(b);
    return e;
  }, sharedPrefix:function(a, b, e) {
    for (var c = 0; c < e; c++) {
      if (!this.equals(a[c], b[c])) {
        return c;
      }
    }
    return e;
  }, sharedSuffix:function(a, b, e) {
    for (var c = a.length, d = b.length, h = 0; h < e && this.equals(a[--c], b[--d]);) {
      h++;
    }
    return h;
  }, calculateSplices:function(a, b) {
    return this.calcSplices(a, 0, a.length, b, 0, b.length);
  }, equals:function(a, b) {
    return a === b;
  }};
  return new b;
}();
Polymer.domInnerHTML = function() {
  function a(a) {
    switch(a) {
      case "&":
        return "&amp;";
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case '"':
        return "&quot;";
      case " ":
        return "&nbsp;";
    }
  }
  function b(a) {
    for (var b = {}, c = 0; c < a.length; c++) {
      b[a[c]] = !0;
    }
    return b;
  }
  function c(b, l) {
    b instanceof HTMLTemplateElement && (b = b.content);
    for (var h = "", p = Polymer.dom(b).childNodes, q = 0, m = p.length, r; q < m && (r = p[q]); q++) {
      a: {
        var u = r;
        var v = b;
        var A = l;
        switch(u.nodeType) {
          case Node.ELEMENT_NODE:
            for (var C = u.localName, B = "<" + C, H = u.attributes, z = 0; v = H[z]; z++) {
              B += " " + v.name + '="' + v.value.replace(d, a) + '"';
            }
            B += ">";
            u = f[C] ? B : B + c(u, A) + "</" + C + ">";
            break a;
          case Node.TEXT_NODE:
            u = u.data;
            u = v && g[v.localName] ? u : u.replace(e, a);
            break a;
          case Node.COMMENT_NODE:
            u = "\x3c!--" + u.data + "--\x3e";
            break a;
          default:
            throw console.error(u), Error("not implemented");
        }
      }
      h += u;
    }
    return h;
  }
  var d = /[&\u00A0"]/g, e = /[&\u00A0<>]/g, f = b("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")), g = b("style script xmp iframe noembed noframes plaintext noscript".split(" "));
  return {getInnerHTML:c};
}();
(function() {
  var a = Element.prototype.insertBefore, b = Element.prototype.appendChild, c = Element.prototype.removeChild;
  Polymer.TreeApi = {arrayCopyChildNodes:function(a) {
    var b = [], c = 0;
    for (a = a.firstChild; a; a = a.nextSibling) {
      b[c++] = a;
    }
    return b;
  }, arrayCopyChildren:function(a) {
    var b = [], c = 0;
    for (a = a.firstElementChild; a; a = a.nextElementSibling) {
      b[c++] = a;
    }
    return b;
  }, arrayCopy:function(a) {
    for (var b = a.length, c = Array(b), d = 0; d < b; d++) {
      c[d] = a[d];
    }
    return c;
  }};
  Polymer.TreeApi.Logical = {hasParentNode:function(a) {
    return !(!a.__dom || !a.__dom.parentNode);
  }, hasChildNodes:function(a) {
    return !(!a.__dom || void 0 === a.__dom.childNodes);
  }, getChildNodes:function(a) {
    return this.hasChildNodes(a) ? this._getChildNodes(a) : a.childNodes;
  }, _getChildNodes:function(a) {
    if (!a.__dom.childNodes) {
      a.__dom.childNodes = [];
      for (var b = a.__dom.firstChild; b; b = b.__dom.nextSibling) {
        a.__dom.childNodes.push(b);
      }
    }
    return a.__dom.childNodes;
  }, getParentNode:function(a) {
    return a.__dom && void 0 !== a.__dom.parentNode ? a.__dom.parentNode : a.parentNode;
  }, getFirstChild:function(a) {
    return a.__dom && void 0 !== a.__dom.firstChild ? a.__dom.firstChild : a.firstChild;
  }, getLastChild:function(a) {
    return a.__dom && void 0 !== a.__dom.lastChild ? a.__dom.lastChild : a.lastChild;
  }, getNextSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.nextSibling ? a.__dom.nextSibling : a.nextSibling;
  }, getPreviousSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.previousSibling ? a.__dom.previousSibling : a.previousSibling;
  }, getFirstElementChild:function(a) {
    return a.__dom && void 0 !== a.__dom.firstChild ? this._getFirstElementChild(a) : a.firstElementChild;
  }, _getFirstElementChild:function(a) {
    for (a = a.__dom.firstChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.nextSibling;
    }
    return a;
  }, getLastElementChild:function(a) {
    return a.__dom && void 0 !== a.__dom.lastChild ? this._getLastElementChild(a) : a.lastElementChild;
  }, _getLastElementChild:function(a) {
    for (a = a.__dom.lastChild; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.previousSibling;
    }
    return a;
  }, getNextElementSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.nextSibling ? this._getNextElementSibling(a) : a.nextElementSibling;
  }, _getNextElementSibling:function(a) {
    for (a = a.__dom.nextSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.nextSibling;
    }
    return a;
  }, getPreviousElementSibling:function(a) {
    return a.__dom && void 0 !== a.__dom.previousSibling ? this._getPreviousElementSibling(a) : a.previousElementSibling;
  }, _getPreviousElementSibling:function(a) {
    for (a = a.__dom.previousSibling; a && a.nodeType !== Node.ELEMENT_NODE;) {
      a = a.__dom.previousSibling;
    }
    return a;
  }, saveChildNodes:function(a) {
    if (!this.hasChildNodes(a)) {
      a.__dom = a.__dom || {};
      a.__dom.firstChild = a.firstChild;
      a.__dom.lastChild = a.lastChild;
      a.__dom.childNodes = [];
      for (var b = a.firstChild; b; b = b.nextSibling) {
        b.__dom = b.__dom || {}, b.__dom.parentNode = a, a.__dom.childNodes.push(b), b.__dom.nextSibling = b.nextSibling, b.__dom.previousSibling = b.previousSibling;
      }
    }
  }, recordInsertBefore:function(a, b, c) {
    b.__dom.childNodes = null;
    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      for (a = a.firstChild; a; a = a.nextSibling) {
        this._linkNode(a, b, c);
      }
    } else {
      this._linkNode(a, b, c);
    }
  }, _linkNode:function(a, b, c) {
    a.__dom = a.__dom || {};
    b.__dom = b.__dom || {};
    c && (c.__dom = c.__dom || {});
    a.__dom.previousSibling = c ? c.__dom.previousSibling : b.__dom.lastChild;
    a.__dom.previousSibling && (a.__dom.previousSibling.__dom.nextSibling = a);
    a.__dom.nextSibling = c;
    a.__dom.nextSibling && (a.__dom.nextSibling.__dom.previousSibling = a);
    a.__dom.parentNode = b;
    c ? c === b.__dom.firstChild && (b.__dom.firstChild = a) : (b.__dom.lastChild = a, b.__dom.firstChild || (b.__dom.firstChild = a));
    b.__dom.childNodes = null;
  }, recordRemoveChild:function(a, b) {
    a.__dom = a.__dom || {};
    b.__dom = b.__dom || {};
    a === b.__dom.firstChild && (b.__dom.firstChild = a.__dom.nextSibling);
    a === b.__dom.lastChild && (b.__dom.lastChild = a.__dom.previousSibling);
    var c = a.__dom.previousSibling, d = a.__dom.nextSibling;
    c && (c.__dom.nextSibling = d);
    d && (d.__dom.previousSibling = c);
    a.__dom.parentNode = a.__dom.previousSibling = a.__dom.nextSibling = void 0;
    b.__dom.childNodes = null;
  }};
  Polymer.TreeApi.Composed = {getChildNodes:function(a) {
    return Polymer.TreeApi.arrayCopyChildNodes(a);
  }, getParentNode:function(a) {
    return a.parentNode;
  }, clearChildNodes:function(a) {
    a.textContent = "";
  }, insertBefore:function(b, c, f) {
    return a.call(b, c, f || null);
  }, appendChild:function(a, c) {
    return b.call(a, c);
  }, removeChild:function(a, b) {
    return c.call(a, b);
  }};
})();
Polymer.DomApi = function() {
  var a = Polymer.Settings, b = Polymer.TreeApi, c = function(a) {
    this.node = d ? c.wrap(a) : a;
  }, d = a.hasShadow && !a.nativeShadow;
  c.wrap = window.wrap ? window.wrap : function(a) {
    return a;
  };
  c.prototype = {flush:function() {
    Polymer.dom.flush();
  }, deepContains:function(a) {
    if (this.node.contains(a)) {
      return !0;
    }
    var b = a;
    for (a = a.ownerDocument; b && b !== a && b !== this.node;) {
      b = Polymer.dom(b).parentNode || b.host;
    }
    return b === this.node;
  }, queryDistributedElements:function(a) {
    for (var b = this.getEffectiveChildNodes(), d = [], e = 0, f = b.length, g; e < f && (g = b[e]); e++) {
      g.nodeType === Node.ELEMENT_NODE && c.matchesSelector.call(g, a) && d.push(g);
    }
    return d;
  }, getEffectiveChildNodes:function() {
    for (var a = [], b = this.childNodes, c = 0, d = b.length, p; c < d && (p = b[c]); c++) {
      if (p.localName === e) {
        for (var q = f(p).getDistributedNodes(), m = 0; m < q.length; m++) {
          a.push(q[m]);
        }
      } else {
        a.push(p);
      }
    }
    return a;
  }, observeNodes:function(a) {
    if (a) {
      return this.observer || (this.observer = this.node.localName === e ? new c.DistributedNodesObserver(this) : new c.EffectiveNodesObserver(this)), this.observer.addListener(a);
    }
  }, unobserveNodes:function(a) {
    this.observer && this.observer.removeListener(a);
  }, notifyObserver:function() {
    this.observer && this.observer.notify();
  }, _query:function(a, c, d) {
    c = c || this.node;
    var e = [];
    this._queryElements(b.Logical.getChildNodes(c), a, d, e);
    return e;
  }, _queryElements:function(a, b, c, d) {
    for (var e = 0, f = a.length, g; e < f && (g = a[e]); e++) {
      if (g.nodeType === Node.ELEMENT_NODE && this._queryElement(g, b, c, d)) {
        return !0;
      }
    }
  }, _queryElement:function(a, c, d, e) {
    var f = c(a);
    f && e.push(a);
    if (d && d(f)) {
      return f;
    }
    this._queryElements(b.Logical.getChildNodes(a), c, d, e);
  }};
  var e = c.CONTENT = "content", f = c.factory = function(a) {
    a = a || document;
    a.__domApi || (a.__domApi = new c.ctor(a));
    return a.__domApi;
  };
  c.hasApi = function(a) {
    return !!a.__domApi;
  };
  c.ctor = c;
  Polymer.dom = function(a, b) {
    return a instanceof Event ? Polymer.EventApi.factory(a) : c.factory(a, b);
  };
  a = Element.prototype;
  c.matchesSelector = a.matches || a.matchesSelector || a.mozMatchesSelector || a.msMatchesSelector || a.oMatchesSelector || a.webkitMatchesSelector;
  return c;
}();
(function() {
  var a = Polymer.DomApi, b = a.factory, c = Polymer.TreeApi, d = Polymer.domInnerHTML.getInnerHTML, e = a.CONTENT;
  if (!Polymer.Settings.useShadow) {
    var f = Element.prototype.cloneNode, g = Document.prototype.importNode;
    Polymer.Base.extend(a.prototype, {_lazyDistribute:function(a) {
      a.shadyRoot && a.shadyRoot._distributionClean && (a.shadyRoot._distributionClean = !1, Polymer.dom.addDebouncer(a.debounce("_distribute", a._distributeContent)));
    }, appendChild:function(a) {
      return this.insertBefore(a);
    }, insertBefore:function(d, f) {
      if (f && c.Logical.getParentNode(f) !== this.node) {
        throw Error("The ref_node to be inserted before is not a child of this node");
      }
      if (d.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
        var g = c.Logical.getParentNode(d);
        g ? (a.hasApi(g) && b(g).notifyObserver(), this._removeNode(d)) : this._removeOwnerShadyRoot(d);
      }
      this._addNode(d, f) || (f && (f = f.localName === e ? this._firstComposedNode(f) : f), g = this.node._isShadyRoot ? this.node.host : this.node, f ? c.Composed.insertBefore(g, d, f) : c.Composed.appendChild(g, d));
      this.notifyObserver();
      return d;
    }, _addNode:function(a, b) {
      var d = this.getOwnerRoot();
      if (d) {
        var e = this._maybeAddInsertionPoint(a, this.node);
        d._invalidInsertionPoints || (d._invalidInsertionPoints = e);
        this._addNodeToHost(d.host, a);
      }
      c.Logical.hasChildNodes(this.node) && c.Logical.recordInsertBefore(a, this.node, b);
      if (b = this._maybeDistribute(a) || this.node.shadyRoot) {
        if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          for (; a.firstChild;) {
            c.Composed.removeChild(a, a.firstChild);
          }
        } else {
          (d = c.Composed.getParentNode(a)) && c.Composed.removeChild(d, a);
        }
      }
      return b;
    }, removeChild:function(a) {
      if (c.Logical.getParentNode(a) !== this.node) {
        throw Error("The node to be removed is not a child of this node: " + a);
      }
      if (!this._removeNode(a)) {
        var b = this.node._isShadyRoot ? this.node.host : this.node, d = c.Composed.getParentNode(a);
        b === d && c.Composed.removeChild(b, a);
      }
      this.notifyObserver();
      return a;
    }, _removeNode:function(a) {
      var d = c.Logical.hasParentNode(a) && c.Logical.getParentNode(a), e = this._ownerShadyRootForNode(a);
      if (d) {
        var f = b(a)._maybeDistributeParent();
        c.Logical.recordRemoveChild(a, d);
        e && this._removeDistributedChildren(e, a) && (e._invalidInsertionPoints = !0, this._lazyDistribute(e.host));
      }
      this._removeOwnerShadyRoot(a);
      e && this._removeNodeFromHost(e.host, a);
      return f;
    }, replaceChild:function(a, b) {
      this.insertBefore(a, b);
      this.removeChild(b);
      return a;
    }, _hasCachedOwnerRoot:function(a) {
      return void 0 !== a._ownerShadyRoot;
    }, getOwnerRoot:function() {
      return this._ownerShadyRootForNode(this.node);
    }, _ownerShadyRootForNode:function(a) {
      if (a) {
        var b = a._ownerShadyRoot;
        void 0 === b && (b = a._isShadyRoot ? a : (b = c.Logical.getParentNode(a)) ? b._isShadyRoot ? b : this._ownerShadyRootForNode(b) : null, b || document.documentElement.contains(a)) && (a._ownerShadyRoot = b);
        return b;
      }
    }, _maybeDistribute:function(a) {
      var d = a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !a.__noContent && b(a).querySelector(e), f = d && c.Logical.getParentNode(d).nodeType !== Node.DOCUMENT_FRAGMENT_NODE;
      (a = d || a.localName === e) && (d = this.getOwnerRoot()) && this._lazyDistribute(d.host);
      (d = this._nodeNeedsDistribution(this.node)) && this._lazyDistribute(this.node);
      return d || a && !f;
    }, _maybeAddInsertionPoint:function(a, d) {
      if (a.nodeType !== Node.DOCUMENT_FRAGMENT_NODE || a.__noContent) {
        a.localName === e && (c.Logical.saveChildNodes(d), c.Logical.saveChildNodes(a), l = !0);
      } else {
        for (var f = b(a).querySelectorAll(e), g = 0, h, m; g < f.length && (h = f[g]); g++) {
          m = c.Logical.getParentNode(h);
          m === a && (m = d);
          m = this._maybeAddInsertionPoint(h, m);
          var l = l || m;
        }
      }
      return l;
    }, _updateInsertionPoints:function(a) {
      a = a.shadyRoot._insertionPoints = b(a.shadyRoot).querySelectorAll(e);
      for (var d = 0, f; d < a.length; d++) {
        f = a[d], c.Logical.saveChildNodes(f), c.Logical.saveChildNodes(c.Logical.getParentNode(f));
      }
    }, _nodeNeedsDistribution:function(b) {
      return b && b.shadyRoot && a.hasInsertionPoint(b.shadyRoot);
    }, _addNodeToHost:function(a, b) {
      a._elementAdd && a._elementAdd(b);
    }, _removeNodeFromHost:function(a, b) {
      a._elementRemove && a._elementRemove(b);
    }, _removeDistributedChildren:function(a, d) {
      a = a._insertionPoints;
      for (var e = 0; e < a.length; e++) {
        var f = a[e];
        if (this._contains(d, f)) {
          for (var f = b(f).getDistributedNodes(), g = 0; g < f.length; g++) {
            var h = !0;
            var l = f[g], u = c.Composed.getParentNode(l);
            u && c.Composed.removeChild(u, l);
          }
        }
      }
      return h;
    }, _contains:function(a, b) {
      for (; b;) {
        if (b == a) {
          return !0;
        }
        b = c.Logical.getParentNode(b);
      }
    }, _removeOwnerShadyRoot:function(a) {
      if (this._hasCachedOwnerRoot(a)) {
        for (var b = c.Logical.getChildNodes(a), d = 0, e = b.length, f; d < e && (f = b[d]); d++) {
          this._removeOwnerShadyRoot(f);
        }
      }
      a._ownerShadyRoot = void 0;
    }, _firstComposedNode:function(a) {
      for (var c = b(a).getDistributedNodes(), d = 0, e = c.length, f, g; d < e && (f = c[d]); d++) {
        if (g = b(f).getDestinationInsertionPoints(), g[g.length - 1] === a) {
          return f;
        }
      }
    }, querySelector:function(b) {
      return this._query(function(c) {
        return a.matchesSelector.call(c, b);
      }, this.node, function(a) {
        return !!a;
      })[0] || null;
    }, querySelectorAll:function(b) {
      return this._query(function(c) {
        return a.matchesSelector.call(c, b);
      }, this.node);
    }, getDestinationInsertionPoints:function() {
      return this.node._destinationInsertionPoints || [];
    }, getDistributedNodes:function() {
      return this.node._distributedNodes || [];
    }, _clear:function() {
      for (; this.childNodes.length;) {
        this.removeChild(this.childNodes[0]);
      }
    }, setAttribute:function(a, b) {
      this.node.setAttribute(a, b);
      this._maybeDistributeParent();
    }, removeAttribute:function(a) {
      this.node.removeAttribute(a);
      this._maybeDistributeParent();
    }, _maybeDistributeParent:function() {
      if (this._nodeNeedsDistribution(this.parentNode)) {
        return this._lazyDistribute(this.parentNode), !0;
      }
    }, cloneNode:function(a) {
      var c = f.call(this.node, !1);
      if (a) {
        a = this.childNodes;
        for (var d = b(c), e = 0, g; e < a.length; e++) {
          g = b(a[e]).cloneNode(!0), d.appendChild(g);
        }
      }
      return c;
    }, importNode:function(a, d) {
      var e = this.node instanceof Document ? this.node : this.node.ownerDocument, f = g.call(e, a, !1);
      if (d) {
        a = c.Logical.getChildNodes(a);
        d = b(f);
        for (var h = 0, m; h < a.length; h++) {
          m = b(e).importNode(a[h], !0), d.appendChild(m);
        }
      }
      return f;
    }, _getComposedInnerHTML:function() {
      return d(this.node, !0);
    }});
    Object.defineProperties(a.prototype, {activeElement:{get:function() {
      var a = document.activeElement;
      if (!a) {
        return null;
      }
      var c = !!this.node._isShadyRoot;
      if (!(this.node === document || c && this.node.host !== a && this.node.host.contains(a))) {
        return null;
      }
      for (c = b(a).getOwnerRoot(); c && c !== this.node;) {
        a = c.host, c = b(a).getOwnerRoot();
      }
      return this.node === document ? c ? null : a : c === this.node ? a : null;
    }, configurable:!0}, childNodes:{get:function() {
      var a = c.Logical.getChildNodes(this.node);
      return Array.isArray(a) ? a : c.arrayCopyChildNodes(this.node);
    }, configurable:!0}, children:{get:function() {
      return c.Logical.hasChildNodes(this.node) ? Array.prototype.filter.call(this.childNodes, function(a) {
        return a.nodeType === Node.ELEMENT_NODE;
      }) : c.arrayCopyChildren(this.node);
    }, configurable:!0}, parentNode:{get:function() {
      return c.Logical.getParentNode(this.node);
    }, configurable:!0}, firstChild:{get:function() {
      return c.Logical.getFirstChild(this.node);
    }, configurable:!0}, lastChild:{get:function() {
      return c.Logical.getLastChild(this.node);
    }, configurable:!0}, nextSibling:{get:function() {
      return c.Logical.getNextSibling(this.node);
    }, configurable:!0}, previousSibling:{get:function() {
      return c.Logical.getPreviousSibling(this.node);
    }, configurable:!0}, firstElementChild:{get:function() {
      return c.Logical.getFirstElementChild(this.node);
    }, configurable:!0}, lastElementChild:{get:function() {
      return c.Logical.getLastElementChild(this.node);
    }, configurable:!0}, nextElementSibling:{get:function() {
      return c.Logical.getNextElementSibling(this.node);
    }, configurable:!0}, previousElementSibling:{get:function() {
      return c.Logical.getPreviousElementSibling(this.node);
    }, configurable:!0}, textContent:{get:function() {
      var a = this.node.nodeType;
      if (a === Node.TEXT_NODE || a === Node.COMMENT_NODE) {
        return this.node.textContent;
      }
      for (var a = [], b = 0, c = this.childNodes, d; d = c[b]; b++) {
        d.nodeType !== Node.COMMENT_NODE && a.push(d.textContent);
      }
      return a.join("");
    }, set:function(a) {
      var b = this.node.nodeType;
      b === Node.TEXT_NODE || b === Node.COMMENT_NODE ? this.node.textContent = a : (this._clear(), a && this.appendChild(document.createTextNode(a)));
    }, configurable:!0}, innerHTML:{get:function() {
      var a = this.node.nodeType;
      return a === Node.TEXT_NODE || a === Node.COMMENT_NODE ? null : d(this.node);
    }, set:function(a) {
      var b = this.node.nodeType;
      if (b !== Node.TEXT_NODE || b !== Node.COMMENT_NODE) {
        for (this._clear(), b = document.createElement("div"), b.innerHTML = a, a = c.arrayCopyChildNodes(b), b = 0; b < a.length; b++) {
          this.appendChild(a[b]);
        }
      }
    }, configurable:!0}});
    a.hasInsertionPoint = function(a) {
      return !(!a || !a._insertionPoints.length);
    };
  }
})();
(function() {
  var a = Polymer.TreeApi, b = Polymer.DomApi;
  if (Polymer.Settings.useShadow) {
    Polymer.Base.extend(b.prototype, {querySelectorAll:function(b) {
      return a.arrayCopy(this.node.querySelectorAll(b));
    }, getOwnerRoot:function() {
      for (var a = this.node; a;) {
        if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && a.host) {
          return a;
        }
        a = a.parentNode;
      }
    }, importNode:function(a, b) {
      return (this.node instanceof Document ? this.node : this.node.ownerDocument).importNode(a, b);
    }, getDestinationInsertionPoints:function() {
      var b = this.node.getDestinationInsertionPoints && this.node.getDestinationInsertionPoints();
      return b ? a.arrayCopy(b) : [];
    }, getDistributedNodes:function() {
      var b = this.node.getDistributedNodes && this.node.getDistributedNodes();
      return b ? a.arrayCopy(b) : [];
    }});
    Object.defineProperties(b.prototype, {activeElement:{get:function() {
      var a = b.wrap(this.node), c = a.activeElement;
      return a.contains(c) ? c : null;
    }, configurable:!0}, childNodes:{get:function() {
      return a.arrayCopyChildNodes(this.node);
    }, configurable:!0}, children:{get:function() {
      return a.arrayCopyChildren(this.node);
    }, configurable:!0}, textContent:{get:function() {
      return this.node.textContent;
    }, set:function(a) {
      return this.node.textContent = a;
    }, configurable:!0}, innerHTML:{get:function() {
      return this.node.innerHTML;
    }, set:function(a) {
      return this.node.innerHTML = a;
    }, configurable:!0}});
    var c = function(a) {
      b.prototype[a] = function() {
        return this.node[a].apply(this.node, arguments);
      };
    };
    (function(a) {
      for (var b = 0; b < a.length; b++) {
        c(a[b]);
      }
    })("cloneNode appendChild insertBefore removeChild replaceChild setAttribute removeAttribute querySelector".split(" "));
    var d = function(a) {
      Object.defineProperty(b.prototype, a, {get:function() {
        return this.node[a];
      }, configurable:!0});
    };
    (function(a) {
      for (var b = 0; b < a.length; b++) {
        d(a[b]);
      }
    })("parentNode firstChild lastChild nextSibling previousSibling firstElementChild lastElementChild nextElementSibling previousElementSibling".split(" "));
  }
})();
Polymer.Base.extend(Polymer.dom, {_flushGuard:0, _FLUSH_MAX:100, _needsTakeRecords:!Polymer.Settings.useNativeCustomElements, _debouncers:[], _staticFlushList:[], _finishDebouncer:null, flush:function() {
  this._flushGuard = 0;
  for (this._prepareFlush(); this._debouncers.length && this._flushGuard < this._FLUSH_MAX;) {
    for (; this._debouncers.length;) {
      this._debouncers.shift().complete();
    }
    this._finishDebouncer && this._finishDebouncer.complete();
    this._prepareFlush();
    this._flushGuard++;
  }
  this._flushGuard >= this._FLUSH_MAX && console.warn("Polymer.dom.flush aborted. Flush may not be complete.");
}, _prepareFlush:function() {
  this._needsTakeRecords && CustomElements.takeRecords();
  for (var a = 0; a < this._staticFlushList.length; a++) {
    this._staticFlushList[a]();
  }
}, addStaticFlush:function(a) {
  this._staticFlushList.push(a);
}, removeStaticFlush:function(a) {
  a = this._staticFlushList.indexOf(a);
  0 <= a && this._staticFlushList.splice(a, 1);
}, addDebouncer:function(a) {
  this._debouncers.push(a);
  this._finishDebouncer = Polymer.Debounce(this._finishDebouncer, this._finishFlush);
}, _finishFlush:function() {
  Polymer.dom._debouncers = [];
}});
Polymer.EventApi = function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.Event = function(a) {
    this.event = a;
  };
  a.Event.prototype = b.useShadow ? {get rootTarget() {
    return this.event.path[0];
  }, get localTarget() {
    return this.event.target;
  }, get path() {
    var a = this.event.path;
    Array.isArray(a) || (a = Array.prototype.slice.call(a));
    return a;
  }} : {get rootTarget() {
    return this.event.target;
  }, get localTarget() {
    for (var a = this.event.currentTarget, a = a && Polymer.dom(a).getOwnerRoot(), b = this.path, e = 0; e < b.length; e++) {
      if (Polymer.dom(b[e]).getOwnerRoot() === a) {
        return b[e];
      }
    }
  }, get path() {
    if (!this.event._path) {
      for (var a = [], b = this.rootTarget; b;) {
        a.push(b);
        var e = Polymer.dom(b).getDestinationInsertionPoints();
        if (e.length) {
          for (b = 0; b < e.length - 1; b++) {
            a.push(e[b]);
          }
          b = e[e.length - 1];
        } else {
          b = Polymer.dom(b).parentNode || b.host;
        }
      }
      a.push(window);
      this.event._path = a;
    }
    return this.event._path;
  }};
  return {factory:function(b) {
    b.__eventApi || (b.__eventApi = new a.Event(b));
    return b.__eventApi;
  }};
}();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings.useShadow;
  Object.defineProperty(a.prototype, "classList", {get:function() {
    this._classList || (this._classList = new a.ClassList(this));
    return this._classList;
  }, configurable:!0});
  a.ClassList = function(a) {
    this.domApi = a;
    this.node = a.node;
  };
  a.ClassList.prototype = {add:function() {
    this.node.classList.add.apply(this.node.classList, arguments);
    this._distributeParent();
  }, remove:function() {
    this.node.classList.remove.apply(this.node.classList, arguments);
    this._distributeParent();
  }, toggle:function() {
    this.node.classList.toggle.apply(this.node.classList, arguments);
    this._distributeParent();
  }, _distributeParent:function() {
    b || this.domApi._maybeDistributeParent();
  }, contains:function() {
    return this.node.classList.contains.apply(this.node.classList, arguments);
  }};
})();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.EffectiveNodesObserver = function(a) {
    this.domApi = a;
    this.node = this.domApi.node;
    this._listeners = [];
  };
  a.EffectiveNodesObserver.prototype = {addListener:function(a) {
    this._isSetup || (this._setup(), this._isSetup = !0);
    a = {fn:a, _nodes:[]};
    this._listeners.push(a);
    this._scheduleNotify();
    return a;
  }, removeListener:function(a) {
    var b = this._listeners.indexOf(a);
    0 <= b && (this._listeners.splice(b, 1), a._nodes = []);
    this._hasListeners() || (this._cleanup(), this._isSetup = !1);
  }, _setup:function() {
    this._observeContentElements(this.domApi.childNodes);
  }, _cleanup:function() {
    this._unobserveContentElements(this.domApi.childNodes);
  }, _hasListeners:function() {
    return !!this._listeners.length;
  }, _scheduleNotify:function() {
    this._debouncer && this._debouncer.stop();
    this._debouncer = Polymer.Debounce(this._debouncer, this._notify);
    this._debouncer.context = this;
    Polymer.dom.addDebouncer(this._debouncer);
  }, notify:function() {
    this._hasListeners() && this._scheduleNotify();
  }, _notify:function() {
    this._beforeCallListeners();
    this._callListeners();
  }, _beforeCallListeners:function() {
    this._updateContentElements();
  }, _updateContentElements:function() {
    this._observeContentElements(this.domApi.childNodes);
  }, _observeContentElements:function(a) {
    for (var b = 0, c; b < a.length && (c = a[b]); b++) {
      this._isContent(c) && (c.__observeNodesMap = c.__observeNodesMap || new WeakMap, c.__observeNodesMap.has(this) || c.__observeNodesMap.set(this, this._observeContent(c)));
    }
  }, _observeContent:function(a) {
    var b = this;
    a = Polymer.dom(a).observeNodes(function() {
      b._scheduleNotify();
    });
    a._avoidChangeCalculation = !0;
    return a;
  }, _unobserveContentElements:function(a) {
    for (var b = 0, c, d; b < a.length && (c = a[b]); b++) {
      this._isContent(c) && (d = c.__observeNodesMap.get(this)) && (Polymer.dom(c).unobserveNodes(d), c.__observeNodesMap.delete(this));
    }
  }, _isContent:function(a) {
    return "content" === a.localName;
  }, _callListeners:function() {
    for (var a = this._listeners, b = this._getEffectiveNodes(), c = 0, d; c < a.length && (d = a[c]); c++) {
      var l = this._generateListenerInfo(d, b);
      (l || d._alwaysNotify) && this._callListener(d, l);
    }
  }, _getEffectiveNodes:function() {
    return this.domApi.getEffectiveChildNodes();
  }, _generateListenerInfo:function(a, b) {
    if (a._avoidChangeCalculation) {
      return !0;
    }
    for (var c = {target:this.node, addedNodes:[], removedNodes:[]}, d = Polymer.ArraySplice.calculateSplices(b, a._nodes), e = 0, f; e < d.length && (f = d[e]); e++) {
      for (var p = 0, q; p < f.removed.length && (q = f.removed[p]); p++) {
        c.removedNodes.push(q);
      }
    }
    e = 0;
    for (f; e < d.length && (f = d[e]); e++) {
      for (p = f.index; p < f.index + f.addedCount; p++) {
        c.addedNodes.push(b[p]);
      }
    }
    a._nodes = b;
    if (c.addedNodes.length || c.removedNodes.length) {
      return c;
    }
  }, _callListener:function(a, b) {
    return a.fn.call(this.node, b);
  }, enableShadowAttributeTracking:function() {
  }};
  if (b.useShadow) {
    var c = a.EffectiveNodesObserver.prototype._setup, d = a.EffectiveNodesObserver.prototype._cleanup;
    Polymer.Base.extend(a.EffectiveNodesObserver.prototype, {_setup:function() {
      if (!this._observer) {
        var a = this;
        this._mutationHandler = function(b) {
          b && b.length && a._scheduleNotify();
        };
        this._observer = new MutationObserver(this._mutationHandler);
        this._boundFlush = function() {
          a._flush();
        };
        Polymer.dom.addStaticFlush(this._boundFlush);
        this._observer.observe(this.node, {childList:!0});
      }
      c.call(this);
    }, _cleanup:function() {
      this._observer.disconnect();
      this._mutationHandler = this._observer = null;
      Polymer.dom.removeStaticFlush(this._boundFlush);
      d.call(this);
    }, _flush:function() {
      this._observer && this._mutationHandler(this._observer.takeRecords());
    }, enableShadowAttributeTracking:function() {
      if (this._observer) {
        this._makeContentListenersAlwaysNotify();
        this._observer.disconnect();
        this._observer.observe(this.node, {childList:!0, attributes:!0, subtree:!0});
        var a = this.domApi.getOwnerRoot();
        (a = a && a.host) && Polymer.dom(a).observer && Polymer.dom(a).observer.enableShadowAttributeTracking();
      }
    }, _makeContentListenersAlwaysNotify:function() {
      for (var a = 0, b; a < this._listeners.length; a++) {
        b = this._listeners[a], b._alwaysNotify = b._isContentListener;
      }
    }});
  }
})();
(function() {
  var a = Polymer.DomApi.ctor, b = Polymer.Settings;
  a.DistributedNodesObserver = function(b) {
    a.EffectiveNodesObserver.call(this, b);
  };
  a.DistributedNodesObserver.prototype = Object.create(a.EffectiveNodesObserver.prototype);
  Polymer.Base.extend(a.DistributedNodesObserver.prototype, {_setup:function() {
  }, _cleanup:function() {
  }, _beforeCallListeners:function() {
  }, _getEffectiveNodes:function() {
    return this.domApi.getDistributedNodes();
  }});
  b.useShadow && Polymer.Base.extend(a.DistributedNodesObserver.prototype, {_setup:function() {
    if (!this._observer) {
      var a = this.domApi.getOwnerRoot();
      if (a = a && a.host) {
        var b = this;
        this._observer = Polymer.dom(a).observeNodes(function() {
          b._scheduleNotify();
        });
        this._observer._isContentListener = !0;
        this._hasAttrSelect() && Polymer.dom(a).observer.enableShadowAttributeTracking();
      }
    }
  }, _hasAttrSelect:function() {
    var a = this.node.getAttribute("select");
    return a && a.match(/[[.]+/);
  }, _cleanup:function() {
    var a = this.domApi.getOwnerRoot();
    (a = a && a.host) && Polymer.dom(a).unobserveNodes(this._observer);
    this._observer = null;
  }});
})();
(function() {
  function a(a, b) {
    b._distributedNodes.push(a);
    var c = a._destinationInsertionPoints;
    c ? c.push(b) : a._destinationInsertionPoints = [b];
  }
  function b(a) {
    for (var b = d.Logical.getChildNodes(a), c = 0, e; c < b.length; c++) {
      if (e = b[c], e.localName && "content" === e.localName) {
        return a.domHost;
      }
    }
  }
  var c = Polymer.DomApi, d = Polymer.TreeApi;
  Polymer.Base._addFeature({_prepShady:function() {
    this._useContent = this._useContent || !!this._template;
  }, _setupShady:function() {
    this.shadyRoot = null;
    this.__domApi || (this.__domApi = null);
    this.__dom || (this.__dom = null);
    this._ownerShadyRoot || (this._ownerShadyRoot = void 0);
  }, _poolContent:function() {
    this._useContent && d.Logical.saveChildNodes(this);
  }, _setupRoot:function() {
    if (this._useContent && (this._createLocalRoot(), !this.dataHost)) {
      var a = d.Logical.getChildNodes(this);
      if (e && a) {
        for (var b = 0; b < a.length; b++) {
          CustomElements.upgrade(a[b]);
        }
      }
    }
  }, _createLocalRoot:function() {
    this.shadyRoot = this.root;
    this.shadyRoot._distributionClean = !1;
    this.shadyRoot._hasDistributed = !1;
    this.shadyRoot._isShadyRoot = !0;
    this.shadyRoot._dirtyRoots = [];
    var a = this.shadyRoot._insertionPoints = !this._notes || this._notes._hasContent ? this.shadyRoot.querySelectorAll("content") : [];
    d.Logical.saveChildNodes(this.shadyRoot);
    for (var b = 0, c; b < a.length; b++) {
      c = a[b], d.Logical.saveChildNodes(c), d.Logical.saveChildNodes(c.parentNode);
    }
    this.shadyRoot.host = this;
  }, get domHost() {
    var a = Polymer.dom(this).getOwnerRoot();
    return a && a.host;
  }, distributeContent:function(a) {
    if (this.shadyRoot) {
      this.shadyRoot._invalidInsertionPoints = this.shadyRoot._invalidInsertionPoints || a;
      for (a = this; a && b(a);) {
        a = a.domHost;
      }
      Polymer.dom(this)._lazyDistribute(a);
    }
  }, _distributeContent:function() {
    this._useContent && !this.shadyRoot._distributionClean && (this.shadyRoot._invalidInsertionPoints && (Polymer.dom(this)._updateInsertionPoints(this), this.shadyRoot._invalidInsertionPoints = !1), this._beginDistribute(), this._distributeDirtyRoots(), this._finishDistribute());
  }, _beginDistribute:function() {
    this._useContent && c.hasInsertionPoint(this.shadyRoot) && (this._resetDistribution(), this._distributePool(this.shadyRoot, this._collectPool()));
  }, _distributeDirtyRoots:function() {
    for (var a = this.shadyRoot._dirtyRoots, b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
      d._distributeContent();
    }
    this.shadyRoot._dirtyRoots = [];
  }, _finishDistribute:function() {
    if (this._useContent) {
      this.shadyRoot._distributionClean = !0;
      if (c.hasInsertionPoint(this.shadyRoot)) {
        this._composeTree();
        for (var a = this.shadyRoot, b = 0, e; b < a._insertionPoints.length; b++) {
          e = a._insertionPoints[b], c.hasApi(e) && Polymer.dom(e).notifyObserver();
        }
      } else {
        this.shadyRoot._hasDistributed ? (a = this._composeNode(this), this._updateChildNodes(this, a)) : (d.Composed.clearChildNodes(this), this.appendChild(this.shadyRoot));
      }
      this.shadyRoot._hasDistributed || c.hasApi(this) && Polymer.dom(this).notifyObserver();
      this.shadyRoot._hasDistributed = !0;
    }
  }, elementMatches:function(a, b) {
    return c.matchesSelector.call(b || this, a);
  }, _resetDistribution:function() {
    for (var a = d.Logical.getChildNodes(this), b = 0; b < a.length; b++) {
      var c = a[b];
      c._destinationInsertionPoints && (c._destinationInsertionPoints = void 0);
      if ("content" == c.localName) {
        var e = c._distributedNodes;
        if (e) {
          for (var n = 0; n < e.length; n++) {
            var p = e[n]._destinationInsertionPoints;
            p && p.splice(p.indexOf(c) + 1, p.length);
          }
        }
      }
    }
    a = this.shadyRoot._insertionPoints;
    for (b = 0; b < a.length; b++) {
      a[b]._distributedNodes = [];
    }
  }, _collectPool:function() {
    for (var a = [], b = d.Logical.getChildNodes(this), c = 0; c < b.length; c++) {
      var e = b[c];
      "content" == e.localName ? a.push.apply(a, e._distributedNodes) : a.push(e);
    }
    return a;
  }, _distributePool:function(a, b) {
    a = a._insertionPoints;
    for (var e = 0, f = a.length, g; e < f && (g = a[e]); e++) {
      this._distributeInsertionPoint(g, b);
      var p = d.Logical.getParentNode(g);
      p && p.shadyRoot && c.hasInsertionPoint(p.shadyRoot) && p.shadyRoot._distributionClean && (p.shadyRoot._distributionClean = !1, this.shadyRoot._dirtyRoots.push(p));
    }
  }, _distributeInsertionPoint:function(b, c) {
    for (var e = !1, f = 0, g = c.length, p; f < g; f++) {
      (p = c[f]) && this._matchesContentSelect(p, b) && (a(p, b), c[f] = void 0, e = !0);
    }
    if (!e) {
      for (c = d.Logical.getChildNodes(b), e = 0; e < c.length; e++) {
        a(c[e], b);
      }
    }
  }, _composeTree:function() {
    this._updateChildNodes(this, this._composeNode(this));
    for (var a = this.shadyRoot._insertionPoints, b = 0, c = a.length, e, n; b < c && (e = a[b]); b++) {
      n = d.Logical.getParentNode(e), n._useContent || n === this || n === this.shadyRoot || this._updateChildNodes(n, this._composeNode(n));
    }
  }, _composeNode:function(a) {
    var b = [];
    a = d.Logical.getChildNodes(a.shadyRoot || a);
    for (var c = 0; c < a.length; c++) {
      var e = a[c];
      if ("content" == e.localName) {
        for (var f = e._distributedNodes, p = 0; p < f.length; p++) {
          var q = f[p], m = q._destinationInsertionPoints;
          m && m[m.length - 1] === e && b.push(q);
        }
      } else {
        b.push(e);
      }
    }
    return b;
  }, _updateChildNodes:function(a, b) {
    for (var c = d.Composed.getChildNodes(a), e = Polymer.ArraySplice.calculateSplices(b, c), f = 0, g = 0, q; f < e.length && (q = e[f]); f++) {
      for (var m = 0, r; m < q.removed.length && (r = q.removed[m]); m++) {
        d.Composed.getParentNode(r) === a && d.Composed.removeChild(a, r), c.splice(q.index + g, 1);
      }
      g -= q.addedCount;
    }
    for (f = 0; f < e.length && (q = e[f]); f++) {
      for (g = c[q.index], m = q.index, r; m < q.index + q.addedCount; m++) {
        r = b[m], d.Composed.insertBefore(a, r, g), c.splice(m, 0, r);
      }
    }
  }, _matchesContentSelect:function(a, b) {
    b = b.getAttribute("select");
    return b ? (b = b.trim()) ? a instanceof Element && /^(:not\()?[*.#[a-zA-Z_|]/.test(b) ? this.elementMatches(b, a) : !1 : !0 : !0;
  }, _elementAdd:function() {
  }, _elementRemove:function() {
  }});
  var e = window.CustomElements && !CustomElements.useNative;
})();
Polymer.Settings.useShadow && Polymer.Base._addFeature({_poolContent:function() {
}, _beginDistribute:function() {
}, distributeContent:function() {
}, _distributeContent:function() {
}, _finishDistribute:function() {
}, _createLocalRoot:function() {
  this.createShadowRoot();
  this.shadowRoot.appendChild(this.root);
  this.root = this.shadowRoot;
}});
Polymer.Async = {_currVal:0, _lastVal:0, _callbacks:[], _twiddleContent:0, _twiddle:document.createTextNode(""), run:function(a, b) {
  if (0 < b) {
    return ~setTimeout(a, b);
  }
  this._twiddle.textContent = this._twiddleContent++;
  this._callbacks.push(a);
  return this._currVal++;
}, cancel:function(a) {
  if (0 > a) {
    clearTimeout(~a);
  } else {
    var b = a - this._lastVal;
    if (0 <= b) {
      if (!this._callbacks[b]) {
        throw "invalid async handle: " + a;
      }
      this._callbacks[b] = null;
    }
  }
}, _atEndOfMicrotask:function() {
  for (var a = this._callbacks.length, b = 0; b < a; b++) {
    var c = this._callbacks[b];
    if (c) {
      try {
        c();
      } catch (d) {
        throw b++, this._callbacks.splice(0, b), this._lastVal += b, this._twiddle.textContent = this._twiddleContent++, d;
      }
    }
  }
  this._callbacks.splice(0, a);
  this._lastVal += a;
}};
(new window.MutationObserver(function() {
  Polymer.Async._atEndOfMicrotask();
})).observe(Polymer.Async._twiddle, {characterData:!0});
Polymer.Debounce = function() {
  var a = Polymer.Async, b = function(a) {
    this.context = a;
    var b = this;
    this.boundComplete = function() {
      b.complete();
    };
  };
  b.prototype = {go:function(b, d) {
    this.finish = function() {
      a.cancel(c);
    };
    var c = a.run(this.boundComplete, d);
    this.callback = b;
  }, stop:function() {
    this.finish && (this.finish(), this.finish = null);
  }, complete:function() {
    this.finish && (this.stop(), this.callback.call(this.context));
  }};
  return function(a, d, e) {
    a ? a.stop() : a = new b(this);
    a.go(d, e);
    return a;
  };
}();
Polymer.Base._addFeature({_setupDebouncers:function() {
  this._debouncers = {};
}, debounce:function(a, b, c) {
  return this._debouncers[a] = Polymer.Debounce.call(this, this._debouncers[a], b, c);
}, isDebouncerActive:function(a) {
  a = this._debouncers[a];
  return !(!a || !a.finish);
}, flushDebouncer:function(a) {
  (a = this._debouncers[a]) && a.complete();
}, cancelDebouncer:function(a) {
  (a = this._debouncers[a]) && a.stop();
}});
Polymer.DomModule = document.createElement("dom-module");
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepBehaviors();
  this._prepConstructor();
  this._prepTemplate();
  this._prepShady();
  this._prepPropertyInfo();
}, _prepBehavior:function(a) {
  this._addHostAttributes(a.hostAttributes);
}, _initFeatures:function() {
  this._registerHost();
  this._template && (this._poolContent(), this._beginHosting(), this._stampTemplate(), this._endHosting());
  this._marshalHostAttributes();
  this._setupDebouncers();
  this._marshalBehaviors();
  this._tryReady();
}, _marshalBehavior:function(a) {
}});
Polymer.nar = [];
Polymer.Annotations = {parseAnnotations:function(a) {
  var b = [];
  this._parseNodeAnnotations(a._content || a.content, b, a.hasAttribute("strip-whitespace"));
  return b;
}, _parseNodeAnnotations:function(a, b, c) {
  return a.nodeType === Node.TEXT_NODE ? this._parseTextNodeAnnotation(a, b) : this._parseElementAnnotations(a, b, c);
}, _bindingRegex:function() {
  return /(\[\[|{{)\s*(?:(!)\s*)?((?:[a-zA-Z_$][\w.:$\-*]*)\s*(?:\(\s*(?:(?:(?:(?:[a-zA-Z_$][\w.:$\-*]*)|(?:[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\]|\\.)*')|(?:"(?:[^"\\]|\\.)*"))\s*)(?:,\s*(?:(?:[a-zA-Z_$][\w.:$\-*]*)|(?:[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\]|\\.)*')|(?:"(?:[^"\\]|\\.)*"))\s*))*)?)\)\s*)?)(?:]]|}})/g;
}(), _parseBindings:function(a) {
  for (var b = this._bindingRegex, c = [], d = 0, e; null !== (e = b.exec(a));) {
    e.index > d && c.push({literal:a.slice(d, e.index)});
    var d = e[1][0], f = !!e[2];
    e = e[3].trim();
    var g;
    if ("{" == d && 0 < (g = e.indexOf("::"))) {
      var h = e.substring(g + 2);
      e = e.substring(0, g);
      var l = !0;
    }
    c.push({compoundIndex:c.length, value:e, mode:d, negate:f, event:h, customEvent:l});
    d = b.lastIndex;
  }
  d && d < a.length && (a = a.substring(d)) && c.push({literal:a});
  if (c.length) {
    return c;
  }
}, _literalFromParts:function(a) {
  for (var b = "", c = 0; c < a.length; c++) {
    b += a[c].literal || "";
  }
  return b;
}, _parseTextNodeAnnotation:function(a, b) {
  var c = this._parseBindings(a.textContent);
  if (c) {
    return a.textContent = this._literalFromParts(c) || " ", a = {bindings:[{kind:"text", name:"textContent", parts:c, isCompound:1 !== c.length}]}, b.push(a), a;
  }
}, _parseElementAnnotations:function(a, b, c) {
  var d = {bindings:[], events:[]};
  "content" === a.localName && (b._hasContent = !0);
  this._parseChildNodesAnnotations(a, d, b, c);
  a.attributes && (this._parseNodeAttributeAnnotations(a, d, b), this.prepElement && this.prepElement(a));
  (d.bindings.length || d.events.length || d.id) && b.push(d);
  return d;
}, _parseChildNodesAnnotations:function(a, b, c, d) {
  if (a.firstChild) {
    for (var e = a.firstChild, f = 0; e;) {
      var g = e.nextSibling;
      "template" !== e.localName || e.hasAttribute("preserve-content") || this._parseTemplate(e, f, c, b);
      if (e.nodeType === Node.TEXT_NODE) {
        for (var h = g; h && h.nodeType === Node.TEXT_NODE;) {
          e.textContent += h.textContent, g = h.nextSibling, a.removeChild(h), h = g;
        }
        d && !e.textContent.trim() && (a.removeChild(e), f--);
      }
      e.parentNode && (e = this._parseNodeAnnotations(e, c, d)) && (e.parent = b, e.index = f);
      e = g;
      f++;
    }
  }
}, _parseTemplate:function(a, b, c, d) {
  var e = document.createDocumentFragment();
  e._notes = this.parseAnnotations(a);
  e.appendChild(a.content);
  c.push({bindings:Polymer.nar, events:Polymer.nar, templateContent:e, parent:d, index:b});
}, _parseNodeAttributeAnnotations:function(a, b) {
  for (var c = Array.prototype.slice.call(a.attributes), d = c.length - 1, e; e = c[d]; d--) {
    var f = e.name;
    e = e.value;
    var g;
    "on-" === f.slice(0, 3) ? (a.removeAttribute(f), b.events.push({name:f.slice(3), value:e})) : (g = this._parseNodeAttributeAnnotation(a, f, e)) ? b.bindings.push(g) : "id" === f && (b.id = e);
  }
}, _parseNodeAttributeAnnotation:function(a, b, c) {
  if (c = this._parseBindings(c)) {
    var d = b, e = "property";
    "$" == b[b.length - 1] && (b = b.slice(0, -1), e = "attribute");
    var f = this._literalFromParts(c);
    f && "attribute" == e && a.setAttribute(b, f);
    "input" === a.localName && "value" === d && a.setAttribute(d, "");
    a.removeAttribute(d);
    a = Polymer.CaseMap.dashToCamelCase(b);
    "property" === e && (b = a);
    return {kind:e, name:b, propertyName:a, parts:c, literal:f, isCompound:1 !== c.length};
  }
}, findAnnotatedNode:function(a, b) {
  var c = b.parent && Polymer.Annotations.findAnnotatedNode(a, b.parent);
  if (c) {
    for (a = c.firstChild, c = 0; a; a = a.nextSibling) {
      if (b.index === c++) {
        return a;
      }
    }
  } else {
    return a;
  }
}};
(function() {
  function a(a, c) {
    return a.replace(e, function(a, d, e, f) {
      return d + "'" + b(e.replace(/["']/g, ""), c) + "'" + f;
    });
  }
  function b(a, b) {
    if (a && "#" === a[0]) {
      return a;
    }
    b = b.__urlResolver || (b.__urlResolver = b.createElement("a"));
    b.href = a;
    return b.href || a;
  }
  var c, d, e = /(url\()([^)]*)(\))/g, f = {"*":["href", "src", "style", "url"], form:["action"]}, g = /\{\{|\[\[/;
  Polymer.ResolveUrl = {resolveCss:a, resolveAttrs:function(c, d) {
    for (var e in f) {
      for (var h = f[e], l = 0, m = h.length, r, u, v; l < m && (r = h[l]); l++) {
        ("*" === e || c.localName === e) && (v = (u = c.attributes[r]) && u.value) && 0 > v.search(g) && (u.value = "style" === r ? a(v, d) : b(v, d));
      }
    }
  }, resolveUrl:function(a, e) {
    c || (c = document.implementation.createHTMLDocument("temp"), d = c.createElement("base"), c.head.appendChild(d));
    d.href = e;
    return b(a, c);
  }};
})();
Polymer.Base._addFeature({_prepAnnotations:function() {
  if (this._template) {
    var a = this;
    Polymer.Annotations.prepElement = function(b) {
      a._prepElement(b);
    };
    this._template._content && this._template._content._notes ? this._notes = this._template._content._notes : (this._notes = Polymer.Annotations.parseAnnotations(this._template), this._processAnnotations(this._notes));
    Polymer.Annotations.prepElement = null;
  } else {
    this._notes = [];
  }
}, _processAnnotations:function(a) {
  for (var b = 0; b < a.length; b++) {
    for (var c = a[b], d = 0; d < c.bindings.length; d++) {
      for (var e = c.bindings[d], f = 0; f < e.parts.length; f++) {
        var g = e.parts[f];
        if (!g.literal) {
          var h = this._parseMethod(g.value);
          h ? g.signature = h : g.model = this._modelForPath(g.value);
        }
      }
    }
    if (c.templateContent) {
      this._processAnnotations(c.templateContent._notes);
      var d = c.templateContent._parentProps = this._discoverTemplateParentProps(c.templateContent._notes), e = [], l;
      for (l in d) {
        e.push({index:c.index, kind:"property", name:"_parent_" + l, parts:[{mode:"{", model:l, value:l}]});
      }
      c.bindings = c.bindings.concat(e);
    }
  }
}, _discoverTemplateParentProps:function(a) {
  for (var b = {}, c = 0, d; c < a.length && (d = a[c]); c++) {
    for (var e = 0, f = d.bindings, g; e < f.length && (g = f[e]); e++) {
      for (var h = 0, l = g.parts, n; h < l.length && (n = l[h]); h++) {
        if (n.signature) {
          for (var p = n.signature.args, q = 0; q < p.length; q++) {
            var m = p[q].model;
            m && (b[m] = !0);
          }
        } else {
          n.model && (b[n.model] = !0);
        }
      }
    }
    d.templateContent && Polymer.Base.mixin(b, d.templateContent._parentProps);
  }
  return b;
}, _prepElement:function(a) {
  Polymer.ResolveUrl.resolveAttrs(a, this._template.ownerDocument);
}, _findAnnotatedNode:Polymer.Annotations.findAnnotatedNode, _marshalAnnotationReferences:function() {
  this._template && (this._marshalIdNodes(), this._marshalAnnotatedNodes(), this._marshalAnnotatedListeners());
}, _configureAnnotationReferences:function() {
  for (var a = this._notes, b = this._nodes, c = 0; c < a.length; c++) {
    var d = a[c], e = b[c];
    this._configureTemplateContent(d, e);
    this._configureCompoundBindings(d, e);
  }
}, _configureTemplateContent:function(a, b) {
  a.templateContent && (b._content = a.templateContent);
}, _configureCompoundBindings:function(a, b) {
  a = a.bindings;
  for (var c = 0; c < a.length; c++) {
    var d = a[c];
    if (d.isCompound) {
      for (var e = b.__compoundStorage__ || (b.__compoundStorage__ = {}), f = d.parts, g = Array(f.length), h = 0; h < f.length; h++) {
        g[h] = f[h].literal;
      }
      f = d.name;
      e[f] = g;
      d.literal && "property" == d.kind && (b._configValue ? b._configValue(f, d.literal) : b[f] = d.literal);
    }
  }
}, _marshalIdNodes:function() {
  this.$ = {};
  for (var a = 0, b = this._notes.length, c; a < b && (c = this._notes[a]); a++) {
    c.id && (this.$[c.id] = this._findAnnotatedNode(this.root, c));
  }
}, _marshalAnnotatedNodes:function() {
  if (this._notes && this._notes.length) {
    for (var a = Array(this._notes.length), b = 0; b < this._notes.length; b++) {
      a[b] = this._findAnnotatedNode(this.root, this._notes[b]);
    }
    this._nodes = a;
  }
}, _marshalAnnotatedListeners:function() {
  for (var a = 0, b = this._notes.length, c; a < b && (c = this._notes[a]); a++) {
    if (c.events && c.events.length) {
      for (var d = this._findAnnotatedNode(this.root, c), e = 0, f = c.events, g; e < f.length && (g = f[e]); e++) {
        this.listen(d, g.name, g.value);
      }
    }
  }
}});
Polymer.Base._addFeature({listeners:{}, _listenListeners:function(a) {
  var b;
  for (b in a) {
    if (0 > b.indexOf(".")) {
      var c = this;
      var d = b;
    } else {
      d = b.split("."), c = this.$[d[0]], d = d[1];
    }
    this.listen(c, d, a[b]);
  }
}, listen:function(a, b, c) {
  var d = this._recallEventHandler(this, b, a, c);
  d || (d = this._createEventHandler(a, b, c));
  d._listening || (this._listen(a, b, d), d._listening = !0);
}, _boundListenerKey:function(a, b) {
  return a + ":" + b;
}, _recordEventHandler:function(a, b, c, d, e) {
  var f = a.__boundListeners;
  f || (f = a.__boundListeners = new WeakMap);
  a = f.get(c);
  a || (a = {}, f.set(c, a));
  b = this._boundListenerKey(b, d);
  a[b] = e;
}, _recallEventHandler:function(a, b, c, d) {
  if (a = a.__boundListeners) {
    if (c = a.get(c)) {
      return b = this._boundListenerKey(b, d), c[b];
    }
  }
}, _createEventHandler:function(a, b, c) {
  var d = this, e = function(a) {
    if (d[c]) {
      d[c](a, a.detail);
    } else {
      d._warn(d._logf("_createEventHandler", "listener method `" + c + "` not defined"));
    }
  };
  e._listening = !1;
  this._recordEventHandler(d, b, a, c, e);
  return e;
}, unlisten:function(a, b, c) {
  if (c = this._recallEventHandler(this, b, a, c)) {
    this._unlisten(a, b, c), c._listening = !1;
  }
}, _listen:function(a, b, c) {
  a.addEventListener(b, c);
}, _unlisten:function(a, b, c) {
  a.removeEventListener(b, c);
}});
(function() {
  function a(a) {
    for (var b = 0, c; b < h.length; b++) {
      c = h[b], a ? document.addEventListener(c, q, !0) : document.removeEventListener(c, q, !0);
    }
  }
  function b() {
    p || (m.mouse.mouseIgnoreJob || a(!0), m.mouse.mouseIgnoreJob = Polymer.Debounce(m.mouse.mouseIgnoreJob, function() {
      a();
      m.mouse.target = null;
      m.mouse.mouseIgnoreJob = null;
    }, 2500));
  }
  function c(a) {
    var b = a.type;
    return -1 === h.indexOf(b) ? !1 : "mousemove" === b ? (b = void 0 === a.buttons ? 1 : a.buttons, a instanceof window.MouseEvent && !n && (b = l[a.which] || 0), !!(b & 1)) : 0 === (void 0 === a.button ? 0 : a.button);
  }
  function d(a, b, c) {
    a.movefn = b;
    a.upfn = c;
    document.addEventListener("mousemove", b);
    document.addEventListener("mouseup", c);
  }
  function e(a) {
    document.removeEventListener("mousemove", a.movefn);
    document.removeEventListener("mouseup", a.upfn);
    a.movefn = null;
    a.upfn = null;
  }
  var f = Polymer.DomApi.wrap, g = "string" === typeof document.head.style.touchAction, h = ["mousedown", "mousemove", "mouseup", "click"], l = [0, 1, 4, 2];
  try {
    var n = 1 === (new MouseEvent("test", {buttons:1})).buttons;
  } catch (v) {
    n = !1;
  }
  var p = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/), q = function(a) {
    a.__polymerGesturesHandled = {skip:!0};
    if ("click" === a.type) {
      for (var b = Polymer.dom(a).path, c = 0; c < b.length; c++) {
        if (b[c] === m.mouse.target) {
          return;
        }
      }
      a.preventDefault();
      a.stopPropagation();
    }
  }, m = {mouse:{target:null, mouseIgnoreJob:null}, touch:{x:0, y:0, id:-1, scrollDecided:!1}}, r = {gestures:{}, recognizers:[], deepTargetFind:function(a, b) {
    for (var c = document.elementFromPoint(a, b), d = c; d && d.shadowRoot;) {
      (d = d.shadowRoot.elementFromPoint(a, b)) && (c = d);
    }
    return c;
  }, findOriginalTarget:function(a) {
    return a.path ? a.path[0] : a.target;
  }, handleNative:function(a) {
    var c = a.type, d = f(a.currentTarget).__polymerGestures;
    if (d && (d = d[c])) {
      if (!a.__polymerGesturesHandled && (a.__polymerGesturesHandled = {}, "touch" === c.slice(0, 5))) {
        var e = a.changedTouches[0];
        "touchstart" === c && 1 === a.touches.length && (m.touch.id = e.identifier);
        if (m.touch.id !== e.identifier) {
          return;
        }
        g || "touchstart" !== c && "touchmove" !== c || r.handleTouchAction(a);
        "touchend" !== c || a.__polymerSimulatedTouch || (m.mouse.target = Polymer.dom(a).rootTarget, b(!0));
      }
      e = a.__polymerGesturesHandled;
      if (!e.skip) {
        for (var h = r.recognizers, l = 0, n; l < h.length; l++) {
          n = h[l], d[n.name] && !e[n.name] && n.flow && -1 < n.flow.start.indexOf(a.type) && n.reset && n.reset();
        }
        l = 0;
        for (n; l < h.length; l++) {
          n = h[l], d[n.name] && !e[n.name] && (e[n.name] = !0, n[c](a));
        }
      }
    }
  }, handleTouchAction:function(a) {
    var b = a.changedTouches[0], c = a.type;
    if ("touchstart" === c) {
      m.touch.x = b.clientX, m.touch.y = b.clientY, m.touch.scrollDecided = !1;
    } else {
      if ("touchmove" === c && !m.touch.scrollDecided) {
        m.touch.scrollDecided = !0;
        for (var c = Polymer.dom(a).path, d = "auto", e = 0, f; e < c.length; e++) {
          if (f = c[e], f.__polymerGesturesTouchAction) {
            d = f.__polymerGesturesTouchAction;
            break;
          }
        }
        c = d;
        d = !1;
        e = Math.abs(m.touch.x - b.clientX);
        b = Math.abs(m.touch.y - b.clientY);
        a.cancelable && ("none" === c ? d = !0 : "pan-x" === c ? d = b > e : "pan-y" === c && (d = e > b));
        d ? a.preventDefault() : r.prevent("track");
      }
    }
  }, add:function(a, b, c) {
    a = f(a);
    var d = this.gestures[b], e = d.deps, g = d.name, m = a.__polymerGestures;
    m || (a.__polymerGestures = m = {});
    for (var l = 0, r, n; l < e.length; l++) {
      r = e[l], p && -1 < h.indexOf(r) || ((n = m[r]) || (m[r] = n = {_count:0}), 0 === n._count && a.addEventListener(r, this.handleNative), n[g] = (n[g] || 0) + 1, n._count = (n._count || 0) + 1);
    }
    a.addEventListener(b, c);
    d.touchAction && this.setTouchAction(a, d.touchAction);
  }, remove:function(a, b, c) {
    a = f(a);
    var d = this.gestures[b], e = d.deps, d = d.name, g = a.__polymerGestures;
    if (g) {
      for (var h = 0, m, l; h < e.length; h++) {
        m = e[h], (l = g[m]) && l[d] && (l[d] = (l[d] || 1) - 1, l._count = (l._count || 1) - 1, 0 === l._count && a.removeEventListener(m, this.handleNative));
      }
    }
    a.removeEventListener(b, c);
  }, register:function(a) {
    this.recognizers.push(a);
    for (var b = 0; b < a.emits.length; b++) {
      this.gestures[a.emits[b]] = a;
    }
  }, findRecognizerByEvent:function(a) {
    for (var b = 0, c; b < this.recognizers.length; b++) {
      c = this.recognizers[b];
      for (var d = 0, e; d < c.emits.length; d++) {
        if (e = c.emits[d], e === a) {
          return c;
        }
      }
    }
    return null;
  }, setTouchAction:function(a, b) {
    g && (a.style.touchAction = b);
    a.__polymerGesturesTouchAction = b;
  }, fire:function(a, b, c) {
    Polymer.Base.fire(b, c, {node:a, bubbles:!0, cancelable:!0}).defaultPrevented && (a = c.sourceEvent) && a.preventDefault && a.preventDefault();
  }, prevent:function(a) {
    a = this.findRecognizerByEvent(a);
    a.info && (a.info.prevent = !0);
  }};
  r.register({name:"downup", deps:["mousedown", "touchstart", "touchend"], flow:{start:["mousedown", "touchstart"], end:["mouseup", "touchend"]}, emits:["down", "up"], info:{movefn:null, upfn:null}, reset:function() {
    e(this.info);
  }, mousedown:function(a) {
    if (c(a)) {
      var b = r.findOriginalTarget(a), f = this;
      d(this.info, function(a) {
        c(a) || (f.fire("up", b, a), e(f.info));
      }, function(a) {
        c(a) && f.fire("up", b, a);
        e(f.info);
      });
      this.fire("down", b, a);
    }
  }, touchstart:function(a) {
    this.fire("down", r.findOriginalTarget(a), a.changedTouches[0]);
  }, touchend:function(a) {
    this.fire("up", r.findOriginalTarget(a), a.changedTouches[0]);
  }, fire:function(a, b, c) {
    r.fire(b, a, {x:c.clientX, y:c.clientY, sourceEvent:c, prevent:function(a) {
      return r.prevent(a);
    }});
  }});
  r.register({name:"track", touchAction:"none", deps:["mousedown", "touchstart", "touchmove", "touchend"], flow:{start:["mousedown", "touchstart"], end:["mouseup", "touchend"]}, emits:["track"], info:{x:0, y:0, state:"start", started:!1, moves:[], addMove:function(a) {
    2 < this.moves.length && this.moves.shift();
    this.moves.push(a);
  }, movefn:null, upfn:null, prevent:!1}, reset:function() {
    this.info.state = "start";
    this.info.started = !1;
    this.info.moves = [];
    this.info.x = 0;
    this.info.y = 0;
    this.info.prevent = !1;
    e(this.info);
  }, hasMovedEnough:function(a, b) {
    if (this.info.prevent) {
      return !1;
    }
    if (this.info.started) {
      return !0;
    }
    b = Math.abs(this.info.y - b);
    return 5 <= Math.abs(this.info.x - a) || 5 <= b;
  }, mousedown:function(a) {
    if (c(a)) {
      var b = r.findOriginalTarget(a), f = this, g = function(a) {
        var d = a.clientX, g = a.clientY;
        f.hasMovedEnough(d, g) && (f.info.state = f.info.started ? "mouseup" === a.type ? "end" : "track" : "start", "start" === f.info.state && r.prevent("tap"), f.info.addMove({x:d, y:g}), c(a) || (f.info.state = "end", e(f.info)), f.fire(b, a), f.info.started = !0);
      };
      d(this.info, g, function(a) {
        f.info.started && g(a);
        e(f.info);
      });
      this.info.x = a.clientX;
      this.info.y = a.clientY;
    }
  }, touchstart:function(a) {
    a = a.changedTouches[0];
    this.info.x = a.clientX;
    this.info.y = a.clientY;
  }, touchmove:function(a) {
    var b = r.findOriginalTarget(a);
    a = a.changedTouches[0];
    var c = a.clientX, d = a.clientY;
    this.hasMovedEnough(c, d) && ("start" === this.info.state && r.prevent("tap"), this.info.addMove({x:c, y:d}), this.fire(b, a), this.info.state = "track", this.info.started = !0);
  }, touchend:function(a) {
    var b = r.findOriginalTarget(a);
    a = a.changedTouches[0];
    this.info.started && (this.info.state = "end", this.info.addMove({x:a.clientX, y:a.clientY}), this.fire(b, a));
  }, fire:function(a, b) {
    var c = this.info.moves[this.info.moves.length - 2], d = this.info.moves[this.info.moves.length - 1], e = d.x - this.info.x, f = d.y - this.info.y, g = 0;
    if (c) {
      var h = d.x - c.x;
      g = d.y - c.y;
    }
    return r.fire(a, "track", {state:this.info.state, x:b.clientX, y:b.clientY, dx:e, dy:f, ddx:h, ddy:g, sourceEvent:b, hover:function() {
      return r.deepTargetFind(b.clientX, b.clientY);
    }});
  }});
  r.register({name:"tap", deps:["mousedown", "click", "touchstart", "touchend"], flow:{start:["mousedown", "touchstart"], end:["click", "touchend"]}, emits:["tap"], info:{x:NaN, y:NaN, prevent:!1}, reset:function() {
    this.info.x = NaN;
    this.info.y = NaN;
    this.info.prevent = !1;
  }, save:function(a) {
    this.info.x = a.clientX;
    this.info.y = a.clientY;
  }, mousedown:function(a) {
    c(a) && this.save(a);
  }, click:function(a) {
    c(a) && this.forward(a);
  }, touchstart:function(a) {
    this.save(a.changedTouches[0]);
  }, touchend:function(a) {
    this.forward(a.changedTouches[0]);
  }, forward:function(a) {
    var b = Math.abs(a.clientX - this.info.x), c = Math.abs(a.clientY - this.info.y), d = r.findOriginalTarget(a);
    if (!(b = isNaN(b) || isNaN(c) || 25 >= b && 25 >= c)) {
      if ("click" === a.type) {
        if (0 === a.detail) {
          b = !0;
        } else {
          var b = r.findOriginalTarget(a).getBoundingClientRect(), c = a.pageX, e = a.pageY, b = !(c >= b.left && c <= b.right && e >= b.top && e <= b.bottom);
        }
      } else {
        b = !1;
      }
    }
    b && (this.info.prevent || r.fire(d, "tap", {x:a.clientX, y:a.clientY, sourceEvent:a}));
  }});
  var u = {x:"pan-x", y:"pan-y", none:"none", all:"auto"};
  Polymer.Base._addFeature({_setupGestures:function() {
    this.__polymerGestures = null;
  }, _listen:function(a, b, c) {
    r.gestures[b] ? r.add(a, b, c) : a.addEventListener(b, c);
  }, _unlisten:function(a, b, c) {
    r.gestures[b] ? r.remove(a, b, c) : a.removeEventListener(b, c);
  }, setScrollDirection:function(a, b) {
    r.setTouchAction(b || this, u[a] || "auto");
  }});
  Polymer.Gestures = r;
})();
Polymer.Base._addFeature({$$:function(a) {
  return Polymer.dom(this.root).querySelector(a);
}, toggleClass:function(a, b, c) {
  c = c || this;
  1 == arguments.length && (b = !c.classList.contains(a));
  b ? Polymer.dom(c).classList.add(a) : Polymer.dom(c).classList.remove(a);
}, toggleAttribute:function(a, b, c) {
  c = c || this;
  1 == arguments.length && (b = !c.hasAttribute(a));
  b ? Polymer.dom(c).setAttribute(a, "") : Polymer.dom(c).removeAttribute(a);
}, classFollows:function(a, b, c) {
  c && Polymer.dom(c).classList.remove(a);
  b && Polymer.dom(b).classList.add(a);
}, attributeFollows:function(a, b, c) {
  c && Polymer.dom(c).removeAttribute(a);
  b && Polymer.dom(b).setAttribute(a, "");
}, getEffectiveChildNodes:function() {
  return Polymer.dom(this).getEffectiveChildNodes();
}, getEffectiveChildren:function() {
  return Polymer.dom(this).getEffectiveChildNodes().filter(function(a) {
    return a.nodeType === Node.ELEMENT_NODE;
  });
}, getEffectiveTextContent:function() {
  for (var a = this.getEffectiveChildNodes(), b = [], c = 0, d; d = a[c]; c++) {
    d.nodeType !== Node.COMMENT_NODE && b.push(Polymer.dom(d).textContent);
  }
  return b.join("");
}, queryEffectiveChildren:function(a) {
  return (a = Polymer.dom(this).queryDistributedElements(a)) && a[0];
}, queryAllEffectiveChildren:function(a) {
  return Polymer.dom(this).queryDistributedElements(a);
}, getContentChildNodes:function(a) {
  return (a = Polymer.dom(this.root).querySelector(a || "content")) ? Polymer.dom(a).getDistributedNodes() : [];
}, getContentChildren:function(a) {
  return this.getContentChildNodes(a).filter(function(a) {
    return a.nodeType === Node.ELEMENT_NODE;
  });
}, fire:function(a, b, c) {
  c = c || Polymer.nob;
  var d = c.node || this;
  b = null === b || void 0 === b ? {} : b;
  var e = c._useCache;
  c = this._getEvent(a, void 0 === c.bubbles ? !0 : c.bubbles, !!c.cancelable, e);
  c.detail = b;
  e && (this.__eventCache[a] = null);
  d.dispatchEvent(c);
  e && (this.__eventCache[a] = c);
  return c;
}, __eventCache:{}, _getEvent:function(a, b, c, d) {
  (d = d && this.__eventCache[a]) && d.bubbles == b && d.cancelable == c || (d = new Event(a, {bubbles:!!b, cancelable:c}));
  return d;
}, async:function(a, b) {
  var c = this;
  return Polymer.Async.run(function() {
    a.call(c);
  }, b);
}, cancelAsync:function(a) {
  Polymer.Async.cancel(a);
}, arrayDelete:function(a, b) {
  if (Array.isArray(a)) {
    if (b = a.indexOf(b), 0 <= b) {
      return a.splice(b, 1);
    }
  } else {
    if (b = this._get(a).indexOf(b), 0 <= b) {
      return this.splice(a, b, 1);
    }
  }
}, transform:function(a, b) {
  b = b || this;
  b.style.webkitTransform = a;
  b.style.transform = a;
}, translate3d:function(a, b, c, d) {
  this.transform("translate3d(" + a + "," + b + "," + c + ")", d || this);
}, importHref:function(a, b, c, d) {
  var e = document.createElement("link");
  e.rel = "import";
  e.href = a;
  d && e.setAttribute("async", "");
  var f = this;
  b && (e.onload = function(a) {
    return b.call(f, a);
  });
  c && (e.onerror = function(a) {
    return c.call(f, a);
  });
  document.head.appendChild(e);
  return e;
}, create:function(a, b) {
  a = document.createElement(a);
  if (b) {
    for (var c in b) {
      a[c] = b[c];
    }
  }
  return a;
}, isLightDescendant:function(a) {
  return this !== a && this.contains(a) && Polymer.dom(this).getOwnerRoot() === Polymer.dom(a).getOwnerRoot();
}, isLocalDescendant:function(a) {
  return this.root === Polymer.dom(a).getOwnerRoot();
}});
Polymer.Bind = {_dataEventCache:{}, prepareModel:function(a) {
  Polymer.Base.mixin(a, this._modelApi);
}, _modelApi:{_notifyChange:function(a, b, c) {
  c = void 0 === c ? this[a] : c;
  b = b || Polymer.CaseMap.camelToDashCase(a) + "-changed";
  this.fire(b, {value:c}, {bubbles:!1, cancelable:!1, _useCache:!0});
}, _propertySetter:function(a, b, c, d) {
  var e = this.__data__[a];
  e === b || e !== e && b !== b || (this.__data__[a] = b, "object" == typeof b && this._clearPath(a), this._propertyChanged && this._propertyChanged(a, b, e), c && this._effectEffects(a, b, c, e, d));
  return e;
}, __setProperty:function(a, b, c, d) {
  d = d || this;
  var e = d._propertyEffects && d._propertyEffects[a];
  e ? d._propertySetter(a, b, e, c) : d[a] = b;
}, _effectEffects:function(a, b, c, d, e) {
  for (var f = 0, g = c.length, h; f < g && (h = c[f]); f++) {
    h.fn.call(this, a, b, h.effect, d, e);
  }
}, _clearPath:function(a) {
  for (var b in this.__data__) {
    0 === b.indexOf(a + ".") && (this.__data__[b] = void 0);
  }
}}, ensurePropertyEffects:function(a, b) {
  a._propertyEffects || (a._propertyEffects = {});
  var c = a._propertyEffects[b];
  c || (c = a._propertyEffects[b] = []);
  return c;
}, addPropertyEffect:function(a, b, c, d) {
  a = this.ensurePropertyEffects(a, b);
  c = {kind:c, effect:d, fn:Polymer.Bind["_" + c + "Effect"]};
  a.push(c);
  return c;
}, createBindings:function(a) {
  var b = a._propertyEffects;
  if (b) {
    for (var c in b) {
      var d = b[c];
      d.sort(this._sortPropertyEffects);
      this._createAccessors(a, c, d);
    }
  }
}, _sortPropertyEffects:function() {
  var a = {compute:0, annotation:1, annotatedComputation:2, reflect:3, notify:4, observer:5, complexObserver:6, "function":7};
  return function(b, c) {
    return a[b.kind] - a[c.kind];
  };
}(), _createAccessors:function(a, b, c) {
  var d = {get:function() {
    return this.__data__[b];
  }}, e = function(a) {
    this._propertySetter(b, a, c);
  }, f = a.getPropertyInfo && a.getPropertyInfo(b);
  f && f.readOnly ? f.computed || (a["_set" + this.upper(b)] = e) : d.set = e;
  Object.defineProperty(a, b, d);
}, upper:function(a) {
  return a[0].toUpperCase() + a.substring(1);
}, _addAnnotatedListener:function(a, b, c, d, e, f) {
  a._bindListeners || (a._bindListeners = []);
  f = this._notedListenerFactory(c, d, this._isStructured(d), f);
  e = e || Polymer.CaseMap.camelToDashCase(c) + "-changed";
  a._bindListeners.push({index:b, property:c, path:d, changedFn:f, event:e});
}, _isStructured:function(a) {
  return 0 < a.indexOf(".");
}, _isEventBogus:function(a, b) {
  return a.path && a.path[0] !== b;
}, _notedListenerFactory:function(a, b, c, d) {
  return function(e, f, g) {
    g ? this._notifyPath(this._fixPath(b, a, g), f) : (f = e[a], d && (f = !f), c ? this.__data__[b] != f && this.set(b, f) : this[b] = f);
  };
}, prepareInstance:function(a) {
  a.__data__ = Object.create(null);
}, setupBindListeners:function(a) {
  for (var b = a._bindListeners, c = 0, d = b.length, e; c < d && (e = b[c]); c++) {
    this._addNotifyListener(a._nodes[e.index], a, e.event, e.changedFn);
  }
}, _addNotifyListener:function(a, b, c, d) {
  a.addEventListener(c, function(a) {
    return b._notifyListener(d, a);
  });
}};
Polymer.Base.extend(Polymer.Bind, {_shouldAddListener:function(a) {
  return a.name && "attribute" != a.kind && "text" != a.kind && !a.isCompound && "{" === a.parts[0].mode;
}, _annotationEffect:function(a, b, c) {
  a != c.value && (b = this._get(c.value), this.__data__[c.value] = b);
  a = c.negate ? !b : b;
  if (!c.customEvent || this._nodes[c.index][c.name] !== a) {
    return this._applyEffectValue(c, a);
  }
}, _reflectEffect:function(a, b, c) {
  this.reflectPropertyToAttribute(a, c.attribute, b);
}, _notifyEffect:function(a, b, c, d, e) {
  e || this._notifyChange(a, c.event, b);
}, _functionEffect:function(a, b, c, d, e) {
  c.call(this, a, b, d, e);
}, _observerEffect:function(a, b, c, d) {
  (a = this[c.method]) ? a.call(this, b, d) : this._warn(this._logf("_observerEffect", "observer method `" + c.method + "` not defined"));
}, _complexObserverEffect:function(a, b, c) {
  var d = this[c.method];
  d ? (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) && d.apply(this, a) : c.dynamicFn || this._warn(this._logf("_complexObserverEffect", "observer method `" + c.method + "` not defined"));
}, _computeEffect:function(a, b, c) {
  var d = this[c.method];
  if (d) {
    if (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) {
      d = d.apply(this, a), this.__setProperty(c.name, d);
    }
  } else {
    c.dynamicFn || this._warn(this._logf("_computeEffect", "compute method `" + c.method + "` not defined"));
  }
}, _annotatedComputationEffect:function(a, b, c) {
  var d = this._rootDataHost || this, e = d[c.method];
  if (e) {
    if (a = Polymer.Bind._marshalArgs(this.__data__, c, a, b)) {
      d = e.apply(d, a), c.negate && (d = !d), this._applyEffectValue(c, d);
    }
  } else {
    c.dynamicFn || d._warn(d._logf("_annotatedComputationEffect", "compute method `" + c.method + "` not defined"));
  }
}, _marshalArgs:function(a, b, c, d) {
  for (var e = [], f = b.args, g = 1 < f.length || b.dynamicFn, h = 0, l = f.length; h < l; h++) {
    var n = f[h], p = n.name;
    var q = n.literal ? n.value : n.structured ? Polymer.Base._get(p, a) : a[p];
    if (g && void 0 === q) {
      return;
    }
    n.wildcard ? (n = 0 === p.indexOf(c + "."), n = 0 === b.trigger.name.indexOf(p) && !n, e[h] = {path:n ? c : p, value:n ? d : q, base:q}) : e[h] = q;
  }
  return e;
}});
Polymer.Base._addFeature({_addPropertyEffect:function(a, b, c) {
  a = Polymer.Bind.addPropertyEffect(this, a, b, c);
  a.pathFn = this["_" + a.kind + "PathEffect"];
}, _prepEffects:function() {
  Polymer.Bind.prepareModel(this);
  this._addAnnotationEffects(this._notes);
}, _prepBindings:function() {
  Polymer.Bind.createBindings(this);
}, _addPropertyEffects:function(a) {
  if (a) {
    for (var b in a) {
      var c = a[b];
      c.observer && this._addObserverEffect(b, c.observer);
      c.computed && (c.readOnly = !0, this._addComputedEffect(b, c.computed));
      c.notify && this._addPropertyEffect(b, "notify", {event:Polymer.CaseMap.camelToDashCase(b) + "-changed"});
      if (c.reflectToAttribute) {
        var d = Polymer.CaseMap.camelToDashCase(b);
        "-" === d[0] ? this._warn(this._logf("_addPropertyEffects", "Property " + b + " cannot be reflected to attribute " + d + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.')) : this._addPropertyEffect(b, "reflect", {attribute:d});
      }
      c.readOnly && Polymer.Bind.ensurePropertyEffects(this, b);
    }
  }
}, _addComputedEffect:function(a, b) {
  b = this._parseMethod(b);
  for (var c = b.dynamicFn, d = 0, e; d < b.args.length && (e = b.args[d]); d++) {
    this._addPropertyEffect(e.model, "compute", {method:b.method, args:b.args, trigger:e, name:a, dynamicFn:c});
  }
  c && this._addPropertyEffect(b.method, "compute", {method:b.method, args:b.args, trigger:null, name:a, dynamicFn:c});
}, _addObserverEffect:function(a, b) {
  this._addPropertyEffect(a, "observer", {method:b, property:a});
}, _addComplexObserverEffects:function(a) {
  if (a) {
    for (var b = 0, c; b < a.length && (c = a[b]); b++) {
      this._addComplexObserverEffect(c);
    }
  }
}, _addComplexObserverEffect:function(a) {
  var b = this._parseMethod(a);
  if (!b) {
    throw Error("Malformed observer expression '" + a + "'");
  }
  a = b.dynamicFn;
  for (var c = 0, d; c < b.args.length && (d = b.args[c]); c++) {
    this._addPropertyEffect(d.model, "complexObserver", {method:b.method, args:b.args, trigger:d, dynamicFn:a});
  }
  a && this._addPropertyEffect(b.method, "complexObserver", {method:b.method, args:b.args, trigger:null, dynamicFn:a});
}, _addAnnotationEffects:function(a) {
  for (var b = 0, c; b < a.length && (c = a[b]); b++) {
    for (var d = c.bindings, e = 0, f; e < d.length && (f = d[e]); e++) {
      this._addAnnotationEffect(f, b);
    }
  }
}, _addAnnotationEffect:function(a, b) {
  Polymer.Bind._shouldAddListener(a) && Polymer.Bind._addAnnotatedListener(this, b, a.name, a.parts[0].value, a.parts[0].event, a.parts[0].negate);
  for (var c = 0; c < a.parts.length; c++) {
    var d = a.parts[c];
    d.signature ? this._addAnnotatedComputationEffect(a, d, b) : d.literal || ("attribute" === a.kind && "-" === a.name[0] ? this._warn(this._logf("_addAnnotationEffect", "Cannot set attribute " + a.name + ' because "-" is not a valid attribute starting character')) : this._addPropertyEffect(d.model, "annotation", {kind:a.kind, index:b, name:a.name, propertyName:a.propertyName, value:d.value, isCompound:a.isCompound, compoundIndex:d.compoundIndex, event:d.event, customEvent:d.customEvent, negate:d.negate}));
  }
}, _addAnnotatedComputationEffect:function(a, b, c) {
  var d = b.signature;
  if (d.static) {
    this.__addAnnotatedComputationEffect("__static__", c, a, b, null);
  } else {
    for (var e = 0, f; e < d.args.length && (f = d.args[e]); e++) {
      f.literal || this.__addAnnotatedComputationEffect(f.model, c, a, b, f);
    }
    d.dynamicFn && this.__addAnnotatedComputationEffect(d.method, c, a, b, null);
  }
}, __addAnnotatedComputationEffect:function(a, b, c, d, e) {
  this._addPropertyEffect(a, "annotatedComputation", {index:b, isCompound:c.isCompound, compoundIndex:d.compoundIndex, kind:c.kind, name:c.name, negate:d.negate, method:d.signature.method, args:d.signature.args, trigger:e, dynamicFn:d.signature.dynamicFn});
}, _parseMethod:function(a) {
  var b = a.match(/([^\s]+?)\(([\s\S]*)\)/);
  if (b) {
    a = {method:b[1], static:!0};
    this.getPropertyInfo(a.method) !== Polymer.nob && (a.static = !1, a.dynamicFn = !0);
    if (b[2].trim()) {
      return b = b[2].replace(/\\,/g, "&comma;").split(","), this._parseArgs(b, a);
    }
    a.args = Polymer.nar;
    return a;
  }
}, _parseArgs:function(a, b) {
  b.args = a.map(function(a) {
    a = this._parseArg(a);
    a.literal || (b.static = !1);
    return a;
  }, this);
  return b;
}, _parseArg:function(a) {
  a = a.trim().replace(/&comma;/g, ",").replace(/\\(.)/g, "$1");
  var b = {name:a}, c = a[0];
  "-" === c && (c = a[1]);
  "0" <= c && "9" >= c && (c = "#");
  switch(c) {
    case "'":
    case '"':
      b.value = a.slice(1, -1);
      b.literal = !0;
      break;
    case "#":
      b.value = Number(a), b.literal = !0;
  }
  b.literal || (b.model = this._modelForPath(a), b.structured = 0 < a.indexOf("."), b.structured && (b.wildcard = ".*" == a.slice(-2), b.wildcard && (b.name = a.slice(0, -2))));
  return b;
}, _marshalInstanceEffects:function() {
  Polymer.Bind.prepareInstance(this);
  this._bindListeners && Polymer.Bind.setupBindListeners(this);
}, _applyEffectValue:function(a, b) {
  var c = this._nodes[a.index], d = a.name;
  if (a.isCompound) {
    var e = c.__compoundStorage__[d];
    e[a.compoundIndex] = b;
    b = e.join("");
  }
  if ("attribute" == a.kind) {
    this.serializeValueToAttribute(b, d, c);
  } else {
    "className" === d && (b = this._scopeElementClass(c, b));
    if ("textContent" === d || "input" == c.localName && "value" == d) {
      b = void 0 == b ? "" : b;
    }
    var f;
    c._propertyInfo && (f = c._propertyInfo[d]) && f.readOnly || this.__setProperty(d, b, !1, c);
  }
}, _executeStaticEffects:function() {
  this._propertyEffects && this._propertyEffects.__static__ && this._effectEffects("__static__", null, this._propertyEffects.__static__);
}});
(function() {
  var a = Polymer.Settings.usePolyfillProto;
  Polymer.Base._addFeature({_setupConfigure:function(a) {
    this._config = {};
    this._handlers = [];
    this._aboveConfig = null;
    if (a) {
      for (var b in a) {
        void 0 !== a[b] && (this._config[b] = a[b]);
      }
    }
  }, _marshalAttributes:function() {
    this._takeAttributesToModel(this._config);
  }, _attributeChangedImpl:function(a) {
    this._setAttributeToProperty(this._clientsReadied ? this : this._config, a);
  }, _configValue:function(a, c) {
    var b = this._propertyInfo[a];
    b && b.readOnly || (this._config[a] = c);
  }, _beforeClientsReady:function() {
    this._configure();
  }, _configure:function() {
    this._configureAnnotationReferences();
    this._aboveConfig = this.mixin({}, this._config);
    for (var a = {}, c = 0; c < this.behaviors.length; c++) {
      this._configureProperties(this.behaviors[c].properties, a);
    }
    this._configureProperties(this.properties, a);
    this.mixin(a, this._aboveConfig);
    this._config = a;
    this._clients && this._clients.length && this._distributeConfig(this._config);
  }, _configureProperties:function(b, c) {
    for (var d in b) {
      var e = b[d];
      !a && this.hasOwnProperty(d) && this._propertyEffects && this._propertyEffects[d] ? (c[d] = this[d], delete this[d]) : void 0 !== e.value && (e = e.value, "function" == typeof e && (e = e.call(this, this._config)), c[d] = e);
    }
  }, _distributeConfig:function(a) {
    var b = this._propertyEffects;
    if (b) {
      for (var d in a) {
        var e = b[d];
        if (e) {
          for (var f = 0, g = e.length, h; f < g && (h = e[f]); f++) {
            if ("annotation" === h.kind && !h.isCompound) {
              var l = this._nodes[h.effect.index], n = h.effect.propertyName, p = "attribute" == h.effect.kind, q = l._propertyEffects && l._propertyEffects[n];
              !l._configValue || !q && p || (q = d === h.effect.value ? a[d] : this._get(h.effect.value, a), p && (q = l.deserialize(this.serialize(q), l._propertyInfo[n].type)), l._configValue(n, q));
            }
          }
        }
      }
    }
  }, _afterClientsReady:function() {
    this._executeStaticEffects();
    this._applyConfig(this._config, this._aboveConfig);
    this._flushHandlers();
  }, _applyConfig:function(a, c) {
    for (var b in a) {
      void 0 === this[b] && this.__setProperty(b, a[b], b in c);
    }
  }, _notifyListener:function(a, c) {
    if (!Polymer.Bind._isEventBogus(c, c.target)) {
      if (c.detail) {
        var b = c.detail.value;
        var e = c.detail.path;
      }
      if (this._clientsReadied) {
        return a.call(this, c.target, b, e);
      }
      this._queueHandler([a, c.target, b, e]);
    }
  }, _queueHandler:function(a) {
    this._handlers.push(a);
  }, _flushHandlers:function() {
    for (var a = this._handlers, c = 0, d = a.length, e; c < d && (e = a[c]); c++) {
      e[0].call(this, e[1], e[2], e[3]);
    }
    this._handlers = [];
  }});
})();
(function() {
  Polymer.Base._addFeature({notifyPath:function(a, b, c) {
    var d = {};
    this._get(a, this, d);
    d.path && this._notifyPath(d.path, b, c);
  }, _notifyPath:function(a, b, c) {
    var d = this._propertySetter(a, b);
    if (d !== b && (d === d || b === b)) {
      return this._pathEffector(a, b), c || this._notifyPathUp(a, b), !0;
    }
  }, _getPathParts:function(a) {
    if (Array.isArray(a)) {
      for (var b = [], c = 0; c < a.length; c++) {
        for (var d = a[c].toString().split("."), e = 0; e < d.length; e++) {
          b.push(d[e]);
        }
      }
      return b;
    }
    return a.toString().split(".");
  }, set:function(a, b, c) {
    var d = c || this, e = this._getPathParts(a), f = e[e.length - 1];
    if (1 < e.length) {
      for (a = 0; a < e.length - 1; a++) {
        var g = e[a];
        h && "#" == g[0] ? d = Polymer.Collection.get(h).getItem(g) : (d = d[g], h && parseInt(g, 10) == g && (e[a] = Polymer.Collection.get(h).getKey(d)));
        if (!d) {
          return;
        }
        var h = Array.isArray(d) ? d : null;
      }
      if (h) {
        var g = Polymer.Collection.get(h);
        if ("#" == f[0]) {
          var l = f;
          var n = g.getItem(l);
          f = h.indexOf(n);
          g.setItem(l, b);
        } else {
          parseInt(f, 10) == f && (n = d[f], l = g.getKey(n), e[a] = l, g.setItem(l, b));
        }
      }
      d[f] = b;
      c || this._notifyPath(e.join("."), b);
    } else {
      d[a] = b;
    }
  }, get:function(a, b) {
    return this._get(a, b);
  }, _get:function(a, b, c) {
    b = b || this;
    a = this._getPathParts(a);
    for (var d, e = 0; e < a.length; e++) {
      if (!b) {
        return;
      }
      var f = a[e];
      d && "#" == f[0] ? b = Polymer.Collection.get(d).getItem(f) : (b = b[f], c && d && parseInt(f, 10) == f && (a[e] = Polymer.Collection.get(d).getKey(b)));
      d = Array.isArray(b) ? b : null;
    }
    c && (c.path = a.join("."));
    return b;
  }, _pathEffector:function(a, b) {
    var c = this._modelForPath(a);
    if (c = this._propertyEffects && this._propertyEffects[c]) {
      for (var d = 0, e; d < c.length && (e = c[d]); d++) {
        var f = e.pathFn;
        f && f.call(this, a, b, e.effect);
      }
    }
    this._boundPaths && this._notifyBoundPaths(a, b);
  }, _annotationPathEffect:function(a, b, c) {
    if (c.value === a || 0 === c.value.indexOf(a + ".")) {
      Polymer.Bind._annotationEffect.call(this, a, b, c);
    } else {
      if (0 === a.indexOf(c.value + ".") && !c.negate) {
        var d = this._nodes[c.index];
        d && d._notifyPath && (a = this._fixPath(c.name, c.value, a), d._notifyPath(a, b, !0));
      }
    }
  }, _complexObserverPathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._complexObserverEffect.call(this, a, b, c);
  }, _computePathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._computeEffect.call(this, a, b, c);
  }, _annotatedComputationPathEffect:function(a, b, c) {
    this._pathMatchesEffect(a, c) && Polymer.Bind._annotatedComputationEffect.call(this, a, b, c);
  }, _pathMatchesEffect:function(a, b) {
    var c = b.trigger.name;
    return c == a || 0 === c.indexOf(a + ".") || b.trigger.wildcard && 0 === a.indexOf(c);
  }, linkPaths:function(a, b) {
    this._boundPaths = this._boundPaths || {};
    b ? this._boundPaths[a] = b : this.unlinkPaths(a);
  }, unlinkPaths:function(a) {
    this._boundPaths && delete this._boundPaths[a];
  }, _notifyBoundPaths:function(a, b) {
    for (var c in this._boundPaths) {
      var d = this._boundPaths[c];
      0 == a.indexOf(c + ".") ? this._notifyPath(this._fixPath(d, c, a), b) : 0 == a.indexOf(d + ".") && this._notifyPath(this._fixPath(c, d, a), b);
    }
  }, _fixPath:function(a, b, c) {
    return a + c.slice(b.length);
  }, _notifyPathUp:function(a, b) {
    var c = this._modelForPath(a), c = Polymer.CaseMap.camelToDashCase(c) + this._EVENT_CHANGED;
    this.fire(c, {path:a, value:b}, {bubbles:!1, _useCache:!0});
  }, _modelForPath:function(a) {
    var b = a.indexOf(".");
    return 0 > b ? a : a.slice(0, b);
  }, _EVENT_CHANGED:"-changed", notifySplices:function(a, b) {
    var c = {};
    a = this._get(a, this, c);
    this._notifySplices(a, c.path, b);
  }, _notifySplices:function(a, b, c) {
    c = {keySplices:Polymer.Collection.applySplices(a, c), indexSplices:c};
    a.hasOwnProperty("splices") || Object.defineProperty(a, "splices", {configurable:!0, writable:!0});
    a.splices = c;
    this._notifyPath(b + ".splices", c);
    this._notifyPath(b + ".length", a.length);
    c.keySplices = null;
    c.indexSplices = null;
  }, _notifySplice:function(a, b, c, d, e) {
    this._notifySplices(a, b, [{index:c, addedCount:d, removed:e, object:a, type:"splice"}]);
  }, push:function(a) {
    var b = {}, c = this._get(a, this, b), d = Array.prototype.slice.call(arguments, 1), e = c.length, f = c.push.apply(c, d);
    d.length && this._notifySplice(c, b.path, e, d.length, []);
    return f;
  }, pop:function(a) {
    var b = {}, c = this._get(a, this, b), d = !!c.length, e = Array.prototype.slice.call(arguments, 1), e = c.pop.apply(c, e);
    d && this._notifySplice(c, b.path, c.length, 0, [e]);
    return e;
  }, splice:function(a, b) {
    var c = {}, d = this._get(a, this, c);
    (b = 0 > b ? d.length - Math.floor(-b) : Math.floor(b)) || (b = 0);
    var e = Array.prototype.slice.call(arguments, 1), f = d.splice.apply(d, e);
    ((e = Math.max(e.length - 2, 0)) || f.length) && this._notifySplice(d, c.path, b, e, f);
    return f;
  }, shift:function(a) {
    var b = {}, c = this._get(a, this, b), d = !!c.length, e = Array.prototype.slice.call(arguments, 1), e = c.shift.apply(c, e);
    d && this._notifySplice(c, b.path, 0, 0, [e]);
    return e;
  }, unshift:function(a) {
    var b = {}, c = this._get(a, this, b), d = Array.prototype.slice.call(arguments, 1), e = c.unshift.apply(c, d);
    d.length && this._notifySplice(c, b.path, 0, d.length, []);
    return e;
  }, prepareModelNotifyPath:function(a) {
    this.mixin(a, {fire:Polymer.Base.fire, _getEvent:Polymer.Base._getEvent, __eventCache:Polymer.Base.__eventCache, notifyPath:Polymer.Base.notifyPath, _get:Polymer.Base._get, _EVENT_CHANGED:Polymer.Base._EVENT_CHANGED, _notifyPath:Polymer.Base._notifyPath, _notifyPathUp:Polymer.Base._notifyPathUp, _pathEffector:Polymer.Base._pathEffector, _annotationPathEffect:Polymer.Base._annotationPathEffect, _complexObserverPathEffect:Polymer.Base._complexObserverPathEffect, _annotatedComputationPathEffect:Polymer.Base._annotatedComputationPathEffect, 
    _computePathEffect:Polymer.Base._computePathEffect, _modelForPath:Polymer.Base._modelForPath, _pathMatchesEffect:Polymer.Base._pathMatchesEffect, _notifyBoundPaths:Polymer.Base._notifyBoundPaths, _getPathParts:Polymer.Base._getPathParts});
  }});
})();
Polymer.Base._addFeature({resolveUrl:function(a) {
  var b = Polymer.DomModule.import(this.is), c = "";
  b && (c = b.getAttribute("assetpath") || "", c = Polymer.ResolveUrl.resolveUrl(c, b.ownerDocument.baseURI));
  return Polymer.ResolveUrl.resolveUrl(a, c);
}});
Polymer.CssParse = function() {
  return {parse:function(a) {
    a = this._clean(a);
    return this._parseCss(this._lex(a), a);
  }, _clean:function(a) {
    return a.replace(this._rx.comments, "").replace(this._rx.port, "");
  }, _lex:function(a) {
    for (var b = {start:0, end:a.length}, c = b, d = 0, e = a.length; d < e; d++) {
      switch(a[d]) {
        case this.OPEN_BRACE:
          c.rules || (c.rules = []);
          var f = c, c = {start:d + 1, parent:f, previous:f.rules[f.rules.length - 1]};
          f.rules.push(c);
          break;
        case this.CLOSE_BRACE:
          c.end = d + 1, c = c.parent || b;
      }
    }
    return b;
  }, _parseCss:function(a, b) {
    var c = b.substring(a.start, a.end - 1);
    a.parsedCssText = a.cssText = c.trim();
    a.parent && (c = b.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), c = this._expandUnicodeEscapes(c), c = c.replace(this._rx.multipleSpaces, " "), c = c.substring(c.lastIndexOf(";") + 1), c = a.parsedSelector = a.selector = c.trim(), a.atRule = 0 === c.indexOf(this.AT_START), a.atRule ? 0 === c.indexOf(this.MEDIA_START) ? a.type = this.types.MEDIA_RULE : c.match(this._rx.keyframesRule) && (a.type = this.types.KEYFRAMES_RULE, a.keyframesName = a.selector.split(this._rx.multipleSpaces).pop()) : 
    0 === c.indexOf(this.VAR_START) ? a.type = this.types.MIXIN_RULE : a.type = this.types.STYLE_RULE);
    if (c = a.rules) {
      for (var d = 0, e = c.length, f; d < e && (f = c[d]); d++) {
        this._parseCss(f, b);
      }
    }
    return a;
  }, _expandUnicodeEscapes:function(a) {
    return a.replace(/\\([0-9a-f]{1,6})\s/gi, function(a, c) {
      a = c;
      for (c = 6 - a.length; c--;) {
        a = "0" + a;
      }
      return "\\" + a;
    });
  }, stringify:function(a, b, c) {
    c = c || "";
    var d = "";
    if (a.cssText || a.rules) {
      var e = a.rules;
      if (!e || !b && this._hasMixinRules(e)) {
        d = b ? a.cssText : this.removeCustomProps(a.cssText), (d = d.trim()) && (d = "  " + d + "\n");
      } else {
        for (var f = 0, g = e.length, h; f < g && (h = e[f]); f++) {
          d = this.stringify(h, b, d);
        }
      }
    }
    d && (a.selector && (c += a.selector + " " + this.OPEN_BRACE + "\n"), c += d, a.selector && (c += this.CLOSE_BRACE + "\n\n"));
    return c;
  }, _hasMixinRules:function(a) {
    return 0 === a[0].selector.indexOf(this.VAR_START);
  }, removeCustomProps:function(a) {
    a = this.removeCustomPropAssignment(a);
    return this.removeCustomPropApply(a);
  }, removeCustomPropAssignment:function(a) {
    return a.replace(this._rx.customProp, "").replace(this._rx.mixinProp, "");
  }, removeCustomPropApply:function(a) {
    return a.replace(this._rx.mixinApply, "").replace(this._rx.varApply, "");
  }, types:{STYLE_RULE:1, KEYFRAMES_RULE:7, MEDIA_RULE:4, MIXIN_RULE:1000}, OPEN_BRACE:"{", CLOSE_BRACE:"}", _rx:{comments:/\/\*[^*]*\*+([^\/*][^*]*\*+)*\//gim, port:/@import[^;]*;/gim, customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim, mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim, mixinApply:/@apply[\s]*\([^)]*?\)[\s]*(?:[;\n]|$)?/gim, varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim, keyframesRule:/^@[^\s]*keyframes/, multipleSpaces:/\s+/g}, VAR_START:"--", 
  MEDIA_START:"@media", AT_START:"@"};
}();
Polymer.StyleUtil = function() {
  return {MODULE_STYLES_SELECTOR:"style, link[rel=import][type~=css], template", INCLUDE_ATTR:"include", toCssText:function(a, b, c) {
    "string" === typeof a && (a = this.parser.parse(a));
    b && this.forEachRule(a, b);
    return this.parser.stringify(a, c);
  }, forRulesInStyles:function(a, b, c) {
    if (a) {
      for (var d = 0, e = a.length, f; d < e && (f = a[d]); d++) {
        this.forEachRule(this.rulesForStyle(f), b, c);
      }
    }
  }, rulesForStyle:function(a) {
    !a.__cssRules && a.textContent && (a.__cssRules = this.parser.parse(a.textContent));
    return a.__cssRules;
  }, isKeyframesSelector:function(a) {
    return a.parent && a.parent.type === this.ruleTypes.KEYFRAMES_RULE;
  }, forEachRule:function(a, b, c) {
    if (a) {
      var d = !1;
      a.type === this.ruleTypes.STYLE_RULE ? b(a) : c && a.type === this.ruleTypes.KEYFRAMES_RULE ? c(a) : a.type === this.ruleTypes.MIXIN_RULE && (d = !0);
      if ((a = a.rules) && !d) {
        for (var d = 0, e = a.length, f; d < e && (f = a[d]); d++) {
          this.forEachRule(f, b, c);
        }
      }
    }
  }, applyCss:function(a, b, c, d) {
    a = this.createScopeStyle(a, b);
    c = c || document.head;
    d = d && d.nextSibling || c.firstChild;
    this.__lastHeadApplyNode = a;
    return c.insertBefore(a, d);
  }, createScopeStyle:function(a, b) {
    var c = document.createElement("style");
    b && c.setAttribute("scope", b);
    c.textContent = a;
    return c;
  }, __lastHeadApplyNode:null, applyStylePlaceHolder:function(a) {
    a = document.createComment(" Shady DOM styles for " + a + " ");
    var b = document.head;
    b.insertBefore(a, (this.__lastHeadApplyNode ? this.__lastHeadApplyNode.nextSibling : null) || b.firstChild);
    return this.__lastHeadApplyNode = a;
  }, cssFromModules:function(a, b) {
    a = a.trim().split(" ");
    for (var c = "", d = 0; d < a.length; d++) {
      c += this.cssFromModule(a[d], b);
    }
    return c;
  }, cssFromModule:function(a, b) {
    var c = Polymer.DomModule.import(a);
    c && !c._cssText && (c._cssText = this.cssFromElement(c));
    !c && b && console.warn("Could not find style data in module named", a);
    return c && c._cssText || "";
  }, cssFromElement:function(a) {
    for (var b = "", c = Polymer.TreeApi.arrayCopy((a.content || a).querySelectorAll(this.MODULE_STYLES_SELECTOR)), d = 0, e; d < c.length; d++) {
      if (e = c[d], "template" === e.localName) {
        b += this.cssFromElement(e);
      } else {
        if ("style" === e.localName) {
          var f = e.getAttribute(this.INCLUDE_ATTR);
          f && (b += this.cssFromModules(f, !0));
          e = e.__appliedElement || e;
          e.parentNode.removeChild(e);
          b += this.resolveCss(e.textContent, a.ownerDocument);
        } else {
          e.import && e.import.body && (b += this.resolveCss(e.import.body.textContent, e.import));
        }
      }
    }
    return b;
  }, resolveCss:Polymer.ResolveUrl.resolveCss, parser:Polymer.CssParse, ruleTypes:Polymer.CssParse.types};
}();
Polymer.StyleTransformer = function() {
  var a = Polymer.Settings.useNativeShadow, b = Polymer.StyleUtil, c = {dom:function(a, b, c, d) {
    this._transformDom(a, b || "", c, d);
  }, _transformDom:function(a, b, c, d) {
    a.setAttribute && this.element(a, b, c, d);
    a = Polymer.dom(a).childNodes;
    for (var e = 0; e < a.length; e++) {
      this._transformDom(a[e], b, c, d);
    }
  }, element:function(a, b, c, e) {
    c ? e ? a.removeAttribute(d) : a.setAttribute(d, b) : b && (a.classList ? e ? (a.classList.remove(d), a.classList.remove(b)) : (a.classList.add(d), a.classList.add(b)) : a.getAttribute && (c = a.getAttribute(B), e ? c && a.setAttribute(B, c.replace(d, "").replace(b, "")) : a.setAttribute(B, (c ? c + " " : "") + d + " " + b)));
  }, elementStyles:function(c, d) {
    for (var e = c._styles, f = "", g = 0, h = e.length, m; g < h && (m = e[g]); g++) {
      var l = b.rulesForStyle(m), f = f + (a ? b.toCssText(l, d) : this.css(l, c.is, c.extends, d, c._scopeCssViaAttr) + "\n\n");
    }
    return f.trim();
  }, css:function(a, c, d, e, f) {
    var g = this._calcHostScope(c, d);
    c = this._calcElementScope(c, f);
    var h = this;
    return b.toCssText(a, function(a) {
      a.isScoped || (h.rule(a, c, g), a.isScoped = !0);
      e && e(a, c, g);
    });
  }, _calcElementScope:function(a, b) {
    return a ? b ? v + a + A : u + a : "";
  }, _calcHostScope:function(a, b) {
    return b ? "[is=" + a + "]" : a;
  }, rule:function(a, b, c) {
    this._transformRule(a, this._transformComplexSelector, b, c);
  }, _transformRule:function(a, c, d, e) {
    var g = a.selector.split(f);
    if (!b.isKeyframesSelector(a)) {
      for (var h = 0, m = g.length, l; h < m && (l = g[h]); h++) {
        g[h] = c.call(this, l, d, e);
      }
    }
    a.selector = a.transformedSelector = g.join(f);
  }, _transformComplexSelector:function(a, b, c) {
    var d = !1, e = !1, m = this;
    a = a.replace(H, h + " $1");
    a = a.replace(g, function(a, f, g) {
      d ? g = g.replace(r, " ") : (a = m._transformCompoundSelector(g, f, b, c), d = d || a.stop, e = e || a.hostContext, f = a.combinator, g = a.value);
      return f + g;
    });
    e && (a = a.replace(q, function(a, b, d, e) {
      return b + d + " " + c + e + f + " " + b + c + d + e;
    }));
    return a;
  }, _transformCompoundSelector:function(a, b, c, d) {
    var e = a.search(r), f = !1;
    0 <= a.indexOf(p) ? f = !0 : 0 <= a.indexOf(h) ? (a = a.replace(n, function(a, b, c) {
      return d + c;
    }), a = a.replace(h, d)) : 0 !== e && (a = c ? this._transformSimpleSelector(a, c) : a);
    0 <= a.indexOf(m) && (b = "");
    if (0 <= e) {
      a = a.replace(r, " ");
      var g = !0;
    }
    return {value:a, combinator:b, stop:g, hostContext:f};
  }, _transformSimpleSelector:function(a, b) {
    a = a.split(C);
    a[0] += b;
    return a.join(C);
  }, documentRule:function(b) {
    b.selector = b.parsedSelector;
    this.normalizeRootSelector(b);
    a || this._transformRule(b, this._transformDocumentSelector);
  }, normalizeRootSelector:function(a) {
    a.selector === l && (a.selector = "body");
  }, _transformDocumentSelector:function(a) {
    return a.match(r) ? this._transformComplexSelector(a, e) : this._transformSimpleSelector(a.trim(), e);
  }, SCOPE_NAME:"style-scope"}, d = c.SCOPE_NAME, e = ":not([" + d + "]):not(." + d + ")", f = ",", g = /(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=\[])+)/g, h = ":host", l = ":root", n = /(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/g, p = ":host-context", q = /(.*)(?::host-context)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))(.*)/, m = "::content", r = /::content|::shadow|\/deep\//, u = ".", v = "[" + d + "~=", A = "]", C = ":", B = "class", H = new RegExp("^(" + m + ")");
  return c;
}();
Polymer.StyleExtends = function() {
  var a = Polymer.StyleUtil;
  return {hasExtends:function(a) {
    return !!a.match(this.rx.EXTEND);
  }, transform:function(b) {
    b = a.rulesForStyle(b);
    var c = this;
    a.forEachRule(b, function(a) {
      c._mapRuleOntoParent(a);
      if (a.parent) {
        for (var b; b = c.rx.EXTEND.exec(a.cssText);) {
          (b = c._findExtendor(b[1], a)) && c._extendRule(a, b);
        }
      }
      a.cssText = a.cssText.replace(c.rx.EXTEND, "");
    });
    return a.toCssText(b, function(a) {
      a.selector.match(c.rx.STRIP) && (a.cssText = "");
    }, !0);
  }, _mapRuleOntoParent:function(a) {
    if (a.parent) {
      for (var b = a.parent.map || (a.parent.map = {}), d = a.selector.split(","), e = 0, f; e < d.length; e++) {
        f = d[e], b[f.trim()] = a;
      }
      return b;
    }
  }, _findExtendor:function(a, c) {
    return c.parent && c.parent.map && c.parent.map[a] || this._findExtendor(a, c.parent);
  }, _extendRule:function(a, c) {
    a.parent !== c.parent && this._cloneAndAddRuleToParent(c, a.parent);
    a.extends = a.extends || [];
    a.extends.push(c);
    c.selector = c.selector.replace(this.rx.STRIP, "");
    c.selector = (c.selector && c.selector + ",\n") + a.selector;
    c.extends && c.extends.forEach(function(b) {
      this._extendRule(a, b);
    }, this);
  }, _cloneAndAddRuleToParent:function(a, c) {
    a = Object.create(a);
    a.parent = c;
    a.extends && (a.extends = a.extends.slice());
    c.rules.push(a);
  }, rx:{EXTEND:/@extends\(([^)]*)\)\s*?;/gim, STRIP:/%[^,]*$/}};
}();
(function() {
  var a = Polymer.Base._prepElement, b = Polymer.Settings.useNativeShadow, c = Polymer.StyleUtil, d = Polymer.StyleTransformer, e = Polymer.StyleExtends;
  Polymer.Base._addFeature({_prepElement:function(b) {
    this._encapsulateStyle && d.element(b, this.is, this._scopeCssViaAttr);
    a.call(this, b);
  }, _prepStyles:function() {
    b || (this._scopeStyle = c.applyStylePlaceHolder(this.is));
  }, _prepShimStyles:function() {
    if (this._template) {
      void 0 === this._encapsulateStyle && (this._encapsulateStyle = !b);
      this._styles = this._collectStyles();
      var a = d.elementStyles(this);
      this._prepStyleProperties();
      !this._needsStyleProperties() && this._styles.length && c.applyCss(a, this.is, b ? this._template.content : null, this._scopeStyle);
    } else {
      this._styles = [];
    }
  }, _collectStyles:function() {
    var a = [], b = "", d = this.styleModules;
    if (d) {
      for (var l = 0, n = d.length, p; l < n && (p = d[l]); l++) {
        b += c.cssFromModule(p);
      }
    }
    b += c.cssFromModule(this.is);
    d = this._template && this._template.parentNode;
    !this._template || d && d.id.toLowerCase() === this.is || (b += c.cssFromElement(this._template));
    b && (d = document.createElement("style"), d.textContent = b, e.hasExtends(d.textContent) && e.transform(d), a.push(d));
    return a;
  }, _elementAdd:function(a) {
    this._encapsulateStyle && (a.__styleScoped ? a.__styleScoped = !1 : d.dom(a, this.is, this._scopeCssViaAttr));
  }, _elementRemove:function(a) {
    this._encapsulateStyle && d.dom(a, this.is, this._scopeCssViaAttr, !0);
  }, scopeSubtree:function(a, c) {
    if (!b) {
      var d = this, e = function(a) {
        if (a.nodeType === Node.ELEMENT_NODE) {
          var b = a.getAttribute("class");
          a.setAttribute("class", d._scopeElementClass(a, b));
          a = a.querySelectorAll("*");
          for (var c = 0, e; c < a.length && (e = a[c]); c++) {
            b = e.getAttribute("class"), e.setAttribute("class", d._scopeElementClass(e, b));
          }
        }
      };
      e(a);
      if (c) {
        return c = new MutationObserver(function(a) {
          for (var b = 0, c; b < a.length && (c = a[b]); b++) {
            if (c.addedNodes) {
              for (var d = 0; d < c.addedNodes.length; d++) {
                e(c.addedNodes[d]);
              }
            }
          }
        }), c.observe(a, {childList:!0, subtree:!0}), c;
      }
    }
  }});
})();
Polymer.StyleProperties = function() {
  var a = Polymer.Settings.useNativeShadow, b = Polymer.DomApi.matchesSelector, c = Polymer.StyleUtil, d = Polymer.StyleTransformer;
  return {decorateStyles:function(a) {
    var b = this, d = {}, e = [];
    c.forRulesInStyles(a, function(a) {
      b.decorateRule(a);
      b.collectPropertiesInCssText(a.propertyInfo.cssText, d);
    }, function(a) {
      e.push(a);
    });
    a._keyframes = e;
    a = [];
    for (var l in d) {
      a.push(l);
    }
    return a;
  }, decorateRule:function(a) {
    if (a.propertyInfo) {
      return a.propertyInfo;
    }
    var b = {}, c = {};
    this.collectProperties(a, c) && (b.properties = c, a.rules = null);
    b.cssText = this.collectCssText(a);
    return a.propertyInfo = b;
  }, collectProperties:function(a, b) {
    var c = a.propertyInfo;
    if (c) {
      if (c.properties) {
        return Polymer.Base.mixin(b, c.properties), !0;
      }
    } else {
      for (var c = this.rx.VAR_ASSIGN, d = a.parsedCssText, e; a = c.exec(d);) {
        b[a[1]] = (a[2] || a[3]).trim(), e = !0;
      }
      return e;
    }
  }, collectCssText:function(a) {
    return this.collectConsumingCssText(a.parsedCssText);
  }, collectConsumingCssText:function(a) {
    return a.replace(this.rx.BRACKETED, "").replace(this.rx.VAR_ASSIGN, "");
  }, collectPropertiesInCssText:function(a, b) {
    for (var c; c = this.rx.VAR_CAPTURE.exec(a);) {
      b[c[1]] = !0, (c = c[2]) && c.match(this.rx.IS_VAR) && (b[c] = !0);
    }
  }, reify:function(a) {
    for (var b = Object.getOwnPropertyNames(a), c = 0, d; c < b.length; c++) {
      d = b[c], a[d] = this.valueForProperty(a[d], a);
    }
  }, valueForProperty:function(a, b) {
    if (a) {
      if (0 <= a.indexOf(";")) {
        a = this.valueForProperties(a, b);
      } else {
        var c = this;
        a = a.replace(this.rx.VAR_MATCH, function(a, d, e, f) {
          a = c.valueForProperty(b[e], b) || (b[f] ? c.valueForProperty(b[f], b) : f);
          return d + (a || "");
        });
      }
    }
    return a && a.trim() || "";
  }, valueForProperties:function(a, b) {
    a = a.split(";");
    for (var c = 0, d, e; c < a.length; c++) {
      if (d = a[c]) {
        if (e = d.match(this.rx.MIXIN_MATCH)) {
          d = this.valueForProperty(b[e[1]], b);
        } else {
          if (e = d.indexOf(":"), -1 !== e) {
            var f = d.substring(e), f = f.trim(), f = this.valueForProperty(f, b) || f;
            d = d.substring(0, e) + f;
          }
        }
        a[c] = d && d.lastIndexOf(";") === d.length - 1 ? d.slice(0, -1) : d || "";
      }
    }
    return a.join(";");
  }, applyProperties:function(a, b) {
    var c = "";
    a.propertyInfo || this.decorateRule(a);
    a.propertyInfo.cssText && (c = this.valueForProperties(a.propertyInfo.cssText, b));
    a.cssText = c;
  }, applyKeyframeTransforms:function(a, b) {
    var c = a.cssText, d = a.cssText;
    null == a.hasAnimations && (a.hasAnimations = this.rx.ANIMATION_MATCH.test(c));
    if (a.hasAnimations) {
      if (null == a.keyframeNamesToTransform) {
        a.keyframeNamesToTransform = [];
        for (var e in b) {
          d = b[e], d = d(c), c !== d && (c = d, a.keyframeNamesToTransform.push(e));
        }
      } else {
        for (e = 0; e < a.keyframeNamesToTransform.length; ++e) {
          d = b[a.keyframeNamesToTransform[e]], c = d(c);
        }
        d = c;
      }
    }
    a.cssText = d;
  }, propertyDataFromStyles:function(a, d) {
    var e = {}, f = this, l = [], n = 0;
    c.forRulesInStyles(a, function(a) {
      a.propertyInfo || f.decorateRule(a);
      if (d && a.propertyInfo.properties && b.call(d, a.transformedSelector || a.parsedSelector)) {
        f.collectProperties(a, e);
        a = n;
        var c = parseInt(a / 32);
        l[c] = (l[c] || 0) | 1 << a % 32;
      }
      n++;
    });
    return {properties:e, key:l};
  }, scopePropertiesFromStyles:function(a) {
    a._scopeStyleProperties || (a._scopeStyleProperties = this.selectedPropertiesFromStyles(a, this.SCOPE_SELECTORS));
    return a._scopeStyleProperties;
  }, hostPropertiesFromStyles:function(a) {
    a._hostStyleProperties || (a._hostStyleProperties = this.selectedPropertiesFromStyles(a, this.HOST_SELECTORS));
    return a._hostStyleProperties;
  }, selectedPropertiesFromStyles:function(a, b) {
    var d = {}, e = this;
    c.forRulesInStyles(a, function(a) {
      a.propertyInfo || e.decorateRule(a);
      for (var c = 0; c < b.length; c++) {
        if (a.parsedSelector === b[c]) {
          e.collectProperties(a, d);
          break;
        }
      }
    });
    return d;
  }, transformStyles:function(b, c, g) {
    var e = this, f = d._calcHostScope(b.is, b.extends), n = b.extends ? "\\" + f.slice(0, -1) + "\\]" : f, p = new RegExp(this.rx.HOST_PREFIX + n + this.rx.HOST_SUFFIX), q = this._elementKeyframeTransforms(b, g);
    return d.elementStyles(b, function(d) {
      e.applyProperties(d, c);
      a || Polymer.StyleUtil.isKeyframesSelector(d) || !d.cssText || (e.applyKeyframeTransforms(d, q), e._scopeSelector(d, p, f, b._scopeCssViaAttr, g));
    });
  }, _elementKeyframeTransforms:function(b, c) {
    b = b._styles._keyframes;
    var d = {};
    if (!a && b) {
      for (var e = 0, f = b[e]; e < b.length; f = b[++e]) {
        this._scopeKeyframes(f, c), d[f.keyframesName] = this._keyframesRuleTransformer(f);
      }
    }
    return d;
  }, _keyframesRuleTransformer:function(a) {
    return function(b) {
      return b.replace(a.keyframesNameRx, a.transformedKeyframesName);
    };
  }, _scopeKeyframes:function(a, b) {
    a.keyframesNameRx = new RegExp(a.keyframesName, "g");
    a.transformedKeyframesName = a.keyframesName + "-" + b;
    a.transformedSelector = a.transformedSelector || a.selector;
    a.selector = a.transformedSelector.replace(a.keyframesName, a.transformedKeyframesName);
  }, _scopeSelector:function(a, b, c, h, l) {
    a.transformedSelector = a.transformedSelector || a.selector;
    h = h ? "[" + d.SCOPE_NAME + "~=" + l + "]" : "." + l;
    l = a.transformedSelector.split(",");
    for (var e = 0, f = l.length, g; e < f && (g = l[e]); e++) {
      l[e] = g.match(b) ? g.replace(c, h) : h + " " + g;
    }
    a.selector = l.join(",");
  }, applyElementScopeSelector:function(a, b, c, h) {
    var e = h ? a.getAttribute(d.SCOPE_NAME) : a.getAttribute("class") || "";
    b = c ? e.replace(c, b) : (e ? e + " " : "") + this.XSCOPE_NAME + " " + b;
    e !== b && (h ? a.setAttribute(d.SCOPE_NAME, b) : a.setAttribute("class", b));
  }, applyElementStyle:function(b, d, g, h) {
    d = h ? h.textContent || "" : this.transformStyles(b, d, g);
    var e = b._customStyle;
    e && !a && e !== h && (e._useCount--, 0 >= e._useCount && e.parentNode && e.parentNode.removeChild(e));
    !a && h && h.parentNode || (a && b._customStyle ? (b._customStyle.textContent = d, h = b._customStyle) : d && (h = c.applyCss(d, g, a ? b.root : null, b._scopeStyle)));
    h && (h._useCount = h._useCount || 0, b._customStyle != h && h._useCount++, b._customStyle = h);
    return h;
  }, mixinCustomStyle:function(a, b) {
    var c, d;
    for (d in b) {
      if ((c = b[d]) || 0 === c) {
        a[d] = c;
      }
    }
  }, rx:{VAR_ASSIGN:/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\s}])|$)/gi, MIXIN_MATCH:/(?:^|\W+)@apply[\s]*\(([^)]*)\)/i, VAR_MATCH:/(^|\W+)var\([\s]*([^,)]*)[\s]*,?[\s]*((?:[^,()]*)|(?:[^;()]*\([^;)]*\)))[\s]*?\)/gi, VAR_CAPTURE:/\([\s]*(--[^,\s)]*)(?:,[\s]*(--[^,\s)]*))?(?:\)|,)/gi, ANIMATION_MATCH:/(animation\s*:)|(animation-name\s*:)/, IS_VAR:/^--/, BRACKETED:/\{[^}]*\}/g, HOST_PREFIX:"(?:^|[^.#[:])", HOST_SUFFIX:"($|[.:[\\s>+~])"}, HOST_SELECTORS:[":host"], SCOPE_SELECTORS:[":root"], 
  XSCOPE_NAME:"x-scope"};
}();
(function() {
  Polymer.StyleCache = function() {
    this.cache = {};
  };
  Polymer.StyleCache.prototype = {MAX:100, store:function(a, b, c, d) {
    b.keyValues = c;
    b.styles = d;
    a = this.cache[a] = this.cache[a] || [];
    a.push(b);
    a.length > this.MAX && a.shift();
  }, retrieve:function(a, b, c) {
    if (a = this.cache[a]) {
      for (var d = a.length - 1, e; 0 <= d; d--) {
        if (e = a[d], c === e.styles && this._objectsEqual(b, e.keyValues)) {
          return e;
        }
      }
    }
  }, clear:function() {
    this.cache = {};
  }, _objectsEqual:function(a, b) {
    var c;
    for (c in a) {
      var d = a[c];
      var e = b[c];
      if ("object" === typeof d && d ? !this._objectsStrictlyEqual(d, e) : d !== e) {
        return !1;
      }
    }
    return Array.isArray(a) ? a.length === b.length : !0;
  }, _objectsStrictlyEqual:function(a, b) {
    return this._objectsEqual(a, b) && this._objectsEqual(b, a);
  }};
})();
Polymer.StyleDefaults = function() {
  var a = Polymer.StyleProperties;
  return {_styles:[], _properties:null, customStyle:{}, _styleCache:new Polymer.StyleCache, addStyle:function(a) {
    this._styles.push(a);
    this._properties = null;
  }, get _styleProperties() {
    this._properties || (a.decorateStyles(this._styles), this._styles._scopeStyleProperties = null, this._properties = a.scopePropertiesFromStyles(this._styles), a.mixinCustomStyle(this._properties, this.customStyle), a.reify(this._properties));
    return this._properties;
  }, _needsStyleProperties:function() {
  }, _computeStyleProperties:function() {
    return this._styleProperties;
  }, updateStyles:function(a) {
    this._properties = null;
    a && Polymer.Base.mixin(this.customStyle, a);
    this._styleCache.clear();
    a = 0;
    for (var b; a < this._styles.length; a++) {
      b = this._styles[a], b = b.__importElement || b, b._apply();
    }
  }};
}();
(function() {
  var a = Polymer.Base.serializeValueToAttribute, b = Polymer.StyleProperties, c = Polymer.StyleTransformer, d = Polymer.StyleDefaults, e = Polymer.Settings.useNativeShadow;
  Polymer.Base._addFeature({_prepStyleProperties:function() {
    this._ownStylePropertyNames = this._styles && this._styles.length ? b.decorateStyles(this._styles) : null;
  }, customStyle:null, getComputedStyleValue:function(a) {
    return this._styleProperties && this._styleProperties[a] || getComputedStyle(this).getPropertyValue(a);
  }, _setupStyleProperties:function() {
    this.customStyle = {};
    this._customStyle = this._ownStyleProperties = this._scopeSelector = this._styleProperties = this._styleCache = null;
  }, _needsStyleProperties:function() {
    return !(!this._ownStylePropertyNames || !this._ownStylePropertyNames.length);
  }, _beforeAttached:function() {
    !this._scopeSelector && this._needsStyleProperties() && this._updateStyleProperties();
  }, _findStyleHost:function() {
    for (var a = this; a = Polymer.dom(a).getOwnerRoot();) {
      if (Polymer.isInstance(a.host)) {
        return a.host;
      }
      a = a.host;
    }
    return d;
  }, _updateStyleProperties:function() {
    var a = this._findStyleHost();
    a._styleCache || (a._styleCache = new Polymer.StyleCache);
    var c = b.propertyDataFromStyles(a._styles, this);
    c.key.customStyle = this.customStyle;
    var d = a._styleCache.retrieve(this.is, c.key, this._styles);
    var g = !!d;
    g ? this._styleProperties = d._styleProperties : this._computeStyleProperties(c.properties);
    this._computeOwnStyleProperties();
    g || (d = f.retrieve(this.is, this._ownStyleProperties, this._styles));
    var h = !!d && !g;
    d = this._applyStyleProperties(d);
    g || (d = d && e ? d.cloneNode(!0) : d, d = {style:d, _scopeSelector:this._scopeSelector, _styleProperties:this._styleProperties}, c.key.customStyle = {}, this.mixin(c.key.customStyle, this.customStyle), a._styleCache.store(this.is, d, c.key, this._styles), h || f.store(this.is, Object.create(d), this._ownStyleProperties, this._styles));
  }, _computeStyleProperties:function(a) {
    var c = this._findStyleHost();
    c._styleProperties || c._computeStyleProperties();
    var d = Object.create(c._styleProperties);
    this.mixin(d, b.hostPropertiesFromStyles(this._styles));
    a = a || b.propertyDataFromStyles(c._styles, this).properties;
    this.mixin(d, a);
    this.mixin(d, b.scopePropertiesFromStyles(this._styles));
    b.mixinCustomStyle(d, this.customStyle);
    b.reify(d);
    this._styleProperties = d;
  }, _computeOwnStyleProperties:function() {
    for (var a = {}, b = 0, c; b < this._ownStylePropertyNames.length; b++) {
      c = this._ownStylePropertyNames[b], a[c] = this._styleProperties[c];
    }
    this._ownStyleProperties = a;
  }, _scopeCount:0, _applyStyleProperties:function(a) {
    var c = this._scopeSelector;
    this._scopeSelector = a ? a._scopeSelector : this.is + "-" + this.__proto__._scopeCount++;
    a = b.applyElementStyle(this, this._styleProperties, this._scopeSelector, a && a.style);
    e || b.applyElementScopeSelector(this, this._scopeSelector, c, this._scopeCssViaAttr);
    return a;
  }, serializeValueToAttribute:function(b, c, d) {
    d = d || this;
    if ("class" === c && !e) {
      var f = d === this ? this.domHost || this.dataHost : this;
      f && (b = f._scopeElementClass(d, b));
    }
    d = this.shadyRoot && this.shadyRoot._hasDistributed ? Polymer.dom(d) : d;
    a.call(this, b, c, d);
  }, _scopeElementClass:function(a, b) {
    e || this._scopeCssViaAttr || (b = (b ? b + " " : "") + g + " " + this.is + (a._scopeSelector ? " " + h + " " + a._scopeSelector : ""));
    return b;
  }, updateStyles:function(a) {
    this.isAttached && (a && this.mixin(this.customStyle, a), this._needsStyleProperties() ? this._updateStyleProperties() : this._styleProperties = null, this._styleCache && this._styleCache.clear(), this._updateRootStyles());
  }, _updateRootStyles:function(a) {
    a = a || this.root;
    a = Polymer.dom(a)._query(function(a) {
      return a.shadyRoot || a.shadowRoot;
    });
    for (var b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
      d.updateStyles && d.updateStyles();
    }
  }});
  Polymer.updateStyles = function(a) {
    d.updateStyles(a);
    Polymer.Base._updateRootStyles(document);
  };
  var f = new Polymer.StyleCache;
  Polymer.customStyleCache = f;
  var g = c.SCOPE_NAME, h = b.XSCOPE_NAME;
})();
Polymer.Base._addFeature({_registerFeatures:function() {
  this._prepIs();
  this._prepConstructor();
  this._prepStyles();
}, _finishRegisterFeatures:function() {
  this._prepTemplate();
  this._prepShimStyles();
  this._prepAnnotations();
  this._prepEffects();
  this._prepBehaviors();
  this._prepPropertyInfo();
  this._prepBindings();
  this._prepShady();
}, _prepBehavior:function(a) {
  this._addPropertyEffects(a.properties);
  this._addComplexObserverEffects(a.observers);
  this._addHostAttributes(a.hostAttributes);
}, _initFeatures:function() {
  this._setupGestures();
  this._setupConfigure();
  this._setupStyleProperties();
  this._setupDebouncers();
  this._setupShady();
  this._registerHost();
  this._template && (this._poolContent(), this._beginHosting(), this._stampTemplate(), this._endHosting(), this._marshalAnnotationReferences());
  this._marshalInstanceEffects();
  this._marshalBehaviors();
  this._marshalHostAttributes();
  this._marshalAttributes();
  this._tryReady();
}, _marshalBehavior:function(a) {
  a.listeners && this._listenListeners(a.listeners);
}});
(function() {
  var a = Polymer.StyleProperties, b = Polymer.StyleUtil, c = Polymer.CssParse, d = Polymer.StyleDefaults, e = Polymer.StyleTransformer;
  Polymer({is:"custom-style", extends:"style", _template:null, properties:{include:String}, ready:function() {
    this._tryApply();
  }, attached:function() {
    this._tryApply();
  }, _tryApply:function() {
    if (!this._appliesToDocument && this.parentNode && "dom-module" !== this.parentNode.localName) {
      this._appliesToDocument = !0;
      var a = this.__appliedElement || this;
      d.addStyle(a);
      if (a.textContent || this.include) {
        this._apply(!0);
      } else {
        var b = this, c = new MutationObserver(function() {
          c.disconnect();
          b._apply(!0);
        });
        c.observe(a, {childList:!0});
      }
    }
  }, _apply:function(a) {
    var c = this.__appliedElement || this;
    this.include && (c.textContent = b.cssFromModules(this.include, !0) + c.textContent);
    if (c.textContent) {
      b.forEachRule(b.rulesForStyle(c), function(a) {
        e.documentRule(a);
      });
      var d = this, f = function() {
        d._applyCustomProperties(c);
      };
      this._pendingApplyProperties && (cancelAnimationFrame(this._pendingApplyProperties), this._pendingApplyProperties = null);
      a ? this._pendingApplyProperties = requestAnimationFrame(f) : f();
    }
  }, _applyCustomProperties:function(d) {
    this._computeStyleProperties();
    var e = this._styleProperties, f = b.rulesForStyle(d);
    d.textContent = b.toCssText(f, function(b) {
      var d = b.cssText = b.parsedCssText;
      b.propertyInfo && b.propertyInfo.cssText && (d = c.removeCustomPropAssignment(d), b.cssText = a.valueForProperties(d, e));
    });
  }});
})();
Polymer.Templatizer = {properties:{__hideTemplateChildren__:{observer:"_showHideChildren"}}, _instanceProps:Polymer.nob, _parentPropPrefix:"_parent_", templatize:function(a) {
  this._templatized = a;
  a._content || (a._content = a.content);
  if (a._content._ctor) {
    this.ctor = a._content._ctor, this._prepParentProperties(this.ctor.prototype, a);
  } else {
    var b = Object.create(Polymer.Base);
    this._customPrepAnnotations(b, a);
    this._prepParentProperties(b, a);
    b._prepEffects();
    this._customPrepEffects(b);
    b._prepBehaviors();
    b._prepPropertyInfo();
    b._prepBindings();
    b._notifyPathUp = this._notifyPathUpImpl;
    b._scopeElementClass = this._scopeElementClassImpl;
    b.listen = this._listenImpl;
    b._showHideChildren = this._showHideChildrenImpl;
    b.__setPropertyOrig = this.__setProperty;
    b.__setProperty = this.__setPropertyImpl;
    var c = this._constructorImpl, d = function(a, b) {
      c.call(this, a, b);
    };
    d.prototype = b;
    b.constructor = d;
    this.ctor = a._content._ctor = d;
  }
}, _getRootDataHost:function() {
  return this.dataHost && this.dataHost._rootDataHost || this.dataHost;
}, _showHideChildrenImpl:function(a) {
  for (var b = this._children, c = 0; c < b.length; c++) {
    var d = b[c];
    !!a != !!d.__hideTemplateChildren__ && (d.nodeType === Node.TEXT_NODE ? a ? (d.__polymerTextContent__ = d.textContent, d.textContent = "") : d.textContent = d.__polymerTextContent__ : d.style && (a ? (d.__polymerDisplay__ = d.style.display, d.style.display = "none") : d.style.display = d.__polymerDisplay__));
    d.__hideTemplateChildren__ = a;
  }
}, __setPropertyImpl:function(a, b, c, d) {
  d && d.__hideTemplateChildren__ && "textContent" == a && (a = "__polymerTextContent__");
  this.__setPropertyOrig(a, b, c, d);
}, _debounceTemplate:function(a) {
  Polymer.dom.addDebouncer(this.debounce("_debounceTemplate", a));
}, _flushTemplates:function() {
  Polymer.dom.flush();
}, _customPrepEffects:function(a) {
  var b = a._parentProps, c;
  for (c in b) {
    a._addPropertyEffect(c, "function", this._createHostPropEffector(c));
  }
  for (c in this._instanceProps) {
    a._addPropertyEffect(c, "function", this._createInstancePropEffector(c));
  }
}, _customPrepAnnotations:function(a, b) {
  a._template = b;
  var c = b._content;
  if (!c._notes) {
    var d = a._rootDataHost;
    d && (Polymer.Annotations.prepElement = function() {
      d._prepElement();
    });
    c._notes = Polymer.Annotations.parseAnnotations(b);
    Polymer.Annotations.prepElement = null;
    this._processAnnotations(c._notes);
  }
  a._notes = c._notes;
  a._parentProps = c._parentProps;
}, _prepParentProperties:function(a, b) {
  var c = this._parentProps = a._parentProps;
  if (this._forwardParentProp && c) {
    var d = a._parentPropProto, e;
    if (!d) {
      for (e in this._instanceProps) {
        delete c[e];
      }
      d = a._parentPropProto = Object.create(null);
      b != this && (Polymer.Bind.prepareModel(d), Polymer.Base.prepareModelNotifyPath(d));
      for (e in c) {
        a = this._parentPropPrefix + e, c = [{kind:"function", effect:this._createForwardPropEffector(e), fn:Polymer.Bind._functionEffect}, {kind:"notify", fn:Polymer.Bind._notifyEffect, effect:{event:Polymer.CaseMap.camelToDashCase(a) + "-changed"}}], Polymer.Bind._createAccessors(d, a, c);
      }
    }
    var f = this;
    b != this && (Polymer.Bind.prepareInstance(b), b._forwardParentProp = function(a, b) {
      f._forwardParentProp(a, b);
    });
    this._extendTemplate(b, d);
    b._pathEffector = function(a, b, c) {
      return f._pathEffectorImpl(a, b, c);
    };
  }
}, _createForwardPropEffector:function(a) {
  return function(b, c) {
    this._forwardParentProp(a, c);
  };
}, _createHostPropEffector:function(a) {
  var b = this._parentPropPrefix;
  return function(c, d) {
    this.dataHost._templatized[b + a] = d;
  };
}, _createInstancePropEffector:function(a) {
  return function(b, c, d, e) {
    e || this.dataHost._forwardInstanceProp(this, a, c);
  };
}, _extendTemplate:function(a, b) {
  var c = Object.getOwnPropertyNames(b);
  b._propertySetter && (a._propertySetter = b._propertySetter);
  for (var d = 0, e; d < c.length && (e = c[d]); d++) {
    var f = a[e], g = Object.getOwnPropertyDescriptor(b, e);
    Object.defineProperty(a, e, g);
    void 0 !== f && a._propertySetter(e, f);
  }
}, _showHideChildren:function(a) {
}, _forwardInstancePath:function(a, b, c) {
}, _forwardInstanceProp:function(a, b, c) {
}, _notifyPathUpImpl:function(a, b) {
  var c = this.dataHost, d = a.indexOf("."), d = 0 > d ? a : a.slice(0, d);
  c._forwardInstancePath.call(c, this, a, b);
  d in c._parentProps && c._templatized.notifyPath(c._parentPropPrefix + a, b);
}, _pathEffectorImpl:function(a, b, c) {
  if (this._forwardParentPath && 0 === a.indexOf(this._parentPropPrefix)) {
    var d = a.substring(this._parentPropPrefix.length);
    this._modelForPath(d) in this._parentProps && this._forwardParentPath(d, b);
  }
  Polymer.Base._pathEffector.call(this._templatized, a, b, c);
}, _constructorImpl:function(a, b) {
  this._rootDataHost = b._getRootDataHost();
  this._setupConfigure(a);
  this._registerHost(b);
  this._beginHosting();
  this.root = this.instanceTemplate(this._template);
  this.root.__noContent = !this._notes._hasContent;
  this.root.__styleScoped = !0;
  this._endHosting();
  this._marshalAnnotatedNodes();
  this._marshalInstanceEffects();
  this._marshalAnnotatedListeners();
  a = [];
  for (var c = this.root.firstChild; c; c = c.nextSibling) {
    a.push(c), c._templateInstance = this;
  }
  this._children = a;
  b.__hideTemplateChildren__ && this._showHideChildren(!0);
  this._tryReady();
}, _listenImpl:function(a, b, c) {
  var d = this, e = this._rootDataHost, f = e._createEventHandler(a, b, c);
  e._listen(a, b, function(a) {
    a.model = d;
    f(a);
  });
}, _scopeElementClassImpl:function(a, b) {
  var c = this._rootDataHost;
  if (c) {
    return c._scopeElementClass(a, b);
  }
}, stamp:function(a) {
  a = a || {};
  if (this._parentProps) {
    var b = this._templatized, c;
    for (c in this._parentProps) {
      void 0 === a[c] && (a[c] = b[this._parentPropPrefix + c]);
    }
  }
  return new this.ctor(a, this);
}, modelForElement:function(a) {
  for (var b; a;) {
    if (b = a._templateInstance) {
      if (b.dataHost != this) {
        a = b.dataHost;
      } else {
        return b;
      }
    } else {
      a = a.parentNode;
    }
  }
}};
Polymer({is:"dom-template", extends:"template", _template:null, behaviors:[Polymer.Templatizer], ready:function() {
  this.templatize(this);
}});
Polymer._collections = new WeakMap;
Polymer.Collection = function(a) {
  Polymer._collections.set(a, this);
  this.userArray = a;
  this.store = a.slice();
  this.initMap();
};
Polymer.Collection.prototype = {constructor:Polymer.Collection, initMap:function() {
  for (var a = this.omap = new WeakMap, b = this.pmap = {}, c = this.store, d = 0; d < c.length; d++) {
    var e = c[d];
    e && "object" == typeof e ? a.set(e, d) : b[e] = d;
  }
}, add:function(a) {
  var b = this.store.push(a) - 1;
  a && "object" == typeof a ? this.omap.set(a, b) : this.pmap[a] = b;
  return "#" + b;
}, removeKey:function(a) {
  if (a = this._parseKey(a)) {
    this._removeFromMap(this.store[a]), delete this.store[a];
  }
}, _removeFromMap:function(a) {
  a && "object" == typeof a ? this.omap.delete(a) : delete this.pmap[a];
}, remove:function(a) {
  a = this.getKey(a);
  this.removeKey(a);
  return a;
}, getKey:function(a) {
  a = a && "object" == typeof a ? this.omap.get(a) : this.pmap[a];
  if (void 0 != a) {
    return "#" + a;
  }
}, getKeys:function() {
  return Object.keys(this.store).map(function(a) {
    return "#" + a;
  });
}, _parseKey:function(a) {
  if (a && "#" == a[0]) {
    return a.slice(1);
  }
}, setItem:function(a, b) {
  if (a = this._parseKey(a)) {
    var c = this.store[a];
    c && this._removeFromMap(c);
    b && "object" == typeof b ? this.omap.set(b, a) : this.pmap[b] = a;
    this.store[a] = b;
  }
}, getItem:function(a) {
  if (a = this._parseKey(a)) {
    return this.store[a];
  }
}, getItems:function() {
  var a = [], b = this.store, c;
  for (c in b) {
    a.push(b[c]);
  }
  return a;
}, _applySplices:function(a) {
  for (var b = {}, c, d = 0, e; d < a.length && (e = a[d]); d++) {
    e.addedKeys = [];
    for (var f = 0; f < e.removed.length; f++) {
      c = this.getKey(e.removed[f]), b[c] = b[c] ? null : -1;
    }
    for (f = 0; f < e.addedCount; f++) {
      var g = this.userArray[e.index + f];
      c = this.getKey(g);
      c = void 0 === c ? this.add(g) : c;
      b[c] = b[c] ? null : 1;
      e.addedKeys.push(c);
    }
  }
  a = [];
  d = [];
  for (c in b) {
    0 > b[c] && (this.removeKey(c), a.push(c)), 0 < b[c] && d.push(c);
  }
  return [{removed:a, added:d}];
}};
Polymer.Collection.get = function(a) {
  return Polymer._collections.get(a) || new Polymer.Collection(a);
};
Polymer.Collection.applySplices = function(a, b) {
  return (a = Polymer._collections.get(a)) ? a._applySplices(b) : null;
};
Polymer({is:"dom-repeat", extends:"template", _template:null, properties:{items:{type:Array}, as:{type:String, value:"item"}, indexAs:{type:String, value:"index"}, sort:{type:Function, observer:"_sortChanged"}, filter:{type:Function, observer:"_filterChanged"}, observe:{type:String, observer:"_observeChanged"}, delay:Number, renderedItemCount:{type:Number, notify:!0, readOnly:!0}, initialCount:{type:Number, observer:"_initializeChunking"}, targetFramerate:{type:Number, value:20}, _targetFrameTime:{type:Number, 
computed:"_computeFrameTime(targetFramerate)"}}, behaviors:[Polymer.Templatizer], observers:["_itemsChanged(items.*)"], created:function() {
  this._instances = [];
  this._pool = [];
  this._limit = Infinity;
  var a = this;
  this._boundRenderChunk = function() {
    a._renderChunk();
  };
}, detached:function() {
  this.__isDetached = !0;
  for (var a = 0; a < this._instances.length; a++) {
    this._detachInstance(a);
  }
}, attached:function() {
  if (this.__isDetached) {
    this.__isDetached = !1;
    for (var a = Polymer.dom(Polymer.dom(this).parentNode), b = 0; b < this._instances.length; b++) {
      this._attachInstance(b, a);
    }
  }
}, ready:function() {
  this._instanceProps = {__key__:!0};
  this._instanceProps[this.as] = !0;
  this._instanceProps[this.indexAs] = !0;
  this.ctor || this.templatize(this);
}, _sortChanged:function(a) {
  var b = this._getRootDataHost();
  this._sortFn = a && ("function" == typeof a ? a : function() {
    return b[a].apply(b, arguments);
  });
  this._needFullRefresh = !0;
  this.items && this._debounceTemplate(this._render);
}, _filterChanged:function(a) {
  var b = this._getRootDataHost();
  this._filterFn = a && ("function" == typeof a ? a : function() {
    return b[a].apply(b, arguments);
  });
  this._needFullRefresh = !0;
  this.items && this._debounceTemplate(this._render);
}, _computeFrameTime:function(a) {
  return Math.ceil(1000 / a);
}, _initializeChunking:function() {
  this.initialCount && (this._chunkCount = this._limit = this.initialCount, this._lastChunkTime = performance.now());
}, _tryRenderChunk:function() {
  this.items && this._limit < this.items.length && this.debounce("renderChunk", this._requestRenderChunk);
}, _requestRenderChunk:function() {
  requestAnimationFrame(this._boundRenderChunk);
}, _renderChunk:function() {
  var a = performance.now();
  this._chunkCount = Math.round(this._targetFrameTime / (a - this._lastChunkTime) * this._chunkCount) || 1;
  this._limit += this._chunkCount;
  this._lastChunkTime = a;
  this._debounceTemplate(this._render);
}, _observeChanged:function() {
  this._observePaths = this.observe && this.observe.replace(".*", ".").split(" ");
}, _itemsChanged:function(a) {
  if ("items" == a.path) {
    Array.isArray(this.items) ? this.collection = Polymer.Collection.get(this.items) : this.items ? this._error(this._logf("dom-repeat", "expected array for `items`, found", this.items)) : this.collection = null, this._keySplices = [], this._indexSplices = [], this._needFullRefresh = !0, this._initializeChunking(), this._debounceTemplate(this._render);
  } else {
    if ("items.splices" == a.path) {
      this._keySplices = this._keySplices.concat(a.value.keySplices), this._indexSplices = this._indexSplices.concat(a.value.indexSplices), this._debounceTemplate(this._render);
    } else {
      var b = a.path.slice(6);
      this._forwardItemPath(b, a.value);
      this._checkObservedPaths(b);
    }
  }
}, _checkObservedPaths:function(a) {
  if (this._observePaths) {
    a = a.substring(a.indexOf(".") + 1);
    for (var b = this._observePaths, c = 0; c < b.length; c++) {
      if (0 === a.indexOf(b[c])) {
        this._needFullRefresh = !0;
        this.delay ? this.debounce("render", this._render, this.delay) : this._debounceTemplate(this._render);
        break;
      }
    }
  }
}, render:function() {
  this._needFullRefresh = !0;
  this._debounceTemplate(this._render);
  this._flushTemplates();
}, _render:function() {
  this._needFullRefresh ? (this._applyFullRefresh(), this._needFullRefresh = !1) : this._keySplices.length && (this._sortFn ? this._applySplicesUserSort(this._keySplices) : this._filterFn ? this._applyFullRefresh() : this._applySplicesArrayOrder(this._indexSplices));
  this._keySplices = [];
  this._indexSplices = [];
  for (var a = this._keyToInstIdx = {}, b = this._instances.length - 1; 0 <= b; b--) {
    var c = this._instances[b];
    c.isPlaceholder && b < this._limit ? c = this._insertInstance(b, c.__key__) : !c.isPlaceholder && b >= this._limit && (c = this._downgradeInstance(b, c.__key__));
    a[c.__key__] = b;
    c.isPlaceholder || c.__setProperty(this.indexAs, b, !0);
  }
  this._pool.length = 0;
  this._setRenderedItemCount(this._instances.length);
  this.fire("dom-change");
  this._tryRenderChunk();
}, _applyFullRefresh:function() {
  var a = this.collection;
  if (this._sortFn) {
    var b = a ? a.getKeys() : [];
  } else {
    b = [];
    var c = this.items;
    if (c) {
      for (var d = 0; d < c.length; d++) {
        b.push(a.getKey(c[d]));
      }
    }
  }
  var e = this;
  this._filterFn && (b = b.filter(function(b) {
    return e._filterFn(a.getItem(b));
  }));
  this._sortFn && b.sort(function(b, c) {
    return e._sortFn(a.getItem(b), a.getItem(c));
  });
  for (d = 0; d < b.length; d++) {
    var c = b[d], f = this._instances[d];
    f ? (f.__key__ = c, !f.isPlaceholder && d < this._limit && f.__setProperty(this.as, a.getItem(c), !0)) : d < this._limit ? this._insertInstance(d, c) : this._insertPlaceholder(d, c);
  }
  for (b = this._instances.length - 1; b >= d; b--) {
    this._detachAndRemoveInstance(b);
  }
}, _numericSort:function(a, b) {
  return a - b;
}, _applySplicesUserSort:function(a) {
  for (var b = this.collection, c = {}, d, e = 0, f; e < a.length && (f = a[e]); e++) {
    for (var g = 0; g < f.removed.length; g++) {
      d = f.removed[g], c[d] = c[d] ? null : -1;
    }
    for (g = 0; g < f.added.length; g++) {
      d = f.added[g], c[d] = c[d] ? null : 1;
    }
  }
  f = [];
  a = [];
  for (d in c) {
    -1 === c[d] && f.push(this._keyToInstIdx[d]), 1 === c[d] && a.push(d);
  }
  if (f.length) {
    for (f.sort(this._numericSort), e = f.length - 1; 0 <= e; e--) {
      c = f[e], void 0 !== c && this._detachAndRemoveInstance(c);
    }
  }
  var h = this;
  if (a.length) {
    for (this._filterFn && (a = a.filter(function(a) {
      return h._filterFn(b.getItem(a));
    })), a.sort(function(a, c) {
      return h._sortFn(b.getItem(a), b.getItem(c));
    }), e = c = 0; e < a.length; e++) {
      c = this._insertRowUserSort(c, a[e]);
    }
  }
}, _insertRowUserSort:function(a, b) {
  for (var c = this.collection, d = c.getItem(b), e = this._instances.length - 1, f = -1; a <= e;) {
    var g = a + e >> 1, h = this._sortFn(c.getItem(this._instances[g].__key__), d);
    if (0 > h) {
      a = g + 1;
    } else {
      if (0 < h) {
        e = g - 1;
      } else {
        f = g;
        break;
      }
    }
  }
  0 > f && (f = e + 1);
  this._insertPlaceholder(f, b);
  return f;
}, _applySplicesArrayOrder:function(a) {
  for (var b = 0, c; b < a.length && (c = a[b]); b++) {
    for (var d = 0; d < c.removed.length; d++) {
      this._detachAndRemoveInstance(c.index);
    }
    for (d = 0; d < c.addedKeys.length; d++) {
      this._insertPlaceholder(c.index + d, c.addedKeys[d]);
    }
  }
}, _detachInstance:function(a) {
  a = this._instances[a];
  if (!a.isPlaceholder) {
    for (var b = 0; b < a._children.length; b++) {
      var c = a._children[b];
      Polymer.dom(a.root).appendChild(c);
    }
    return a;
  }
}, _attachInstance:function(a, b) {
  a = this._instances[a];
  a.isPlaceholder || b.insertBefore(a.root, this);
}, _detachAndRemoveInstance:function(a) {
  var b = this._detachInstance(a);
  b && this._pool.push(b);
  this._instances.splice(a, 1);
}, _insertPlaceholder:function(a, b) {
  this._instances.splice(a, 0, {isPlaceholder:!0, __key__:b});
}, _stampInstance:function(a, b) {
  var c = {__key__:b};
  c[this.as] = this.collection.getItem(b);
  c[this.indexAs] = a;
  return this.stamp(c);
}, _insertInstance:function(a, b) {
  var c = this._pool.pop();
  c ? (c.__setProperty(this.as, this.collection.getItem(b), !0), c.__setProperty("__key__", b, !0)) : c = this._stampInstance(a, b);
  b = (b = this._instances[a + 1]) && !b.isPlaceholder ? b._children[0] : this;
  var d = Polymer.dom(this).parentNode;
  Polymer.dom(d).insertBefore(c.root, b);
  return this._instances[a] = c;
}, _downgradeInstance:function(a, b) {
  var c = this._detachInstance(a);
  c && this._pool.push(c);
  c = {isPlaceholder:!0, __key__:b};
  return this._instances[a] = c;
}, _showHideChildren:function(a) {
  for (var b = 0; b < this._instances.length; b++) {
    this._instances[b]._showHideChildren(a);
  }
}, _forwardInstanceProp:function(a, b, c) {
  b == this.as && (a = this._sortFn || this._filterFn ? this.items.indexOf(this.collection.getItem(a.__key__)) : a[this.indexAs], this.set("items." + a, c));
}, _forwardInstancePath:function(a, b, c) {
  0 === b.indexOf(this.as + ".") && this._notifyPath("items." + a.__key__ + "." + b.slice(this.as.length + 1), c);
}, _forwardParentProp:function(a, b) {
  for (var c = this._instances, d = 0, e; d < c.length && (e = c[d]); d++) {
    e.isPlaceholder || e.__setProperty(a, b, !0);
  }
}, _forwardParentPath:function(a, b) {
  for (var c = this._instances, d = 0, e; d < c.length && (e = c[d]); d++) {
    e.isPlaceholder || e._notifyPath(a, b, !0);
  }
}, _forwardItemPath:function(a, b) {
  if (this._keyToInstIdx) {
    var c = a.indexOf("."), d = a.substring(0, 0 > c ? a.length : c);
    (d = this._instances[this._keyToInstIdx[d]]) && !d.isPlaceholder && (0 <= c ? (a = this.as + "." + a.substring(c + 1), d._notifyPath(a, b, !0)) : d.__setProperty(this.as, b, !0));
  }
}, itemForElement:function(a) {
  return (a = this.modelForElement(a)) && a[this.as];
}, keyForElement:function(a) {
  return (a = this.modelForElement(a)) && a.__key__;
}, indexForElement:function(a) {
  return (a = this.modelForElement(a)) && a[this.indexAs];
}});
Polymer({is:"array-selector", _template:null, properties:{items:{type:Array, observer:"clearSelection"}, multi:{type:Boolean, value:!1, observer:"clearSelection"}, selected:{type:Object, notify:!0}, selectedItem:{type:Object, notify:!0}, toggle:{type:Boolean, value:!1}}, clearSelection:function() {
  if (Array.isArray(this.selected)) {
    for (var a = 0; a < this.selected.length; a++) {
      this.unlinkPaths("selected." + a);
    }
  } else {
    this.unlinkPaths("selected"), this.unlinkPaths("selectedItem");
  }
  if (this.multi) {
    if (!this.selected || this.selected.length) {
      this.selected = [], this._selectedColl = Polymer.Collection.get(this.selected);
    }
  } else {
    this._selectedColl = this.selected = null;
  }
  this.selectedItem = null;
}, isSelected:function(a) {
  return this.multi ? void 0 !== this._selectedColl.getKey(a) : this.selected == a;
}, deselect:function(a) {
  if (this.multi) {
    if (this.isSelected(a)) {
      var b = this._selectedColl.getKey(a);
      this.arrayDelete("selected", a);
      this.unlinkPaths("selected." + b);
    }
  } else {
    this.selectedItem = this.selected = null, this.unlinkPaths("selected"), this.unlinkPaths("selectedItem");
  }
}, select:function(a) {
  var b = Polymer.Collection.get(this.items).getKey(a);
  this.multi ? this.isSelected(a) ? this.toggle && this.deselect(a) : (this.push("selected", a), a = this._selectedColl.getKey(a), this.linkPaths("selected." + a, "items." + b)) : this.toggle && a == this.selected ? this.deselect() : (this.selectedItem = this.selected = a, this.linkPaths("selected", "items." + b), this.linkPaths("selectedItem", "items." + b));
}});
Polymer({is:"dom-if", extends:"template", _template:null, properties:{"if":{type:Boolean, value:!1, observer:"_queueRender"}, restamp:{type:Boolean, value:!1, observer:"_queueRender"}}, behaviors:[Polymer.Templatizer], _queueRender:function() {
  this._debounceTemplate(this._render);
}, detached:function() {
  this.parentNode && (this.parentNode.nodeType != Node.DOCUMENT_FRAGMENT_NODE || Polymer.Settings.hasShadow && this.parentNode instanceof ShadowRoot) || this._teardownInstance();
}, attached:function() {
  this.if && this.ctor && this.async(this._ensureInstance);
}, render:function() {
  this._flushTemplates();
}, _render:function() {
  this.if ? (this.ctor || this.templatize(this), this._ensureInstance(), this._showHideChildren()) : this.restamp && this._teardownInstance();
  !this.restamp && this._instance && this._showHideChildren();
  this.if != this._lastIf && (this.fire("dom-change"), this._lastIf = this.if);
}, _ensureInstance:function() {
  var a = Polymer.dom(this).parentNode;
  if (a) {
    if (a = Polymer.dom(a), this._instance) {
      var b = this._instance._children;
      if (b && b.length && Polymer.dom(this).previousSibling !== b[b.length - 1]) {
        for (var c = 0, d; c < b.length && (d = b[c]); c++) {
          a.insertBefore(d, this);
        }
      }
    } else {
      this._instance = this.stamp(), a.insertBefore(this._instance.root, this);
    }
  }
}, _teardownInstance:function() {
  if (this._instance) {
    var a = this._instance._children;
    if (a && a.length) {
      for (var b = Polymer.dom(Polymer.dom(a[0]).parentNode), c = 0, d; c < a.length && (d = a[c]); c++) {
        b.removeChild(d);
      }
    }
    this._instance = null;
  }
}, _showHideChildren:function() {
  var a = this.__hideTemplateChildren__ || !this.if;
  this._instance && this._instance._showHideChildren(a);
}, _forwardParentProp:function(a, b) {
  this._instance && (this._instance[a] = b);
}, _forwardParentPath:function(a, b) {
  this._instance && this._instance._notifyPath(a, b, !0);
}});
Polymer({is:"dom-bind", extends:"template", _template:null, created:function() {
  var a = this;
  Polymer.RenderStatus.whenReady(function() {
    "loading" == document.readyState ? document.addEventListener("DOMContentLoaded", function() {
      a._markImportsReady();
    }) : a._markImportsReady();
  });
}, _ensureReady:function() {
  this._readied || this._readySelf();
}, _markImportsReady:function() {
  this._importsReady = !0;
  this._ensureReady();
}, _registerFeatures:function() {
  this._prepConstructor();
}, _insertChildren:function() {
  Polymer.dom(Polymer.dom(this).parentNode).insertBefore(this.root, this);
}, _removeChildren:function() {
  if (this._children) {
    for (var a = 0; a < this._children.length; a++) {
      this.root.appendChild(this._children[a]);
    }
  }
}, _initFeatures:function() {
}, _scopeElementClass:function(a, b) {
  return this.dataHost ? this.dataHost._scopeElementClass(a, b) : b;
}, _prepConfigure:function() {
  var a = {}, b;
  for (b in this._propertyEffects) {
    a[b] = this[b];
  }
  var c = this._setupConfigure;
  this._setupConfigure = function() {
    c.call(this, a);
  };
}, attached:function() {
  this._importsReady && this.render();
}, detached:function() {
  this._removeChildren();
}, render:function() {
  this._ensureReady();
  this._children || (this._template = this, this._prepAnnotations(), this._prepEffects(), this._prepBehaviors(), this._prepConfigure(), this._prepBindings(), this._prepPropertyInfo(), Polymer.Base._initFeatures.call(this), this._children = Polymer.TreeApi.arrayCopyChildNodes(this.root));
  this._insertChildren();
  this.fire("dom-change");
}});
(function() {
  function a(a, b) {
    var c = "";
    if (a) {
      if (a = a.toLowerCase(), " " === a || p.test(a)) {
        c = "space";
      } else {
        if (q.test(a)) {
          c = "esc";
        } else {
          if (1 == a.length) {
            if (!b || h.test(a)) {
              c = a;
            }
          } else {
            c = n.test(a) ? a.replace("arrow", "") : "multiply" == a ? "*" : a;
          }
        }
      }
    }
    return c;
  }
  function b(b, c) {
    var d = b.hasModifiers, g;
    if (!(g = a(c.key, d))) {
      g = c.keyIdentifier;
      var h = "";
      g && (g in e ? h = e[g] : l.test(g) ? (g = parseInt(g.replace("U+", "0x"), 16), h = String.fromCharCode(g).toLowerCase()) : h = g.toLowerCase());
      g = h;
    }
    g || (g = c.keyCode, h = "", Number(g) && (h = 65 <= g && 90 >= g ? String.fromCharCode(32 + g) : 112 <= g && 123 >= g ? "f" + (g - 112) : 48 <= g && 57 >= g ? String(g - 48) : 96 <= g && 105 >= g ? String(g - 96) : f[g]), g = h);
    return (g || a(c.detail.key, d) || "") === b.key && (!b.hasModifiers || !!c.shiftKey === !!b.shiftKey && !!c.ctrlKey === !!b.ctrlKey && !!c.altKey === !!b.altKey && !!c.metaKey === !!b.metaKey);
  }
  function c(a) {
    return 1 === a.length ? {combo:a, key:a, event:"keydown"} : a.split("+").reduce(function(a, b) {
      var c = b.split(":");
      b = c[0];
      c = c[1];
      b in g ? (a[g[b]] = !0, a.hasModifiers = !0) : (a.key = b, a.event = c || "keydown");
      return a;
    }, {combo:a.split(":").shift()});
  }
  function d(a) {
    return a.trim().split(" ").map(function(a) {
      return c(a);
    });
  }
  var e = {"U+0008":"backspace", "U+0009":"tab", "U+001B":"esc", "U+0020":"space", "U+007F":"del"}, f = {8:"backspace", 9:"tab", 13:"enter", 27:"esc", 33:"pageup", 34:"pagedown", 35:"end", 36:"home", 32:"space", 37:"left", 38:"up", 39:"right", 40:"down", 46:"del", 106:"*"}, g = {shift:"shiftKey", ctrl:"ctrlKey", alt:"altKey", meta:"metaKey"}, h = /[a-z0-9*]/, l = /U\+/, n = /^arrow/, p = /^space(bar)?/, q = /^escape$/;
  Polymer.IronA11yKeysBehavior = {properties:{keyEventTarget:{type:Object, value:function() {
    return this;
  }}, stopKeyboardEventPropagation:{type:Boolean, value:!1}, _boundKeyHandlers:{type:Array, value:function() {
    return [];
  }}, _imperativeKeyBindings:{type:Object, value:function() {
    return {};
  }}}, observers:["_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)"], keyBindings:{}, registered:function() {
    this._prepKeyBindings();
  }, attached:function() {
    this._listenKeyEventListeners();
  }, detached:function() {
    this._unlistenKeyEventListeners();
  }, addOwnKeyBinding:function(a, b) {
    this._imperativeKeyBindings[a] = b;
    this._prepKeyBindings();
    this._resetKeyEventListeners();
  }, removeOwnKeyBindings:function() {
    this._imperativeKeyBindings = {};
    this._prepKeyBindings();
    this._resetKeyEventListeners();
  }, keyboardEventMatchesKeys:function(a, c) {
    c = d(c);
    for (var e = 0; e < c.length; ++e) {
      if (b(c[e], a)) {
        return !0;
      }
    }
    return !1;
  }, _collectKeyBindings:function() {
    var a = this.behaviors.map(function(a) {
      return a.keyBindings;
    });
    -1 === a.indexOf(this.keyBindings) && a.push(this.keyBindings);
    return a;
  }, _prepKeyBindings:function() {
    this._keyBindings = {};
    this._collectKeyBindings().forEach(function(a) {
      for (var b in a) {
        this._addKeyBinding(b, a[b]);
      }
    }, this);
    for (var a in this._imperativeKeyBindings) {
      this._addKeyBinding(a, this._imperativeKeyBindings[a]);
    }
    for (var b in this._keyBindings) {
      this._keyBindings[b].sort(function(a, b) {
        a = a[0].hasModifiers;
        return a === b[0].hasModifiers ? 0 : a ? -1 : 1;
      });
    }
  }, _addKeyBinding:function(a, b) {
    d(a).forEach(function(a) {
      this._keyBindings[a.event] = this._keyBindings[a.event] || [];
      this._keyBindings[a.event].push([a, b]);
    }, this);
  }, _resetKeyEventListeners:function() {
    this._unlistenKeyEventListeners();
    this.isAttached && this._listenKeyEventListeners();
  }, _listenKeyEventListeners:function() {
    Object.keys(this._keyBindings).forEach(function(a) {
      var b = this._onKeyBindingEvent.bind(this, this._keyBindings[a]);
      this._boundKeyHandlers.push([this.keyEventTarget, a, b]);
      this.keyEventTarget.addEventListener(a, b);
    }, this);
  }, _unlistenKeyEventListeners:function() {
    for (var a, b, c; this._boundKeyHandlers.length;) {
      a = this._boundKeyHandlers.pop(), b = a[0], c = a[1], a = a[2], b.removeEventListener(c, a);
    }
  }, _onKeyBindingEvent:function(a, c) {
    this.stopKeyboardEventPropagation && c.stopPropagation();
    if (!c.defaultPrevented) {
      for (var d = 0; d < a.length; d++) {
        var e = a[d][0], f = a[d][1];
        if (b(e, c) && (this._triggerKeyHandler(e, f, c), c.defaultPrevented)) {
          break;
        }
      }
    }
  }, _triggerKeyHandler:function(a, b, c) {
    var d = Object.create(a);
    d.keyboardEvent = c;
    a = new CustomEvent(a.event, {detail:d, cancelable:!0});
    this[b].call(this, a);
    a.defaultPrevented && c.preventDefault();
  }};
})();
Polymer({is:"iron-a11y-keys", behaviors:[Polymer.IronA11yKeysBehavior], properties:{target:{type:Object, observer:"_targetChanged"}, keys:{type:String, reflectToAttribute:!0, observer:"_keysChanged"}}, attached:function() {
  this.target || (this.target = this.parentNode);
}, _targetChanged:function(a) {
  this.keyEventTarget = a;
}, _keysChanged:function() {
  this.removeOwnKeyBindings();
  this.addOwnKeyBinding(this.keys, "_fireKeysPressed");
}, _fireKeysPressed:function(a) {
  this.fire("keys-pressed", a.detail, {});
}});
function MakePromise(a) {
  function b(a) {
    if ("object" !== typeof this || "function" !== typeof a) {
      throw new TypeError;
    }
    this._value = this._state = null;
    this._deferreds = [];
    g(a, d.bind(this), e.bind(this));
  }
  function c(b) {
    var c = this;
    null === this._state ? this._deferreds.push(b) : a(function() {
      var a = c._state ? b.onFulfilled : b.onRejected;
      if ("function" !== typeof a) {
        (c._state ? b.resolve : b.reject)(c._value);
      } else {
        try {
          var d = a(c._value);
        } catch (q) {
          b.reject(q);
          return;
        }
        b.resolve(d);
      }
    });
  }
  function d(a) {
    try {
      if (a === this) {
        throw new TypeError;
      }
      if (a && ("object" === typeof a || "function" === typeof a)) {
        var b = a.then;
        if ("function" === typeof b) {
          g(b.bind(a), d.bind(this), e.bind(this));
          return;
        }
      }
      this._state = !0;
      this._value = a;
      f.call(this);
    } catch (n) {
      e.call(this, n);
    }
  }
  function e(a) {
    this._state = !1;
    this._value = a;
    f.call(this);
  }
  function f() {
    for (var a = 0, b = this._deferreds.length; a < b; a++) {
      c.call(this, this._deferreds[a]);
    }
    this._deferreds = null;
  }
  function g(a, b, c) {
    var d = !1;
    try {
      a(function(a) {
        d || (d = !0, b(a));
      }, function(a) {
        d || (d = !0, c(a));
      });
    } catch (q) {
      d || (d = !0, c(q));
    }
  }
  b.prototype["catch"] = function(a) {
    return this.then(null, a);
  };
  b.prototype.then = function(a, d) {
    var e = this;
    return new b(function(b, f) {
      c.call(e, {onFulfilled:a, onRejected:d, resolve:b, reject:f});
    });
  };
  b.resolve = function(a) {
    return a && "object" === typeof a && a.constructor === b ? a : new b(function(b) {
      b(a);
    });
  };
  b.reject = function(a) {
    return new b(function(b, c) {
      c(a);
    });
  };
  return b;
}
"undefined" !== typeof module && (module.exports = MakePromise);
window.Promise || (window.Promise = MakePromise(Polymer.Base.async));
"use strict";
Polymer({is:"iron-request", hostAttributes:{hidden:!0}, properties:{xhr:{type:Object, notify:!0, readOnly:!0, value:function() {
  return new XMLHttpRequest;
}}, response:{type:Object, notify:!0, readOnly:!0, value:function() {
  return null;
}}, status:{type:Number, notify:!0, readOnly:!0, value:0}, statusText:{type:String, notify:!0, readOnly:!0, value:""}, completes:{type:Object, readOnly:!0, notify:!0, value:function() {
  return new Promise(function(a, b) {
    this.resolveCompletes = a;
    this.rejectCompletes = b;
  }.bind(this));
}}, progress:{type:Object, notify:!0, readOnly:!0, value:function() {
  return {};
}}, aborted:{type:Boolean, notify:!0, readOnly:!0, value:!1}, errored:{type:Boolean, notify:!0, readOnly:!0, value:!1}, timedOut:{type:Boolean, notify:!0, readOnly:!0, value:!1}}, get succeeded() {
  if (this.errored || this.aborted || this.timedOut) {
    return !1;
  }
  var a = this.xhr.status || 0;
  return 0 === a || 200 <= a && 300 > a;
}, send:function(a) {
  var b = this.xhr;
  if (0 < b.readyState) {
    return null;
  }
  b.addEventListener("progress", function(a) {
    this._setProgress({lengthComputable:a.lengthComputable, loaded:a.loaded, total:a.total});
  }.bind(this));
  b.addEventListener("error", function(a) {
    this._setErrored(!0);
    this._updateStatus();
    this.rejectCompletes(a);
  }.bind(this));
  b.addEventListener("timeout", function(a) {
    this._setTimedOut(!0);
    this._updateStatus();
    this.rejectCompletes(a);
  }.bind(this));
  b.addEventListener("abort", function() {
    this._updateStatus();
    this.rejectCompletes(Error("Request aborted."));
  }.bind(this));
  b.addEventListener("loadend", function() {
    this._updateStatus();
    this.succeeded ? (this._setResponse(this.parseResponse()), this.resolveCompletes(this)) : this.rejectCompletes(Error("The request failed with status code: " + this.xhr.status));
  }.bind(this));
  this.url = a.url;
  b.open(a.method || "GET", a.url, !1 !== a.async);
  var c = {json:"application/json", text:"text/plain", html:"text/html", xml:"application/xml", arraybuffer:"application/octet-stream"}[a.handleAs], d = a.headers || Object.create(null), e = Object.create(null), f;
  for (f in d) {
    e[f.toLowerCase()] = d[f];
  }
  d = e;
  c && !d.accept && (d.accept = c);
  Object.keys(d).forEach(function(a) {
    /[A-Z]/.test(a) && console.error("Headers must be lower case, got", a);
    b.setRequestHeader(a, d[a]);
  }, this);
  if (!1 !== a.async) {
    c = a.handleAs;
    if (a.jsonPrefix || !c) {
      c = "text";
    }
    b.responseType = b._responseType = c;
    a.jsonPrefix && (b._jsonPrefix = a.jsonPrefix);
  }
  b.withCredentials = !!a.withCredentials;
  b.timeout = a.timeout;
  a = this._encodeBodyObject(a.body, d["content-type"]);
  b.send(a);
  return this.completes;
}, parseResponse:function() {
  var a = this.xhr, b = a.responseType || a._responseType, c = !this.xhr.responseType, d = a._jsonPrefix && a._jsonPrefix.length || 0;
  try {
    switch(b) {
      case "json":
        if (c || void 0 === a.response) {
          try {
            return JSON.parse(a.responseText);
          } catch (e) {
            return null;
          }
        }
        return a.response;
      case "xml":
        return a.responseXML;
      case "blob":
      case "document":
      case "arraybuffer":
        return a.response;
      default:
        if (d) {
          try {
            return JSON.parse(a.responseText.substring(d));
          } catch (e) {
            return null;
          }
        }
        return a.responseText;
    }
  } catch (e) {
    this.rejectCompletes(Error("Could not parse response. " + e.message));
  }
}, abort:function() {
  this._setAborted(!0);
  this.xhr.abort();
}, _encodeBodyObject:function(a, b) {
  if ("string" == typeof a) {
    return a;
  }
  switch(b) {
    case "application/json":
      return JSON.stringify(a);
    case "application/x-www-form-urlencoded":
      return this._wwwFormUrlEncode(a);
  }
  return a;
}, _wwwFormUrlEncode:function(a) {
  if (!a) {
    return "";
  }
  var b = [];
  Object.keys(a).forEach(function(c) {
    b.push(this._wwwFormUrlEncodePiece(c) + "=" + this._wwwFormUrlEncodePiece(a[c]));
  }, this);
  return b.join("&");
}, _wwwFormUrlEncodePiece:function(a) {
  return encodeURIComponent(a.toString().replace(/\r?\n/g, "\r\n")).replace(/%20/g, "+");
}, _updateStatus:function() {
  this._setStatus(this.xhr.status);
  this._setStatusText(void 0 === this.xhr.statusText ? "" : this.xhr.statusText);
}});
"use strict";
Polymer({is:"iron-ajax", hostAttributes:{hidden:!0}, properties:{url:{type:String}, params:{type:Object, value:function() {
  return {};
}}, method:{type:String, value:"GET"}, headers:{type:Object, value:function() {
  return {};
}}, contentType:{type:String, value:null}, body:{type:Object, value:null}, sync:{type:Boolean, value:!1}, handleAs:{type:String, value:"json"}, withCredentials:{type:Boolean, value:!1}, timeout:{type:Number, value:0}, auto:{type:Boolean, value:!1}, verbose:{type:Boolean, value:!1}, lastRequest:{type:Object, notify:!0, readOnly:!0}, loading:{type:Boolean, notify:!0, readOnly:!0}, lastResponse:{type:Object, notify:!0, readOnly:!0}, lastError:{type:Object, notify:!0, readOnly:!0}, activeRequests:{type:Array, 
notify:!0, readOnly:!0, value:function() {
  return [];
}}, debounceDuration:{type:Number, value:0, notify:!0}, jsonPrefix:{type:String, value:""}, bubbles:{type:Boolean, value:!1}, _boundHandleResponse:{type:Function, value:function() {
  return this._handleResponse.bind(this);
}}}, observers:["_requestOptionsChanged(url, method, params.*, headers, contentType, body, sync, handleAs, jsonPrefix, withCredentials, timeout, auto)"], get queryString() {
  var a = [];
  for (c in this.params) {
    var b = this.params[c];
    var c = window.encodeURIComponent(c);
    if (Array.isArray(b)) {
      for (var d = 0; d < b.length; d++) {
        a.push(c + "=" + window.encodeURIComponent(b[d]));
      }
    } else {
      null !== b ? a.push(c + "=" + window.encodeURIComponent(b)) : a.push(c);
    }
  }
  return a.join("&");
}, get requestUrl() {
  var a = this.queryString;
  if (a) {
    var b = 0 <= this.url.indexOf("?") ? "&" : "?";
    return this.url + b + a;
  }
  return this.url;
}, get requestHeaders() {
  var a = {}, b = this.contentType;
  null == b && "string" === typeof this.body && (b = "application/x-www-form-urlencoded");
  b && (a["content-type"] = b);
  var c;
  if (this.headers instanceof Object) {
    for (c in this.headers) {
      a[c] = this.headers[c].toString();
    }
  }
  return a;
}, toRequestOptions:function() {
  return {url:this.requestUrl || "", method:this.method, headers:this.requestHeaders, body:this.body, async:!this.sync, handleAs:this.handleAs, jsonPrefix:this.jsonPrefix, withCredentials:this.withCredentials, timeout:this.timeout};
}, generateRequest:function() {
  var a = document.createElement("iron-request"), b = this.toRequestOptions();
  this.activeRequests.push(a);
  a.completes.then(this._boundHandleResponse).catch(this._handleError.bind(this, a)).then(this._discardRequest.bind(this, a));
  a.send(b);
  this._setLastRequest(a);
  this._setLoading(!0);
  this.fire("request", {request:a, options:b}, {bubbles:this.bubbles});
  return a;
}, _handleResponse:function(a) {
  a === this.lastRequest && (this._setLastResponse(a.response), this._setLastError(null), this._setLoading(!1));
  this.fire("response", a, {bubbles:this.bubbles});
}, _handleError:function(a, b) {
  this.verbose && console.error(b);
  a === this.lastRequest && (this._setLastError({request:a, error:b}), this._setLastResponse(null), this._setLoading(!1));
  this.fire("error", {request:a, error:b}, {bubbles:this.bubbles});
}, _discardRequest:function(a) {
  a = this.activeRequests.indexOf(a);
  -1 < a && this.activeRequests.splice(a, 1);
}, _requestOptionsChanged:function() {
  this.debounce("generate-request", function() {
    null != this.url && this.auto && this.generateRequest();
  }, this.debounceDuration);
}});
Polymer.IronControlState = {properties:{focused:{type:Boolean, value:!1, notify:!0, readOnly:!0, reflectToAttribute:!0}, disabled:{type:Boolean, value:!1, notify:!0, observer:"_disabledChanged", reflectToAttribute:!0}, _oldTabIndex:{type:Number}, _boundFocusBlurHandler:{type:Function, value:function() {
  return this._focusBlurHandler.bind(this);
}}}, observers:["_changedControlState(focused, disabled)"], ready:function() {
  this.addEventListener("focus", this._boundFocusBlurHandler, !0);
  this.addEventListener("blur", this._boundFocusBlurHandler, !0);
}, _focusBlurHandler:function(a) {
  if (a.target === this) {
    this._setFocused("focus" === a.type);
  } else {
    if (!this.shadowRoot) {
      var b = Polymer.dom(a).localTarget;
      this.isLightDescendant(b) || this.fire(a.type, {sourceEvent:a}, {node:this, bubbles:a.bubbles, cancelable:a.cancelable});
    }
  }
}, _disabledChanged:function(a, b) {
  this.setAttribute("aria-disabled", a ? "true" : "false");
  this.style.pointerEvents = a ? "none" : "";
  a ? (this._oldTabIndex = this.tabIndex, this._setFocused(!1), this.tabIndex = -1, this.blur()) : void 0 !== this._oldTabIndex && (this.tabIndex = this._oldTabIndex);
}, _changedControlState:function() {
  this._controlStateChanged && this._controlStateChanged();
}};
(function() {
  var a = {}, b = {}, c = null;
  Polymer.IronMeta = Polymer({is:"iron-meta", properties:{type:{type:String, value:"default", observer:"_typeChanged"}, key:{type:String, observer:"_keyChanged"}, value:{type:Object, notify:!0, observer:"_valueChanged"}, self:{type:Boolean, observer:"_selfChanged"}, list:{type:Array, notify:!0}}, hostAttributes:{hidden:!0}, factoryImpl:function(a) {
    if (a) {
      for (var b in a) {
        switch(b) {
          case "type":
          case "key":
          case "value":
            this[b] = a[b];
        }
      }
    }
  }, created:function() {
    this._metaDatas = a;
    this._metaArrays = b;
  }, _keyChanged:function(a, b) {
    this._resetRegistration(b);
  }, _valueChanged:function(a) {
    this._resetRegistration(this.key);
  }, _selfChanged:function(a) {
    a && (this.value = this);
  }, _typeChanged:function(c) {
    this._unregisterKey(this.key);
    a[c] || (a[c] = {});
    this._metaData = a[c];
    b[c] || (b[c] = []);
    this.list = b[c];
    this._registerKeyValue(this.key, this.value);
  }, byKey:function(a) {
    return this._metaData && this._metaData[a];
  }, _resetRegistration:function(a) {
    this._unregisterKey(a);
    this._registerKeyValue(this.key, this.value);
  }, _unregisterKey:function(a) {
    this._unregister(a, this._metaData, this.list);
  }, _registerKeyValue:function(a, b) {
    this._register(a, b, this._metaData, this.list);
  }, _register:function(a, b, c, g) {
    a && c && void 0 !== b && (c[a] = b, g.push(b));
  }, _unregister:function(a, b, c) {
    if (a && b && a in b) {
      var d = b[a];
      delete b[a];
      this.arrayDelete(c, d);
    }
  }});
  Polymer.IronMeta.getIronMeta = function() {
    null === c && (c = new Polymer.IronMeta);
    return c;
  };
  Polymer.IronMetaQuery = Polymer({is:"iron-meta-query", properties:{type:{type:String, value:"default", observer:"_typeChanged"}, key:{type:String, observer:"_keyChanged"}, value:{type:Object, notify:!0, readOnly:!0}, list:{type:Array, notify:!0}}, factoryImpl:function(a) {
    if (a) {
      for (var b in a) {
        switch(b) {
          case "type":
          case "key":
            this[b] = a[b];
        }
      }
    }
  }, created:function() {
    this._metaDatas = a;
    this._metaArrays = b;
  }, _keyChanged:function(a) {
    this._setValue(this._metaData && this._metaData[a]);
  }, _typeChanged:function(c) {
    this._metaData = a[c];
    this.list = b[c];
    this.key && this._keyChanged(this.key);
  }, byKey:function(a) {
    return this._metaData && this._metaData[a];
  }});
})();
Polymer.IronValidatableBehaviorMeta = null;
Polymer.IronValidatableBehavior = {properties:{validator:{type:String}, invalid:{notify:!0, reflectToAttribute:!0, type:Boolean, value:!1}, _validatorMeta:{type:Object}, validatorType:{type:String, value:"validator"}, _validator:{type:Object, computed:"__computeValidator(validator)"}}, observers:["_invalidChanged(invalid)"], registered:function() {
  Polymer.IronValidatableBehaviorMeta = new Polymer.IronMeta({type:"validator"});
}, _invalidChanged:function() {
  this.invalid ? this.setAttribute("aria-invalid", "true") : this.removeAttribute("aria-invalid");
}, hasValidator:function() {
  return null != this._validator;
}, validate:function(a) {
  this.invalid = !this._getValidity(a);
  return !this.invalid;
}, _getValidity:function(a) {
  return this.hasValidator() ? this._validator.validate(a) : !0;
}, __computeValidator:function() {
  return Polymer.IronValidatableBehaviorMeta && Polymer.IronValidatableBehaviorMeta.byKey(this.validator);
}};
Polymer.IronFormElementBehavior = {properties:{name:{type:String}, value:{notify:!0, type:String}, required:{type:Boolean, value:!1}, _parentForm:{type:Object}}, attached:function() {
  this.fire("iron-form-element-register");
}, detached:function() {
  this._parentForm && this._parentForm.fire("iron-form-element-unregister", {target:this});
}};
Polymer({is:"iron-autogrow-textarea", behaviors:[Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior, Polymer.IronControlState], properties:{bindValue:{observer:"_bindValueChanged", type:String}, rows:{type:Number, value:1, observer:"_updateCached"}, maxRows:{type:Number, value:0, observer:"_updateCached"}, autocomplete:{type:String, value:"off"}, autofocus:{type:Boolean, value:!1}, inputmode:{type:String}, placeholder:{type:String}, readonly:{type:String}, required:{type:Boolean}, maxlength:{type:Number}}, 
listeners:{input:"_onInput"}, observers:["_onValueChanged(value)"], get textarea() {
  return this.$.textarea;
}, get selectionStart() {
  return this.$.textarea.selectionStart;
}, get selectionEnd() {
  return this.$.textarea.selectionEnd;
}, set selectionStart(a) {
  this.$.textarea.selectionStart = a;
}, set selectionEnd(a) {
  this.$.textarea.selectionEnd = a;
}, validate:function() {
  if (!this.required && "" == this.value) {
    return this.invalid = !1, !0;
  }
  if (this.hasValidator()) {
    var a = Polymer.IronValidatableBehavior.validate.call(this, this.value);
  } else {
    a = this.$.textarea.validity.valid, this.invalid = !a;
  }
  this.fire("iron-input-validate");
  return a;
}, _bindValueChanged:function() {
  var a = this.textarea;
  a && (a.value !== this.bindValue && (a.value = this.bindValue || 0 === this.bindValue ? this.bindValue : ""), this.value = this.bindValue, this.$.mirror.innerHTML = this._valueForMirror(), this.fire("bind-value-changed", {value:this.bindValue}));
}, _onInput:function(a) {
  this.bindValue = a.path ? a.path[0].value : a.target.value;
}, _constrain:function(a) {
  a = a || [""];
  for (a = 0 < this.maxRows && a.length > this.maxRows ? a.slice(0, this.maxRows) : a.slice(0); 0 < this.rows && a.length < this.rows;) {
    a.push("");
  }
  return a.join("<br/>") + "&#160;";
}, _valueForMirror:function() {
  var a = this.textarea;
  if (a) {
    return this.tokens = a && a.value ? a.value.replace(/&/gm, "&amp;").replace(/"/gm, "&quot;").replace(/'/gm, "&#39;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").split("\n") : [""], this._constrain(this.tokens);
  }
}, _updateCached:function() {
  this.$.mirror.innerHTML = this._constrain(this.tokens);
}, _onValueChanged:function() {
  this.bindValue = this.value;
}});
Polymer.IronButtonStateImpl = {properties:{pressed:{type:Boolean, readOnly:!0, value:!1, reflectToAttribute:!0, observer:"_pressedChanged"}, toggles:{type:Boolean, value:!1, reflectToAttribute:!0}, active:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, pointerDown:{type:Boolean, readOnly:!0, value:!1}, receivedFocusFromKeyboard:{type:Boolean, readOnly:!0}, ariaActiveAttribute:{type:String, value:"aria-pressed", observer:"_ariaActiveAttributeChanged"}}, listeners:{down:"_downHandler", 
up:"_upHandler", tap:"_tapHandler"}, observers:["_detectKeyboardFocus(focused)", "_activeChanged(active, ariaActiveAttribute)"], keyBindings:{"enter:keydown":"_asyncClick", "space:keydown":"_spaceKeyDownHandler", "space:keyup":"_spaceKeyUpHandler"}, _mouseEventRe:/^mouse/, _tapHandler:function() {
  this.toggles ? this._userActivate(!this.active) : this.active = !1;
}, _detectKeyboardFocus:function(a) {
  this._setReceivedFocusFromKeyboard(!this.pointerDown && a);
}, _userActivate:function(a) {
  this.active !== a && (this.active = a, this.fire("change"));
}, _downHandler:function(a) {
  this._setPointerDown(!0);
  this._setPressed(!0);
  this._setReceivedFocusFromKeyboard(!1);
}, _upHandler:function() {
  this._setPointerDown(!1);
  this._setPressed(!1);
}, _spaceKeyDownHandler:function(a) {
  a = a.detail.keyboardEvent;
  var b = Polymer.dom(a).localTarget;
  this.isLightDescendant(b) || (a.preventDefault(), a.stopImmediatePropagation(), this._setPressed(!0));
}, _spaceKeyUpHandler:function(a) {
  a = Polymer.dom(a.detail.keyboardEvent).localTarget;
  this.isLightDescendant(a) || (this.pressed && this._asyncClick(), this._setPressed(!1));
}, _asyncClick:function() {
  this.async(function() {
    this.click();
  }, 1);
}, _pressedChanged:function(a) {
  this._changedButtonState();
}, _ariaActiveAttributeChanged:function(a, b) {
  b && b != a && this.hasAttribute(b) && this.removeAttribute(b);
}, _activeChanged:function(a, b) {
  this.toggles ? this.setAttribute(this.ariaActiveAttribute, a ? "true" : "false") : this.removeAttribute(this.ariaActiveAttribute);
  this._changedButtonState();
}, _controlStateChanged:function() {
  this.disabled ? this._setPressed(!1) : this._changedButtonState();
}, _changedButtonState:function() {
  this._buttonStateChanged && this._buttonStateChanged();
}};
Polymer.IronButtonState = [Polymer.IronA11yKeysBehavior, Polymer.IronButtonStateImpl];
Polymer.IronResizableBehavior = {properties:{_parentResizable:{type:Object, observer:"_parentResizableChanged"}, _notifyingDescendant:{type:Boolean, value:!1}}, listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"}, created:function() {
  this._interestedResizables = [];
  this._boundNotifyResize = this.notifyResize.bind(this);
}, attached:function() {
  this.fire("iron-request-resize-notifications", null, {node:this, bubbles:!0, cancelable:!0});
  this._parentResizable || (window.addEventListener("resize", this._boundNotifyResize), this.notifyResize());
}, detached:function() {
  this._parentResizable ? this._parentResizable.stopResizeNotificationsFor(this) : window.removeEventListener("resize", this._boundNotifyResize);
  this._parentResizable = null;
}, notifyResize:function() {
  this.isAttached && (this._interestedResizables.forEach(function(a) {
    this.resizerShouldNotify(a) && this._notifyDescendant(a);
  }, this), this._fireResize());
}, assignParentResizable:function(a) {
  this._parentResizable = a;
}, stopResizeNotificationsFor:function(a) {
  var b = this._interestedResizables.indexOf(a);
  -1 < b && (this._interestedResizables.splice(b, 1), this.unlisten(a, "iron-resize", "_onDescendantIronResize"));
}, resizerShouldNotify:function(a) {
  return !0;
}, _onDescendantIronResize:function(a) {
  this._notifyingDescendant ? a.stopPropagation() : Polymer.Settings.useShadow || this._fireResize();
}, _fireResize:function() {
  this.fire("iron-resize", null, {node:this, bubbles:!1});
}, _onIronRequestResizeNotifications:function(a) {
  var b = a.path ? a.path[0] : a.target;
  b !== this && (-1 === this._interestedResizables.indexOf(b) && (this._interestedResizables.push(b), this.listen(b, "iron-resize", "_onDescendantIronResize")), b.assignParentResizable(this), this._notifyDescendant(b), a.stopPropagation());
}, _parentResizableChanged:function(a) {
  a && window.removeEventListener("resize", this._boundNotifyResize);
}, _notifyDescendant:function(a) {
  this.isAttached && (this._notifyingDescendant = !0, a.notifyResize(), this._notifyingDescendant = !1);
}};
Polymer({is:"iron-collapse", behaviors:[Polymer.IronResizableBehavior], properties:{horizontal:{type:Boolean, value:!1, observer:"_horizontalChanged"}, opened:{type:Boolean, value:!1, notify:!0, observer:"_openedChanged"}, noAnimation:{type:Boolean}}, get dimension() {
  return this.horizontal ? "width" : "height";
}, hostAttributes:{role:"group", "aria-hidden":"true", "aria-expanded":"false"}, listeners:{transitionend:"_transitionEnd"}, attached:function() {
  this._transitionEnd();
}, toggle:function() {
  this.opened = !this.opened;
}, show:function() {
  this.opened = !0;
}, hide:function() {
  this.opened = !1;
}, updateSize:function(a, b) {
  this.style[this.dimension] !== a && (this._updateTransition(!1), b && !this.noAnimation && this._isDisplayed && (b = this._calcSize(), "auto" === a && (this.style[this.dimension] = a, a = this._calcSize()), this.style[this.dimension] = b, this.offsetHeight = this.offsetHeight, this._updateTransition(!0)), this.style[this.dimension] = a);
}, enableTransition:function(a) {
  console.warn("`enableTransition()` is deprecated, use `noAnimation` instead.");
  this.noAnimation = !a;
}, _updateTransition:function(a) {
  this.style.transitionDuration = a && !this.noAnimation ? "" : "0s";
}, _horizontalChanged:function() {
  this.style.transitionProperty = this.dimension;
  this.style["width" === this.dimension ? "height" : "width"] = "";
  this.updateSize(this.opened ? "auto" : "0px", !1);
}, _openedChanged:function() {
  this.setAttribute("aria-expanded", this.opened);
  this.setAttribute("aria-hidden", !this.opened);
  this.toggleClass("iron-collapse-closed", !1);
  this.toggleClass("iron-collapse-opened", !1);
  this.updateSize(this.opened ? "auto" : "0px", !0);
  this.opened && this.focus();
  this.noAnimation && this._transitionEnd();
}, _transitionEnd:function() {
  this.opened && (this.style[this.dimension] = "auto");
  this.toggleClass("iron-collapse-closed", !this.opened);
  this.toggleClass("iron-collapse-opened", this.opened);
  this._updateTransition(!1);
  this.notifyResize();
}, get _isDisplayed() {
  var a = this.getBoundingClientRect(), b;
  for (b in a) {
    if (0 !== a[b]) {
      return !0;
    }
  }
  return !1;
}, _calcSize:function() {
  return this.getBoundingClientRect()[this.dimension] + "px";
}});
Polymer({is:"iron-icon", properties:{icon:{type:String, observer:"_iconChanged"}, theme:{type:String, observer:"_updateIcon"}, src:{type:String, observer:"_srcChanged"}, _meta:{value:Polymer.Base.create("iron-meta", {type:"iconset"}), observer:"_updateIcon"}}, _DEFAULT_ICONSET:"icons", _iconChanged:function(a) {
  a = (a || "").split(":");
  this._iconName = a.pop();
  this._iconsetName = a.pop() || this._DEFAULT_ICONSET;
  this._updateIcon();
}, _srcChanged:function(a) {
  this._updateIcon();
}, _usesIconset:function() {
  return this.icon || !this.src;
}, _updateIcon:function() {
  this._usesIconset() ? (this._img && this._img.parentNode && Polymer.dom(this.root).removeChild(this._img), "" === this._iconName ? this._iconset && this._iconset.removeIcon(this) : this._iconsetName && this._meta && ((this._iconset = this._meta.byKey(this._iconsetName)) ? (this._iconset.applyIcon(this, this._iconName, this.theme), this.unlisten(window, "iron-iconset-added", "_updateIcon")) : this.listen(window, "iron-iconset-added", "_updateIcon"))) : (this._iconset && this._iconset.removeIcon(this), 
  this._img || (this._img = document.createElement("img"), this._img.style.width = "100%", this._img.style.height = "100%", this._img.draggable = !1), this._img.src = this.src, Polymer.dom(this.root).appendChild(this._img));
}});
Polymer({is:"iron-iconset-svg", properties:{name:{type:String, observer:"_nameChanged"}, size:{type:Number, value:24}}, attached:function() {
  this.style.display = "none";
}, getIconNames:function() {
  this._icons = this._createIconMap();
  return Object.keys(this._icons).map(function(a) {
    return this.name + ":" + a;
  }, this);
}, applyIcon:function(a, b) {
  a = a.root || a;
  this.removeIcon(a);
  if (b = this._cloneIcon(b)) {
    var c = Polymer.dom(a);
    c.insertBefore(b, c.childNodes[0]);
    return a._svgIcon = b;
  }
  return null;
}, removeIcon:function(a) {
  a._svgIcon && (Polymer.dom(a).removeChild(a._svgIcon), a._svgIcon = null);
}, _nameChanged:function() {
  new Polymer.IronMeta({type:"iconset", key:this.name, value:this});
  this.async(function() {
    this.fire("iron-iconset-added", this, {node:window});
  });
}, _createIconMap:function() {
  var a = Object.create(null);
  Polymer.dom(this).querySelectorAll("[id]").forEach(function(b) {
    a[b.id] = b;
  });
  return a;
}, _cloneIcon:function(a) {
  this._icons = this._icons || this._createIconMap();
  return this._prepareSvgClone(this._icons[a], this.size);
}, _prepareSvgClone:function(a, b) {
  if (a) {
    a = a.cloneNode(!0);
    var c = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    b = a.getAttribute("viewBox") || "0 0 " + b + " " + b;
    c.setAttribute("viewBox", b);
    c.setAttribute("preserveAspectRatio", "xMidYMid meet");
    c.style.cssText = "pointer-events: none; display: block; width: 100%; height: 100%;";
    c.appendChild(a).removeAttribute("id");
    return c;
  }
  return null;
}});
Polymer({is:"iron-iconset", properties:{src:{type:String, observer:"_srcChanged"}, name:{type:String, observer:"_nameChanged"}, width:{type:Number, value:0}, icons:{type:String}, size:{type:Number, value:24}, _offsetX:{type:Number, value:0}, _offsetY:{type:Number, value:0}, iconNames:{type:Array, notify:!0}}, hostAttributes:{style:"display: none;"}, ready:function() {
  this._themes = this._mapThemes();
}, applyIcon:function(a, b, c, d) {
  this._validateIconMap();
  b = this._getThemedOffset(b, c);
  a && b && this._addIconStyles(a, this._srcUrl, b, d || 1, this.size, this.width);
}, removeIcon:function(a) {
  this._removeIconStyles(a.style);
}, _mapThemes:function() {
  var a = Object.create(null);
  Polymer.dom(this).querySelectorAll("property[theme]").forEach(function(b) {
    var c = window.parseInt(b.getAttribute("offset-x"), 10) || 0, d = window.parseInt(b.getAttribute("offset-y"), 10) || 0;
    a[b.getAttribute("theme")] = {offsetX:c, offsetY:d};
  });
  return a;
}, _srcChanged:function(a) {
  this._srcUrl = this.ownerDocument !== document ? this.resolveUrl(a) : a;
  this._prepareIconset();
}, _nameChanged:function(a) {
  this._prepareIconset();
}, _prepareIconset:function() {
  new Polymer.IronMeta({type:"iconset", key:this.name, value:this});
  this.async(function() {
    this.fire("iron-iconset-added", this, {node:window});
  });
}, _invalidateIconMap:function() {
  this._iconMapValid = !1;
}, _validateIconMap:function() {
  this._iconMapValid || (this._recomputeIconMap(), this._iconMapValid = !0);
}, _recomputeIconMap:function() {
  this.iconNames = this._computeIconNames(this.icons);
  this.iconMap = this._computeIconMap(this._offsetX, this._offsetY, this.size, this.width, this.iconNames);
}, _computeIconNames:function(a) {
  return a.split(/\s+/g);
}, _computeIconMap:function(a, b, c, d, e) {
  var f = {};
  if (void 0 !== a && void 0 !== b) {
    var g = a;
    e.forEach(function(e) {
      f[e] = {offsetX:a, offsetY:b};
      a + c < d ? a += c : (a = g, b += c);
    }, this);
  }
  return f;
}, _getThemedOffset:function(a, b) {
  a = this._getIconOffset(a);
  b = this._themes[b];
  return a && b ? {offsetX:a.offsetX + b.offsetX, offsetY:a.offsetY + b.offsetY} : a;
}, _getIconOffset:function(a) {
  return this.iconMap[a] || this.iconMap[this.iconNames[Number(a)]];
}, _addIconStyles:function(a, b, c, d, e, f) {
  var g = a.style;
  g.backgroundImage = "url(" + b + ")";
  g.backgroundPosition = -c.offsetX * d + "px " + (-c.offsetY * d + "px");
  g.backgroundSize = 1 === d ? "auto" : f * d + "px";
  g.width = e + "px";
  g.height = e + "px";
  a.setAttribute("role", "img");
}, _removeIconStyles:function(a) {
  a.background = "";
}});
Polymer({is:"iron-image", properties:{src:{observer:"_srcChanged", type:String, value:""}, alt:{type:String, value:null}, preventLoad:{type:Boolean, value:!1, observer:"_preventLoadChanged"}, sizing:{type:String, value:null, reflectToAttribute:!0}, position:{type:String, value:"center"}, preload:{type:Boolean, value:!1}, placeholder:{type:String, value:null, observer:"_placeholderChanged"}, fade:{type:Boolean, value:!1}, loaded:{notify:!0, readOnly:!0, type:Boolean, value:!1}, loading:{notify:!0, 
readOnly:!0, type:Boolean, value:!1}, error:{notify:!0, readOnly:!0, type:Boolean, value:!1}, width:{observer:"_widthChanged", type:Number, value:null}, height:{observer:"_heightChanged", type:Number, value:null}}, observers:["_transformChanged(sizing, position)"], ready:function() {
  var a = this.$.img;
  a.onload = function() {
    this.$.img.src === this._resolveSrc(this.src) && (this._setLoading(!1), this._setLoaded(!0), this._setError(!1));
  }.bind(this);
  a.onerror = function() {
    this.$.img.src === this._resolveSrc(this.src) && (this._reset(), this._setLoading(!1), this._setLoaded(!1), this._setError(!0));
  }.bind(this);
  this._resolvedSrc = "";
}, _load:function(a) {
  a ? this.$.img.src = a : this.$.img.removeAttribute("src");
  this.$.sizedImgDiv.style.backgroundImage = a ? 'url("' + a + '")' : "";
  this._setLoading(!!a);
  this._setLoaded(!1);
  this._setError(!1);
}, _reset:function() {
  this.$.img.removeAttribute("src");
  this.$.sizedImgDiv.style.backgroundImage = "";
  this._setLoading(!1);
  this._setLoaded(!1);
  this._setError(!1);
}, _computePlaceholderHidden:function() {
  return !this.preload || !this.fade && !this.loading && this.loaded;
}, _computePlaceholderClassName:function() {
  return this.preload && this.fade && !this.loading && this.loaded ? "faded-out" : "";
}, _computeImgDivHidden:function() {
  return !this.sizing;
}, _computeImgDivARIAHidden:function() {
  return "" === this.alt ? "true" : void 0;
}, _computeImgDivARIALabel:function() {
  if (null !== this.alt) {
    return this.alt;
  }
  if ("" === this.src) {
    return "";
  }
  var a = (new URL(this._resolveSrc(this.src))).pathname.split("/");
  return a[a.length - 1];
}, _computeImgHidden:function() {
  return !!this.sizing;
}, _widthChanged:function() {
  this.style.width = isNaN(this.width) ? this.width : this.width + "px";
}, _heightChanged:function() {
  this.style.height = isNaN(this.height) ? this.height : this.height + "px";
}, _preventLoadChanged:function() {
  this.preventLoad || this.loaded || (this._reset(), this._load(this.src));
}, _srcChanged:function(a, b) {
  b = this._resolveSrc(a);
  b !== this._resolvedSrc && (this._resolvedSrc = b, this._reset(), this.preventLoad || this._load(a));
}, _placeholderChanged:function() {
  this.$.placeholder.style.backgroundImage = this.placeholder ? 'url("' + this.placeholder + '")' : "";
}, _transformChanged:function() {
  var a = this.$.sizedImgDiv.style, b = this.$.placeholder.style;
  a.backgroundSize = b.backgroundSize = this.sizing;
  a.backgroundPosition = b.backgroundPosition = this.sizing ? this.position : "";
  a.backgroundRepeat = b.backgroundRepeat = this.sizing ? "no-repeat" : "";
}, _resolveSrc:function(a) {
  return Polymer.ResolveUrl.resolveUrl(a, this.ownerDocument.baseURI);
}});
(function() {
  function a(a) {
    this.tokens = [];
    this.tokens.links = {};
    this.options = a || n.defaults;
    this.rules = p.normal;
    this.options.gfm && (this.rules = this.options.tables ? p.tables : p.gfm);
  }
  function b(a, b) {
    this.options = b || n.defaults;
    this.links = a;
    this.rules = q.normal;
    this.renderer = this.options.renderer || new c;
    this.renderer.options = this.options;
    if (!this.links) {
      throw Error("Tokens array requires a `links` property.");
    }
    this.options.gfm ? this.rules = this.options.breaks ? q.breaks : q.gfm : this.options.pedantic && (this.rules = q.pedantic);
  }
  function c(a) {
    this.options = a || {};
  }
  function d(a) {
    this.tokens = [];
    this.token = null;
    this.options = a || n.defaults;
    this.options.renderer = this.options.renderer || new c;
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
  }
  function e(a, b) {
    return a.replace(b ? /&/g : /&(?!#?\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  function f(a) {
    return a.replace(/&([#\w]+);/g, function(a, b) {
      b = b.toLowerCase();
      return "colon" === b ? ":" : "#" === b.charAt(0) ? "x" === b.charAt(1) ? String.fromCharCode(parseInt(b.substring(2), 16)) : String.fromCharCode(+b.substring(1)) : "";
    });
  }
  function g(a, b) {
    a = a.source;
    b = b || "";
    return function v(c, d) {
      if (!c) {
        return new RegExp(a, b);
      }
      d = d.source || d;
      d = d.replace(/(^|[^\[])\^/g, "$1");
      a = a.replace(c, d);
      return v;
    };
  }
  function h() {
  }
  function l(a) {
    for (var b = 1, c, d; b < arguments.length; b++) {
      for (d in c = arguments[b], c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }
  function n(b, c, f) {
    if (f || "function" === typeof c) {
      f || (f = c, c = null);
      c = l({}, n.defaults, c || {});
      var g = c.highlight, h = 0;
      try {
        var m = a.lex(b, c);
      } catch (z) {
        return f(z);
      }
      var r = m.length;
      var p = function(a) {
        if (a) {
          return c.highlight = g, f(a);
        }
        try {
          var b = d.parse(m, c);
        } catch (F) {
          a = F;
        }
        c.highlight = g;
        return a ? f(a) : f(null, b);
      };
      if (!g || 3 > g.length) {
        return p();
      }
      delete c.highlight;
      if (!r) {
        return p();
      }
      for (; h < m.length; h++) {
        (function(a) {
          return "code" !== a.type ? --r || p() : g(a.text, a.lang, function(b, c) {
            if (b) {
              return p(b);
            }
            if (null == c || c === a.text) {
              return --r || p();
            }
            a.text = c;
            a.escaped = !0;
            --r || p();
          });
        })(m[h]);
      }
    } else {
      try {
        return c && (c = l({}, n.defaults, c)), d.parse(a.lex(b, c), c);
      } catch (z) {
        z.message += "\nPlease report this to https://github.com/chjj/marked.";
        if ((c || n.defaults).silent) {
          return "<p>An error occured:</p><pre>" + e(z.message + "", !0) + "</pre>";
        }
        throw z;
      }
    }
  }
  var p = {newline:/^\n+/, code:/^( {4}[^\n]+\n*)+/, fences:h, hr:/^( *[-*_]){3,} *(?:\n+|$)/, heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/, nptable:h, lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/, blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/, list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/, html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/, def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/, table:h, paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/, 
  text:/^[^\n]+/, bullet:/(?:[*+-]|\d+\.)/, item:/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/};
  p.item = g(p.item, "gm")(/bull/g, p.bullet)();
  p.list = g(p.list)(/bull/g, p.bullet)("hr", "\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def", "\\n+(?=" + p.def.source + ")")();
  p.blockquote = g(p.blockquote)("def", p.def)();
  p._tag = "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";
  p.html = g(p.html)("comment", /\x3c!--[\s\S]*?--\x3e/)("closed", /<(tag)[\s\S]+?<\/\1>/)("closing", /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g, p._tag)();
  p.paragraph = g(p.paragraph)("hr", p.hr)("heading", p.heading)("lheading", p.lheading)("blockquote", p.blockquote)("tag", "<" + p._tag)("def", p.def)();
  p.normal = l({}, p);
  p.gfm = l({}, p.normal, {fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/, paragraph:/^/, heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});
  p.gfm.paragraph = g(p.paragraph)("(?!", "(?!" + p.gfm.fences.source.replace("\\1", "\\2") + "|" + p.list.source.replace("\\1", "\\3") + "|")();
  p.tables = l({}, p.gfm, {nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/, table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});
  a.rules = p;
  a.lex = function(b, c) {
    return (new a(c)).lex(b);
  };
  a.prototype.lex = function(a) {
    a = a.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ").replace(/\u00a0/g, " ").replace(/\u2424/g, "\n");
    return this.token(a, !0);
  };
  a.prototype.token = function(a, b, c) {
    a = a.replace(/^ +$/gm, "");
    for (var d, e, f, g, h, m, l; a;) {
      if (f = this.rules.newline.exec(a)) {
        a = a.substring(f[0].length), 1 < f[0].length && this.tokens.push({type:"space"});
      }
      if (f = this.rules.code.exec(a)) {
        a = a.substring(f[0].length), f = f[0].replace(/^ {4}/gm, ""), this.tokens.push({type:"code", text:this.options.pedantic ? f : f.replace(/\n+$/, "")});
      } else {
        if (f = this.rules.fences.exec(a)) {
          a = a.substring(f[0].length), this.tokens.push({type:"code", lang:f[2], text:f[3] || ""});
        } else {
          if (f = this.rules.heading.exec(a)) {
            a = a.substring(f[0].length), this.tokens.push({type:"heading", depth:f[1].length, text:f[2]});
          } else {
            if (b && (f = this.rules.nptable.exec(a))) {
              a = a.substring(f[0].length);
              h = {type:"table", header:f[1].replace(/^ *| *\| *$/g, "").split(/ *\| */), align:f[2].replace(/^ *|\| *$/g, "").split(/ *\| */), cells:f[3].replace(/\n$/, "").split("\n")};
              for (m = 0; m < h.align.length; m++) {
                /^ *-+: *$/.test(h.align[m]) ? h.align[m] = "right" : /^ *:-+: *$/.test(h.align[m]) ? h.align[m] = "center" : /^ *:-+ *$/.test(h.align[m]) ? h.align[m] = "left" : h.align[m] = null;
              }
              for (m = 0; m < h.cells.length; m++) {
                h.cells[m] = h.cells[m].split(/ *\| */);
              }
              this.tokens.push(h);
            } else {
              if (f = this.rules.lheading.exec(a)) {
                a = a.substring(f[0].length), this.tokens.push({type:"heading", depth:"=" === f[2] ? 1 : 2, text:f[1]});
              } else {
                if (f = this.rules.hr.exec(a)) {
                  a = a.substring(f[0].length), this.tokens.push({type:"hr"});
                } else {
                  if (f = this.rules.blockquote.exec(a)) {
                    a = a.substring(f[0].length), this.tokens.push({type:"blockquote_start"}), f = f[0].replace(/^ *> ?/gm, ""), this.token(f, b, !0), this.tokens.push({type:"blockquote_end"});
                  } else {
                    if (f = this.rules.list.exec(a)) {
                      a = a.substring(f[0].length);
                      g = f[2];
                      this.tokens.push({type:"list_start", ordered:1 < g.length});
                      f = f[0].match(this.rules.item);
                      d = !1;
                      l = f.length;
                      for (m = 0; m < l; m++) {
                        h = f[m], e = h.length, h = h.replace(/^ *([*+-]|\d+\.) +/, ""), ~h.indexOf("\n ") && (e -= h.length, h = this.options.pedantic ? h.replace(/^ {1,4}/gm, "") : h.replace(new RegExp("^ {1," + e + "}", "gm"), "")), this.options.smartLists && m !== l - 1 && (e = p.bullet.exec(f[m + 1])[0], g === e || 1 < g.length && 1 < e.length || (a = f.slice(m + 1).join("\n") + a, m = l - 1)), e = d || /\n\n(?!\s*$)/.test(h), m !== l - 1 && (d = "\n" === h.charAt(h.length - 1), e || (e = d)), 
                        this.tokens.push({type:e ? "loose_item_start" : "list_item_start"}), this.token(h, !1, c), this.tokens.push({type:"list_item_end"});
                      }
                      this.tokens.push({type:"list_end"});
                    } else {
                      if (f = this.rules.html.exec(a)) {
                        a = a.substring(f[0].length), this.tokens.push({type:this.options.sanitize ? "paragraph" : "html", pre:!this.options.sanitizer && ("pre" === f[1] || "script" === f[1] || "style" === f[1]), text:f[0]});
                      } else {
                        if (!c && b && (f = this.rules.def.exec(a))) {
                          a = a.substring(f[0].length), this.tokens.links[f[1].toLowerCase()] = {href:f[2], title:f[3]};
                        } else {
                          if (b && (f = this.rules.table.exec(a))) {
                            a = a.substring(f[0].length);
                            h = {type:"table", header:f[1].replace(/^ *| *\| *$/g, "").split(/ *\| */), align:f[2].replace(/^ *|\| *$/g, "").split(/ *\| */), cells:f[3].replace(/(?: *\| *)?\n$/, "").split("\n")};
                            for (m = 0; m < h.align.length; m++) {
                              /^ *-+: *$/.test(h.align[m]) ? h.align[m] = "right" : /^ *:-+: *$/.test(h.align[m]) ? h.align[m] = "center" : /^ *:-+ *$/.test(h.align[m]) ? h.align[m] = "left" : h.align[m] = null;
                            }
                            for (m = 0; m < h.cells.length; m++) {
                              h.cells[m] = h.cells[m].replace(/^ *\| *| *\| *$/g, "").split(/ *\| */);
                            }
                            this.tokens.push(h);
                          } else {
                            if (b && (f = this.rules.paragraph.exec(a))) {
                              a = a.substring(f[0].length), this.tokens.push({type:"paragraph", text:"\n" === f[1].charAt(f[1].length - 1) ? f[1].slice(0, -1) : f[1]});
                            } else {
                              if (f = this.rules.text.exec(a)) {
                                a = a.substring(f[0].length), this.tokens.push({type:"text", text:f[0]});
                              } else {
                                if (a) {
                                  throw Error("Infinite loop on byte: " + a.charCodeAt(0));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return this.tokens;
  };
  var q = {escape:/^\\([\\`*{}\[\]()#+\-.!_>])/, autolink:/^<([^ >]+(@|:\/)[^ >]+)>/, url:h, tag:/^\x3c!--[\s\S]*?--\x3e|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/, link:/^!?\[(inside)\]\(href\)/, reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/, nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/, strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/, em:/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/, br:/^ {2,}\n(?!\s*$)/, del:h, text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/, 
  _inside:/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/, _href:/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/};
  q.link = g(q.link)("inside", q._inside)("href", q._href)();
  q.reflink = g(q.reflink)("inside", q._inside)();
  q.normal = l({}, q);
  q.pedantic = l({}, q.normal, {strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/, em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});
  q.gfm = l({}, q.normal, {escape:g(q.escape)("])", "~|])")(), url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/, del:/^~~(?=\S)([\s\S]*?\S)~~/, text:g(q.text)("]|", "~]|")("|", "|https?://|")()});
  q.breaks = l({}, q.gfm, {br:g(q.br)("{2,}", "*")(), text:g(q.gfm.text)("{2,}", "*")()});
  b.rules = q;
  b.output = function(a, c, d) {
    return (new b(c, d)).output(a);
  };
  b.prototype.output = function(a) {
    for (var b = "", c, d; a;) {
      if (d = this.rules.escape.exec(a)) {
        a = a.substring(d[0].length), b += d[1];
      } else {
        if (d = this.rules.autolink.exec(a)) {
          a = a.substring(d[0].length), "@" === d[2] ? (c = ":" === d[1].charAt(6) ? this.mangle(d[1].substring(7)) : this.mangle(d[1]), d = this.mangle("mailto:") + c) : d = c = e(d[1]), b += this.renderer.link(d, null, c);
        } else {
          if (!this.inLink && (d = this.rules.url.exec(a))) {
            a = a.substring(d[0].length), d = c = e(d[1]), b += this.renderer.link(d, null, c);
          } else {
            if (d = this.rules.tag.exec(a)) {
              !this.inLink && /^<a /i.test(d[0]) ? this.inLink = !0 : this.inLink && /^<\/a>/i.test(d[0]) && (this.inLink = !1), a = a.substring(d[0].length), b += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(d[0]) : e(d[0]) : d[0];
            } else {
              if (d = this.rules.link.exec(a)) {
                a = a.substring(d[0].length), this.inLink = !0, b += this.outputLink(d, {href:d[2], title:d[3]}), this.inLink = !1;
              } else {
                if ((d = this.rules.reflink.exec(a)) || (d = this.rules.nolink.exec(a))) {
                  a = a.substring(d[0].length), c = (d[2] || d[1]).replace(/\s+/g, " "), (c = this.links[c.toLowerCase()]) && c.href ? (this.inLink = !0, b += this.outputLink(d, c), this.inLink = !1) : (b += d[0].charAt(0), a = d[0].substring(1) + a);
                } else {
                  if (d = this.rules.strong.exec(a)) {
                    a = a.substring(d[0].length), b += this.renderer.strong(this.output(d[2] || d[1]));
                  } else {
                    if (d = this.rules.em.exec(a)) {
                      a = a.substring(d[0].length), b += this.renderer.em(this.output(d[2] || d[1]));
                    } else {
                      if (d = this.rules.code.exec(a)) {
                        a = a.substring(d[0].length), b += this.renderer.codespan(e(d[2], !0));
                      } else {
                        if (d = this.rules.br.exec(a)) {
                          a = a.substring(d[0].length), b += this.renderer.br();
                        } else {
                          if (d = this.rules.del.exec(a)) {
                            a = a.substring(d[0].length), b += this.renderer.del(this.output(d[1]));
                          } else {
                            if (d = this.rules.text.exec(a)) {
                              a = a.substring(d[0].length), b += this.renderer.text(e(this.smartypants(d[0])));
                            } else {
                              if (a) {
                                throw Error("Infinite loop on byte: " + a.charCodeAt(0));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return b;
  };
  b.prototype.outputLink = function(a, b) {
    var c = e(b.href);
    b = b.title ? e(b.title) : null;
    return "!" !== a[0].charAt(0) ? this.renderer.link(c, b, this.output(a[1])) : this.renderer.image(c, b, e(a[1]));
  };
  b.prototype.smartypants = function(a) {
    return this.options.smartypants ? a.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…") : a;
  };
  b.prototype.mangle = function(a) {
    if (!this.options.mangle) {
      return a;
    }
    for (var b = "", c = a.length, d = 0, e; d < c; d++) {
      e = a.charCodeAt(d), 0.5 < Math.random() && (e = "x" + e.toString(16)), b += "&#" + e + ";";
    }
    return b;
  };
  c.prototype.code = function(a, b, c) {
    if (this.options.highlight) {
      var d = this.options.highlight(a, b);
      null != d && d !== a && (c = !0, a = d);
    }
    return b ? '<pre><code class="' + this.options.langPrefix + e(b, !0) + '">' + (c ? a : e(a, !0)) + "\n</code></pre>\n" : "<pre><code>" + (c ? a : e(a, !0)) + "\n</code></pre>";
  };
  c.prototype.blockquote = function(a) {
    return "<blockquote>\n" + a + "</blockquote>\n";
  };
  c.prototype.html = function(a) {
    return a;
  };
  c.prototype.heading = function(a, b, c) {
    return "<h" + b + ' id="' + this.options.headerPrefix + c.toLowerCase().replace(/[^\w]+/g, "-") + '">' + a + "</h" + b + ">\n";
  };
  c.prototype.hr = function() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  };
  c.prototype.list = function(a, b) {
    b = b ? "ol" : "ul";
    return "<" + b + ">\n" + a + "</" + b + ">\n";
  };
  c.prototype.listitem = function(a) {
    return "<li>" + a + "</li>\n";
  };
  c.prototype.paragraph = function(a) {
    return "<p>" + a + "</p>\n";
  };
  c.prototype.table = function(a, b) {
    return "<table>\n<thead>\n" + a + "</thead>\n<tbody>\n" + b + "</tbody>\n</table>\n";
  };
  c.prototype.tablerow = function(a) {
    return "<tr>\n" + a + "</tr>\n";
  };
  c.prototype.tablecell = function(a, b) {
    var c = b.header ? "th" : "td";
    return (b.align ? "<" + c + ' style="text-align:' + b.align + '">' : "<" + c + ">") + a + "</" + c + ">\n";
  };
  c.prototype.strong = function(a) {
    return "<strong>" + a + "</strong>";
  };
  c.prototype.em = function(a) {
    return "<em>" + a + "</em>";
  };
  c.prototype.codespan = function(a) {
    return "<code>" + a + "</code>";
  };
  c.prototype.br = function() {
    return this.options.xhtml ? "<br/>" : "<br>";
  };
  c.prototype.del = function(a) {
    return "<del>" + a + "</del>";
  };
  c.prototype.link = function(a, b, c) {
    if (this.options.sanitize) {
      try {
        var d = decodeURIComponent(f(a)).replace(/[^\w:]/g, "").toLowerCase();
      } catch (A) {
        return "";
      }
      if (0 === d.indexOf("javascript:") || 0 === d.indexOf("vbscript:")) {
        return "";
      }
    }
    a = '<a href="' + a + '"';
    b && (a += ' title="' + b + '"');
    return a + (">" + c + "</a>");
  };
  c.prototype.image = function(a, b, c) {
    a = '<img src="' + a + '" alt="' + c + '"';
    b && (a += ' title="' + b + '"');
    return a += this.options.xhtml ? "/>" : ">";
  };
  c.prototype.text = function(a) {
    return a;
  };
  d.parse = function(a, b, c) {
    return (new d(b, c)).parse(a);
  };
  d.prototype.parse = function(a) {
    this.inline = new b(a.links, this.options, this.renderer);
    this.tokens = a.reverse();
    for (a = ""; this.next();) {
      a += this.tok();
    }
    return a;
  };
  d.prototype.next = function() {
    return this.token = this.tokens.pop();
  };
  d.prototype.peek = function() {
    return this.tokens[this.tokens.length - 1] || 0;
  };
  d.prototype.parseText = function() {
    for (var a = this.token.text; "text" === this.peek().type;) {
      a += "\n" + this.next().text;
    }
    return this.inline.output(a);
  };
  d.prototype.tok = function() {
    switch(this.token.type) {
      case "space":
        return "";
      case "hr":
        return this.renderer.hr();
      case "heading":
        return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, this.token.text);
      case "code":
        return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
      case "table":
        var a = "";
        var b = "";
        var c, d;
        var e = "";
        for (c = 0; c < this.token.header.length; c++) {
          e += this.renderer.tablecell(this.inline.output(this.token.header[c]), {header:!0, align:this.token.align[c]});
        }
        a += this.renderer.tablerow(e);
        for (c = 0; c < this.token.cells.length; c++) {
          var f = this.token.cells[c];
          e = "";
          for (d = 0; d < f.length; d++) {
            e += this.renderer.tablecell(this.inline.output(f[d]), {header:!1, align:this.token.align[d]});
          }
          b += this.renderer.tablerow(e);
        }
        return this.renderer.table(a, b);
      case "blockquote_start":
        for (b = ""; "blockquote_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.blockquote(b);
      case "list_start":
        b = "";
        for (a = this.token.ordered; "list_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.list(b, a);
      case "list_item_start":
        for (b = ""; "list_item_end" !== this.next().type;) {
          b += "text" === this.token.type ? this.parseText() : this.tok();
        }
        return this.renderer.listitem(b);
      case "loose_item_start":
        for (b = ""; "list_item_end" !== this.next().type;) {
          b += this.tok();
        }
        return this.renderer.listitem(b);
      case "html":
        return b = this.token.pre || this.options.pedantic ? this.token.text : this.inline.output(this.token.text), this.renderer.html(b);
      case "paragraph":
        return this.renderer.paragraph(this.inline.output(this.token.text));
      case "text":
        return this.renderer.paragraph(this.parseText());
    }
  };
  h.exec = h;
  n.options = n.setOptions = function(a) {
    l(n.defaults, a);
    return n;
  };
  n.defaults = {gfm:!0, tables:!0, breaks:!1, pedantic:!1, sanitize:!1, sanitizer:null, mangle:!0, smartLists:!1, silent:!1, highlight:null, langPrefix:"lang-", smartypants:!1, headerPrefix:"", renderer:new c, xhtml:!1};
  n.Parser = d;
  n.parser = d.parse;
  n.Renderer = c;
  n.Lexer = a;
  n.lexer = a.lex;
  n.InlineLexer = b;
  n.inlineLexer = b.output;
  n.parse = n;
  "undefined" !== typeof module && "object" === typeof exports ? module.exports = n : "function" === typeof define && define.amd ? define(function() {
    return n;
  }) : this.marked = n;
}).call(function() {
  return this || ("undefined" !== typeof window ? window : global);
}());
"use strict";
Polymer({is:"marked-element", properties:{markdown:{observer:"render", type:String, value:null}, pedantic:{observer:"render", type:Boolean, value:!1}, sanitize:{observer:"render", type:Boolean, value:!1}, smartypants:{observer:"render", type:Boolean, value:!1}}, ready:function() {
  if (!this.markdown) {
    var a = Polymer.dom(this).querySelector('[type^="text/markdown"]');
    null != a && (this.markdown = this._unindent(a.textContent));
  }
}, attached:function() {
  this._attached = !0;
  this._outputElement = this.outputElement;
  this.render();
}, detached:function() {
  this._attached = !1;
}, unindent:function(a) {
  return this._unindent(a);
}, get outputElement() {
  var a = Polymer.dom(this).queryDistributedElements(".markdown-html")[0];
  if (a) {
    return a;
  }
  this.toggleClass("hidden", !1, this.$.content);
  return this.$.content;
}, render:function() {
  if (this._attached) {
    if (this.markdown) {
      var a = {highlight:this._highlight.bind(this), sanitize:this.sanitize, pedantic:this.pedantic, smartypants:this.smartypants};
      Polymer.dom(this._outputElement).innerHTML = marked(this.markdown, a);
      this.fire("marked-render-complete");
    } else {
      Polymer.dom(this._outputElement).innerHTML = "";
    }
  }
}, _highlight:function(a, b) {
  return this.fire("syntax-highlight", {code:a, lang:b}).detail.code || a;
}, _unindent:function(a) {
  if (!a) {
    return a;
  }
  a = a.replace(/\t/g, "  ").split("\n");
  var b = a.reduce(function(a, b) {
    if (/^\s*$/.test(b)) {
      return a;
    }
    b = b.match(/^(\s*)/)[0].length;
    return null === a ? b : b < a ? b : a;
  }, null);
  return a.map(function(a) {
    return a.substr(b);
  }).join("\n");
}});
(function() {
  function a(a) {
    this.element = a;
    this.width = this.boundingRect.width;
    this.height = this.boundingRect.height;
    this.size = Math.max(this.width, this.height);
  }
  function b(a) {
    this.element = a;
    this.color = window.getComputedStyle(a).color;
    this.wave = document.createElement("div");
    this.waveContainer = document.createElement("div");
    this.wave.style.backgroundColor = this.color;
    this.wave.classList.add("wave");
    this.waveContainer.classList.add("wave-container");
    Polymer.dom(this.waveContainer).appendChild(this.wave);
    this.resetInteractionState();
  }
  var c = {distance:function(a, b, c, g) {
    a -= c;
    b -= g;
    return Math.sqrt(a * a + b * b);
  }, now:window.performance && window.performance.now ? window.performance.now.bind(window.performance) : Date.now};
  a.prototype = {get boundingRect() {
    return this.element.getBoundingClientRect();
  }, furthestCornerDistanceFrom:function(a, b) {
    var d = c.distance(a, b, 0, 0), e = c.distance(a, b, this.width, 0), h = c.distance(a, b, 0, this.height);
    a = c.distance(a, b, this.width, this.height);
    return Math.max(d, e, h, a);
  }};
  b.MAX_RADIUS = 300;
  b.prototype = {get recenters() {
    return this.element.recenters;
  }, get center() {
    return this.element.center;
  }, get mouseDownElapsed() {
    if (!this.mouseDownStart) {
      return 0;
    }
    var a = c.now() - this.mouseDownStart;
    this.mouseUpStart && (a -= this.mouseUpElapsed);
    return a;
  }, get mouseUpElapsed() {
    return this.mouseUpStart ? c.now() - this.mouseUpStart : 0;
  }, get mouseDownElapsedSeconds() {
    return this.mouseDownElapsed / 1000;
  }, get mouseUpElapsedSeconds() {
    return this.mouseUpElapsed / 1000;
  }, get mouseInteractionSeconds() {
    return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds;
  }, get initialOpacity() {
    return this.element.initialOpacity;
  }, get opacityDecayVelocity() {
    return this.element.opacityDecayVelocity;
  }, get radius() {
    var a = 1.1 * Math.min(Math.sqrt(this.containerMetrics.width * this.containerMetrics.width + this.containerMetrics.height * this.containerMetrics.height), b.MAX_RADIUS) + 5;
    return Math.abs(a * (1 - Math.pow(80, -(this.mouseInteractionSeconds / (1.1 - a / b.MAX_RADIUS * 0.2)))));
  }, get opacity() {
    return this.mouseUpStart ? Math.max(0, this.initialOpacity - this.mouseUpElapsedSeconds * this.opacityDecayVelocity) : this.initialOpacity;
  }, get outerOpacity() {
    return Math.max(0, Math.min(0.3 * this.mouseUpElapsedSeconds, this.opacity));
  }, get isOpacityFullyDecayed() {
    return 0.01 > this.opacity && this.radius >= Math.min(this.maxRadius, b.MAX_RADIUS);
  }, get isRestingAtMaxRadius() {
    return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, b.MAX_RADIUS);
  }, get isAnimationComplete() {
    return this.mouseUpStart ? this.isOpacityFullyDecayed : this.isRestingAtMaxRadius;
  }, get translationFraction() {
    return Math.min(1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2));
  }, get xNow() {
    return this.xEnd ? this.xStart + this.translationFraction * (this.xEnd - this.xStart) : this.xStart;
  }, get yNow() {
    return this.yEnd ? this.yStart + this.translationFraction * (this.yEnd - this.yStart) : this.yStart;
  }, get isMouseDown() {
    return this.mouseDownStart && !this.mouseUpStart;
  }, resetInteractionState:function() {
    this.slideDistance = this.yEnd = this.xEnd = this.yStart = this.xStart = this.mouseUpStart = this.mouseDownStart = this.maxRadius = 0;
    this.containerMetrics = new a(this.element);
  }, draw:function() {
    this.wave.style.opacity = this.opacity;
    var a = this.radius / (this.containerMetrics.size / 2);
    var b = this.xNow - this.containerMetrics.width / 2;
    var c = this.yNow - this.containerMetrics.height / 2;
    this.waveContainer.style.webkitTransform = "translate(" + b + "px, " + c + "px)";
    this.waveContainer.style.transform = "translate3d(" + b + "px, " + c + "px, 0)";
    this.wave.style.webkitTransform = "scale(" + a + "," + a + ")";
    this.wave.style.transform = "scale3d(" + a + "," + a + ",1)";
  }, downAction:function(a) {
    var b = this.containerMetrics.width / 2, d = this.containerMetrics.height / 2;
    this.resetInteractionState();
    this.mouseDownStart = c.now();
    this.center ? (this.xStart = b, this.yStart = d, this.slideDistance = c.distance(this.xStart, this.yStart, this.xEnd, this.yEnd)) : (this.xStart = a ? a.detail.x - this.containerMetrics.boundingRect.left : this.containerMetrics.width / 2, this.yStart = a ? a.detail.y - this.containerMetrics.boundingRect.top : this.containerMetrics.height / 2);
    this.recenters && (this.xEnd = b, this.yEnd = d, this.slideDistance = c.distance(this.xStart, this.yStart, this.xEnd, this.yEnd));
    this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(this.xStart, this.yStart);
    this.waveContainer.style.top = (this.containerMetrics.height - this.containerMetrics.size) / 2 + "px";
    this.waveContainer.style.left = (this.containerMetrics.width - this.containerMetrics.size) / 2 + "px";
    this.waveContainer.style.width = this.containerMetrics.size + "px";
    this.waveContainer.style.height = this.containerMetrics.size + "px";
  }, upAction:function(a) {
    this.isMouseDown && (this.mouseUpStart = c.now());
  }, remove:function() {
    Polymer.dom(this.waveContainer.parentNode).removeChild(this.waveContainer);
  }};
  Polymer({is:"paper-ripple", behaviors:[Polymer.IronA11yKeysBehavior], properties:{initialOpacity:{type:Number, value:0.25}, opacityDecayVelocity:{type:Number, value:0.8}, recenters:{type:Boolean, value:!1}, center:{type:Boolean, value:!1}, ripples:{type:Array, value:function() {
    return [];
  }}, animating:{type:Boolean, readOnly:!0, reflectToAttribute:!0, value:!1}, holdDown:{type:Boolean, value:!1, observer:"_holdDownChanged"}, noink:{type:Boolean, value:!1}, _animating:{type:Boolean}, _boundAnimate:{type:Function, value:function() {
    return this.animate.bind(this);
  }}}, get target() {
    var a = Polymer.dom(this).getOwnerRoot();
    return 11 == this.parentNode.nodeType ? a.host : this.parentNode;
  }, keyBindings:{"enter:keydown":"_onEnterKeydown", "space:keydown":"_onSpaceKeydown", "space:keyup":"_onSpaceKeyup"}, attached:function() {
    this.keyEventTarget = this.target;
    this.listen(this.target, "up", "uiUpAction");
    this.listen(this.target, "down", "uiDownAction");
  }, detached:function() {
    this.unlisten(this.target, "up", "uiUpAction");
    this.unlisten(this.target, "down", "uiDownAction");
  }, get shouldKeepAnimating() {
    for (var a = 0; a < this.ripples.length; ++a) {
      if (!this.ripples[a].isAnimationComplete) {
        return !0;
      }
    }
    return !1;
  }, simulatedRipple:function() {
    this.downAction(null);
    this.async(function() {
      this.upAction();
    }, 1);
  }, uiDownAction:function(a) {
    this.noink || this.downAction(a);
  }, downAction:function(a) {
    this.holdDown && 0 < this.ripples.length || (this.addRipple().downAction(a), this._animating || this.animate());
  }, uiUpAction:function(a) {
    this.noink || this.upAction(a);
  }, upAction:function(a) {
    this.holdDown || (this.ripples.forEach(function(b) {
      b.upAction(a);
    }), this.animate());
  }, onAnimationComplete:function() {
    this._animating = !1;
    this.$.background.style.backgroundColor = null;
    this.fire("transitionend");
  }, addRipple:function() {
    var a = new b(this);
    Polymer.dom(this.$.waves).appendChild(a.waveContainer);
    this.$.background.style.backgroundColor = a.color;
    this.ripples.push(a);
    this._setAnimating(!0);
    return a;
  }, removeRipple:function(a) {
    var b = this.ripples.indexOf(a);
    0 > b || (this.ripples.splice(b, 1), a.remove(), this.ripples.length || this._setAnimating(!1));
  }, animate:function() {
    var a;
    this._animating = !0;
    for (a = 0; a < this.ripples.length; ++a) {
      var b = this.ripples[a];
      b.draw();
      this.$.background.style.opacity = b.outerOpacity;
      b.isOpacityFullyDecayed && !b.isRestingAtMaxRadius && this.removeRipple(b);
    }
    if (this.shouldKeepAnimating || 0 !== this.ripples.length) {
      window.requestAnimationFrame(this._boundAnimate);
    } else {
      this.onAnimationComplete();
    }
  }, _onEnterKeydown:function() {
    this.uiDownAction();
    this.async(this.uiUpAction, 1);
  }, _onSpaceKeydown:function() {
    this.uiDownAction();
  }, _onSpaceKeyup:function() {
    this.uiUpAction();
  }, _holdDownChanged:function(a, b) {
    void 0 !== b && (a ? this.downAction() : this.upAction());
  }});
})();
Polymer.PaperRippleBehavior = {properties:{noink:{type:Boolean, observer:"_noinkChanged"}, _rippleContainer:{type:Object}}, _buttonStateChanged:function() {
  this.focused && this.ensureRipple();
}, _downHandler:function(a) {
  Polymer.IronButtonStateImpl._downHandler.call(this, a);
  this.pressed && this.ensureRipple(a);
}, ensureRipple:function(a) {
  if (!this.hasRipple()) {
    this._ripple = this._createRipple();
    this._ripple.noink = this.noink;
    var b = this._rippleContainer || this.root;
    b && Polymer.dom(b).appendChild(this._ripple);
    if (a) {
      var b = Polymer.dom(this._rippleContainer || this), c = Polymer.dom(a).rootTarget;
      b.deepContains(c) && this._ripple.uiDownAction(a);
    }
  }
}, getRipple:function() {
  this.ensureRipple();
  return this._ripple;
}, hasRipple:function() {
  return !!this._ripple;
}, _createRipple:function() {
  return document.createElement("paper-ripple");
}, _noinkChanged:function(a) {
  this.hasRipple() && (this._ripple.noink = a);
}};
Polymer.PaperButtonBehaviorImpl = {properties:{elevation:{type:Number, reflectToAttribute:!0, readOnly:!0}}, observers:["_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)", "_computeKeyboardClass(receivedFocusFromKeyboard)"], hostAttributes:{role:"button", tabindex:"0", animated:!0}, _calculateElevation:function() {
  var a = 1;
  this.disabled ? a = 0 : this.active || this.pressed ? a = 4 : this.receivedFocusFromKeyboard && (a = 3);
  this._setElevation(a);
}, _computeKeyboardClass:function(a) {
  this.toggleClass("keyboard-focus", a);
}, _spaceKeyDownHandler:function(a) {
  Polymer.IronButtonStateImpl._spaceKeyDownHandler.call(this, a);
  this.hasRipple() && 1 > this.getRipple().ripples.length && this._ripple.uiDownAction();
}, _spaceKeyUpHandler:function(a) {
  Polymer.IronButtonStateImpl._spaceKeyUpHandler.call(this, a);
  this.hasRipple() && this._ripple.uiUpAction();
}};
Polymer.PaperButtonBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperButtonBehaviorImpl];
Polymer({is:"paper-material", properties:{elevation:{type:Number, reflectToAttribute:!0, value:1}, animated:{type:Boolean, reflectToAttribute:!0, value:!1}}});
Polymer({is:"paper-button", behaviors:[Polymer.PaperButtonBehavior], properties:{raised:{type:Boolean, reflectToAttribute:!0, value:!1, observer:"_calculateElevation"}}, _calculateElevation:function() {
  this.raised ? Polymer.PaperButtonBehaviorImpl._calculateElevation.apply(this) : this._setElevation(0);
}});
var _self = "undefined" !== typeof window ? window : "undefined" !== typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}, Prism = function() {
  var a = /\blang(?:uage)?-(\w+)\b/i, b = 0, c = _self.Prism = {util:{encode:function(a) {
    return a instanceof d ? new d(a.type, c.util.encode(a.content), a.alias) : "Array" === c.util.type(a) ? a.map(c.util.encode) : a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
  }, type:function(a) {
    return Object.prototype.toString.call(a).match(/\[object (\w+)\]/)[1];
  }, objId:function(a) {
    a.__id || Object.defineProperty(a, "__id", {value:++b});
    return a.__id;
  }, clone:function(a) {
    switch(c.util.type(a)) {
      case "Object":
        var b = {}, d;
        for (d in a) {
          a.hasOwnProperty(d) && (b[d] = c.util.clone(a[d]));
        }
        return b;
      case "Array":
        return a.map && a.map(function(a) {
          return c.util.clone(a);
        });
    }
    return a;
  }}, languages:{extend:function(a, b) {
    a = c.util.clone(c.languages[a]);
    for (var d in b) {
      a[d] = b[d];
    }
    return a;
  }, insertBefore:function(a, b, d, e) {
    e = e || c.languages;
    var f = e[a];
    if (2 == arguments.length) {
      d = arguments[1];
      for (var g in d) {
        d.hasOwnProperty(g) && (f[g] = d[g]);
      }
      return f;
    }
    var h = {}, m;
    for (m in f) {
      if (f.hasOwnProperty(m)) {
        if (m == b) {
          for (g in d) {
            d.hasOwnProperty(g) && (h[g] = d[g]);
          }
        }
        h[m] = f[m];
      }
    }
    c.languages.DFS(c.languages, function(b, c) {
      c === e[a] && b != a && (this[b] = h);
    });
    return e[a] = h;
  }, DFS:function(a, b, d, e) {
    e = e || {};
    for (var f in a) {
      a.hasOwnProperty(f) && ((b.call(a, f, a[f], d || f), "Object" !== c.util.type(a[f]) || e[c.util.objId(a[f])]) ? "Array" !== c.util.type(a[f]) || e[c.util.objId(a[f])] || (e[c.util.objId(a[f])] = !0, c.languages.DFS(a[f], b, f, e)) : (e[c.util.objId(a[f])] = !0, c.languages.DFS(a[f], b, null, e)));
    }
  }}, plugins:{}, highlightAll:function(a, b) {
    b = {callback:b, selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};
    c.hooks.run("before-highlightall", b);
    for (var d = b.elements || document.querySelectorAll(b.selector), e = 0, f; f = d[e++];) {
      c.highlightElement(f, !0 === a, b.callback);
    }
  }, highlightElement:function(b, d, e) {
    for (var f, g, h = b; h && !a.test(h.className);) {
      h = h.parentNode;
    }
    h && (f = (h.className.match(a) || [, ""])[1], g = c.languages[f]);
    b.className = b.className.replace(a, "").replace(/\s+/g, " ") + " language-" + f;
    h = b.parentNode;
    /pre/i.test(h.nodeName) && (h.className = h.className.replace(a, "").replace(/\s+/g, " ") + " language-" + f);
    var q = {element:b, language:f, grammar:g, code:b.textContent};
    c.hooks.run("before-sanity-check", q);
    q.code && q.grammar ? (c.hooks.run("before-highlight", q), d && _self.Worker ? (b = new Worker(c.filename), b.onmessage = function(a) {
      q.highlightedCode = a.data;
      c.hooks.run("before-insert", q);
      q.element.innerHTML = q.highlightedCode;
      e && e.call(q.element);
      c.hooks.run("after-highlight", q);
      c.hooks.run("complete", q);
    }, b.postMessage(JSON.stringify({language:q.language, code:q.code, immediateClose:!0}))) : (q.highlightedCode = c.highlight(q.code, q.grammar, q.language), c.hooks.run("before-insert", q), q.element.innerHTML = q.highlightedCode, e && e.call(b), c.hooks.run("after-highlight", q), c.hooks.run("complete", q))) : c.hooks.run("complete", q);
  }, highlight:function(a, b, e) {
    a = c.tokenize(a, b);
    return d.stringify(c.util.encode(a), e);
  }, tokenize:function(a, b, d) {
    d = c.Token;
    var e = [a], f = b.rest;
    if (f) {
      for (var g in f) {
        b[g] = f[g];
      }
      delete b.rest;
    }
    a: for (g in b) {
      if (b.hasOwnProperty(g) && b[g]) {
        for (var f = b[g], f = "Array" === c.util.type(f) ? f : [f], h = 0; h < f.length; ++h) {
          for (var m = f[h], r = m.inside, u = !!m.lookbehind, v = !!m.greedy, A = 0, C = m.alias, m = m.pattern || m, B = 0; B < e.length; B++) {
            var H = e[B];
            if (e.length > a.length) {
              break a;
            }
            if (!(H instanceof d)) {
              m.lastIndex = 0;
              var z = m.exec(H), D = 1;
              if (!z && v && B != e.length - 1) {
                var D = e[B + 1].matchedStr || e[B + 1], F = H + D;
                B < e.length - 2 && (F += e[B + 2].matchedStr || e[B + 2]);
                m.lastIndex = 0;
                z = m.exec(F);
                if (!z) {
                  continue;
                }
                var K = z.index + (u ? z[1].length : 0);
                if (K >= H.length) {
                  continue;
                }
                var I = z.index + z[0].length;
                H = H.length + D.length;
                D = 3;
                if (I <= H) {
                  if (e[B + 1].greedy) {
                    continue;
                  }
                  D = 2;
                  F = F.slice(0, H);
                }
                H = F;
              }
              z && (u && (A = z[1].length), K = z.index + A, z = z[0].slice(A), I = K + z.length, F = H.slice(0, K), I = H.slice(I), D = [B, D], F && D.push(F), z = new d(g, r ? c.tokenize(z, r) : z, C, z, v), D.push(z), I && D.push(I), Array.prototype.splice.apply(e, D));
            }
          }
        }
      }
    }
    return e;
  }, hooks:{all:{}, add:function(a, b) {
    var d = c.hooks.all;
    d[a] = d[a] || [];
    d[a].push(b);
  }, run:function(a, b) {
    if ((a = c.hooks.all[a]) && a.length) {
      for (var d = 0, e; e = a[d++];) {
        e(b);
      }
    }
  }}}, d = c.Token = function(a, b, c, d, e) {
    this.type = a;
    this.content = b;
    this.alias = c;
    this.matchedStr = d || null;
    this.greedy = !!e;
  };
  d.stringify = function(a, b, e) {
    if ("string" == typeof a) {
      return a;
    }
    if ("Array" === c.util.type(a)) {
      return a.map(function(c) {
        return d.stringify(c, b, a);
      }).join("");
    }
    e = {type:a.type, content:d.stringify(a.content, b, e), tag:"span", classes:["token", a.type], attributes:{}, language:b, parent:e};
    "comment" == e.type && (e.attributes.spellcheck = "true");
    if (a.alias) {
      var f = "Array" === c.util.type(a.alias) ? a.alias : [a.alias];
      Array.prototype.push.apply(e.classes, f);
    }
    c.hooks.run("wrap", e);
    var f = "", g;
    for (g in e.attributes) {
      f += (f ? " " : "") + g + '="' + (e.attributes[g] || "") + '"';
    }
    return "<" + e.tag + ' class="' + e.classes.join(" ") + '" ' + f + ">" + e.content + "</" + e.tag + ">";
  };
  if (!_self.document) {
    if (!_self.addEventListener) {
      return _self.Prism;
    }
    _self.addEventListener("message", function(a) {
      a = JSON.parse(a.data);
      var b = a.language, d = a.immediateClose;
      _self.postMessage(c.highlight(a.code, c.languages[b], b));
      d && _self.close();
    }, !1);
    return _self.Prism;
  }
  var e = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();
  e && (c.filename = e.src, document.addEventListener && !e.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", c.highlightAll));
  return _self.Prism;
}();
"undefined" !== typeof module && module.exports && (module.exports = Prism);
"undefined" !== typeof global && (global.Prism = Prism);
Prism.languages.markup = {comment:/\x3c!--[\w\W]*?--\x3e/, prolog:/<\?[\w\W]+?\?>/, doctype:/<!DOCTYPE[\w\W]+?>/, cdata:/<!\[CDATA\[[\w\W]*?]]\x3e/i, tag:{pattern:/<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside:{tag:{pattern:/^<\/?[^\s>\/]+/i, inside:{punctuation:/^<\/?/, namespace:/^[^\s>\/:]+:/}}, "attr-value":{pattern:/=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside:{punctuation:/[=>"']/}}, punctuation:/\/?>/, "attr-name":{pattern:/[^\s>\/]+/, 
inside:{namespace:/^[^\s>\/:]+:/}}}}, entity:/&#?[\da-z]{1,8};/i};
Prism.hooks.add("wrap", function(a) {
  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
});
Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.css = {comment:/\/\*[\w\W]*?\*\//, atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*\{))/i, inside:{rule:/@[\w-]+/}}, url:/url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector:/[^\{\}\s][^\{\};]*?(?=\s*\{)/, string:/("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property:/(\b|\B)[\w-]+(?=\s*:)/i, important:/\B!important\b/i, "function":/[-a-z0-9]+(?=\()/i, punctuation:/[(){};:]/};
Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css);
Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", {style:{pattern:/(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind:!0, inside:Prism.languages.css, alias:"language-css"}}), Prism.languages.insertBefore("inside", "attr-value", {"style-attr":{pattern:/\s*style=("|').*?\1/i, inside:{"attr-name":{pattern:/^\s*style/i, inside:Prism.languages.markup.tag.inside}, punctuation:/^\s*=\s*['"]|['"]\s*$/, "attr-value":{pattern:/.+/i, inside:Prism.languages.css}}, alias:"language-css"}}, 
Prism.languages.markup.tag));
Prism.languages.clike = {comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind:!0}, {pattern:/(^|[^\\:])\/\/.*/, lookbehind:!0}], string:{pattern:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy:!0}, "class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind:!0, inside:{punctuation:/(\.|\\)/}}, keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean":/\b(true|false)\b/, 
"function":/[a-z0-9_]+(?=\()/i, number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation:/[{}[\];(),.:]/};
Prism.languages.javascript = Prism.languages.extend("clike", {keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number:/\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i});
Prism.languages.insertBefore("javascript", "keyword", {regex:{pattern:/(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind:!0, greedy:!0}});
Prism.languages.insertBefore("javascript", "class-name", {"template-string":{pattern:/`(?:\\\\|\\?[^\\])*?`/, greedy:!0, inside:{interpolation:{pattern:/\$\{[^}]+\}/, inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/, alias:"punctuation"}, rest:Prism.languages.javascript}}, string:/[\s\S]+/}}});
Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", {script:{pattern:/(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind:!0, inside:Prism.languages.javascript, alias:"language-javascript"}});
Prism.languages.js = Prism.languages.javascript;
(function() {
  "undefined" !== typeof self && self.Prism && self.document && document.querySelector && (self.Prism.fileHighlight = function() {
    var a = {js:"javascript", py:"python", rb:"ruby", ps1:"powershell", psm1:"powershell", sh:"bash", bat:"batch", h:"c", tex:"latex"};
    Array.prototype.forEach && Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(b) {
      for (var c = b.getAttribute("data-src"), d, e = b, f = /\blang(?:uage)?-(?!\*)(\w+)\b/i; e && !f.test(e.className);) {
        e = e.parentNode;
      }
      e && (d = (b.className.match(f) || [, ""])[1]);
      d || (d = (c.match(/\.(\w+)$/) || [, ""])[1], d = a[d] || d);
      var g = document.createElement("code");
      g.className = "language-" + d;
      b.textContent = "";
      g.textContent = "Loading…";
      b.appendChild(g);
      var h = new XMLHttpRequest;
      h.open("GET", c, !0);
      h.onreadystatechange = function() {
        4 == h.readyState && (400 > h.status && h.responseText ? (g.textContent = h.responseText, Prism.highlightElement(g)) : g.textContent = 400 <= h.status ? "✖ Error " + h.status + " while fetching file: " + h.statusText : "✖ Error: File does not exist or is empty");
      };
      h.send(null);
    });
  }, document.addEventListener("DOMContentLoaded", self.Prism.fileHighlight));
})();
(function() {
  Polymer({is:"prism-highlighter", ready:function() {
    this._handler = this._highlight.bind(this);
  }, attached:function() {
    (this.parentElement || this.parentNode.host).addEventListener("syntax-highlight", this._handler);
  }, detached:function() {
    (this.parentElement || this.parentNode.host).removeEventListener("syntax-highlight", this._handler);
  }, _highlight:function(a) {
    a.detail && a.detail.code ? (a = a.detail, a.code = Prism.highlight(a.code, this._detectLang(a.code, a.lang))) : console.warn("Malformed", "syntax-highlight", "event:", a.detail);
  }, _detectLang:function(a, b) {
    if (!b) {
      return a.match(/^\s*</) ? Prism.languages.markup : Prism.languages.javascript;
    }
    if (Prism.languages[b]) {
      return Prism.languages[b];
    }
    switch(b.substr(0, 2)) {
      case "js":
      case "es":
        return Prism.languages.javascript;
      case "c":
        return Prism.languages.clike;
      default:
        return Prism.languages.markup;
    }
  }});
})();
(function() {
  Polymer({is:"iron-doc-property", properties:{descriptor:{type:Object, observer:"_descriptorChanged"}, collapsed:{type:Boolean, value:!1, observer:"_collapsedChanged"}, anchorId:{type:String, reflectToAttribute:!0}, _paramText:String}, listeners:{transitionEnd:"_onTransitionEnd", webkitTransitionEnd:"_onTransitionEnd"}, ready:function() {
    this._isReady = !0;
  }, _onTransitionEnd:function(a) {
    a.path[0] === this.$.transitionMask && (this.$.transitionMask.style.height = "");
  }, _descriptorChanged:function() {
    this.toggleAttribute("private", this.descriptor.private);
    this.toggleAttribute("configuration", this.descriptor.configuration);
    this.toggleAttribute("function", this.descriptor.function);
    this._paramText = (this.descriptor.params || []).map(function(a) {
      return a.name;
    }).join(", ");
  }, _collapsedChanged:function() {
    if (this._isReady) {
      var a = this.$.transitionMask, b = this.collapsed;
      a.style.height = "auto";
      var c = a.offsetHeight;
      a.style.height = this.collapsed ? c + "px" : "";
      requestAnimationFrame(function() {
        this.toggleAttribute("_collapsed", b);
        a.style.height = this.collapsed ? "" : c + "px";
      }.bind(this));
    } else {
      this.toggleAttribute("_collapsed", this.collapsed);
    }
  }, _computeHideMeta:function(a) {
    return void 0 === a.type && void 0 === a.default;
  }, _computeHideParams:function(a, b) {
    return (!a.params || 0 === a.params.length) && !b;
  }, _computeHideDefault:function(a) {
    return void 0 === a;
  }, _computeDefaultDisplay:function(a) {
    return "" === a ? "''" : a;
  }, _getAnnotation:function(a) {
    var b = [];
    void 0 !== a["default"] && b.push("Default: " + a["default"]);
    a.readOnly && b.push("readOnly");
    a.notify && b.push("notifies");
    return b.join(" – ");
  }});
})();
(function() {
  Polymer({is:"iron-doc-viewer", properties:{descriptor:{type:Object, observer:"_descriptorChanged"}, prefix:{type:String, value:""}, _showPrivate:{type:Boolean, value:!1, observer:"_showPrivateChanged"}, _privateToggleLabel:String}, ready:function() {
    var a = this._loadJson();
    if (a && this.descriptor) {
      throw console.error(this, "received both a bound descriptor:", this.descriptor, "and JSON descriptor:", this._jsonDescriptor, "Please provide only one"), Error("<iron-doc-viewer> accepts either a bound or JSON descriptor; not both");
    }
    a && (this.descriptor = a);
  }, _loadJson:function() {
    var a = "";
    Array.prototype.forEach.call(Polymer.dom(this).childNodes, function(b) {
      a += b.textContent;
    });
    a = a.trim();
    if ("" === a) {
      return null;
    }
    try {
      return JSON.parse(a);
    } catch (b) {
      throw console.error("Failure when parsing JSON:", a, b), b;
    }
  }, _descriptorChanged:function() {
    if (this.descriptor) {
      for (var a = [], b = [], c = 0, d; d = this.descriptor.properties[c]; c++) {
        ("Function" === d.type ? b : a).push(d);
      }
      this._properties = a;
      this._methods = b;
      this._events = this.descriptor.events || [];
      this._behaviors = this.descriptor.behaviors || [];
      this.toggleAttribute("abstract", this.descriptor.abstract);
    }
  }, scrollToAnchor:function(a) {
    a && 1 < a.length && (Polymer.dom.flush(), a = window.location.hash.slice(1), (a = this.$$('[anchor-id="' + a + '"]')) && a.scrollIntoView());
  }, _collapsedChanged:function() {
    this._collapseToggleLabel = this._collapsed ? "expand" : "collapse";
    for (var a = this.querySelectorAll("iron-doc-property"), b = 0, c; c = a[b]; b++) {
      c.collapsed = this._collapsed;
    }
  }, _toggleCollapsed:function() {
    this._collapsed = !this._collapsed;
  }, _showPrivateChanged:function() {
    this._privateToggleLabel = (this._showPrivate ? "hide" : "show") + " private API";
    this.toggleClass("show-private", this._showPrivate);
  }, _togglePrivate:function() {
    this._showPrivate = !this._showPrivate;
  }, _noneToShow:function(a, b) {
    for (var c = 0; c < b.length; c++) {
      if (a || !b[c].private) {
        return !1;
      }
    }
    return !0;
  }, _formatAnchor:function(a, b, c) {
    return a + b + (c ? "-" + c : "");
  }, _hideBehaviors:function(a) {
    return null === a || 0 === a.length;
  }, _broadcastBehavior:function(a) {
    this.fire("iron-doc-viewer-component-selected", a.target._templateInstance.item);
  }});
})();
(function() {
  Polymer.IronJsonpLibraryBehavior = {properties:{libraryLoaded:{type:Boolean, value:!1, notify:!0, readOnly:!0}, libraryErrorMessage:{type:String, value:null, notify:!0, readOnly:!0}}, observers:["_libraryUrlChanged(libraryUrl)"], _libraryUrlChanged:function(a) {
    this._isReady && this.libraryUrl && this._loadLibrary();
  }, _libraryLoadCallback:function(a, b) {
    a ? (console.warn("Library load failed:", a.message), this._setLibraryErrorMessage(a.message)) : (this._setLibraryErrorMessage(null), this._setLibraryLoaded(!0), this.notifyEvent && this.fire(this.notifyEvent, b));
  }, _loadLibrary:function() {
    a.require(this.libraryUrl, this._libraryLoadCallback.bind(this), this.callbackName);
  }, ready:function() {
    this._isReady = !0;
    this.libraryUrl && this._loadLibrary();
  }};
  var a = {apiMap:{}, require:function(a, d, e) {
    var c = this.nameFromUrl(a);
    this.apiMap[c] || (this.apiMap[c] = new b(c, a, e));
    this.apiMap[c].requestNotify(d);
  }, nameFromUrl:function(a) {
    return a.replace(/[\:\/\%\?\&\.\=\-\,]/g, "_") + "_api";
  }}, b = function(a, b, e) {
    this.notifiers = [];
    if (!e) {
      if (0 <= b.indexOf(this.callbackMacro)) {
        e = a + "_loaded", b = b.replace(this.callbackMacro, e);
      } else {
        this.error = Error("IronJsonpLibraryBehavior a %%callback%% parameter is required in libraryUrl");
        return;
      }
    }
    this.callbackName = e;
    window[this.callbackName] = this.success.bind(this);
    this.addScript(b);
  };
  b.prototype = {callbackMacro:"%%callback%%", loaded:!1, addScript:function(a) {
    var b = document.createElement("script");
    b.src = a;
    b.onerror = this.handleError.bind(this);
    a = document.querySelector("script") || document.body;
    a.parentNode.insertBefore(b, a);
    this.script = b;
  }, removeScript:function() {
    this.script.parentNode && this.script.parentNode.removeChild(this.script);
    this.script = null;
  }, handleError:function(a) {
    this.error = Error("Library failed to load");
    this.notifyAll();
    this.cleanup();
  }, success:function() {
    this.loaded = !0;
    this.result = Array.prototype.slice.call(arguments);
    this.notifyAll();
    this.cleanup();
  }, cleanup:function() {
    delete window[this.callbackName];
  }, notifyAll:function() {
    this.notifiers.forEach(function(a) {
      a(this.error, this.result);
    }.bind(this));
    this.notifiers = [];
  }, requestNotify:function(a) {
    this.loaded || this.error ? a(this.error, this.result) : this.notifiers.push(a);
  }};
})();
Polymer({is:"iron-jsonp-library", behaviors:[Polymer.IronJsonpLibraryBehavior], properties:{libraryUrl:String, callbackName:String, notifyEvent:String}});
Polymer({is:"iron-localstorage", properties:{name:{type:String, value:""}, value:{type:Object, notify:!0}, useRaw:{type:Boolean, value:!1}, autoSaveDisabled:{type:Boolean, value:!1}, errorMessage:{type:String, notify:!0}, _loaded:{type:Boolean, value:!1}}, observers:["_debounceReload(name,useRaw)", "_trySaveValue(autoSaveDisabled)", "_trySaveValue(value.*)"], ready:function() {
  this._boundHandleStorage = this._handleStorage.bind(this);
}, attached:function() {
  window.addEventListener("storage", this._boundHandleStorage);
}, detached:function() {
  window.removeEventListener("storage", this._boundHandleStorage);
}, _handleStorage:function(a) {
  a.key == this.name && this._load(!0);
}, _trySaveValue:function() {
  this._doNotSave || this._loaded && !this.autoSaveDisabled && this.debounce("save", this.save);
}, _debounceReload:function() {
  this.debounce("reload", this.reload);
}, reload:function() {
  this._loaded = !1;
  this._load();
}, _load:function(a) {
  var b = window.localStorage.getItem(this.name);
  if (null === b) {
    this._doNotSave = this._loaded = !0, this.value = null, this._doNotSave = !1, this.fire("iron-localstorage-load-empty", {externalChange:a});
  } else {
    if (!this.useRaw) {
      try {
        b = JSON.parse(b);
      } catch (c) {
        this.errorMessage = "Could not parse local storage value", console.error("could not parse local storage value", b), b = null;
      }
    }
    this._doNotSave = this._loaded = !0;
    this.value = b;
    this._doNotSave = !1;
    this.fire("iron-localstorage-load", {externalChange:a});
  }
}, save:function() {
  var a = this.useRaw ? this.value : JSON.stringify(this.value);
  try {
    null === this.value || void 0 === this.value ? window.localStorage.removeItem(this.name) : window.localStorage.setItem(this.name, a);
  } catch (b) {
    this.errorMessage = b.message, console.error("localStorage could not be saved. Safari incoginito mode?", b);
  }
}});
Polymer({is:"iron-media-query", properties:{queryMatches:{type:Boolean, value:!1, readOnly:!0, notify:!0}, query:{type:String, observer:"queryChanged"}, full:{type:Boolean, value:!1}, _boundMQHandler:{value:function() {
  return this.queryHandler.bind(this);
}}, _mq:{value:null}}, attached:function() {
  this.style.display = "none";
  this.queryChanged();
}, detached:function() {
  this._remove();
}, _add:function() {
  this._mq && this._mq.addListener(this._boundMQHandler);
}, _remove:function() {
  this._mq && this._mq.removeListener(this._boundMQHandler);
  this._mq = null;
}, queryChanged:function() {
  this._remove();
  var a = this.query;
  a && (this.full || "(" === a[0] || (a = "(" + a + ")"), this._mq = window.matchMedia(a), this._add(), this.queryHandler(this._mq));
}, queryHandler:function(a) {
  this._setQueryMatches(a.matches);
}});
(function() {
  Polymer({is:"iron-overlay-backdrop", properties:{opened:{reflectToAttribute:!0, type:Boolean, value:!1, observer:"_openedChanged"}}, listeners:{transitionend:"_onTransitionend"}, created:function() {
    this.__openedRaf = null;
  }, attached:function() {
    this.opened && this._openedChanged(this.opened);
  }, prepare:function() {
    this.opened && !this.parentNode && Polymer.dom(document.body).appendChild(this);
  }, open:function() {
    this.opened = !0;
  }, close:function() {
    this.opened = !1;
  }, complete:function() {
    this.opened || this.parentNode !== document.body || Polymer.dom(this.parentNode).removeChild(this);
  }, _onTransitionend:function(a) {
    a && a.target === this && this.complete();
  }, _openedChanged:function(a) {
    a ? this.prepare() : (a = window.getComputedStyle(this), "0s" !== a.transitionDuration && 0 != a.opacity || this.complete());
    this.isAttached && (this.__openedRaf && (window.cancelAnimationFrame(this.__openedRaf), this.__openedRaf = null), this.scrollTop = this.scrollTop, this.__openedRaf = window.requestAnimationFrame(function() {
      this.__openedRaf = null;
      this.toggleClass("opened", this.opened);
    }.bind(this)));
  }});
})();
Polymer.IronFitBehavior = {properties:{sizingTarget:{type:Object, value:function() {
  return this;
}}, fitInto:{type:Object, value:window}, noOverlap:{type:Boolean}, positionTarget:{type:Element}, horizontalAlign:{type:String}, verticalAlign:{type:String}, dynamicAlign:{type:Boolean}, horizontalOffset:{type:Number, value:0, notify:!0}, verticalOffset:{type:Number, value:0, notify:!0}, autoFitOnAttach:{type:Boolean, value:!1}, _fitInfo:{type:Object}}, get _fitWidth() {
  return this.fitInto === window ? this.fitInto.innerWidth : this.fitInto.getBoundingClientRect().width;
}, get _fitHeight() {
  return this.fitInto === window ? this.fitInto.innerHeight : this.fitInto.getBoundingClientRect().height;
}, get _fitLeft() {
  return this.fitInto === window ? 0 : this.fitInto.getBoundingClientRect().left;
}, get _fitTop() {
  return this.fitInto === window ? 0 : this.fitInto.getBoundingClientRect().top;
}, get _defaultPositionTarget() {
  var a = Polymer.dom(this).parentNode;
  a && a.nodeType === Node.DOCUMENT_FRAGMENT_NODE && (a = a.host);
  return a;
}, get _localeHorizontalAlign() {
  if (this._isRTL) {
    if ("right" === this.horizontalAlign) {
      return "left";
    }
    if ("left" === this.horizontalAlign) {
      return "right";
    }
  }
  return this.horizontalAlign;
}, attached:function() {
  this._isRTL = "rtl" == window.getComputedStyle(this).direction;
  this.positionTarget = this.positionTarget || this._defaultPositionTarget;
  this.autoFitOnAttach && ("none" === window.getComputedStyle(this).display ? setTimeout(function() {
    this.fit();
  }.bind(this)) : this.fit());
}, fit:function() {
  this._discoverInfo();
  this.position();
  this.constrain();
  this.center();
}, _discoverInfo:function() {
  if (!this._fitInfo) {
    var a = window.getComputedStyle(this), b = window.getComputedStyle(this.sizingTarget);
    this._fitInfo = {inlineStyle:{top:this.style.top || "", left:this.style.left || "", position:this.style.position || ""}, sizerInlineStyle:{maxWidth:this.sizingTarget.style.maxWidth || "", maxHeight:this.sizingTarget.style.maxHeight || "", boxSizing:this.sizingTarget.style.boxSizing || ""}, positionedBy:{vertically:"auto" !== a.top ? "top" : "auto" !== a.bottom ? "bottom" : null, horizontally:"auto" !== a.left ? "left" : "auto" !== a.right ? "right" : null}, sizedBy:{height:"none" !== b.maxHeight, 
    width:"none" !== b.maxWidth, minWidth:parseInt(b.minWidth, 10) || 0, minHeight:parseInt(b.minHeight, 10) || 0}, margin:{top:parseInt(a.marginTop, 10) || 0, right:parseInt(a.marginRight, 10) || 0, bottom:parseInt(a.marginBottom, 10) || 0, left:parseInt(a.marginLeft, 10) || 0}};
    this.verticalOffset && (this._fitInfo.margin.top = this._fitInfo.margin.bottom = this.verticalOffset, this._fitInfo.inlineStyle.marginTop = this.style.marginTop || "", this._fitInfo.inlineStyle.marginBottom = this.style.marginBottom || "", this.style.marginTop = this.style.marginBottom = this.verticalOffset + "px");
    this.horizontalOffset && (this._fitInfo.margin.left = this._fitInfo.margin.right = this.horizontalOffset, this._fitInfo.inlineStyle.marginLeft = this.style.marginLeft || "", this._fitInfo.inlineStyle.marginRight = this.style.marginRight || "", this.style.marginLeft = this.style.marginRight = this.horizontalOffset + "px");
  }
}, resetFit:function() {
  var a = this._fitInfo || {}, b;
  for (b in a.sizerInlineStyle) {
    this.sizingTarget.style[b] = a.sizerInlineStyle[b];
  }
  for (b in a.inlineStyle) {
    this.style[b] = a.inlineStyle[b];
  }
  this._fitInfo = null;
}, refit:function() {
  var a = this.sizingTarget.scrollLeft, b = this.sizingTarget.scrollTop;
  this.resetFit();
  this.fit();
  this.sizingTarget.scrollLeft = a;
  this.sizingTarget.scrollTop = b;
}, position:function() {
  if (this.horizontalAlign || this.verticalAlign) {
    this.style.position = "fixed";
    this.sizingTarget.style.boxSizing = "border-box";
    this.style.left = "0px";
    this.style.top = "0px";
    var a = this.getBoundingClientRect(), b = this.__getNormalizedRect(this.positionTarget), c = this.__getNormalizedRect(this.fitInto), d = this._fitInfo.margin, e = this.__getPosition(this._localeHorizontalAlign, this.verticalAlign, {width:a.width + d.left + d.right, height:a.height + d.top + d.bottom}, b, c), b = e.left + d.left, e = e.top + d.top, f = Math.min(c.right - d.right, b + a.width), c = Math.min(c.bottom - d.bottom, e + a.height), g = this._fitInfo.sizedBy.minWidth, h = this._fitInfo.sizedBy.minHeight;
    b < d.left && (b = d.left, f - b < g && (b = f - g));
    e < d.top && (e = d.top, c - e < h && (e = c - h));
    this.sizingTarget.style.maxWidth = f - b + "px";
    this.sizingTarget.style.maxHeight = c - e + "px";
    this.style.left = b - a.left + "px";
    this.style.top = e - a.top + "px";
  }
}, constrain:function() {
  if (!this.horizontalAlign && !this.verticalAlign) {
    var a = this._fitInfo;
    a.positionedBy.vertically || (this.style.position = "fixed", this.style.top = "0px");
    a.positionedBy.horizontally || (this.style.position = "fixed", this.style.left = "0px");
    this.sizingTarget.style.boxSizing = "border-box";
    var b = this.getBoundingClientRect();
    a.sizedBy.height || this.__sizeDimension(b, a.positionedBy.vertically, "top", "bottom", "Height");
    a.sizedBy.width || this.__sizeDimension(b, a.positionedBy.horizontally, "left", "right", "Width");
  }
}, _sizeDimension:function(a, b, c, d, e) {
  this.__sizeDimension(a, b, c, d, e);
}, __sizeDimension:function(a, b, c, d, e) {
  var f = this._fitInfo, g = this.__getNormalizedRect(this.fitInto), g = "Width" === e ? g.width : g.height;
  b = b === d;
  var h = "offset" + e;
  this.sizingTarget.style["max" + e] = g - f.margin[b ? c : d] - (b ? g - a[d] : a[c]) - (this[h] - this.sizingTarget[h]) + "px";
}, center:function() {
  if (!this.horizontalAlign && !this.verticalAlign) {
    var a = this._fitInfo.positionedBy;
    if (!a.vertically || !a.horizontally) {
      this.style.position = "fixed";
      a.vertically || (this.style.top = "0px");
      a.horizontally || (this.style.left = "0px");
      var b = this.getBoundingClientRect(), c = this.__getNormalizedRect(this.fitInto);
      a.vertically || (this.style.top = c.top - b.top + (c.height - b.height) / 2 + "px");
      a.horizontally || (this.style.left = c.left - b.left + (c.width - b.width) / 2 + "px");
    }
  }
}, __getNormalizedRect:function(a) {
  return a === document.documentElement || a === window ? {top:0, left:0, width:window.innerWidth, height:window.innerHeight, right:window.innerWidth, bottom:window.innerHeight} : a.getBoundingClientRect();
}, __getCroppedArea:function(a, b, c) {
  return Math.abs(Math.min(0, a.top) + Math.min(0, c.bottom - (a.top + b.height))) * b.width + Math.abs(Math.min(0, a.left) + Math.min(0, c.right - (a.left + b.width))) * b.height;
}, __getPosition:function(a, b, c, d, e) {
  var f = [{verticalAlign:"top", horizontalAlign:"left", top:d.top, left:d.left}, {verticalAlign:"top", horizontalAlign:"right", top:d.top, left:d.right - c.width}, {verticalAlign:"bottom", horizontalAlign:"left", top:d.bottom - c.height, left:d.left}, {verticalAlign:"bottom", horizontalAlign:"right", top:d.bottom - c.height, left:d.right - c.width}];
  if (this.noOverlap) {
    for (var g = 0, h = f.length; g < h; g++) {
      var l = {}, n;
      for (n in f[g]) {
        l[n] = f[g][n];
      }
      f.push(l);
    }
    f[0].top = f[1].top += d.height;
    f[2].top = f[3].top -= d.height;
    f[4].left = f[6].left += d.width;
    f[5].left = f[7].left -= d.width;
  }
  b = "auto" === b ? null : b;
  a = "auto" === a ? null : a;
  for (var p, g = 0; g < f.length; g++) {
    d = f[g];
    if (!this.dynamicAlign && !this.noOverlap && d.verticalAlign === b && d.horizontalAlign === a) {
      p = d;
      break;
    }
    h = (!b || d.verticalAlign === b) && (!a || d.horizontalAlign === a);
    if (this.dynamicAlign || h) {
      p = p || d;
      d.croppedArea = this.__getCroppedArea(d, c, e);
      l = d.croppedArea - p.croppedArea;
      if (0 > l || 0 === l && h) {
        p = d;
      }
      if (0 === p.croppedArea && h) {
        break;
      }
    }
  }
  return p;
}};
Polymer.IronOverlayManagerClass = function() {
  this._overlays = [];
  this._minimumZ = 101;
  this._backdropElement = null;
  Polymer.Gestures.add(document, "tap", null);
  document.addEventListener("tap", this._onCaptureClick.bind(this), !0);
  document.addEventListener("focus", this._onCaptureFocus.bind(this), !0);
  document.addEventListener("keydown", this._onCaptureKeyDown.bind(this), !0);
};
Polymer.IronOverlayManagerClass.prototype = {constructor:Polymer.IronOverlayManagerClass, get backdropElement() {
  this._backdropElement || (this._backdropElement = document.createElement("iron-overlay-backdrop"));
  return this._backdropElement;
}, get deepActiveElement() {
  for (var a = document.activeElement || document.body; a.root && Polymer.dom(a.root).activeElement;) {
    a = Polymer.dom(a.root).activeElement;
  }
  return a;
}, _bringOverlayAtIndexToFront:function(a) {
  var b = this._overlays[a];
  if (b) {
    var c = this._overlays.length - 1, d = this._overlays[c];
    d && this._shouldBeBehindOverlay(b, d) && c--;
    if (!(a >= c)) {
      d = Math.max(this.currentOverlayZ(), this._minimumZ);
      for (this._getZ(b) <= d && this._applyOverlayZ(b, d); a < c;) {
        this._overlays[a] = this._overlays[a + 1], a++;
      }
      this._overlays[c] = b;
    }
  }
}, addOrRemoveOverlay:function(a) {
  a.opened ? this.addOverlay(a) : this.removeOverlay(a);
}, addOverlay:function(a) {
  var b = this._overlays.indexOf(a);
  if (0 <= b) {
    this._bringOverlayAtIndexToFront(b);
  } else {
    var b = this._overlays.length, c = this._overlays[b - 1], d = Math.max(this._getZ(c), this._minimumZ), e = this._getZ(a);
    c && this._shouldBeBehindOverlay(a, c) && (this._applyOverlayZ(c, d), b--, d = Math.max(this._getZ(this._overlays[b - 1]), this._minimumZ));
    e <= d && this._applyOverlayZ(a, d);
    this._overlays.splice(b, 0, a);
    b = this.deepActiveElement;
    a.restoreFocusNode = this._overlayParent(b) ? null : b;
  }
  this.trackBackdrop();
}, removeOverlay:function(a) {
  var b = this._overlays.indexOf(a);
  -1 !== b && (this._overlays.splice(b, 1), b = a.restoreFocusOnClose ? a.restoreFocusNode : null, a.restoreFocusNode = null, b && Polymer.dom(document.body).deepContains(b) && b.focus(), this.trackBackdrop());
}, currentOverlay:function() {
  return this._overlays[this._overlays.length - 1];
}, currentOverlayZ:function() {
  return this._getZ(this.currentOverlay());
}, ensureMinimumZ:function(a) {
  this._minimumZ = Math.max(this._minimumZ, a);
}, focusOverlay:function() {
  var a = this.currentOverlay();
  a && !a.transitioning && a._applyFocus();
}, trackBackdrop:function() {
  var a = this._overlayWithBackdrop();
  if (a || this._backdropElement) {
    this.backdropElement.style.zIndex = this._getZ(a) - 1, this.backdropElement.opened = !!a;
  }
}, getBackdrops:function() {
  for (var a = [], b = 0; b < this._overlays.length; b++) {
    this._overlays[b].withBackdrop && a.push(this._overlays[b]);
  }
  return a;
}, backdropZ:function() {
  return this._getZ(this._overlayWithBackdrop()) - 1;
}, _overlayWithBackdrop:function() {
  for (var a = 0; a < this._overlays.length; a++) {
    if (this._overlays[a].withBackdrop) {
      return this._overlays[a];
    }
  }
}, _getZ:function(a) {
  var b = this._minimumZ;
  a && (a = Number(a.style.zIndex || window.getComputedStyle(a).zIndex), a === a && (b = a));
  return b;
}, _setZ:function(a, b) {
  a.style.zIndex = b;
}, _applyOverlayZ:function(a, b) {
  this._setZ(a, b + 2);
}, _overlayParent:function(a) {
  for (; a && a !== document.body;) {
    if (a._manager === this) {
      return a;
    }
    a = Polymer.dom(a).parentNode || a.host;
  }
}, _overlayInPath:function(a) {
  a = a || [];
  for (var b = 0; b < a.length; b++) {
    if (a[b]._manager === this) {
      return a[b];
    }
  }
}, _onCaptureClick:function(a) {
  var b = this.currentOverlay();
  b && this._overlayInPath(Polymer.dom(a).path) !== b && b._onCaptureClick(a);
}, _onCaptureFocus:function(a) {
  var b = this.currentOverlay();
  b && b._onCaptureFocus(a);
}, _onCaptureKeyDown:function(a) {
  var b = this.currentOverlay();
  b && (Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "esc") ? b._onCaptureEsc(a) : Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "tab") && b._onCaptureTab(a));
}, _shouldBeBehindOverlay:function(a, b) {
  return !a.alwaysOnTop && b.alwaysOnTop;
}};
Polymer.IronOverlayManager = new Polymer.IronOverlayManagerClass;
(function() {
  Polymer.IronOverlayBehaviorImpl = {properties:{opened:{observer:"_openedChanged", type:Boolean, value:!1, notify:!0}, canceled:{observer:"_canceledChanged", readOnly:!0, type:Boolean, value:!1}, withBackdrop:{observer:"_withBackdropChanged", type:Boolean}, noAutoFocus:{type:Boolean, value:!1}, noCancelOnEscKey:{type:Boolean, value:!1}, noCancelOnOutsideClick:{type:Boolean, value:!1}, closingReason:{type:Object}, restoreFocusOnClose:{type:Boolean, value:!1}, alwaysOnTop:{type:Boolean}, _manager:{type:Object, 
  value:function() {
    return Polymer.IronOverlayManager;
  }}, _focusedChild:{type:Object}}, listeners:{"iron-resize":"_onIronResize"}, get backdropElement() {
    return this._manager.backdropElement;
  }, get _focusNode() {
    return this._focusedChild || Polymer.dom(this).querySelector("[autofocus]") || this;
  }, get _focusableNodes() {
    var a = ["a[href]", "area[href]", "iframe", "[tabindex]", "[contentEditable=true]"].join(':not([tabindex="-1"]),') + ':not([tabindex="-1"]),' + ["input", "select", "textarea", "button"].join(':not([disabled]):not([tabindex="-1"]),') + ':not([disabled]):not([tabindex="-1"])', a = Polymer.dom(this).querySelectorAll(a);
    0 <= this.tabIndex && a.splice(0, 0, this);
    return a.sort(function(a, c) {
      return a.tabIndex === c.tabIndex ? 0 : 0 === a.tabIndex || a.tabIndex > c.tabIndex ? 1 : -1;
    });
  }, ready:function() {
    this.__shouldRemoveTabIndex = this.__isAnimating = !1;
    this.__onIronResizeAsync = this.__openChangedAsync = this.__firstFocusableNode = this.__lastFocusableNode = null;
    this._ensureSetup();
  }, attached:function() {
    this.opened && this._openedChanged();
    this._observer = Polymer.dom(this).observeNodes(this._onNodesChange);
  }, detached:function() {
    Polymer.dom(this).unobserveNodes(this._observer);
    this._observer = null;
    this.opened = !1;
  }, toggle:function() {
    this._setCanceled(!1);
    this.opened = !this.opened;
  }, open:function() {
    this._setCanceled(!1);
    this.opened = !0;
  }, close:function() {
    this._setCanceled(!1);
    this.opened = !1;
  }, cancel:function(a) {
    this.fire("iron-overlay-canceled", a, {cancelable:!0}).defaultPrevented || (this._setCanceled(!0), this.opened = !1);
  }, _ensureSetup:function() {
    this._overlaySetup || (this._overlaySetup = !0, this.style.outline = "none", this.style.display = "none");
  }, _openedChanged:function() {
    this.opened ? this.removeAttribute("aria-hidden") : this.setAttribute("aria-hidden", "true");
    this._overlaySetup && (this.__openChangedAsync && window.cancelAnimationFrame(this.__openChangedAsync), this.opened || this._manager.removeOverlay(this), this.isAttached && (this.__isAnimating = !0, this.__openChangedAsync = window.requestAnimationFrame(function() {
      this.__openChangedAsync = null;
      this.opened ? (this._manager.addOverlay(this), this._prepareRenderOpened(), this._renderOpened()) : this._renderClosed();
    }.bind(this))));
  }, _canceledChanged:function() {
    this.closingReason = this.closingReason || {};
    this.closingReason.canceled = this.canceled;
  }, _withBackdropChanged:function() {
    this.withBackdrop && !this.hasAttribute("tabindex") ? (this.setAttribute("tabindex", "-1"), this.__shouldRemoveTabIndex = !0) : this.__shouldRemoveTabIndex && (this.removeAttribute("tabindex"), this.__shouldRemoveTabIndex = !1);
    this.opened && this.isAttached && this._manager.trackBackdrop();
  }, _prepareRenderOpened:function() {
    this._preparePositioning();
    this.refit();
    this._finishPositioning();
    this.noAutoFocus && document.activeElement === this._focusNode && this._focusNode.blur();
  }, _renderOpened:function() {
    this._finishRenderOpened();
  }, _renderClosed:function() {
    this._finishRenderClosed();
  }, _finishRenderOpened:function() {
    this._applyFocus();
    this.notifyResize();
    this.__isAnimating = !1;
    var a = this._focusableNodes;
    this.__firstFocusableNode = a[0];
    this.__lastFocusableNode = a[a.length - 1];
    this.fire("iron-overlay-opened");
  }, _finishRenderClosed:function() {
    this.style.display = "none";
    this.style.zIndex = "";
    this._applyFocus();
    this.notifyResize();
    this.__isAnimating = !1;
    this.fire("iron-overlay-closed", this.closingReason);
  }, _preparePositioning:function() {
    this.style.transition = this.style.webkitTransition = "none";
    this.style.transform = this.style.webkitTransform = "none";
    this.style.display = "";
  }, _finishPositioning:function() {
    this.style.display = "none";
    this.scrollTop = this.scrollTop;
    this.style.transition = this.style.webkitTransition = "";
    this.style.transform = this.style.webkitTransform = "";
    this.style.display = "";
    this.scrollTop = this.scrollTop;
  }, _applyFocus:function() {
    this.opened ? this.noAutoFocus || this._focusNode.focus() : (this._focusNode.blur(), this._focusedChild = null, this._manager.focusOverlay());
  }, _onCaptureClick:function(a) {
    this.noCancelOnOutsideClick || this.cancel(a);
  }, _onCaptureFocus:function(a) {
    if (this.withBackdrop) {
      var b = Polymer.dom(a).path;
      -1 === b.indexOf(this) ? (a.stopPropagation(), this._applyFocus()) : this._focusedChild = b[0];
    }
  }, _onCaptureEsc:function(a) {
    this.noCancelOnEscKey || this.cancel(a);
  }, _onCaptureTab:function(a) {
    if (this.withBackdrop) {
      var b = a.shiftKey, c = b ? this.__firstFocusableNode : this.__lastFocusableNode, b = b ? this.__lastFocusableNode : this.__firstFocusableNode;
      if (c === b) {
        c = !0;
      } else {
        var d = this._manager.deepActiveElement, c = d === c || d === this;
      }
      c && (a.preventDefault(), this._focusedChild = b, this._applyFocus());
    }
  }, _onIronResize:function() {
    this.__onIronResizeAsync && (window.cancelAnimationFrame(this.__onIronResizeAsync), this.__onIronResizeAsync = null);
    this.opened && !this.__isAnimating && (this.__onIronResizeAsync = window.requestAnimationFrame(function() {
      this.__onIronResizeAsync = null;
      this.refit();
    }.bind(this)));
  }, _onNodesChange:function() {
    this.opened && !this.__isAnimating && this.notifyResize();
  }};
  Polymer.IronOverlayBehavior = [Polymer.IronFitBehavior, Polymer.IronResizableBehavior, Polymer.IronOverlayBehaviorImpl];
})();
Polymer.IronSelection = function(a) {
  this.selection = [];
  this.selectCallback = a;
};
Polymer.IronSelection.prototype = {get:function() {
  return this.multi ? this.selection.slice() : this.selection[0];
}, clear:function(a) {
  this.selection.slice().forEach(function(b) {
    (!a || 0 > a.indexOf(b)) && this.setItemSelected(b, !1);
  }, this);
}, isSelected:function(a) {
  return 0 <= this.selection.indexOf(a);
}, setItemSelected:function(a, b) {
  if (null != a && b !== this.isSelected(a)) {
    if (b) {
      this.selection.push(a);
    } else {
      var c = this.selection.indexOf(a);
      0 <= c && this.selection.splice(c, 1);
    }
    this.selectCallback && this.selectCallback(a, b);
  }
}, select:function(a) {
  this.multi ? this.toggle(a) : this.get() !== a && (this.setItemSelected(this.get(), !1), this.setItemSelected(a, !0));
}, toggle:function(a) {
  this.setItemSelected(a, !this.isSelected(a));
}};
Polymer.IronSelectableBehavior = {properties:{attrForSelected:{type:String, value:null}, selected:{type:String, notify:!0}, selectedItem:{type:Object, readOnly:!0, notify:!0}, activateEvent:{type:String, value:"tap", observer:"_activateEventChanged"}, selectable:String, selectedClass:{type:String, value:"iron-selected"}, selectedAttribute:{type:String, value:null}, fallbackSelection:{type:String, value:null}, items:{type:Array, readOnly:!0, notify:!0, value:function() {
  return [];
}}, _excludedLocalNames:{type:Object, value:function() {
  return {template:1};
}}}, observers:["_updateAttrForSelected(attrForSelected)", "_updateSelected(selected)", "_checkFallback(fallbackSelection)"], created:function() {
  this._bindFilterItem = this._filterItem.bind(this);
  this._selection = new Polymer.IronSelection(this._applySelection.bind(this));
}, attached:function() {
  this._observer = this._observeItems(this);
  this._updateItems();
  this._shouldUpdateSelection || this._updateSelected();
  this._addListener(this.activateEvent);
}, detached:function() {
  this._observer && Polymer.dom(this).unobserveNodes(this._observer);
  this._removeListener(this.activateEvent);
}, indexOf:function(a) {
  return this.items.indexOf(a);
}, select:function(a) {
  this.selected = a;
}, selectPrevious:function() {
  var a = this.items.length, a = (Number(this._valueToIndex(this.selected)) - 1 + a) % a;
  this.selected = this._indexToValue(a);
}, selectNext:function() {
  var a = (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;
  this.selected = this._indexToValue(a);
}, selectIndex:function(a) {
  this.select(this._indexToValue(a));
}, forceSynchronousItemUpdate:function() {
  this._updateItems();
}, get _shouldUpdateSelection() {
  return null != this.selected;
}, _checkFallback:function() {
  this._shouldUpdateSelection && this._updateSelected();
}, _addListener:function(a) {
  this.listen(this, a, "_activateHandler");
}, _removeListener:function(a) {
  this.unlisten(this, a, "_activateHandler");
}, _activateEventChanged:function(a, b) {
  this._removeListener(b);
  this._addListener(a);
}, _updateItems:function() {
  var a = Polymer.dom(this).queryDistributedElements(this.selectable || "*"), a = Array.prototype.filter.call(a, this._bindFilterItem);
  this._setItems(a);
}, _updateAttrForSelected:function() {
  this._shouldUpdateSelection && (this.selected = this._indexToValue(this.indexOf(this.selectedItem)));
}, _updateSelected:function() {
  this._selectSelected(this.selected);
}, _selectSelected:function(a) {
  this._selection.select(this._valueToItem(this.selected));
  this.fallbackSelection && this.items.length && void 0 === this._selection.get() && (this.selected = this.fallbackSelection);
}, _filterItem:function(a) {
  return !this._excludedLocalNames[a.localName];
}, _valueToItem:function(a) {
  return null == a ? null : this.items[this._valueToIndex(a)];
}, _valueToIndex:function(a) {
  if (this.attrForSelected) {
    for (var b = 0, c; c = this.items[b]; b++) {
      if (this._valueForItem(c) == a) {
        return b;
      }
    }
  } else {
    return Number(a);
  }
}, _indexToValue:function(a) {
  if (this.attrForSelected) {
    if (a = this.items[a]) {
      return this._valueForItem(a);
    }
  } else {
    return a;
  }
}, _valueForItem:function(a) {
  var b = a[Polymer.CaseMap.dashToCamelCase(this.attrForSelected)];
  return void 0 != b ? b : a.getAttribute(this.attrForSelected);
}, _applySelection:function(a, b) {
  this.selectedClass && this.toggleClass(this.selectedClass, b, a);
  this.selectedAttribute && this.toggleAttribute(this.selectedAttribute, b, a);
  this._selectionChange();
  this.fire("iron-" + (b ? "select" : "deselect"), {item:a});
}, _selectionChange:function() {
  this._setSelectedItem(this._selection.get());
}, _observeItems:function(a) {
  return Polymer.dom(a).observeNodes(function(a) {
    this._updateItems();
    this._shouldUpdateSelection && this._updateSelected();
    this.fire("iron-items-changed", a, {bubbles:!1, cancelable:!1});
  });
}, _activateHandler:function(a) {
  a = a.target;
  for (var b = this.items; a && a != this;) {
    var c = b.indexOf(a);
    if (0 <= c) {
      b = this._indexToValue(c);
      this._itemActivate(b, a);
      break;
    }
    a = a.parentNode;
  }
}, _itemActivate:function(a, b) {
  this.fire("iron-activate", {selected:a, item:b}, {cancelable:!0}).defaultPrevented || this.select(a);
}};
Polymer({is:"iron-pages", behaviors:[Polymer.IronResizableBehavior, Polymer.IronSelectableBehavior], properties:{activateEvent:{type:String, value:null}}, observers:["_selectedPageChanged(selected)"], _selectedPageChanged:function(a, b) {
  this.async(this.notifyResize);
}});
Polymer.IronMultiSelectableBehaviorImpl = {properties:{multi:{type:Boolean, value:!1, observer:"multiChanged"}, selectedValues:{type:Array, notify:!0}, selectedItems:{type:Array, readOnly:!0, notify:!0}}, observers:["_updateSelected(selectedValues.splices)"], select:function(a) {
  this.multi ? this.selectedValues ? this._toggleSelected(a) : this.selectedValues = [a] : this.selected = a;
}, multiChanged:function(a) {
  this._selection.multi = a;
}, get _shouldUpdateSelection() {
  return null != this.selected || null != this.selectedValues && this.selectedValues.length;
}, _updateAttrForSelected:function() {
  this.multi ? this._shouldUpdateSelection && (this.selectedValues = this.selectedItems.map(function(a) {
    return this._indexToValue(this.indexOf(a));
  }, this).filter(function(a) {
    return null != a;
  }, this)) : Polymer.IronSelectableBehavior._updateAttrForSelected.apply(this);
}, _updateSelected:function() {
  this.multi ? this._selectMulti(this.selectedValues) : this._selectSelected(this.selected);
}, _selectMulti:function(a) {
  if (a) {
    a = this._valuesToItems(a);
    this._selection.clear(a);
    for (var b = 0; b < a.length; b++) {
      this._selection.setItemSelected(a[b], !0);
    }
    this.fallbackSelection && this.items.length && !this._selection.get().length && this._valueToItem(this.fallbackSelection) && (this.selectedValues = [this.fallbackSelection]);
  } else {
    this._selection.clear();
  }
}, _selectionChange:function() {
  var a = this._selection.get();
  this.multi ? this._setSelectedItems(a) : (this._setSelectedItems([a]), this._setSelectedItem(a));
}, _toggleSelected:function(a) {
  var b = this.selectedValues.indexOf(a);
  0 > b ? this.push("selectedValues", a) : this.splice("selectedValues", b, 1);
}, _valuesToItems:function(a) {
  return null == a ? null : a.map(function(a) {
    return this._valueToItem(a);
  }, this);
}};
Polymer.IronMultiSelectableBehavior = [Polymer.IronSelectableBehavior, Polymer.IronMultiSelectableBehaviorImpl];
Polymer({is:"iron-selector", behaviors:[Polymer.IronMultiSelectableBehavior]});
(function() {
  function a(a, d) {
    var c = new CustomEvent("iron-signal-" + a, {bubbles:!1, detail:d});
    b.forEach(function(a) {
      a.dispatchEvent(c);
    });
  }
  Polymer({is:"iron-signals", attached:function() {
    b.push(this);
  }, detached:function() {
    var a = b.indexOf(this);
    0 <= a && b.splice(a, 1);
  }});
  var b = [];
  document.addEventListener("iron-signal", function(b) {
    a(b.detail.name, b.detail.data);
  });
})();
(function() {
  Polymer.IronA11yAnnouncer = Polymer({is:"iron-a11y-announcer", properties:{mode:{type:String, value:"polite"}, _text:{type:String, value:""}}, created:function() {
    Polymer.IronA11yAnnouncer.instance || (Polymer.IronA11yAnnouncer.instance = this);
    document.body.addEventListener("iron-announce", this._onIronAnnounce.bind(this));
  }, announce:function(a) {
    this._text = "";
    this.async(function() {
      this._text = a;
    }, 100);
  }, _onIronAnnounce:function(a) {
    a.detail && a.detail.text && this.announce(a.detail.text);
  }});
  Polymer.IronA11yAnnouncer.instance = null;
  Polymer.IronA11yAnnouncer.requestAvailability = function() {
    Polymer.IronA11yAnnouncer.instance || (Polymer.IronA11yAnnouncer.instance = document.createElement("iron-a11y-announcer"));
    document.body.appendChild(Polymer.IronA11yAnnouncer.instance);
  };
})();
Polymer({is:"iron-input", extends:"input", behaviors:[Polymer.IronValidatableBehavior], properties:{bindValue:{observer:"_bindValueChanged", type:String}, preventInvalidInput:{type:Boolean}, allowedPattern:{type:String, observer:"_allowedPatternChanged"}, _previousValidInput:{type:String, value:""}, _patternAlreadyChecked:{type:Boolean, value:!1}}, listeners:{input:"_onInput", keypress:"_onKeypress"}, registered:function() {
  this._canDispatchEventOnDisabled() || (this._origDispatchEvent = this.dispatchEvent, this.dispatchEvent = this._dispatchEventFirefoxIE);
}, created:function() {
  Polymer.IronA11yAnnouncer.requestAvailability();
}, _canDispatchEventOnDisabled:function() {
  var a = document.createElement("input"), b = !1;
  a.disabled = !0;
  a.addEventListener("feature-check-dispatch-event", function() {
    b = !0;
  });
  try {
    a.dispatchEvent(new Event("feature-check-dispatch-event"));
  } catch (c) {
  }
  return b;
}, _dispatchEventFirefoxIE:function() {
  var a = this.disabled;
  this.disabled = !1;
  this._origDispatchEvent.apply(this, arguments);
  this.disabled = a;
}, get _patternRegExp() {
  if (this.allowedPattern) {
    var a = new RegExp(this.allowedPattern);
  } else {
    switch(this.type) {
      case "number":
        a = /[0-9.,e-]/;
    }
  }
  return a;
}, ready:function() {
  this.bindValue = this.value;
}, _bindValueChanged:function() {
  this.value !== this.bindValue && (this.value = this.bindValue || 0 === this.bindValue || !1 === this.bindValue ? this.bindValue : "");
  this.fire("bind-value-changed", {value:this.bindValue});
}, _allowedPatternChanged:function() {
  this.preventInvalidInput = this.allowedPattern ? !0 : !1;
}, _onInput:function() {
  !this.preventInvalidInput || this._patternAlreadyChecked || this._checkPatternValidity() || (this._announceInvalidCharacter("Invalid string of characters not entered."), this.value = this._previousValidInput);
  this._previousValidInput = this.bindValue = this.value;
  this._patternAlreadyChecked = !1;
}, _isPrintable:function(a) {
  var b = 19 == a.keyCode || 20 == a.keyCode || 45 == a.keyCode || 46 == a.keyCode || 144 == a.keyCode || 145 == a.keyCode || 32 < a.keyCode && 41 > a.keyCode || 111 < a.keyCode && 124 > a.keyCode;
  return !(8 == a.keyCode || 9 == a.keyCode || 13 == a.keyCode || 27 == a.keyCode) && !(0 == a.charCode && b);
}, _onKeypress:function(a) {
  if (this.preventInvalidInput || "number" === this.type) {
    var b = this._patternRegExp;
    if (b && !(a.metaKey || a.ctrlKey || a.altKey)) {
      this._patternAlreadyChecked = !0;
      var c = String.fromCharCode(a.charCode);
      this._isPrintable(a) && !b.test(c) && (a.preventDefault(), this._announceInvalidCharacter("Invalid character " + c + " not entered."));
    }
  }
}, _checkPatternValidity:function() {
  var a = this._patternRegExp;
  if (!a) {
    return !0;
  }
  for (var b = 0; b < this.value.length; b++) {
    if (!a.test(this.value[b])) {
      return !1;
    }
  }
  return !0;
}, validate:function() {
  var a = this.checkValidity();
  a && (this.required && "" === this.value ? a = !1 : this.hasValidator() && (a = Polymer.IronValidatableBehavior.validate.call(this, this.value)));
  this.invalid = !a;
  this.fire("iron-input-validate");
  return a;
}, _announceInvalidCharacter:function(a) {
  this.fire("iron-announce", {text:a});
}});
Polymer.NeonAnimationBehavior = {properties:{animationTiming:{type:Object, value:function() {
  return {duration:500, easing:"cubic-bezier(0.4, 0, 0.2, 1)", fill:"both"};
}}}, isNeonAnimation:!0, timingFromConfig:function(a) {
  if (a.timing) {
    for (var b in a.timing) {
      this.animationTiming[b] = a.timing[b];
    }
  }
  return this.animationTiming;
}, setPrefixedProperty:function(a, b, c) {
  for (var d = {transform:["webkitTransform"], transformOrigin:["mozTransformOrigin", "webkitTransformOrigin"]}[b], e, f = 0; e = d[f]; f++) {
    a.style[e] = c;
  }
  a.style[b] = c;
}, complete:function() {
}};
!function(a, b) {
  var c = {}, d = {}, e = {};
  !function(a, b) {
    function c() {
      this._endDelay = this._delay = 0;
      this._fill = "none";
      this._iterationStart = 0;
      this._iterations = 1;
      this._duration = 0;
      this._playbackRate = 1;
      this._direction = "normal";
      this._easing = "linear";
      this._easingFunction = A;
    }
    function d() {
      return a.isDeprecated("Invalid timing inputs", "2016-03-02", "TypeError exceptions will be thrown instead.", !0);
    }
    function e(b, d, e) {
      var f = new c;
      return d && (f.fill = "both", f.duration = "auto"), "number" != typeof b || isNaN(b) ? void 0 !== b && Object.getOwnPropertyNames(b).forEach(function(c) {
        "auto" == b[c] || ("number" == typeof f[c] || "duration" == c) && ("number" != typeof b[c] || isNaN(b[c])) || "fill" == c && -1 == u.indexOf(b[c]) || "direction" == c && -1 == v.indexOf(b[c]) || "playbackRate" == c && 1 !== b[c] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.") || (f[c] = b[c]);
      }) : f.duration = b, f;
    }
    function f(a, b, c, d) {
      return 0 > a || 1 < a || 0 > c || 1 < c ? A : function(e) {
        if (0 == e || 1 == e) {
          return e;
        }
        for (var f = 0, g = 1;;) {
          var h = (f + g) / 2, m = 3 * a * (1 - h) * (1 - h) * h + 3 * c * (1 - h) * h * h + h * h * h;
          if (1e-4 > Math.abs(e - m)) {
            return 3 * b * (1 - h) * (1 - h) * h + 3 * d * (1 - h) * h * h + h * h * h;
          }
          e > m ? f = h : g = h;
        }
      };
    }
    function g(a, b) {
      return function(c) {
        if (1 <= c) {
          return 1;
        }
        var d = 1 / a;
        return c += b * d, c - c % d;
      };
    }
    function m(a) {
      D || (D = document.createElement("div").style);
      D.animationTimingFunction = "";
      D.animationTimingFunction = a;
      var b = D.animationTimingFunction;
      if ("" == b && d()) {
        throw new TypeError(a + " is not a valid value for easing");
      }
      return (a = F.exec(b)) ? f.apply(this, a.slice(1).map(Number)) : (a = K.exec(b)) ? g(Number(a[1]), {start:C, middle:B, end:H}[a[2]]) : (b = z[b]) ? b : A;
    }
    function r(a, b, c) {
      return null == b ? I : b < c.delay ? W : b >= c.delay + a ? Z : ha;
    }
    var u = ["backwards", "forwards", "both", "none"], v = ["reverse", "alternate", "alternate-reverse"], A = function(a) {
      return a;
    };
    c.prototype = {_setMember:function(b, c) {
      this["_" + b] = c;
      this._effect && (this._effect._timingInput[b] = c, this._effect._timing = a.normalizeTimingInput(this._effect._timingInput), this._effect.activeDuration = a.calculateActiveDuration(this._effect._timing), this._effect._animation && this._effect._animation._rebuildUnderlyingAnimation());
    }, get playbackRate() {
      return this._playbackRate;
    }, set delay(a) {
      this._setMember("delay", a);
    }, get delay() {
      return this._delay;
    }, set endDelay(a) {
      this._setMember("endDelay", a);
    }, get endDelay() {
      return this._endDelay;
    }, set fill(a) {
      this._setMember("fill", a);
    }, get fill() {
      return this._fill;
    }, set iterationStart(a) {
      if ((isNaN(a) || 0 > a) && d()) {
        throw new TypeError("iterationStart must be a non-negative number, received: " + timing.iterationStart);
      }
      this._setMember("iterationStart", a);
    }, get iterationStart() {
      return this._iterationStart;
    }, set duration(a) {
      if ("auto" != a && (isNaN(a) || 0 > a) && d()) {
        throw new TypeError("duration must be non-negative or auto, received: " + a);
      }
      this._setMember("duration", a);
    }, get duration() {
      return this._duration;
    }, set direction(a) {
      this._setMember("direction", a);
    }, get direction() {
      return this._direction;
    }, set easing(a) {
      this._easingFunction = m(a);
      this._setMember("easing", a);
    }, get easing() {
      return this._easing;
    }, set iterations(a) {
      if ((isNaN(a) || 0 > a) && d()) {
        throw new TypeError("iterations must be non-negative, received: " + a);
      }
      this._setMember("iterations", a);
    }, get iterations() {
      return this._iterations;
    }};
    var C = 1, B = .5, H = 0, z = {ease:f(.25, .1, .25, 1), "ease-in":f(.42, 0, 1, 1), "ease-out":f(0, 0, .58, 1), "ease-in-out":f(.42, 0, .58, 1), "step-start":g(1, C), "step-middle":g(1, B), "step-end":g(1, H)}, D = null, F = /cubic-bezier\(\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*,\s*(-?\d+\.?\d*|-?\.\d+)\s*\)/, K = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/, I = 0, W = 1, Z = 2, ha = 3;
    a.cloneTimingInput = function(a) {
      if ("number" == typeof a) {
        return a;
      }
      var b = {}, c;
      for (c in a) {
        b[c] = a[c];
      }
      return b;
    };
    a.makeTiming = e;
    a.numericTimingToObject = function(a) {
      return "number" == typeof a && (a = isNaN(a) ? {duration:0} : {duration:a}), a;
    };
    a.normalizeTimingInput = function(b, c) {
      return b = a.numericTimingToObject(b), e(b, c);
    };
    a.calculateActiveDuration = function(a) {
      return Math.abs(a.duration * a.iterations / a.playbackRate);
    };
    a.calculateTimeFraction = function(a, b, c) {
      var d = r(a, b, c);
      a: {
        var e = c.fill;
        switch(d) {
          case W:
            b = "backwards" == e || "both" == e ? 0 : null;
            break a;
          case ha:
            b -= c.delay;
            break a;
          case Z:
            b = "forwards" == e || "both" == e ? a : null;
            break a;
          case I:
            b = null;
            break a;
        }
        b = void 0;
      }
      if (null === b) {
        return null;
      }
      if (0 === a) {
        return d === W ? 0 : 1;
      }
      d = c.iterationStart * c.duration;
      a = (0 > c.playbackRate ? b - a : b) * c.playbackRate + d;
      b = c.duration;
      d = a === 1 / 0 || a === -(1 / 0) || a - d == c.duration * c.iterations && c.iterations && 0 == (c.iterations + c.iterationStart) % 1 ? b : a % b;
      b = c.duration;
      a = 0 === a ? 0 : d == b ? c.iterationStart + c.iterations - 1 : Math.floor(a / b);
      b = c.duration;
      return b * c._easingFunction(("normal" == c.direction || c.direction == (1 <= a % 2 ? "alternate-reverse" : "alternate") ? d : b - d) / b) / c.duration;
    };
    a.calculatePhase = r;
    a.toTimingFunction = m;
  }(c, null);
  (function(a, b) {
    function c(a) {
      var b = [], c;
      for (c in a) {
        if (!(c in ["easing", "offset", "composite"])) {
          var d = a[c];
          Array.isArray(d) || (d = [d]);
          for (var e, f = d.length, g = 0; f > g; g++) {
            e = {}, "offset" in a ? e.offset = a.offset : 1 == f ? e.offset = 1 : e.offset = g / (f - 1), "easing" in a && (e.easing = a.easing), "composite" in a && (e.composite = a.composite), e[c] = d[g], b.push(e);
          }
        }
      }
      return b.sort(function(a, b) {
        return a.offset - b.offset;
      }), b;
    }
    var d = {background:"backgroundImage backgroundPosition backgroundSize backgroundRepeat backgroundAttachment backgroundOrigin backgroundClip backgroundColor".split(" "), border:"borderTopColor borderTopStyle borderTopWidth borderRightColor borderRightStyle borderRightWidth borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth".split(" "), borderBottom:["borderBottomWidth", "borderBottomStyle", "borderBottomColor"], borderColor:["borderTopColor", 
    "borderRightColor", "borderBottomColor", "borderLeftColor"], borderLeft:["borderLeftWidth", "borderLeftStyle", "borderLeftColor"], borderRadius:["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"], borderRight:["borderRightWidth", "borderRightStyle", "borderRightColor"], borderTop:["borderTopWidth", "borderTopStyle", "borderTopColor"], borderWidth:["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"], flex:["flexGrow", "flexShrink", 
    "flexBasis"], font:"fontFamily fontSize fontStyle fontVariant fontWeight lineHeight".split(" "), margin:["marginTop", "marginRight", "marginBottom", "marginLeft"], outline:["outlineColor", "outlineStyle", "outlineWidth"], padding:["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"]}, e = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    b = {thin:"1px", medium:"3px", thick:"5px"};
    var f = {borderBottomWidth:b, borderLeftWidth:b, borderRightWidth:b, borderTopWidth:b, fontSize:{"xx-small":"60%", "x-small":"75%", small:"89%", medium:"100%", large:"120%", "x-large":"150%", "xx-large":"200%"}, fontWeight:{normal:"400", bold:"700"}, outlineWidth:b, textShadow:{none:"0px 0px 0px transparent"}, boxShadow:{none:"0px 0px 0px 0px transparent"}};
    a.convertToArrayForm = c;
    a.normalizeKeyframes = function(a) {
      function b() {
        var a = g.length;
        null == g[a - 1].offset && (g[a - 1].offset = 1);
        1 < a && null == g[0].offset && (g[0].offset = 0);
        for (var b = 0, c = g[0].offset, d = 1; a > d; d++) {
          var e = g[d].offset;
          if (null != e) {
            for (var f = 1; d - b > f; f++) {
              g[b + f].offset = c + (e - c) * f / (d - b);
            }
            b = d;
            c = e;
          }
        }
      }
      if (null == a) {
        return [];
      }
      window.Symbol && Symbol.iterator && Array.prototype.from && a[Symbol.iterator] && (a = Array.from(a));
      Array.isArray(a) || (a = c(a));
      var g = a.map(function(a) {
        var b = {}, c;
        for (c in a) {
          var g = a[c];
          if ("offset" == c) {
            if (null != g && (g = Number(g), !isFinite(g))) {
              throw new TypeError("keyframe offsets must be numbers.");
            }
          } else {
            if ("composite" == c) {
              throw {type:DOMException.NOT_SUPPORTED_ERR, name:"NotSupportedError", message:"add compositing is not supported"};
            }
            g = "" + g;
          }
          var h = void 0, m = c, l = g, g = b, r = d[m];
          if (r) {
            for (h in e.style[m] = l, r) {
              m = r[h], l = e.style[m], g[m] = m in f ? f[m][l] || l : l;
            }
          } else {
            g[m] = m in f ? f[m][l] || l : l;
          }
        }
        return void 0 == b.offset && (b.offset = null), b;
      });
      a = !0;
      for (var h = -(1 / 0), l = 0; l < g.length; l++) {
        var n = g[l].offset;
        if (null != n) {
          if (h > n) {
            throw {code:DOMException.INVALID_MODIFICATION_ERR, name:"InvalidModificationError", message:"Keyframes are not loosely sorted by offset. Sort or specify offsets."};
          }
          h = n;
        } else {
          a = !1;
        }
      }
      return g = g.filter(function(a) {
        return 0 <= a.offset && 1 >= a.offset;
      }), a || b(), g;
    };
  })(c, null);
  (function(a) {
    var b = {};
    a.isDeprecated = function(a, c, d, e) {
      e = e ? "are" : "is";
      var f = new Date;
      c = new Date(c);
      return c.setMonth(c.getMonth() + 3), c > f ? (a in b || console.warn("Web Animations: " + a + " " + e + " deprecated and will stop working on " + c.toDateString() + ". " + d), b[a] = !0, !1) : !0;
    };
    a.deprecated = function(b, c, d, e) {
      var f = e ? "are" : "is";
      if (a.isDeprecated(b, c, d, e)) {
        throw Error(b + " " + f + " no longer supported. " + d);
      }
    };
  })(c);
  (function() {
    if (document.documentElement.animate) {
      var a = document.documentElement.animate([], 0), b = !0;
      if (a && (b = !1, "play currentTime pause reverse playbackRate cancel finish startTime playState".split(" ").forEach(function(c) {
        void 0 === a[c] && (b = !0);
      })), !b) {
        return;
      }
    }
    !function(a, b, c) {
      function d(a) {
        for (var b = {}, c = 0; c < a.length; c++) {
          for (var d in a[c]) {
            if ("offset" != d && "easing" != d && "composite" != d) {
              var e = {offset:a[c].offset, easing:a[c].easing, value:a[c][d]};
              b[d] = b[d] || [];
              b[d].push(e);
            }
          }
        }
        for (var f in b) {
          if (a = b[f], 0 != a[0].offset || 1 != a[a.length - 1].offset) {
            throw {type:DOMException.NOT_SUPPORTED_ERR, name:"NotSupportedError", message:"Partial keyframes are not supported"};
          }
        }
        return b;
      }
      function e(c) {
        var d = [], e;
        for (e in c) {
          for (var f = c[e], g = 0; g < f.length - 1; g++) {
            var h = f[g].offset, m = f[g + 1].offset, l = f[g].value, n = f[g + 1].value, p = f[g].easing;
            h == m && (1 == m ? l = n : n = l);
            d.push({startTime:h, endTime:m, easing:a.toTimingFunction(p ? p : "linear"), property:e, interpolation:b.propertyInterpolation(e, l, n)});
          }
        }
        return d.sort(function(a, b) {
          return a.startTime - b.startTime;
        }), d;
      }
      b.convertEffectInput = function(c) {
        c = a.normalizeKeyframes(c);
        var f = d(c), g = e(f);
        return function(a, c) {
          if (null != c) {
            g.filter(function(a) {
              return 0 >= c && 0 == a.startTime || 1 <= c && 1 == a.endTime || c >= a.startTime && c <= a.endTime;
            }).forEach(function(d) {
              var e = c - d.startTime, f = d.endTime - d.startTime, e = 0 == f ? 0 : d.easing(e / f);
              b.apply(a, d.property, d.interpolation(e));
            });
          } else {
            for (var d in f) {
              "offset" != d && "easing" != d && "composite" != d && b.clear(a, d);
            }
          }
        };
      };
    }(c, d, null);
    (function(a, b, c) {
      function d(a) {
        return a.replace(/-(.)/g, function(a, b) {
          return b.toUpperCase();
        });
      }
      var e = {};
      b.addPropertiesHandler = function(a, b, c) {
        for (var f = 0; f < c.length; f++) {
          var g = a, h = b, m = d(c[f]);
          e[m] = e[m] || [];
          e[m].push([g, h]);
        }
      };
      var f = {backgroundColor:"transparent", backgroundPosition:"0% 0%", borderBottomColor:"currentColor", borderBottomLeftRadius:"0px", borderBottomRightRadius:"0px", borderBottomWidth:"3px", borderLeftColor:"currentColor", borderLeftWidth:"3px", borderRightColor:"currentColor", borderRightWidth:"3px", borderSpacing:"2px", borderTopColor:"currentColor", borderTopLeftRadius:"0px", borderTopRightRadius:"0px", borderTopWidth:"3px", bottom:"auto", clip:"rect(0px, 0px, 0px, 0px)", color:"black", fontSize:"100%", 
      fontWeight:"400", height:"auto", left:"auto", letterSpacing:"normal", lineHeight:"120%", marginBottom:"0px", marginLeft:"0px", marginRight:"0px", marginTop:"0px", maxHeight:"none", maxWidth:"none", minHeight:"0px", minWidth:"0px", opacity:"1.0", outlineColor:"invert", outlineOffset:"0px", outlineWidth:"3px", paddingBottom:"0px", paddingLeft:"0px", paddingRight:"0px", paddingTop:"0px", right:"auto", textIndent:"0px", textShadow:"0px 0px 0px transparent", top:"auto", transform:"", verticalAlign:"0px", 
      visibility:"visible", width:"auto", wordSpacing:"normal", zIndex:"auto"};
      b.propertyInterpolation = function(c, g, h) {
        var m = c;
        /-/.test(c) && !a.isDeprecated("Hyphenated property names", "2016-03-22", "Use camelCase instead.", !0) && (m = d(c));
        "initial" != g && "initial" != h || ("initial" == g && (g = f[m]), "initial" == h && (h = f[m]));
        c = g == h ? [] : e[m];
        for (m = 0; c && m < c.length; m++) {
          var l = c[m][0](g), r = c[m][0](h);
          if (void 0 !== l && void 0 !== r && (l = c[m][1](l, r))) {
            var n = b.Interpolation.apply(null, l);
            return function(a) {
              return 0 == a ? g : 1 == a ? h : n(a);
            };
          }
        }
        return b.Interpolation(!1, !0, function(a) {
          return a ? h : g;
        });
      };
    })(c, d, null);
    (function(a, b, c) {
      function d(b) {
        var c = a.calculateActiveDuration(b), d = function(d) {
          return a.calculateTimeFraction(c, d, b);
        };
        return d._totalDuration = b.delay + c + b.endDelay, d._isCurrent = function(d) {
          d = a.calculatePhase(c, d, b);
          return d === PhaseActive || d === PhaseBefore;
        }, d;
      }
      b.KeyframeEffect = function(c, e, f, g) {
        var h, m = d(a.normalizeTimingInput(f)), l = b.convertEffectInput(e);
        e = function() {
          l(c, h);
        };
        return e._update = function(a) {
          return h = m(a), null !== h;
        }, e._clear = function() {
          l(c, null);
        }, e._hasSameTarget = function(a) {
          return c === a;
        }, e._isCurrent = m._isCurrent, e._totalDuration = m._totalDuration, e._id = g, e;
      };
      b.NullEffect = function(a) {
        var b = function() {
          a && (a(), a = null);
        };
        return b._update = function() {
          return null;
        }, b._totalDuration = 0, b._isCurrent = function() {
          return !1;
        }, b._hasSameTarget = function() {
          return !1;
        }, b;
      };
    })(c, d, null);
    (function(a, b) {
      a.apply = function(b, c, d) {
        b.style[a.propertyName(c)] = d;
      };
      a.clear = function(b, c) {
        b.style[a.propertyName(c)] = "";
      };
    })(d, null);
    (function(a) {
      window.Element.prototype.animate = function(b, c) {
        var d = "";
        return c && c.id && (d = c.id), a.timeline._play(a.KeyframeEffect(this, b, c, d));
      };
    })(d);
    (function(a, b) {
      function c(a, b, d) {
        if ("number" == typeof a && "number" == typeof b) {
          return a * (1 - d) + b * d;
        }
        if ("boolean" == typeof a && "boolean" == typeof b) {
          return .5 > d ? a : b;
        }
        if (a.length == b.length) {
          for (var e = [], f = 0; f < a.length; f++) {
            e.push(c(a[f], b[f], d));
          }
          return e;
        }
        throw "Mismatched interpolation arguments " + a + ":" + b;
      }
      a.Interpolation = function(a, b, d) {
        return function(e) {
          return d(c(a, b, e));
        };
      };
    })(d, null);
    (function(a, b, c) {
      a.sequenceNumber = 0;
      var d = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "finish";
        this.cancelable = this.bubbles = !1;
        this.currentTarget = a;
        this.defaultPrevented = !1;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      };
      b.Animation = function(b) {
        this.id = "";
        b && b._id && (this.id = b._id);
        this._sequenceNumber = a.sequenceNumber++;
        this._currentTime = 0;
        this._startTime = null;
        this._paused = !1;
        this._playbackRate = 1;
        this._finishedFlag = this._inTimeline = !0;
        this.onfinish = null;
        this._finishHandlers = [];
        this._effect = b;
        this._inEffect = this._effect._update(0);
        this._idle = !0;
        this._currentTimePending = !1;
      };
      b.Animation.prototype = {_ensureAlive:function() {
        0 > this.playbackRate && 0 === this.currentTime ? this._inEffect = this._effect._update(-1) : this._inEffect = this._effect._update(this.currentTime);
        this._inTimeline || !this._inEffect && this._finishedFlag || (this._inTimeline = !0, b.timeline._animations.push(this));
      }, _tickCurrentTime:function(a, b) {
        a != this._currentTime && (this._currentTime = a, this._isFinished && !b && (this._currentTime = 0 < this._playbackRate ? this._totalDuration : 0), this._ensureAlive());
      }, get currentTime() {
        return this._idle || this._currentTimePending ? null : this._currentTime;
      }, set currentTime(a) {
        a = +a;
        isNaN(a) || (b.restart(), this._paused || null == this._startTime || (this._startTime = this._timeline.currentTime - a / this._playbackRate), this._currentTimePending = !1, this._currentTime != a && (this._tickCurrentTime(a, !0), b.invalidateEffects()));
      }, get startTime() {
        return this._startTime;
      }, set startTime(a) {
        a = +a;
        isNaN(a) || this._paused || this._idle || (this._startTime = a, this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate), b.invalidateEffects());
      }, get playbackRate() {
        return this._playbackRate;
      }, set playbackRate(a) {
        if (a != this._playbackRate) {
          var b = this.currentTime;
          this._playbackRate = a;
          this._startTime = null;
          "paused" != this.playState && "idle" != this.playState && this.play();
          null != b && (this.currentTime = b);
        }
      }, get _isFinished() {
        return !this._idle && (0 < this._playbackRate && this._currentTime >= this._totalDuration || 0 > this._playbackRate && 0 >= this._currentTime);
      }, get _totalDuration() {
        return this._effect._totalDuration;
      }, get playState() {
        return this._idle ? "idle" : null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending ? "pending" : this._paused ? "paused" : this._isFinished ? "finished" : "running";
      }, play:function() {
        this._paused = !1;
        (this._isFinished || this._idle) && (this._currentTime = 0 < this._playbackRate ? 0 : this._totalDuration, this._startTime = null);
        this._idle = this._finishedFlag = !1;
        this._ensureAlive();
        b.invalidateEffects();
      }, pause:function() {
        this._isFinished || this._paused || this._idle || (this._currentTimePending = !0);
        this._startTime = null;
        this._paused = !0;
      }, finish:function() {
        this._idle || (this.currentTime = 0 < this._playbackRate ? this._totalDuration : 0, this._startTime = this._totalDuration - this.currentTime, this._currentTimePending = !1, b.invalidateEffects());
      }, cancel:function() {
        this._inEffect && (this._inEffect = !1, this._idle = !0, this._finishedFlag = !0, this.currentTime = 0, this._startTime = null, this._effect._update(null), b.invalidateEffects());
      }, reverse:function() {
        this.playbackRate *= -1;
        this.play();
      }, addEventListener:function(a, b) {
        "function" == typeof b && "finish" == a && this._finishHandlers.push(b);
      }, removeEventListener:function(a, b) {
        "finish" == a && (a = this._finishHandlers.indexOf(b), 0 <= a && this._finishHandlers.splice(a, 1));
      }, _fireEvents:function(a) {
        if (this._isFinished) {
          if (!this._finishedFlag) {
            var b = new d(this, this._currentTime, a), c = this._finishHandlers.concat(this.onfinish ? [this.onfinish] : []);
            setTimeout(function() {
              c.forEach(function(a) {
                a.call(b.target, b);
              });
            }, 0);
            this._finishedFlag = !0;
          }
        } else {
          this._finishedFlag = !1;
        }
      }, _tick:function(a, b) {
        this._idle || this._paused || (null == this._startTime ? b && (this.startTime = a - this._currentTime / this.playbackRate) : this._isFinished || this._tickCurrentTime((a - this._startTime) * this.playbackRate));
        b && (this._currentTimePending = !1, this._fireEvents(a));
      }, get _needsTick() {
        return this.playState in {pending:1, running:1} || !this._finishedFlag;
      }};
    })(c, d, null);
    (function(a, b, c) {
      function d(a) {
        var b = n;
        n = [];
        a < D.currentTime && (a = D.currentTime);
        h(a, !0);
        b.forEach(function(b) {
          b[1](a);
        });
        g();
      }
      function e(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      }
      function f() {
        this._animations = [];
        this.currentTime = window.performance && performance.now ? performance.now() : 0;
      }
      function g() {
        z.forEach(function(a) {
          a();
        });
        z.length = 0;
      }
      function h(a, c) {
        H = !1;
        var d = b.timeline;
        d.currentTime = a;
        d._animations.sort(e);
        B = !1;
        var f = d._animations;
        d._animations = [];
        var g = [], h = [], f = f.filter(function(b) {
          b._tick(a, c);
          b._inEffect ? h.push(b._effect) : g.push(b._effect);
          b._needsTick && (B = !0);
          var d = b._inEffect || b._needsTick;
          return b._inTimeline = d, d;
        });
        z.push.apply(z, g);
        z.push.apply(z, h);
        d._animations.push.apply(d._animations, f);
        B && requestAnimationFrame(function() {
        });
      }
      var l = window.requestAnimationFrame, n = [], C = 0;
      window.requestAnimationFrame = function(a) {
        var b = C++;
        return 0 == n.length && l(d), n.push([b, a]), b;
      };
      window.cancelAnimationFrame = function(a) {
        n.forEach(function(b) {
          b[0] == a && (b[1] = function() {
          });
        });
      };
      f.prototype = {_play:function(c) {
        c._timing = a.normalizeTimingInput(c.timing);
        c = new b.Animation(c);
        return c._idle = !1, c._timeline = this, this._animations.push(c), b.restart(), b.invalidateEffects(), c;
      }};
      var B = !1, H = !1;
      b.restart = function() {
        return B || (B = !0, requestAnimationFrame(function() {
        }), H = !0), H;
      };
      b.invalidateEffects = function() {
        h(b.timeline.currentTime, !1);
        g();
      };
      var z = [], D = new f;
      b.timeline = D;
    })(c, d, null);
    (function(a) {
      function b(a, b) {
        var c = a.exec(b);
        return c ? (c = a.ignoreCase ? c[0].toLowerCase() : c[0], [c, b.substr(c.length)]) : void 0;
      }
      function c(a, b) {
        b = b.replace(/^\s*/, "");
        return (a = a(b)) ? [a[0], a[1].replace(/^\s*/, "")] : void 0;
      }
      function d(a, b) {
        for (var c = a, d = b; c && d;) {
          c > d ? c %= d : d %= c;
        }
        return a * b / (c + d);
      }
      function e(a, b, c, e, f) {
        for (var g = [], h = [], m = [], l = d(e.length, f.length), r = 0; l > r; r++) {
          var n = b(e[r % e.length], f[r % f.length]);
          if (!n) {
            return;
          }
          g.push(n[0]);
          h.push(n[1]);
          m.push(n[2]);
        }
        return [g, h, function(b) {
          b = b.map(function(a, b) {
            return m[b](a);
          }).join(c);
          return a ? a(b) : b;
        }];
      }
      a.consumeToken = b;
      a.consumeTrimmed = c;
      a.consumeRepeated = function(a, d, e) {
        a = c.bind(null, a);
        for (var f = [];;) {
          var g = a(e);
          if (!g || (f.push(g[0]), e = g[1], g = b(d, e), !g || "" == g[1])) {
            return [f, e];
          }
          e = g[1];
        }
      };
      a.consumeParenthesised = function(a, b) {
        for (var c = 0, d = 0; d < b.length && (!/\s|,/.test(b[d]) || 0 != c); d++) {
          if ("(" == b[d]) {
            c++;
          } else {
            if (")" == b[d] && (c--, 0 == c && d++, 0 >= c)) {
              break;
            }
          }
        }
        a = a(b.substr(0, d));
        return void 0 == a ? void 0 : [a, b.substr(d)];
      };
      a.ignore = function(a) {
        return function(b) {
          b = a(b);
          return b && (b[0] = void 0), b;
        };
      };
      a.optional = function(a, b) {
        return function(c) {
          var d = a(c);
          return d ? d : [b, c];
        };
      };
      a.consumeList = function(b, c) {
        for (var d = [], e = 0; e < b.length; e++) {
          c = a.consumeTrimmed(b[e], c);
          if (!c || "" == c[0]) {
            return;
          }
          void 0 !== c[0] && d.push(c[0]);
          c = c[1];
        }
        return "" == c ? d : void 0;
      };
      a.mergeNestedRepeated = e.bind(null, null);
      a.mergeWrappedNestedRepeated = e;
      a.mergeList = function(a, b, c) {
        for (var d = [], e = [], f = [], g = 0, h = 0; h < c.length; h++) {
          if ("function" == typeof c[h]) {
            var m = c[h](a[g], b[g++]);
            d.push(m[0]);
            e.push(m[1]);
            f.push(m[2]);
          } else {
            !function(a) {
              d.push(!1);
              e.push(!1);
              f.push(function() {
                return c[a];
              });
            }(h);
          }
        }
        return [d, e, function(a) {
          for (var b = "", c = 0; c < a.length; c++) {
            b += f[c](a[c]);
          }
          return b;
        }];
      };
    })(d);
    (function(a) {
      function b(b) {
        var c = {inset:!1, lengths:[], color:null};
        return (b = a.consumeRepeated(function(b) {
          var d = a.consumeToken(/^inset/i, b);
          return d ? (c.inset = !0, d) : (d = a.consumeLengthOrPercent(b)) ? (c.lengths.push(d[0]), d) : (d = a.consumeColor(b)) ? (c.color = d[0], d) : void 0;
        }, /^/, b)) && b[0].length ? [c, b[1]] : void 0;
      }
      var c = function(b, c, d, e) {
        function f(a) {
          return {inset:a, color:[0, 0, 0, 0], lengths:[{px:0}, {px:0}, {px:0}, {px:0}]};
        }
        for (var g = [], h = [], m = 0; m < d.length || m < e.length; m++) {
          var l = d[m] || f(e[m].inset), r = e[m] || f(d[m].inset);
          g.push(l);
          h.push(r);
        }
        return a.mergeNestedRepeated(b, c, g, h);
      }.bind(null, function(b, c) {
        for (; b.lengths.length < Math.max(b.lengths.length, c.lengths.length);) {
          b.lengths.push({px:0});
        }
        for (; c.lengths.length < Math.max(b.lengths.length, c.lengths.length);) {
          c.lengths.push({px:0});
        }
        if (b.inset == c.inset && !!b.color == !!c.color) {
          for (var d, e = [], f = [[], 0], g = [[], 0], h = 0; h < b.lengths.length; h++) {
            var l = a.mergeDimensions(b.lengths[h], c.lengths[h], 2 == h);
            f[0].push(l[0]);
            g[0].push(l[1]);
            e.push(l[2]);
          }
          b.color && c.color && (c = a.mergeColors(b.color, c.color), f[1] = c[0], g[1] = c[1], d = c[2]);
          return [f, g, function(a) {
            for (var c = b.inset ? "inset " : " ", f = 0; f < e.length; f++) {
              c += e[f](a[0][f]) + " ";
            }
            return d && (c += d(a[1])), c;
          }];
        }
      }, ", ");
      a.addPropertiesHandler(function(c) {
        return (c = a.consumeRepeated(b, /^,/, c)) && "" == c[1] ? c[0] : void 0;
      }, c, ["box-shadow", "text-shadow"]);
    })(d);
    (function(a, b) {
      function c(a) {
        return a.toFixed(3).replace(".000", "");
      }
      function d(a, b, c) {
        return Math.min(b, Math.max(a, c));
      }
      function e(a) {
        return /^\s*[-+]?(\d*\.)?\d+\s*$/.test(a) ? Number(a) : void 0;
      }
      function f(a, b) {
        return function(e, f) {
          return [e, f, function(e) {
            return c(d(a, b, e));
          }];
        };
      }
      a.clamp = d;
      a.addPropertiesHandler(e, f(0, 1 / 0), ["border-image-width", "line-height"]);
      a.addPropertiesHandler(e, f(0, 1), ["opacity", "shape-image-threshold"]);
      a.addPropertiesHandler(e, function(a, b) {
        return 0 != a ? f(0, 1 / 0)(a, b) : void 0;
      }, ["flex-grow", "flex-shrink"]);
      a.addPropertiesHandler(e, function(a, b) {
        return [a, b, function(a) {
          return Math.round(d(1, 1 / 0, a));
        }];
      }, ["orphans", "widows"]);
      a.addPropertiesHandler(e, function(a, b) {
        return [a, b, Math.round];
      }, ["z-index"]);
      a.parseNumber = e;
      a.mergeNumbers = function(a, b) {
        return [a, b, c];
      };
      a.numberToString = c;
    })(d, null);
    (function(a, b) {
      a.addPropertiesHandler(String, function(a, b) {
        return "visible" == a || "visible" == b ? [0, 1, function(c) {
          return 0 >= c ? a : 1 <= c ? b : "visible";
        }] : void 0;
      }, ["visibility"]);
    })(d);
    (function(a, b) {
      function c(a) {
        a = a.trim();
        e.fillStyle = "#000";
        e.fillStyle = a;
        var b = e.fillStyle;
        if (e.fillStyle = "#fff", e.fillStyle = a, b == e.fillStyle) {
          return e.fillRect(0, 0, 1, 1), a = e.getImageData(0, 0, 1, 1).data, e.clearRect(0, 0, 1, 1), b = a[3] / 255, [a[0] * b, a[1] * b, a[2] * b, b];
        }
      }
      function d(b, c) {
        return [b, c, function(b) {
          if (b[3]) {
            for (var c = 0; 3 > c; c++) {
              b[c] = Math.round(Math.max(0, Math.min(255, b[c] / b[3])));
            }
          }
          return b[3] = a.numberToString(a.clamp(0, 1, b[3])), "rgba(" + b.join(",") + ")";
        }];
      }
      b = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      b.width = b.height = 1;
      var e = b.getContext("2d");
      a.addPropertiesHandler(c, d, "background-color border-bottom-color border-left-color border-right-color border-top-color color outline-color text-decoration-color".split(" "));
      a.consumeColor = a.consumeParenthesised.bind(null, c);
      a.mergeColors = d;
    })(d, null);
    (function(a, b) {
      function c(a, b) {
        if (b = b.trim().toLowerCase(), "0" == b && 0 <= "px".search(a)) {
          return {px:0};
        }
        if (/^[^(]*$|^calc/.test(b)) {
          b = b.replace(/calc\(/g, "(");
          var c = {};
          b = b.replace(a, function(a) {
            return c[a] = null, "U" + a;
          });
          a = "U(" + a.source + ")";
          for (var d = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + a, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, ""), e = [/N\*(D)/g, /(N|D)[*\/]N/g, /(N|D)O\1/g, /\((N|D)\)/g], f = 0; f < e.length;) {
            e[f].test(d) ? (d = d.replace(e[f], "$1"), f = 0) : f++;
          }
          if ("D" == d) {
            for (var g in c) {
              d = eval(b.replace(new RegExp("U" + g, "g"), "").replace(new RegExp(a, "g"), "*0"));
              if (!isFinite(d)) {
                return;
              }
              c[g] = d;
            }
            return c;
          }
        }
      }
      function d(a, b) {
        return e(a, b, !0);
      }
      function e(b, c, d) {
        var e, f = [];
        for (e in b) {
          f.push(e);
        }
        for (e in c) {
          0 > f.indexOf(e) && f.push(e);
        }
        return b = f.map(function(a) {
          return b[a] || 0;
        }), c = f.map(function(a) {
          return c[a] || 0;
        }), [b, c, function(b) {
          var c = b.map(function(c, e) {
            return 1 == b.length && d && (c = Math.max(c, 0)), a.numberToString(c) + f[e];
          }).join(" + ");
          return 1 < b.length ? "calc(" + c + ")" : c;
        }];
      }
      var f = c.bind(null, /px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc/g);
      b = c.bind(null, /px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|%/g);
      var g = c.bind(null, /deg|rad|grad|turn/g);
      a.parseLength = f;
      a.parseLengthOrPercent = b;
      a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, b);
      a.parseAngle = g;
      a.mergeDimensions = e;
      var f = a.consumeParenthesised.bind(null, f), f = a.consumeRepeated.bind(void 0, f, /^/), h = a.consumeRepeated.bind(void 0, f, /^,/);
      a.consumeSizePairList = h;
      f = a.mergeNestedRepeated.bind(void 0, d, " ");
      g = a.mergeNestedRepeated.bind(void 0, f, ",");
      a.mergeNonNegativeSizePair = f;
      a.addPropertiesHandler(function(a) {
        return (a = h(a)) && "" == a[1] ? a[0] : void 0;
      }, g, ["background-size"]);
      a.addPropertiesHandler(b, d, "border-bottom-width border-image-width border-left-width border-right-width border-top-width flex-basis font-size height line-height max-height max-width outline-width width".split(" "));
      a.addPropertiesHandler(b, e, "border-bottom-left-radius border-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin text-indent top vertical-align word-spacing".split(" "));
    })(d, null);
    (function(a, b) {
      function c(b) {
        return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b);
      }
      function d(b) {
        return (b = a.consumeList([a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, c, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/))], b)) && 4 == b[0].length ? b[0] : void 0;
      }
      b = a.mergeWrappedNestedRepeated.bind(null, function(a) {
        return "rect(" + a + ")";
      }, function(b, c) {
        return "auto" == b || "auto" == c ? [!0, !1, function(d) {
          d = d ? b : c;
          if ("auto" == d) {
            return "auto";
          }
          d = a.mergeDimensions(d, d);
          return d[2](d[0]);
        }] : a.mergeDimensions(b, c);
      }, ", ");
      a.parseBox = d;
      a.mergeBoxes = b;
      a.addPropertiesHandler(d, b, ["clip"]);
    })(d, null);
    (function(a, b) {
      function c(a) {
        return function(b) {
          var c = 0;
          return a.map(function(a) {
            return a === h ? b[c++] : a;
          });
        };
      }
      function d(a) {
        return a;
      }
      function e(a) {
        return a.toFixed(6).replace(".000000", "");
      }
      function f(b, c) {
        if (b.decompositionPair !== c) {
          b.decompositionPair = c;
          var d = a.makeMatrixDecomposition(b);
        }
        if (c.decompositionPair !== b) {
          c.decompositionPair = b;
          var f = a.makeMatrixDecomposition(c);
        }
        return null == d[0] || null == f[0] ? [[!1], [!0], function(a) {
          return a ? c[0].d : b[0].d;
        }] : (d[0].push(0), f[0].push(1), [d, f, function(b) {
          var c = a.quat(d[0][3], f[0][3], b[5]);
          return a.composeMatrix(b[0], b[1], b[2], c, b[4]).map(e).join(",");
        }]);
      }
      function g(a) {
        return a.replace(/(x|y|z|3d)?$/, "3d");
      }
      var h = null, l = {px:0}, A = {deg:0}, C = {matrix:["NNNNNN", [h, h, 0, 0, h, h, 0, 0, 0, 0, 1, 0, h, h, 0, 1], d], matrix3d:["NNNNNNNNNNNNNNNN", d], rotate:["A"], rotatex:["A"], rotatey:["A"], rotatez:["A"], rotate3d:["NNNA"], perspective:["L"], scale:["Nn", c([h, h, 1]), d], scalex:["N", c([h, 1, 1]), c([h, 1])], scaley:["N", c([1, h, 1]), c([1, h])], scalez:["N", c([1, 1, h])], scale3d:["NNN", d], skew:["Aa", null, d], skewx:["A", null, c([h, A])], skewy:["A", null, c([A, h])], translate:["Tt", 
      c([h, h, l]), d], translatex:["T", c([h, l, l]), c([h, l])], translatey:["T", c([l, h, l]), c([l, h])], translatez:["L", c([l, l, h])], translate3d:["TTL", d]};
      a.addPropertiesHandler(function(b) {
        if (b = b.toLowerCase().trim(), "none" == b) {
          return [];
        }
        for (var c, d = /\s*(\w+)\(([^)]*)\)/g, e = [], f = 0; (c = d.exec(b)) && c.index == f;) {
          var f = c.index + c[0].length, g = c[1], h = C[g];
          if (!h) {
            break;
          }
          c = c[2].split(",");
          h = h[0];
          if (h.length < c.length) {
            break;
          }
          for (var m = [], r = 0; r < h.length; r++) {
            var n, p = c[r], q = h[r];
            if (n = p ? {A:function(b) {
              return "0" == b.trim() ? A : a.parseAngle(b);
            }, N:a.parseNumber, T:a.parseLengthOrPercent, L:a.parseLength}[q.toUpperCase()](p) : {a:A, n:m[0], t:l}[q], void 0 === n) {
              return;
            }
            m.push(n);
          }
          if (e.push({t:g, d:m}), d.lastIndex == b.length) {
            return e;
          }
        }
      }, function(b, c) {
        var d = a.makeMatrixDecomposition && !0, e = !1;
        if (!b.length || !c.length) {
          b.length || (e = !0, b = c, c = []);
          for (var h = 0; h < b.length; h++) {
            var l = b[h].t;
            var m = b[h].d, r = "scale" == l.substr(0, 5) ? 1 : 0;
            c.push({t:l, d:m.map(function(a) {
              if ("number" == typeof a) {
                return r;
              }
              var b = {}, c;
              for (c in a) {
                b[c] = r;
              }
              return b;
            })});
          }
        }
        var m = [], n = [], p = [];
        if (b.length != c.length) {
          if (!d) {
            return;
          }
          var q = f(b, c);
          m = [q[0]];
          n = [q[1]];
          p = [["matrix", [q[2]]]];
        } else {
          for (h = 0; h < b.length; h++) {
            l = b[h].t;
            var u = c[h].t, v = b[h].d, A = c[h].d;
            q = C[l];
            var L = C[u];
            if ("perspective" == l && "perspective" == u || !("matrix" != l && "matrix3d" != l || "matrix" != u && "matrix3d" != u)) {
              if (!d) {
                return;
              }
              q = f([b[h]], [c[h]]);
              m.push(q[0]);
              n.push(q[1]);
              p.push(["matrix", [q[2]]]);
            } else {
              if (l != u) {
                if (q[2] && L[2] && l.replace(/[xy]/, "") == u.replace(/[xy]/, "")) {
                  l = l.replace(/[xy]/, ""), v = q[2](v), A = L[2](A);
                } else {
                  if (!q[1] || !L[1] || g(l) != g(u)) {
                    if (!d) {
                      return;
                    }
                    q = f(b, c);
                    m = [q[0]];
                    n = [q[1]];
                    p = [["matrix", [q[2]]]];
                    break;
                  }
                  l = g(l);
                  v = q[1](v);
                  A = L[1](A);
                }
              }
              for (var L = [], u = [], da = [], U = 0; U < v.length; U++) {
                q = ("number" == typeof v[U] ? a.mergeNumbers : a.mergeDimensions)(v[U], A[U]), L[U] = q[0], u[U] = q[1], da.push(q[2]);
              }
              m.push(L);
              n.push(u);
              p.push([l, da]);
            }
          }
        }
        e && (n = m = n);
        return [m, n, function(a) {
          return a.map(function(a, b) {
            a = a.map(function(a, c) {
              return p[b][1][c](a);
            }).join(",");
            return "matrix" == p[b][0] && 16 == a.split(",").length && (p[b][0] = "matrix3d"), p[b][0] + "(" + a + ")";
          }).join(" ");
        }];
      }, ["transform"]);
    })(d, null);
    (function(a, b) {
      function c(a, b) {
        b.concat([a]).forEach(function(b) {
          b in document.documentElement.style && (d[a] = b);
        });
      }
      var d = {};
      c("transform", ["webkitTransform", "msTransform"]);
      c("transformOrigin", ["webkitTransformOrigin"]);
      c("perspective", ["webkitPerspective"]);
      c("perspectiveOrigin", ["webkitPerspectiveOrigin"]);
      a.propertyName = function(a) {
        return d[a] || a;
      };
    })(d, null);
  })();
  !function() {
    if (void 0 === document.createElement("div").animate([]).oncancel) {
      var a = window.performance && performance.now ? function() {
        return performance.now();
      } : function() {
        return Date.now();
      };
      var b = function(a, b, c) {
        this.target = a;
        this.currentTime = b;
        this.timelineTime = c;
        this.type = "cancel";
        this.cancelable = this.bubbles = !1;
        this.currentTarget = a;
        this.defaultPrevented = !1;
        this.eventPhase = Event.AT_TARGET;
        this.timeStamp = Date.now();
      }, c = window.Element.prototype.animate;
      window.Element.prototype.animate = function(d, e) {
        d = c.call(this, d, e);
        d._cancelHandlers = [];
        d.oncancel = null;
        var f = d.cancel;
        d.cancel = function() {
          f.call(this);
          var c = new b(this, null, a()), d = this._cancelHandlers.concat(this.oncancel ? [this.oncancel] : []);
          setTimeout(function() {
            d.forEach(function(a) {
              a.call(c.target, c);
            });
          }, 0);
        };
        var g = d.addEventListener;
        d.addEventListener = function(a, b) {
          "function" == typeof b && "cancel" == a ? this._cancelHandlers.push(b) : g.call(this, a, b);
        };
        var h = d.removeEventListener;
        return d.removeEventListener = function(a, b) {
          "cancel" == a ? (a = this._cancelHandlers.indexOf(b), 0 <= a && this._cancelHandlers.splice(a, 1)) : h.call(this, a, b);
        }, d;
      };
    }
  }();
  (function(a) {
    var b = document.documentElement, c = null, d = !1;
    try {
      var e = "0" == getComputedStyle(b).getPropertyValue("opacity") ? "1" : "0", c = b.animate({opacity:[e, e]}, {duration:1});
      c.currentTime = 0;
      d = getComputedStyle(b).getPropertyValue("opacity") == e;
    } catch (q) {
    } finally {
      c && c.cancel();
    }
    if (!d) {
      var f = window.Element.prototype.animate;
      window.Element.prototype.animate = function(b, c) {
        return window.Symbol && Symbol.iterator && Array.prototype.from && b[Symbol.iterator] && (b = Array.from(b)), Array.isArray(b) || null === b || (b = a.convertToArrayForm(b)), f.call(this, b, c);
      };
    }
  })(c);
  !function(a, b, c) {
    function d(a) {
      var b = window.document.timeline;
      b.currentTime = a;
      b._discardAnimations();
      0 == b._animations.length ? f = !1 : requestAnimationFrame(d);
    }
    var e = window.requestAnimationFrame;
    window.requestAnimationFrame = function(a) {
      return e(function(b) {
        window.document.timeline._updateAnimationsPromises();
        a(b);
        window.document.timeline._updateAnimationsPromises();
      });
    };
    b.AnimationTimeline = function() {
      this._animations = [];
      this.currentTime = void 0;
    };
    b.AnimationTimeline.prototype = {getAnimations:function() {
      return this._discardAnimations(), this._animations.slice();
    }, _updateAnimationsPromises:function() {
      b.animationsWithPromises = b.animationsWithPromises.filter(function(a) {
        return a._updatePromises();
      });
    }, _discardAnimations:function() {
      this._updateAnimationsPromises();
      this._animations = this._animations.filter(function(a) {
        return "finished" != a.playState && "idle" != a.playState;
      });
    }, _play:function(a) {
      a = new b.Animation(a, this);
      return this._animations.push(a), b.restartWebAnimationsNextTick(), a._updatePromises(), a._animation.play(), a._updatePromises(), a;
    }, play:function(a) {
      return a && a.remove(), this._play(a);
    }};
    var f = !1;
    b.restartWebAnimationsNextTick = function() {
      f || (f = !0, requestAnimationFrame(d));
    };
    var g = new b.AnimationTimeline;
    b.timeline = g;
    try {
      Object.defineProperty(window.document, "timeline", {configurable:!0, get:function() {
        return g;
      }});
    } catch (m) {
    }
    try {
      window.document.timeline = g;
    } catch (m) {
    }
  }(c, e, null);
  (function(a, b, c) {
    b.animationsWithPromises = [];
    b.Animation = function(b, c) {
      if (this.id = "", b && b._id && (this.id = b._id), this.effect = b, b && (b._animation = this), !c) {
        throw Error("Animation with null timeline is not supported");
      }
      this._timeline = c;
      this._sequenceNumber = a.sequenceNumber++;
      this._holdTime = 0;
      this._isGroup = this._paused = !1;
      this._animation = null;
      this._childAnimations = [];
      this._callback = null;
      this._oldPlayState = "idle";
      this._rebuildUnderlyingAnimation();
      this._animation.cancel();
      this._updatePromises();
    };
    b.Animation.prototype = {_updatePromises:function() {
      var a = this._oldPlayState, b = this.playState;
      return this._readyPromise && b !== a && ("idle" == b ? (this._rejectReadyPromise(), this._readyPromise = void 0) : "pending" == a ? this._resolveReadyPromise() : "pending" == b && (this._readyPromise = void 0)), this._finishedPromise && b !== a && ("idle" == b ? (this._rejectFinishedPromise(), this._finishedPromise = void 0) : "finished" == b ? this._resolveFinishedPromise() : "finished" == a && (this._finishedPromise = void 0)), this._oldPlayState = this.playState, this._readyPromise || this._finishedPromise;
    }, _rebuildUnderlyingAnimation:function() {
      this._updatePromises();
      var a, c, d, e, f = !!this._animation;
      f && (a = this.playbackRate, c = this._paused, d = this.startTime, e = this.currentTime, this._animation.cancel(), this._animation._wrapper = null, this._animation = null);
      (!this.effect || this.effect instanceof window.KeyframeEffect) && (this._animation = b.newUnderlyingAnimationForKeyframeEffect(this.effect), b.bindAnimationForKeyframeEffect(this));
      (this.effect instanceof window.SequenceEffect || this.effect instanceof window.GroupEffect) && (this._animation = b.newUnderlyingAnimationForGroup(this.effect), b.bindAnimationForGroup(this));
      this.effect && this.effect._onsample && b.bindAnimationForCustomEffect(this);
      f && (1 != a && (this.playbackRate = a), null !== d ? this.startTime = d : null !== e ? this.currentTime = e : null !== this._holdTime && (this.currentTime = this._holdTime), c && this.pause());
      this._updatePromises();
    }, _updateChildren:function() {
      if (this.effect && "idle" != this.playState) {
        var a = this.effect._timing.delay;
        this._childAnimations.forEach(function(c) {
          this._arrangeChildren(c, a);
          this.effect instanceof window.SequenceEffect && (a += b.groupChildDuration(c.effect));
        }.bind(this));
      }
    }, _setExternalAnimation:function(a) {
      if (this.effect && this._isGroup) {
        for (var b = 0; b < this.effect.children.length; b++) {
          this.effect.children[b]._animation = a, this._childAnimations[b]._setExternalAnimation(a);
        }
      }
    }, _constructChildAnimations:function() {
      if (this.effect && this._isGroup) {
        var a = this.effect._timing.delay;
        this._removeChildAnimations();
        this.effect.children.forEach(function(c) {
          var d = window.document.timeline._play(c);
          this._childAnimations.push(d);
          d.playbackRate = this.playbackRate;
          this._paused && d.pause();
          c._animation = this.effect._animation;
          this._arrangeChildren(d, a);
          this.effect instanceof window.SequenceEffect && (a += b.groupChildDuration(c));
        }.bind(this));
      }
    }, _arrangeChildren:function(a, b) {
      null === this.startTime ? a.currentTime = this.currentTime - b / this.playbackRate : a.startTime !== this.startTime + b / this.playbackRate && (a.startTime = this.startTime + b / this.playbackRate);
    }, get timeline() {
      return this._timeline;
    }, get playState() {
      return this._animation ? this._animation.playState : "idle";
    }, get finished() {
      return window.Promise ? (this._finishedPromise || (-1 == b.animationsWithPromises.indexOf(this) && b.animationsWithPromises.push(this), this._finishedPromise = new Promise(function(a, b) {
        this._resolveFinishedPromise = function() {
          a(this);
        };
        this._rejectFinishedPromise = function() {
          b({type:DOMException.ABORT_ERR, name:"AbortError"});
        };
      }.bind(this)), "finished" == this.playState && this._resolveFinishedPromise()), this._finishedPromise) : (console.warn("Animation Promises require JavaScript Promise constructor"), null);
    }, get ready() {
      return window.Promise ? (this._readyPromise || (-1 == b.animationsWithPromises.indexOf(this) && b.animationsWithPromises.push(this), this._readyPromise = new Promise(function(a, b) {
        this._resolveReadyPromise = function() {
          a(this);
        };
        this._rejectReadyPromise = function() {
          b({type:DOMException.ABORT_ERR, name:"AbortError"});
        };
      }.bind(this)), "pending" !== this.playState && this._resolveReadyPromise()), this._readyPromise) : (console.warn("Animation Promises require JavaScript Promise constructor"), null);
    }, get onfinish() {
      return this._animation.onfinish;
    }, set onfinish(a) {
      "function" == typeof a ? this._animation.onfinish = function(b) {
        b.target = this;
        a.call(this, b);
      }.bind(this) : this._animation.onfinish = a;
    }, get oncancel() {
      return this._animation.oncancel;
    }, set oncancel(a) {
      "function" == typeof a ? this._animation.oncancel = function(b) {
        b.target = this;
        a.call(this, b);
      }.bind(this) : this._animation.oncancel = a;
    }, get currentTime() {
      this._updatePromises();
      var a = this._animation.currentTime;
      return this._updatePromises(), a;
    }, set currentTime(a) {
      this._updatePromises();
      this._animation.currentTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
      this._register();
      this._forEachChild(function(b, c) {
        b.currentTime = a - c;
      });
      this._updatePromises();
    }, get startTime() {
      return this._animation.startTime;
    }, set startTime(a) {
      this._updatePromises();
      this._animation.startTime = isFinite(a) ? a : Math.sign(a) * Number.MAX_VALUE;
      this._register();
      this._forEachChild(function(b, c) {
        b.startTime = a + c;
      });
      this._updatePromises();
    }, get playbackRate() {
      return this._animation.playbackRate;
    }, set playbackRate(a) {
      this._updatePromises();
      var b = this.currentTime;
      this._animation.playbackRate = a;
      this._forEachChild(function(b) {
        b.playbackRate = a;
      });
      "paused" != this.playState && "idle" != this.playState && this.play();
      null !== b && (this.currentTime = b);
      this._updatePromises();
    }, play:function() {
      this._updatePromises();
      this._paused = !1;
      this._animation.play();
      -1 == this._timeline._animations.indexOf(this) && this._timeline._animations.push(this);
      this._register();
      b.awaitStartTime(this);
      this._forEachChild(function(a) {
        var b = a.currentTime;
        a.play();
        a.currentTime = b;
      });
      this._updatePromises();
    }, pause:function() {
      this._updatePromises();
      this.currentTime && (this._holdTime = this.currentTime);
      this._animation.pause();
      this._register();
      this._forEachChild(function(a) {
        a.pause();
      });
      this._paused = !0;
      this._updatePromises();
    }, finish:function() {
      this._updatePromises();
      this._animation.finish();
      this._register();
      this._updatePromises();
    }, cancel:function() {
      this._updatePromises();
      this._animation.cancel();
      this._register();
      this._removeChildAnimations();
      this._updatePromises();
    }, reverse:function() {
      this._updatePromises();
      var a = this.currentTime;
      this._animation.reverse();
      this._forEachChild(function(a) {
        a.reverse();
      });
      null !== a && (this.currentTime = a);
      this._updatePromises();
    }, addEventListener:function(a, b) {
      var c = b;
      "function" == typeof b && (c = function(a) {
        a.target = this;
        b.call(this, a);
      }.bind(this), b._wrapper = c);
      this._animation.addEventListener(a, c);
    }, removeEventListener:function(a, b) {
      this._animation.removeEventListener(a, b && b._wrapper || b);
    }, _removeChildAnimations:function() {
      for (; this._childAnimations.length;) {
        this._childAnimations.pop().cancel();
      }
    }, _forEachChild:function(b) {
      var c = 0;
      if (this.effect.children && this._childAnimations.length < this.effect.children.length && this._constructChildAnimations(), this._childAnimations.forEach(function(a) {
        b.call(this, a, c);
        this.effect instanceof window.SequenceEffect && (c += a.effect.activeDuration);
      }.bind(this)), "pending" != this.playState) {
        var d = this.effect._timing, e = this.currentTime;
        null !== e && (e = a.calculateTimeFraction(a.calculateActiveDuration(d), e, d));
        (null == e || isNaN(e)) && this._removeChildAnimations();
      }
    }};
    window.Animation = b.Animation;
  })(c, e, null);
  (function(a, b, c) {
    function d(b) {
      this._frames = a.normalizeKeyframes(b);
    }
    function e() {
      for (var a = !1; r.length;) {
        r.shift()._updateChildren(), a = !0;
      }
      return a;
    }
    var f = function(a) {
      if (a._animation = void 0, a instanceof window.SequenceEffect || a instanceof window.GroupEffect) {
        for (var b = 0; b < a.children.length; b++) {
          f(a.children[b]);
        }
      }
    };
    b.removeMulti = function(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];
        d._parent ? (-1 == b.indexOf(d._parent) && b.push(d._parent), d._parent.children.splice(d._parent.children.indexOf(d), 1), d._parent = null, f(d)) : d._animation && d._animation.effect == d && (d._animation.cancel(), d._animation.effect = new KeyframeEffect(null, []), d._animation._callback && (d._animation._callback._animation = null), d._animation._rebuildUnderlyingAnimation(), f(d));
      }
      for (c = 0; c < b.length; c++) {
        b[c]._rebuild();
      }
    };
    b.KeyframeEffect = function(b, c, e, f) {
      return this.target = b, this._parent = null, e = a.numericTimingToObject(e), this._timingInput = a.cloneTimingInput(e), this._timing = a.normalizeTimingInput(e), this.timing = a.makeTiming(e, !1, this), this.timing._effect = this, "function" == typeof c ? (a.deprecated("Custom KeyframeEffect", "2015-06-22", "Use KeyframeEffect.onsample instead."), this._normalizedKeyframes = c) : this._normalizedKeyframes = new d(c), this._keyframes = c, this.activeDuration = a.calculateActiveDuration(this._timing), 
      this._id = f, this;
    };
    b.KeyframeEffect.prototype = {getFrames:function() {
      return "function" == typeof this._normalizedKeyframes ? this._normalizedKeyframes : this._normalizedKeyframes._frames;
    }, set onsample(a) {
      if ("function" == typeof this.getFrames()) {
        throw Error("Setting onsample on custom effect KeyframeEffect is not supported.");
      }
      this._onsample = a;
      this._animation && this._animation._rebuildUnderlyingAnimation();
    }, get parent() {
      return this._parent;
    }, clone:function() {
      if ("function" == typeof this.getFrames()) {
        throw Error("Cloning custom effects is not supported.");
      }
      var b = new KeyframeEffect(this.target, [], a.cloneTimingInput(this._timingInput), this._id);
      return b._normalizedKeyframes = this._normalizedKeyframes, b._keyframes = this._keyframes, b;
    }, remove:function() {
      b.removeMulti([this]);
    }};
    var g = Element.prototype.animate;
    Element.prototype.animate = function(a, c) {
      var d = "";
      return c && c.id && (d = c.id), b.timeline._play(new b.KeyframeEffect(this, a, c, d));
    };
    var h = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
    b.newUnderlyingAnimationForKeyframeEffect = function(a) {
      if (a) {
        var b = a.target || h;
        var c = a._keyframes;
        "function" == typeof c && (c = []);
        var d = a._timingInput;
        d.id = a._id;
      } else {
        b = h, c = [], d = 0;
      }
      return g.apply(b, [c, d]);
    };
    b.bindAnimationForKeyframeEffect = function(a) {
      a.effect && "function" == typeof a.effect._normalizedKeyframes && b.bindAnimationForCustomEffect(a);
    };
    var r = [];
    b.awaitStartTime = function(a) {
      null === a.startTime && a._isGroup && (0 == r.length && requestAnimationFrame(e), r.push(a));
    };
    var u = window.getComputedStyle;
    Object.defineProperty(window, "getComputedStyle", {configurable:!0, enumerable:!0, value:function() {
      window.document.timeline._updateAnimationsPromises();
      var a = u.apply(this, arguments);
      return e() && (a = u.apply(this, arguments)), window.document.timeline._updateAnimationsPromises(), a;
    }});
    window.KeyframeEffect = b.KeyframeEffect;
    window.Element.prototype.getAnimations = function() {
      return document.timeline.getAnimations().filter(function(a) {
        return null !== a.effect && a.effect.target == this;
      }.bind(this));
    };
  })(c, e, null);
  (function(a, b, c) {
    function d(a) {
      a._registered || (a._registered = !0, g.push(a), h || (h = !0, requestAnimationFrame(e)));
    }
    function e(a) {
      a = g;
      g = [];
      a.sort(function(a, b) {
        return a._sequenceNumber - b._sequenceNumber;
      });
      a = a.filter(function(a) {
        a();
        var b = a._animation ? a._animation.playState : "idle";
        return "running" != b && "pending" != b && (a._registered = !1), a._registered;
      });
      g.push.apply(g, a);
      g.length ? (h = !0, requestAnimationFrame(e)) : h = !1;
    }
    var f = (document.createElementNS("http://www.w3.org/1999/xhtml", "div"), 0);
    b.bindAnimationForCustomEffect = function(b) {
      var c = b.effect.target, e = "function" == typeof b.effect.getFrames();
      var g = e ? b.effect.getFrames() : b.effect._onsample;
      var h = b.effect.timing, m = null, h = a.normalizeTimingInput(h), l = function() {
        var d = l._animation ? l._animation.currentTime : null;
        null !== d && (d = a.calculateTimeFraction(a.calculateActiveDuration(h), d, h), isNaN(d) && (d = null));
        d !== m && (e ? g(d, c, b.effect) : g(d, b.effect, b.effect._animation));
        m = d;
      };
      l._animation = b;
      l._registered = !1;
      l._sequenceNumber = f++;
      b._callback = l;
      d(l);
    };
    var g = [], h = !1;
    b.Animation.prototype._register = function() {
      this._callback && d(this._callback);
    };
  })(c, e, null);
  (function(a, b, c) {
    function d(a) {
      return a._timing.delay + a.activeDuration + a._timing.endDelay;
    }
    function e(b, c, d) {
      this._id = d;
      this._parent = null;
      this.children = b || [];
      this._reparent(this.children);
      c = a.numericTimingToObject(c);
      this._timingInput = a.cloneTimingInput(c);
      this._timing = a.normalizeTimingInput(c, !0);
      this.timing = a.makeTiming(c, !0, this);
      this.timing._effect = this;
      "auto" === this._timing.duration && (this._timing.duration = this.activeDuration);
    }
    window.SequenceEffect = function() {
      e.apply(this, arguments);
    };
    window.GroupEffect = function() {
      e.apply(this, arguments);
    };
    e.prototype = {_isAncestor:function(a) {
      for (var b = this; null !== b;) {
        if (b == a) {
          return !0;
        }
        b = b._parent;
      }
      return !1;
    }, _rebuild:function() {
      for (var a = this; a;) {
        "auto" === a.timing.duration && (a._timing.duration = a.activeDuration), a = a._parent;
      }
      this._animation && this._animation._rebuildUnderlyingAnimation();
    }, _reparent:function(a) {
      b.removeMulti(a);
      for (var c = 0; c < a.length; c++) {
        a[c]._parent = this;
      }
    }, _putChild:function(a, b) {
      for (var c = b ? "Cannot append an ancestor or self" : "Cannot prepend an ancestor or self", d = 0; d < a.length; d++) {
        if (this._isAncestor(a[d])) {
          throw {type:DOMException.HIERARCHY_REQUEST_ERR, name:"HierarchyRequestError", message:c};
        }
      }
      for (d = 0; d < a.length; d++) {
        b ? this.children.push(a[d]) : this.children.unshift(a[d]);
      }
      this._reparent(a);
      this._rebuild();
    }, append:function() {
      this._putChild(arguments, !0);
    }, prepend:function() {
      this._putChild(arguments, !1);
    }, get parent() {
      return this._parent;
    }, get firstChild() {
      return this.children.length ? this.children[0] : null;
    }, get lastChild() {
      return this.children.length ? this.children[this.children.length - 1] : null;
    }, clone:function() {
      for (var b = a.cloneTimingInput(this._timingInput), c = [], d = 0; d < this.children.length; d++) {
        c.push(this.children[d].clone());
      }
      return this instanceof GroupEffect ? new GroupEffect(c, b) : new SequenceEffect(c, b);
    }, remove:function() {
      b.removeMulti([this]);
    }};
    window.SequenceEffect.prototype = Object.create(e.prototype);
    Object.defineProperty(window.SequenceEffect.prototype, "activeDuration", {get:function() {
      var a = 0;
      return this.children.forEach(function(b) {
        a += d(b);
      }), Math.max(a, 0);
    }});
    window.GroupEffect.prototype = Object.create(e.prototype);
    Object.defineProperty(window.GroupEffect.prototype, "activeDuration", {get:function() {
      var a = 0;
      return this.children.forEach(function(b) {
        a = Math.max(a, d(b));
      }), a;
    }});
    b.newUnderlyingAnimationForGroup = function(c) {
      var d, e = null;
      c = new KeyframeEffect(null, [], c._timing, c._id);
      return c.onsample = function(b) {
        var c = d._wrapper;
        return c && "pending" != c.playState && c.effect ? null == b ? void c._removeChildAnimations() : 0 == b && 0 > c.playbackRate && (e || (e = a.normalizeTimingInput(c.effect.timing)), b = a.calculateTimeFraction(a.calculateActiveDuration(e), -1, e), isNaN(b) || null == b) ? (c._forEachChild(function(a) {
          a.currentTime = -1;
        }), void c._removeChildAnimations()) : void 0 : void 0;
      }, d = b.timeline._play(c);
    };
    b.bindAnimationForGroup = function(a) {
      a._animation._wrapper = a;
      a._isGroup = !0;
      b.awaitStartTime(a);
      a._constructChildAnimations();
      a._setExternalAnimation(a);
    };
    b.groupChildDuration = d;
  })(c, e, null);
  b["true"] = a;
}({}, function() {
  return this;
}());
Polymer({is:"cascaded-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  this._animations = [];
  var b = a.nodes, c = [], d = a.nodeDelay || 50;
  a.timing = a.timing || {};
  a.timing.delay = a.timing.delay || 0;
  for (var e = a.timing.delay, f, g, h = 0; g = b[h]; h++) {
    if (a.timing.delay += d, a.node = g, g = document.createElement(a.animation), g.isNeonAnimation) {
      var l = g.configure(a);
      this._animations.push(g);
      c.push(l);
    } else {
      console.warn(this.is + ":", a.animation, "not found!");
      f = !0;
      break;
    }
  }
  a.timing.delay = e;
  a.node = null;
  if (!f) {
    return this._effect = new GroupEffect(c);
  }
}, complete:function() {
  for (var a, b = 0; a = this._animations[b]; b++) {
    a.complete(a.config);
  }
}});
Polymer({is:"fade-in-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  return this._effect = new KeyframeEffect(a.node, [{opacity:"0"}, {opacity:"1"}], this.timingFromConfig(a));
}});
Polymer({is:"fade-out-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  return this._effect = new KeyframeEffect(a.node, [{opacity:"1"}, {opacity:"0"}], this.timingFromConfig(a));
}});
Polymer.NeonSharedElementAnimationBehaviorImpl = {properties:{sharedElements:{type:Object}}, findSharedElements:function(a) {
  var b = a.fromPage, c = a.toPage;
  if (!b || !c) {
    return console.warn(this.is + ":", b ? "toPage" : "fromPage", "is undefined!"), null;
  }
  if (!b.sharedElements || !c.sharedElements) {
    return console.warn(this.is + ":", "sharedElements are undefined for", b.sharedElements ? c : b), null;
  }
  var d = b.sharedElements[a.id], e = c.sharedElements[a.id];
  return d && e ? this.sharedElements = {from:d, to:e} : (console.warn(this.is + ":", "sharedElement with id", a.id, "not found in", d ? c : b), null);
}};
Polymer.NeonSharedElementAnimationBehavior = [Polymer.NeonAnimationBehavior, Polymer.NeonSharedElementAnimationBehaviorImpl];
Polymer({is:"hero-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (b) {
    var c = b.from.getBoundingClientRect(), d = b.to.getBoundingClientRect();
    this._effect = new KeyframeEffect(b.to, [{transform:"translate(" + (c.left - d.left) + "px," + (c.top - d.top) + "px) scale(" + c.width / d.width + "," + c.height / d.height + ")"}, {transform:"none"}], this.timingFromConfig(a));
    this.setPrefixedProperty(b.to, "transformOrigin", "0 0");
    b.to.style.zIndex = 10000;
    b.from.style.visibility = "hidden";
    return this._effect;
  }
}, complete:function(a) {
  a = this.findSharedElements(a);
  if (!a) {
    return null;
  }
  a.to.style.zIndex = "";
  a.from.style.visibility = "";
}});
Polymer({is:"opaque-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{opacity:"1"}, {opacity:"1"}], this.timingFromConfig(a));
  b.style.opacity = "0";
  return this._effect;
}, complete:function(a) {
  a.node.style.opacity = "";
}});
Polymer({is:"ripple-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (!b) {
    return null;
  }
  var c = b.to.getBoundingClientRect();
  if (a.gesture) {
    var d = a.gesture.x - (c.left + c.width / 2);
    var e = a.gesture.y - (c.top + c.height / 2);
  } else {
    var f = b.from.getBoundingClientRect();
    d = f.left + f.width / 2 - (c.left + c.width / 2);
    e = f.top + f.height / 2 - (c.top + c.height / 2);
  }
  f = "translate(" + d + "px," + e + "px)";
  d = Math.max(c.width + 2 * Math.abs(d), c.height + 2 * Math.abs(e));
  d = Math.sqrt(2 * d * d);
  this._effect = new KeyframeEffect(b.to, [{transform:f + " scale(0)"}, {transform:f + " " + ("scale(" + d / c.width + "," + d / c.height + ")")}], this.timingFromConfig(a));
  this.setPrefixedProperty(b.to, "transformOrigin", "50% 50%");
  b.to.style.borderRadius = "50%";
  return this._effect;
}, complete:function() {
  this.sharedElements && (this.setPrefixedProperty(this.sharedElements.to, "transformOrigin", ""), this.sharedElements.to.style.borderRadius = "");
}});
Polymer({is:"scale-down-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = "scale(0, 0)";
  "x" === a.axis ? c = "scale(0, 1)" : "y" === a.axis && (c = "scale(1, 0)");
  this._effect = new KeyframeEffect(b, [{transform:"scale(1,1)"}, {transform:c}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer({is:"scale-up-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = "scale(0)";
  "x" === a.axis ? c = "scale(0, 1)" : "y" === a.axis && (c = "scale(1, 0)");
  this._effect = new KeyframeEffect(b, [{transform:c}, {transform:"scale(1, 1)"}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer({is:"slide-down-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(0%)"}, {transform:"translateY(100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-up-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translate(0)"}, {transform:"translateY(-100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"transform-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:a.transformFrom || "none"}, {transform:a.transformTo || "none"}], this.timingFromConfig(a));
  a.transformOrigin && this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin);
  return this._effect;
}});
Polymer.NeonAnimatableBehavior = {properties:{animationConfig:{type:Object}, entryAnimation:{observer:"_entryAnimationChanged", type:String}, exitAnimation:{observer:"_exitAnimationChanged", type:String}}, _entryAnimationChanged:function() {
  this.animationConfig = this.animationConfig || {};
  this.animationConfig.entry = [{name:this.entryAnimation, node:this}];
}, _exitAnimationChanged:function() {
  this.animationConfig = this.animationConfig || {};
  this.animationConfig.exit = [{name:this.exitAnimation, node:this}];
}, _copyProperties:function(a, b) {
  for (var c in b) {
    a[c] = b[c];
  }
}, _cloneConfig:function(a) {
  var b = {isClone:!0};
  this._copyProperties(b, a);
  return b;
}, _getAnimationConfigRecursive:function(a, b, c) {
  if (this.animationConfig) {
    if (this.animationConfig.value && "function" === typeof this.animationConfig.value) {
      this._warn(this._logf("playAnimation", "Please put 'animationConfig' inside of your components 'properties' object instead of outside of it."));
    } else {
      var d = a ? this.animationConfig[a] : this.animationConfig;
      Array.isArray(d) || (d = [d]);
      if (d) {
        for (var e, f = 0; e = d[f]; f++) {
          if (e.animatable) {
            e.animatable._getAnimationConfigRecursive(e.type || a, b, c);
          } else {
            if (e.id) {
              var g = b[e.id];
              g ? (g.isClone || (b[e.id] = this._cloneConfig(g), g = b[e.id]), this._copyProperties(g, e)) : b[e.id] = e;
            } else {
              c.push(e);
            }
          }
        }
      }
    }
  }
}, getAnimationConfig:function(a) {
  var b = {}, c = [];
  this._getAnimationConfigRecursive(a, b, c);
  for (var d in b) {
    c.push(b[d]);
  }
  return c;
}};
Polymer.NeonAnimationRunnerBehaviorImpl = {properties:{_player:{type:Object}}, _configureAnimationEffects:function(a) {
  var b = [];
  if (0 < a.length) {
    for (var c, d = 0; c = a[d]; d++) {
      var e = document.createElement(c.name);
      if (e.isNeonAnimation) {
        var f = e.configure(c);
        f && b.push({animation:e, config:c, effect:f});
      } else {
        console.warn(this.is + ":", c.name, "not found!");
      }
    }
  }
  return b;
}, _runAnimationEffects:function(a) {
  return document.timeline.play(new GroupEffect(a));
}, _completeAnimations:function(a) {
  for (var b, c = 0; b = a[c]; c++) {
    b.animation.complete(b.config);
  }
}, playAnimation:function(a, b) {
  var c = this.getAnimationConfig(a);
  if (c) {
    try {
      var d = this._configureAnimationEffects(c), e = d.map(function(a) {
        return a.effect;
      });
      if (0 < e.length) {
        this._player = this._runAnimationEffects(e);
        this._player.onfinish = function() {
          this._completeAnimations(d);
          this._player && (this._player.cancel(), this._player = null);
          this.fire("neon-animation-finish", b, {bubbles:!1});
        }.bind(this);
        return;
      }
    } catch (f) {
      console.warn("Couldnt play", "(", a, c, ").", f);
    }
    this.fire("neon-animation-finish", b, {bubbles:!1});
  }
}, cancelAnimation:function() {
  this._player && this._player.cancel();
}};
Polymer.NeonAnimationRunnerBehavior = [Polymer.NeonAnimatableBehavior, Polymer.NeonAnimationRunnerBehaviorImpl];
(function() {
  Polymer({is:"neon-animated-pages", behaviors:[Polymer.IronResizableBehavior, Polymer.IronSelectableBehavior, Polymer.NeonAnimationRunnerBehavior], properties:{activateEvent:{type:String, value:""}, animateInitialSelection:{type:Boolean, value:!1}}, listeners:{"iron-select":"_onIronSelect", "neon-animation-finish":"_onNeonAnimationFinish"}, _onIronSelect:function(a) {
    var b = a.detail.item;
    0 > this.items.indexOf(b) || (a = this._valueToItem(this._prevSelected) || !1, this._prevSelected = this.selected, a || this.animateInitialSelection ? (this.animationConfig = [], this.animationConfig = [], this.entryAnimation ? this.animationConfig.push({name:this.entryAnimation, node:b}) : b.getAnimationConfig && this.animationConfig.push({animatable:b, type:"entry"}), a && (a.classList.contains("neon-animating") && (this._squelchNextFinishEvent = !0, this.cancelAnimation(), this._completeSelectedChanged(), 
    this._squelchNextFinishEvent = !1), this.exitAnimation ? this.animationConfig.push({name:this.exitAnimation, node:a}) : a.getAnimationConfig && this.animationConfig.push({animatable:a, type:"exit"}), a.classList.add("neon-animating")), b.classList.add("neon-animating"), 1 <= this.animationConfig.length ? this.isAttached ? this.playAnimation(void 0, {fromPage:a, toPage:b}) : this.async(function() {
      this.playAnimation(void 0, {fromPage:null, toPage:b});
    }) : this._completeSelectedChanged(a, b)) : this._completeSelectedChanged());
  }, _completeSelectedChanged:function(a, b) {
    b && b.classList.remove("neon-animating");
    a && a.classList.remove("neon-animating");
    if (!b || !a) {
      a = Polymer.dom(this.$.content).getDistributedNodes();
      for (var c = 0; b = a[c]; c++) {
        b.classList && b.classList.remove("neon-animating");
      }
    }
    this.async(this._notifyPageResize);
  }, _onNeonAnimationFinish:function(a) {
    this._squelchNextFinishEvent ? this._squelchNextFinishEvent = !1 : this._completeSelectedChanged(a.detail.fromPage, a.detail.toPage);
  }, _notifyPageResize:function() {
    var a = this.selectedItem || this._valueToItem(this.selected);
    this.resizerShouldNotify = function(b) {
      return b == a;
    };
    this.notifyResize();
  }});
})();
Polymer({is:"neon-animatable", behaviors:[Polymer.NeonAnimatableBehavior, Polymer.IronResizableBehavior]});
Polymer({is:"reverse-ripple-animation", behaviors:[Polymer.NeonSharedElementAnimationBehavior], configure:function(a) {
  var b = this.findSharedElements(a);
  if (!b) {
    return null;
  }
  var c = b.from.getBoundingClientRect();
  if (a.gesture) {
    var d = a.gesture.x - (c.left + c.width / 2);
    var e = a.gesture.y - (c.top + c.height / 2);
  } else {
    var f = b.to.getBoundingClientRect();
    d = f.left + f.width / 2 - (c.left + c.width / 2);
    e = f.top + f.height / 2 - (c.top + c.height / 2);
  }
  f = "translate(" + d + "px," + e + "px)";
  d = Math.max(c.width + 2 * Math.abs(d), c.height + 2 * Math.abs(e));
  d = Math.sqrt(2 * d * d);
  this._effect = new KeyframeEffect(b.from, [{transform:f + " " + ("scale(" + d / c.width + "," + d / c.height + ")")}, {transform:f + " scale(0)"}], this.timingFromConfig(a));
  this.setPrefixedProperty(b.from, "transformOrigin", "50% 50%");
  b.from.style.borderRadius = "50%";
  return this._effect;
}, complete:function() {
  this.sharedElements && (this.setPrefixedProperty(this.sharedElements.from, "transformOrigin", ""), this.sharedElements.from.style.borderRadius = "");
}});
Polymer({is:"slide-from-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(-100%)"}, {transform:"none"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-from-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(100%)"}, {transform:"none"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-from-top-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(-100%)"}, {transform:"translateY(0%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-from-bottom-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateY(100%)"}, {transform:"translateY(0)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "50% 0");
  return this._effect;
}});
Polymer({is:"slide-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none"}, {transform:"translateX(-100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"slide-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none"}, {transform:"translateX(100%)"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer.NeonSharedElementAnimatableBehaviorImpl = {properties:{sharedElements:{type:Object, value:{}}}};
Polymer.NeonSharedElementAnimatableBehavior = [Polymer.NeonAnimatableBehavior, Polymer.NeonSharedElementAnimatableBehaviorImpl];
Polymer({is:"paper-card", properties:{heading:{type:String, value:"", observer:"_headingChanged"}, image:{type:String, value:""}, preloadImage:{type:Boolean, value:!1}, fadeImage:{type:Boolean, value:!1}, elevation:{type:Number, value:1, reflectToAttribute:!0}, animatedShadow:{type:Boolean, value:!1}, animated:{type:Boolean, reflectToAttribute:!0, readOnly:!0, computed:"_computeAnimated(animatedShadow)"}}, _headingChanged:function(a) {
  this.getAttribute("aria-label");
  this.setAttribute("aria-label", a);
}, _computeHeadingClass:function(a) {
  var b = "title-text";
  a && (b += " over-image");
  return b;
}, _computeAnimated:function(a) {
  return a;
}});
Polymer.IronCheckedElementBehaviorImpl = {properties:{checked:{type:Boolean, value:!1, reflectToAttribute:!0, notify:!0, observer:"_checkedChanged"}, toggles:{type:Boolean, value:!0, reflectToAttribute:!0}, value:{type:String, value:"on", observer:"_valueChanged"}}, observers:["_requiredChanged(required)"], created:function() {
  this._hasIronCheckedElementBehavior = !0;
}, _getValidity:function(a) {
  return this.disabled || !this.required || this.required && this.checked;
}, _requiredChanged:function() {
  this.required ? this.setAttribute("aria-required", "true") : this.removeAttribute("aria-required");
}, _checkedChanged:function() {
  this.active = this.checked;
  this.fire("iron-change");
}, _valueChanged:function() {
  if (void 0 === this.value || null === this.value) {
    this.value = "on";
  }
}};
Polymer.IronCheckedElementBehavior = [Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior, Polymer.IronCheckedElementBehaviorImpl];
Polymer.PaperInkyFocusBehaviorImpl = {observers:["_focusedChanged(receivedFocusFromKeyboard)"], _focusedChanged:function(a) {
  a && this.ensureRipple();
  this.hasRipple() && (this._ripple.holdDown = a);
}, _createRipple:function() {
  var a = Polymer.PaperRippleBehavior._createRipple();
  a.id = "ink";
  a.setAttribute("center", "");
  a.classList.add("circle");
  return a;
}};
Polymer.PaperInkyFocusBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperRippleBehavior, Polymer.PaperInkyFocusBehaviorImpl];
Polymer.PaperCheckedElementBehaviorImpl = {_checkedChanged:function() {
  Polymer.IronCheckedElementBehaviorImpl._checkedChanged.call(this);
  this.hasRipple() && (this.checked ? this._ripple.setAttribute("checked", "") : this._ripple.removeAttribute("checked"));
}, _buttonStateChanged:function() {
  Polymer.PaperRippleBehavior._buttonStateChanged.call(this);
  !this.disabled && this.isAttached && (this.checked = this.active);
}};
Polymer.PaperCheckedElementBehavior = [Polymer.PaperInkyFocusBehavior, Polymer.IronCheckedElementBehavior, Polymer.PaperCheckedElementBehaviorImpl];
Polymer({is:"paper-checkbox", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"checkbox", "aria-checked":!1, tabindex:0}, properties:{ariaActiveAttribute:{type:String, value:"aria-checked"}}, _computeCheckboxClass:function(a, b) {
  var c = "";
  a && (c += "checked ");
  b && (c += "invalid");
  return c;
}, _computeCheckmarkClass:function(a) {
  return a ? "" : "hidden";
}, _createRipple:function() {
  this._rippleContainer = this.$.checkboxContainer;
  return Polymer.PaperInkyFocusBehaviorImpl._createRipple.call(this);
}});
Polymer.PaperDialogBehaviorImpl = {hostAttributes:{role:"dialog", tabindex:"-1"}, properties:{modal:{type:Boolean, value:!1}}, observers:["_modalChanged(modal, _readied)"], listeners:{tap:"_onDialogClick"}, ready:function() {
  this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;
  this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;
  this.__prevWithBackdrop = this.withBackdrop;
}, _modalChanged:function(a, b) {
  a ? this.setAttribute("aria-modal", "true") : this.setAttribute("aria-modal", "false");
  b && (a ? (this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick, this.__prevNoCancelOnEscKey = this.noCancelOnEscKey, this.__prevWithBackdrop = this.withBackdrop, this.withBackdrop = this.noCancelOnEscKey = this.noCancelOnOutsideClick = !0) : (this.noCancelOnOutsideClick = this.noCancelOnOutsideClick && this.__prevNoCancelOnOutsideClick, this.noCancelOnEscKey = this.noCancelOnEscKey && this.__prevNoCancelOnEscKey, this.withBackdrop = this.withBackdrop && this.__prevWithBackdrop));
}, _updateClosingReasonConfirmed:function(a) {
  this.closingReason = this.closingReason || {};
  this.closingReason.confirmed = a;
}, _onDialogClick:function(a) {
  for (var b = Polymer.dom(a).path, c = 0; c < b.indexOf(this); c++) {
    var d = b[c];
    if (d.hasAttribute && (d.hasAttribute("dialog-dismiss") || d.hasAttribute("dialog-confirm"))) {
      this._updateClosingReasonConfirmed(d.hasAttribute("dialog-confirm"));
      this.close();
      a.stopPropagation();
      break;
    }
  }
}};
Polymer.PaperDialogBehavior = [Polymer.IronOverlayBehavior, Polymer.PaperDialogBehaviorImpl];
(function() {
  Polymer({is:"paper-dialog", behaviors:[Polymer.PaperDialogBehavior, Polymer.NeonAnimationRunnerBehavior], listeners:{"neon-animation-finish":"_onNeonAnimationFinish"}, _renderOpened:function() {
    this.cancelAnimation();
    this.withBackdrop && this.backdropElement.open();
    this.playAnimation("entry");
  }, _renderClosed:function() {
    this.cancelAnimation();
    this.withBackdrop && this.backdropElement.close();
    this.playAnimation("exit");
  }, _onNeonAnimationFinish:function() {
    this.opened ? this._finishRenderOpened() : this._finishRenderClosed();
  }});
})();
Polymer({is:"paper-dialog-scrollable", properties:{dialogElement:{type:Object}}, listeners:{"scrollable.scroll":"_scroll"}, get scrollTarget() {
  return this.$.scrollable;
}, ready:function() {
  this._ensureTarget();
}, attached:function() {
  this.classList.add("no-padding");
  this._ensureTarget();
  requestAnimationFrame(this._scroll.bind(this));
}, _scroll:function() {
  this.toggleClass("is-scrolled", 0 < this.scrollTarget.scrollTop);
  this.toggleClass("can-scroll", this.scrollTarget.offsetHeight < this.scrollTarget.scrollHeight);
  this.toggleClass("scrolled-to-bottom", this.scrollTarget.scrollTop + this.scrollTarget.offsetHeight >= this.scrollTarget.scrollHeight);
}, _ensureTarget:function() {
  (this.dialogElement = this.dialogElement || Polymer.dom(this).parentNode) && this.dialogElement.behaviors && 0 <= this.dialogElement.behaviors.indexOf(Polymer.PaperDialogBehaviorImpl) ? (this.dialogElement.sizingTarget = this.scrollTarget, this.scrollTarget.classList.remove("fit")) : this.dialogElement && this.scrollTarget.classList.add("fit");
}});
(function() {
  var a = null;
  Polymer({is:"paper-drawer-panel", behaviors:[Polymer.IronResizableBehavior], properties:{defaultSelected:{type:String, value:"main"}, disableEdgeSwipe:{type:Boolean, value:!1}, disableSwipe:{type:Boolean, value:!1}, dragging:{type:Boolean, value:!1, readOnly:!0, notify:!0}, drawerWidth:{type:String, value:"256px"}, edgeSwipeSensitivity:{type:Number, value:30}, forceNarrow:{type:Boolean, value:!1}, hasTransform:{type:Boolean, value:function() {
    return "transform" in this.style;
  }}, hasWillChange:{type:Boolean, value:function() {
    return "willChange" in this.style;
  }}, narrow:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, peeking:{type:Boolean, value:!1, readOnly:!0, notify:!0}, responsiveWidth:{type:String, value:"600px"}, rightDrawer:{type:Boolean, value:!1}, selected:{reflectToAttribute:!0, notify:!0, type:String, value:null}, drawerToggleAttribute:{type:String, value:"paper-drawer-toggle"}, drawerFocusSelector:{type:String, value:'a[href]:not([tabindex="-1"]),area[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),iframe:not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])'}, 
  _transition:{type:Boolean, value:!1}}, listeners:{tap:"_onTap", track:"_onTrack", down:"_downHandler", up:"_upHandler", transitionend:"_onTransitionEnd"}, observers:["_forceNarrowChanged(forceNarrow, defaultSelected)", "_toggleFocusListener(selected)"], ready:function() {
    this._transition = !0;
    this._boundFocusListener = this._didFocus.bind(this);
  }, togglePanel:function() {
    this._isMainSelected() ? this.openDrawer() : this.closeDrawer();
  }, openDrawer:function() {
    this.selected = "drawer";
  }, closeDrawer:function() {
    this.selected = "main";
  }, _onTransitionEnd:function(a) {
    Polymer.dom(a).localTarget === this && ("left" !== a.propertyName && "right" !== a.propertyName || this.notifyResize(), "transform" === a.propertyName && "drawer" === this.selected && (a = this._getAutoFocusedNode()) && a.focus());
  }, _computeIronSelectorClass:function(a, c, d, e, f) {
    a = {dragging:d, "narrow-layout":a, "right-drawer":e, "left-drawer":!e, transition:c, peeking:f};
    c = [];
    for (var b in a) {
      a.hasOwnProperty(b) && a[b] && c.push(b);
    }
    return c.join(" ");
  }, _computeDrawerStyle:function(a) {
    return "width:" + a + ";";
  }, _computeMainStyle:function(a, c, d) {
    var b = "" + ("left:" + (a || c ? "0" : d) + ";");
    c && (b += "right:" + (a ? "" : d) + ";");
    return b;
  }, _computeMediaQuery:function(a, c) {
    return a ? "" : "(max-width: " + c + ")";
  }, _computeSwipeOverlayHidden:function(a, c) {
    return !a || c;
  }, _onTrack:function(b) {
    if (!a || this === a) {
      switch(b.detail.state) {
        case "start":
          this._trackStart(b);
          break;
        case "track":
          this._trackX(b);
          break;
        case "end":
          this._trackEnd(b);
      }
    }
  }, _responsiveChange:function(a) {
    this._setNarrow(a);
    this.selected = this.narrow ? this.defaultSelected : null;
    this.setScrollDirection(this._swipeAllowed() ? "y" : "all");
    this.fire("paper-responsive-change", {narrow:this.narrow});
  }, _onQueryMatchesChanged:function(a) {
    this._responsiveChange(a.detail.value);
  }, _forceNarrowChanged:function() {
    this._responsiveChange(this.forceNarrow || this.$.mq.queryMatches);
  }, _swipeAllowed:function() {
    return this.narrow && !this.disableSwipe;
  }, _isMainSelected:function() {
    return "main" === this.selected;
  }, _startEdgePeek:function() {
    this.width = this.$.drawer.offsetWidth;
    this._moveDrawer(this._translateXForDeltaX(this.rightDrawer ? -this.edgeSwipeSensitivity : this.edgeSwipeSensitivity));
    this._setPeeking(!0);
  }, _stopEdgePeek:function() {
    this.peeking && (this._setPeeking(!1), this._moveDrawer(null));
  }, _downHandler:function(b) {
    !this.dragging && this._isMainSelected() && this._isEdgeTouch(b) && !a && (this._startEdgePeek(), b.preventDefault(), a = this);
  }, _upHandler:function() {
    this._stopEdgePeek();
    a = null;
  }, _onTap:function(a) {
    (a = Polymer.dom(a).localTarget) && this.drawerToggleAttribute && a.hasAttribute(this.drawerToggleAttribute) && this.togglePanel();
  }, _isEdgeTouch:function(a) {
    a = a.detail.x;
    return !this.disableEdgeSwipe && this._swipeAllowed() && (this.rightDrawer ? a >= this.offsetWidth - this.edgeSwipeSensitivity : a <= this.edgeSwipeSensitivity);
  }, _trackStart:function(b) {
    this._swipeAllowed() && (a = this, this._setDragging(!0), this._isMainSelected() && this._setDragging(this.peeking || this._isEdgeTouch(b)), this.dragging && (this.width = this.$.drawer.offsetWidth, this._transition = !1));
  }, _translateXForDeltaX:function(a) {
    var b = this._isMainSelected();
    return this.rightDrawer ? Math.max(0, b ? this.width + a : a) : Math.min(0, b ? a - this.width : a);
  }, _trackX:function(a) {
    if (this.dragging) {
      a = a.detail.dx;
      if (this.peeking) {
        if (Math.abs(a) <= this.edgeSwipeSensitivity) {
          return;
        }
        this._setPeeking(!1);
      }
      this._moveDrawer(this._translateXForDeltaX(a));
    }
  }, _trackEnd:function(b) {
    if (this.dragging) {
      if (b = 0 < b.detail.dx, this._setDragging(!1), this._transition = !0, a = null, this._moveDrawer(null), this.rightDrawer) {
        this[b ? "closeDrawer" : "openDrawer"]();
      } else {
        this[b ? "openDrawer" : "closeDrawer"]();
      }
    }
  }, _transformForTranslateX:function(a) {
    return null === a ? "" : this.hasWillChange ? "translateX(" + a + "px)" : "translate3d(" + a + "px, 0, 0)";
  }, _moveDrawer:function(a) {
    this.transform(this._transformForTranslateX(a), this.$.drawer);
  }, _getDrawerContent:function() {
    return Polymer.dom(this.$.drawerContent).getDistributedNodes()[0];
  }, _getAutoFocusedNode:function() {
    var a = this._getDrawerContent();
    return this.drawerFocusSelector ? Polymer.dom(a).querySelector(this.drawerFocusSelector) || a : null;
  }, _toggleFocusListener:function(a) {
    "drawer" === a ? this.addEventListener("focus", this._boundFocusListener, !0) : this.removeEventListener("focus", this._boundFocusListener, !0);
  }, _didFocus:function(a) {
    var b = this._getAutoFocusedNode();
    if (b) {
      var d = Polymer.dom(a).path, e = this._getDrawerContent();
      -1 === d.indexOf(e) && (a.stopPropagation(), b.focus());
    }
  }, _isDrawerClosed:function(a, c) {
    return !a || "drawer" !== c;
  }});
})();
Polymer({is:"paper-fab", behaviors:[Polymer.PaperButtonBehavior], properties:{src:{type:String, value:""}, icon:{type:String, value:""}, mini:{type:Boolean, value:!1, reflectToAttribute:!0}, label:{type:String, observer:"_labelChanged"}}, _labelChanged:function() {
  this.setAttribute("aria-label", this.label);
}, _computeIsIconFab:function(a, b) {
  return 0 < a.length || 0 < b.length;
}});
Polymer.PaperInputHelper = {};
Polymer.PaperInputHelper.NextLabelID = 1;
Polymer.PaperInputHelper.NextAddonID = 1;
Polymer.PaperInputBehaviorImpl = {properties:{label:{type:String}, value:{notify:!0, type:String}, disabled:{type:Boolean, value:!1}, invalid:{type:Boolean, value:!1, notify:!0}, preventInvalidInput:{type:Boolean}, allowedPattern:{type:String}, type:{type:String}, list:{type:String}, pattern:{type:String}, required:{type:Boolean, value:!1}, errorMessage:{type:String}, charCounter:{type:Boolean, value:!1}, noLabelFloat:{type:Boolean, value:!1}, alwaysFloatLabel:{type:Boolean, value:!1}, autoValidate:{type:Boolean, 
value:!1}, validator:{type:String}, autocomplete:{type:String, value:"off"}, autofocus:{type:Boolean}, inputmode:{type:String}, minlength:{type:Number}, maxlength:{type:Number}, min:{type:String}, max:{type:String}, step:{type:String}, name:{type:String}, placeholder:{type:String, value:""}, readonly:{type:Boolean, value:!1}, size:{type:Number}, autocapitalize:{type:String, value:"none"}, autocorrect:{type:String, value:"off"}, autosave:{type:String}, results:{type:Number}, accept:{type:String}, 
multiple:{type:Boolean}, _ariaDescribedBy:{type:String, value:""}, _ariaLabelledBy:{type:String, value:""}}, listeners:{"addon-attached":"_onAddonAttached"}, keyBindings:{"shift+tab:keydown":"_onShiftTabDown"}, hostAttributes:{tabindex:0}, get inputElement() {
  return this.$.input;
}, get _focusableElement() {
  return this.inputElement;
}, registered:function() {
  this._typesThatHaveText = "date datetime datetime-local month time week file".split(" ");
}, attached:function() {
  this._updateAriaLabelledBy();
  this.inputElement && -1 !== this._typesThatHaveText.indexOf(this.inputElement.type) && (this.alwaysFloatLabel = !0);
}, _appendStringWithSpace:function(a, b) {
  return a ? a + " " + b : b;
}, _onAddonAttached:function(a) {
  a = a.path ? a.path[0] : a.target;
  if (a.id) {
    this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, a.id);
  } else {
    var b = "paper-input-add-on-" + Polymer.PaperInputHelper.NextAddonID++;
    a.id = b;
    this._ariaDescribedBy = this._appendStringWithSpace(this._ariaDescribedBy, b);
  }
}, validate:function() {
  return this.inputElement.validate();
}, _focusBlurHandler:function(a) {
  this._shiftTabPressed || (Polymer.IronControlState._focusBlurHandler.call(this, a), this.focused && this._focusableElement.focus());
}, _onShiftTabDown:function(a) {
  var b = this.getAttribute("tabindex");
  this._shiftTabPressed = !0;
  this.setAttribute("tabindex", "-1");
  this.async(function() {
    this.setAttribute("tabindex", b);
    this._shiftTabPressed = !1;
  }, 1);
}, _handleAutoValidate:function() {
  this.autoValidate && this.validate();
}, updateValueAndPreserveCaret:function(a) {
  try {
    var b = this.inputElement.selectionStart;
    this.value = a;
    this.inputElement.selectionStart = b;
    this.inputElement.selectionEnd = b;
  } catch (c) {
    this.value = a;
  }
}, _computeAlwaysFloatLabel:function(a, b) {
  return b || a;
}, _updateAriaLabelledBy:function() {
  var a = Polymer.dom(this.root).querySelector("label");
  if (a) {
    if (a.id) {
      var b = a.id;
    } else {
      b = "paper-input-label-" + Polymer.PaperInputHelper.NextLabelID++, a.id = b;
    }
    this._ariaLabelledBy = b;
  } else {
    this._ariaLabelledBy = "";
  }
}, _onChange:function(a) {
  this.shadowRoot && this.fire(a.type, {sourceEvent:a}, {node:this, bubbles:a.bubbles, cancelable:a.cancelable});
}};
Polymer.PaperInputBehavior = [Polymer.IronControlState, Polymer.IronA11yKeysBehavior, Polymer.PaperInputBehaviorImpl];
Polymer.PaperInputAddonBehavior = {hostAttributes:{"add-on":""}, attached:function() {
  this.fire("addon-attached");
}, update:function(a) {
}};
Polymer({is:"paper-input-char-counter", behaviors:[Polymer.PaperInputAddonBehavior], properties:{_charCounterStr:{type:String, value:"0"}}, update:function(a) {
  if (a.inputElement) {
    a.value = a.value || "";
    var b = a.value.length.toString();
    a.inputElement.hasAttribute("maxlength") && (b += "/" + a.inputElement.getAttribute("maxlength"));
    this._charCounterStr = b;
  }
}});
Polymer({is:"paper-input-container", properties:{noLabelFloat:{type:Boolean, value:!1}, alwaysFloatLabel:{type:Boolean, value:!1}, attrForValue:{type:String, value:"bind-value"}, autoValidate:{type:Boolean, value:!1}, invalid:{observer:"_invalidChanged", type:Boolean, value:!1}, focused:{readOnly:!0, type:Boolean, value:!1, notify:!0}, _addons:{type:Array}, _inputHasContent:{type:Boolean, value:!1}, _inputSelector:{type:String, value:"input,textarea,.paper-input-input"}, _boundOnFocus:{type:Function, 
value:function() {
  return this._onFocus.bind(this);
}}, _boundOnBlur:{type:Function, value:function() {
  return this._onBlur.bind(this);
}}, _boundOnInput:{type:Function, value:function() {
  return this._onInput.bind(this);
}}, _boundValueChanged:{type:Function, value:function() {
  return this._onValueChanged.bind(this);
}}}, listeners:{"addon-attached":"_onAddonAttached", "iron-input-validate":"_onIronInputValidate"}, get _valueChangedEvent() {
  return this.attrForValue + "-changed";
}, get _propertyForValue() {
  return Polymer.CaseMap.dashToCamelCase(this.attrForValue);
}, get _inputElement() {
  return Polymer.dom(this).querySelector(this._inputSelector);
}, get _inputElementValue() {
  return this._inputElement[this._propertyForValue] || this._inputElement.value;
}, ready:function() {
  this._addons || (this._addons = []);
  this.addEventListener("focus", this._boundOnFocus, !0);
  this.addEventListener("blur", this._boundOnBlur, !0);
}, attached:function() {
  this.attrForValue ? this._inputElement.addEventListener(this._valueChangedEvent, this._boundValueChanged) : this.addEventListener("input", this._onInput);
  "" != this._inputElementValue ? this._handleValueAndAutoValidate(this._inputElement) : this._handleValue(this._inputElement);
}, _onAddonAttached:function(a) {
  this._addons || (this._addons = []);
  a = a.target;
  -1 === this._addons.indexOf(a) && (this._addons.push(a), this.isAttached && this._handleValue(this._inputElement));
}, _onFocus:function() {
  this._setFocused(!0);
}, _onBlur:function() {
  this._setFocused(!1);
  this._handleValueAndAutoValidate(this._inputElement);
}, _onInput:function(a) {
  this._handleValueAndAutoValidate(a.target);
}, _onValueChanged:function(a) {
  this._handleValueAndAutoValidate(a.target);
}, _handleValue:function(a) {
  var b = this._inputElementValue;
  b || 0 === b || "number" === a.type && !a.checkValidity() ? this._inputHasContent = !0 : this._inputHasContent = !1;
  this.updateAddons({inputElement:a, value:b, invalid:this.invalid});
}, _handleValueAndAutoValidate:function(a) {
  this.autoValidate && (this.invalid = !(a.validate ? a.validate(this._inputElementValue) : a.checkValidity()));
  this._handleValue(a);
}, _onIronInputValidate:function(a) {
  this.invalid = this._inputElement.invalid;
}, _invalidChanged:function() {
  this._addons && this.updateAddons({invalid:this.invalid});
}, updateAddons:function(a) {
  for (var b, c = 0; b = this._addons[c]; c++) {
    b.update(a);
  }
}, _computeInputContentClass:function(a, b, c, d, e) {
  var f = "input-content";
  a ? e && (f += " label-is-hidden") : (a = this.querySelector("label"), b || e ? (f += " label-is-floating", this.$.labelAndInputContainer.style.position = "static", d ? f += " is-invalid" : c && (f += " label-is-highlighted")) : a && (this.$.labelAndInputContainer.style.position = "relative"));
  return f;
}, _computeUnderlineClass:function(a, b) {
  var c = "underline";
  b ? c += " is-invalid" : a && (c += " is-highlighted");
  return c;
}, _computeAddOnContentClass:function(a, b) {
  var c = "add-on-content";
  b ? c += " is-invalid" : a && (c += " is-highlighted");
  return c;
}});
Polymer({is:"paper-input-error", behaviors:[Polymer.PaperInputAddonBehavior], properties:{invalid:{readOnly:!0, reflectToAttribute:!0, type:Boolean}}, update:function(a) {
  this._setInvalid(a.invalid);
}});
Polymer({is:"paper-input", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior]});
(function() {
  Polymer.IronDropdownScrollManager = {get currentLockingElement() {
    return this._lockingElements[this._lockingElements.length - 1];
  }, elementIsScrollLocked:function(a) {
    var b = this.currentLockingElement;
    if (void 0 === b) {
      return !1;
    }
    if (this._hasCachedLockedElement(a)) {
      return !0;
    }
    if (this._hasCachedUnlockedElement(a)) {
      return !1;
    }
    (b = !!b && b !== a && !this._composedTreeContains(b, a)) ? this._lockedElementCache.push(a) : this._unlockedElementCache.push(a);
    return b;
  }, pushScrollLock:function(a) {
    0 <= this._lockingElements.indexOf(a) || (0 === this._lockingElements.length && this._lockScrollInteractions(), this._lockingElements.push(a), this._lockedElementCache = [], this._unlockedElementCache = []);
  }, removeScrollLock:function(a) {
    a = this._lockingElements.indexOf(a);
    -1 !== a && (this._lockingElements.splice(a, 1), this._lockedElementCache = [], this._unlockedElementCache = [], 0 === this._lockingElements.length && this._unlockScrollInteractions());
  }, _lockingElements:[], _lockedElementCache:null, _unlockedElementCache:null, _originalBodyStyles:{}, _isScrollingKeypress:function(a) {
    return Polymer.IronA11yKeysBehavior.keyboardEventMatchesKeys(a, "pageup pagedown home end up left down right");
  }, _hasCachedLockedElement:function(a) {
    return -1 < this._lockedElementCache.indexOf(a);
  }, _hasCachedUnlockedElement:function(a) {
    return -1 < this._unlockedElementCache.indexOf(a);
  }, _composedTreeContains:function(a, b) {
    var c, d;
    if (a.contains(b)) {
      return !0;
    }
    a = Polymer.dom(a).querySelectorAll("content");
    for (c = 0; c < a.length; ++c) {
      var e = Polymer.dom(a[c]).getDistributedNodes();
      for (d = 0; d < e.length; ++d) {
        if (this._composedTreeContains(e[d], b)) {
          return !0;
        }
      }
    }
    return !1;
  }, _scrollInteractionHandler:function(a) {
    var b = Polymer.dom(a).rootTarget;
    Polymer.IronDropdownScrollManager.elementIsScrollLocked(b) && ("keydown" !== a.type || Polymer.IronDropdownScrollManager._isScrollingKeypress(a)) && a.preventDefault();
  }, _lockScrollInteractions:function() {
    this._originalBodyStyles.overflow = document.body.style.overflow;
    this._originalBodyStyles.overflowX = document.body.style.overflowX;
    this._originalBodyStyles.overflowY = document.body.style.overflowY;
    document.body.style.overflow = "hidden";
    document.body.style.overflowX = "hidden";
    document.body.style.overflowY = "hidden";
    document.addEventListener("wheel", this._scrollInteractionHandler, !0);
    document.addEventListener("mousewheel", this._scrollInteractionHandler, !0);
    document.addEventListener("DOMMouseScroll", this._scrollInteractionHandler, !0);
    document.addEventListener("touchmove", this._scrollInteractionHandler, !0);
    document.addEventListener("keydown", this._scrollInteractionHandler, !0);
  }, _unlockScrollInteractions:function() {
    document.body.style.overflow = this._originalBodyStyles.overflow;
    document.body.style.overflowX = this._originalBodyStyles.overflowX;
    document.body.style.overflowY = this._originalBodyStyles.overflowY;
    document.removeEventListener("wheel", this._scrollInteractionHandler, !0);
    document.removeEventListener("mousewheel", this._scrollInteractionHandler, !0);
    document.removeEventListener("DOMMouseScroll", this._scrollInteractionHandler, !0);
    document.removeEventListener("touchmove", this._scrollInteractionHandler, !0);
    document.removeEventListener("keydown", this._scrollInteractionHandler, !0);
  }};
})();
(function() {
  Polymer({is:"iron-dropdown", behaviors:[Polymer.IronControlState, Polymer.IronA11yKeysBehavior, Polymer.IronOverlayBehavior, Polymer.NeonAnimationRunnerBehavior], properties:{horizontalAlign:{type:String, value:"left", reflectToAttribute:!0}, verticalAlign:{type:String, value:"top", reflectToAttribute:!0}, openAnimationConfig:{type:Object}, closeAnimationConfig:{type:Object}, focusTarget:{type:Object}, noAnimations:{type:Boolean, value:!1}, allowOutsideScroll:{type:Boolean, value:!1}}, listeners:{"neon-animation-finish":"_onNeonAnimationFinish"}, 
  observers:["_updateOverlayPosition(positionTarget, verticalAlign, horizontalAlign, verticalOffset, horizontalOffset)"], get containedElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, get _focusTarget() {
    return this.focusTarget || this.containedElement;
  }, detached:function() {
    this.cancelAnimation();
    Polymer.IronDropdownScrollManager.removeScrollLock(this);
  }, _openedChanged:function() {
    this.opened && this.disabled ? this.cancel() : (this.cancelAnimation(), this.sizingTarget = this.containedElement || this.sizingTarget, this._updateAnimationConfig(), this.opened && !this.allowOutsideScroll ? Polymer.IronDropdownScrollManager.pushScrollLock(this) : Polymer.IronDropdownScrollManager.removeScrollLock(this), Polymer.IronOverlayBehaviorImpl._openedChanged.apply(this, arguments));
  }, _renderOpened:function() {
    !this.noAnimations && this.animationConfig.open ? (this.$.contentWrapper.classList.add("animating"), this.playAnimation("open")) : Polymer.IronOverlayBehaviorImpl._renderOpened.apply(this, arguments);
  }, _renderClosed:function() {
    !this.noAnimations && this.animationConfig.close ? (this.$.contentWrapper.classList.add("animating"), this.playAnimation("close")) : Polymer.IronOverlayBehaviorImpl._renderClosed.apply(this, arguments);
  }, _onNeonAnimationFinish:function() {
    this.$.contentWrapper.classList.remove("animating");
    this.opened ? this._finishRenderOpened() : this._finishRenderClosed();
  }, _updateAnimationConfig:function() {
    for (var a = (this.openAnimationConfig || []).concat(this.closeAnimationConfig || []), b = 0; b < a.length; b++) {
      a[b].node = this.containedElement;
    }
    this.animationConfig = {open:this.openAnimationConfig, close:this.closeAnimationConfig};
  }, _updateOverlayPosition:function() {
    this.isAttached && this.notifyResize();
  }, _applyFocus:function() {
    var a = this.focusTarget || this.containedElement;
    a && this.opened && !this.noAutoFocus ? a.focus() : Polymer.IronOverlayBehaviorImpl._applyFocus.apply(this, arguments);
  }});
})();
Polymer({is:"paper-menu-grow-height-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().height;
  return this._effect = new KeyframeEffect(b, [{height:c / 2 + "px"}, {height:c + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-grow-width-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().width;
  return this._effect = new KeyframeEffect(b, [{width:c / 2 + "px"}, {width:c + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-shrink-width-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().width;
  return this._effect = new KeyframeEffect(b, [{width:c + "px"}, {width:c - c / 20 + "px"}], this.timingFromConfig(a));
}});
Polymer({is:"paper-menu-shrink-height-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node, c = b.getBoundingClientRect().height;
  this.setPrefixedProperty(b, "transformOrigin", "0 0");
  return this._effect = new KeyframeEffect(b, [{height:c + "px", transform:"translateY(0)"}, {height:c / 2 + "px", transform:"translateY(-20px)"}], this.timingFromConfig(a));
}});
(function() {
  var a = Polymer({is:"paper-menu-button", behaviors:[Polymer.IronA11yKeysBehavior, Polymer.IronControlState], properties:{opened:{type:Boolean, value:!1, notify:!0, observer:"_openedChanged"}, horizontalAlign:{type:String, value:"left", reflectToAttribute:!0}, verticalAlign:{type:String, value:"top", reflectToAttribute:!0}, horizontalOffset:{type:Number, value:0, notify:!0}, verticalOffset:{type:Number, value:0, notify:!0}, noAnimations:{type:Boolean, value:!1}, ignoreSelect:{type:Boolean, value:!1}, 
  openAnimationConfig:{type:Object, value:function() {
    return [{name:"fade-in-animation", timing:{delay:100, duration:200}}, {name:"paper-menu-grow-width-animation", timing:{delay:100, duration:150, easing:a.ANIMATION_CUBIC_BEZIER}}, {name:"paper-menu-grow-height-animation", timing:{delay:100, duration:275, easing:a.ANIMATION_CUBIC_BEZIER}}];
  }}, closeAnimationConfig:{type:Object, value:function() {
    return [{name:"fade-out-animation", timing:{duration:150}}, {name:"paper-menu-shrink-width-animation", timing:{delay:100, duration:50, easing:a.ANIMATION_CUBIC_BEZIER}}, {name:"paper-menu-shrink-height-animation", timing:{duration:200, easing:"ease-in"}}];
  }}, _dropdownContent:{type:Object}}, hostAttributes:{role:"group", "aria-haspopup":"true"}, listeners:{"iron-select":"_onIronSelect"}, get contentElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, toggle:function() {
    this.opened ? this.close() : this.open();
  }, open:function() {
    this.disabled || this.$.dropdown.open();
  }, close:function() {
    this.$.dropdown.close();
  }, _onIronSelect:function(a) {
    this.ignoreSelect || this.close();
  }, _openedChanged:function(a, c) {
    a ? (this._dropdownContent = this.contentElement, this.fire("paper-dropdown-open")) : null != c && this.fire("paper-dropdown-close");
  }, _disabledChanged:function(a) {
    Polymer.IronControlState._disabledChanged.apply(this, arguments);
    a && this.opened && this.close();
  }, __onIronOverlayCanceled:function(a) {
    var b = a.detail;
    Polymer.dom(b);
    var d = this.$.trigger;
    -1 < Polymer.dom(b).path.indexOf(d) && a.preventDefault();
  }});
  a.ANIMATION_CUBIC_BEZIER = "cubic-bezier(.3,.95,.5,1)";
  a.MAX_ANIMATION_TIME_MS = 400;
  Polymer.PaperMenuButton = a;
})();
(function() {
  Polymer({is:"paper-dropdown-menu", behaviors:[Polymer.IronButtonState, Polymer.IronControlState, Polymer.IronFormElementBehavior, Polymer.IronValidatableBehavior], properties:{selectedItemLabel:{type:String, notify:!0, readOnly:!0}, selectedItem:{type:Object, notify:!0, readOnly:!0}, value:{type:String, notify:!0, readOnly:!0}, label:{type:String}, placeholder:{type:String}, errorMessage:{type:String}, opened:{type:Boolean, notify:!0, value:!1, observer:"_openedChanged"}, noLabelFloat:{type:Boolean, 
  value:!1, reflectToAttribute:!0}, alwaysFloatLabel:{type:Boolean, value:!1}, noAnimations:{type:Boolean, value:!1}, horizontalAlign:{type:String, value:"right"}, verticalAlign:{type:String, value:"top"}}, listeners:{tap:"_onTap"}, keyBindings:{"up down":"open", esc:"close"}, hostAttributes:{role:"combobox", "aria-autocomplete":"none", "aria-haspopup":"true"}, observers:["_selectedItemChanged(selectedItem)"], attached:function() {
    var a = this.contentElement;
    a && a.selectedItem && this._setSelectedItem(a.selectedItem);
  }, get contentElement() {
    return Polymer.dom(this.$.content).getDistributedNodes()[0];
  }, open:function() {
    this.$.menuButton.open();
  }, close:function() {
    this.$.menuButton.close();
  }, _onIronSelect:function(a) {
    this._setSelectedItem(a.detail.item);
  }, _onIronDeselect:function(a) {
    this._setSelectedItem(null);
  }, _onTap:function(a) {
    Polymer.Gestures.findOriginalTarget(a) === this && this.open();
  }, _selectedItemChanged:function(a) {
    a = a ? a.label || a.textContent.trim() : "";
    this._setValue(a);
    this._setSelectedItemLabel(a);
  }, _computeMenuVerticalOffset:function(a) {
    return a ? -4 : 8;
  }, _getValidity:function(a) {
    return this.disabled || !this.required || this.required && !!this.value;
  }, _openedChanged:function() {
    var a = this.opened ? "true" : "false", b = this.contentElement;
    b && b.setAttribute("aria-expanded", a);
  }});
})();
(function() {
  var a = {scroll:!0}, b = {standard:2, waterfall:1, "waterfall-tall":1}, c = {"waterfall-tall":!0};
  Polymer({is:"paper-header-panel", properties:{mode:{type:String, value:"standard", observer:"_modeChanged", reflectToAttribute:!0}, shadow:{type:Boolean, value:!1}, tallClass:{type:String, value:"tall"}, atTop:{type:Boolean, value:!0, notify:!0, readOnly:!0, reflectToAttribute:!0}}, observers:["_computeDropShadowHidden(atTop, mode, shadow)"], ready:function() {
    this.scrollHandler = this._scroll.bind(this);
  }, attached:function() {
    this._addListener();
    this._keepScrollingState();
  }, detached:function() {
    this._removeListener();
  }, get header() {
    return Polymer.dom(this.$.headerContent).getDistributedNodes()[0];
  }, get scroller() {
    return this._getScrollerForMode(this.mode);
  }, get visibleShadow() {
    return this.$.dropShadow.classList.contains("has-shadow");
  }, _computeDropShadowHidden:function(a, c, f) {
    c = b[c];
    this.shadow ? this.toggleClass("has-shadow", !0, this.$.dropShadow) : 2 === c ? this.toggleClass("has-shadow", !0, this.$.dropShadow) : 1 !== c || a ? this.toggleClass("has-shadow", !1, this.$.dropShadow) : this.toggleClass("has-shadow", !0, this.$.dropShadow);
  }, _computeMainContainerClass:function(a) {
    var b = {};
    b.flex = "cover" !== a;
    return Object.keys(b).filter(function(a) {
      return b[a];
    }).join(" ");
  }, _addListener:function() {
    this.scroller.addEventListener("scroll", this.scrollHandler, !1);
  }, _removeListener:function() {
    this.scroller.removeEventListener("scroll", this.scrollHandler);
  }, _modeChanged:function(a, b) {
    var d = this.header;
    d && (c[b] && !c[a] ? (d.classList.remove(this.tallClass), this.async(function() {
      d.classList.remove("animate");
    }, 200)) : this.toggleClass("animate", c[a], d));
    this._keepScrollingState();
  }, _keepScrollingState:function() {
    var a = this.scroller, b = this.header;
    this._setAtTop(0 === a.scrollTop);
    b && this.tallClass && c[this.mode] && this.toggleClass(this.tallClass, this.atTop || b.classList.contains(this.tallClass) && a.scrollHeight < this.offsetHeight, b);
  }, _scroll:function() {
    this._keepScrollingState();
    this.fire("content-scroll", {target:this.scroller}, {bubbles:!1});
  }, _getScrollerForMode:function(b) {
    return a[b] ? this : this.$.mainContainer;
  }});
})();
(function() {
  Polymer.PaperScrollHeaderPanel = Polymer({is:"paper-scroll-header-panel", behaviors:[Polymer.IronResizableBehavior], properties:{condenses:{type:Boolean, value:!1}, noDissolve:{type:Boolean, value:!1}, noReveal:{type:Boolean, value:!1}, fixed:{type:Boolean, value:!1}, keepCondensedHeader:{type:Boolean, value:!1}, headerHeight:{type:Number, value:0}, condensedHeaderHeight:{type:Number, value:0}, scrollAwayTopbar:{type:Boolean, value:!1}, headerState:{type:Number, readOnly:!0, notify:!0, value:0}, 
  _defaultCondsensedHeaderHeight:{type:Number, value:0}}, observers:["_setup(headerHeight, condensedHeaderHeight, fixed)", "_condensedHeaderHeightChanged(condensedHeaderHeight)", "_headerHeightChanged(headerHeight, condensedHeaderHeight)", "_condensesChanged(condenses)"], listeners:{"iron-resize":"measureHeaderHeight"}, ready:function() {
    this._scrollHandler = this._scroll.bind(this);
    this.scroller.addEventListener("scroll", this._scrollHandler);
  }, attached:function() {
    this.async(this.measureHeaderHeight, 1);
  }, get header() {
    return Polymer.dom(this.$.headerContent).getDistributedNodes()[0];
  }, get content() {
    return Polymer.dom(this.$.mainContent).getDistributedNodes()[0];
  }, get scroller() {
    return this.$.mainContainer;
  }, get _headerMaxDelta() {
    return this.keepCondensedHeader ? this._headerMargin : this.headerHeight;
  }, get _headerMargin() {
    return this.headerHeight - this.condensedHeaderHeight;
  }, _y:0, _prevScrollTop:0, measureHeaderHeight:function() {
    var a = this.header;
    a && a.offsetHeight && (this.headerHeight = a.offsetHeight);
  }, scroll:function(a, b) {
    if (b) {
      var c = Math.random(), d = Date.now(), e = this.scroller.scrollTop, f = a - e;
      this._currentAnimationId = c;
      (function h() {
        var b = Date.now() - d;
        if (200 < b) {
          this.scroller.scrollTop = a, this._updateScrollState(a);
        } else {
          if (this._currentAnimationId === c) {
            var n = this.scroller, b = b / 200;
            n.scrollTop = -f * b * (b - 2) + e;
            requestAnimationFrame(h.bind(this));
          }
        }
      }).call(this);
    } else {
      this.scroller.scrollTop = a, this._updateScrollState(a);
    }
  }, condense:function(a) {
    if (this.condenses && !this.fixed && !this.noReveal) {
      switch(this.headerState) {
        case 1:
          this.scroll(this.scroller.scrollTop - (this._headerMaxDelta - this._headerMargin), a);
          break;
        case 0:
        case 3:
          this.scroll(this._headerMargin, a);
      }
    }
  }, scrollToTop:function(a) {
    this.scroll(0, a);
  }, _headerHeightChanged:function(a) {
    null !== this._defaultCondsensedHeaderHeight && (this.condensedHeaderHeight = this._defaultCondsensedHeaderHeight = Math.round(1 * a / 3));
  }, _condensedHeaderHeightChanged:function(a) {
    a && this._defaultCondsensedHeaderHeight != a && (this._defaultCondsensedHeaderHeight = null);
  }, _condensesChanged:function() {
    this._updateScrollState(this.scroller.scrollTop);
    this._condenseHeader(null);
  }, _setup:function() {
    var a = this.scroller.style;
    a.paddingTop = this.fixed ? "" : this.headerHeight + "px";
    a.top = this.fixed ? this.headerHeight + "px" : "";
    if (this.fixed) {
      this._setHeaderState(0), this._transformHeader(null);
    } else {
      switch(this.headerState) {
        case 1:
          this._transformHeader(this._headerMaxDelta);
          break;
        case 2:
          this._transformHeader(this._headerMargin);
      }
    }
  }, _transformHeader:function(a) {
    this._translateY(this.$.headerContainer, -a);
    this.condenses && this._condenseHeader(a);
    this.fire("paper-header-transform", {y:a, height:this.headerHeight, condensedHeight:this.condensedHeaderHeight});
  }, _condenseHeader:function(a) {
    var b = null === a;
    !this.scrollAwayTopbar && this.header && this.header.$ && this.header.$.topBar && this._translateY(this.header.$.topBar, b ? null : Math.min(a, this._headerMargin));
    this.noDissolve || (this.$.headerBg.style.opacity = b ? "" : (this._headerMargin - a) / this._headerMargin);
    this._translateY(this.$.headerBg, b ? null : a / 2);
    this.noDissolve || (this.$.condensedHeaderBg.style.opacity = b ? "" : a / this._headerMargin, this._translateY(this.$.condensedHeaderBg, b ? null : a / 2));
  }, _translateY:function(a, b) {
    this.transform(null === b ? "" : "translate3d(0, " + b + "px, 0)", a);
  }, _scroll:function(a) {
    this.header && (this._updateScrollState(this.scroller.scrollTop), this.fire("content-scroll", {target:this.scroller}, {cancelable:!1}));
  }, _updateScrollState:function(a) {
    var b = a - this._prevScrollTop, b = Math.max(0, this.noReveal ? a : this._y + b);
    b > this._headerMaxDelta ? (b = this._headerMaxDelta, this.keepCondensedHeader ? this._setHeaderState(2) : this._setHeaderState(1)) : this.condenses && a >= this._headerMargin ? (b = Math.max(b, this._headerMargin), this._setHeaderState(2)) : 0 === b ? this._setHeaderState(0) : this._setHeaderState(3);
    this.fixed || b === this._y || this._transformHeader(b);
    this._prevScrollTop = Math.max(a, 0);
    this._y = b;
  }});
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_EXPANDED = 0;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_HIDDEN = 1;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_CONDENSED = 2;
  Polymer.PaperScrollHeaderPanel.HEADER_STATE_INTERPOLATED = 3;
})();
Polymer({is:"paper-icon-button", hostAttributes:{role:"button", tabindex:"0"}, behaviors:[Polymer.PaperInkyFocusBehavior], properties:{src:{type:String}, icon:{type:String}, alt:{type:String, observer:"_altChanged"}}, _altChanged:function(a, b) {
  var c = this.getAttribute("aria-label");
  c && b != c || this.setAttribute("aria-label", a);
}});
Polymer({is:"paper-textarea", behaviors:[Polymer.PaperInputBehavior, Polymer.IronFormElementBehavior], properties:{_ariaLabelledBy:{observer:"_ariaLabelledByChanged", type:String}, _ariaDescribedBy:{observer:"_ariaDescribedByChanged", type:String}, rows:{type:Number, value:1}, maxRows:{type:Number, value:0}}, _ariaLabelledByChanged:function(a) {
  this.$.input.textarea.setAttribute("aria-labelledby", a);
}, _ariaDescribedByChanged:function(a) {
  this.$.input.textarea.setAttribute("aria-describedby", a);
}, get _focusableElement() {
  return this.$.input.textarea;
}});
Polymer.PaperItemBehaviorImpl = {hostAttributes:{role:"option", tabindex:"0"}};
Polymer.PaperItemBehavior = [Polymer.IronButtonState, Polymer.IronControlState, Polymer.PaperItemBehaviorImpl];
Polymer({is:"paper-icon-item", behaviors:[Polymer.PaperItemBehavior]});
Polymer({is:"paper-item-body"});
Polymer({is:"paper-item", behaviors:[Polymer.PaperItemBehavior]});
Polymer.IronMenuBehaviorImpl = {properties:{focusedItem:{observer:"_focusedItemChanged", readOnly:!0, type:Object}, attrForItemTitle:{type:String}}, hostAttributes:{role:"menu", tabindex:"0"}, observers:["_updateMultiselectable(multi)"], listeners:{focus:"_onFocus", keydown:"_onKeydown", "iron-items-changed":"_onIronItemsChanged"}, keyBindings:{up:"_onUpKey", down:"_onDownKey", esc:"_onEscKey", "shift+tab:keydown":"_onShiftTabDown"}, attached:function() {
  this._resetTabindices();
}, select:function(a) {
  this._defaultFocusAsync && (this.cancelAsync(this._defaultFocusAsync), this._defaultFocusAsync = null);
  var b = this._valueToItem(a);
  b && b.hasAttribute("disabled") || (this._setFocusedItem(b), Polymer.IronMultiSelectableBehaviorImpl.select.apply(this, arguments));
}, _resetTabindices:function() {
  var a = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;
  this.items.forEach(function(b) {
    b.setAttribute("tabindex", b === a ? "0" : "-1");
  }, this);
}, _updateMultiselectable:function(a) {
  a ? this.setAttribute("aria-multiselectable", "true") : this.removeAttribute("aria-multiselectable");
}, _focusWithKeyboardEvent:function(a) {
  for (var b = 0, c; c = this.items[b]; b++) {
    var d = this.attrForItemTitle || "textContent", d = c[d] || c.getAttribute(d);
    if (!c.hasAttribute("disabled") && d && d.trim().charAt(0).toLowerCase() === String.fromCharCode(a.keyCode).toLowerCase()) {
      this._setFocusedItem(c);
      break;
    }
  }
}, _focusPrevious:function() {
  for (var a = this.items.length, b = Number(this.indexOf(this.focusedItem)), c = 1; c < a; c++) {
    var d = this.items[(b - c + a) % a];
    if (!d.hasAttribute("disabled")) {
      this._setFocusedItem(d);
      break;
    }
  }
}, _focusNext:function() {
  for (var a = this.items.length, b = Number(this.indexOf(this.focusedItem)), c = 1; c < a; c++) {
    var d = this.items[(b + c) % a];
    if (!d.hasAttribute("disabled")) {
      this._setFocusedItem(d);
      break;
    }
  }
}, _applySelection:function(a, b) {
  b ? a.setAttribute("aria-selected", "true") : a.removeAttribute("aria-selected");
  Polymer.IronSelectableBehavior._applySelection.apply(this, arguments);
}, _focusedItemChanged:function(a, b) {
  b && b.setAttribute("tabindex", "-1");
  a && (a.setAttribute("tabindex", "0"), a.focus());
}, _onIronItemsChanged:function(a) {
  a.detail.addedNodes.length && this._resetTabindices();
}, _onShiftTabDown:function(a) {
  var b = this.getAttribute("tabindex");
  Polymer.IronMenuBehaviorImpl._shiftTabPressed = !0;
  this._setFocusedItem(null);
  this.setAttribute("tabindex", "-1");
  this.async(function() {
    this.setAttribute("tabindex", b);
    Polymer.IronMenuBehaviorImpl._shiftTabPressed = !1;
  }, 1);
}, _onFocus:function(a) {
  !Polymer.IronMenuBehaviorImpl._shiftTabPressed && (a = Polymer.dom(a).rootTarget, a === this || "undefined" === typeof a.tabIndex || this.isLightDescendant(a)) && (this._defaultFocusAsync = this.async(function() {
    var a = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;
    this._setFocusedItem(null);
    a ? this._setFocusedItem(a) : this.items[0] && this._focusNext();
  }));
}, _onUpKey:function(a) {
  this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onDownKey:function(a) {
  this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _onEscKey:function(a) {
  this.focusedItem.blur();
}, _onKeydown:function(a) {
  this.keyboardEventMatchesKeys(a, "up down esc");
  a.stopPropagation();
}, _activateHandler:function(a) {
  Polymer.IronSelectableBehavior._activateHandler.call(this, a);
  a.stopPropagation();
}};
Polymer.IronMenuBehaviorImpl._shiftTabPressed = !1;
Polymer.IronMenuBehavior = [Polymer.IronMultiSelectableBehavior, Polymer.IronA11yKeysBehavior, Polymer.IronMenuBehaviorImpl];
(function() {
  Polymer({is:"paper-menu", behaviors:[Polymer.IronMenuBehavior]});
})();
Polymer.IronRangeBehavior = {properties:{value:{type:Number, value:0, notify:!0, reflectToAttribute:!0}, min:{type:Number, value:0, notify:!0}, max:{type:Number, value:100, notify:!0}, step:{type:Number, value:1, notify:!0}, ratio:{type:Number, value:0, readOnly:!0, notify:!0}}, observers:["_update(value, min, max, step)"], _calcRatio:function(a) {
  return (this._clampValue(a) - this.min) / (this.max - this.min);
}, _clampValue:function(a) {
  return Math.min(this.max, Math.max(this.min, this._calcStep(a)));
}, _calcStep:function(a) {
  a = parseFloat(a);
  if (!this.step) {
    return a;
  }
  a = Math.round((a - this.min) / this.step);
  return 1 > this.step ? a / (1 / this.step) + this.min : a * this.step + this.min;
}, _validateValue:function() {
  var a = this._clampValue(this.value);
  this.value = this.oldValue = isNaN(a) ? this.oldValue : a;
  return this.value !== a;
}, _update:function() {
  this._validateValue();
  this._setRatio(100 * this._calcRatio(this.value));
}};
Polymer({is:"paper-progress", behaviors:[Polymer.IronRangeBehavior], properties:{secondaryProgress:{type:Number, value:0}, secondaryRatio:{type:Number, value:0, readOnly:!0}, indeterminate:{type:Boolean, value:!1, observer:"_toggleIndeterminate"}, disabled:{type:Boolean, value:!1, reflectToAttribute:!0, observer:"_disabledChanged"}}, observers:["_progressChanged(secondaryProgress, value, min, max)"], hostAttributes:{role:"progressbar"}, _toggleIndeterminate:function(a) {
  this.toggleClass("indeterminate", a, this.$.primaryProgress);
}, _transformProgress:function(a, b) {
  a.style.transform = a.style.webkitTransform = "scaleX(" + b / 100 + ")";
}, _mainRatioChanged:function(a) {
  this._transformProgress(this.$.primaryProgress, a);
}, _progressChanged:function(a, b, c, d) {
  a = this._clampValue(a);
  b = this._clampValue(b);
  var e = 100 * this._calcRatio(a), f = 100 * this._calcRatio(b);
  this._setSecondaryRatio(e);
  this._transformProgress(this.$.secondaryProgress, e);
  this._transformProgress(this.$.primaryProgress, f);
  this.secondaryProgress = a;
  this.setAttribute("aria-valuenow", b);
  this.setAttribute("aria-valuemin", c);
  this.setAttribute("aria-valuemax", d);
}, _disabledChanged:function(a) {
  this.setAttribute("aria-disabled", a ? "true" : "false");
}, _hideSecondaryProgress:function(a) {
  return 0 === a;
}});
Polymer({is:"paper-radio-button", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"radio", "aria-checked":!1, tabindex:0}, properties:{ariaActiveAttribute:{type:String, value:"aria-checked"}}, ready:function() {
  this._rippleContainer = this.$.radioContainer;
}});
Polymer.IronMenubarBehaviorImpl = {hostAttributes:{role:"menubar"}, keyBindings:{left:"_onLeftKey", right:"_onRightKey"}, _onUpKey:function(a) {
  this.focusedItem.click();
  a.detail.keyboardEvent.preventDefault();
}, _onDownKey:function(a) {
  this.focusedItem.click();
  a.detail.keyboardEvent.preventDefault();
}, get _isRTL() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _onLeftKey:function(a) {
  this._isRTL ? this._focusNext() : this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onRightKey:function(a) {
  this._isRTL ? this._focusPrevious() : this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _onKeydown:function(a) {
  this.keyboardEventMatchesKeys(a, "up down left right esc") || this._focusWithKeyboardEvent(a);
}};
Polymer.IronMenubarBehavior = [Polymer.IronMenuBehavior, Polymer.IronMenubarBehaviorImpl];
Polymer({is:"paper-radio-group", behaviors:[Polymer.IronMenubarBehavior], hostAttributes:{role:"radiogroup", tabindex:0}, properties:{attrForSelected:{type:String, value:"name"}, selectedAttribute:{type:String, value:"checked"}, selectable:{type:String, value:"paper-radio-button"}, allowEmptySelection:{type:Boolean, value:!1}}, select:function(a) {
  var b = this._valueToItem(a);
  if (!b || !b.hasAttribute("disabled")) {
    if (this.selected) {
      b = this._valueToItem(this.selected);
      if (this.selected == a) {
        if (this.allowEmptySelection) {
          a = "";
        } else {
          b && (b.checked = !0);
          return;
        }
      }
      b && (b.checked = !1);
    }
    Polymer.IronSelectableBehavior.select.apply(this, [a]);
    this.fire("paper-radio-group-changed");
  }
}, _activateFocusedItem:function() {
  this._itemActivate(this._valueForItem(this.focusedItem), this.focusedItem);
}, _onUpKey:function(a) {
  this._focusPrevious();
  a.preventDefault();
  this._activateFocusedItem();
}, _onDownKey:function(a) {
  this._focusNext();
  a.preventDefault();
  this._activateFocusedItem();
}, _onLeftKey:function(a) {
  Polymer.IronMenubarBehaviorImpl._onLeftKey.apply(this, arguments);
  this._activateFocusedItem();
}, _onRightKey:function(a) {
  Polymer.IronMenubarBehaviorImpl._onRightKey.apply(this, arguments);
  this._activateFocusedItem();
}});
Polymer({is:"paper-slider", behaviors:[Polymer.IronA11yKeysBehavior, Polymer.IronFormElementBehavior, Polymer.PaperInkyFocusBehavior, Polymer.IronRangeBehavior], properties:{snaps:{type:Boolean, value:!1, notify:!0}, pin:{type:Boolean, value:!1, notify:!0}, secondaryProgress:{type:Number, value:0, notify:!0, observer:"_secondaryProgressChanged"}, editable:{type:Boolean, value:!1}, immediateValue:{type:Number, value:0, readOnly:!0, notify:!0}, maxMarkers:{type:Number, value:0, notify:!0}, expand:{type:Boolean, 
value:!1, readOnly:!0}, dragging:{type:Boolean, value:!1, readOnly:!0}, transiting:{type:Boolean, value:!1, readOnly:!0}, markers:{type:Array, readOnly:!0, value:[]}}, observers:["_updateKnob(value, min, max, snaps, step)", "_valueChanged(value)", "_immediateValueChanged(immediateValue)", "_updateMarkers(maxMarkers, min, max, snaps)"], hostAttributes:{role:"slider", tabindex:0}, keyBindings:{"left down pagedown home":"_decrementKey", "right up pageup end":"_incrementKey"}, increment:function() {
  this.value = this._clampValue(this.value + this.step);
}, decrement:function() {
  this.value = this._clampValue(this.value - this.step);
}, _updateKnob:function(a, b, c, d, e) {
  this.setAttribute("aria-valuemin", b);
  this.setAttribute("aria-valuemax", c);
  this.setAttribute("aria-valuenow", a);
  this._positionKnob(this._calcRatio(a));
}, _valueChanged:function() {
  this.fire("value-change");
}, _immediateValueChanged:function() {
  this.dragging ? this.fire("immediate-value-change") : this.value = this.immediateValue;
}, _secondaryProgressChanged:function() {
  this.secondaryProgress = this._clampValue(this.secondaryProgress);
}, _expandKnob:function() {
  this._setExpand(!0);
}, _resetKnob:function() {
  this.cancelDebouncer("expandKnob");
  this._setExpand(!1);
}, _positionKnob:function(a) {
  this._setImmediateValue(this._calcStep(this._calcKnobPosition(a)));
  this._setRatio(this._calcRatio(this.immediateValue));
  this.$.sliderKnob.style.left = 100 * this.ratio + "%";
  this.dragging && (this._knobstartx = this.ratio * this._w, this.translate3d(0, 0, 0, this.$.sliderKnob));
}, _calcKnobPosition:function(a) {
  return (this.max - this.min) * a + this.min;
}, _onTrack:function(a) {
  a.stopPropagation();
  switch(a.detail.state) {
    case "start":
      this._trackStart(a);
      break;
    case "track":
      this._trackX(a);
      break;
    case "end":
      this._trackEnd();
  }
}, _trackStart:function(a) {
  this._w = this.$.sliderBar.offsetWidth;
  this._knobstartx = this._startx = this._x = this.ratio * this._w;
  this._minx = -this._startx;
  this._maxx = this._w - this._startx;
  this.$.sliderKnob.classList.add("dragging");
  this._setDragging(!0);
}, _trackX:function(a) {
  this.dragging || this._trackStart(a);
  this._x = this._startx + Math.min(this._maxx, Math.max(this._minx, a.detail.dx));
  a = this._calcStep(this._calcKnobPosition(this._x / this._w));
  this._setImmediateValue(a);
  a = this._calcRatio(this.immediateValue) * this._w - this._knobstartx;
  this.translate3d(a + "px", 0, 0, this.$.sliderKnob);
}, _trackEnd:function() {
  var a = this.$.sliderKnob.style;
  this.$.sliderKnob.classList.remove("dragging");
  this._setDragging(!1);
  this._resetKnob();
  this.value = this.immediateValue;
  a.transform = a.webkitTransform = "";
  this.fire("change");
}, _knobdown:function(a) {
  this._expandKnob();
  a.preventDefault();
  this.focus();
}, _bardown:function(a) {
  this._w = this.$.sliderBar.offsetWidth;
  var b = this.$.sliderBar.getBoundingClientRect(), b = (a.detail.x - b.left) / this._w, c = this.ratio;
  this._setTransiting(!0);
  this._positionKnob(b);
  this.debounce("expandKnob", this._expandKnob, 60);
  c === this.ratio && this._setTransiting(!1);
  this.async(function() {
    this.fire("change");
  });
  a.preventDefault();
  this.focus();
}, _knobTransitionEnd:function(a) {
  a.target === this.$.sliderKnob && this._setTransiting(!1);
}, _updateMarkers:function(a, b, c, d) {
  d || this._setMarkers([]);
  b = Math.round((c - b) / this.step);
  b > a && (b = a);
  this._setMarkers(Array(b));
}, _mergeClasses:function(a) {
  return Object.keys(a).filter(function(b) {
    return a[b];
  }).join(" ");
}, _getClassNames:function() {
  return this._mergeClasses({disabled:this.disabled, pin:this.pin, snaps:this.snaps, ring:this.immediateValue <= this.min, expand:this.expand, dragging:this.dragging, transiting:this.transiting, editable:this.editable});
}, _incrementKey:function(a) {
  this.disabled || ("end" === a.detail.key ? this.value = this.max : this.increment(), this.fire("change"));
}, _decrementKey:function(a) {
  this.disabled || ("home" === a.detail.key ? this.value = this.min : this.decrement(), this.fire("change"));
}, _changeValue:function(a) {
  this.value = a.target.value;
  this.fire("change");
}, _inputKeyDown:function(a) {
  a.stopPropagation();
}, _createRipple:function() {
  this._rippleContainer = this.$.sliderKnob;
  return Polymer.PaperInkyFocusBehaviorImpl._createRipple.call(this);
}, _focusedChanged:function(a) {
  a && this.ensureRipple();
  this.hasRipple() && (this._ripple.style.display = a ? "" : "none", this._ripple.holdDown = a);
}});
Polymer.PaperSpinnerBehavior = {listeners:{animationend:"__reset", webkitAnimationEnd:"__reset"}, properties:{active:{type:Boolean, value:!1, reflectToAttribute:!0, observer:"__activeChanged"}, alt:{type:String, value:"loading", observer:"__altChanged"}, __coolingDown:{type:Boolean, value:!1}}, __computeContainerClasses:function(a, b) {
  return [a || b ? "active" : "", b ? "cooldown" : ""].join(" ");
}, __activeChanged:function(a, b) {
  this.__setAriaHidden(!a);
  this.__coolingDown = !a && b;
}, __altChanged:function(a) {
  a === this.getPropertyInfo("alt").value ? this.alt = this.getAttribute("aria-label") || a : (this.__setAriaHidden("" === a), this.setAttribute("aria-label", a));
}, __setAriaHidden:function(a) {
  a ? this.setAttribute("aria-hidden", "true") : this.removeAttribute("aria-hidden");
}, __reset:function() {
  this.__coolingDown = this.active = !1;
}};
Polymer({is:"paper-spinner", behaviors:[Polymer.PaperSpinnerBehavior]});
console.warn("This file is deprecated. Please use `iron-flex-layout/iron-flex-layout-classes.html`, and one of the specific dom-modules instead");
console.warn("This file is deprecated. Please use `iron-flex-layout/iron-flex-layout-classes.html`, and one of the specific dom-modules instead");
Polymer({is:"paper-tab", behaviors:[Polymer.IronControlState, Polymer.IronButtonState, Polymer.PaperRippleBehavior], properties:{link:{type:Boolean, value:!1, reflectToAttribute:!0}}, hostAttributes:{role:"tab"}, listeners:{down:"_updateNoink", tap:"_onTap"}, attached:function() {
  this._updateNoink();
}, get _parentNoink() {
  var a = Polymer.dom(this).parentNode;
  return !!a && !!a.noink;
}, _updateNoink:function() {
  this.noink = !!this.noink || !!this._parentNoink;
}, _onTap:function(a) {
  if (this.link) {
    var b = this.queryEffectiveChildren("a");
    b && a.target !== b && b.click();
  }
}});
Polymer({is:"paper-tabs", behaviors:[Polymer.IronResizableBehavior, Polymer.IronMenubarBehavior], properties:{noink:{type:Boolean, value:!1, observer:"_noinkChanged"}, noBar:{type:Boolean, value:!1}, noSlide:{type:Boolean, value:!1}, scrollable:{type:Boolean, value:!1}, disableDrag:{type:Boolean, value:!1}, hideScrollButtons:{type:Boolean, value:!1}, alignBottom:{type:Boolean, value:!1}, selectable:{type:String, value:"paper-tab"}, autoselect:{type:Boolean, value:!1}, autoselectDelay:{type:Number, 
value:0}, _step:{type:Number, value:10}, _holdDelay:{type:Number, value:1}, _leftHidden:{type:Boolean, value:!1}, _rightHidden:{type:Boolean, value:!1}, _previousTab:{type:Object}}, hostAttributes:{role:"tablist"}, listeners:{"iron-resize":"_onTabSizingChanged", "iron-items-changed":"_onTabSizingChanged", "iron-select":"_onIronSelect", "iron-deselect":"_onIronDeselect"}, keyBindings:{"left:keyup right:keyup":"_onArrowKeyup"}, created:function() {
  this._holdJob = null;
  this._pendingActivationTimeout = this._pendingActivationItem = void 0;
  this._bindDelayedActivationHandler = this._delayedActivationHandler.bind(this);
  this.addEventListener("blur", this._onBlurCapture.bind(this), !0);
}, ready:function() {
  this.setScrollDirection("y", this.$.tabsContainer);
}, detached:function() {
  this._cancelPendingActivation();
}, _noinkChanged:function(a) {
  Polymer.dom(this).querySelectorAll("paper-tab").forEach(a ? this._setNoinkAttribute : this._removeNoinkAttribute);
}, _setNoinkAttribute:function(a) {
  a.setAttribute("noink", "");
}, _removeNoinkAttribute:function(a) {
  a.removeAttribute("noink");
}, _computeScrollButtonClass:function(a, b, c) {
  return !b || c ? "hidden" : a ? "not-visible" : "";
}, _computeTabsContentClass:function(a) {
  return a ? "scrollable" : "horizontal";
}, _computeSelectionBarClass:function(a, b) {
  return a ? "hidden" : b ? "align-bottom" : "";
}, _onTabSizingChanged:function() {
  this.debounce("_onTabSizingChanged", function() {
    this._scroll();
    this._tabChanged(this.selectedItem);
  }, 10);
}, _onIronSelect:function(a) {
  this._tabChanged(a.detail.item, this._previousTab);
  this._previousTab = a.detail.item;
  this.cancelDebouncer("tab-changed");
}, _onIronDeselect:function(a) {
  this.debounce("tab-changed", function() {
    this._tabChanged(null, this._previousTab);
  }, 1);
}, _activateHandler:function() {
  this._cancelPendingActivation();
  Polymer.IronMenuBehaviorImpl._activateHandler.apply(this, arguments);
}, _scheduleActivation:function(a, b) {
  this._pendingActivationItem = a;
  this._pendingActivationTimeout = this.async(this._bindDelayedActivationHandler, b);
}, _delayedActivationHandler:function() {
  var a = this._pendingActivationItem;
  this._pendingActivationTimeout = this._pendingActivationItem = void 0;
  a.fire(this.activateEvent, null, {bubbles:!0, cancelable:!0});
}, _cancelPendingActivation:function() {
  void 0 !== this._pendingActivationTimeout && (this.cancelAsync(this._pendingActivationTimeout), this._pendingActivationTimeout = this._pendingActivationItem = void 0);
}, _onArrowKeyup:function(a) {
  this.autoselect && this._scheduleActivation(this.focusedItem, this.autoselectDelay);
}, _onBlurCapture:function(a) {
  a.target === this._pendingActivationItem && this._cancelPendingActivation();
}, get _tabContainerScrollSize() {
  return Math.max(0, this.$.tabsContainer.scrollWidth - this.$.tabsContainer.offsetWidth);
}, _scroll:function(a, b) {
  this.scrollable && this._affectScroll(b && -b.ddx || 0);
}, _down:function(a) {
  this.async(function() {
    this._defaultFocusAsync && (this.cancelAsync(this._defaultFocusAsync), this._defaultFocusAsync = null);
  }, 1);
}, _affectScroll:function(a) {
  this.$.tabsContainer.scrollLeft += a;
  a = this.$.tabsContainer.scrollLeft;
  this._leftHidden = 0 === a;
  this._rightHidden = a === this._tabContainerScrollSize;
}, _onLeftScrollButtonDown:function() {
  this._scrollToLeft();
  this._holdJob = setInterval(this._scrollToLeft.bind(this), this._holdDelay);
}, _onRightScrollButtonDown:function() {
  this._scrollToRight();
  this._holdJob = setInterval(this._scrollToRight.bind(this), this._holdDelay);
}, _onScrollButtonUp:function() {
  clearInterval(this._holdJob);
  this._holdJob = null;
}, _scrollToLeft:function() {
  this._affectScroll(-this._step);
}, _scrollToRight:function() {
  this._affectScroll(this._step);
}, _tabChanged:function(a, b) {
  if (a) {
    var c = this.$.tabsContent.getBoundingClientRect(), d = c.width, e = a.getBoundingClientRect(), c = e.left - c.left;
    this._pos = {width:this._calcPercent(e.width, d), left:this._calcPercent(c, d)};
    if (this.noSlide || null == b) {
      this._positionBar(this._pos.width, this._pos.left);
    } else {
      var f = b.getBoundingClientRect();
      b = this.items.indexOf(b);
      a = this.items.indexOf(a);
      this.$.selectionBar.classList.add("expand");
      a = b < a;
      this._isRTL && (a = !a);
      a ? this._positionBar(this._calcPercent(e.left + e.width - f.left, d) - 5, this._left) : this._positionBar(this._calcPercent(f.left + f.width - e.left, d) - 5, this._calcPercent(c, d) + 5);
      this.scrollable && this._scrollToSelectedIfNeeded(e.width, c);
    }
  } else {
    this._positionBar(0, 0);
  }
}, _scrollToSelectedIfNeeded:function(a, b) {
  b -= this.$.tabsContainer.scrollLeft;
  0 > b ? this.$.tabsContainer.scrollLeft += b : (b += a - this.$.tabsContainer.offsetWidth, 0 < b && (this.$.tabsContainer.scrollLeft += b));
}, _calcPercent:function(a, b) {
  return 100 * a / b;
}, _positionBar:function(a, b) {
  a = a || 0;
  b = b || 0;
  this._width = a;
  this._left = b;
  this.transform("translate3d(" + b + "%, 0, 0) scaleX(" + a / 100 + ")", this.$.selectionBar);
}, _onBarTransitionEnd:function(a) {
  a = this.$.selectionBar.classList;
  a.contains("expand") ? (a.remove("expand"), a.add("contract"), this._positionBar(this._pos.width, this._pos.left)) : a.contains("contract") && a.remove("contract");
}});
(function() {
  var a = null;
  Polymer({is:"paper-toast", behaviors:[Polymer.IronOverlayBehavior], properties:{duration:{type:Number, value:3000}, text:{type:String, value:""}, noCancelOnOutsideClick:{type:Boolean, value:!0}, noAutoFocus:{type:Boolean, value:!0}}, listeners:{transitionend:"__onTransitionEnd"}, get visible() {
    console.warn("`visible` is deprecated, use `opened` instead");
    return this.opened;
  }, get _canAutoClose() {
    return 0 < this.duration && Infinity !== this.duration;
  }, created:function() {
    this._autoClose = null;
    Polymer.IronA11yAnnouncer.requestAvailability();
  }, show:function(a) {
    "string" == typeof a && (a = {text:a});
    for (var b in a) {
      0 === b.indexOf("_") ? console.warn('The property "' + b + '" is private and was not set.') : b in this ? this[b] = a[b] : console.warn('The property "' + b + '" is not valid.');
    }
    this.open();
  }, hide:function() {
    this.close();
  }, center:function() {
    if (this.fitInto === window) {
      this.style.bottom = this.style.left = "";
    } else {
      var a = this.fitInto.getBoundingClientRect();
      this.style.left = a.left + "px";
      this.style.bottom = window.innerHeight - a.bottom + "px";
    }
  }, __onTransitionEnd:function(a) {
    a && a.target === this && "opacity" === a.propertyName && (this.opened ? this._finishRenderOpened() : this._finishRenderClosed());
  }, _openedChanged:function() {
    null !== this._autoClose && (this.cancelAsync(this._autoClose), this._autoClose = null);
    this.opened ? (a && a !== this && a.close(), a = this, this.fire("iron-announce", {text:this.text}), this._canAutoClose && (this._autoClose = this.async(this.close, this.duration))) : a === this && (a = null);
    Polymer.IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);
  }, _renderOpened:function() {
    this.classList.add("paper-toast-open");
  }, _renderClosed:function() {
    this.classList.remove("paper-toast-open");
  }, _onIronResize:function() {
    Polymer.IronOverlayBehaviorImpl._onIronResize.apply(this, arguments);
    this.opened && (this.style.position = "");
  }});
})();
Polymer({is:"paper-toggle-button", behaviors:[Polymer.PaperCheckedElementBehavior], hostAttributes:{role:"button", "aria-pressed":"false", tabindex:0}, properties:{}, listeners:{track:"_ontrack"}, _ontrack:function(a) {
  a = a.detail;
  "start" === a.state ? this._trackStart(a) : "track" === a.state ? this._trackMove(a) : "end" === a.state && this._trackEnd(a);
}, _trackStart:function(a) {
  this._width = this.$.toggleBar.offsetWidth / 2;
  this._trackChecked = this.checked;
  this.$.toggleButton.classList.add("dragging");
}, _trackMove:function(a) {
  a = a.dx;
  this._x = Math.min(this._width, Math.max(0, this._trackChecked ? this._width + a : a));
  this.translate3d(this._x + "px", 0, 0, this.$.toggleButton);
  this._userActivate(this._x > this._width / 2);
}, _trackEnd:function(a) {
  this.$.toggleButton.classList.remove("dragging");
  this.transform("", this.$.toggleButton);
}, _createRipple:function() {
  this._rippleContainer = this.$.toggleButton;
  var a = Polymer.PaperRippleBehavior._createRipple();
  a.id = "ink";
  a.setAttribute("recenters", "");
  a.classList.add("circle", "toggle-ink");
  return a;
}});
Polymer({is:"paper-toolbar", hostAttributes:{role:"toolbar"}, properties:{bottomJustify:{type:String, value:""}, justify:{type:String, value:""}, middleJustify:{type:String, value:""}}, attached:function() {
  this._observer = this._observe(this);
  this._updateAriaLabelledBy();
}, detached:function() {
  this._observer && this._observer.disconnect();
}, _observe:function(a) {
  var b = new MutationObserver(function() {
    this._updateAriaLabelledBy();
  }.bind(this));
  b.observe(a, {childList:!0, subtree:!0});
  return b;
}, _updateAriaLabelledBy:function() {
  for (var a = [], b = Polymer.dom(this.root).querySelectorAll("content"), c, d = 0; c = b[d]; d++) {
    c = Polymer.dom(c).getDistributedNodes();
    for (var e, f = 0; e = c[f]; f++) {
      if (e.classList && e.classList.contains("title")) {
        if (e.id) {
          a.push(e.id);
        } else {
          var g = "paper-toolbar-label-" + Math.floor(10000 * Math.random());
          e.id = g;
          a.push(g);
        }
      }
    }
  }
  0 < a.length && this.setAttribute("aria-labelledby", a.join(" "));
}, _computeBarExtraClasses:function(a) {
  return a ? a + ("justified" === a ? "" : "-justified") : "";
}});
Polymer({is:"paper-tooltip", hostAttributes:{role:"tooltip", tabindex:-1}, behaviors:[Polymer.NeonAnimationRunnerBehavior], properties:{for:{type:String, observer:"_forChanged"}, manualMode:{type:Boolean, value:!1}, position:{type:String, value:"bottom"}, fitToVisibleBounds:{type:Boolean, value:!1}, offset:{type:Number, value:14}, marginTop:{type:Number, value:14}, animationDelay:{type:Number, value:500}, animationConfig:{type:Object, value:function() {
  return {entry:[{name:"fade-in-animation", node:this, timing:{delay:0}}], exit:[{name:"fade-out-animation", node:this}]};
}}, _showing:{type:Boolean, value:!1}}, listeners:{"neon-animation-finish":"_onAnimationFinish", mouseenter:"hide"}, get target() {
  var a = Polymer.dom(this).parentNode, b = Polymer.dom(this).getOwnerRoot();
  return this.for ? Polymer.dom(b).querySelector("#" + this.for) : a.nodeType == Node.DOCUMENT_FRAGMENT_NODE ? b.host : a;
}, attached:function() {
  this._target = this.target;
  this.manualMode || (this.listen(this._target, "mouseenter", "show"), this.listen(this._target, "focus", "show"), this.listen(this._target, "mouseleave", "hide"), this.listen(this._target, "blur", "hide"), this.listen(this._target, "tap", "hide"));
}, detached:function() {
  this._target && !this.manualMode && (this.unlisten(this._target, "mouseenter", "show"), this.unlisten(this._target, "focus", "show"), this.unlisten(this._target, "mouseleave", "hide"), this.unlisten(this._target, "blur", "hide"), this.unlisten(this._target, "tap", "hide"));
}, show:function() {
  this._showing || "" === Polymer.dom(this).textContent.trim() || (this.cancelAnimation(), this._showing = !0, this.toggleClass("hidden", !1, this.$.tooltip), this.updatePosition(), this.animationConfig.entry[0].timing.delay = this.animationDelay, this._animationPlaying = !0, this.playAnimation("entry"));
}, hide:function() {
  this._showing && (this._animationPlaying ? (this.cancelAnimation(), this._showing = !1, this._onAnimationFinish()) : (this._showing = !1, this._animationPlaying = !0, this.playAnimation("exit")));
}, _forChanged:function() {
  this._target = this.target;
}, updatePosition:function() {
  if (this._target && this.offsetParent) {
    var a = this.offset;
    14 != this.marginTop && 14 == this.offset && (a = this.marginTop);
    var b = this.offsetParent.getBoundingClientRect(), c = this._target.getBoundingClientRect(), d = this.getBoundingClientRect(), e = (c.width - d.width) / 2, f = (c.height - d.height) / 2, g = c.left - b.left, b = c.top - b.top;
    switch(this.position) {
      case "top":
        var h = g + e;
        var l = b - d.height - a;
        break;
      case "bottom":
        h = g + e;
        l = b + c.height + a;
        break;
      case "left":
        h = g - d.width - a;
        l = b + f;
        break;
      case "right":
        h = g + c.width + a, l = b + f;
    }
    this.fitToVisibleBounds ? (h + d.width > window.innerWidth ? (this.style.right = "0px", this.style.left = "auto") : (this.style.left = Math.max(0, h) + "px", this.style.right = "auto"), l + d.height > window.innerHeight ? (this.style.bottom = "0px", this.style.top = "auto") : (this.style.top = Math.max(0, l) + "px", this.style.bottom = "auto")) : (this.style.left = h + "px", this.style.top = l + "px");
  }
}, _onAnimationFinish:function() {
  this._animationPlaying = !1;
  this._showing || this.toggleClass("hidden", !0, this.$.tooltip);
}});
Promise.all = Promise.all || function() {
  var a = Array.prototype.slice.call(1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0] : arguments);
  return new Promise(function(b, c) {
    function d(f, h) {
      try {
        if (h && ("object" === typeof h || "function" === typeof h)) {
          var g = h.then;
          if ("function" === typeof g) {
            g.call(h, function(a) {
              d(f, a);
            }, c);
            return;
          }
        }
        a[f] = h;
        0 === --e && b(a);
      } catch (n) {
        c(n);
      }
    }
    if (0 === a.length) {
      return b([]);
    }
    for (var e = a.length, f = 0; f < a.length; f++) {
      d(f, a[f]);
    }
  });
};
Promise.race = Promise.race || function(a) {
  return new Promise(function(b, c) {
    for (var d = 0, e = a.length; d < e; d++) {
      a[d].then(b, c);
    }
  });
};
Polymer({is:"app-drawer", properties:{opened:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, persistent:{type:Boolean, value:!1, reflectToAttribute:!0}, align:{type:String, value:"left"}, position:{type:String, readOnly:!0, value:"left", reflectToAttribute:!0}, swipeOpen:{type:Boolean, value:!1, reflectToAttribute:!0}, noFocusTrap:{type:Boolean, value:!1}}, observers:["resetLayout(position)", "_resetPosition(align, isAttached)"], _translateOffset:0, _trackDetails:null, _drawerState:0, 
_boundEscKeydownHandler:null, _firstTabStop:null, _lastTabStop:null, ready:function() {
  this.setScrollDirection("y");
  this._setTransitionDuration("0s");
}, attached:function() {
  Polymer.RenderStatus.afterNextRender(this, function() {
    this._setTransitionDuration("");
    this._boundEscKeydownHandler = this._escKeydownHandler.bind(this);
    this._resetDrawerState();
    this.listen(this, "track", "_track");
    this.addEventListener("transitionend", this._transitionend.bind(this));
    this.addEventListener("keydown", this._tabKeydownHandler.bind(this));
  });
}, detached:function() {
  document.removeEventListener("keydown", this._boundEscKeydownHandler);
}, open:function() {
  this.opened = !0;
}, close:function() {
  this.opened = !1;
}, toggle:function() {
  this.opened = !this.opened;
}, getWidth:function() {
  return this.$.contentContainer.offsetWidth;
}, resetLayout:function() {
  this.debounce("_resetLayout", function() {
    this.fire("app-drawer-reset-layout");
  }, 1);
}, _isRTL:function() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _resetPosition:function() {
  switch(this.align) {
    case "start":
      this._setPosition(this._isRTL() ? "right" : "left");
      return;
    case "end":
      this._setPosition(this._isRTL() ? "left" : "right");
      return;
  }
  this._setPosition(this.align);
}, _escKeydownHandler:function(a) {
  27 === a.keyCode && (a.preventDefault(), this.close());
}, _track:function(a) {
  if (!this.persistent) {
    switch(a.preventDefault(), a.detail.state) {
      case "start":
        this._trackStart(a);
        break;
      case "track":
        this._trackMove(a);
        break;
      case "end":
        this._trackEnd(a);
    }
  }
}, _trackStart:function(a) {
  this._drawerState = this._DRAWER_STATE.TRACKING;
  this._setTransitionDuration("0s");
  this.style.visibility = "visible";
  a = this.$.contentContainer.getBoundingClientRect();
  this._translateOffset = "left" === this.position ? a.left : a.right - window.innerWidth;
  this._trackDetails = [];
}, _trackMove:function(a) {
  this._translateDrawer(a.detail.dx + this._translateOffset);
  this._trackDetails.push({dx:a.detail.dx, timeStamp:Date.now()});
}, _trackEnd:function(a) {
  var b = a.detail.dx + this._translateOffset, c = this.getWidth(), b = "left" === this.position ? 0 <= b || b <= -c : 0 >= b || b >= c;
  if (!b) {
    var d = this._trackDetails;
    this._trackDetails = null;
    this._flingDrawer(a, d);
    if (this._drawerState === this._DRAWER_STATE.FLINGING) {
      return;
    }
  }
  c /= 2;
  a.detail.dx < -c ? this.opened = "right" === this.position : a.detail.dx > c && (this.opened = "left" === this.position);
  b && this._resetDrawerState();
  this._setTransitionDuration("");
  this._resetDrawerTranslate();
  this.style.visibility = "";
}, _calculateVelocity:function(a, b) {
  for (var c = Date.now(), d = c - 100, e, f = 0, g = b.length - 1; f <= g;) {
    var h = f + g >> 1, l = b[h];
    l.timeStamp >= d ? (e = l, g = h - 1) : f = h + 1;
  }
  return e ? (a.detail.dx - e.dx) / (c - e.timeStamp || 1) : 0;
}, _flingDrawer:function(a, b) {
  b = this._calculateVelocity(a, b);
  if (!(Math.abs(b) < this._MIN_FLING_THRESHOLD)) {
    this._drawerState = this._DRAWER_STATE.FLINGING;
    a = a.detail.dx + this._translateOffset;
    var c = this.getWidth(), d = "left" === this.position, e = 0 < b;
    e ? (b = Math.max(b, this._MIN_TRANSITION_VELOCITY), this.opened = "left" === this.position) : (b = Math.min(b, -this._MIN_TRANSITION_VELOCITY), this.opened = "right" === this.position);
    this._setTransitionDuration(this._FLING_INITIAL_SLOPE * (!e && d ? -(a + c) : e && !d ? c - a : -a) / b + "ms");
    this._setTransitionTimingFunction(this._FLING_TIMING_FUNCTION);
    this._resetDrawerTranslate();
  }
}, _transitionend:function(a) {
  a = Polymer.dom(a).rootTarget;
  if (a === this.$.contentContainer || a === this.$.scrim) {
    this._drawerState === this._DRAWER_STATE.FLINGING && (this._setTransitionDuration(""), this._setTransitionTimingFunction(""), this.style.visibility = ""), this._resetDrawerState();
  }
}, _setTransitionDuration:function(a) {
  this.$.contentContainer.style.transitionDuration = a;
  this.$.scrim.style.transitionDuration = a;
}, _setTransitionTimingFunction:function(a) {
  this.$.contentContainer.style.transitionTimingFunction = a;
  this.$.scrim.style.transitionTimingFunction = a;
}, _translateDrawer:function(a) {
  var b = this.getWidth();
  "left" === this.position ? (a = Math.max(-b, Math.min(a, 0)), this.$.scrim.style.opacity = 1 + a / b) : (a = Math.max(0, Math.min(a, b)), this.$.scrim.style.opacity = 1 - a / b);
  this.translate3d(a + "px", "0", "0", this.$.contentContainer);
}, _resetDrawerTranslate:function() {
  this.$.scrim.style.opacity = "";
  this.transform("", this.$.contentContainer);
}, _resetDrawerState:function() {
  var a = this._drawerState;
  this._drawerState = this.opened ? this.persistent ? this._DRAWER_STATE.OPENED_PERSISTENT : this._DRAWER_STATE.OPENED : this._DRAWER_STATE.CLOSED;
  a !== this._drawerState && (this._drawerState === this._DRAWER_STATE.OPENED ? (this._setKeyboardFocusTrap(), document.addEventListener("keydown", this._boundEscKeydownHandler), document.body.style.overflow = "hidden") : (document.removeEventListener("keydown", this._boundEscKeydownHandler), document.body.style.overflow = ""), a !== this._DRAWER_STATE.INIT && this.fire("app-drawer-transitioned"));
}, _setKeyboardFocusTrap:function() {
  if (!this.noFocusTrap) {
    var a = Polymer.dom(this).querySelectorAll('a[href]:not([tabindex="-1"]),area[href]:not([tabindex="-1"]),input:not([disabled]):not([tabindex="-1"]),select:not([disabled]):not([tabindex="-1"]),textarea:not([disabled]):not([tabindex="-1"]),button:not([disabled]):not([tabindex="-1"]),iframe:not([tabindex="-1"]),[tabindex]:not([tabindex="-1"]),[contentEditable=true]:not([tabindex="-1"])');
    0 < a.length ? (this._firstTabStop = a[0], this._lastTabStop = a[a.length - 1]) : this._lastTabStop = this._firstTabStop = null;
    (a = this.getAttribute("tabindex")) && -1 < parseInt(a, 10) ? this.focus() : this._firstTabStop && this._firstTabStop.focus();
  }
}, _tabKeydownHandler:function(a) {
  this.noFocusTrap || this._drawerState !== this._DRAWER_STATE.OPENED || 9 !== a.keyCode || (a.shiftKey ? this._firstTabStop && Polymer.dom(a).localTarget === this._firstTabStop && (a.preventDefault(), this._lastTabStop.focus()) : this._lastTabStop && Polymer.dom(a).localTarget === this._lastTabStop && (a.preventDefault(), this._firstTabStop.focus()));
}, _MIN_FLING_THRESHOLD:0.2, _MIN_TRANSITION_VELOCITY:1.2, _FLING_TIMING_FUNCTION:"cubic-bezier(0.667, 1, 0.667, 1)", _FLING_INITIAL_SLOPE:1.5, _DRAWER_STATE:{INIT:0, OPENED:1, OPENED_PERSISTENT:2, CLOSED:3, TRACKING:4, FLINGING:5}});
Polymer({is:"app-drawer-layout", behaviors:[Polymer.IronResizableBehavior], properties:{forceNarrow:{type:Boolean, value:!1}, responsiveWidth:{type:String, value:"640px"}, _narrow:Boolean}, listeners:{tap:"_tapHandler", "app-drawer-reset-layout":"resetLayout"}, observers:["resetLayout(_narrow, isAttached)"], get drawer() {
  return Polymer.dom(this.$.drawerContent).getDistributedNodes()[0];
}, _tapHandler:function(a) {
  (a = Polymer.dom(a).localTarget) && a.hasAttribute("drawer-toggle") && this.drawer.toggle();
}, resetLayout:function() {
  this.debounce("_resetLayout", function() {
    if (this.isAttached) {
      var a = this.drawer, b = this.drawer.getWidth(), c = this.$.contentContainer;
      this._narrow ? (a.opened = a.persistent = !1, c.classList.add("narrow"), c.style.marginLeft = "", c.style.marginRight = "") : (a.opened = a.persistent = !0, c.classList.remove("narrow"), "right" == a.position ? (c.style.marginLeft = "", c.style.marginRight = b + "px") : (c.style.marginLeft = b + "px", c.style.marginRight = ""));
      this.notifyResize();
    }
  });
}, _computeMediaQuery:function(a, b) {
  return a ? "(min-width: 0px)" : "(max-width: " + b + ")";
}});
Polymer.IronScrollTargetBehavior = {properties:{scrollTarget:{type:HTMLElement, value:function() {
  return this._defaultScrollTarget;
}}}, observers:["_scrollTargetChanged(scrollTarget, isAttached)"], _scrollTargetChanged:function(a, b) {
  if (this._oldScrollTarget) {
    var c = this._oldScrollTarget === this._doc ? window : this._oldScrollTarget;
    c.removeEventListener("scroll", this._boundScrollHandler);
    this._oldScrollTarget = null;
  }
  b && ("document" === a ? this.scrollTarget = this._doc : "string" === typeof a ? this.scrollTarget = this.domHost ? this.domHost.$[a] : Polymer.dom(this.ownerDocument).querySelector("#" + a) : this._isValidScrollTarget() && (c = a === this._doc ? window : a, this._boundScrollHandler = this._boundScrollHandler || this._scrollHandler.bind(this), this._oldScrollTarget = a, c.addEventListener("scroll", this._boundScrollHandler)));
}, _scrollHandler:function() {
}, get _defaultScrollTarget() {
  return this._doc;
}, get _doc() {
  return this.ownerDocument.documentElement;
}, get _scrollTop() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.pageYOffset : this.scrollTarget.scrollTop : 0;
}, get _scrollLeft() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.pageXOffset : this.scrollTarget.scrollLeft : 0;
}, set _scrollTop(a) {
  this.scrollTarget === this._doc ? window.scrollTo(window.pageXOffset, a) : this._isValidScrollTarget() && (this.scrollTarget.scrollTop = a);
}, set _scrollLeft(a) {
  this.scrollTarget === this._doc ? window.scrollTo(a, window.pageYOffset) : this._isValidScrollTarget() && (this.scrollTarget.scrollLeft = a);
}, scroll:function(a, b) {
  this.scrollTarget === this._doc ? window.scrollTo(a, b) : this._isValidScrollTarget() && (this.scrollTarget.scrollLeft = a, this.scrollTarget.scrollTop = b);
}, get _scrollTargetWidth() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.innerWidth : this.scrollTarget.offsetWidth : 0;
}, get _scrollTargetHeight() {
  return this._isValidScrollTarget() ? this.scrollTarget === this._doc ? window.innerHeight : this.scrollTarget.offsetHeight : 0;
}, _isValidScrollTarget:function() {
  return this.scrollTarget instanceof HTMLElement;
}};
Polymer.AppLayout = Polymer.AppLayout || {};
Polymer.AppLayout._scrollEffects = Polymer.AppLayout._scrollEffects || {};
Polymer.AppLayout.scrollTimingFunction = function(a, b, c, d) {
  a /= d;
  return -c * a * (a - 2) + b;
};
Polymer.AppLayout.registerEffect = function(a, b) {
  if (null != Polymer.AppLayout._scrollEffects[a]) {
    throw Error("effect `" + a + "` is already registered.");
  }
  Polymer.AppLayout._scrollEffects[a] = b;
};
Polymer.AppLayout.scroll = function(a) {
  a = a || {};
  var b = document.documentElement, c = a.target || b, d = "scrollBehavior" in c.style && c.scroll, e = a.top || 0, f = a.left || 0, g = c === b ? window.scrollTo : function(a, b) {
    c.scrollLeft = a;
    c.scrollTop = b;
  };
  if ("smooth" === a.behavior) {
    if (d) {
      c.scroll(a);
    } else {
      var h = Polymer.AppLayout.scrollTimingFunction, l = Date.now(), n = c === b ? window.pageYOffset : c.scrollTop, p = c === b ? window.pageXOffset : c.scrollLeft, q = e - n, m = f - p;
      (function u() {
        var a = Date.now() - l;
        300 > a && (g(h(a, p, m, 300), h(a, n, q, 300)), requestAnimationFrame(u.bind(this)));
      }).call(this);
    }
  } else {
    "silent" === a.behavior && (b.classList.add("app-layout-silent-scroll"), clearInterval(Polymer.AppLayout._scrollTimer), Polymer.AppLayout._scrollTimer = setTimeout(function() {
      b.classList.remove("app-layout-silent-scroll");
      Polymer.AppLayout._scrollTimer = null;
    }, 100)), g(f, e);
  }
};
Polymer.AppScrollEffectsBehavior = [Polymer.IronScrollTargetBehavior, {properties:{effects:{type:String}, effectsConfig:{type:Object, value:function() {
  return {};
}}, disabled:{type:Boolean, reflectToAttribute:!0, value:!1}}, observers:["_effectsChanged(effects, effectsConfig)"], _updateScrollState:function() {
}, isOnScreen:function() {
  return !1;
}, isContentBelow:function() {
  return !1;
}, _effectsRunFn:null, _effects:null, get _clampedScrollTop() {
  return Math.max(0, this._scrollTop);
}, detached:function() {
  this._tearDownEffects();
}, createEffect:function(a, b) {
  var c = Polymer.AppLayout._scrollEffects[a];
  if (!c) {
    throw new ReferenceError(this._getUndefinedMsg(a));
  }
  a = this._boundEffect(c, b || {});
  a.setUp();
  return a;
}, _effectsChanged:function(a, b) {
  this._tearDownEffects();
  "" !== a && (a.split(" ").forEach(function(a) {
    var c;
    "" !== a && ((c = Polymer.AppLayout._scrollEffects[a]) ? this._effects.push(this._boundEffect(c, b[a])) : this._warn(this._logf("_effectsChanged", this._getUndefinedMsg(a))));
  }, this), this._setUpEffect());
}, _layoutIfDirty:function() {
  return this.offsetWidth;
}, _boundEffect:function(a, b) {
  b = b || {};
  var c = parseFloat(b.startsAt || 0), d = parseFloat(b.endsAt || 1), e = d - c, f = Function(), d = 0 === c && 1 === d ? a.run : function(b, d) {
    a.run.call(this, Math.max(0, (b - c) / e), d);
  };
  return {setUp:a.setUp ? a.setUp.bind(this, b) : f, run:a.run ? d.bind(this) : f, tearDown:a.tearDown ? a.tearDown.bind(this) : f};
}, _setUpEffect:function() {
  this.isAttached && this._effects && (this._effectsRunFn = [], this._effects.forEach(function(a) {
    !1 !== a.setUp() && this._effectsRunFn.push(a.run);
  }, this));
}, _tearDownEffects:function() {
  this._effects && this._effects.forEach(function(a) {
    a.tearDown();
  });
  this._effectsRunFn = [];
  this._effects = [];
}, _runEffects:function(a, b) {
  this._effectsRunFn && this._effectsRunFn.forEach(function(c) {
    c(a, b);
  });
}, _scrollHandler:function() {
  this.disabled || this._updateScrollState(this._clampedScrollTop);
}, _getUndefinedMsg:function(a) {
  return "Scroll effect `" + a + "` is undefined. Did you forget to import app-layout/app-scroll-effects/effects/" + a + ".html ?";
}}];
Polymer({is:"app-header", behaviors:[Polymer.AppScrollEffectsBehavior, Polymer.IronResizableBehavior], properties:{condenses:{type:Boolean, value:!1}, fixed:{type:Boolean, value:!1}, reveals:{type:Boolean, value:!1}, shadow:{type:Boolean, reflectToAttribute:!0, value:!1}}, observers:["resetLayout(isAttached, condenses, fixed)"], listeners:{"iron-resize":"_resizeHandler"}, _height:0, _dHeight:0, _primaryElTop:0, _primaryEl:null, _top:0, _progress:0, _wasScrollingDown:!1, _initScrollTop:0, _initTimestamp:0, 
_lastTimestamp:0, _lastScrollTop:0, get _maxHeaderTop() {
  return this.fixed ? this._dHeight : this._height + 5;
}, _getPrimaryEl:function() {
  for (var a, b = Polymer.dom(this.$.content).getDistributedNodes(), c = 0; c < b.length; c++) {
    if (b[c].nodeType === Node.ELEMENT_NODE) {
      var d = b[c];
      if (d.hasAttribute("primary")) {
        a = d;
        break;
      } else {
        a || (a = d);
      }
    }
  }
  return a;
}, resetLayout:function() {
  this.fire("app-header-reset-layout");
  this.debounce("_resetLayout", function() {
    if (0 !== this.offsetWidth || 0 !== this.offsetHeight) {
      var a = this._clampedScrollTop, b = 0 === this._height || 0 === a, c = this.disabled;
      this._height = this.offsetHeight;
      this._primaryEl = this._getPrimaryEl();
      this.disabled = !0;
      b || this._updateScrollState(0, !0);
      this._mayMove() ? this._dHeight = this._primaryEl ? this._height - this._primaryEl.offsetHeight : 0 : this._dHeight = 0;
      this._primaryElTop = this._primaryEl ? this._primaryEl.offsetTop : 0;
      this._setUpEffect();
      b ? this._updateScrollState(a, !0) : (this._updateScrollState(this._lastScrollTop, !0), this._layoutIfDirty());
      this.disabled = c;
    }
  });
}, _updateScrollState:function(a, b) {
  if (0 !== this._height) {
    var c = 0, d = this._top;
    var e = this._maxHeaderTop;
    var f = a - this._lastScrollTop, g = Math.abs(f), h = a > this._lastScrollTop, l = Date.now();
    this._mayMove() && (c = this._clamp(this.reveals ? d + f : a, 0, e));
    a >= this._dHeight && (c = this.condenses ? Math.max(this._dHeight, c) : c, this.style.transitionDuration = "0ms");
    if (this.reveals && !this.disabled && 100 > g) {
      if (300 < l - this._initTimestamp || this._wasScrollingDown !== h) {
        this._initScrollTop = a, this._initTimestamp = l;
      }
      a >= e && (30 < Math.abs(this._initScrollTop - a) || 10 < g ? (h && a >= e ? c = e : !h && a >= this._dHeight && (c = this.condenses ? this._dHeight : 0), this.style.transitionDuration = this._clamp((c - d) / (f / (l - this._lastTimestamp)), 0, 300) + "ms") : c = this._top);
    }
    e = 0 === this._dHeight ? 0 < a ? 1 : 0 : c / this._dHeight;
    b || (this._lastScrollTop = a, this._top = c, this._wasScrollingDown = h, this._lastTimestamp = l);
    if (b || e !== this._progress || d !== c || 0 === a) {
      this._progress = e, this._runEffects(e, c), this._transformHeader(c);
    }
  }
}, _mayMove:function() {
  return this.condenses || !this.fixed;
}, willCondense:function() {
  return 0 < this._dHeight && this.condenses;
}, isOnScreen:function() {
  return 0 !== this._height && this._top < this._height;
}, isContentBelow:function() {
  return 0 === this._top ? 0 < this._clampedScrollTop : 0 <= this._clampedScrollTop - this._maxHeaderTop;
}, _transformHeader:function(a) {
  this.translate3d(0, -a + "px", 0);
  this._primaryEl && this.condenses && a >= this._primaryElTop && this.translate3d(0, Math.min(a, this._dHeight) - this._primaryElTop + "px", 0, this._primaryEl);
}, _resizeHandler:function() {
  this.resetLayout();
}, _clamp:function(a, b, c) {
  return Math.min(c, Math.max(b, a));
}, getScrollState:function() {
  return {progress:this._progress, top:this._top};
}});
Polymer({is:"app-header-layout", behaviors:[Polymer.IronResizableBehavior], properties:{hasScrollingRegion:{type:Boolean, value:!1, reflectToAttribute:!0}}, listeners:{"iron-resize":"_resizeHandler", "app-header-reset-layout":"resetLayout"}, observers:["resetLayout(isAttached, hasScrollingRegion)"], get header() {
  return Polymer.dom(this.$.header).getDistributedNodes()[0];
}, resetLayout:function() {
  this._updateScroller();
  this.debounce("_resetLayout", this._updateContentPosition);
}, _updateContentPosition:function() {
  var a = this.header;
  if (this.isAttached && a) {
    var b = a.offsetHeight;
    if (this.hasScrollingRegion) {
      a.style.left = "", a.style.right = "";
    } else {
      var c = this.getBoundingClientRect(), d = document.documentElement.clientWidth - c.right;
      a.style.left = c.left + "px";
      a.style.right = d + "px";
    }
    c = this.$.contentContainer.style;
    a.fixed && !a.willCondense() && this.hasScrollingRegion ? (c.marginTop = b + "px", c.paddingTop = "") : (c.paddingTop = b + "px", c.marginTop = "");
  }
}, _updateScroller:function() {
  if (this.isAttached) {
    var a = this.header;
    a && (a.scrollTarget = this.hasScrollingRegion ? this.$.contentContainer : this.ownerDocument.documentElement);
  }
}, _resizeHandler:function() {
  this.resetLayout();
}});
Polymer({is:"app-toolbar"});
Polymer.AppLayout.registerEffect("blend-background", {setUp:function() {
  this.$.backgroundFrontLayer.style.willChange = "opacity";
  this.$.backgroundFrontLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.willChange = "opacity";
  this.$.backgroundRearLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.opacity = 0;
}, run:function(a, b) {
  this.$.backgroundFrontLayer.style.opacity = 1 - a;
  this.$.backgroundRearLayer.style.opacity = a;
}});
Polymer.AppLayout.registerEffect("fade-background", {setUp:function(a) {
  a = a.duration || "0.5s";
  this.$.backgroundFrontLayer.style.willChange = "opacity";
  this.$.backgroundFrontLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundFrontLayer.style.transitionProperty = "opacity";
  this.$.backgroundFrontLayer.style.transitionDuration = a;
  this.$.backgroundRearLayer.style.willChange = "opacity";
  this.$.backgroundRearLayer.style.webkitTransform = "translateZ(0)";
  this.$.backgroundRearLayer.style.transitionProperty = "opacity";
  this.$.backgroundRearLayer.style.transitionDuration = a;
}, run:function(a, b) {
  1 <= a ? (this.$.backgroundFrontLayer.style.opacity = 0, this.$.backgroundRearLayer.style.opacity = 1) : (this.$.backgroundFrontLayer.style.opacity = 1, this.$.backgroundRearLayer.style.opacity = 0);
}});
Polymer.AppLayout.registerEffect("waterfall", {run:function(a, b) {
  this.shadow = this.isOnScreen() && this.isContentBelow();
}});
(function() {
  function a(a, c, d, e) {
    d.apply(e, c.map(function(b) {
      return b[0] + (b[1] - b[0]) * a;
    }));
  }
  Polymer.AppLayout.registerEffect("resize-title", {setUp:function() {
    var a = Polymer.dom(this).querySelector("[title]"), c = Polymer.dom(this).querySelector("[condensed-title]");
    if (!c) {
      return this._warn(this._logf("effects[resize-title]", "undefined `condensed-title`")), !1;
    }
    if (!a) {
      return this._warn(this._logf("effects[resize-title]", "undefined `title`")), !1;
    }
    c.style.willChange = "opacity";
    a.style.willChange = "opacity";
    c.style.webkitTransform = "translateZ(0)";
    a.style.webkitTransform = "translateZ(0)";
    var d = a.getBoundingClientRect(), e = c.getBoundingClientRect(), f = {};
    f.scale = parseInt(window.getComputedStyle(c)["font-size"], 10) / parseInt(window.getComputedStyle(a)["font-size"], 10);
    f.titleDX = d.left - e.left;
    f.titleDY = d.top - e.top;
    f.condensedTitle = c;
    f.title = a;
    this._fxResizeTitle = f;
  }, tearDown:function() {
    delete this._fxResizeTitle;
  }, run:function(b, c) {
    var d = this._fxResizeTitle;
    this.condenses || (c = 0);
    1 <= b ? (d.title.style.opacity = 0, d.condensedTitle.style.opacity = 1) : (d.title.style.opacity = 1, d.condensedTitle.style.opacity = 0);
    a(Math.min(1, b), [[1, d.scale], [0, -d.titleDX], [c, c - d.titleDY]], function(a, b, c) {
      this.transform("translate(" + b + "px, " + c + "px) scale3d(" + a + ", " + a + ", 1)", d.title);
    }, this);
  }});
})();
Polymer.AppLayout.registerEffect("parallax-background", {setUp:function(a) {
  a = parseFloat(a.scalar);
  this._deltaBg = this.$.backgroundFrontLayer.offsetHeight - this.$.background.offsetHeight;
  0 === this._deltaBg ? (isNaN(a) && (a = 0.8), this._deltaBg = this._dHeight * a) : (isNaN(a) && (a = 1), this._deltaBg *= a);
}, tearDown:function() {
  delete this._deltaBg;
}, run:function(a, b) {
  this.transform("translate3d(0px, " + this._deltaBg * Math.min(1, a) + "px, 0px)", this.$.backgroundFrontLayer);
  this.$.backgroundRearLayer && this.transform("translate3d(0px, " + this._deltaBg * Math.min(1, a) + "px, 0px)", this.$.backgroundRearLayer);
}});
Polymer.AppLayout.registerEffect("material", {setUp:function() {
  this.effects = "waterfall resize-title blend-background parallax-background";
  return !1;
}});
Polymer.AppLayout.registerEffect("resize-snapped-title", {setUp:function(a) {
  var b = Polymer.dom(this).querySelector("[title]"), c = Polymer.dom(this).querySelector("[condensed-title]");
  a = a.duration || "0.2s";
  var d = {};
  if (!c) {
    return this._warn(this._logf("effects[resize-snapped-title]", "undefined `condensed-title`")), !1;
  }
  if (!b) {
    return this._warn(this._logf("effects[resize-snapped-title]", "undefined `title`")), !1;
  }
  b.style.transitionProperty = "opacity";
  b.style.transitionDuration = a;
  c.style.transitionProperty = "opacity";
  c.style.transitionDuration = a;
  d.condensedTitle = c;
  d.title = b;
  this._fxResizeSnappedTitle = d;
}, tearDown:function() {
  var a = this._fxResizeSnappedTitle;
  a.title.style.transition = "";
  a.condensedTitle.style.transition = "";
  delete this._fxResizeSnappedTitle;
}, run:function(a, b) {
  b = this._fxResizeSnappedTitle;
  0 < a ? (b.title.style.opacity = 0, b.condensedTitle.style.opacity = 1) : (b.title.style.opacity = 1, b.condensedTitle.style.opacity = 0);
}});
Polymer({is:"paper-fullscreen-dialog", properties:{dismissIcon:{type:String, value:"", observer:"_dismissIconChanged"}, responsiveWidth:{type:String, value:"600px"}, narrow:{type:Boolean, reflectToAttribute:!0, observer:"_narrowChanged", notify:!0}, modal:{type:Boolean, value:!0}, _autoCloseDisabled:{type:Boolean, value:!0}, _layered:{type:Boolean, value:!1}, _affirmativeBtn:Object}, behaviors:[Polymer.PaperDialogBehavior], attached:function() {
  this.sizingTarget = this.$.scroller;
  var a = Polymer.dom(this.$.affirmative).getDistributedNodes();
  a.length && (this._affirmativeBtn = a[0]);
  this._dismissIconChanged();
}, _dismissIconChanged:function() {
  this.$.dismissBtn.icon = this.dismissIcon ? this.dismissIcon : this._affirmativeBtn ? "close" : "arrow-back";
}, _narrowChanged:function() {
  this.narrow ? (this.style.width = "auto", this.modal = !1) : (this.style.width = this.responsiveWidth, this.modal = !0);
  this.fire("paper-responsive-change", {narrow:this.narrow});
}});
(function() {
  var a = null;
  Polymer({is:"paper-multidrawer-panel", behaviors:[Polymer.IronResizableBehavior], properties:{defaultSelected:{type:String, value:"main"}, disableLeftEdgeSwipe:{type:Boolean, value:!1}, disableRightEdgeSwipe:{type:Boolean, value:!1}, disableSwipe:{type:Boolean, value:!1}, dragging:{type:Boolean, value:!1, readOnly:!0, notify:!0}, drawerWidth:{type:String, value:"256px"}, leftDrawerWidth:{type:String, value:null}, rightDrawerWidth:{type:String, value:null}, edgeSwipeSensitivity:{type:Number, value:30}, 
  forceNarrow:{type:Boolean, value:!1}, forceLeftDrawerTemporary:{type:Boolean, value:!1, observer:"_forceLeftDrawerTemporaryChanged"}, forceRightDrawerTemporary:{type:Boolean, value:!1, observer:"_forceRightDrawerTemporaryChanged"}, hasTransform:{type:Boolean, value:function() {
    return "transform" in this.style;
  }}, hasWillChange:{type:Boolean, value:function() {
    return "willChange" in this.style;
  }}, narrow:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, leftDrawerTemporary:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, rightDrawerTemporary:{reflectToAttribute:!0, type:Boolean, value:!1, readOnly:!0, notify:!0}, peeking:{type:Boolean, value:!1, readOnly:!0, notify:!0}, responsiveWidth:{type:String, value:"600px"}, responsiveWidthLeft:{type:String, value:null}, responsiveWidthRight:{type:String, value:null}, selected:{reflectToAttribute:!0, 
  notify:!0, type:String, value:null}, leftDrawerToggleAttribute:{type:String, value:"paper-multidrawer-toggle-left"}, rightDrawerToggleAttribute:{type:String, value:"paper-multidrawer-toggle-right"}, _transition:{type:Boolean, value:!1}, _leftDrawer:{type:Boolean, value:!1, readOnly:!0, notify:!0}, _rightDrawer:{type:Boolean, value:!1, readOnly:!0, notify:!0}, _movingDrawer:{type:Object, value:null}, _lastInteractedDrawer:{type:String, value:null, readOnly:!0}}, listeners:{tap:"_onTap", track:"_onTrack", 
  down:"_downHandler", up:"_upHandler"}, observers:["_forceNarrowChanged(forceNarrow, defaultSelected)"], ready:function() {
    this._transition = !0;
    this._set_leftDrawer(!!Polymer.dom(this.$.leftDrawerContent).getDistributedNodes().length);
    this._responsiveChange(this.$.mqResponsiveWidthLeft.queryMatches || this.forceLeftDrawerTemporary, "leftDrawerTemporary");
    this._set_rightDrawer(!!Polymer.dom(this.$.rightDrawerContent).getDistributedNodes().length);
    this._responsiveChange(this.$.mqResponsiveWidthRight.queryMatches || this.forceRightDrawerTemporary, "rightDrawerTemporary");
  }, toggleLeftPanel:function() {
    console.log("toggleLeftPanel:", this.leftDrawerTemporary);
    console.log("toggleLeftPanel.main:", this._isMainSelected());
    (this._isMainSelected() || this._isRightDrawerSelected()) && this.openLeftDrawer();
  }, toggleRightPanel:function() {
    this.rightDrawerTemporary && (this._isMainSelected() || this._isLeftDrawerSelected() ? this.openRightDrawer() : this.closeDrawer());
  }, openLeftDrawer:function() {
    this._leftDrawer && (this._set_lastInteractedDrawer("left"), this.selected = "leftDrawer", this._movingDrawer = this.$.leftDrawer);
  }, openRightDrawer:function() {
    this._rightDrawer && (this._set_lastInteractedDrawer("right"), this.selected = "rightDrawer", this._movingDrawer = this.$.rightDrawer);
  }, closeDrawer:function() {
    this.selected = "main";
    this._movingDrawer = null;
  }, _onMainTransitionEnd:function(a) {
    a.currentTarget !== this.$.main || "left" !== a.propertyName && "right" !== a.propertyName || this.notifyResize();
  }, _computeIronSelectorClass:function(a, c, d, e, f, g, h, l) {
    a = {dragging:f, "narrow-layout":a, "left-drawer":d, "right-drawer":e, transition:c, peeking:g, "left-drawer-temporary":h || a && d, "right-drawer-temporary":l || a && e};
    c = [];
    for (var b in a) {
      a.hasOwnProperty(b) && a[b] && c.push(b);
    }
    return c.join(" ");
  }, _computeDrawerStyle:function(a, c) {
    return "width:" + (c ? c : a) + ";";
  }, _computeMainStyle:function(a, c, d, e, f, g, h, l) {
    var b = "", b = a || e || !c ? b + "left:0;" : b + ("left:0" + (h ? h : g) + ";");
    return a || f || !d ? b + "right:0;" : b + ("right:" + (l ? l : g) + ";");
  }, _computeMediaQuery:function(a, c) {
    return a ? "" : "(max-width: " + c + ")";
  }, _computeSideMediaQuery:function(a, c, d) {
    return a || c ? "" : "(max-width: " + d + ")";
  }, _responsiveChange:function(a, c) {
    switch(c) {
      case "narrow":
        this._setNarrow(a);
        this.narrow && (this.selected = this.defaultSelected);
        this.setScrollDirection(this._swipeAllowed() ? "y" : "all");
        this.fire("paper-responsive-change", {narrow:this.narrow});
        break;
      case "leftDrawerTemporary":
        this._leftDrawer && (this.narrow ? this._setLeftDrawerTemporary(!0) : this._setLeftDrawerTemporary(a), this.selected = this.defaultSelected, this.setScrollDirection(this._swipeAllowed() ? "y" : "all"), this.fire("paper-responsive-change", {leftDrawerTemporary:this.leftDrawerTemporary}));
        break;
      case "rightDrawerTemporary":
        this._rightDrawer && (this.narrow ? this._setRightDrawerTemporary(!0) : this._setRightDrawerTemporary(a), this.selected = this.defaultSelected, this.setScrollDirection(this._swipeAllowed() ? "y" : "all"), this.fire("paper-responsive-change", {rightDrawerTemporary:this.rightDrawerTemporary}));
    }
  }, _onQueryMatchesChanged:function(a) {
    switch((a.target || a.srcElement).id) {
      case "mqResponsiveWidth":
        this._responsiveChange(a.detail.value, "narrow");
        break;
      case "mqResponsiveWidthLeft":
        this._responsiveChange(a.detail.value, "leftDrawerTemporary");
        break;
      case "mqResponsiveWidthRight":
        this._responsiveChange(a.detail.value, "rightDrawerTemporary");
    }
  }, _forceNarrowChanged:function() {
    this._responsiveChange(this.forceNarrow || this.$.mqResponsiveWidth.queryMatches, "narrow");
  }, _forceLeftDrawerTemporaryChanged:function() {
    this._responsiveChange(this.forceLeftDrawerTemporary || this.$.mqResponsiveWidthLeft.queryMatches, "leftDrawerTemporary");
  }, _forceRightDrawerTemporaryChanged:function() {
    this._responsiveChange(this.forceRightDrawerTemporary || this.$.mqResponsiveWidthRight.queryMatches, "rightDrawerTemporary");
  }, _swipeAllowed:function() {
    return (this.narrow || this.leftDrawerTemporary || this.rightDrawerTemporary) && !this.disableSwipe;
  }, _isMainSelected:function() {
    return "main" === this.selected;
  }, _isLeftDrawerSelected:function() {
    return "leftDrawer" === this.selected;
  }, _isRightDrawerSelected:function() {
    return "rightDrawer" === this.selected;
  }, _onTap:function(a) {
    (a = Polymer.dom(a).localTarget) && this.leftDrawerToggleAttribute && a.hasAttribute(this.leftDrawerToggleAttribute) && this.toggleLeftPanel();
    a && this.rightDrawerToggleAttribute && a.hasAttribute(this.rightDrawerToggleAttribute) && this.toggleRightPanel();
  }, _downHandler:function(b) {
    var c = this._isEdgeTouch(b);
    !this.dragging && this._isMainSelected() && c && !a && (this._startEdgePeek(c), b.preventDefault(), a = this);
  }, _upHandler:function() {
    this._stopEdgePeek();
    a = null;
  }, _onTrack:function(b) {
    if (!a || this === a) {
      switch(b.detail.state) {
        case "start":
          this._trackStart(b);
          break;
        case "track":
          this._trackX(b);
          break;
        case "end":
          this._trackEnd(b);
      }
    }
  }, _isEdgeTouch:function(a) {
    a = a.detail.x;
    if (this._swipeAllowed()) {
      if (a <= this.edgeSwipeSensitivity && this.leftDrawerTemporary && !this.disableLeftEdgeSwipe) {
        return this._set_lastInteractedDrawer("left"), "left";
      }
      if (a >= this.offsetWidth - this.edgeSwipeSensitivity && this.rightDrawerTemporary && !this.disableRightEdgeSwipe) {
        return this._set_lastInteractedDrawer("right"), "right";
      }
    }
    return !1;
  }, _startEdgePeek:function(a) {
    switch(a) {
      case "left":
        this._movingDrawer = this.$.leftDrawer;
        a = this.edgeSwipeSensitivity;
        break;
      case "right":
        this._movingDrawer = this.$.rightDrawer;
        a = -this.edgeSwipeSensitivity;
        break;
      default:
        return;
    }
    this.width = this._movingDrawer.offsetWidth;
    this._moveDrawer(this._movingDrawer, this._translateXForDeltaX(a));
    this._setPeeking(!0);
  }, _stopEdgePeek:function() {
    this.peeking && (this._setPeeking(!1), this._moveDrawer(this._movingDrawer, null));
  }, _trackStart:function(b) {
    if (this._swipeAllowed()) {
      a = this;
      this._setDragging(!0);
      if (this._isMainSelected()) {
        var c = this._isEdgeTouch(b);
        this._setDragging(this.peeking || !!c);
      }
      if (this.dragging) {
        if (!this._movingDrawer) {
          switch(c) {
            case "left":
              this._movingDrawer = this.$.leftDrawer;
              break;
            case "right":
              this._movingDrawer = this.$.rightDrawer;
              break;
            default:
              return;
          }
        }
        this.width = this._movingDrawer.offsetWidth;
        this._transition = !1;
      }
    }
  }, _trackEnd:function(b) {
    this.dragging && (b = 0 < b.detail.dx, this._setDragging(!1), this._transition = !0, a = null, this._moveDrawer(this._movingDrawer, null), "rightDrawer" === this._movingDrawer.id ? b ? (this.closeDrawer(), this._movingDrawer = null) : this.openRightDrawer() : b ? this.openLeftDrawer() : (this.closeDrawer(), this._movingDrawer = null));
  }, _trackX:function(a) {
    if (this.dragging) {
      a = a.detail.dx;
      if (this.peeking) {
        if (Math.abs(a) <= this.edgeSwipeSensitivity) {
          return;
        }
        this._setPeeking(!1);
      }
      this._moveDrawer(this._movingDrawer, this._translateXForDeltaX(a));
    }
  }, _translateXForDeltaX:function(a) {
    var b = this._isMainSelected();
    return "rightDrawer" === this._movingDrawer.id ? Math.max(0, b ? this.width + a : a) : Math.min(0, b ? a - this.width : a);
  }, _transformForTranslateX:function(a) {
    return null === a ? "" : this.hasWillChange ? "translateX(" + a + "px)" : "translate3d(" + a + "px, 0, 0)";
  }, _moveDrawer:function(a, c) {
    this.transform(this._transformForTranslateX(c), a);
  }});
})();
DialogBehavior = {closeDialog:function(a) {
  $(a).fadeOut({duration:400, complete:function() {
    $(a).dialog("close");
  }});
}, destroyDialog:function(a) {
  $(a).fadeOut({duration:400, complete:function() {
    $(a).dialog("destroy");
  }});
}, openDialog:function(a, b, c, d) {
  b = b || "80%";
  window.matchMedia("(max-width: 480px)").matches && (b = "95%");
  c = $(a).dialog({open:function(b, c) {
    $(a).hide();
    $(a).fadeIn(1000);
  }, resizable:!0, draggable:!0, closeText:"", close:function() {
    console.log("close");
    this.destroyDialog(a);
  }.bind(this), title:d || "", height:"auto", maxHeight:c, width:b, modal:!0});
  c.parent().css("z-index", "555111");
  return c;
}};
RegistryBehavior = {onRegistrySave:function() {
  this.debounce("onRegistrySave", function() {
    this._onRegistrySave();
  }, 250);
}, _onRegistrySave:function() {
  this._doSave(this._currentRegistryName);
}, onRegistrySaveUnder:function() {
  this.getState();
  var a = Lobibox.prompt("text", {height:200, title:tr(this._registryTitleSave ? this._registryTitleSave : "te.enter_name"), attrs:{pattern:"[A-Za-z0-9]{3,}", value:this._currentRegistryName}, callback:function(b, c, d) {
    "cancel" == c || _.isEmpty(a.getValue()) || this._doSave(a.getValue());
  }.bind(this)});
}, _doSave:function(a, b) {
  var c = this.getState();
  this._currentRegistryName = a;
  var d = this._registryAttributes;
  null == d && (d = {subject:this._registrySubject});
  a = {service:"registry", method:"set", parameter:{key:this._registryKey + "/" + a, attributes:d, value:JSON.stringify(c)}, async:!0, context:this, failed:function(a) {
    console.error("_doSave:", a);
    null != a && !0 !== b && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    !0 !== b && this.notify(tr("registry.saved"), "success", 8000);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, selectFromList:function(a, b, c) {
  var d = Lobibox.window({title:tr("registry.select"), width:300, height:400, modal:!0, content:function() {
    return $(a);
  }, buttons:{select:{text:tr("button.select")}, close:{text:tr("button.cancel"), closeOnClick:!0}}, callback:function(a, f, g) {
    "select" === f && (a = a.$el[0].querySelector("#registryMenuId").selected, null != a && (this._currentRegistryName = c[a], a = JSON.parse(b[a]), this.setState(a), d.destroy()));
  }.bind(this)});
}, onRegistryLoad:function() {
  this.debounce("onRegistryLoad", function() {
    this._onRegistryLoad();
  }, 250);
}, _onRegistryLoad:function() {
  var a = this._registryAttributes;
  null == a && (a = {subject:this._registrySubject});
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"getAll", parameter:{attributes:a}, async:!0, context:this, failed:function(a) {
    console.error("getRegistry:", a);
    this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("getRegistry.ret:", a);
    for (var b = '<paper-menu id="registryMenuId">', d = [], e = [], f = 0; f < a.length; f++) {
      var g = a[f].key, g = g.substring(g.lastIndexOf("/") + 1), b = b + ('<paper-item style="min-height:24px; font-size:14px;">' + g + "</paper-item>");
      d.push(a[f].value);
      e.push(g);
    }
    this.selectFromList(b + "</paper-menu>", d, e);
  }});
}, _doDelete:function(a, b) {
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"delete", parameter:{key:this._registryKey + "/" + a, silent:b}, async:!0, context:this, failed:function(a) {
    console.error("deleteRegistry:", a);
    1 != b && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("deleteRegistry.ok");
  }});
}, _doLoad:function(a, b, c) {
  var d = this._registryAttributes;
  null == d && (d = {subject:this._registrySubject});
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"get", parameter:{key:this._registryKey + "/" + a, attributes:d, silent:c}, async:!0, context:this, failed:function(a) {
    console.error("getRegistry:", a);
    1 != c && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    console.log("getRegistry.ret:", a);
    b(a);
  }});
}};
"use strict";
String.format || (String.format = function(a) {
  var b = Array.prototype.slice.call(arguments, 1);
  return a.replace(/{(\d+)}/g, function(a, d) {
    return "undefined" !== typeof b[d] ? b[d] : a;
  });
});
String.slugify || (String.slugify = function(a) {
  return a.replace(/^\s\s*/, "").replace(/\s\s*$/, "").toLowerCase().replace(/[^a-z0-9_\-~!\+\s]+/g, "").replace(/[\s]+/g, "-");
});
var Simpl4 = Simpl4 || {};
Simpl4.Utils = function() {
  return {isArrayMatch:function(a, b) {
    var c;
    var d = !1;
    var e = {};
    if (!a || !b) {
      return !1;
    }
    var f = 0;
    for (c = a.length; f < c; f++) {
      var g = a[f];
      e[g] = !0;
    }
    f = 0;
    for (c = b.length; !d && f < c; f++) {
      g = b[f], d = !!e[g];
    }
    return d;
  }};
}();
Simpl4.Cache = function() {
  var a = new Cache(-1, !1, new Cache.LocalStorageCacheStorage);
  return {setItem:function(b, c, d) {
    return a.setItem(b, c, d);
  }, getItem:function(b) {
    return a.getItem(b);
  }, removeItem:function(b) {
    return a.removeItem(b);
  }, removeWhere:function(b) {
    return a.removeWhere(b);
  }};
}();
CSSImportBehavior = {convertSheetsToStyles:function(a) {
  a = a.querySelectorAll("link[rel=stylesheet]");
  for (var b = 0, c = a.length, d; b < c && (d = a[b]); b++) {
    var e = this.hrefForSheet(d, this.ownerDocument.baseURI);
    this.createStyleElement(this.importRuleForSheet(d, this.ownerDocument.baseURI), this.ownerDocument);
    this.importHref(e, this._onCssResponse.bind(this));
    d.parentNode.removeChild(d);
  }
}, importSheet:function(a) {
  this.importHref(a, this._onCssResponse.bind(this));
}, _onCssResponse:function(a) {
  var b = a.target.import.body.textContent;
  if (a = this.selectedPage.scope) {
    b = mensch.parse(b), this._visitCssRules(b.stylesheet.rules, this._visitCssNode.bind(this), a), b = mensch.stringify(b);
  }
  a = this.createStyleElement(b, this.ownerDocument);
  document.head.appendChild(a);
}, _visitCssNode:function(a, b) {
  "rule" == a.type ? this._visitCssRule(a, b) : "media" == a.type && a.rules && this._visitCssRules(a.rules, this._visitCssRule.bind(this), b);
}, _visitCssRules:function(a, b, c) {
  return a.reduce(function(a, e) {
    "comment" !== e.type && b(e, c);
  }, []);
}, _visitCssRule:function(a, b) {
  if (a.selectors) {
    for (var c = 0; c < a.selectors.length; c++) {
      var d = a.selectors[c], e = d.indexOf(":");
      a.selectors[c] = 0 <= e ? this._insert(d, e, "." + b) : d + "." + b;
    }
  }
  a.rules && this._visitCssRules(a.rules, this._visitCssRule.bind(this), b);
}, importRuleForSheet:function(a, b) {
  return "@import '" + (new URL(a.getAttribute("href"), b)).href + "';";
}, hrefForSheet:function(a, b) {
  return (new URL(a.getAttribute("href"), b)).href;
}, createStyleElement:function(a, b) {
  b = b || document;
  b = b.createElement ? b : b.ownerDocument;
  b = b.createElement("style");
  b.textContent = a;
  return b;
}, _insert:function(a, b, c) {
  return 0 < b ? a.substring(0, b) + c + a.substring(b, a.length) : c + a;
}};
(function() {
  function a(a) {
    return (a = RegExp("[?&]" + a + "=([^&]*)").exec(window.location.search)) && decodeURIComponent(a[1].replace(/\+/g, " "));
  }
  null == window.console.debug && (window.console.debug = window.console.log);
  window.queryParams = function(a) {
    if ("" == a) {
      return {};
    }
    for (var b = {}, c = 0; c < a.length; ++c) {
      var d = a[c].split("=", 2);
      b[d[0]] = 1 == d.length ? "" : decodeURIComponent(d[1].replace(/\+/g, " "));
    }
    return b;
  }(window.location.search.substr(1).split("&"));
  var b = document.querySelectorAll("head > script");
  for (var c = 0; c < b.length; c++) {
    var d = b[c].src;
    if (d.match(/sw\/surface/)) {
      b = d.split("/sw");
      b = b[0];
      simpl4.util.BaseManager.setBaseUrl(b);
      break;
    }
  }
  if (null == simpl4.util.BaseManager.getBaseUrl()) {
    for (b = document.querySelectorAll("head > link"), c = 0; c < b.length; c++) {
      if (d = b[c].href, d.match(/sw\/surface/)) {
        b = d.split("/sw");
        b = b[0];
        simpl4.util.BaseManager.setBaseUrl(b);
        break;
      }
    }
  }
  d = window.location.pathname.split("/");
  b = d.indexOf("repo");
  b = d[b + 1];
  if (4 < d.length) {
    d = document.getElementsByTagName("head")[0];
    d.querySelector("base") && d.removeChild(d.querySelector("base"));
    var e = document.createElement("base");
    e.href = simpl4.util.BaseManager.getBaseUrl() + "/repo/" + b + "/";
    d.appendChild(e);
  }
  window.is_chromium = -1 < navigator.userAgent.toLowerCase().indexOf("chrome");
  simpl4.util.BaseManager.setNamespace(b);
  window.startPage = a("page");
  b = a("theme");
  e = a("lang");
  d = Simpl4.Cache.getItem("lang");
  e ? (simpl4.util.BaseManager.setLanguage(e), simpl4.util.Globals.set("lang", e)) : (e = window.defaultLang || "en", simpl4.util.BaseManager.setLanguage(d ? d : e), simpl4.util.Globals.set("lang", d ? d : e));
  Simpl4.Cache.setItem("lang", simpl4.util.BaseManager.getLanguage());
  b && Simpl4.Cache.setItem("theme", b);
  0 == document.querySelectorAll('head > [href*="theme.html"]').length && (b = b || Simpl4.Cache.getItem("theme"), null == b && (b = "indigo-red"), d = document.createElement("link"), d.rel = "import", d.href = "theme-" + b + ".html", document.getElementsByTagName("head")[0].appendChild(d));
  b = a("passwd");
  (d = a("user")) && b ? (simpl4.util.BaseManager.setUser(d), simpl4.util.BaseManager.setPassword(b), console.log("setting(" + d + "," + b + ")")) : (simpl4.util.BaseManager.setUser("guest"), simpl4.util.BaseManager.setPassword("guest"));
  moment.locale(simpl4.util.BaseManager.getLanguage());
  window.simpl4FormManager = simpl4.util.FormManager;
  window.simpl4MessageManager = simpl4.util.MessageManager;
  window.simpl4EntityManager = simpl4.util.EntityManager;
  window.simpl4Globals = simpl4.util.Globals;
  window.clone = simpl4.util.Merge.clone;
  simpl4MessageManager.installBaseMessages();
  window.tr = simpl4MessageManager.tr;
  window.S4Map = simpl4.util.Map;
  window.S4MultiMap = simpl4.util.MultiMap;
  TrBehavior = {tr:function() {
    return simpl4MessageManager.tr(input);
  }};
  null == window.channel && (window.channel = postal.channel());
  b = new Font;
  b.src = simpl4.util.BaseManager.getBaseUrl() + "/sw/surface/fontawesome-webfont.woff?v=4.3.0";
  b.fontFamily = "FontAwesome";
  b.fontWeight = "normal";
  b.fontStyle = "normal";
  b.onload = function() {
  };
  Lobibox.base.OPTIONS.buttons.yes.text = tr("yes");
  Lobibox.base.OPTIONS.buttons.no.text = tr("no");
  Lobibox.notify.OPTIONS.error.title = tr("error");
  Lobibox.notify.OPTIONS.warning.title = tr("warning");
  Lobibox.notify.OPTIONS.success.title = tr("success");
  Lobibox.notify.OPTIONS.info.title = tr("info");
  Polymer({is:"simpl-globals", properties:{namespace:{type:String, value:"xxx"}}, behaviors:[CSSImportBehavior], ready:function() {
    this.selectedPage = {scope:"asciidoctor-default"};
    this.importSheet("asciidoc.css");
  }, namespaceChanged:function() {
    simpl4MessageManager.installMessages(this.namespace);
  }, getProperties:function() {
    var a = null;
    jQuery.ajax({url:"properties.yaml", async:!1, dataType:"json"}).done(function(b) {
      b.lang = simpl4MessageManager.getLanguage();
      window.globals = b;
      b.mainNamespace && simpl4.util.BaseManager.setNamespace(b.mainNamespace);
      a = b;
    }.bind(this));
    return a;
  }});
  ToolbarButtonBehavior = {_toolbarButtonPressed:function(a) {
    this[(a.target || a.srcElement).getAttribute("on-tap")]();
  }, created:function() {
    document.addEventListener("toolbar-button-pressed", this._toolbarButtonPressed.bind(this));
  }};
  TranslationsBehavior = {properties:{}, created:function() {
  }, tr:function(a) {
    return window.tr(a);
  }};
  WhitespaceBehavior = {attached:function() {
    $(".grid").contents().filter(function() {
      return 3 === this.nodeType;
    }).remove();
  }};
  ModernizrBehavior = {attached:function() {
    for (var a = document.documentElement, a = a.className.length ? a.className.split(/\s/) : [], b = 0; b < a.length; b++) {
      var c = a[b];
      $(this).hasClass(c) || this.classList.add(c);
    }
  }};
  StyleScopeBehavior = {setStyleScope:function(a) {
    var b = [];
    for (c = 1; c < arguments.length; c++) {
      null != arguments[c] && b.push(arguments[c]);
    }
    0 != b.length && this._domVisitor(a, function(a) {
      for (c = 0; c < b.length; c++) {
        if (!$(a).hasClass(b[c]) && 1 == a.nodeType && null != a.classList) {
          try {
            a.classList.add(b[c]);
          } catch (l) {
            console.log("classList:", l);
          }
        }
      }
    });
  }, _domVisitor:function(a, b) {
    if (a) {
      b(a);
      for (var c = 0; c < a.childNodes.length; c++) {
        this._domVisitor(a.childNodes[c], b);
      }
    }
  }};
})();
Polymer({is:"simpl-login", ready:function() {
  this.submit = this.heading = "Login";
  this.identification = "Username";
  this.password = this.identifier = "";
}, validate:function() {
  this.$.identifierInput.invalid = !this.identifier;
  this.$.passwordInput.invalid = !this.password;
  if (!this.password || !this.password) {
    return this.shake();
  }
  var a = this.namespace || simpl4.util.BaseManager.getNamespace();
  200 == jQuery.ajax({url:"/sw/" + a + "/checkcredentials/", async:!1, data:"credentials=" + this.identifier + ":" + this.password, method:"POST"}).status ? (simpl4.util.BaseManager.setUser(this.identifier), simpl4.util.BaseManager.setPassword(this.password), this.showOk(tr("login.ok")), this.shakeOk(), this.async(function() {
    this.fireLoginOk();
    this.$.passwordInput.value = "";
  }, 2500)) : (this.showError(tr("login.error")), this.shake());
}, showError:function(a) {
  this.$.toastId.show(a, "error", "10000");
}, showOk:function(a) {
  this.$.toastId.show(a, "success", "10000");
}, shakeOk:function() {
  this.animate([{transform:"translateY(-1px)"}, {transform:"translateY(1px)"}], {direction:"alternate", duration:3600, iterations:1}).play();
}, shake:function() {
  this.animate([{transform:"translateX(-10px)"}, {transform:"translateX(10px)"}], {direction:"alternate", duration:250, iterations:10}).play();
}, fireLoginOk:function() {
  this.fire("login-ok", {identifier:this.identifier, password:this.password});
}});
MainBehavior = {properties:{logoLinkLang:{computed:"substituteLang(logoLink)"}, logoLink:{type:String}, logo:{value:"logo212121.svg", type:String}, logoUrl:{computed:"getLogoUrl(logo)"}, logoData:{computed:"getLogoData(logo)"}, loginMessage:{value:"Login", type:String}, selectedPage:{notify:!0, type:Object}, mmenuBackground:{value:null, type:String}, mmenuClasses:{value:null, type:String}, mmenuName:{value:"menu", type:String}, responsiveWidth:{value:"700px", type:String}, signInOutIcon:{value:"", 
type:String}, useKeyboard:{value:!1, type:Boolean}, waitOnPages:{value:2}, target:{type:Object, value:function() {
  return document.body;
}}}, observers:["routeChanged(route)"], pageCache:function() {
  return {};
}, onToolbarReady:function() {
  this.pagesReady();
}, onMenuReady:function() {
  this.pagesReady();
}, onMenuUpdate:function() {
  this.allPages = this._getPages();
}, pagesReady:function() {
  this.waitOnPages--;
  0 === this.waitOnPages && (this.allPages = this._getPages(), channel.publish("main.pagesReady", {}));
}, _getPages:function() {
  for (var a = document.querySelectorAll("a.menuentry"), b = [], c = 0; c < a.length; c++) {
    b.push(a[c].page);
  }
  return b;
}, buildToolbar:function() {
  var a = document.querySelector("#dispatcherId").getNodes(), b = this.querySelector("#toolbarIconsId");
  null == a && (a = []);
  for (var c = 0; c < a.length; c++) {
    var d = a[c];
    if (d.uri && d.uri.startsWith("mainToolbar:")) {
      for (var e = 0; e < d.children.length; e++) {
        var f = d.children[e];
        this._isNodeDisabled(f) || this._createToolbarEntry(b, f);
      }
    }
  }
  this.onToolbarReady();
}, attached:function() {
  this.buildToolbar();
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  "android" == Detectizr.device.model ? (this.entryAnimation = "fade-in-animation", this.exitAnimation = "fade-out-animation") : (this.entryAnimation = "scale-up-animation", this.exitAnimation = "scale-down-animation");
  this.helpMessage = tr("button.help");
  this.drawerPanel = this.$.drawerPanel;
  this.neonPages = this.$.pages;
  console.log("Detectizr:" + JSON.stringify(Detectizr, null, 2));
  var a = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  console.log("isTouch:" + a);
  console.log("isSafari:" + ("safari" == Detectizr.browser.name));
  var b = this.querySelector("#mainContainer");
  Polymer.dom(b).setAttribute("scrollbar", "");
  this.querySelector("#headerContainer").style.zIndex = 1;
  this._scrollbar = window.Scrollbar.init(b, {speed:a ? 1 : 4, damping:a ? 0.1 : 0.05, paddingTop:64, renderByPixels:!0, alwaysShowTracks:!0, overscrollEffect:"bounce", overscrollDamping:0.1, shouldHandleEvent:function(a) {
    for (a = a.target; a != document.body;) {
      if (a.id && 0 <= a.id.toLowerCase().indexOf("datatables") || null != a.getAttribute("no-smooth-scroll")) {
        return !1;
      }
      a = a.parentNode;
    }
    return !0;
  }, thumbMinSize:10});
  var c = this.$.scrollHeaderPanelId;
  this._scrollbar.addListener(function(a) {
    c._updateScrollState(a.offset.y);
  });
  this.async(function() {
    this._scrollbar.update();
  }, 1000);
  this.observeOverlayBackdrop();
}, scrollbarUpdate:function() {
  this._scrollbar.update();
}, getScrollbarOffset:function() {
  return this._scrollbar.offset;
}, observeOverlayBackdrop:function() {
  (new (window.MutationObserver || window.WebKitMutationObserver)(function(a, b) {
    a = document.querySelectorAll("iron-overlay-backdrop");
    document.querySelector("#mainContainer article.scroll-content").style.display = 0 < a.length ? "initial" : "block";
  })).observe($("body").get(0), {childList:!0});
}, getGlobals:function() {
  null == this.globals && (this.globals = simpl4Globals.getAll());
  return this.globals;
}, routeChanged:function() {
  this._scrollbar ? (this._scrollbar.scrollTo(0, 0), this.async(function() {
    this._scrollbar.update();
  }, 1000)) : $("#mainContainer").scrollTop(0);
  var a = this.route = this.route.toString();
  a.match(/^!/) && (a = a.substring(1));
  this.route != a && (this.route = a);
  channel.publish("route.changed", {route:this.route});
  try {
    if (window._paq) {
      var b = "0" == this.route ? "main" : this.route;
      this.lastAction != b && _paq.push(["trackEvent", "webdemo", b + "/" + Simpl4.Cache.getItem("lang")]);
      this.lastAction = b;
    }
  } catch (c) {
    console.error("trackEvent:", c.stack);
  }
}, togglePanel:function() {
}, keyHandler:function(a, b, c) {
  a = parseInt(b.key);
  if (!isNaN(a) && a <= simpl4PageRegistry.getPages().length) {
    this.neonPages.selectIndex(a - 1);
  } else {
    switch(b.key) {
      case "left":
      case "up":
        this.neonPages.selectPrevious();
        break;
      case "right":
      case "down":
        this.neonPages.selectNext();
        break;
      case "space":
        b.shift ? this.neonPages.selectPrevious() : this.neonPages.selectNext();
    }
  }
}, menuItemSelected:function(a) {
  var b = a.detail.page;
  a.detail.isSelected && b.url && (channel.publish("menuItem.selected", a.detail), document.title = "simpl4-" + b.name, this.selectedPage = b, this.route = b.hash, !0 !== this.pageCache[b.url] && this.importHref(this._buildUrl(b), this.onResponse.bind(this)));
  this.$.drawerPanel.closeDrawer();
}, onResponse:function(a) {
  var b = a.target.import;
  a = b.body;
  b = b.head;
  this.pageCache[this.selectedPage.url] = !0;
  for (var c = this.neonPages.selectedItem.firstElementChild; c.firstChild;) {
    Polymer.dom(c).removeChild(c.firstChild);
  }
  $(c).hide();
  b.firstElementChild && (b.firstElementChild.set && (b.firstElementChild.set("globals", this.getGlobals()), b.firstElementChild.set("tr", function(a) {
    return tr(a);
  })), console.log("HEAD;", b.firstElementChild), Polymer.dom(c).appendChild(b.firstElementChild));
  if (a.firstElementChild && 0 < a.childNodes.length) {
    for (b = 0; b < a.childNodes.length; b++) {
      var d = a.childNodes[b];
      1 == d.nodeType && (Polymer.dom(c).appendChild(d), this.$.dispatcherId.filterLocalLinks(d));
    }
  }
  this.async(function() {
    this.convertSheetsToStyles(c);
    var a = this.selectedPage.scope;
    this.isAsciidoc(this.selectedPage.url) && null == a && (a = "asciidoctor-default");
    this.setStyleScope(c, a);
    this.async(function() {
      $(c).fadeIn(700);
    }, 0);
  }, 2);
}, getLogoLink:function() {
  return this.substituteLang(this.logoLink);
}, substituteLang:function(a, b) {
  if (null != a && "" != a) {
    return -1 != a.indexOf("%l") && (a = a.replace("%l", this.getGlobals().lang)), a.match(/^http/) || (a.match(/^[a-zA-Z].*/) && (a = "./" + a), null == b && (a += "?t=1")), a;
  }
}, _buildUrl:function(a) {
  var b = a.url;
  if (0 < b.indexOf("?rpc=") || 0 < b.indexOf("&rpc=") || a.roles && 0 < a.roles.length) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), c = simpl4.util.Base64.encode(d + ":" + c), b = 0 < b.indexOf("?") ? b + ("&credentials=" + c) : b + ("?credentials=" + c);
  }
  if (_.isEmpty(a.appendix)) {
    return b;
  }
  d = 0 <= b.indexOf("?");
  c = 0 <= b.indexOf("#");
  a = (d ? "&" : "?") + this._maskedEval(a.appendix, a, "paramError=1");
  return c ? b.replace("#", a + "#") : b + a;
}, _maskedEval:function(a, b, c) {
  try {
    return b._ = _, b.tr = tr, b.moment = moment, metaes.evaluate(a.toString(), b);
  } catch (d) {
    console.error("\t" + d), console.debug("Main._maskedEval.script:" + a), console.debug("Main._maskedEval.env:" + JSON.stringify(b, null, 2));
  }
  return c;
}, getHelpDialogStyle:function() {
  return "height:" + 0.9 * $(window).height() + "px;";
}, showHelp:function(a) {
  window._paq && !this.$.helpDialog.opened && _paq.push(["trackEvent", "webclient", ("0" == this.route ? "main" : this.route) + "_help"]);
  this.$.helpDialog.toggle();
}, externalButtonEventHandler:function(a) {
  this.fire("toolbar-button-pressed", a.target || a.srcElement, {key1:"value1"});
}, isAsciidoc:function(a) {
  return 0 < a.indexOf(".adoc");
}, getLogoUrl:function() {
  return this.logo.endsWith(".svg") ? null : this.logo;
}, getLogoData:function() {
  return this.logo.endsWith(".svg") ? {path:this.logo, repo:simpl4.util.BaseManager.getNamespace()} : null;
}, loginOk:function(a) {
  this.loginMessage = "User:" + a.detail.identifier;
  this.$.loginDialog.toggle();
}, login:function(a) {
  this.$.loginDialog.toggle();
}, getLangIcon:function() {
  var a = Simpl4.Cache.getItem("lang");
  return "de" == a || null == a ? "en.svg" : "de.svg";
}, changeTheme:function(a) {
  Simpl4.Cache.setItem("theme", a);
  location.search = "";
  history.go(0);
}, reload:function(a) {
  a = Simpl4.Cache.getItem("lang");
  Simpl4.Cache.setItem("lang", "de" == a || null == a ? "en" : "de");
  location.search = "";
  window.location.reload();
}, setSelected:function(a) {
}, _createToolbarEntry:function(a, b) {
  var c = this._createIcon(b), d = document.createElement("li"), e = document.createElement("a"), f = document.createElement("paper-ripple"), g = document.createTextNode(b.name ? b.name : "");
  Polymer.dom(a).appendChild(d);
  Polymer.dom(d).appendChild(e);
  ("ie" != browser.name || "9" != browser.major && "10" != browser.major) && Polymer.dom(a).appendChild(f);
  Polymer.dom(e).appendChild(c);
  Polymer.dom(e).setAttribute("style", "cursor:pointer");
  Polymer.dom(e).setAttribute("id", "hash_" + b.hash);
  Polymer.dom(e).classList.add("menuentry");
  Polymer.dom(e).appendChild(g);
  Polymer.dom(d).setAttribute("style", "list-style:none");
  Polymer.dom(d).setAttribute("id", "x" + b.hash);
  e.page = b;
  b.provider = this;
}, _addNodeClasses:function(a, b) {
  if (null != b) {
    b = b.split(",");
    for (var c = 0; c < b.length; c++) {
      a.classList.add(b[c]);
    }
  }
}, _isNodeDisabled:function(a) {
  return !0 === a.disabled;
}, _createIcon:function(a) {
  var b = null;
  a.aweicon ? (b = document.createElement("font-awesome"), Polymer.dom(b).setAttribute("icon", a.aweicon)) : a.icon && (b = document.createElement("iron-icon"), this._addNodeClasses(b, "small"), Polymer.dom(b).setAttribute("icon", a.icon));
  return b;
}};
Polymer({is:"simpl-main", behaviors:[MainBehavior, CSSImportBehavior, ModernizrBehavior, StyleScopeBehavior]});
(function(a) {
  function b(b) {
    f = {$wndw:a(window), $html:b, $body:b};
    c = {};
    d = {};
    e = {};
    a.each([c, d, e], function(a, b) {
      b.add = function(a) {
        a = a.split(" ");
        for (var c = 0, d = a.length; c < d; c++) {
          b[a[c]] = b.mm(a[c]);
        }
      };
    });
    c.mm = function(a) {
      return "mm-" + a;
    };
    c.add("wrapper menu panel nopanel current highest opened subopened navbar hasnavbar title btn prev next listview nolistview inset vertical selected divider spacer hidden fullsubopen");
    c.umm = function(a) {
      "mm-" == a.slice(0, 3) && (a = a.slice(3));
      return a;
    };
    d.mm = function(a) {
      return "mm-" + a;
    };
    d.add("parent sub");
    e.mm = function(a) {
      return a + ".mm";
    };
    e.add("transitionend webkitTransitionEnd mousedown mouseup touchstart touchmove touchend click keydown");
    a.mmenu._c = c;
    a.mmenu._d = d;
    a.mmenu._e = e;
    a.mmenu.glbl = f;
  }
  if (!a.mmenu) {
    a.mmenu = function(a, b, c) {
      this.$menu = a;
      this._api = "bind init update setSelected getInstance openPanel closePanel closeAllPanels".split(" ");
      this.opts = b;
      this.conf = c;
      this.vars = {};
      this.cbck = {};
      "function" == typeof this.___deprecated && this.___deprecated();
      this._initMenu();
      this._initAnchors();
      a = this.$menu.children(this.conf.panelNodetype);
      this._initAddons();
      this.init(a);
      "function" == typeof this.___debug && this.___debug();
      return this;
    };
    a.mmenu.version = "5.3.4";
    a.mmenu.addons = {};
    a.mmenu.uniqueId = 0;
    a.mmenu.defaults = {extensions:[], navbar:{add:!0, title:"Menu", titleLink:"panel"}, onClick:{setSelected:!0}, slidingSubmenus:!0};
    a.mmenu.configuration = {classNames:{divider:"Divider", inset:"Inset", panel:"Panel", selected:"Selected", spacer:"Spacer", vertical:"Vertical"}, clone:!1, openingInterval:25, panelNodetype:"ul, ol, div", transitionDuration:400};
    a.mmenu.prototype = {init:function(a) {
      a = a.not("." + c.nopanel);
      a = this._initPanels(a);
      this.trigger("init", a);
      this.trigger("update");
    }, update:function() {
      this.trigger("update");
    }, setSelected:function(a) {
      this.$menu.find("." + c.listview).children().removeClass(c.selected);
      a.addClass(c.selected);
      this.trigger("setSelected", a);
    }, openPanel:function(b) {
      var d = b.parent();
      if (d.hasClass(c.vertical)) {
        var e = d.parents("." + c.subopened);
        if (e.length) {
          return this.openPanel(e.first());
        }
        d.addClass(c.opened);
      } else {
        if (b.hasClass(c.current)) {
          return;
        }
        d = this.$menu.children("." + c.panel);
        e = d.filter("." + c.current);
        d.removeClass(c.highest).removeClass(c.current).not(b).not(e).not("." + c.vertical).addClass(c.hidden);
        a.mmenu.support.csstransitions || e.addClass(c.hidden);
        b.hasClass(c.opened) ? b.nextAll("." + c.opened).addClass(c.highest).removeClass(c.opened).removeClass(c.subopened) : (b.addClass(c.highest), e.addClass(c.subopened));
        b.removeClass(c.hidden).addClass(c.current);
        setTimeout(function() {
          b.removeClass(c.subopened).addClass(c.opened);
        }, this.conf.openingInterval);
      }
      this.trigger("openPanel", b);
    }, closePanel:function(a) {
      var b = a.parent();
      b.hasClass(c.vertical) && (b.removeClass(c.opened), this.trigger("closePanel", a));
    }, closeAllPanels:function() {
      this.$menu.find("." + c.listview).children().removeClass(c.selected).filter("." + c.vertical).removeClass(c.opened);
      var a = this.$menu.children("." + c.panel).first();
      this.$menu.children("." + c.panel).not(a).removeClass(c.subopened).removeClass(c.opened).removeClass(c.current).removeClass(c.highest).addClass(c.hidden);
      this.openPanel(a);
    }, togglePanel:function(a) {
      var b = a.parent();
      if (b.hasClass(c.vertical)) {
        this[b.hasClass(c.opened) ? "closePanel" : "openPanel"](a);
      }
    }, getInstance:function() {
      return this;
    }, bind:function(a, b) {
      this.cbck[a] = this.cbck[a] || [];
      this.cbck[a].push(b);
    }, trigger:function() {
      var a = Array.prototype.slice.call(arguments), b = a.shift();
      if (this.cbck[b]) {
        for (var c = 0, d = this.cbck[b].length; c < d; c++) {
          this.cbck[b][c].apply(this, a);
        }
      }
    }, _initMenu:function() {
      this.opts.offCanvas && this.conf.clone && (this.$menu = this.$menu.clone(!0), this.$menu.add(this.$menu.find("[id]")).filter("[id]").each(function() {
        a(this).attr("id", c.mm(a(this).attr("id")));
      }));
      this.$menu.contents().each(function() {
        3 == a(this)[0].nodeType && a(this).remove();
      });
      this.$menu.parent().addClass(c.wrapper);
      var b = [c.menu];
      this.opts.slidingSubmenus || b.push(c.vertical);
      this.opts.extensions = this.opts.extensions.length ? "mm-" + this.opts.extensions.join(" mm-") : "";
      this.opts.extensions && b.push(this.opts.extensions);
      this.$menu.addClass(b.join(" "));
    }, _initPanels:function(b) {
      var e = this, f = this.__findAddBack(b, "ul, ol");
      this.__refactorClass(f, this.conf.classNames.inset, "inset").addClass(c.nolistview + " " + c.nopanel);
      f.not("." + c.nolistview).addClass(c.listview);
      f = this.__findAddBack(b, "." + c.listview).children();
      this.__refactorClass(f, this.conf.classNames.selected, "selected");
      this.__refactorClass(f, this.conf.classNames.divider, "divider");
      this.__refactorClass(f, this.conf.classNames.spacer, "spacer");
      this.__refactorClass(this.__findAddBack(b, "." + this.conf.classNames.panel), this.conf.classNames.panel, "panel");
      var g = a(), f = b.add(b.find("." + c.panel)).add(this.__findAddBack(b, "." + c.listview).children().children(this.conf.panelNodetype)).not("." + c.nopanel);
      this.__refactorClass(f, this.conf.classNames.vertical, "vertical");
      this.opts.slidingSubmenus || f.addClass(c.vertical);
      f.each(function() {
        var b = a(this), d = b;
        b.is("ul, ol") ? (b.wrap('<div class="' + c.panel + '" />'), d = b.parent()) : d.addClass(c.panel);
        var f = b.attr("id");
        b.removeAttr("id");
        d.attr("id", f || e.__getUniqueId());
        b.hasClass(c.vertical) && (b.removeClass(e.conf.classNames.vertical), d.add(d.parent()).addClass(c.vertical));
        g = g.add(d);
      });
      f = a("." + c.panel, this.$menu);
      g.each(function(b) {
        var f = a(this);
        b = f.parent();
        var g = b.children("a, span").first();
        b.is("." + c.menu) || (b.data(d.sub, f), f.data(d.parent, b));
        if (!b.children("." + c.next).length && b.parent().is("." + c.listview)) {
          var h = f.attr("id");
          h = a('<a class="' + c.next + '" href="#' + h + '" data-target="#' + h + '" />').insertBefore(g);
          g.is("span") && h.addClass(c.fullsubopen);
        }
        if (!f.children("." + c.navbar).length && !b.hasClass(c.vertical)) {
          b.parent().is("." + c.listview) ? b = b.closest("." + c.panel) : (g = b.closest("." + c.panel).find('a[href="#' + f.attr("id") + '"]').first(), b = g.closest("." + c.panel));
          var l = a('<div class="' + c.navbar + '" />');
          if (b.length) {
            h = b.attr("id");
            switch(e.opts.navbar.titleLink) {
              case "anchor":
                _url = g.attr("href");
                break;
              case "panel":
              case "parent":
                _url = "#" + h;
                break;
              default:
                _url = !1;
            }
            l.append('<a class="' + c.btn + " " + c.prev + '" href="#' + h + '" data-target="#' + h + '"></a>').append('<a class="' + c.title + '"' + (_url ? ' href="' + _url + '"' : "") + ">" + g.text() + "</a>").prependTo(f);
            e.opts.navbar.add && f.addClass(c.hasnavbar);
          } else {
            e.opts.navbar.title && (l.append('<a class="' + c.title + '">' + e.opts.navbar.title + "</a>").prependTo(f), e.opts.navbar.add && f.addClass(c.hasnavbar));
          }
        }
      });
      b = this.__findAddBack(b, "." + c.listview).children("." + c.selected).removeClass(c.selected).last().addClass(c.selected);
      b.add(b.parentsUntil("." + c.menu, "li")).filter("." + c.vertical).addClass(c.opened).end().not("." + c.vertical).each(function() {
        a(this).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).addClass(c.subopened);
      });
      b.children("." + c.panel).not("." + c.vertical).addClass(c.opened).parentsUntil("." + c.menu, "." + c.panel).not("." + c.vertical).first().addClass(c.opened).addClass(c.subopened);
      b = f.filter("." + c.opened);
      b.length || (b = g.first());
      b.addClass(c.opened).last().addClass(c.current);
      g.not("." + c.vertical).not(b.last()).addClass(c.hidden).end().appendTo(this.$menu);
      return g;
    }, _initAnchors:function() {
      var b = this;
      f.$body.on(e.click + "-oncanvas", "a[href]", function(d) {
        var e = a(this), g = !1, h = b.$menu.find(e).length, q;
        for (q in a.mmenu.addons) {
          if (g = a.mmenu.addons[q].clickAnchor.call(b, e, h)) {
            break;
          }
        }
        if (!g && h) {
          var m = e.attr("href");
          if (1 < m.length && "#" == m.slice(0, 1)) {
            try {
              var r = a(m, b.$menu);
              r.is("." + c.panel) && (g = !0, b[e.parent().hasClass(c.vertical) ? "togglePanel" : "openPanel"](r));
            } catch (u) {
            }
          }
        }
        g && d.preventDefault();
        g || !h || !e.is("." + c.listview + " > li > a") || e.is('[rel="external"]') || e.is('[target="_blank"]') || (b.__valueOrFn(b.opts.onClick.setSelected, e) && b.setSelected(a(d.target).parent()), (m = b.__valueOrFn(b.opts.onClick.preventDefault, e, "#" == m.slice(0, 1))) && d.preventDefault(), b.__valueOrFn(b.opts.onClick.blockUI, e, !m) && f.$html.addClass(c.blocking), b.__valueOrFn(b.opts.onClick.close, e, m) && b.close());
      });
    }, _initAddons:function() {
      for (var b in a.mmenu.addons) {
        a.mmenu.addons[b].add.call(this), a.mmenu.addons[b].add = function() {
        };
      }
      for (b in a.mmenu.addons) {
        a.mmenu.addons[b].setup.call(this);
      }
    }, __api:function() {
      var b = this, c = {};
      a.each(this._api, function(a) {
        var d = this;
        c[d] = function() {
          var a = b[d].apply(b, arguments);
          return "undefined" == typeof a ? c : a;
        };
      });
      return c;
    }, __valueOrFn:function(a, b, c) {
      return "function" == typeof a ? a.call(b[0]) : "undefined" == typeof a && "undefined" != typeof c ? c : a;
    }, __refactorClass:function(a, b, d) {
      return a.filter("." + b).removeClass(b).addClass(c[d]);
    }, __findAddBack:function(a, b) {
      return a.find(b).add(a.filter(b));
    }, __filterListItems:function(a) {
      return a.not("." + c.divider).not("." + c.hidden);
    }, __transitionend:function(a, b, c) {
      var d = !1, f = function() {
        d || b.call(a[0]);
        d = !0;
      };
      a.one(e.transitionend, f);
      a.one(e.webkitTransitionEnd, f);
      setTimeout(f, 1.1 * c);
    }, __getUniqueId:function() {
      return c.mm(a.mmenu.uniqueId++);
    }};
    a.fn.mmenu = function(c, d) {
      b(a(this));
      c = a.extend(!0, {}, a.mmenu.defaults, c);
      d = a.extend(!0, {}, a.mmenu.configuration, d);
      return this.each(function() {
        var b = a(this);
        if (!b.data("mmenu")) {
          var e = new a.mmenu(b, c, d);
          b.data("mmenu", e.__api());
        }
      });
    };
    a.mmenu.support = {touch:"ontouchstart" in window || navigator.msMaxTouchPoints, csstransitions:function() {
      if ("undefined" !== typeof Modernizr) {
        return Modernizr.csstransitions;
      }
      var a = (document.body || document.documentElement).style, b = "transition";
      if ("string" == typeof a[b]) {
        return !0;
      }
      for (var c = "Moz webkit Webkit Khtml O ms".split(" "), b = b.charAt(0).toUpperCase() + b.substr(1), d = 0; d < c.length; d++) {
        if ("string" == typeof a[c[d] + b]) {
          return !0;
        }
      }
      return !1;
    }()};
    var c, d, e, f;
  }
})(jQuery);
(function(a) {
  a.mmenu.addons.autoHeight = {setup:function() {
    if (this.opts.offCanvas) {
      switch(this.opts.offCanvas.position) {
        case "left":
        case "right":
          return;
      }
      var e = this, f = this.opts.autoHeight;
      d = a.mmenu.glbl;
      "boolean" == typeof f && f && (f = {height:"auto"});
      "object" != typeof f && (f = {});
      f = this.opts.autoHeight = a.extend(!0, {}, a.mmenu.defaults.autoHeight, f);
      if ("auto" == f.height) {
        this.$menu.addClass(b.autoheight);
        var g = function(a) {
          var c = this.$menu.children("." + b.current);
          _top = parseInt(c.css("top"), 10) || 0;
          _bot = parseInt(c.css("bottom"), 10) || 0;
          this.$menu.addClass(b.measureheight);
          a = a || this.$menu.children("." + b.current);
          a.is("." + b.vertical) && (a = a.parents("." + b.panel).not("." + b.vertical).first());
          this.$menu.height(a.outerHeight() + _top + _bot).removeClass(b.measureheight);
        };
        this.bind("update", g);
        this.bind("openPanel", g);
        this.bind("closePanel", g);
        this.bind("open", g);
        d.$wndw.off(c.resize + "-autoheight").on(c.resize + "-autoheight", function(a) {
          g.call(e);
        });
      }
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("autoheight measureheight");
    c.add("resize");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.autoHeight = {height:"default"};
  var b, c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.backButton = {setup:function() {
    if (this.opts.offCanvas) {
      var d = this, e = this.opts.backButton;
      c = a.mmenu.glbl;
      "boolean" == typeof e && (e = {close:e});
      "object" != typeof e && (e = {});
      e = a.extend(!0, {}, a.mmenu.defaults.backButton, e);
      if (e.close) {
        var f = "#" + d.$menu.attr("id");
        this.bind("opened", function(a) {
          location.hash != f && history.pushState(null, document.title, f);
        });
        a(window).on("popstate", function(a) {
          c.$html.hasClass(b.opened) ? (a.stopPropagation(), d.close()) : location.hash == f && (a.stopPropagation(), d.open());
        });
      }
    }
  }, add:function() {
    window.history && window.history.pushState ? b = a.mmenu._c : a.mmenu.addons.backButton.setup = function() {
    };
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.backButton = {close:!1};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.counters = {setup:function() {
    var d = this, e = this.opts.counters;
    "boolean" == typeof e && (e = {add:e, update:e});
    "object" != typeof e && (e = {});
    e = this.opts.counters = a.extend(!0, {}, a.mmenu.defaults.counters, e);
    this.bind("init", function(b) {
      this.__refactorClass(a("em", b), this.conf.classNames.counters.counter, "counter");
    });
    e.add && this.bind("init", function(d) {
      d.each(function() {
        var d = a(this).data(c.parent);
        d && (d.children("em." + b.counter).length || d.prepend(a('<em class="' + b.counter + '" />')));
      });
    });
    e.update && this.bind("update", function() {
      this.$menu.find("." + b.panel).each(function() {
        var e = a(this), g = e.data(c.parent);
        g && (g = g.children("em." + b.counter), g.length && (e = e.children("." + b.listview), e.length && g.html(d.__filterListItems(e.children()).length)));
      });
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    b.add("counter search noresultsmsg");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.counters = {add:!1, update:!1};
  a.mmenu.configuration.classNames.counters = {counter:"Counter"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.dividers = {setup:function() {
    var d = this, e = this.opts.dividers;
    "boolean" == typeof e && (e = {add:e, fixed:e});
    "object" != typeof e && (e = {});
    e = this.opts.dividers = a.extend(!0, {}, a.mmenu.defaults.dividers, e);
    this.bind("init", function(b) {
      this.__refactorClass(a("li", this.$menu), this.conf.classNames.dividers.collapsed, "collapsed");
    });
    e.add && this.bind("init", function(c) {
      switch(e.addTo) {
        case "panels":
          break;
        default:
          c = a(e.addTo, this.$menu).filter("." + b.panel);
      }
      a("." + b.divider, c).remove();
      c.find("." + b.listview).not("." + b.vertical).each(function() {
        var c = "";
        d.__filterListItems(a(this).children()).each(function() {
          var d = a.trim(a(this).children("a, span").text()).slice(0, 1).toLowerCase();
          d != c && d.length && (c = d, a('<li class="' + b.divider + '">' + d + "</li>").insertBefore(this));
        });
      });
    });
    e.collapse && this.bind("init", function(c) {
      a("." + b.divider, c).each(function() {
        var c = a(this);
        c.nextUntil("." + b.divider, "." + b.collapsed).length && !c.children("." + b.subopen).length && (c.wrapInner("<span />"), c.prepend('<a href="#" class="' + b.subopen + " " + b.fullsubopen + '" />'));
      });
    });
    if (e.fixed) {
      var f = function(c) {
        c = c || this.$menu.children("." + b.current);
        if (c.find("." + b.divider).not("." + b.hidden).length) {
          this.$menu.addClass(b.hasdividers);
          var d = c.scrollTop() || 0, e = "";
          c.is(":visible") && c.find("." + b.divider).not("." + b.hidden).each(function() {
            a(this).position().top + d < d + 1 && (e = a(this).text());
          });
          this.$fixeddivider.text(e);
        } else {
          this.$menu.removeClass(b.hasdividers);
        }
      };
      this.$fixeddivider = a('<ul class="' + b.listview + " " + b.fixeddivider + '"><li class="' + b.divider + '"></li></ul>').prependTo(this.$menu).children();
      this.bind("openPanel", f);
      this.bind("init", function(b) {
        b.off(c.scroll + "-dividers " + c.touchmove + "-dividers").on(c.scroll + "-dividers " + c.touchmove + "-dividers", function(b) {
          f.call(d, a(this));
        });
      });
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("collapsed uncollapsed fixeddivider hasdividers");
    c.add("scroll");
  }, clickAnchor:function(a, c) {
    return this.opts.dividers.collapse && c && (a = a.parent(), a.is("." + b.divider)) ? (c = a.nextUntil("." + b.divider, "." + b.collapsed), a.toggleClass(b.opened), c[a.hasClass(b.opened) ? "addClass" : "removeClass"](b.uncollapsed), !0) : !1;
  }};
  a.mmenu.defaults.dividers = {add:!1, addTo:"panels", fixed:!1, collapse:!1};
  a.mmenu.configuration.classNames.dividers = {collapsed:"Collapsed"};
  var b, c;
})(jQuery);
(function(a) {
  function b(a, b, c) {
    a < b && (a = b);
    a > c && (a = c);
    return a;
  }
  a.mmenu.addons.dragOpen = {setup:function() {
    if (this.opts.offCanvas) {
      var e = this, f = this.opts.dragOpen, g = this.conf.dragOpen;
      d = a.mmenu.glbl;
      "boolean" == typeof f && (f = {open:f});
      "object" != typeof f && (f = {});
      f = this.opts.dragOpen = a.extend(!0, {}, a.mmenu.defaults.dragOpen, f);
      if (f.open) {
        var h = 0, l = !1, n = !1, p = 0, q = 0, m, r, u;
        switch(this.opts.offCanvas.position) {
          case "left":
          case "right":
            var v = "panleft panright";
            var A = "x";
            var C = "X";
            n = "width";
            break;
          case "top":
          case "bottom":
            v = "panup pandown", A = "y", C = "Y", n = "height";
        }
        switch(this.opts.offCanvas.position) {
          case "right":
          case "bottom":
            var B = !0;
            var H = function(a) {
              a >= d.$wndw[n]() - f.maxStartPos && (h = 1);
            };
            break;
          default:
            B = !1, H = function(a) {
              a <= f.maxStartPos && (h = 1);
            };
        }
        switch(this.opts.offCanvas.position) {
          case "left":
            var z = "right";
            var D = "left";
            break;
          case "right":
            z = "left";
            D = "right";
            break;
          case "top":
            z = "down";
            D = "up";
            break;
          case "bottom":
            z = "up", D = "down";
        }
        switch(this.opts.offCanvas.zposition) {
          case "front":
            var F = function() {
              return this.$menu;
            };
            break;
          default:
            F = function() {
              return a("." + c.slideout);
            };
        }
        var K = this.__valueOrFn(f.pageNode, this.$menu, d.$page);
        "string" == typeof K && (K = a(K));
        (new Hammer(K[0], f.vendors.hammer)).on("panstart", function(a) {
          H(a.center[A]);
          d.$slideOutNodes = F();
          l = z;
        }).on(v + " panend", function(a) {
          0 < h && a.preventDefault();
        }).on(v, function(a) {
          m = a["delta" + C];
          B && (m = -m);
          m != p && (l = m >= p ? z : D);
          p = m;
          if (p > f.threshold && 1 == h) {
            if (d.$html.hasClass(c.opened)) {
              return;
            }
            h = 2;
            e._openSetup();
            e.trigger("opening");
            d.$html.addClass(c.dragging);
            q = b(d.$wndw[n]() * g[n].perc, g[n].min, g[n].max);
          }
          2 == h && (r = b(p, 10, q) - ("front" == e.opts.offCanvas.zposition ? q : 0), B && (r = -r), u = "translate" + C + "(" + r + "px )", d.$slideOutNodes.css({"-webkit-transform":"-webkit-" + u, transform:u}));
        }).on("panend", function(a) {
          2 == h && (d.$html.removeClass(c.dragging), d.$slideOutNodes.css("transform", ""), e[l == z ? "_openFinish" : "close"]());
          h = 0;
        });
      }
    }
  }, add:function() {
    "function" != typeof Hammer || 2 > Hammer.VERSION ? a.mmenu.addons.dragOpen.setup = function() {
    } : (c = a.mmenu._c, c.add("dragging"));
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.dragOpen = {open:!1, maxStartPos:100, threshold:50, vendors:{hammer:{}}};
  a.mmenu.configuration.dragOpen = {width:{perc:0.8, min:140, max:440}, height:{perc:0.8, min:140, max:880}};
  var c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.fixedElements = {setup:function() {
    if (this.opts.offCanvas) {
      var b = this.opts.fixedElements;
      c = a.mmenu.glbl;
      b = this.opts.fixedElements = a.extend(!0, {}, a.mmenu.defaults.fixedElements, b);
      b = function(a) {
        var b = this.conf.classNames.fixedElements.fixed;
        this.__refactorClass(a.find("." + b), b, "slideout").appendTo(c.$body);
      };
      b.call(this, c.$page);
      this.bind("setPage", b);
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("fixed");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.classNames.fixedElements = {fixed:"Fixed"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.iconPanels = {setup:function() {
    var c = this, d = this.opts.iconPanels;
    "boolean" == typeof d && (d = {add:d});
    "number" == typeof d && (d = {add:!0, visible:d});
    "object" != typeof d && (d = {});
    d = this.opts.iconPanels = a.extend(!0, {}, a.mmenu.defaults.iconPanels, d);
    d.visible++;
    if (d.add) {
      this.$menu.addClass(b.iconpanel);
      for (var e = [], f = 0; f <= d.visible; f++) {
        e.push(b.iconpanel + "-" + f);
      }
      var e = e.join(" "), g = function(f) {
        c.$menu.children("." + b.panel).removeClass(e).filter("." + b.subopened).removeClass(b.hidden).add(f).slice(-d.visible).each(function(c) {
          a(this).addClass(b.iconpanel + "-" + c);
        });
      };
      this.bind("openPanel", g);
      this.bind("init", function(e) {
        g.call(c, c.$menu.children("." + b.current));
        d.hideNavbars && e.removeClass(b.hasnavbar);
        e.each(function() {
          a(this).children("." + b.subblocker).length || a(this).prepend('<a href="#' + a(this).closest("." + b.panel).attr("id") + '" class="' + b.subblocker + '" />');
        });
      });
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("iconpanel subblocker");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.iconPanels = {add:!1, visible:3, hideNavbars:!1};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars = {setup:function() {
    var c = this, d = this.opts.navbars, e = this.conf.navbars;
    if ("undefined" != typeof d) {
      d instanceof Array || (d = [d]);
      var f = {};
      a.each(d, function(g) {
        g = d[g];
        "boolean" == typeof g && g && (g = {});
        "object" != typeof g && (g = {});
        "undefined" == typeof g.content && (g.content = ["prev", "title"]);
        g.content instanceof Array || (g.content = [g.content]);
        g = a.extend(!0, {}, c.opts.navbar, g);
        var h = g.position, n = g.height;
        "number" != typeof n && (n = 1);
        n = Math.min(4, Math.max(1, n));
        "bottom" != h && (h = "top");
        f[h] || (f[h] = 0);
        f[h]++;
        var p = a("<div />").addClass(b.navbar + " " + b.navbar + "-" + h + " " + b.navbar + "-" + h + "-" + f[h] + " " + b.navbar + "-size-" + n);
        f[h] += n - 1;
        for (var h = 0, q = g.content.length; h < q; h++) {
          var m = a.mmenu.addons.navbars[g.content[h]] || !1;
          m ? m.call(c, p, g, e) : (m = g.content[h], m instanceof a || (m = a(g.content[h])), m.each(function() {
            p.append(a(this));
          }));
        }
        g = Math.ceil(p.children().not("." + b.btn).length / n);
        1 < g && p.addClass(b.navbar + "-content-" + g);
        p.children("." + b.btn).length && p.addClass(b.hasbtns);
        p.prependTo(c.$menu);
      });
      for (var g in f) {
        c.$menu.addClass(b.hasnavbar + "-" + g + "-" + f[g]);
      }
    }
  }, add:function() {
    b = a.mmenu._c;
    b.add("close hasbtns");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.navbars = {breadcrumbSeparator:"/"};
  a.mmenu.configuration.classNames.navbars = {panelTitle:"Title", panelNext:"Next", panelPrev:"Prev"};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.breadcrumbs = function(b, c, d) {
    var e = a.mmenu._c, f = a.mmenu._d;
    e.add("breadcrumbs separator");
    b.append('<span class="' + e.breadcrumbs + '"></span>');
    this.bind("init", function(b) {
      b.removeClass(e.hasnavbar).each(function() {
        for (var b = [], c = a(this), g = a('<span class="' + e.breadcrumbs + '"></span>'), p = a(this).children().first(), q = !0; p && p.length;) {
          p.is("." + e.panel) || (p = p.closest("." + e.panel));
          var m = p.children("." + e.navbar).children("." + e.title).text();
          b.unshift(q ? "<span>" + m + "</span>" : '<a href="#' + p.attr("id") + '">' + m + "</a>");
          q = !1;
          p = p.data(f.parent);
        }
        g.append(b.join('<span class="' + e.separator + '">' + d.breadcrumbSeparator + "</span>")).appendTo(c.children("." + e.navbar));
      });
    });
    c = function() {
      var a = this.$menu.children("." + e.current), c = b.find("." + e.breadcrumbs), a = a.children("." + e.navbar).children("." + e.breadcrumbs);
      c.html(a.html());
    };
    this.bind("openPanel", c);
    this.bind("init", c);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.close = function(b, c) {
    var d = a.mmenu._c;
    c = a.mmenu.glbl;
    b.append('<a class="' + d.close + " " + d.btn + '" href="#"></a>');
    var e = function(a) {
      b.find("." + d.close).attr("href", "#" + a.attr("id"));
    };
    e.call(this, c.$page);
    this.bind("setPage", e);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.next = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.next + " " + d.btn + '" href="#"></a>');
    var e = function(a) {
      a = a || this.$menu.children("." + d.current);
      var c = b.find("." + d.next), e = a.find("." + this.conf.classNames.navbars.panelNext);
      a = e.attr("href");
      e = e.html();
      c[a ? "attr" : "removeAttr"]("href", a);
      c[a || e ? "removeClass" : "addClass"](d.hidden);
      c.html(e);
    };
    this.bind("openPanel", e);
    this.bind("init", function() {
      e.call(this);
    });
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.prev = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.prev + " " + d.btn + '" href="#"></a>');
    this.bind("init", function(a) {
      a.removeClass(d.hasnavbar);
    });
    c = function() {
      var a = this.$menu.children("." + d.current), c = b.find("." + d.prev), g = a.find("." + this.conf.classNames.navbars.panelPrev);
      g.length || (g = a.children("." + d.navbar).children("." + d.prev));
      a = g.attr("href");
      g = g.html();
      c[a ? "attr" : "removeAttr"]("href", a);
      c[a || g ? "removeClass" : "addClass"](d.hidden);
      c.html(g);
    };
    this.bind("openPanel", c);
    this.bind("init", c);
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.searchfield = function(b, c) {
    b = a('<div class="' + a.mmenu._c.search + '" />').appendTo(b);
    "object" != typeof this.opts.searchfield && (this.opts.searchfield = {});
    this.opts.searchfield.add = !0;
    this.opts.searchfield.addTo = b;
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.navbars.title = function(b, c) {
    var d = a.mmenu._c;
    b.append('<a class="' + d.title + '"></a>');
    var e = function(a) {
      a = a || this.$menu.children("." + d.current);
      var e = b.find("." + d.title), f = a.find("." + this.conf.classNames.navbars.panelTitle);
      f.length || (f = a.children("." + d.navbar).children("." + d.title));
      a = f.attr("href");
      f = f.html() || c.title;
      e[a ? "attr" : "removeAttr"]("href", a);
      e[a || f ? "removeClass" : "addClass"](d.hidden);
      e.html(f);
    };
    this.bind("openPanel", e);
    this.bind("init", function() {
      e.call(this);
    });
  };
})(jQuery);
(function(a) {
  a.mmenu.addons.offCanvas = {setup:function() {
    if (this.opts.offCanvas) {
      var c = this.opts.offCanvas, d = this.conf.offCanvas;
      e = a.mmenu.glbl;
      this._api = a.merge(this._api, ["open", "close", "setPage"]);
      if ("top" == c.position || "bottom" == c.position) {
        c.zposition = "front";
      }
      "string" != typeof d.pageSelector && (d.pageSelector = "> " + d.pageNodetype);
      e.$allMenus = (e.$allMenus || a()).add(this.$menu);
      this.vars.opened = !1;
      var h = [b.offcanvas];
      "left" != c.position && h.push(b.mm(c.position));
      "back" != c.zposition && h.push(b.mm(c.zposition));
      this.$menu.addClass(h.join(" ")).parent().removeClass(b.wrapper);
      this.setPage(e.$page);
      this._initBlocker();
      this._initWindow_offCanvas();
      this.$menu[d.menuInjectMethod + "To"](d.menuWrapperSelector);
    }
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    d = a.mmenu._e;
    b.add("offcanvas slideout modal background opening blocker page");
    c.add("style");
    d.add("resize");
  }, clickAnchor:function(a, c) {
    if (!this.opts.offCanvas) {
      return !1;
    }
    if ((c = this.$menu.attr("id")) && c.length && (this.conf.clone && (c = b.umm(c)), a.is('[href="#' + c + '"]'))) {
      return this.open(), !0;
    }
    if (e.$page) {
      return (c = e.$page.first().attr("id")) && c.length && a.is('[href="#' + c + '"]') ? (this.close(), !0) : !1;
    }
  }};
  a.mmenu.defaults.offCanvas = {position:"left", zposition:"back", modal:!1, moveBackground:!0};
  a.mmenu.configuration.offCanvas = {pageNodetype:"div", pageSelector:null, wrapPageIfNeeded:!0, menuWrapperSelector:"body", menuInjectMethod:"prepend"};
  a.mmenu.prototype.open = function() {
    if (!this.vars.opened) {
      var a = this;
      this._openSetup();
      setTimeout(function() {
        a._openFinish();
      }, this.conf.openingInterval);
      this.trigger("open");
    }
  };
  a.mmenu.prototype._openSetup = function() {
    var f = this;
    this.closeAllOthers();
    e.$page.each(function() {
      a(this).data(c.style, a(this).attr("style") || "");
    });
    e.$wndw.trigger(d.resize + "-offcanvas", [!0]);
    var g = [b.opened];
    this.opts.offCanvas.modal && g.push(b.modal);
    this.opts.offCanvas.moveBackground && g.push(b.background);
    "left" != this.opts.offCanvas.position && g.push(b.mm(this.opts.offCanvas.position));
    "back" != this.opts.offCanvas.zposition && g.push(b.mm(this.opts.offCanvas.zposition));
    this.opts.extensions && g.push(this.opts.extensions);
    e.$html.addClass(g.join(" "));
    setTimeout(function() {
      f.vars.opened = !0;
    }, this.conf.openingInterval);
    this.$menu.addClass(b.current + " " + b.opened);
  };
  a.mmenu.prototype._openFinish = function() {
    var a = this;
    this.__transitionend(e.$page.first(), function() {
      a.trigger("opened");
    }, this.conf.transitionDuration);
    e.$html.addClass(b.opening);
    this.trigger("opening");
  };
  a.mmenu.prototype.close = function() {
    if (this.vars.opened) {
      var d = this;
      this.__transitionend(e.$page.first(), function() {
        d.$menu.removeClass(b.current).removeClass(b.opened);
        e.$html.removeClass(b.opened).removeClass(b.modal).removeClass(b.background).removeClass(b.mm(d.opts.offCanvas.position)).removeClass(b.mm(d.opts.offCanvas.zposition));
        d.opts.extensions && e.$html.removeClass(d.opts.extensions);
        e.$page.each(function() {
          a(this).attr("style", a(this).data(c.style));
        });
        d.vars.opened = !1;
        d.trigger("closed");
      }, this.conf.transitionDuration);
      e.$html.removeClass(b.opening);
      this.trigger("close");
      this.trigger("closing");
    }
  };
  a.mmenu.prototype.closeAllOthers = function() {
    e.$allMenus.not(this.$menu).each(function() {
      var b = a(this).data("mmenu");
      b && b.close && b.close();
    });
  };
  a.mmenu.prototype.setPage = function(c) {
    var d = this, f = this.conf.offCanvas;
    c && c.length || (c = e.$body.find(f.pageSelector), 1 < c.length && f.wrapPageIfNeeded && (c = c.wrapAll("<" + this.conf.offCanvas.pageNodetype + " />").parent()));
    c.each(function() {
      a(this).attr("id", a(this).attr("id") || d.__getUniqueId());
    });
    c.addClass(b.page + " " + b.slideout);
    e.$page = c;
    this.trigger("setPage", c);
  };
  a.mmenu.prototype._initWindow_offCanvas = function() {
    e.$wndw.off(d.keydown + "-offcanvas").on(d.keydown + "-offcanvas", function(a) {
      if (e.$html.hasClass(b.opened) && 9 == a.keyCode) {
        return a.preventDefault(), !1;
      }
    });
    var a = 0;
    e.$wndw.off(d.resize + "-offcanvas").on(d.resize + "-offcanvas", function(c, d) {
      1 == e.$page.length && (d || e.$html.hasClass(b.opened)) && (c = e.$wndw.height(), d || c != a) && (a = c, e.$page.css("minHeight", c));
    });
  };
  a.mmenu.prototype._initBlocker = function() {
    var c = this;
    e.$blck || (e.$blck = a('<div id="' + b.blocker + '" class="' + b.slideout + '" />'));
    e.$blck.appendTo(e.$body).off(d.touchstart + "-offcanvas " + d.touchmove + "-offcanvas").on(d.touchstart + "-offcanvas " + d.touchmove + "-offcanvas", function(a) {
      a.preventDefault();
      a.stopPropagation();
      e.$blck.trigger(d.mousedown + "-offcanvas");
    }).off(d.mousedown + "-offcanvas").on(d.mousedown + "-offcanvas", function(a) {
      a.preventDefault();
      e.$html.hasClass(b.modal) || (c.closeAllOthers(), c.close());
    });
  };
  var b, c, d, e;
})(jQuery);
(function(a) {
  a.mmenu.addons.searchfield = {setup:function() {
    var e = this, f = this.opts.searchfield, g = this.conf.searchfield;
    "boolean" == typeof f && (f = {add:f});
    "object" != typeof f && (f = {});
    f = this.opts.searchfield = a.extend(!0, {}, a.mmenu.defaults.searchfield, f);
    this.bind("close", function() {
      this.$menu.find("." + b.search).find("input").blur();
    });
    this.bind("init", function(h) {
      if (f.add) {
        switch(f.addTo) {
          case "panels":
            break;
          default:
            h = a(f.addTo, this.$menu);
        }
        h.each(function() {
          var c = a(this);
          if (!c.is("." + b.panel) || !c.is("." + b.vertical)) {
            if (!c.children("." + b.search).length) {
              var d = a("<" + (g.form ? "form" : "div") + ' class="' + b.search + '" />');
              if (g.form && "object" == typeof g.form) {
                for (var h in g.form) {
                  d.attr(h, g.form[h]);
                }
              }
              d.append('<input placeholder="' + f.placeholder + '" type="text" autocomplete="off" />');
              c.hasClass(b.search) ? c.replaceWith(d) : c.prepend(d).addClass(b.hassearch);
            }
            f.noResults && (c.closest("." + b.panel).length || (c = e.$menu.children("." + b.panel).first()), c.children("." + b.noresultsmsg).length || (d = c.children("." + b.listview).first(), a('<div class="' + b.noresultsmsg + '" />').append(f.noResults)[d.length ? "insertAfter" : "prependTo"](d.length ? d : c)));
          }
        });
        f.search && a("." + b.search, this.$menu).each(function() {
          var g, h = a(this), p = h.closest("." + b.panel).length;
          if (p) {
            var q = g = h.closest("." + b.panel);
          } else {
            g = a("." + b.panel, e.$menu), q = e.$menu;
          }
          var m = h.children("input"), h = e.__findAddBack(g, "." + b.listview).children("li"), r = h.filter("." + b.divider), u = e.__filterListItems(h), v = function() {
            var d = m.val().toLowerCase();
            g.scrollTop(0);
            u.add(r).addClass(b.hidden).find("." + b.fullsubopensearch).removeClass(b.fullsubopen).removeClass(b.fullsubopensearch);
            u.each(function() {
              var c = a(this), e = "> a";
              if (f.showTextItems || f.showSubPanels && c.find("." + b.next)) {
                e = "> a, > span";
              }
              -1 < a(e, c).text().toLowerCase().indexOf(d) && c.add(c.prevAll("." + b.divider).first()).removeClass(b.hidden);
            });
            f.showSubPanels && g.each(function(d) {
              d = a(this);
              e.__filterListItems(d.find("." + b.listview).children()).each(function() {
                var d = a(this), e = d.data(c.sub);
                d.removeClass(b.nosubresults);
                e && e.find("." + b.listview).children().removeClass(b.hidden);
              });
            });
            a(g.get().reverse()).each(function(d) {
              var f = a(this), g = f.data(c.parent);
              g && (e.__filterListItems(f.find("." + b.listview).children()).length ? (g.hasClass(b.hidden) && g.children("." + b.next).not("." + b.fullsubopen).addClass(b.fullsubopen).addClass(b.fullsubopensearch), g.removeClass(b.hidden).removeClass(b.nosubresults).prevAll("." + b.divider).first().removeClass(b.hidden)) : p || (f.hasClass(b.opened) && setTimeout(function() {
                e.openPanel(g.closest("." + b.panel));
              }, 1.5 * (d + 1) * e.conf.openingInterval), g.addClass(b.nosubresults)));
            });
            q[u.not("." + b.hidden).length ? "removeClass" : "addClass"](b.noresults);
            this.update();
          };
          m.off(d.keyup + "-searchfield " + d.change + "-searchfield").on(d.keyup + "-searchfield", function(a) {
            a: {
              switch(a.keyCode) {
                case 9:
                case 16:
                case 17:
                case 18:
                case 37:
                case 38:
                case 39:
                case 40:
                  a = !0;
                  break a;
              }
              a = !1;
            }
            a || v.call(e);
          }).on(d.change + "-searchfield", function(a) {
            v.call(e);
          });
        });
      }
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._d;
    d = a.mmenu._e;
    b.add("search hassearch noresultsmsg noresults nosubresults fullsubopensearch");
    d.add("change keyup");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.searchfield = {add:!1, addTo:"panels", search:!0, placeholder:"Search", noResults:"No results found.", showTextItems:!1, showSubPanels:!0};
  a.mmenu.configuration.searchfield = {form:!1};
  var b, c, d;
})(jQuery);
(function(a) {
  a.mmenu.addons.sectionIndexer = {setup:function() {
    var d = this, e = this.opts.sectionIndexer;
    "boolean" == typeof e && (e = {add:e});
    "object" != typeof e && (e = {});
    e = this.opts.sectionIndexer = a.extend(!0, {}, a.mmenu.defaults.sectionIndexer, e);
    this.bind("init", function(f) {
      if (e.add) {
        switch(e.addTo) {
          case "panels":
            break;
          default:
            f = a(e.addTo, this.$menu).filter("." + b.panel);
        }
        f.find("." + b.divider).closest("." + b.panel).addClass(b.hasindexer);
      }
      !this.$indexer && this.$menu.children("." + b.hasindexer).length && (this.$indexer = a('<div class="' + b.indexer + '" />').prependTo(this.$menu).append('<a href="#a">a</a><a href="#b">b</a><a href="#c">c</a><a href="#d">d</a><a href="#e">e</a><a href="#f">f</a><a href="#g">g</a><a href="#h">h</a><a href="#i">i</a><a href="#j">j</a><a href="#k">k</a><a href="#l">l</a><a href="#m">m</a><a href="#n">n</a><a href="#o">o</a><a href="#p">p</a><a href="#q">q</a><a href="#r">r</a><a href="#s">s</a><a href="#t">t</a><a href="#u">u</a><a href="#v">v</a><a href="#w">w</a><a href="#x">x</a><a href="#y">y</a><a href="#z">z</a>'), 
      this.$indexer.children().on(c.mouseover + "-sectionindexer " + b.touchstart + "-sectionindexer", function(c) {
        var e = a(this).attr("href").slice(1);
        c = d.$menu.children("." + b.current);
        var f = c.find("." + b.listview), g = !1, p = c.scrollTop(), q = f.position().top + parseInt(f.css("margin-top"), 10) + parseInt(f.css("padding-top"), 10) + p;
        c.scrollTop(0);
        f.children("." + b.divider).not("." + b.hidden).each(function() {
          !1 === g && e == a(this).text().slice(0, 1).toLowerCase() && (g = a(this).position().top + q);
        });
        c.scrollTop(!1 !== g ? g : p);
      }), f = function(a) {
        d.$menu[(a.hasClass(b.hasindexer) ? "add" : "remove") + "Class"](b.hasindexer);
      }, this.bind("openPanel", f), f.call(this, this.$menu.children("." + b.current)));
    });
  }, add:function() {
    b = a.mmenu._c;
    c = a.mmenu._e;
    b.add("indexer hasindexer");
    c.add("mouseover touchstart");
  }, clickAnchor:function(a, c) {
    if (a.parent().is("." + b.indexer)) {
      return !0;
    }
  }};
  a.mmenu.defaults.sectionIndexer = {add:!1, addTo:"panels"};
  var b, c;
})(jQuery);
(function(a) {
  a.mmenu.addons.swipeClose = {setup:function() {
    var c = this, d = this.opts.swipeClose;
    "boolean" == typeof d && (d = {close:d});
    "object" != typeof d && (d = {});
    d = this.opts.swipeClose = a.extend(!0, {}, a.mmenu.defaults.swipeClose, d);
    if (d.close) {
      switch(this.opts.offCanvas.position) {
        case "left":
          var e = "swipeleft";
          break;
        case "right":
          e = "swiperight";
          break;
        case "top":
          e = "swipeup";
          break;
        case "bottom":
          e = "swipedown";
      }
      var f = -1 != this.opts.extensions.indexOf("mm-leftsubpanel") ? "swipeleft" : "swiperight";
      (new Hammer(this.$menu[0], d.vendors.hammer)).on(e, function(a) {
        c.opts.offCanvas && (0 == c.$menu.find("." + b.prev + ":visible").length ? c.close() : e != f && c.close());
      }).on(f, function(a) {
        a = c.$menu.find("." + b.prev + ":visible");
        0 < a.length && a.click();
      });
    }
  }, add:function() {
    "function" != typeof Hammer || 2 > Hammer.VERSION ? a.mmenu.addons.swipeClose.setup = function() {
    } : b = a.mmenu._c;
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.defaults.swipeClose = {close:!1, vendors:{hammer:{}}};
  a.mmenu.configuration.swipeClose = {};
  var b;
})(jQuery);
(function(a) {
  a.mmenu.addons.toggles = {setup:function() {
    var c = this;
    this.bind("init", function(d) {
      this.__refactorClass(a("input", d), this.conf.classNames.toggles.toggle, "toggle");
      this.__refactorClass(a("input", d), this.conf.classNames.toggles.check, "check");
      a("input." + b.toggle + ", input." + b.check, d).each(function() {
        var d = a(this), f = d.closest("li"), g = d.hasClass(b.toggle) ? "toggle" : "check", h = d.attr("id") || c.__getUniqueId();
        f.children('label[for="' + h + '"]').length || (d.attr("id", h), f.prepend(d), a('<label for="' + h + '" class="' + b[g] + '"></label>').insertBefore(f.children("a, span").last()));
      });
    });
  }, add:function() {
    b = a.mmenu._c;
    b.add("toggle check");
  }, clickAnchor:function(a, b) {
  }};
  a.mmenu.configuration.classNames.toggles = {toggle:"Toggle", check:"Check"};
  var b;
})(jQuery);
Polymer({is:"simpl-mmenu", properties:{name:String, classes:String, slidingSubmenus:String, background:String, searchfield:String, context:{observer:"contextChanged", type:String}}, observers:[], behaviors:[StyleScopeBehavior], attached:function() {
  this.context = null;
  this.roles = window.roles || [];
  this.backgroundColor = "invalid";
  this.classes = "mm-white mm-zoom-panels";
  var a = document.querySelector("#dispatcherId").getNodes();
  this._createTree(a);
  this._createMenu();
  this.setStyleScope(this._mainmenu, "style-scope", this.tagName.toLowerCase());
  channel.subscribe("context.changed", function(a) {
    this.context = a.context;
  }.bind(this));
  channel.subscribe("roles.changed", function(b) {
    console.log("roles.changed", b);
    this.roles = b.roles;
    $(this._mainmenu).remove();
    this.async(function() {
      this._createTree(a);
      this._createMenu();
      this.setStyleScope(this._mainmenu, "style-scope", this.tagName.toLowerCase());
      document.querySelector("#dispatcherId").initListener();
    }, 200);
  }.bind(this));
  this.fire("menu-ready", {});
}, getMenuApi:function() {
  return $(this._mainmenu).data("mmenu");
}, setSelected:function(a) {
  var b = $(document.querySelector("#x" + a.hash)), c = 0;
  for (a = b.parent(); 0 < a.length && 10 > c++;) {
    if ("DIV" === a.prop("tagName")) {
      this.openPanel(a);
      break;
    }
    a = a.parent();
  }
  $(this._mainmenu).data("mmenu").setSelected(b);
}, openPanel:function(a) {
  $(this._mainmenu).data("mmenu").openPanel(a);
}, _createMenu:function() {
  var a = $(this._mainmenu).mmenu({slidingSubmenus:"true" == this.slidingSubmenus, searchfield:{add:"false" != this.searchfield, noResults:tr("mmenu.noResults"), placeholder:tr("mmenu.search.placeholder")}, navbar:{add:!0, title:tr("mmenu.title")}, navbars:{content:["searchfield"], height:2}, body:$(this._mainmenu), classes:this.classes, offCanvas:!1}), b = this.background;
  b && 0 <= b.length && (this.backgroundColor = b, $(this._mainmenu).css("backgroundColor", b), a.addClass("mm-background"), $(this).addClass("mm-background"));
  setTimeout(function() {
  }.bind(this), 5000);
  this.async(function() {
  });
}, _createTree:function(a) {
  var b = document.createElement("nav");
  this._mainmenu = b;
  var c = document.createElement("ul");
  Polymer.dom(this.root).appendChild(b);
  Polymer.dom(b).appendChild(c);
  Polymer.dom(b).setAttribute("id", "mainmenu");
  Polymer.dom(b).classList.add("nav");
  this._createNodeList(c, a, !0);
}, _createNodeList:function(a, b, c) {
  for (var d = 0; d < b.length; d++) {
    if (!b[d].uri || !b[d].uri.startsWith("mainToolbar:")) {
      var e = b[d];
      if (!this._isNodeDisabled(e)) {
        var f = !1;
        this._hasNeededRoles(e) || (f = !0);
        this._hasNodeChildren(e) ? (f = this._createNode(a, e, c, f), this._createNodeList(f, e.children, !1)) : this._createLeaf(a, e, c, f);
      }
    }
  }
}, _createNode:function(a, b, c, d) {
  var e = this._createIcon(b), f = document.createElement("li"), g = document.createElement("ul"), h = document.createElement("span"), l = document.createTextNode(b.name);
  Polymer.dom(a).appendChild(f);
  this._addNodeClasses(f, b.classes);
  Polymer.dom(f).appendChild(h);
  Polymer.dom(f).appendChild(g);
  Polymer.dom(f).setAttribute("style", "list-style:none");
  Polymer.dom(f).setAttribute("id", "x" + b.hash);
  this._addNodeClasses(f, "menu__item,menu__item_primary,has-sub-menu");
  Polymer.dom(h).appendChild(e);
  Polymer.dom(h).appendChild(l);
  c && Polymer.dom(f).classList.add("firstLevel");
  d && Polymer.dom(f).setAttribute("style", "display:none");
  return g;
}, _createLeaf:function(a, b, c, d) {
  var e = this._createIcon(b), f = document.createElement("li"), g = document.createElement("a"), h = document.createElement("paper-ripple"), l = document.createTextNode(b.name);
  Polymer.dom(a).appendChild(f);
  this._addNodeClasses(f, b.classes);
  this._addNodeClasses(f, "menu__item,menu__item_primary");
  this._addNodeClasses(h, "ripple");
  Polymer.dom(f).appendChild(g);
  ("ie" != browser.name || "9" != browser.major && "10" != browser.major) && Polymer.dom(f).appendChild(h);
  Polymer.dom(g).appendChild(e);
  Polymer.dom(g).setAttribute("style", "cursor:pointer");
  Polymer.dom(g).setAttribute("id", "hash_" + b.hash);
  Polymer.dom(g).classList.add("menuentry");
  Polymer.dom(g).appendChild(l);
  Polymer.dom(f).setAttribute("style", "list-style:none");
  Polymer.dom(f).setAttribute("id", "x" + b.hash);
  c && Polymer.dom(f).classList.add("firstLevel");
  d && Polymer.dom(f).setAttribute("style", "display:none");
  g.page = b;
  b.provider = this;
}, _createIcon:function(a) {
  var b = null;
  a.aweicon ? (b = document.createElement("font-awesome"), Polymer.dom(b).setAttribute("icon", a.aweicon)) : a.icon && (b = document.createElement("iron-icon"), this._addNodeClasses(b, "small"), Polymer.dom(b).setAttribute("icon", a.icon));
  return b;
}, _addNodeClasses:function(a, b) {
  if (null != b) {
    b = b.split(",");
    for (var c = 0; c < b.length; c++) {
      a.classList.add(b[c]);
    }
  }
}, _isNodeDisabled:function(a) {
  return !0 === a.disabled;
}, _hasNeededRoles:function(a) {
  if (_.isEmpty(a.roles)) {
    return console.log("node.roles.empty", a.roles), !0;
  }
  if (_.isEmpty(this.roles)) {
    return console.log("this.roles.empty", this.roles), !1;
  }
  var b = this, c = a.roles.every(function(a) {
    return 0 <= b.roles.indexOf(a);
  });
  console.log("node.roles:", a.roles);
  console.log("this.roles:", this.roles);
  console.log("isSuperset:", c);
  return c;
}, _hasNodeChildren:function(a) {
  return a.children && 0 < a.children.length;
}, contextChanged:function() {
  null != this.context && this._applyMenuContext(this._mainmenu);
}, _applyMenuContext:function(a) {
  this._domVisitor(a, function(a) {
    "LI" === a.tagName && (a.classList.add("ctx-hidden"), a.classList.contains(this.context) && a.classList.remove("ctx-hidden"));
  }.bind(this));
}});
Math.randomString = function(a) {
  for (var b = "", c = 0; c < a; c++) {
    b += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62 * Math.random()));
  }
  return b;
};
String.prototype.getCss = function() {
  for (var a = {}, b = this.valueOf().split(";"), c = 0; c < b.length; c++) {
    if (b[c] = $.trim(b[c]), b[c]) {
      var d = b[c].split(":");
      a[$.trim(d[0])] = $.trim(d[1]);
    }
  }
  return a;
};
String.prototype.trim = function() {
  return this.replace(/^\s+|\s+$/g, "");
};
String.prototype.toCamel = function() {
  return this.replace(/(\-[a-z])/g, function(a) {
    return a.toUpperCase().replace("-", "");
  });
};
String.prototype.toDash = function() {
  return this.replace(/([A-Z])/g, function(a) {
    return "-" + a.toLowerCase();
  });
};
String.prototype.toUnderscore = function() {
  return this.replace(/([A-Z])/g, function(a) {
    return "_" + a.toLowerCase();
  });
};
Number.prototype.isBetween = function(a, b, c) {
  if (!c) {
    if (this.valueOf() < b && this.valueOf() > a) {
      return !0;
    }
  } else {
    if (this.valueOf() <= b && this.valueOf() >= a) {
      return !0;
    }
  }
  return !1;
};
$.fn.insertAt = function(a, b) {
  var c = b;
  "string" === typeof b && (c = $(b));
  a = Math.min(c.children().length, a);
  if (0 == a) {
    return c.prepend(this), this;
  }
  var d = this.data("index");
  this.attr("data-index", a);
  c.find(">*:nth-child(" + a + ")").after(this);
  c.children().each(function(b, c) {
    c = $(c);
    d < a && b > d && b <= a ? c.attr("data-index", parseInt(c.data("data-index"), 10) - 1) : d >= a && b > a && b <= d && c.attr("data-index", parseInt(c.attr("data-index"), 10) + 1);
  });
  return this;
};
$.fn.disableSelection = function() {
  return this.attr("unselectable", "on").css("user-select", "none").on("selectstart", !1);
};
$.fn.enableSelection = function() {
  return this.removeAttr("unselectable").css("user-select", "initial").off("selectstart");
};
$(function() {
  var a = function(a, c) {
    this.hasRandomId = !1;
    this.storage = null;
    this.$el = a;
    this.$el.data("inner-id") || (this.hasRandomId = !0, this.$el.attr("data-inner-id", Math.randomString(10)));
    this.innerId = this.$el.data("inner-id");
    this.$options = this._processInput(c);
    this.$heading = this.$el.find(">.panel-heading");
    this.$body = this.$el.find(">.panel-body");
    this._init();
    this.$el.css("display", "none");
    this._applyState(this.$options.state, this.$options.stateParams);
    this.$el.css("display", "block");
    this._applyIndex(this.$options.initialIndex);
  };
  a.prototype = {_processInput:function(a) {
    a || (a = {});
    this.hasRandomId || (this.storage = localStorage.getItem("lobipanel_" + this.innerId), this.storage = JSON.parse(this.storage) || {});
    var b = this._getOptionsFromAttributes();
    a = $.extend({}, $.fn.lobiPanel.DEFAULTS, this.storage, a, b);
    for (var d = "unpin reload expand minimize close editTitle".split(" "), e = 0; e < d.length; e++) {
      var f = d[e];
      "object" === typeof a[f] && (a[f] = $.extend({}, $.fn.lobiPanel.DEFAULTS[f], a[f], b[f]));
    }
    return a;
  }, _init:function() {
    this.$el.addClass("lobipanel");
    this.$heading.append(this._generateControls());
    var a = this.$el.parent();
    this._appendInnerIdToParent(a, this.innerId);
    this._enableSorting();
    this._onToggleIconsBtnClick();
    this._enableResponsiveness();
    this._setBodyHeight();
    this.$options.autoload && this.load();
    a = "calc(100% - " + this.$heading.find(".dropdown-menu").children().length * this.$heading.find(".dropdown-menu li").first().outerWidth() + "px)";
    this.$heading.find(".panel-title").css("max-width", a);
    this._triggerEvent("init");
  }, isPanelInit:function() {
    return this.$el.hasClass("lobipanel") && this.$el.data("inner-id");
  }, isPinned:function() {
    return !this.$el.hasClass("panel-unpin");
  }, pin:function() {
    this.disableResize();
    this.disableDrag();
    this._enableSorting();
    this._offPanelClick();
    this.$el.removeClass("panel-unpin").attr("old-style", this.$el.attr("style")).removeAttr("style").css("position", "relative");
    this.$body.css({width:"", height:""});
    this._setBodyHeight();
    this._insertInParent();
    return this;
  }, unpin:function() {
    if (this.$el.hasClass("panel-collapsed")) {
      return this;
    }
    this._disableSorting();
    if (this.$el.attr("old-style")) {
      this.$el.attr("style", this.$el.attr("old-style"));
    } else {
      var a = this.$el.width(), c = this.$el.height(), d = Math.max(0, ($(window).width() - this.$el.outerWidth()) / 2), e = Math.max(0, $(document).scrollTop() + ($(window).height() - this.$el.outerHeight()) / 2);
      this.$el.css({left:d, top:e, width:a, height:c + 10});
    }
    a = this._getMaxZIndex();
    this.$el.css("z-index", a["z-index"] + 1);
    this._onPanelClick();
    this.$el.addClass("panel-unpin");
    $("body").append(this.$el);
    a = this._getAvailableWidth(this.$el.width());
    c = this._getAvailableHeight(this.$el.height());
    this.$el.css({position:"absolute", width:a, height:c});
    c = this._calculateBodyHeight(c);
    a = this._calculateBodyWidth(a);
    this.$body.css({width:a, height:c});
    this.$options.draggable && this.enableDrag();
    "none" !== this.$options.resize && this.enableResize();
    return this;
  }, togglePin:function() {
    this.isPinned() ? this.unpin() : this.pin();
    return this;
  }, isMinimized:function() {
    return this.$el.hasClass("panel-minimized") || this.$el.hasClass("panel-collapsed");
  }, minimize:function() {
    var b = this;
    b._triggerEvent("beforeMinimize");
    if (b.isMinimized()) {
      return b;
    }
    if (b.isPinned()) {
      b.$body.slideUp(), b.$el.find(".panel-footer").slideUp(), b.$el.addClass("panel-collapsed"), b._saveState("collapsed"), b._changeClassOfControl(b.$heading.find('[data-func="minimize"]'));
    } else {
      b.disableTooltips();
      var c = b._getFooterForMinimizedPanels(), d = c.find(">*");
      var e = c.offset().top;
      0 === d.length ? d = c.offset().left : (d = $(d[d.length - 1]), d = d.offset().left + d.width());
      b.$el.hasClass("panel-expanded") || b.$el.attr("old-style", b.$el.attr("style"));
      b.$el.animate({left:d, top:e, width:200, height:c.height()}, 100, function() {
        b.$el.hasClass("panel-expanded") && (b.$el.removeClass("panel-expanded"), b.$el.find(".panel-heading [data-func=expand] ." + a.PRIVATE_OPTIONS.iconClass).removeClass(b.$options.expand.icon2).addClass(b.$options.expand.icon));
        b.$el.addClass("panel-minimized");
        b.$el.removeAttr("style");
        b.disableDrag();
        b.disableResize();
        b._expandOnHeaderClick();
        c.append(b.$el);
        $("body").addClass("lobipanel-minimized");
        var d = "calc(100% - " + b.$heading.find(".dropdown-menu li>a:visible").length * b.$heading.find(".dropdown-menu li>a:visible").first().outerWidth() + "px)";
        b.$heading.find(".panel-title").css("max-width", d);
        b._saveState("minimized");
        b._triggerEvent("onMinimize");
      });
    }
    return b;
  }, maximize:function() {
    var a = this;
    a._triggerEvent("beforeMaximize");
    if (!a.isMinimized()) {
      return a;
    }
    if (a.isPinned()) {
      a.$body.slideDown(), a.$el.find(".panel-footer").slideDown(), a.$el.removeClass("panel-collapsed"), a._saveState("pinned"), a._changeClassOfControl(a.$heading.find('[data-func="minimize"]'));
    } else {
      a.enableTooltips();
      var c = a.$el.attr("old-style").getCss();
      a.$el.css({position:c.position || "fixed", "z-index":c["z-index"], left:a.$el.offset().left, top:a.$el.offset().top, width:a.$el.width(), height:a.$el.height()});
      $("body").append(a.$el);
      delete c.position;
      delete c["z-index"];
      a.$el.animate(c, 100, function() {
        a.$el.css("position", "");
        a.$el.removeClass("panel-minimized");
        a.$el.removeAttr("old-style");
        a.$options.draggable && a.enableDrag();
        a.enableResize();
        a._removeExpandOnHeaderClick();
        var b = a._getFooterForMinimizedPanels();
        0 === b.children().length && b.remove();
        $("body").removeClass("lobipanel-minimized").addClass("lobipanel-minimized");
        b = "calc(100% - " + a.$heading.find(".dropdown-menu li").length * a.$heading.find(".dropdown-menu li").first().outerWidth() + "px)";
        a.$heading.find(".panel-title").css("max-width", b);
        a._updateUnpinnedState();
        a._triggerEvent("onMaximize");
      });
    }
    return a;
  }, toggleMinimize:function() {
    this.isMinimized() ? this.maximize() : this.minimize();
    return this;
  }, isOnFullScreen:function() {
    return this.$el.hasClass("panel-expanded");
  }, toFullScreen:function() {
    var b = this;
    b._triggerEvent("beforeFullScreen");
    if (b.$el.hasClass("panel-collapsed")) {
      return b;
    }
    b._changeClassOfControl(b.$heading.find('[data-func="expand"]'));
    b.$el.css("position", "fixed");
    var c = b._getMaxZIndex();
    b.isPinned() || b.isMinimized() ? (b.enableTooltips(), b.$el.css({"z-index":c["z-index"] + 1, left:b.$el.offset().left, top:b.$el.offset().top - $(window).scrollTop(), width:b.$el.width(), height:b.$el.height()}), $("body").append(b.$el), c = b._getFooterForMinimizedPanels(), 0 === c.children().length && c.remove()) : (b.$body.css({width:"", height:""}), b._setBodyHeight());
    b.isMinimized() ? (b.$el.removeClass("panel-minimized"), b._removeExpandOnHeaderClick()) : (b.$el.attr("old-style", b.$el.attr("style")), b.disableResize());
    var d = $("." + a.PRIVATE_OPTIONS.toolbarClass).outerHeight() || 0;
    b.$el.animate({width:$(window).width(), height:$(window).height() - d, left:0, top:0}, b.$options.expandAnimation, function() {
      b.$el.css({width:"", height:"", right:0, bottom:d});
      b.$el.addClass("panel-expanded");
      $("body").css("overflow", "hidden");
      b.$body.css({width:b._calculateBodyWidth(b.$el.width()), height:b._calculateBodyHeight(b.$el.height())});
      b.disableDrag();
      b.isPinned() && b._disableSorting();
      b._saveState("fullscreen");
      b._triggerEvent("onFullScreen");
    });
    return b;
  }, toSmallSize:function() {
    var a = this;
    a._triggerEvent("beforeSmallSize");
    a._changeClassOfControl(a.$heading.find('[data-func="expand"]'));
    var c = a.$el.attr("old-style").getCss();
    a.$el.animate({position:"absolute", left:c.left, top:c.top, width:c.width, height:c.height, right:c.right, bottom:c.bottom}, a.$options.collapseAnimation, function() {
      a.$el.removeAttr("old-style");
      a.$el.hasClass("panel-unpin") ? (a.$options.draggable && a.enableDrag(), a.enableResize()) : (a.$el.removeAttr("style"), a._insertInParent(), a._enableSorting());
      a.$el.removeClass("panel-expanded");
      $("body").css("overflow", "auto");
      var b = "", c = "";
      a.isPinned() ? "auto" !== a.$options.bodyHeight && (c = a.$options.bodyHeight) : (b = a._calculateBodyWidth(a.getWidth()), c = a._calculateBodyHeight(a.getHeight()));
      "auto" !== a.$options.bodyHeight ? a._saveState("pinnned") : a._updateUnpinnedState();
      a.$body.css({width:b, height:c});
      a._triggerEvent("onSmallSize");
    });
    return a;
  }, toggleSize:function() {
    this.isOnFullScreen() ? this.toSmallSize() : this.toFullScreen();
    return this;
  }, close:function(a) {
    var b = this;
    a = void 0 === a ? 100 : a;
    b._triggerEvent("beforeClose");
    b.$el.hide(a, function() {
      b.isOnFullScreen() && $("body").css("overflow", "auto");
      b._triggerEvent("onClose");
      b.$el.remove();
      var a = b._getFooterForMinimizedPanels();
      0 === a.children().length && a.remove();
    });
    return b;
  }, setPosition:function(a, c, d) {
    d = void 0 === d ? 100 : d;
    if (this.isPinned()) {
      return this;
    }
    this.$el.animate({left:a, top:c}, d);
    return this;
  }, setWidth:function(a, c) {
    c = void 0 === c ? 100 : c;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyWidth(a);
    this.$el.animate({width:a}, c);
    this.$body.animate({width:b}, c);
    return this;
  }, setHeight:function(a, c) {
    c = void 0 === c ? 100 : c;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyHeight(a);
    this.$el.animate({height:a}, c);
    this.$body.animate({height:b}, c);
    return this;
  }, setSize:function(a, c, d) {
    d = void 0 === d ? 100 : d;
    if (this.isPinned()) {
      return this;
    }
    var b = this._calculateBodyHeight(c), f = this._calculateBodyWidth(a);
    this.$el.animate({height:c, width:a}, d);
    this.$body.animate({height:b, width:f}, d);
    return this;
  }, getPosition:function() {
    var a = this.$el.offset();
    return {x:a.left, y:a.top};
  }, getWidth:function() {
    return this.$el.width();
  }, getHeight:function() {
    return this.$el.height();
  }, bringToFront:function() {
    this._triggerEvent("beforeToFront");
    var a = this._getMaxZIndex();
    if (a.id === this.$el.data("inner-id")) {
      return this;
    }
    this.$el.css("z-index", a["z-index"] + 1);
    this._triggerEvent("onToFront");
    return this;
  }, enableDrag:function() {
    var a = this;
    a.$el.draggable({handle:".panel-heading", containment:a.$options.constrain, start:function() {
      a.$el.css("position", "absolute");
    }, stop:function() {
      a.$el.css("position", "");
      a._updateUnpinnedState();
    }});
    return a;
  }, disableDrag:function() {
    this.$el.hasClass("ui-draggable") && this.$el.draggable("destroy");
    return this;
  }, enableResize:function() {
    var a = this, c = !1;
    "vertical" === a.$options.resize ? c = "n, s" : "horizontal" === a.$options.resize ? c = "e, w" : "both" === a.$options.resize && (c = "all");
    if (!c) {
      return a;
    }
    a.$el.resizable({minWidth:a.$options.minWidth, maxWidth:a.$options.maxWidth, minHeight:a.$options.minHeight, maxHeight:a.$options.maxHeight, handles:c, start:function() {
      a.$el.disableSelection();
      a._triggerEvent("resizeStart");
    }, stop:function() {
      a.$el.enableSelection();
      a._triggerEvent("resizeStop");
    }, resize:function() {
      var b = a._calculateBodyHeight(a.$el.height()), c = a._calculateBodyWidth(a.$el.width());
      a.$body.css({width:c, height:b});
      a._updateUnpinnedState();
      a._triggerEvent("onResize");
    }});
    return a;
  }, disableResize:function() {
    this.$el.hasClass("ui-resizable") && this.$el.resizable("destroy");
    return this;
  }, startLoading:function() {
    var a = this._generateWindow8Spinner();
    this.$el.append(a);
    a.find(".spinner").css("margin-top", 50);
    return this;
  }, stopLoading:function() {
    this.$el.find(".spinner-wrapper").remove();
    return this;
  }, setLoadUrl:function(a) {
    this.$options.loadUrl = a;
    return this;
  }, load:function(a) {
    var b = this;
    a = a || {};
    "string" === typeof a && (a = {url:a});
    var d = a.url || b.$options.loadUrl, e = a.data || {}, f = a.callback || null;
    if (!d) {
      return b;
    }
    b._triggerEvent("beforeLoad");
    b.startLoading();
    b.$body.load(d, e, function(a, c, d) {
      f && "function" === typeof f && b.callback(a, c, d);
      b.stopLoading();
      b._triggerEvent("loaded", a, c, d);
    });
    return b;
  }, destroy:function() {
    this.disableDrag();
    this.disableResize();
    this.$options.sortable = !1;
    this._enableSorting();
    this._removeInnerIdFromParent(this.innerId);
    this.$el.removeClass("lobipanel").removeAttr("data-inner-id").removeAttr("data-index").removeData("lobiPanel");
    this.$heading.find(".dropdown").remove();
    return this.$el;
  }, startTitleEditing:function() {
    var a = this, c = a.$heading.find(".panel-title").text().trim(), d = $('<input value="' + c + '"/>');
    d.on("keydown", function(b) {
      13 === b.which ? a.finishTitleEditing() : 27 === b.which && a.cancelTitleEditing();
    });
    a.$heading.find(".panel-title").data("old-title", c).html("").append(d);
    d[0].focus();
    d[0].select();
    a._changeClassOfControl(a.$heading.find('[data-func="editTitle"]'));
    return a;
  }, isTitleEditing:function() {
    return 0 < this.$heading.find(".panel-title input").length;
  }, cancelTitleEditing:function() {
    var a = this.$heading.find(".panel-title");
    a.html(a.data("old-title")).find("input").remove();
    this._changeClassOfControl(this.$heading.find('[data-func="editTitle"]'));
    return this;
  }, finishTitleEditing:function() {
    var a = this.$heading.find("input");
    if (!1 === this._triggerEvent("beforeTitleChange", a.val())) {
      return this;
    }
    this.$heading.find(".panel-title").html(a.val());
    a.remove();
    this._changeClassOfControl(this.$heading.find('[data-func="editTitle"]'));
    this._triggerEvent("onTitleChange", a.val());
    return this;
  }, enableTooltips:function() {
    if (768 > $(window).width()) {
      return this;
    }
    var a = this.$heading.find(".dropdown-menu>li>a");
    a.each(function(a, b) {
      a = $(b);
      a.attr("data-toggle", "tooltip").attr("data-title", a.data("tooltip")).attr("data-placement", "bottom");
    });
    a.each(function(a, b) {
      $(b).tooltip({container:"body", template:'<div class="tooltip lobipanel-tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'});
    });
    return this;
  }, disableTooltips:function() {
    this.$heading.find(".dropdown-menu>li>a").each(function(a, c) {
      $(c).data("bs.tooltip") && $(c).tooltip("destroy");
    });
    return this;
  }, _generateControls:function() {
    var a = this._generateDropdown(), c = a.find(".dropdown-menu");
    !1 !== this.$options.editTitle && c.append(this._generateEditTitle());
    !1 !== this.$options.unpin && c.append(this._generateUnpin());
    !1 !== this.$options.reload && c.append(this._generateReload());
    !1 !== this.$options.minimize && c.append(this._generateMinimize());
    !1 !== this.$options.expand && c.append(this._generateExpand());
    !1 !== this.$options.close && c.append(this._generateClose());
    c.find(">li>a").on("click", function(a) {
      a.preventDefault();
      a.stopPropagation();
    });
    return a;
  }, _generateDropdown:function() {
    return $('<div class="dropdown"></div>').append('<ul class="dropdown-menu dropdown-menu-right"></ul>').append('<div class="dropdown-toggle" data-toggle="dropdown"><span class="' + a.PRIVATE_OPTIONS.iconClass + " " + this.$options.toggleIcon + '"></div>');
  }, _generateEditTitle:function() {
    var b = this.$options.editTitle, c = $('<a data-func="editTitle"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachEditTitleClickListener(c);
    return $("<li></li>").append(c);
  }, _attachEditTitleClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.isTitleEditing() ? b.finishTitleEditing() : b.startTitleEditing();
    });
  }, hideTooltip:function(a) {
    a.data("bs.tooltip") && a.tooltip("hide");
    return this;
  }, _generateUnpin:function() {
    var b = this.$options.unpin, c = $('<a data-func="unpin"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachUnpinClickListener(c);
    return $("<li></li>").append(c);
  }, _attachUnpinClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function() {
      b.hideTooltip(a);
      b.doTogglePin();
    });
  }, _generateReload:function() {
    var b = this.$options.reload, c = $('<a data-func="reload"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachReloadClickListener(c);
    return $("<li></li>").append(c);
  }, _attachReloadClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function() {
      b.hideTooltip(a);
      b.load();
    });
  }, _generateMinimize:function() {
    var b = this.$options.minimize, c = $('<a data-func="minimize"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachMinimizeClickListener(c);
    return $("<li></li>").append(c);
  }, _attachMinimizeClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.toggleMinimize();
    });
  }, _generateExpand:function() {
    var b = this.$options.expand, c = $('<a data-func="expand"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachExpandClickListener(c);
    return $("<li></li>").append(c);
  }, _attachExpandClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.toggleSize();
    });
  }, _generateClose:function() {
    var b = this.$options.close, c = $('<a data-func="close"></a>');
    c.append('<i class="' + a.PRIVATE_OPTIONS.iconClass + " " + b.icon + '"></i>');
    b.tooltip && "string" === typeof b.tooltip && (c.append('<span class="control-title">' + b.tooltip + "</span>"), c.attr("data-tooltip", b.tooltip));
    this._attachCloseClickListener(c);
    return $("<li></li>").append(c);
  }, _attachCloseClickListener:function(a) {
    var b = this;
    a.on("mousedown", function(a) {
      a.stopPropagation();
    });
    a.on("click", function(c) {
      c.stopPropagation();
      b.hideTooltip(a);
      b.close();
    });
  }, _getMaxZIndex:function() {
    var b = $(".lobipanel.panel-unpin:not(.panel-minimized.panel-expanded)");
    if (0 === b.length) {
      return {id:"", "z-index":a.PRIVATE_OPTIONS.initialZIndex};
    }
    var c = $(b[0]).attr("style");
    var d = $(b[0]).data("inner-id");
    var e = c ? c.getCss()["z-index"] : a.PRIVATE_OPTIONS.initialZIndex;
    for (var f = 1; f < b.length; f++) {
      c = (c = $(b[f]).attr("style")) ? c.getCss()["z-index"] : 0, c > e && (d = $(b[f]).data("inner-id"), e = c);
    }
    return {id:d, "z-index":parseInt(e, 10)};
  }, _onPanelClick:function() {
    var a = this;
    a.$el.on("mousedown.lobiPanel", function() {
      if (a.isPinned() || a.isMinimized() || a.isOnFullScreen()) {
        return !1;
      }
      a.bringToFront();
    });
  }, _offPanelClick:function() {
    this.$el.off("mousedown.lobiPanel");
  }, _changeClassOfControl:function(b) {
    b = $(b);
    var c = this.$options[b.attr("data-func")];
    c.icon && b.find("." + a.PRIVATE_OPTIONS.iconClass).toggleClass(c.icon).toggleClass(c.icon2);
  }, _getFooterForMinimizedPanels:function() {
    var b = $("." + a.PRIVATE_OPTIONS.toolbarClass);
    0 === b.length && (b = $('<div class="' + a.PRIVATE_OPTIONS.toolbarClass + '"></div>'), $("body").append(b));
    return b;
  }, _expandOnHeaderClick:function() {
    var a = this;
    a.$heading.on("click.lobiPanel", function() {
      a.maximize();
      a.bringToFront();
    });
  }, _removeExpandOnHeaderClick:function() {
    this.$heading.off("click.lobiPanel");
  }, _getAvailableWidth:function(a) {
    this.$options.maxWidth && (a = Math.min(a, this.$options.maxWidth));
    this.$options.minWidth && (a = Math.max(a, this.$options.minWidth));
    return a;
  }, _getAvailableHeight:function(a) {
    this.$options.maxHeight && (a = Math.min(a, this.$options.maxHeight));
    this.$options.minHeight && (a = Math.max(a, this.$options.minHeight));
    return a;
  }, _calculateBodyHeight:function(a) {
    return a - this.$heading.outerHeight() - this.$el.find(".panel-footer").outerHeight();
  }, _calculateBodyWidth:function(a) {
    return a - 2;
  }, _appendInnerIdToParent:function(b, c) {
    if (void 0 === b.attr(a.PRIVATE_OPTIONS.parentAttr)) {
      b.attr(a.PRIVATE_OPTIONS.parentAttr, c);
    } else {
      if (-1 < b.attr(a.PRIVATE_OPTIONS.parentAttr).indexOf(c)) {
        return;
      }
      var d = b.attr(a.PRIVATE_OPTIONS.parentAttr);
      b.attr(a.PRIVATE_OPTIONS.parentAttr, d + " " + c);
    }
    this.$el.attr("data-index", this.$el.index());
  }, _insertInParent:function() {
    var b = $("[" + a.PRIVATE_OPTIONS.parentAttr + "~=" + this.innerId + "]");
    this.$el.insertAt(this.$el.attr("data-index"), b);
  }, _generateWindow8Spinner:function() {
    return $('<div class="spinner-wrapper"><div class="spinner spinner-windows8"><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div><div class="wBall"><div class="wInnerBall"></div></div></div></div>');
  }, _enableSorting:function() {
    var a = this, c = a.$el.parent();
    c.hasClass("ui-sortable") && c.sortable("destroy");
    a.$options.sortable ? (a.$el.addClass("lobipanel-sortable"), c.addClass("lobipanel-parent-sortable")) : a.$el.removeClass("lobipanel-sortable");
    c.sortable({connectWith:".lobipanel-parent-sortable", items:".lobipanel-sortable", handle:".panel-heading", cursor:"move", placeholder:"lobipanel-placeholder", forcePlaceholderSize:!0, opacity:0.7, revert:300, update:function(b, c) {
      b = c.item.data("inner-id");
      a._removeInnerIdFromParent(b);
      a._appendInnerIdToParent(c.item.parent(), b);
      a._updateDataIndices(c.item);
      a._triggerEvent("dragged");
    }});
  }, _disableSorting:function() {
    var a = this.$el.parent();
    a.hasClass("ui-sortable") && a.sortable("destroy");
  }, _updateDataIndices:function(a) {
    a.parent().children().each(function(a, b) {
      $(b).attr("data-index", a);
      (b = $(b).data("lobiPanel")) && b.$options.stateful && !b.hasRandomId && b._saveState("pinned", {index:a});
    });
    console.log("Save indices in localstorage");
  }, _removeInnerIdFromParent:function(b) {
    var c = $("[" + a.PRIVATE_OPTIONS.parentAttr + "~=" + b + "]");
    b = c.attr(a.PRIVATE_OPTIONS.parentAttr).replace(b, "").trim().replace(/\s{2,}/g, " ");
    c.attr(a.PRIVATE_OPTIONS.parentAttr, b);
  }, _onToggleIconsBtnClick:function() {
    var a = this;
    a.$heading.find(".toggle-controls").on("click.lobiPanel", function() {
      a.$el.toggleClass("controls-expanded");
    });
  }, _adjustForScreenSize:function() {
    this.disableTooltips();
    768 < $(window).width() && this.$options.tooltips && this.enableTooltips();
    this.isOnFullScreen() && this.$body.css({width:this._calculateBodyWidth(this.$el.width()), height:this._calculateBodyHeight(this.$el.height())});
  }, _enableResponsiveness:function() {
    var a = this;
    a._adjustForScreenSize();
    $(window).on("resize.lobiPanel", function() {
      a._adjustForScreenSize();
    });
  }, _setBodyHeight:function() {
    "auto" !== this.$options.bodyHeight && this.$body.css({height:this.$options.bodyHeight, overflow:"auto"});
  }, _getOptionsFromAttributes:function() {
    var a = this.$el, c = {}, d;
    for (d in $.fn.lobiPanel.DEFAULTS) {
      var e = d.toDash(), e = a.data(e);
      void 0 !== e && (c[d] = "object" !== typeof $.fn.lobiPanel.DEFAULTS[d] ? e : eval("(" + e + ")"));
    }
    return c;
  }, _saveState:function(a, c) {
    console.log("Save state ", a, c);
    !this.hasRandomId && this.$options.stateful && (this.storage.state = a, c && (this.storage.stateParams = c), this._saveLocalStorage(this.storage));
  }, _saveLocalStorage:function(a) {
    localStorage.setItem("lobipanel_" + this.innerId, JSON.stringify(a));
  }, _applyState:function(a, c) {
    switch(a) {
      case "pinned":
        c && null !== c.index && void 0 !== c.index && this._applyIndex(c.index);
        break;
      case "unpinned":
        this.unpin();
        this.setPosition(c.left, c.top, 0);
        this.setSize(c.width, c.height, 0);
        break;
      case "minimized":
        this.unpin();
        this.minimize();
        break;
      case "collapsed":
        this.minimize();
        break;
      case "fullscreen":
        this.toFullScreen();
    }
  }, _applyIndex:function(a) {
    null !== a && this.$el.insertAt(a, this.$el.parent());
  }, _triggerEvent:function(a) {
    var b = Array.prototype.slice.call(arguments, 1);
    b.unshift(this);
    this.$el.trigger(a + ".lobiPanel", b);
    return this.$options[a] && "function" === typeof this.$options[a] ? this.$options[a].apply(this, b) : !0;
  }, doPin:function() {
    !1 !== this._triggerEvent("beforePin") && (this.pin(), this._saveState("pinned"), this._triggerEvent("onPin"));
    return this;
  }, doUnpin:function() {
    !1 !== this._triggerEvent("beforeUnpin") && (this.unpin(), this._updateUnpinnedState(), this._triggerEvent("onUnpin"));
    return this;
  }, doTogglePin:function() {
    this.isPinned() ? this.doUnpin() : this.doPin();
    return this;
  }, _updateUnpinnedState:function() {
    this._saveState("unpinned", this.getAlignment());
  }, getAlignment:function() {
    return {top:this.$el.css("top"), left:this.$el.css("left"), width:this.$el.css("width"), height:this.$el.css("height")};
  }};
  $.fn.lobiPanel = function(b) {
    var c = arguments, d = null;
    this.each(function() {
      var e = $(this), f = e.data("lobiPanel"), g = "object" === typeof b && b;
      f || e.data("lobiPanel", f = new a(e, g));
      "string" === typeof b && (c = Array.prototype.slice.call(c, 1), d = f[b].apply(f, c));
    });
    return d;
  };
  a.PRIVATE_OPTIONS = {parentAttr:"data-lobipanel-child-inner-id", toolbarClass:"lobipanel-minimized-toolbar", initialZIndex:10000, iconClass:"panel-control-icon"};
  $.fn.lobiPanel.DEFAULTS = {draggable:!0, sortable:!1, connectWith:".ui-sortable", resize:"both", minWidth:200, minHeight:100, maxWidth:1200, maxHeight:700, loadUrl:"", autoload:!0, bodyHeight:"auto", tooltips:!0, toggleIcon:"glyphicon glyphicon-cog", expandAnimation:100, collapseAnimation:100, state:"pinned", initialIndex:null, stateful:!1, constrain:"document", unpin:{icon:"glyphicon glyphicon-move", tooltip:"Unpin"}, reload:{icon:"glyphicon glyphicon-refresh", tooltip:"Reload"}, minimize:{icon:"glyphicon glyphicon-minus", 
  icon2:"glyphicon glyphicon-plus", tooltip:"Minimize"}, expand:{icon:"glyphicon glyphicon-resize-full", icon2:"glyphicon glyphicon-resize-small", tooltip:"Fullscreen"}, close:{icon:"glyphicon glyphicon-remove", tooltip:"Close"}, editTitle:{icon:"glyphicon glyphicon-pencil", icon2:"glyphicon glyphicon-floppy-disk", tooltip:"Edit title"}, beforeTitleChange:null};
  $(".lobipanel").lobiPanel();
});
Polymer({is:"simpl-lobipanel", properties:{minimize:{type:Boolean, value:!0}}, behaviors:[ModernizrBehavior, StyleScopeBehavior], attached:function() {
  this.async(function() {
    this.init();
  }, 200);
}, init:function() {
  var a = {_reload:{icon:"fa fa-refresh"}, _editTitle:{icon:"fa fa-edit", icon2:"fa fa-save"}, _unpin:{icon:"fa fa-arrows"}, minimize:{icon:"fa fa-chevron-up", icon2:"fa fa-chevron-down"}, _close:{icon:"fa fa-times-circle"}, expand:{icon:"fa fa-expand", icon2:"fa fa-compress"}, sortable:!0, reload:!1, unpin:!1, close:!1, editTitle:!1};
  !1 === this.minimize && (a.minimize = !1);
  !1 === this.expand && (a.expand = !1);
  $(".panel").lobiPanel(a);
  $(".panel").on("beforeMaximize.lobiPanel", function(a, c) {
    this.fire("lp-maximize", a);
  }.bind(this));
  $(".panel").on("beforeMinimize.lobiPanel", function(a, c) {
    this.fire("lp-minimize", a);
  }.bind(this));
  $(".panel").on("beforeFullScreen.lobiPanel", function(a, c) {
    this.fire("lp-fullscreen", a);
  }.bind(this));
  $(".panel").on("beforeSmallSize.lobiPanel", function(a, c) {
    this.fire("lp-smallsize", a);
  }.bind(this));
  this.async(function() {
    this.setStyleScope(this, "style-scope", this.tagName.toLowerCase());
  });
}});
"use strict";
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
})(function(a) {
  var b, c = function(b, d) {
    this.$el = b;
    this.options = a.extend({}, c.rules.defaults, c.rules[d.rule] || {}, d);
    this.min = Number(this.options.min) || 0;
    this.max = Number(this.options.max) || 0;
    this.$el.on({"focus.spinner":a.proxy(function(b) {
      b.preventDefault();
      a(document).trigger("mouseup.spinner");
      this.oldValue = this.value();
    }, this), "change.spinner":a.proxy(function(a) {
      a.preventDefault();
      this.value(this.$el.val());
    }, this), "keydown.spinner":a.proxy(function(a) {
      var b = {38:"up", 40:"down"}[a.which];
      b && (a.preventDefault(), this.spin(b));
    }, this)});
    this.oldValue = this.value();
    this.value(this.$el.val());
    return this;
  };
  c.rules = {defaults:{min:null, max:null, step:1, precision:0}, currency:{min:0.00, max:null, step:0.01, precision:2}, quantity:{min:1, max:999, step:1, precision:0}, percent:{min:1, max:100, step:1, precision:0}, month:{min:1, max:12, step:1, precision:0}, day:{min:1, max:31, step:1, precision:0}, hour:{min:0, max:23, step:1, precision:0}, minute:{min:1, max:59, step:1, precision:0}, second:{min:1, max:59, step:1, precision:0}};
  c.prototype = {spin:function(b) {
    if (!this.$el.prop("disabled")) {
      this.oldValue = this.value();
      var c = a.isFunction(this.options.step) ? this.options.step.call(this, b) : this.options.step;
      this.value(this.oldValue + Number(c) * ("up" === b ? 1 : -1));
    }
  }, value:function(c) {
    if (null === c || void 0 === c) {
      return this.numeric(this.$el.val());
    }
    c = this.numeric(c);
    var e = this.validate(c);
    0 !== e && (c = -1 === e ? this.min : this.max);
    this.$el.val(c.toFixed(this.options.precision));
    this.oldValue !== this.value() && (this.$el.trigger("changing.spinner", [this.value(), this.oldValue]), clearTimeout(b), b = setTimeout(a.proxy(function() {
      this.$el.trigger("changed.spinner", [this.value(), this.oldValue]);
    }, this), d.delay));
  }, numeric:function(a) {
    a = 0 < this.options.precision ? parseFloat(a, 10) : parseInt(a, 10);
    return isFinite(a) ? a : a || this.options.min || 0;
  }, validate:function(a) {
    return null !== this.options.min && a < this.min ? -1 : null !== this.options.max && a > this.max ? 1 : 0;
  }};
  var d = function(b, d) {
    this.$el = a(b);
    this.$spinning = this.$el.find('[data-spin="spinner"]');
    0 === this.$spinning.length && (this.$spinning = this.$el.find(':input[type="text"]'));
    d = a.extend({}, d, this.$spinning.data());
    this.spinning = new c(this.$spinning, d);
    this.$el.on("click.spinner", '[data-spin="up"], [data-spin="down"]', a.proxy(this, "spin")).on("mousedown.spinner", '[data-spin="up"], [data-spin="down"]', a.proxy(this, "spin"));
    a(document).on("mouseup.spinner", a.proxy(function() {
      clearTimeout(this.spinTimeout);
      clearInterval(this.spinInterval);
    }, this));
    d.delay && this.delay(d.delay);
    d.changed && this.changed(d.changed);
    d.changing && this.changing(d.changing);
  };
  d.delay = 500;
  d.prototype = {constructor:d, spin:function(b) {
    var c = a(b.currentTarget).data("spin");
    switch(b.type) {
      case "click":
        b.preventDefault();
        this.spinning.spin(c);
        break;
      case "mousedown":
        1 === b.which && (this.spinTimeout = setTimeout(a.proxy(this, "beginSpin", c), 300));
    }
  }, delay:function(a) {
    a = Number(a);
    0 <= a && (this.constructor.delay = a + 100);
  }, value:function() {
    return this.spinning.value();
  }, changed:function(a) {
    this.bindHandler("changed.spinner", a);
  }, changing:function(a) {
    this.bindHandler("changing.spinner", a);
  }, bindHandler:function(b, c) {
    if (a.isFunction(c)) {
      this.$spinning.on(b, c);
    } else {
      this.$spinning.off(b);
    }
  }, beginSpin:function(b) {
    this.spinInterval = setInterval(a.proxy(this.spinning, "spin", b), 100);
  }};
  var e = a.fn.spinner;
  a.fn.spinner = function(b, c) {
    return this.each(function() {
      var e = a.data(this, "spinner");
      e || (e = new d(this, b), a.data(this, "spinner", e));
      if ("delay" === b || "changed" === b || "changing" === b) {
        e[b](c);
      } else {
        "step" === b && c ? e.spinning.step = c : "spin" === b && c && e.spinning.spin(c);
      }
    });
  };
  a.fn.spinner.Constructor = d;
  a.fn.spinner.noConflict = function() {
    a.fn.spinner = e;
    return this;
  };
  a(function() {
    a('[data-trigger="spinner"]').spinner();
  });
  return a.fn.spinner;
});
Polymer({is:"simpl-spinner", properties:{eventname:{type:String, value:"value-changed"}, rule:{type:String, value:"quantity"}, value:{type:Object, value:0}}, observers:[], behaviors:[StyleScopeBehavior], up:function() {
  $(this.$.spinner).spinner("spin", "up");
}, down:function() {
  $(this.$.spinner).spinner("spin", "down");
}, attached:function() {
  this.isInited || ($(this.$.spinner).spinner("delay", 200).spinner("rule", this.rule).spinner("changed", function(a, b, c) {
    this.value = b;
    this.fire(this.eventname, {id:this.id, value:b});
  }.bind(this)), $(this.$.input).keyup(function(a) {
    a = this.$.input.value;
    a = parseInt(a);
    this.fire(this.eventname, {id:this.id, value:a});
  }.bind(this)), this.isInited = !0);
}, ready:function() {
}});
(function e$jscomp$0(b, c, d) {
  function e(g, l) {
    if (!c[g]) {
      if (!b[g]) {
        var h = "function" == typeof require && require;
        if (!l && h) {
          return h(g, !0);
        }
        if (f) {
          return f(g, !0);
        }
        l = Error("Cannot find module '" + g + "'");
        throw l.code = "MODULE_NOT_FOUND", l;
      }
      l = c[g] = {exports:{}};
      b[g][0].call(l.exports, function(c) {
        var d = b[g][1][c];
        return e(d ? d : c);
      }, l, l.exports, e$jscomp$0, b, c, d);
    }
    return c[g].exports;
  }
  for (var f = "function" == typeof require && require, g = 0; g < d.length; g++) {
    e(d[g]);
  }
  return e;
})({1:[function(a, b, c) {
  var d = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var d in b) {
      e.call(b, d) && (a[d] = b[d]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, e = {}.hasOwnProperty;
  c = a("./node");
  var f = a("./util");
  var g = c.Position;
  var h = jQuery;
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.$ghost = this.hovered_area = null;
      this.hit_areas = [];
      this.is_dragging = !1;
      this.current_item = null;
    }
    a.prototype.mouseCapture = function(a) {
      a = h(a.target);
      if (!this.mustCaptureElement(a) || this.tree_widget.options.onIsMoveHandle && !this.tree_widget.options.onIsMoveHandle(a)) {
        return null;
      }
      (a = this.tree_widget._getNodeElement(a)) && this.tree_widget.options.onCanMove && (this.tree_widget.options.onCanMove(a.node) || (a = null));
      this.current_item = a;
      return null !== this.current_item;
    };
    a.prototype.mouseStart = function(a) {
      this.refresh();
      var b = h(a.target).offset();
      var c = this.current_item.node;
      c = this.tree_widget.options.autoEscape ? f.html_escape(c.name) : c.name;
      this.drag_element = new n(c, a.page_x - b.left, a.page_y - b.top, this.tree_widget.element);
      this.is_dragging = !0;
      this.current_item.$element.addClass("jqtree-moving");
      return !0;
    };
    a.prototype.mouseDrag = function(a) {
      this.drag_element.move(a.page_x, a.page_y);
      var b = this.findHoveredArea(a.page_x, a.page_y);
      this.canMoveToArea(b) && b ? (b.node.isFolder() || this.stopOpenFolderTimer(), this.hovered_area !== b && (this.hovered_area = b, this.mustOpenFolderTimer(b) ? this.startOpenFolderTimer(b.node) : this.stopOpenFolderTimer(), this.updateDropHint())) : (this.removeHover(), this.removeDropHint(), this.stopOpenFolderTimer());
      if (!b && null != this.tree_widget.options.onDragMove) {
        this.tree_widget.options.onDragMove(this.current_item.node, a.original_event);
      }
      return !0;
    };
    a.prototype.mustCaptureElement = function(a) {
      return !a.is("input,select,textarea");
    };
    a.prototype.canMoveToArea = function(a) {
      if (a) {
        if (this.tree_widget.options.onCanMoveTo) {
          var b = g.getName(a.position);
          return this.tree_widget.options.onCanMoveTo(this.current_item.node, a.node, b);
        }
        return !0;
      }
      return !1;
    };
    a.prototype.mouseStop = function(a) {
      var b;
      this.moveItem(a);
      this.clear();
      this.removeHover();
      this.removeDropHint();
      this.removeHitAreas();
      if (b = this.current_item) {
        this.current_item.$element.removeClass("jqtree-moving"), this.current_item = null;
      }
      this.is_dragging = !1;
      if (!this.hovered_area && b && null != this.tree_widget.options.onDragStop) {
        this.tree_widget.options.onDragStop(b.node, a.original_event);
      }
      return !1;
    };
    a.prototype.refresh = function() {
      this.removeHitAreas();
      if (this.current_item && (this.generateHitAreas(), this.current_item = this.tree_widget._getNodeElementForNode(this.current_item.node), this.is_dragging)) {
        return this.current_item.$element.addClass("jqtree-moving");
      }
    };
    a.prototype.removeHitAreas = function() {
      return this.hit_areas = [];
    };
    a.prototype.clear = function() {
      this.drag_element.remove();
      return this.drag_element = null;
    };
    a.prototype.removeDropHint = function() {
      if (this.previous_ghost) {
        return this.previous_ghost.remove();
      }
    };
    a.prototype.removeHover = function() {
      return this.hovered_area = null;
    };
    a.prototype.generateHitAreas = function() {
      return this.hit_areas = (new l(this.tree_widget.tree, this.current_item.node, this.getTreeDimensions().bottom)).generate();
    };
    a.prototype.findHoveredArea = function(a, b) {
      var c = this.getTreeDimensions();
      if (a < c.left || b < c.top || a > c.right || b > c.bottom) {
        return null;
      }
      var d = 0;
      for (c = this.hit_areas.length; d < c;) {
        var e = d + c >> 1;
        a = this.hit_areas[e];
        if (b < a.top) {
          c = e;
        } else {
          if (b > a.bottom) {
            d = e + 1;
          } else {
            return a;
          }
        }
      }
      return null;
    };
    a.prototype.mustOpenFolderTimer = function(a) {
      var b = a.node;
      return b.isFolder() && !b.is_open && a.position === g.INSIDE;
    };
    a.prototype.updateDropHint = function() {
      if (this.hovered_area) {
        return this.removeDropHint(), this.previous_ghost = this.tree_widget._getNodeElementForNode(this.hovered_area.node).addDropHint(this.hovered_area.position);
      }
    };
    a.prototype.startOpenFolderTimer = function(a) {
      var b = function(b) {
        return function() {
          return b.tree_widget._openNode(a, b.tree_widget.options.slide, function() {
            b.refresh();
            return b.updateDropHint();
          });
        };
      }(this);
      this.stopOpenFolderTimer();
      return this.open_folder_timer = setTimeout(b, this.tree_widget.options.openFolderDelay);
    };
    a.prototype.stopOpenFolderTimer = function() {
      if (this.open_folder_timer) {
        return clearTimeout(this.open_folder_timer), this.open_folder_timer = null;
      }
    };
    a.prototype.moveItem = function(a) {
      if (this.hovered_area && this.hovered_area.position !== g.NONE && this.canMoveToArea(this.hovered_area)) {
        var b = this.current_item.node;
        var c = this.hovered_area.node;
        var d = this.hovered_area.position;
        var e = b.parent;
        d === g.INSIDE && (this.hovered_area.node.is_open = !0);
        var f = function(a) {
          return function() {
            a.tree_widget.tree.moveNode(b, c, d);
            a.tree_widget.element.empty();
            return a.tree_widget._refreshElements();
          };
        }(this);
        a = this.tree_widget._triggerEvent("tree.move", {move_info:{moved_node:b, target_node:c, position:g.getName(d), previous_parent:e, do_move:f, original_event:a.original_event}});
        if (!a.isDefaultPrevented()) {
          return f();
        }
      }
    };
    a.prototype.getTreeDimensions = function() {
      var a = this.tree_widget.element.offset();
      return {left:a.left, top:a.top, right:a.left + this.tree_widget.element.width(), bottom:a.top + this.tree_widget.element.height() + 16};
    };
    return a;
  }();
  var l = function(a) {
    function b(a, c, d) {
      b.__super__.constructor.call(this, a);
      this.current_node = c;
      this.tree_bottom = d;
    }
    d(b, a);
    b.prototype.generate = function() {
      this.positions = [];
      this.last_top = 0;
      this.iterate();
      return this.generateHitAreas(this.positions);
    };
    b.prototype.getTop = function(a) {
      return a.offset().top;
    };
    b.prototype.addPosition = function(a, b, c) {
      this.positions.push({top:c, node:a, position:b});
      return this.last_top = c;
    };
    b.prototype.handleNode = function(a, b, c) {
      c = this.getTop(c);
      a === this.current_node ? this.addPosition(a, g.NONE, c) : this.addPosition(a, g.INSIDE, c);
      return b === this.current_node || a === this.current_node ? this.addPosition(a, g.NONE, c) : this.addPosition(a, g.AFTER, c);
    };
    b.prototype.handleOpenFolder = function(a, b) {
      if (a === this.current_node) {
        return !1;
      }
      a.children[0] !== this.current_node && this.addPosition(a, g.INSIDE, this.getTop(b));
      return !0;
    };
    b.prototype.handleClosedFolder = function(a, b, c) {
      c = this.getTop(c);
      if (a === this.current_node) {
        return this.addPosition(a, g.NONE, c);
      }
      this.addPosition(a, g.INSIDE, c);
      if (b !== this.current_node) {
        return this.addPosition(a, g.AFTER, c);
      }
    };
    b.prototype.handleFirstNode = function(a, b) {
      if (a !== this.current_node) {
        return this.addPosition(a, g.BEFORE, this.getTop(h(a.element)));
      }
    };
    b.prototype.handleAfterOpenFolder = function(a, b, c) {
      return a === this.current_node.node || b === this.current_node.node ? this.addPosition(a, g.NONE, this.last_top) : this.addPosition(a, g.AFTER, this.last_top);
    };
    b.prototype.generateHitAreas = function(a) {
      var b;
      var c = -1;
      var d = [];
      var e = [];
      var f = 0;
      for (b = a.length; f < b; f++) {
        var g = a[f];
        g.top !== c && d.length && (d.length && this.generateHitAreasForGroup(e, d, c, g.top), c = g.top, d = []);
        d.push(g);
      }
      this.generateHitAreasForGroup(e, d, c, this.tree_bottom);
      return e;
    };
    b.prototype.generateHitAreasForGroup = function(a, b, c, d) {
      var e;
      var f = Math.min(b.length, 4);
      d = Math.round((d - c) / f);
      for (e = 0; e < f;) {
        var g = b[e];
        a.push({top:c, bottom:c + d, node:g.node, position:g.position});
        c += d;
        e += 1;
      }
      return null;
    };
    return b;
  }(function() {
    function a(a) {
      this.tree = a;
    }
    a.prototype.iterate = function() {
      var a = !0;
      var b = function(c) {
        return function(d, e) {
          var f;
          var g = (d.is_open || !d.element) && d.hasChildren();
          if (d.element) {
            var m = h(d.element);
            if (!m.is(":visible")) {
              return;
            }
            a && (c.handleFirstNode(d, m), a = !1);
            d.hasChildren() ? d.is_open ? c.handleOpenFolder(d, m) || (g = !1) : c.handleClosedFolder(d, e, m) : c.handleNode(d, e, m);
          }
          if (g) {
            g = d.children.length;
            var l = d.children;
            var r = f = 0;
            for (l = l.length; f < l; r = ++f) {
              r === g - 1 ? b(d.children[r], null) : b(d.children[r], d.children[r + 1]);
            }
            if (d.is_open) {
              return c.handleAfterOpenFolder(d, e, m);
            }
          }
        };
      }(this);
      return b(this.tree, null);
    };
    a.prototype.handleNode = function(a, b, c) {
    };
    a.prototype.handleOpenFolder = function(a, b) {
    };
    a.prototype.handleClosedFolder = function(a, b, c) {
    };
    a.prototype.handleAfterOpenFolder = function(a, b, c) {
    };
    a.prototype.handleFirstNode = function(a, b) {
    };
    return a;
  }());
  var n = function() {
    function a(a, b, c, d) {
      this.offset_x = b;
      this.offset_y = c;
      this.$element = h('<span class="jqtree-title jqtree-dragging">' + a + "</span>");
      this.$element.css("position", "absolute");
      d.append(this.$element);
    }
    a.prototype.move = function(a, b) {
      return this.$element.offset({left:a - this.offset_x, top:b - this.offset_y});
    };
    a.prototype.remove = function() {
      return this.$element.remove();
    };
    return a;
  }();
  b.exports = {DragAndDropHandler:a, DragElement:n, HitAreasGenerator:l};
}, {"./node":5, "./util":12}], 2:[function(a, b, c) {
  a("./node_element");
  var d = a("./util");
  var e = d.html_escape;
  var f = jQuery;
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.opened_icon_element = this.createButtonElement(a.options.openedIcon);
      this.closed_icon_element = this.createButtonElement(a.options.closedIcon);
    }
    a.prototype.render = function(a) {
      return a && a.parent ? this.renderFromNode(a) : this.renderFromRoot();
    };
    a.prototype.renderFromRoot = function() {
      var a = this.tree_widget.element;
      a.empty();
      return this.createDomElements(a[0], this.tree_widget.tree.children, !0, !0, 1);
    };
    a.prototype.renderFromNode = function(a) {
      var b = f(a.element);
      var c = this.createLi(a, a.getLevel());
      this.attachNodeData(a, c);
      b.after(c);
      b.remove();
      if (a.children) {
        return this.createDomElements(c, a.children, !1, !1, a.getLevel() + 1);
      }
    };
    a.prototype.createDomElements = function(a, b, c, d, e) {
      var f;
      c = this.createUl(c);
      a.appendChild(c);
      d = 0;
      for (f = b.length; d < f; d++) {
        a = b[d];
        var g = this.createLi(a, e);
        c.appendChild(g);
        this.attachNodeData(a, g);
        a.hasChildren() && this.createDomElements(g, a.children, !1, a.is_open, e + 1);
      }
      return null;
    };
    a.prototype.attachNodeData = function(a, b) {
      a.element = b;
      return f(b).data("node", a);
    };
    a.prototype.createUl = function(a) {
      if (a) {
        a = "jqtree-tree";
        var b = "tree";
        this.tree_widget.options.rtl && (a += " jqtree-rtl");
      } else {
        a = "", b = "group";
      }
      var c = document.createElement("ul");
      c.className = "jqtree_common " + a;
      c.setAttribute("role", b);
      return c;
    };
    a.prototype.createLi = function(a, b) {
      var c = this.tree_widget.select_node_handler && this.tree_widget.select_node_handler.isNodeSelected(a);
      b = a.isFolder() ? this.createFolderLi(a, b, c) : this.createNodeLi(a, b, c);
      if (this.tree_widget.options.onCreateLi) {
        this.tree_widget.options.onCreateLi(a, f(b));
      }
      return b;
    };
    a.prototype.createFolderLi = function(a, b, c) {
      var d = this.getButtonClasses(a);
      var e = this.getFolderClasses(a, c);
      var f = a.is_open ? this.opened_icon_element : this.closed_icon_element;
      var g = document.createElement("li");
      g.className = "jqtree_common " + e;
      g.setAttribute("role", "presentation");
      var h = document.createElement("div");
      h.className = "jqtree-element jqtree_common";
      h.setAttribute("role", "presentation");
      g.appendChild(h);
      e = document.createElement("a");
      e.className = d;
      e.appendChild(f.cloneNode(!1));
      e.setAttribute("role", "presentation");
      e.setAttribute("aria-hidden", "true");
      this.tree_widget.options.buttonLeft && h.appendChild(e);
      h.appendChild(this.createTitleSpan(a.name, b, c, a.is_open, !0));
      this.tree_widget.options.buttonLeft || h.appendChild(e);
      return g;
    };
    a.prototype.createNodeLi = function(a, b, c) {
      var d = ["jqtree_common"];
      c && d.push("jqtree-selected");
      var e = d.join(" ");
      d = document.createElement("li");
      d.className = e;
      d.setAttribute("role", "presentation");
      e = document.createElement("div");
      e.className = "jqtree-element jqtree_common";
      e.setAttribute("role", "presentation");
      d.appendChild(e);
      e.appendChild(this.createTitleSpan(a.name, b, c, a.is_open, !1));
      return d;
    };
    a.prototype.createTitleSpan = function(a, b, c, e, f) {
      var g = document.createElement("span");
      var h = "jqtree-title jqtree_common";
      f && (h += " jqtree-title-folder");
      g.className = h;
      g.setAttribute("role", "treeitem");
      g.setAttribute("aria-level", b);
      g.setAttribute("aria-selected", d.getBoolString(c));
      g.setAttribute("aria-expanded", d.getBoolString(e));
      c && g.setAttribute("tabindex", 0);
      g.innerHTML = this.escapeIfNecessary(a);
      return g;
    };
    a.prototype.getButtonClasses = function(a) {
      var b = ["jqtree-toggler", "jqtree_common"];
      a.is_open || b.push("jqtree-closed");
      this.tree_widget.options.buttonLeft ? b.push("jqtree-toggler-left") : b.push("jqtree-toggler-right");
      return b.join(" ");
    };
    a.prototype.getFolderClasses = function(a, b) {
      var c = ["jqtree-folder"];
      a.is_open || c.push("jqtree-closed");
      b && c.push("jqtree-selected");
      a.is_loading && c.push("jqtree-loading");
      return c.join(" ");
    };
    a.prototype.escapeIfNecessary = function(a) {
      return this.tree_widget.options.autoEscape ? e(a) : a;
    };
    a.prototype.createButtonElement = function(a) {
      if ("string" === typeof a) {
        var b = document.createElement("div");
        b.innerHTML = a;
        return document.createTextNode(b.innerHTML);
      }
      return f(a)[0];
    };
    return a;
  }();
  b.exports = a;
}, {"./node_element":6, "./util":12}], 3:[function(a, b, c) {
  var d = function(a, b) {
    return function() {
      return a.apply(b, arguments);
    };
  };
  var e = jQuery;
  a = function() {
    function a(a) {
      this.selectNode = d(this.selectNode, this);
      this.tree_widget = a;
      a.options.keyboardSupport && e(document).bind("keydown.jqtree", e.proxy(this.handleKeyDown, this));
    }
    a.prototype.deinit = function() {
      return e(document).unbind("keydown.jqtree");
    };
    a.prototype.moveDown = function() {
      var a;
      return (a = this.tree_widget.getSelectedNode()) ? this.selectNode(a.getNextNode()) : !1;
    };
    a.prototype.moveUp = function() {
      var a;
      return (a = this.tree_widget.getSelectedNode()) ? this.selectNode(a.getPreviousNode()) : !1;
    };
    a.prototype.moveRight = function() {
      var a;
      if ((a = this.tree_widget.getSelectedNode()) && a.isFolder()) {
        if (a.is_open) {
          return this.selectNode(a.getNextNode());
        }
        this.tree_widget.openNode(a);
        return !1;
      }
      return !0;
    };
    a.prototype.moveLeft = function() {
      var a;
      return (a = this.tree_widget.getSelectedNode()) ? a.isFolder() && a.is_open ? (this.tree_widget.closeNode(a), !1) : this.selectNode(a.getParent()) : !0;
    };
    a.prototype.handleKeyDown = function(a) {
      if (!this.tree_widget.options.keyboardSupport || e(document.activeElement).is("textarea,input,select") || !this.tree_widget.getSelectedNode()) {
        return !0;
      }
      switch(a.which) {
        case 40:
          return this.moveDown();
        case 38:
          return this.moveUp();
        case 39:
          return this.moveRight();
        case 37:
          return this.moveLeft();
      }
      return !0;
    };
    a.prototype.selectNode = function(a) {
      return a ? (this.tree_widget.selectNode(a), this.tree_widget.scroll_handler && !this.tree_widget.scroll_handler.isScrolledIntoView(e(a.element).find(".jqtree-element")) && this.tree_widget.scrollToNode(a), !1) : !0;
    };
    return a;
  }();
  b.exports = a;
}, {}], 4:[function(a, b, c) {
  var d = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var d in b) {
      e.call(b, d) && (a[d] = b[d]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, e = {}.hasOwnProperty;
  a = a("./simple.widget");
  var f = jQuery;
  a = function(a) {
    function b() {
      return b.__super__.constructor.apply(this, arguments);
    }
    d(b, a);
    b.is_mouse_handled = !1;
    b.prototype._init = function() {
      this.$el.bind("mousedown.mousewidget", f.proxy(this._mouseDown, this));
      this.$el.bind("touchstart.mousewidget", f.proxy(this._touchStart, this));
      this.is_mouse_started = !1;
      this.mouse_delay = 0;
      this._mouse_delay_timer = null;
      this._is_mouse_delay_met = !0;
      return this.mouse_down_info = null;
    };
    b.prototype._deinit = function() {
      this.$el.unbind("mousedown.mousewidget");
      this.$el.unbind("touchstart.mousewidget");
      var a = f(document);
      a.unbind("mousemove.mousewidget");
      return a.unbind("mouseup.mousewidget");
    };
    b.prototype._mouseDown = function(a) {
      var b;
      if (1 === a.which) {
        return (b = this._handleMouseDown(a, this._getPositionInfo(a))) && a.preventDefault(), b;
      }
    };
    b.prototype._handleMouseDown = function(a, c) {
      if (!b.is_mouse_handled && (this.is_mouse_started && this._handleMouseUp(c), this.mouse_down_info = c, this._mouseCapture(c))) {
        return this._handleStartMouse(), this.is_mouse_handled = !0;
      }
    };
    b.prototype._handleStartMouse = function() {
      var a = f(document);
      a.bind("mousemove.mousewidget", f.proxy(this._mouseMove, this));
      a.bind("touchmove.mousewidget", f.proxy(this._touchMove, this));
      a.bind("mouseup.mousewidget", f.proxy(this._mouseUp, this));
      a.bind("touchend.mousewidget", f.proxy(this._touchEnd, this));
      if (this.mouse_delay) {
        return this._startMouseDelayTimer();
      }
    };
    b.prototype._startMouseDelayTimer = function() {
      this._mouse_delay_timer && clearTimeout(this._mouse_delay_timer);
      this._mouse_delay_timer = setTimeout(function(a) {
        return function() {
          return a._is_mouse_delay_met = !0;
        };
      }(this), this.mouse_delay);
      return this._is_mouse_delay_met = !1;
    };
    b.prototype._mouseMove = function(a) {
      return this._handleMouseMove(a, this._getPositionInfo(a));
    };
    b.prototype._handleMouseMove = function(a, b) {
      if (this.is_mouse_started) {
        return this._mouseDrag(b), a.preventDefault();
      }
      if (this.mouse_delay && !this._is_mouse_delay_met) {
        return !0;
      }
      (this.is_mouse_started = !1 !== this._mouseStart(this.mouse_down_info)) ? this._mouseDrag(b) : this._handleMouseUp(b);
      return !this.is_mouse_started;
    };
    b.prototype._getPositionInfo = function(a) {
      return {page_x:a.pageX, page_y:a.pageY, target:a.target, original_event:a};
    };
    b.prototype._mouseUp = function(a) {
      return this._handleMouseUp(this._getPositionInfo(a));
    };
    b.prototype._handleMouseUp = function(a) {
      var b = f(document);
      b.unbind("mousemove.mousewidget");
      b.unbind("touchmove.mousewidget");
      b.unbind("mouseup.mousewidget");
      b.unbind("touchend.mousewidget");
      this.is_mouse_started && (this.is_mouse_started = !1, this._mouseStop(a));
    };
    b.prototype._mouseCapture = function(a) {
      return !0;
    };
    b.prototype._mouseStart = function(a) {
      return null;
    };
    b.prototype._mouseDrag = function(a) {
      return null;
    };
    b.prototype._mouseStop = function(a) {
      return null;
    };
    b.prototype.setMouseDelay = function(a) {
      return this.mouse_delay = a;
    };
    b.prototype._touchStart = function(a) {
      if (!(1 < a.originalEvent.touches.length)) {
        return this._handleMouseDown(a, this._getPositionInfo(a.originalEvent.changedTouches[0]));
      }
    };
    b.prototype._touchMove = function(a) {
      if (!(1 < a.originalEvent.touches.length)) {
        return this._handleMouseMove(a, this._getPositionInfo(a.originalEvent.changedTouches[0]));
      }
    };
    b.prototype._touchEnd = function(a) {
      if (!(1 < a.originalEvent.touches.length)) {
        return this._handleMouseUp(this._getPositionInfo(a.originalEvent.changedTouches[0]));
      }
    };
    return b;
  }(a);
  b.exports = a;
}, {"./simple.widget":10}], 5:[function(a, b, c) {
  var d = jQuery;
  var e = {getName:function(a) {
    return e.strings[a - 1];
  }, nameToIndex:function(a) {
    var b, c;
    var d = b = 1;
    for (c = e.strings.length; 1 <= c ? b <= c : b >= c; d = 1 <= c ? ++b : --b) {
      if (e.strings[d - 1] === a) {
        return d;
      }
    }
    return 0;
  }, BEFORE:1, AFTER:2, INSIDE:3, NONE:4, strings:["before", "after", "inside", "none"]};
  a = function() {
    function a(b, c, d) {
      null == c && (c = !1);
      null == d && (d = a);
      this.name = "";
      this.setData(b);
      this.children = [];
      this.parent = null;
      c && (this.id_mapping = {}, this.tree = this, this.node_class = d);
    }
    a.prototype.setData = function(a) {
      var b;
      var c = function(a) {
        return function(b) {
          if (null !== b) {
            return a.name = b;
          }
        };
      }(this);
      if ("object" !== typeof a) {
        c(a);
      } else {
        for (b in a) {
          var d = a[b];
          "label" === b ? c(d) : "children" !== b && (this[b] = d);
        }
      }
      return null;
    };
    a.prototype.initFromData = function(a) {
      var b = function(a) {
        return function(b) {
          a.setData(b);
          if (b.children) {
            return c(b.children);
          }
        };
      }(this);
      var c = function(a) {
        return function(b) {
          var c;
          var d = 0;
          for (c = b.length; d < c; d++) {
            var e = b[d];
            var f = new a.tree.node_class("");
            f.initFromData(e);
            a.addChild(f);
          }
          return null;
        };
      }(this);
      b(a);
      return null;
    };
    a.prototype.loadFromData = function(a) {
      var b;
      this.removeChildren();
      var c = 0;
      for (b = a.length; c < b; c++) {
        var d = a[c];
        var e = new this.tree.node_class(d);
        this.addChild(e);
        "object" === typeof d && d.children && e.loadFromData(d.children);
      }
      return null;
    };
    a.prototype.addChild = function(a) {
      this.children.push(a);
      return a._setParent(this);
    };
    a.prototype.addChildAtPosition = function(a, b) {
      this.children.splice(b, 0, a);
      return a._setParent(this);
    };
    a.prototype._setParent = function(a) {
      this.parent = a;
      this.tree = a.tree;
      return this.tree.addNodeToIndex(this);
    };
    a.prototype.removeChild = function(a) {
      a.removeChildren();
      return this._removeChild(a);
    };
    a.prototype._removeChild = function(a) {
      this.children.splice(this.getChildIndex(a), 1);
      return this.tree.removeNodeFromIndex(a);
    };
    a.prototype.getChildIndex = function(a) {
      return d.inArray(a, this.children);
    };
    a.prototype.hasChildren = function() {
      return 0 !== this.children.length;
    };
    a.prototype.isFolder = function() {
      return this.hasChildren() || this.load_on_demand;
    };
    a.prototype.iterate = function(a) {
      var b = function(c, d) {
        var e, f;
        if (c.children) {
          var g = c.children;
          var h = 0;
          for (e = g.length; h < e; h++) {
            c = g[h], (f = a(c, d)) && c.hasChildren() && b(c, d + 1);
          }
          return null;
        }
      };
      b(this, 0);
      return null;
    };
    a.prototype.moveNode = function(a, b, c) {
      if (!a.isParentOf(b)) {
        a.parent._removeChild(a);
        if (c === e.AFTER) {
          return b.parent.addChildAtPosition(a, b.parent.getChildIndex(b) + 1);
        }
        if (c === e.BEFORE) {
          return b.parent.addChildAtPosition(a, b.parent.getChildIndex(b));
        }
        if (c === e.INSIDE) {
          return b.addChildAtPosition(a, 0);
        }
      }
    };
    a.prototype.getData = function(a) {
      null == a && (a = !1);
      var b = function(a) {
        var c, d;
        var e = [];
        var f = 0;
        for (d = a.length; f < d; f++) {
          var g = a[f];
          var h = {};
          for (c in g) {
            var l = g[c];
            "parent" !== c && "children" !== c && "element" !== c && "tree" !== c && Object.prototype.hasOwnProperty.call(g, c) && (h[c] = l);
          }
          g.hasChildren() && (h.children = b(g.children));
          e.push(h);
        }
        return e;
      };
      return a ? b([this]) : b(this.children);
    };
    a.prototype.getNodeByName = function(a) {
      return this.getNodeByCallback(function(b) {
        return b.name === a;
      });
    };
    a.prototype.getNodeByCallback = function(a) {
      var b = null;
      this.iterate(function(c) {
        return a(c) ? (b = c, !1) : !0;
      });
      return b;
    };
    a.prototype.addAfter = function(a) {
      if (this.parent) {
        var b = new this.tree.node_class(a);
        var c = this.parent.getChildIndex(this);
        this.parent.addChildAtPosition(b, c + 1);
        "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
        return b;
      }
      return null;
    };
    a.prototype.addBefore = function(a) {
      if (this.parent) {
        var b = new this.tree.node_class(a);
        var c = this.parent.getChildIndex(this);
        this.parent.addChildAtPosition(b, c);
        "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
        return b;
      }
      return null;
    };
    a.prototype.addParent = function(a) {
      var b;
      if (this.parent) {
        var c = new this.tree.node_class(a);
        c._setParent(this.tree);
        var d = this.parent;
        var e = d.children;
        var f = 0;
        for (b = e.length; f < b; f++) {
          a = e[f], c.addChild(a);
        }
        d.children = [];
        d.addChild(c);
        return c;
      }
      return null;
    };
    a.prototype.remove = function() {
      if (this.parent) {
        return this.parent.removeChild(this), this.parent = null;
      }
    };
    a.prototype.append = function(a) {
      var b = new this.tree.node_class(a);
      this.addChild(b);
      "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
      return b;
    };
    a.prototype.prepend = function(a) {
      var b = new this.tree.node_class(a);
      this.addChildAtPosition(b, 0);
      "object" === typeof a && a.children && a.children.length && b.loadFromData(a.children);
      return b;
    };
    a.prototype.isParentOf = function(a) {
      for (a = a.parent; a;) {
        if (a === this) {
          return !0;
        }
        a = a.parent;
      }
      return !1;
    };
    a.prototype.getLevel = function() {
      var a;
      var b = 0;
      for (a = this; a.parent;) {
        b += 1, a = a.parent;
      }
      return b;
    };
    a.prototype.getNodeById = function(a) {
      return this.id_mapping[a];
    };
    a.prototype.addNodeToIndex = function(a) {
      if (null != a.id) {
        return this.id_mapping[a.id] = a;
      }
    };
    a.prototype.removeNodeFromIndex = function(a) {
      if (null != a.id) {
        return delete this.id_mapping[a.id];
      }
    };
    a.prototype.removeChildren = function() {
      this.iterate(function(a) {
        return function(b) {
          a.tree.removeNodeFromIndex(b);
          return !0;
        };
      }(this));
      return this.children = [];
    };
    a.prototype.getPreviousSibling = function() {
      if (this.parent) {
        var a = this.parent.getChildIndex(this) - 1;
        return 0 <= a ? this.parent.children[a] : null;
      }
      return null;
    };
    a.prototype.getNextSibling = function() {
      if (this.parent) {
        var a = this.parent.getChildIndex(this) + 1;
        return a < this.parent.children.length ? this.parent.children[a] : null;
      }
      return null;
    };
    a.prototype.getNodesByProperty = function(a, b) {
      return this.filter(function(c) {
        return c[a] === b;
      });
    };
    a.prototype.filter = function(a) {
      var b = [];
      this.iterate(function(c) {
        a(c) && b.push(c);
        return !0;
      });
      return b;
    };
    a.prototype.getNextNode = function(a) {
      null == a && (a = !0);
      return a && this.hasChildren() && this.is_open ? this.children[0] : this.parent ? (a = this.getNextSibling()) ? a : this.parent.getNextNode(!1) : null;
    };
    a.prototype.getPreviousNode = function() {
      var a;
      return this.parent ? (a = this.getPreviousSibling()) ? a.hasChildren() && a.is_open ? a.getLastChild() : a : this.getParent() : null;
    };
    a.prototype.getParent = function() {
      return this.parent ? this.parent.parent ? this.parent : null : null;
    };
    a.prototype.getLastChild = function() {
      if (this.hasChildren()) {
        var a = this.children[this.children.length - 1];
        return a.hasChildren() && a.is_open ? a.getLastChild() : a;
      }
      return null;
    };
    return a;
  }();
  b.exports = {Node:a, Position:e};
}, {}], 6:[function(a, b, c) {
  var d = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var d in b) {
      e.call(b, d) && (a[d] = b[d]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, e = {}.hasOwnProperty;
  var f = a("./node").Position;
  var g = jQuery;
  c = function() {
    function a(a, b) {
      this.init(a, b);
    }
    a.prototype.init = function(a, b) {
      this.node = a;
      this.tree_widget = b;
      a.element || (a.element = this.tree_widget.element);
      return this.$element = g(a.element);
    };
    a.prototype.getUl = function() {
      return this.$element.children("ul:first");
    };
    a.prototype.getSpan = function() {
      return this.$element.children(".jqtree-element").find("span.jqtree-title");
    };
    a.prototype.getLi = function() {
      return this.$element;
    };
    a.prototype.addDropHint = function(a) {
      return a === f.INSIDE ? new h(this.$element) : new l(this.node, this.$element, a);
    };
    a.prototype.select = function() {
      var a = this.getLi();
      a.addClass("jqtree-selected");
      a.attr("aria-selected", "true");
      return this.getSpan().attr("tabindex", 0);
    };
    a.prototype.deselect = function() {
      var a = this.getLi();
      a.removeClass("jqtree-selected");
      a.attr("aria-selected", "false");
      return this.getSpan().attr("tabindex", -1);
    };
    return a;
  }();
  a = function(a) {
    function b() {
      return b.__super__.constructor.apply(this, arguments);
    }
    d(b, a);
    b.prototype.open = function(a, b) {
      null == b && (b = !0);
      if (!this.node.is_open) {
        this.node.is_open = !0;
        var c = this.getButton();
        c.removeClass("jqtree-closed");
        c.html("");
        c.append(this.tree_widget.renderer.opened_icon_element.cloneNode(!1));
        c = function(b) {
          return function() {
            b.getLi().removeClass("jqtree-closed");
            b.getSpan().attr("aria-expanded", "true");
            a && a(b.node);
            return b.tree_widget._triggerEvent("tree.open", {node:b.node});
          };
        }(this);
        if (b) {
          return this.getUl().slideDown("fast", c);
        }
        this.getUl().show();
        return c();
      }
    };
    b.prototype.close = function(a) {
      null == a && (a = !0);
      if (this.node.is_open) {
        this.node.is_open = !1;
        var b = this.getButton();
        b.addClass("jqtree-closed");
        b.html("");
        b.append(this.tree_widget.renderer.closed_icon_element.cloneNode(!1));
        b = function(a) {
          return function() {
            a.getLi().addClass("jqtree-closed");
            a.getSpan().attr("aria-expanded", "false");
            return a.tree_widget._triggerEvent("tree.close", {node:a.node});
          };
        }(this);
        if (a) {
          return this.getUl().slideUp("fast", b);
        }
        this.getUl().hide();
        return b();
      }
    };
    b.prototype.getButton = function() {
      return this.$element.children(".jqtree-element").find("a.jqtree-toggler");
    };
    b.prototype.addDropHint = function(a) {
      return this.node.is_open || a !== f.INSIDE ? new l(this.node, this.$element, a) : new h(this.$element);
    };
    return b;
  }(c);
  var h = function() {
    function a(a) {
      var b = a.children(".jqtree-element");
      a = a.width() - 4;
      this.$hint = g('<span class="jqtree-border"></span>');
      b.append(this.$hint);
      this.$hint.css({width:a, height:b.outerHeight() - 4});
    }
    a.prototype.remove = function() {
      return this.$hint.remove();
    };
    return a;
  }();
  var l = function() {
    function a(a, b, c) {
      this.$element = b;
      this.node = a;
      this.$ghost = g('<li class="jqtree_common jqtree-ghost"><span class="jqtree_common jqtree-circle"></span><span class="jqtree_common jqtree-line"></span></li>');
      c === f.AFTER ? this.moveAfter() : c === f.BEFORE ? this.moveBefore() : c === f.INSIDE && (a.isFolder() && a.is_open ? this.moveInsideOpenFolder() : this.moveInside());
    }
    a.prototype.remove = function() {
      return this.$ghost.remove();
    };
    a.prototype.moveAfter = function() {
      return this.$element.after(this.$ghost);
    };
    a.prototype.moveBefore = function() {
      return this.$element.before(this.$ghost);
    };
    a.prototype.moveInsideOpenFolder = function() {
      return g(this.node.children[0].element).before(this.$ghost);
    };
    a.prototype.moveInside = function() {
      this.$element.after(this.$ghost);
      return this.$ghost.addClass("jqtree-inside");
    };
    return a;
  }();
  b.exports = {BorderDropHint:h, FolderElement:a, GhostDropHint:l, NodeElement:c};
}, {"./node":5}], 7:[function(a, b, c) {
  var d = a("./util").isInt;
  var e = jQuery;
  a = function() {
    function a(a) {
      this.tree_widget = a;
    }
    a.prototype.saveState = function() {
      var a = JSON.stringify(this.getState());
      if (this.tree_widget.options.onSetStateFromStorage) {
        return this.tree_widget.options.onSetStateFromStorage(a);
      }
      if (this.supportsLocalStorage()) {
        return localStorage.setItem(this.getCookieName(), a);
      }
      if (e.cookie) {
        return e.cookie.raw = !0, e.cookie(this.getCookieName(), a, {path:"/"});
      }
    };
    a.prototype.getStateFromStorage = function() {
      var a;
      return (a = this._loadFromStorage()) ? this._parseState(a) : null;
    };
    a.prototype._parseState = function(a) {
      (a = e.parseJSON(a)) && a.selected_node && d(a.selected_node) && (a.selected_node = [a.selected_node]);
      return a;
    };
    a.prototype._loadFromStorage = function() {
      return this.tree_widget.options.onGetStateFromStorage ? this.tree_widget.options.onGetStateFromStorage() : this.supportsLocalStorage() ? localStorage.getItem(this.getCookieName()) : e.cookie ? (e.cookie.raw = !0, e.cookie(this.getCookieName())) : null;
    };
    a.prototype.getState = function() {
      var a = function(a) {
        return function() {
          var b = [];
          a.tree_widget.tree.iterate(function(a) {
            a.is_open && a.id && a.hasChildren() && b.push(a.id);
            return !0;
          });
          return b;
        };
      }(this);
      var b = function(a) {
        return function() {
          var b;
          return function() {
            var a;
            var c = this.tree_widget.getSelectedNodes();
            var d = [];
            var e = 0;
            for (a = c.length; e < a; e++) {
              b = c[e], d.push(b.id);
            }
            return d;
          }.call(a);
        };
      }(this);
      return {open_nodes:a(), selected_node:b()};
    };
    a.prototype.setInitialState = function(a) {
      if (a) {
        var b = this._openInitialNodes(a.open_nodes);
        this._selectInitialNodes(a.selected_node);
        return b;
      }
      return !1;
    };
    a.prototype._openInitialNodes = function(a) {
      var b;
      var c = !1;
      var d = 0;
      for (b = a.length; d < b; d++) {
        var e = a[d];
        if (e = this.tree_widget.getNodeById(e)) {
          e.load_on_demand ? c = !0 : e.is_open = !0;
        }
      }
      return c;
    };
    a.prototype._selectInitialNodes = function(a) {
      var b, c;
      var d = c = 0;
      for (b = a.length; d < b; d++) {
        var e = a[d];
        if (e = this.tree_widget.getNodeById(e)) {
          c += 1, this.tree_widget.select_node_handler.addToSelection(e);
        }
      }
      return 0 !== c;
    };
    a.prototype.setInitialStateOnDemand = function(a, b) {
      return a ? this._setInitialStateOnDemand(a.open_nodes, a.selected_node, b) : b();
    };
    a.prototype._setInitialStateOnDemand = function(a, b, c) {
      var d = 0;
      var e = function(e) {
        return function() {
          var g, h;
          var m = [];
          var l = 0;
          for (g = a.length; l < g; l++) {
            var n = a[l];
            (h = e.tree_widget.getNodeById(n)) ? h.is_loading || (h.load_on_demand ? f(h) : e.tree_widget._openNode(h, !1)) : m.push(n);
          }
          a = m;
          e._selectInitialNodes(b) && e.tree_widget._refreshElements();
          if (0 === d) {
            return c();
          }
        };
      }(this);
      var f = function(a) {
        return function(b) {
          d += 1;
          return a.tree_widget._openNode(b, !1, function() {
            --d;
            return e();
          });
        };
      }(this);
      return e();
    };
    a.prototype.getCookieName = function() {
      return "string" === typeof this.tree_widget.options.saveState ? this.tree_widget.options.saveState : "tree";
    };
    a.prototype.supportsLocalStorage = function() {
      null == this._supportsLocalStorage && (this._supportsLocalStorage = function() {
        if ("undefined" === typeof localStorage || null === localStorage) {
          return !1;
        }
        try {
          sessionStorage.setItem("_storage_test", !0), sessionStorage.removeItem("_storage_test");
        } catch (g) {
          return !1;
        }
        return !0;
      }());
      return this._supportsLocalStorage;
    };
    a.prototype.getNodeIdToBeSelected = function() {
      var a;
      return (a = this.getStateFromStorage()) && a.selected_node ? a.selected_node[0] : null;
    };
    return a;
  }();
  b.exports = a;
}, {"./util":12}], 8:[function(a, b, c) {
  var d = jQuery;
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.previous_top = -1;
      this.is_initialized = !1;
    }
    a.prototype._initScrollParent = function() {
      var a = function(a) {
        return function() {
          var b;
          var c = ["overflow", "overflow-y"];
          var e = function(a) {
            var b, e;
            var f = 0;
            for (b = c.length; f < b; f++) {
              var g = c[f];
              if ("auto" === (e = d.css(a, g)) || "scroll" === e) {
                return !0;
              }
            }
            return !1;
          };
          if (e(a.tree_widget.$el[0])) {
            return a.tree_widget.$el;
          }
          var f = a.tree_widget.$el.parents();
          var g = 0;
          for (b = f.length; g < b; g++) {
            var h = f[g];
            if (e(h)) {
              return d(h);
            }
          }
          return null;
        };
      }(this);
      var b = function(a) {
        return function() {
          a.scroll_parent_top = 0;
          return a.$scroll_parent = null;
        };
      }(this);
      "fixed" === this.tree_widget.$el.css("position") && b();
      (a = a()) && a.length && "HTML" !== a[0].tagName ? (this.$scroll_parent = a, this.scroll_parent_top = this.$scroll_parent.offset().top) : b();
      return this.is_initialized = !0;
    };
    a.prototype._ensureInit = function() {
      if (!this.is_initialized) {
        return this._initScrollParent();
      }
    };
    a.prototype.checkScrolling = function() {
      var a;
      this._ensureInit();
      if ((a = this.tree_widget.dnd_handler.hovered_area) && a.top !== this.previous_top) {
        return this.previous_top = a.top, this.$scroll_parent ? this._handleScrollingWithScrollParent(a) : this._handleScrollingWithDocument(a);
      }
    };
    a.prototype._handleScrollingWithScrollParent = function(a) {
      if (20 > this.scroll_parent_top + this.$scroll_parent[0].offsetHeight - a.bottom) {
        return this.$scroll_parent[0].scrollTop += 20, this.tree_widget.refreshHitAreas(), this.previous_top = -1;
      }
      if (20 > a.top - this.scroll_parent_top) {
        return this.$scroll_parent[0].scrollTop -= 20, this.tree_widget.refreshHitAreas(), this.previous_top = -1;
      }
    };
    a.prototype._handleScrollingWithDocument = function(a) {
      if (20 > a.top - d(document).scrollTop()) {
        return d(document).scrollTop(d(document).scrollTop() - 20);
      }
      if (20 > d(window).height() - (a.bottom - d(document).scrollTop())) {
        return d(document).scrollTop(d(document).scrollTop() + 20);
      }
    };
    a.prototype.scrollTo = function(a) {
      this._ensureInit();
      if (this.$scroll_parent) {
        return this.$scroll_parent[0].scrollTop = a;
      }
      var b = this.tree_widget.$el.offset().top;
      return d(document).scrollTop(a + b);
    };
    a.prototype.isScrolledIntoView = function(a) {
      this._ensureInit();
      a = d(a);
      if (this.$scroll_parent) {
        var b = 0;
        var c = this.$scroll_parent.height();
        var e = a.offset().top - this.scroll_parent_top;
      } else {
        b = d(window).scrollTop(), c = b + d(window).height(), e = a.offset().top;
      }
      return e + a.height() <= c && e >= b;
    };
    return a;
  }();
  b.exports = a;
}, {}], 9:[function(a, b, c) {
  a = function() {
    function a(a) {
      this.tree_widget = a;
      this.clear();
    }
    a.prototype.getSelectedNode = function() {
      var a = this.getSelectedNodes();
      return a.length ? a[0] : !1;
    };
    a.prototype.getSelectedNodes = function() {
      var a, b;
      if (this.selected_single_node) {
        return [this.selected_single_node];
      }
      var c = [];
      for (a in this.selected_nodes) {
        (b = this.tree_widget.getNodeById(a)) && c.push(b);
      }
      return c;
    };
    a.prototype.getSelectedNodesUnder = function(a) {
      var b, c;
      if (this.selected_single_node) {
        return a.isParentOf(this.selected_single_node) ? [this.selected_single_node] : [];
      }
      var d = [];
      for (b in this.selected_nodes) {
        (c = this.tree_widget.getNodeById(b)) && a.isParentOf(c) && d.push(c);
      }
      return d;
    };
    a.prototype.isNodeSelected = function(a) {
      return a ? a.id ? this.selected_nodes[a.id] ? !0 : !1 : this.selected_single_node ? this.selected_single_node.element === a.element : !1 : !1;
    };
    a.prototype.clear = function() {
      this.selected_nodes = {};
      return this.selected_single_node = null;
    };
    a.prototype.removeFromSelection = function(a, b) {
      null == b && (b = !1);
      if (a.id) {
        if (delete this.selected_nodes[a.id], b) {
          return a.iterate(function(b) {
            return function(c) {
              delete b.selected_nodes[a.id];
              return !0;
            };
          }(this));
        }
      } else {
        if (this.selected_single_node && a.element === this.selected_single_node.element) {
          return this.selected_single_node = null;
        }
      }
    };
    a.prototype.addToSelection = function(a) {
      return a.id ? this.selected_nodes[a.id] = !0 : this.selected_single_node = a;
    };
    return a;
  }();
  b.exports = a;
}, {}], 10:[function(a, b, c) {
  var d = [].slice;
  var e = jQuery;
  a = function() {
    function a(a, b) {
      this.$el = e(a);
      this.options = e.extend({}, this.defaults, b);
    }
    a.prototype.defaults = {};
    a.prototype.destroy = function() {
      return this._deinit();
    };
    a.prototype._init = function() {
      return null;
    };
    a.prototype._deinit = function() {
      return null;
    };
    a.register = function(b, c) {
      var f = function() {
        return "simple_widget_" + c;
      };
      var g = function(b, c) {
        return (b = e.data(b, c)) && b instanceof a ? b : null;
      };
      var h = function(a, c) {
        var d;
        var h = f();
        var m = 0;
        for (d = a.length; m < d; m++) {
          var l = a[m];
          var r = g(l, h);
          r || (r = new b(l, c), e.data(l, h) || e.data(l, h, r), r._init());
        }
        return a;
      };
      var q = function(a) {
        var b, c;
        var d = f();
        var h = [];
        var m = 0;
        for (b = a.length; m < b; m++) {
          var l = a[m];
          (c = g(l, d)) && c.destroy();
          h.push(e.removeData(l, d));
        }
        return h;
      };
      var m = function(b, c, d) {
        var g, h;
        var m = null;
        var l = 0;
        for (g = b.length; l < g; l++) {
          var r = b[l];
          (r = e.data(r, f())) && r instanceof a && (h = r[c]) && "function" === typeof h && (m = h.apply(r, d));
        }
        return m;
      };
      return e.fn[c] = function() {
        var a = arguments[0];
        var c = 2 <= arguments.length ? d.call(arguments, 1) : [];
        if (void 0 === a || "object" === typeof a) {
          return h(this, a);
        }
        if ("string" === typeof a && "_" !== a[0]) {
          return "destroy" === a ? q(this) : "get_widget_class" === a ? b : m(this, a, c);
        }
      };
    };
    return a;
  }();
  b.exports = a;
}, {}], 11:[function(a, b, c) {
  var d = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var d in b) {
      e.call(b, d) && (a[d] = b[d]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, e = {}.hasOwnProperty;
  var f = a("./version");
  var g = a("./drag_and_drop_handler");
  var h = a("./elements_renderer");
  var l = a("./key_handler");
  c = a("./mouse.widget");
  var n = a("./save_state_handler");
  var p = a("./scroll_handler");
  var q = a("./select_node_handler");
  b = a("./simple.widget");
  var m = a("./node");
  var r = m.Node;
  var u = m.Position;
  var v = a("./util");
  var A = v.isFunction;
  a = a("./node_element");
  var C = a.BorderDropHint;
  var B = a.FolderElement;
  var H = a.GhostDropHint;
  var z = a.NodeElement;
  var D = g.DragAndDropHandler;
  var F = g.DragElement;
  var K = g.HitAreasGenerator;
  var I = jQuery;
  a = function(a) {
    function b() {
      return b.__super__.constructor.apply(this, arguments);
    }
    d(b, a);
    b.prototype.BorderDropHint = C;
    b.prototype.DragElement = F;
    b.prototype.DragAndDropHandler = D;
    b.prototype.ElementsRenderer = h;
    b.prototype.GhostDropHint = H;
    b.prototype.HitAreasGenerator = K;
    b.prototype.Node = r;
    b.prototype.SaveStateHandler = n;
    b.prototype.ScrollHandler = p;
    b.prototype.SelectNodeHandler = q;
    b.prototype.defaults = {autoOpen:!1, saveState:!1, dragAndDrop:!1, selectable:!0, useContextMenu:!0, onCanSelectNode:null, onSetStateFromStorage:null, onGetStateFromStorage:null, onCreateLi:null, onIsMoveHandle:null, onCanMove:null, onCanMoveTo:null, onLoadFailed:null, autoEscape:!0, dataUrl:null, closedIcon:null, openedIcon:"&#x25bc;", slide:!0, nodeClass:r, dataFilter:null, keyboardSupport:!0, openFolderDelay:500, rtl:null, onDragMove:null, onDragStop:null, buttonLeft:!0, onLoading:null};
    b.prototype.toggle = function(a, b) {
      null == b && (b = null);
      null === b && (b = this.options.slide);
      a.is_open ? this.closeNode(a, b) : this.openNode(a, b);
      return this.element;
    };
    b.prototype.getTree = function() {
      return this.tree;
    };
    b.prototype.selectNode = function(a) {
      this._selectNode(a, !1);
      return this.element;
    };
    b.prototype._selectNode = function(a, b) {
      null == b && (b = !1);
      if (this.select_node_handler) {
        var c = function(b) {
          return function() {
            return b.options.onCanSelectNode ? b.options.selectable && b.options.onCanSelectNode(a) : b.options.selectable;
          };
        }(this);
        var d = function(b) {
          return function() {
            var c;
            if ((c = a.parent) && c.parent && !c.is_open) {
              return b.openNode(c, !1);
            }
          };
        }(this);
        var e = function(a) {
          return function() {
            if (a.options.saveState) {
              return a.save_state_handler.saveState();
            }
          };
        }(this);
        if (!a) {
          this._deselectCurrentNode(), e();
        } else {
          if (c()) {
            return this.select_node_handler.isNodeSelected(a) ? b && (this._deselectCurrentNode(), this._triggerEvent("tree.select", {node:null, previous_node:a})) : (b = this.getSelectedNode(), this._deselectCurrentNode(), this.addToSelection(a), this._triggerEvent("tree.select", {node:a, deselected_node:b}), d()), e();
          }
        }
      }
    };
    b.prototype.getSelectedNode = function() {
      return this.select_node_handler ? this.select_node_handler.getSelectedNode() : null;
    };
    b.prototype.toJson = function() {
      return JSON.stringify(this.tree.getData());
    };
    b.prototype.loadData = function(a, b) {
      this._loadData(a, b);
      return this.element;
    };
    b.prototype.loadDataFromUrl = function(a, b, c) {
      "string" === I.type(a) ? this._loadDataFromUrl(a, b, c) : this._loadDataFromUrl(null, a, b);
      return this.element;
    };
    b.prototype.reload = function(a) {
      this._loadDataFromUrl(null, null, a);
      return this.element;
    };
    b.prototype._loadDataFromUrl = function(a, b, c) {
      var d = null;
      var e = function(a) {
        return function() {
          d = b ? I(b.element) : a.element;
          d.addClass("jqtree-loading");
          return a._notifyLoading(!0, b, d);
        };
      }(this);
      var f = function(a) {
        return function() {
          if (d) {
            return d.removeClass("jqtree-loading"), a._notifyLoading(!1, b, d);
          }
        };
      }(this);
      var g = function() {
        if ("string" === I.type(a)) {
          return {url:a};
        }
        a.method || (a.method = "get");
        return a;
      };
      var h = function(a) {
        return function(d) {
          f();
          a._loadData(d, b);
          if (c && I.isFunction(c)) {
            return c();
          }
        };
      }(this);
      var m = function(a) {
        return function(b) {
          var c = I.isArray(b) || "object" === typeof b ? b : null != c ? I.parseJSON(b) : [];
          a.options.dataFilter && (c = a.options.dataFilter(c));
          return h(c);
        };
      }(this);
      var l = function(a) {
        return function(b) {
          f();
          if (a.options.onLoadFailed) {
            return a.options.onLoadFailed(b);
          }
        };
      }(this);
      var r = function() {
        a = g();
        return I.ajax(I.extend({}, a, {method:null != a.method ? a.method.toUpperCase() : "GET", cache:!1, dataType:"json", success:m, error:l}));
      };
      a || (a = this._getDataUrlInfo(b));
      e();
      a ? I.isArray(a) ? h(a) : r() : f();
    };
    b.prototype._loadData = function(a, b) {
      null == b && (b = null);
      var c = function(a) {
        return function() {
          var c;
          if (a.select_node_handler) {
            var d = a.select_node_handler.getSelectedNodesUnder(b);
            var e = 0;
            for (c = d.length; e < c; e++) {
              var f = d[e];
              a.select_node_handler.removeFromSelection(f);
            }
          }
          return null;
        };
      }(this);
      var d = function(c) {
        return function() {
          b.loadFromData(a);
          b.load_on_demand = !1;
          b.is_loading = !1;
          return c._refreshElements(b);
        };
      }(this);
      if (a && (this._triggerEvent("tree.load_data", {tree_data:a}), b ? (c(), d()) : this._initTree(a), this.isDragging())) {
        return this.dnd_handler.refresh();
      }
    };
    b.prototype.getNodeById = function(a) {
      return this.tree.getNodeById(a);
    };
    b.prototype.getNodeByName = function(a) {
      return this.tree.getNodeByName(a);
    };
    b.prototype.getNodesByProperty = function(a, b) {
      return this.tree.getNodesByProperty(a, b);
    };
    b.prototype.getNodeByHtmlElement = function(a) {
      return this._getNode(I(a));
    };
    b.prototype.getNodeByCallback = function(a) {
      return this.tree.getNodeByCallback(a);
    };
    b.prototype.openNode = function(a, b, c) {
      null == b && (b = null);
      null == c && (c = null);
      var d = function(a) {
        return function() {
          if (A(b)) {
            var d = b;
            var e = null;
          } else {
            e = b, d = c;
          }
          null === e && (e = a.options.slide);
          return [e, d];
        };
      }(this)();
      var e = d[0];
      d = d[1];
      a && this._openNode(a, e, d);
      return this.element;
    };
    b.prototype._openNode = function(a, b, c) {
      var d;
      null == b && (b = !0);
      var e = function(a) {
        return function(b, c, d) {
          return (new B(b, a)).open(d, c);
        };
      }(this);
      if (a.isFolder()) {
        if (a.load_on_demand) {
          return this._loadFolderOnDemand(a, b, c);
        }
        for (d = a.parent; d;) {
          d.parent && e(d, !1, null), d = d.parent;
        }
        e(a, b, c);
        return this._saveState();
      }
    };
    b.prototype._loadFolderOnDemand = function(a, b, c) {
      null == b && (b = !0);
      a.is_loading = !0;
      return this._loadDataFromUrl(null, a, function(d) {
        return function() {
          return d._openNode(a, b, c);
        };
      }(this));
    };
    b.prototype.closeNode = function(a, b) {
      null == b && (b = null);
      null === b && (b = this.options.slide);
      a.isFolder() && ((new B(a, this)).close(b), this._saveState());
      return this.element;
    };
    b.prototype.isDragging = function() {
      return this.dnd_handler ? this.dnd_handler.is_dragging : !1;
    };
    b.prototype.refreshHitAreas = function() {
      this.dnd_handler.refresh();
      return this.element;
    };
    b.prototype.addNodeAfter = function(a, b) {
      a = b.addAfter(a);
      this._refreshElements(b.parent);
      return a;
    };
    b.prototype.addNodeBefore = function(a, b) {
      a = b.addBefore(a);
      this._refreshElements(b.parent);
      return a;
    };
    b.prototype.addParentNode = function(a, b) {
      a = b.addParent(a);
      this._refreshElements(a.parent);
      return a;
    };
    b.prototype.removeNode = function(a) {
      var b;
      if (b = a.parent) {
        this.select_node_handler.removeFromSelection(a, !0), a.remove(), this._refreshElements(b);
      }
      return this.element;
    };
    b.prototype.appendNode = function(a, b) {
      b = b || this.tree;
      a = b.append(a);
      this._refreshElements(b);
      return a;
    };
    b.prototype.prependNode = function(a, b) {
      b || (b = this.tree);
      a = b.prepend(a);
      this._refreshElements(b);
      return a;
    };
    b.prototype.updateNode = function(a, b) {
      var c;
      (c = b.id && b.id !== a.id) && this.tree.removeNodeFromIndex(a);
      a.setData(b);
      c && this.tree.addNodeToIndex(a);
      "object" === typeof b && b.children && (a.removeChildren(), b.children.length && a.loadFromData(b.children));
      this.renderer.renderFromNode(a);
      this._selectCurrentNode();
      return this.element;
    };
    b.prototype.moveNode = function(a, b, c) {
      c = u.nameToIndex(c);
      this.tree.moveNode(a, b, c);
      this._refreshElements();
      return this.element;
    };
    b.prototype.getStateFromStorage = function() {
      return this.save_state_handler.getStateFromStorage();
    };
    b.prototype.addToSelection = function(a) {
      a && (this.select_node_handler.addToSelection(a), this._getNodeElementForNode(a).select(), this._saveState());
      return this.element;
    };
    b.prototype.getSelectedNodes = function() {
      return this.select_node_handler.getSelectedNodes();
    };
    b.prototype.isNodeSelected = function(a) {
      return this.select_node_handler.isNodeSelected(a);
    };
    b.prototype.removeFromSelection = function(a) {
      this.select_node_handler.removeFromSelection(a);
      this._getNodeElementForNode(a).deselect();
      this._saveState();
      return this.element;
    };
    b.prototype.scrollToNode = function(a) {
      a = I(a.element).offset().top - this.$el.offset().top;
      this.scroll_handler.scrollTo(a);
      return this.element;
    };
    b.prototype.getState = function() {
      return this.save_state_handler.getState();
    };
    b.prototype.setState = function(a) {
      this.save_state_handler.setInitialState(a);
      this._refreshElements();
      return this.element;
    };
    b.prototype.setOption = function(a, b) {
      this.options[a] = b;
      return this.element;
    };
    b.prototype.moveDown = function() {
      this.key_handler && this.key_handler.moveDown();
      return this.element;
    };
    b.prototype.moveUp = function() {
      this.key_handler && this.key_handler.moveUp();
      return this.element;
    };
    b.prototype.getVersion = function() {
      return f;
    };
    b.prototype._init = function() {
      b.__super__._init.call(this);
      this.element = this.$el;
      this.mouse_delay = 300;
      this.is_initialized = !1;
      this.options.rtl = this._getRtlOption();
      this.options.closedIcon || (this.options.closedIcon = this._getDefaultClosedIcon());
      this.renderer = new h(this);
      null != n ? this.save_state_handler = new n(this) : this.options.saveState = !1;
      null != q && (this.select_node_handler = new q(this));
      null != D ? this.dnd_handler = new D(this) : this.options.dragAndDrop = !1;
      null != p && (this.scroll_handler = new p(this));
      null != l && null != q && (this.key_handler = new l(this));
      this._initData();
      this.element.click(I.proxy(this._click, this));
      this.element.dblclick(I.proxy(this._dblclick, this));
      if (this.options.useContextMenu) {
        return this.element.bind("contextmenu", I.proxy(this._contextmenu, this));
      }
    };
    b.prototype._deinit = function() {
      this.element.empty();
      this.element.unbind();
      this.key_handler && this.key_handler.deinit();
      this.tree = null;
      return b.__super__._deinit.call(this);
    };
    b.prototype._initData = function() {
      return this.options.data ? this._loadData(this.options.data) : this._getDataUrlInfo() ? this._loadDataFromUrl() : this._loadData([]);
    };
    b.prototype._getDataUrlInfo = function(a) {
      var b = this.options.dataUrl || this.element.data("url");
      var c = function(c) {
        return function() {
          var d = {url:b};
          if (a && a.id) {
            var e = {node:a.id};
            d.data = e;
          } else {
            if (e = c._getNodeIdToBeSelected()) {
              e = {selected_node:e}, d.data = e;
            }
          }
          return d;
        };
      }(this);
      return I.isFunction(b) ? b(a) : "string" === I.type(b) ? c() : b;
    };
    b.prototype._getNodeIdToBeSelected = function() {
      return this.options.saveState ? this.save_state_handler.getNodeIdToBeSelected() : null;
    };
    b.prototype._initTree = function(a) {
      var b = function(a) {
        return function() {
          if (!a.is_initialized) {
            return a.is_initialized = !0, a._triggerEvent("tree.init");
          }
        };
      }(this);
      this.tree = new this.options.nodeClass(null, !0, this.options.nodeClass);
      this.select_node_handler && this.select_node_handler.clear();
      this.tree.loadFromData(a);
      a = this._setInitialState();
      this._refreshElements();
      return a ? this._setInitialStateOnDemand(b) : b();
    };
    b.prototype._setInitialState = function() {
      var a = function(a) {
        return function() {
          var b;
          return a.options.saveState && a.save_state_handler && (b = a.save_state_handler.getStateFromStorage()) ? (b = a.save_state_handler.setInitialState(b), [!0, b]) : [!1, !1];
        };
      }(this);
      var b = function(a) {
        return function() {
          if (!1 === a.options.autoOpen) {
            return !1;
          }
          var b = a._getAutoOpenMaxLevel();
          var c = !1;
          a.tree.iterate(function(a, d) {
            return a.load_on_demand ? (c = !0, !1) : a.hasChildren() ? (a.is_open = !0, d !== b) : !1;
          });
          return c;
        };
      }(this);
      var c = a();
      a = c[0];
      c = c[1];
      a || (c = b());
      return c;
    };
    b.prototype._setInitialStateOnDemand = function(a) {
      var b = function(b) {
        return function() {
          var c;
          return b.options.saveState && b.save_state_handler && (c = b.save_state_handler.getStateFromStorage()) ? (b.save_state_handler.setInitialStateOnDemand(c, a), !0) : !1;
        };
      }(this);
      var c = function(b) {
        return function() {
          var c = b._getAutoOpenMaxLevel();
          var d = 0;
          var e = function(a) {
            d += 1;
            return b._openNode(a, !1, function() {
              --d;
              return f();
            });
          };
          var f = function() {
            b.tree.iterate(function(a, d) {
              if (a.load_on_demand) {
                return a.is_loading || e(a), !1;
              }
              b._openNode(a, !1);
              return d !== c;
            });
            if (0 === d) {
              return a();
            }
          };
          return f();
        };
      }(this);
      if (!b()) {
        return c();
      }
    };
    b.prototype._getAutoOpenMaxLevel = function() {
      return !0 === this.options.autoOpen ? -1 : parseInt(this.options.autoOpen);
    };
    b.prototype._refreshElements = function(a) {
      null == a && (a = null);
      this.renderer.render(a);
      return this._triggerEvent("tree.refresh");
    };
    b.prototype._click = function(a) {
      var b;
      if (b = this._getClickTarget(a.target)) {
        if ("button" === b.type) {
          return this.toggle(b.node, this.options.slide), a.preventDefault(), a.stopPropagation();
        }
        if ("label" === b.type && (b = b.node, a = this._triggerEvent("tree.click", {node:b, click_event:a}), !a.isDefaultPrevented())) {
          return this._selectNode(b, !0);
        }
      }
    };
    b.prototype._dblclick = function(a) {
      var b;
      if ((b = this._getClickTarget(a.target)) && "label" === b.type) {
        return this._triggerEvent("tree.dblclick", {node:b.node, click_event:a});
      }
    };
    b.prototype._getClickTarget = function(a) {
      var b = I(a);
      a = b.closest(".jqtree-toggler");
      if (a.length) {
        if (a = this._getNode(a)) {
          return {type:"button", node:a};
        }
      } else {
        if (a = b.closest(".jqtree-element"), a.length && (a = this._getNode(a))) {
          return {type:"label", node:a};
        }
      }
      return null;
    };
    b.prototype._getNode = function(a) {
      a = a.closest("li.jqtree_common");
      return 0 === a.length ? null : a.data("node");
    };
    b.prototype._getNodeElementForNode = function(a) {
      return a.isFolder() ? new B(a, this) : new z(a, this);
    };
    b.prototype._getNodeElement = function(a) {
      return (a = this._getNode(a)) ? this._getNodeElementForNode(a) : null;
    };
    b.prototype._contextmenu = function(a) {
      var b = I(a.target).closest("ul.jqtree-tree .jqtree-element");
      if (b.length && (b = this._getNode(b))) {
        return a.preventDefault(), a.stopPropagation(), this._triggerEvent("tree.contextmenu", {node:b, click_event:a}), !1;
      }
    };
    b.prototype._saveState = function() {
      if (this.options.saveState) {
        return this.save_state_handler.saveState();
      }
    };
    b.prototype._mouseCapture = function(a) {
      return this.options.dragAndDrop ? this.dnd_handler.mouseCapture(a) : !1;
    };
    b.prototype._mouseStart = function(a) {
      return this.options.dragAndDrop ? this.dnd_handler.mouseStart(a) : !1;
    };
    b.prototype._mouseDrag = function(a) {
      return this.options.dragAndDrop ? (a = this.dnd_handler.mouseDrag(a), this.scroll_handler && this.scroll_handler.checkScrolling(), a) : !1;
    };
    b.prototype._mouseStop = function(a) {
      return this.options.dragAndDrop ? this.dnd_handler.mouseStop(a) : !1;
    };
    b.prototype._triggerEvent = function(a, b) {
      a = I.Event(a);
      I.extend(a, b);
      this.element.trigger(a);
      return a;
    };
    b.prototype.testGenerateHitAreas = function(a) {
      this.dnd_handler.current_item = this._getNodeElementForNode(a);
      this.dnd_handler.generateHitAreas();
      return this.dnd_handler.hit_areas;
    };
    b.prototype._selectCurrentNode = function() {
      var a;
      if (a = this.getSelectedNode()) {
        if (a = this._getNodeElementForNode(a)) {
          return a.select();
        }
      }
    };
    b.prototype._deselectCurrentNode = function() {
      var a;
      if (a = this.getSelectedNode()) {
        return this.removeFromSelection(a);
      }
    };
    b.prototype._getDefaultClosedIcon = function() {
      return this.options.rtl ? "&#x25c0;" : "&#x25ba;";
    };
    b.prototype._getRtlOption = function() {
      if (null !== this.options.rtl) {
        return this.options.rtl;
      }
      var a = this.element.data("rtl");
      return null != a && !1 !== a ? !0 : !1;
    };
    b.prototype._notifyLoading = function(a, b, c) {
      if (this.options.onLoading) {
        return this.options.onLoading(a, b, c);
      }
    };
    return b;
  }(c);
  a.getModule = function(a) {
    return {node:m, util:v, drag_and_drop_handler:g}[a];
  };
  b.register(a, "tree");
}, {"./drag_and_drop_handler":1, "./elements_renderer":2, "./key_handler":3, "./mouse.widget":4, "./node":5, "./node_element":6, "./save_state_handler":7, "./scroll_handler":8, "./select_node_handler":9, "./simple.widget":10, "./util":12, "./version":13}], 12:[function(a, b, c) {
  var d = function(a, b) {
    var c, d;
    var e = c = 0;
    for (d = a.length; c < d; e = ++c) {
      var f = a[e];
      if (f === b) {
        return e;
      }
    }
    return -1;
  };
  b.exports = {_indexOf:d, getBoolString:function(a) {
    return a ? "true" : "false";
  }, html_escape:function(a) {
    return ("" + a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;");
  }, indexOf:function(a, b) {
    return a.indexOf ? a.indexOf(b) : d(a, b);
  }, isInt:function(a) {
    return "number" === typeof a && 0 === a % 1;
  }, isFunction:function(a) {
    return "function" === typeof a;
  }};
}, {}], 13:[function(a, b, c) {
  b.exports = "1.3.7";
}, {}]}, {}, [11]);
Polymer({is:"simpl-jqtree", properties:{multiselect:{type:Boolean, value:!1}, selection:{type:Array, notify:!0}, data:{observer:"dataChanged", type:Object}, selectedItem:{notify:!0, type:Object}, jqtree:{notify:!0, type:Object}, cmnode:{notify:!0, type:Object}, contextmenu:{type:Array}, options:{type:String}}, observers:[], behaviors:[StyleScopeBehavior], ready:function() {
}, _createTree:function() {
  var a = clone(this._parseOptions(this.options));
  a.data = this.data;
  this.contextmenu && (a.useContextMenu = !0);
  this.jqtree = $(this.$.jqtree).tree(a);
  this.multiselect && this.jqtree.bind("tree.click", this._multiSelection.bind(this));
  this.jqtree.bind("tree.select", this._itemSelected.bind(this));
  this.contextmenu && (this.jqtree.bind("tree.contextmenu", this._contextMenu.bind(this)), this._contextMenu = a = contextmenu(this.contextmenu), contextmenu.attach($(this.$.contextmenuId), a));
}, dataChanged:function() {
  this.jqtree ? this.jqtree.tree("loadData", this.data) : this._createTree();
}, _contextMenu:function(a) {
  this.cmnode = a.node;
  contextmenu.show(this._contextMenu, a.node.element);
}, _multiSelection:function(a) {
  a.preventDefault();
  a = a.node;
  void 0 == a.id && console.log("The multiple selection functions require that nodes have an id");
  this.jqtree.tree("isNodeSelected", a) ? this.jqtree.tree("removeFromSelection", a) : this.jqtree.tree("addToSelection", a);
}, _itemSelected:function(a) {
  a.node ? (a = a.node, this.selectedItem = {label:a.name, id:a.id}, this.fire("iron-select", {item:this.selectedItem}), this.prevSelectedItem = this.selectedItem) : (this.selectedItem = null, this.fire("iron-deselect", {item:this.prevSelectedItem}));
}, _parseOptions:function(a) {
  if (null == a) {
    return {};
  }
  "string" == typeof a && (a = JSON5.parse(a));
  return a;
}});
Polymer({is:"simpl-jqtree-dropdown", properties:{selectedItem:{observer:"selectedItemChanged", notify:!0, type:Object}}, observers:[], behaviors:[StyleScopeBehavior], ready:function() {
}, attached:function() {
}, selectedItemChanged:function(a) {
  console.log("jqtree.dropdown.selectedItemChanged:", this.selectedItem);
}});
(function(a, b) {
  "object" === typeof exports && "undefined" !== typeof module ? b(require("jquery")) : "function" === typeof define && define.amd ? define(["jquery"], b) : b(a.jQuery);
})(this, function(a) {
  function b(a) {
    return "number" === typeof a && !isNaN(a);
  }
  function c(a) {
    return "undefined" === typeof a;
  }
  function d(a, c) {
    var d = [];
    b(c) && d.push(c);
    return d.slice.apply(a, d);
  }
  function e(a, b) {
    for (var c = arguments.length, e = Array(2 < c ? c - 2 : 0), f = 2; f < c; f++) {
      e[f - 2] = arguments[f];
    }
    return function() {
      for (var c = arguments.length, f = Array(c), g = 0; g < c; g++) {
        f[g] = arguments[g];
      }
      return a.apply(b, e.concat(d(f)));
    };
  }
  function f(b) {
    var c = [];
    a.each(b, function(a) {
      c.push(a);
    });
    return c;
  }
  function g(a) {
    return (a = a.match(/^(https?:)\/\/([^:/?#]+):?(\d*)/i)) && (a[1] !== location.protocol || a[2] !== location.hostname || a[3] !== location.port);
  }
  function h(a) {
    var b = "timestamp=" + (new Date).getTime();
    return a + (-1 === a.indexOf("?") ? "?" : "&") + b;
  }
  function l(a, b) {
    if (a.naturalWidth && !z) {
      b(a.naturalWidth, a.naturalHeight);
    } else {
      var c = document.createElement("img");
      c.onload = function() {
        b(this.width, this.height);
      };
      c.src = a.src;
    }
  }
  function n(a) {
    var c = [], d = a.translateX, e = a.translateY, f = a.rotate, g = a.scaleX;
    a = a.scaleY;
    b(d) && 0 !== d && c.push("translateX(" + d + "px)");
    b(e) && 0 !== e && c.push("translateY(" + e + "px)");
    b(f) && 0 !== f && c.push("rotate(" + f + "deg)");
    b(g) && 1 !== g && c.push("scaleX(" + g + ")");
    b(a) && 1 !== a && c.push("scaleY(" + a + ")");
    return c.length ? c.join(" ") : "none";
  }
  function p(a, b) {
    var c = Math.abs(a.degree) % 180, d = (90 < c ? 180 - c : c) * Math.PI / 180, c = Math.sin(d), d = Math.cos(d), e = a.width, f = a.height;
    a = a.aspectRatio;
    b ? (b = e / (d + c / a), c = b / a) : (b = e * d + f * c, c = e * c + f * d);
    return {width:b, height:c};
  }
  function q(c, d, e) {
    var f = a("<canvas>")[0], g = f.getContext("2d"), h = 0, m = 0, l = d.naturalWidth, r = d.naturalHeight, n = d.rotate, u = d.scaleX;
    d = d.scaleY;
    var q = b(u) && b(d) && (1 !== u || 1 !== d), da = b(n) && 0 !== n, L = da || q, v = l * Math.abs(u || 1), A = r * Math.abs(d || 1), U = void 0, C = void 0;
    q && (U = v / 2, C = A / 2);
    da && (A = p({width:v, height:A, degree:n}), v = A.width, A = A.height, U = v / 2, C = A / 2);
    f.width = v;
    f.height = A;
    e.fillColor && (g.fillStyle = e.fillColor, g.fillRect(0, 0, v, A));
    L && (h = -l / 2, m = -r / 2, g.save(), g.translate(U, C));
    da && g.rotate(n * Math.PI / 180);
    q && g.scale(u, d);
    g.imageSmoothingEnabled = !!e.imageSmoothingEnabled;
    e.imageSmoothingQuality && (g.imageSmoothingQuality = e.imageSmoothingQuality);
    g.drawImage(c, Math.floor(h), Math.floor(m), Math.floor(l), Math.floor(r));
    L && g.restore();
    return f;
  }
  function m(a) {
    a = a.replace(C, "");
    a = atob(a);
    var b = a.length, c = new ArrayBuffer(b), d = new Uint8Array(c), e;
    for (e = 0; e < b; e++) {
      d[e] = a.charCodeAt(e);
    }
    return c;
  }
  function r(b, c) {
    var d = b.pageX;
    b = b.pageY;
    var e = {endX:d, endY:b};
    return c ? e : a.extend({startX:d, startY:b}, e);
  }
  function u(b) {
    var c = a.extend({}, b), d = [];
    a.each(b, function(b, e) {
      delete c[b];
      a.each(c, function(a, b) {
        var c = Math.abs(e.startX - b.startX), f = Math.abs(e.startY - b.startY);
        a = Math.abs(e.endX - b.endX);
        b = Math.abs(e.endY - b.endY);
        c = Math.sqrt(c * c + f * f);
        d.push((Math.sqrt(a * a + b * b) - c) / c);
      });
    });
    d.sort(function(a, b) {
      return Math.abs(a) < Math.abs(b);
    });
    return d[0];
  }
  function v(b) {
    var c = 0, d = 0, e = 0;
    a.each(b, function(a, b) {
      a = b.startY;
      c += b.startX;
      d += a;
      e += 1;
    });
    c /= e;
    d /= e;
    return {pageX:c, pageY:d};
  }
  a = "default" in a ? a["default"] : a;
  var A = {viewMode:0, dragMode:"crop", aspectRatio:NaN, data:null, preview:"", responsive:!0, restore:!0, checkCrossOrigin:!0, checkOrientation:!0, modal:!0, guides:!0, center:!0, highlight:!0, background:!0, autoCrop:!0, autoCropArea:0.8, movable:!0, rotatable:!0, scalable:!0, zoomable:!0, zoomOnTouch:!0, zoomOnWheel:!0, wheelZoomRatio:0.1, cropBoxMovable:!0, cropBoxResizable:!0, toggleDragModeOnDblclick:!0, minCanvasWidth:0, minCanvasHeight:0, minCropBoxWidth:0, minCropBoxHeight:0, minContainerWidth:200, 
  minContainerHeight:100, ready:null, cropstart:null, cropmove:null, cropend:null, crop:null, zoom:null}, C = /^data:.*,/, B = /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i, H = "undefined" !== typeof window ? window.navigator : null, z = H && B.test(H.userAgent), D = String.fromCharCode, F = (B = "undefined" !== typeof window ? window.PointerEvent : null) ? "pointerdown" : "touchstart mousedown", K = B ? "pointermove" : "touchmove mousemove", I = B ? " pointerup pointercancel" : "touchend touchcancel mouseup", 
  W = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/, Z = function() {
    function a(a, b) {
      for (var c = 0; c < b.length; c++) {
        var d = b[c];
        d.enumerable = d.enumerable || !1;
        d.configurable = !0;
        "value" in d && (d.writable = !0);
        Object.defineProperty(a, d.key, d);
      }
    }
    return function(b, c, d) {
      c && a(b.prototype, c);
      d && a(b, d);
      return b;
    };
  }(), ha = function(a) {
    if (Array.isArray(a)) {
      for (var b = 0, c = Array(a.length); b < a.length; b++) {
        c[b] = a[b];
      }
      return c;
    }
    return Array.from(a);
  }, ka = /^data:/, la = /^data:image\/jpeg;base64,/, R = function() {
    function b(c, d) {
      if (!(this instanceof b)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this.$element = a(c);
      this.options = a.extend({}, A, a.isPlainObject(d) && d);
      this.isImg = this.wheeling = this.limited = this.replaced = this.disabled = this.cropped = this.rotated = this.completed = this.ready = this.loaded = !1;
      this.originalUrl = "";
      this.cropBox = this.canvas = null;
      this.pointers = {};
      this.init();
    }
    Z(b, [{key:"init", value:function() {
      var a = this.$element, b = void 0;
      if (a.is("img")) {
        this.isImg = !0;
        this.originalUrl = b = a.attr("src");
        if (!b) {
          return;
        }
        b = a.prop("src");
      } else {
        a.is("canvas") && window.HTMLCanvasElement && (b = a[0].toDataURL());
      }
      this.load(b);
    }}, {key:"trigger", value:function(b, c) {
      b = a.Event(b, c);
      this.$element.trigger(b);
      return b;
    }}, {key:"load", value:function(b) {
      var c = this, d = c.options, e = c.$element;
      if (b) {
        if (c.url = b, c.image = {}, d.checkOrientation && window.ArrayBuffer) {
          if (ka.test(b)) {
            la.test(b) ? c.read(m(b)) : c.clone();
          } else {
            var f = new XMLHttpRequest;
            f.onerror = f.onabort = a.proxy(function() {
              c.clone();
            }, this);
            f.onload = function() {
              c.read(this.response);
            };
            d.checkCrossOrigin && g(b) && e.prop("crossOrigin") && (b = h(b));
            f.open("get", b);
            f.responseType = "arraybuffer";
            f.withCredentials = "use-credentials" === e.prop("crossOrigin");
            f.send();
          }
        } else {
          c.clone();
        }
      }
    }}, {key:"read", value:function(a) {
      var b = this.options;
      var c = new DataView(a);
      var d = c.byteLength, e = void 0, f, g = void 0, h = f = void 0, m;
      if (255 === c.getUint8(0) && 216 === c.getUint8(1)) {
        for (m = 2; m < d;) {
          if (255 === c.getUint8(m) && 225 === c.getUint8(m + 1)) {
            f = m;
            break;
          }
          m++;
        }
      }
      if (f) {
        var d = f + 10, l = f + 4;
        f = "";
        m = l;
        for (l = 4 + l; m < l; m++) {
          f += D(c.getUint8(m));
        }
        "Exif" === f && (f = c.getUint16(d), !(g = 18761 === f) && 19789 !== f || 42 !== c.getUint16(d + 2, g) || (f = c.getUint32(d + 4, g), 8 <= f && (h = d + f)));
      }
      if (h) {
        for (d = c.getUint16(h, g), f = 0; f < d; f++) {
          if (m = h + 12 * f + 2, 274 === c.getUint16(m, g)) {
            m += 8;
            e = c.getUint16(m, g);
            z && c.setUint16(m, 1, g);
            break;
          }
        }
      }
      c = e;
      e = this.image;
      g = 0;
      d = h = 1;
      if (1 < c) {
        a = new Uint8Array(a);
        f = a.length;
        m = "";
        for (l = 0; l < f; l++) {
          m += D(a[l]);
        }
        this.url = "data:image/jpeg;base64," + btoa(m);
        switch(c) {
          case 2:
            h = -1;
            break;
          case 3:
            g = -180;
            break;
          case 4:
            d = -1;
            break;
          case 5:
            g = 90;
            d = -1;
            break;
          case 6:
            g = 90;
            break;
          case 7:
            g = 90;
            h = -1;
            break;
          case 8:
            g = -90;
        }
      }
      b.rotatable && (e.rotate = g);
      b.scalable && (e.scaleX = h, e.scaleY = d);
      this.clone();
    }}, {key:"clone", value:function() {
      var b = this.$element, c = this.url, d = "", e = void 0;
      this.options.checkCrossOrigin && g(c) && ((d = b.prop("crossOrigin")) ? e = c : (d = "anonymous", e = h(c)));
      this.crossOrigin = d;
      this.crossOriginUrl = e;
      var f = document.createElement("img");
      d && (f.crossOrigin = d);
      f.src = e || c;
      this.$clone = c = a(f);
      if (this.isImg) {
        if (b[0].complete) {
          this.start();
        } else {
          b.one("load", a.proxy(this.start, this));
        }
      } else {
        c.one("load", a.proxy(this.start, this)).one("error", a.proxy(this.stop, this)).addClass("cropper-hide").insertAfter(b);
      }
    }}, {key:"start", value:function() {
      var b = this, c = b.$clone, d = b.$element;
      b.isImg || (c.off("error", b.stop), d = c);
      l(d[0], function(c, d) {
        a.extend(b.image, {naturalWidth:c, naturalHeight:d, aspectRatio:c / d});
        b.loaded = !0;
        b.build();
      });
    }}, {key:"stop", value:function() {
      this.$clone.remove();
      this.$clone = null;
    }}, {key:"build", value:function() {
      var b = this, c = b.options, d = b.$element, e = b.$clone, f = void 0, g = void 0, h = void 0;
      b.loaded && (b.ready && b.unbuild(), b.$container = d.parent(), b.$cropper = f = a('<div class="cropper-container"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-action="e"></span><span class="cropper-line line-n" data-action="n"></span><span class="cropper-line line-w" data-action="w"></span><span class="cropper-line line-s" data-action="s"></span><span class="cropper-point point-e" data-action="e"></span><span class="cropper-point point-n" data-action="n"></span><span class="cropper-point point-w" data-action="w"></span><span class="cropper-point point-s" data-action="s"></span><span class="cropper-point point-ne" data-action="ne"></span><span class="cropper-point point-nw" data-action="nw"></span><span class="cropper-point point-sw" data-action="sw"></span><span class="cropper-point point-se" data-action="se"></span></div></div>'), 
      b.$canvas = f.find(".cropper-canvas").append(e), b.$dragBox = f.find(".cropper-drag-box"), b.$cropBox = g = f.find(".cropper-crop-box"), b.$viewBox = f.find(".cropper-view-box"), b.$face = h = g.find(".cropper-face"), d.addClass("cropper-hidden").after(f), b.isImg || e.removeClass("cropper-hide"), b.initPreview(), b.bind(), c.aspectRatio = Math.max(0, c.aspectRatio) || NaN, c.viewMode = Math.max(0, Math.min(3, Math.round(c.viewMode))) || 0, (b.cropped = c.autoCrop) ? c.modal && b.$dragBox.addClass("cropper-modal") : 
      g.addClass("cropper-hidden"), c.guides || g.find(".cropper-dashed").addClass("cropper-hidden"), c.center || g.find(".cropper-center").addClass("cropper-hidden"), c.cropBoxMovable && h.addClass("cropper-move").data("action", "all"), c.highlight || h.addClass("cropper-invisible"), c.background && f.addClass("cropper-bg"), c.cropBoxResizable || g.find(".cropper-line, .cropper-point").addClass("cropper-hidden"), b.setDragMode(c.dragMode), b.render(), b.ready = !0, b.setData(c.data), b.completing = 
      setTimeout(function() {
        if (a.isFunction(c.ready)) {
          d.one("ready", c.ready);
        }
        b.trigger("ready");
        b.trigger("crop", b.getData());
        b.completed = !0;
      }, 0));
    }}, {key:"unbuild", value:function() {
      this.ready && (this.completed || clearTimeout(this.completing), this.completed = this.ready = !1, this.cropBox = this.canvas = this.container = this.initialCropBox = this.initialCanvas = this.initialImage = null, this.unbind(), this.resetPreview(), this.$container = this.$canvas = this.$dragBox = this.$cropBox = this.$viewBox = this.$preview = null, this.$cropper.remove(), this.$cropper = null);
    }}], [{key:"setDefaults", value:function(b) {
      a.extend(A, a.isPlainObject(b) && b);
    }}]);
    return b;
  }();
  a.extend(R.prototype, {render:function() {
    this.initContainer();
    this.initCanvas();
    this.initCropBox();
    this.renderCanvas();
    this.cropped && this.renderCropBox();
  }, initContainer:function() {
    var a = this.options, b = this.$element, c = this.$container, d = this.$cropper;
    d.addClass("cropper-hidden");
    b.removeClass("cropper-hidden");
    d.css(this.container = {width:Math.max(c.width(), Number(a.minContainerWidth) || 200), height:Math.max(c.height(), Number(a.minContainerHeight) || 100)});
    b.addClass("cropper-hidden");
    d.removeClass("cropper-hidden");
  }, initCanvas:function() {
    var b = this.options.viewMode, c = this.container, d = c.width, c = c.height, e = this.image, f = e.naturalWidth, g = e.naturalHeight, h = 90 === Math.abs(e.rotate) % 180, m = h ? g : f, h = h ? f : g, l = m / h, f = d, g = c;
    c * l > d ? 3 === b ? f = c * l : g = d / l : 3 === b ? g = d / l : f = c * l;
    m = {naturalWidth:m, naturalHeight:h, aspectRatio:l, width:f, height:g};
    m.oldLeft = m.left = (d - f) / 2;
    m.oldTop = m.top = (c - g) / 2;
    this.canvas = m;
    this.limited = 1 === b || 2 === b;
    this.limitCanvas(!0, !0);
    this.initialImage = a.extend({}, e);
    this.initialCanvas = a.extend({}, m);
  }, limitCanvas:function(a, b) {
    var c = this.options, d = c.viewMode, e = this.container, f = e.width, e = e.height, g = this.canvas, h = g.aspectRatio, m = this.cropBox, l = this.cropped && m;
    a && (a = Number(c.minCanvasWidth) || 0, c = Number(c.minCanvasHeight) || 0, d && (1 < d ? (a = Math.max(a, f), c = Math.max(c, e), 3 === d && (c * h > a ? a = c * h : c = a / h)) : a ? a = Math.max(a, l ? m.width : 0) : c ? c = Math.max(c, l ? m.height : 0) : l && (a = m.width, c = m.height, c * h > a ? a = c * h : c = a / h)), a && c ? c * h > a ? c = a / h : a = c * h : a ? c = a / h : c && (a = c * h), g.minWidth = a, g.minHeight = c, g.maxWidth = Infinity, g.maxHeight = Infinity);
    b && (d ? (b = f - g.width, c = e - g.height, g.minLeft = Math.min(0, b), g.minTop = Math.min(0, c), g.maxLeft = Math.max(0, b), g.maxTop = Math.max(0, c), l && this.limited && (g.minLeft = Math.min(m.left, m.left + m.width - g.width), g.minTop = Math.min(m.top, m.top + m.height - g.height), g.maxLeft = m.left, g.maxTop = m.top, 2 === d && (g.width >= f && (g.minLeft = Math.min(0, b), g.maxLeft = Math.max(0, b)), g.height >= e && (g.minTop = Math.min(0, c), g.maxTop = Math.max(0, c))))) : (g.minLeft = 
    -g.width, g.minTop = -g.height, g.maxLeft = f, g.maxTop = e));
  }, renderCanvas:function(a) {
    var b = this.canvas, c = this.image, d = c.rotate, e = c.naturalWidth, f = c.naturalHeight;
    if (this.rotated) {
      this.rotated = !1;
      var g = p({width:c.width, height:c.height, degree:d}), h = g.width / g.height;
      if ((c = 1 === c.aspectRatio) || h !== b.aspectRatio) {
        b.left -= (g.width - b.width) / 2;
        b.top -= (g.height - b.height) / 2;
        b.width = g.width;
        b.height = g.height;
        b.aspectRatio = h;
        b.naturalWidth = e;
        b.naturalHeight = f;
        if (c && d % 90 || d % 180) {
          d = p({width:e, height:f, degree:d}), b.naturalWidth = d.width, b.naturalHeight = d.height;
        }
        this.limitCanvas(!0, !1);
      }
    }
    if (b.width > b.maxWidth || b.width < b.minWidth) {
      b.left = b.oldLeft;
    }
    if (b.height > b.maxHeight || b.height < b.minHeight) {
      b.top = b.oldTop;
    }
    b.width = Math.min(Math.max(b.width, b.minWidth), b.maxWidth);
    b.height = Math.min(Math.max(b.height, b.minHeight), b.maxHeight);
    this.limitCanvas(!1, !0);
    b.oldLeft = b.left = Math.min(Math.max(b.left, b.minLeft), b.maxLeft);
    b.oldTop = b.top = Math.min(Math.max(b.top, b.minTop), b.maxTop);
    this.$canvas.css({width:b.width, height:b.height, transform:n({translateX:b.left, translateY:b.top})});
    this.renderImage();
    this.cropped && this.limited && this.limitCropBox(!0, !0);
    a && this.output();
  }, renderImage:function(b) {
    var c = this.canvas, d = this.image, e = void 0;
    d.rotate && (e = p({width:c.width, height:c.height, degree:d.rotate, aspectRatio:d.aspectRatio}, !0));
    a.extend(d, e ? {width:e.width, height:e.height, left:(c.width - e.width) / 2, top:(c.height - e.height) / 2} : {width:c.width, height:c.height, left:0, top:0});
    this.$clone.css({width:d.width, height:d.height, transform:n(a.extend({translateX:d.left, translateY:d.top}, d))});
    b && this.output();
  }, initCropBox:function() {
    var b = this.options, c = this.canvas, d = b.aspectRatio, b = Number(b.autoCropArea) || 0.8, e = {width:c.width, height:c.height};
    d && (c.height * d > c.width ? e.height = e.width / d : e.width = e.height * d);
    this.cropBox = e;
    this.limitCropBox(!0, !0);
    e.width = Math.min(Math.max(e.width, e.minWidth), e.maxWidth);
    e.height = Math.min(Math.max(e.height, e.minHeight), e.maxHeight);
    e.width = Math.max(e.minWidth, e.width * b);
    e.height = Math.max(e.minHeight, e.height * b);
    e.oldLeft = e.left = c.left + (c.width - e.width) / 2;
    e.oldTop = e.top = c.top + (c.height - e.height) / 2;
    this.initialCropBox = a.extend({}, e);
  }, limitCropBox:function(a, b) {
    var c = this.options, d = c.aspectRatio, e = this.container, f = e.width, e = e.height, g = this.canvas, h = this.cropBox, m = this.limited;
    if (a) {
      a = Number(c.minCropBoxWidth) || 0;
      var c = Number(c.minCropBoxHeight) || 0, l = Math.min(f, m ? g.width : f), r = Math.min(e, m ? g.height : e);
      a = Math.min(a, f);
      c = Math.min(c, e);
      d && (a && c ? c * d > a ? c = a / d : a = c * d : a ? c = a / d : c && (a = c * d), r * d > l ? r = l / d : l = r * d);
      h.minWidth = Math.min(a, l);
      h.minHeight = Math.min(c, r);
      h.maxWidth = l;
      h.maxHeight = r;
    }
    b && (m ? (h.minLeft = Math.max(0, g.left), h.minTop = Math.max(0, g.top), h.maxLeft = Math.min(f, g.left + g.width) - h.width, h.maxTop = Math.min(e, g.top + g.height) - h.height) : (h.minLeft = 0, h.minTop = 0, h.maxLeft = f - h.width, h.maxTop = e - h.height));
  }, renderCropBox:function() {
    var a = this.options, b = this.container, c = b.width, b = b.height, d = this.cropBox;
    if (d.width > d.maxWidth || d.width < d.minWidth) {
      d.left = d.oldLeft;
    }
    if (d.height > d.maxHeight || d.height < d.minHeight) {
      d.top = d.oldTop;
    }
    d.width = Math.min(Math.max(d.width, d.minWidth), d.maxWidth);
    d.height = Math.min(Math.max(d.height, d.minHeight), d.maxHeight);
    this.limitCropBox(!1, !0);
    d.oldLeft = d.left = Math.min(Math.max(d.left, d.minLeft), d.maxLeft);
    d.oldTop = d.top = Math.min(Math.max(d.top, d.minTop), d.maxTop);
    a.movable && a.cropBoxMovable && this.$face.data("action", d.width === c && d.height === b ? "move" : "all");
    this.$cropBox.css({width:d.width, height:d.height, transform:n({translateX:d.left, translateY:d.top})});
    this.cropped && this.limited && this.limitCanvas(!0, !0);
    this.disabled || this.output();
  }, output:function() {
    this.preview();
    this.completed && this.trigger("crop", this.getData());
  }});
  a.extend(R.prototype, {initPreview:function() {
    var b = this.crossOrigin, c = b ? this.crossOriginUrl : this.url, d = document.createElement("img");
    b && (d.crossOrigin = b);
    d.src = c;
    d = a(d);
    this.$preview = a(this.options.preview);
    this.$clone2 = d;
    this.$viewBox.html(d);
    this.$preview.each(function(d, e) {
      d = a(e);
      e = document.createElement("img");
      d.data("preview", {width:d.width(), height:d.height(), html:d.html()});
      b && (e.crossOrigin = b);
      e.src = c;
      e.style.cssText = 'display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"';
      d.html(e);
    });
  }, resetPreview:function() {
    this.$preview.each(function(b, c) {
      b = a(c);
      c = b.data("preview");
      b.css({width:c.width, height:c.height}).html(c.html).removeData("preview");
    });
  }, preview:function() {
    var b = this.image, c = this.canvas, d = this.cropBox, e = d.width, f = d.height, g = b.width, h = b.height, m = d.left - c.left - b.left, l = d.top - c.top - b.top;
    this.cropped && !this.disabled && (this.$clone2.css({width:g, height:h, transform:n(a.extend({translateX:-m, translateY:-l}, b))}), this.$preview.each(function(c, d) {
      c = a(d);
      var r = c.data("preview");
      d = r.width;
      var r = r.height, p = d, u = r, q = 1;
      e && (q = d / e, u = f * q);
      f && u > r && (q = r / f, p = e * q, u = r);
      c.css({width:p, height:u}).find("img").css({width:g * q, height:h * q, transform:n(a.extend({translateX:-m * q, translateY:-l * q}, b))});
    }));
  }});
  a.extend(R.prototype, {bind:function() {
    var b = this.options, c = this.$element, d = this.$cropper;
    if (a.isFunction(b.cropstart)) {
      c.on("cropstart", b.cropstart);
    }
    if (a.isFunction(b.cropmove)) {
      c.on("cropmove", b.cropmove);
    }
    if (a.isFunction(b.cropend)) {
      c.on("cropend", b.cropend);
    }
    if (a.isFunction(b.crop)) {
      c.on("crop", b.crop);
    }
    if (a.isFunction(b.zoom)) {
      c.on("zoom", b.zoom);
    }
    d.on(F, e(this.cropStart, this));
    if (b.zoomable && b.zoomOnWheel) {
      d.on("wheel mousewheel DOMMouseScroll", e(this.wheel, this));
    }
    if (b.toggleDragModeOnDblclick) {
      d.on("dblclick", e(this.dblclick, this));
    }
    a(document).on(K, this.onCropMove = e(this.cropMove, this)).on(I, this.onCropEnd = e(this.cropEnd, this));
    if (b.responsive) {
      a(window).on("resize", this.onResize = e(this.resize, this));
    }
  }, unbind:function() {
    var b = this.options, c = this.$element, d = this.$cropper;
    a.isFunction(b.cropstart) && c.off("cropstart", b.cropstart);
    a.isFunction(b.cropmove) && c.off("cropmove", b.cropmove);
    a.isFunction(b.cropend) && c.off("cropend", b.cropend);
    a.isFunction(b.crop) && c.off("crop", b.crop);
    a.isFunction(b.zoom) && c.off("zoom", b.zoom);
    d.off(F, this.cropStart);
    b.zoomable && b.zoomOnWheel && d.off("wheel mousewheel DOMMouseScroll", this.wheel);
    b.toggleDragModeOnDblclick && d.off("dblclick", this.dblclick);
    a(document).off(K, this.onCropMove).off(I, this.onCropEnd);
    b.responsive && a(window).off("resize", this.onResize);
  }});
  a.extend(R.prototype, {resize:function() {
    var b = this, c = b.options, d = b.$container, e = b.container, f = Number(c.minContainerWidth) || 200, g = Number(c.minContainerHeight) || 100;
    if (!b.disabled && e.width !== f && e.height !== g) {
      var h = d.width() / e.width;
      1 === h && d.height() === e.height || function() {
        var d = void 0, e = void 0;
        c.restore && (d = b.getCanvasData(), e = b.getCropBoxData());
        b.render();
        c.restore && (b.setCanvasData(a.each(d, function(a, b) {
          d[a] = b * h;
        })), b.setCropBoxData(a.each(e, function(a, b) {
          e[a] = b * h;
        })));
      }();
    }
  }, dblclick:function() {
    this.disabled || "none" === this.options.dragMode || this.setDragMode(this.$dragBox.hasClass("cropper-crop") ? "move" : "crop");
  }, wheel:function(a) {
    var b = this, c = a.originalEvent || a, d = Number(b.options.wheelZoomRatio) || 0.1;
    if (!b.disabled && (a.preventDefault(), !b.wheeling)) {
      b.wheeling = !0;
      setTimeout(function() {
        b.wheeling = !1;
      }, 50);
      var e = 1;
      c.deltaY ? e = 0 < c.deltaY ? 1 : -1 : c.wheelDelta ? e = -c.wheelDelta / 120 : c.detail && (e = 0 < c.detail ? 1 : -1);
      b.zoom(-e * d, a);
    }
  }, cropStart:function(b) {
    if (!this.disabled) {
      var c = this.options, d = this.pointers, e = b.originalEvent, g = void 0;
      e && e.changedTouches ? a.each(e.changedTouches, function(a, b) {
        d[b.identifier] = r(b);
      }) : d[e && e.pointerId || 0] = r(e || b);
      g = 1 < f(d).length && c.zoomable && c.zoomOnTouch ? "zoom" : a(b.target).data("action");
      W.test(g) && !this.trigger("cropstart", {originalEvent:e, action:g}).isDefaultPrevented() && (b.preventDefault(), this.action = g, this.cropping = !1, "crop" === g && (this.cropping = !0, this.$dragBox.addClass("cropper-modal")));
    }
  }, cropMove:function(b) {
    var c = this.action;
    if (!this.disabled && c) {
      var d = this.pointers, e = b.originalEvent;
      b.preventDefault();
      this.trigger("cropmove", {originalEvent:e, action:c}).isDefaultPrevented() || (e && e.changedTouches ? a.each(e.changedTouches, function(b, c) {
        a.extend(d[c.identifier], r(c, !0));
      }) : a.extend(d[e && e.pointerId || 0], r(e || b, !0)), this.change(b));
    }
  }, cropEnd:function(b) {
    if (!this.disabled) {
      var c = this.action, d = this.pointers, e = b.originalEvent;
      e && e.changedTouches ? a.each(e.changedTouches, function(a, b) {
        delete d[b.identifier];
      }) : delete d[e && e.pointerId || 0];
      c && (b.preventDefault(), f(d).length || (this.action = ""), this.cropping && (this.cropping = !1, this.$dragBox.toggleClass("cropper-modal", this.cropped && this.options.modal)), this.trigger("cropend", {originalEvent:e, action:c}));
    }
  }});
  a.extend(R.prototype, {change:function(b) {
    var c = this.options, d = this.pointers, e = d[f(d)[0]], g = this.container, h = this.canvas, m = this.cropBox, l = this.action, c = c.aspectRatio, r = m.width, n = m.height, p = m.left, q = m.top, v = p + r, A = q + n, C = 0, L = 0, B = g.width, z = g.height, D = !0, H = void 0;
    !c && b.shiftKey && (c = r && n ? r / n : 1);
    this.limited && (C = m.minLeft, L = m.minTop, B = C + Math.min(g.width, h.width, h.left + h.width), z = L + Math.min(g.height, h.height, h.top + h.height));
    var g = e.endX - e.startX, h = e.endY - e.startY;
    if (c) {
      var F = h * c;
      var K = g / c;
    }
    switch(l) {
      case "all":
        p += g;
        q += h;
        break;
      case "e":
        if (0 <= g && (v >= B || c && (q <= L || A >= z))) {
          D = !1;
          break;
        }
        r += g;
        c && (n = r / c, q -= K / 2);
        0 > r && (l = "w", r = 0);
        break;
      case "n":
        if (0 >= h && (q <= L || c && (p <= C || v >= B))) {
          D = !1;
          break;
        }
        n -= h;
        q += h;
        c && (r = n * c, p += F / 2);
        0 > n && (l = "s", n = 0);
        break;
      case "w":
        if (0 >= g && (p <= C || c && (q <= L || A >= z))) {
          D = !1;
          break;
        }
        r -= g;
        p += g;
        c && (n = r / c, q += K / 2);
        0 > r && (l = "e", r = 0);
        break;
      case "s":
        if (0 <= h && (A >= z || c && (p <= C || v >= B))) {
          D = !1;
          break;
        }
        n += h;
        c && (r = n * c, p -= F / 2);
        0 > n && (l = "n", n = 0);
        break;
      case "ne":
        if (c) {
          if (0 >= h && (q <= L || v >= B)) {
            D = !1;
            break;
          }
          n -= h;
          q += h;
          r = n * c;
        } else {
          0 <= g ? v < B ? r += g : 0 >= h && q <= L && (D = !1) : r += g, 0 >= h ? q > L && (n -= h, q += h) : (n -= h, q += h);
        }
        0 > r && 0 > n ? (l = "sw", r = n = 0) : 0 > r ? (l = "nw", r = 0) : 0 > n && (l = "se", n = 0);
        break;
      case "nw":
        if (c) {
          if (0 >= h && (q <= L || p <= C)) {
            D = !1;
            break;
          }
          n -= h;
          q += h;
          r = n * c;
          p += F;
        } else {
          0 >= g ? p > C ? (r -= g, p += g) : 0 >= h && q <= L && (D = !1) : (r -= g, p += g), 0 >= h ? q > L && (n -= h, q += h) : (n -= h, q += h);
        }
        0 > r && 0 > n ? (l = "se", r = n = 0) : 0 > r ? (l = "ne", r = 0) : 0 > n && (l = "sw", n = 0);
        break;
      case "sw":
        if (c) {
          if (0 >= g && (p <= C || A >= z)) {
            D = !1;
            break;
          }
          r -= g;
          p += g;
          n = r / c;
        } else {
          0 >= g ? p > C ? (r -= g, p += g) : 0 <= h && A >= z && (D = !1) : (r -= g, p += g), 0 <= h ? A < z && (n += h) : n += h;
        }
        0 > r && 0 > n ? (l = "ne", r = n = 0) : 0 > r ? (l = "se", r = 0) : 0 > n && (l = "nw", n = 0);
        break;
      case "se":
        if (c) {
          if (0 <= g && (v >= B || A >= z)) {
            D = !1;
            break;
          }
          r += g;
          n = r / c;
        } else {
          0 <= g ? v < B ? r += g : 0 <= h && A >= z && (D = !1) : r += g, 0 <= h ? A < z && (n += h) : n += h;
        }
        0 > r && 0 > n ? (l = "nw", r = n = 0) : 0 > r ? (l = "sw", r = 0) : 0 > n && (l = "ne", n = 0);
        break;
      case "move":
        this.move(g, h);
        D = !1;
        break;
      case "zoom":
        this.zoom(u(d), b.originalEvent);
        D = !1;
        break;
      case "crop":
        g && h ? (H = this.$cropper.offset(), p = e.startX - H.left, q = e.startY - H.top, r = m.minWidth, n = m.minHeight, 0 < g ? l = 0 < h ? "se" : "ne" : 0 > g && (p -= r, l = 0 < h ? "sw" : "nw"), 0 > h && (q -= n), this.cropped || (this.$cropBox.removeClass("cropper-hidden"), this.cropped = !0, this.limited && this.limitCropBox(!0, !0))) : D = !1;
    }
    D && (m.width = r, m.height = n, m.left = p, m.top = q, this.action = l, this.renderCropBox());
    a.each(d, function(a, b) {
      b.startX = b.endX;
      b.startY = b.endY;
    });
  }});
  a.extend(R.prototype, {crop:function() {
    this.ready && !this.disabled && (this.cropped || (this.cropped = !0, this.limitCropBox(!0, !0), this.options.modal && this.$dragBox.addClass("cropper-modal"), this.$cropBox.removeClass("cropper-hidden")), this.setCropBoxData(this.initialCropBox));
  }, reset:function() {
    this.ready && !this.disabled && (this.image = a.extend({}, this.initialImage), this.canvas = a.extend({}, this.initialCanvas), this.cropBox = a.extend({}, this.initialCropBox), this.renderCanvas(), this.cropped && this.renderCropBox());
  }, clear:function() {
    this.cropped && !this.disabled && (a.extend(this.cropBox, {left:0, top:0, width:0, height:0}), this.cropped = !1, this.renderCropBox(), this.limitCanvas(!0, !0), this.renderCanvas(), this.$dragBox.removeClass("cropper-modal"), this.$cropBox.addClass("cropper-hidden"));
  }, replace:function(a, b) {
    !this.disabled && a && (this.isImg && this.$element.attr("src", a), b ? (this.url = a, this.$clone.attr("src", a), this.ready && this.$preview.find("img").add(this.$clone2).attr("src", a)) : (this.isImg && (this.replaced = !0), this.options.data = null, this.load(a)));
  }, enable:function() {
    this.ready && (this.disabled = !1, this.$cropper.removeClass("cropper-disabled"));
  }, disable:function() {
    this.ready && (this.disabled = !0, this.$cropper.addClass("cropper-disabled"));
  }, destroy:function() {
    var a = this.$element;
    this.loaded ? (this.isImg && this.replaced && a.attr("src", this.originalUrl), this.unbuild(), a.removeClass("cropper-hidden")) : this.isImg ? a.off("load", this.start) : this.$clone && this.$clone.remove();
    a.removeData("cropper");
  }, move:function(a, b) {
    var d = this.canvas;
    this.moveTo(c(a) ? a : d.left + Number(a), c(b) ? b : d.top + Number(b));
  }, moveTo:function(a, d) {
    var e = this.canvas, f = !1;
    c(d) && (d = a);
    a = Number(a);
    d = Number(d);
    this.ready && !this.disabled && this.options.movable && (b(a) && (e.left = a, f = !0), b(d) && (e.top = d, f = !0), f && this.renderCanvas(!0));
  }, zoom:function(a, b) {
    var c = this.canvas;
    a = Number(a);
    this.zoomTo(c.width * (0 > a ? 1 / (1 - a) : 1 + a) / c.naturalWidth, b);
  }, zoomTo:function(a, b) {
    var c = this.options, d = this.pointers, e = this.canvas, g = e.width, h = e.height, m = e.naturalWidth, l = e.naturalHeight;
    a = Number(a);
    console.log("ratio:", a);
    0 <= a && this.ready && !this.disabled && c.zoomable && (c = m * a, a *= l, l = void 0, b && (l = b.originalEvent), this.trigger("zoom", {originalEvent:l, oldRatio:g / m, ratio:c / m}).isDefaultPrevented() || (l ? (m = this.$cropper.offset(), b = d && f(d).length ? v(d) : {pageX:b.pageX || l.pageX || 0, pageY:b.pageY || l.pageY || 0}, e.left -= (b.pageX - m.left - e.left) / g * (c - g), e.top -= (b.pageY - m.top - e.top) / h * (a - h)) : (e.left -= (c - g) / 2, e.top -= (a - h) / 2), e.width = 
    c, e.height = a, this.renderCanvas(!0)));
  }, rotate:function(a) {
    this.rotateTo((this.image.rotate || 0) + Number(a));
  }, rotateTo:function(a) {
    a = Number(a);
    b(a) && this.ready && !this.disabled && this.options.rotatable && (this.image.rotate = a % 360, this.rotated = !0, this.renderCanvas(!0));
  }, scale:function(a, d) {
    var e = this.image, f = !1;
    c(d) && (d = a);
    a = Number(a);
    d = Number(d);
    this.ready && !this.disabled && this.options.scalable && (b(a) && (e.scaleX = a, f = !0), b(d) && (e.scaleY = d, f = !0), f && this.renderImage(!0));
  }, scaleX:function(a) {
    var c = this.image.scaleY;
    this.scale(a, b(c) ? c : 1);
  }, scaleY:function(a) {
    var c = this.image.scaleX;
    this.scale(b(c) ? c : 1, a);
  }, getData:function(b) {
    var c = this.options, d = this.image, e = this.canvas, f = this.cropBox, g = void 0, h = void 0;
    this.ready && this.cropped ? (h = {x:f.left - e.left, y:f.top - e.top, width:f.width, height:f.height}, g = d.width / d.naturalWidth, a.each(h, function(a, c) {
      c /= g;
      h[a] = b ? Math.round(c) : c;
    })) : h = {x:0, y:0, width:0, height:0};
    c.rotatable && (h.rotate = d.rotate || 0);
    c.scalable && (h.scaleX = d.scaleX || 1, h.scaleY = d.scaleY || 1);
    return h;
  }, setData:function(c) {
    var d = this.options, e = this.image, f = this.canvas, g = {}, h = void 0, m = void 0;
    a.isFunction(c) && (c = c.call(this.element));
    this.ready && !this.disabled && a.isPlainObject(c) && (d.rotatable && b(c.rotate) && c.rotate !== e.rotate && (e.rotate = c.rotate, this.rotated = h = !0), d.scalable && (b(c.scaleX) && c.scaleX !== e.scaleX && (e.scaleX = c.scaleX, m = !0), b(c.scaleY) && c.scaleY !== e.scaleY && (e.scaleY = c.scaleY, m = !0)), h ? this.renderCanvas() : m && this.renderImage(), d = e.width / e.naturalWidth, b(c.x) && (g.left = c.x * d + f.left), b(c.y) && (g.top = c.y * d + f.top), b(c.width) && (g.width = c.width * 
    d), b(c.height) && (g.height = c.height * d), this.setCropBoxData(g));
  }, getContainerData:function() {
    return this.ready ? this.container : {};
  }, getImageData:function() {
    return this.loaded ? this.image : {};
  }, getCanvasData:function() {
    var b = this.canvas, c = {};
    this.ready && a.each("left top width height naturalWidth naturalHeight".split(" "), function(a, d) {
      c[d] = b[d];
    });
    return c;
  }, setCanvasData:function(c) {
    var d = this.canvas, e = d.aspectRatio;
    a.isFunction(c) && (c = c.call(this.$element));
    this.ready && !this.disabled && a.isPlainObject(c) && (b(c.left) && (d.left = c.left), b(c.top) && (d.top = c.top), b(c.width) ? (d.width = c.width, d.height = c.width / e) : b(c.height) && (d.height = c.height, d.width = c.height * e), this.renderCanvas(!0));
  }, getCropBoxData:function() {
    var a = this.cropBox;
    console.log("getCropBoxData(" + this.ready + "," + this.cropped + "):", a);
    return this.ready && this.cropped ? {left:a.left, top:a.top, width:a.width, height:a.height} : {};
  }, setCropBoxData:function(c) {
    var d = this.cropBox, e = this.options.aspectRatio, f = void 0, g = void 0;
    a.isFunction(c) && (c = c.call(this.$element));
    this.ready && this.cropped && !this.disabled && a.isPlainObject(c) && (b(c.left) && (d.left = c.left), b(c.top) && (d.top = c.top), b(c.width) && c.width !== d.width && (f = !0, d.width = c.width), b(c.height) && c.height !== d.height && (g = !0, d.height = c.height), e && (f ? d.height = d.width / e : g && (d.width = d.height * e)), this.renderCropBox());
  }, getCroppedCanvas:function(b) {
    if (!this.ready || !window.HTMLCanvasElement) {
      return null;
    }
    a.isPlainObject(b) || (b = {});
    if (!this.cropped) {
      return q(this.$clone[0], this.image, b);
    }
    var c = this.getData(), d = c.width, e = c.height, f = d / e, g = void 0, h = void 0, m = void 0;
    a.isPlainObject(b) && (g = b.width, h = b.height, g ? (h = g / f, m = g / d) : h && (g = h * f, m = h / e));
    var g = Math.floor(g || d), l = Math.floor(h || e), h = a("<canvas>")[0], f = h.getContext("2d");
    h.width = g;
    h.height = l;
    b.fillColor && (f.fillStyle = b.fillColor, f.fillRect(0, 0, g, l));
    var r = q(this.$clone[0], this.image, b), g = r.width, l = r.height, n = this.canvas, r = [r], p = c.x + n.naturalWidth * (Math.abs(c.scaleX || 1) - 1) / 2, c = c.y + n.naturalHeight * (Math.abs(c.scaleY || 1) - 1) / 2, u = n = void 0, v = void 0, A = void 0, C = void 0, B = void 0;
    p <= -d || p > g ? p = n = v = C = 0 : 0 >= p ? (v = -p, p = 0, n = C = Math.min(g, d + p)) : p <= g && (v = 0, n = C = Math.min(d, g - p));
    0 >= n || c <= -e || c > l ? c = u = A = B = 0 : 0 >= c ? (A = -c, c = 0, u = B = Math.min(l, e + c)) : c <= l && (A = 0, u = B = Math.min(e, l - c));
    r.push(Math.floor(p), Math.floor(c), Math.floor(n), Math.floor(u));
    m && (v *= m, A *= m, C *= m, B *= m);
    0 < C && 0 < B && r.push(Math.floor(v), Math.floor(A), Math.floor(C), Math.floor(B));
    f.imageSmoothingEnabled = !!b.imageSmoothingEnabled;
    b.imageSmoothingQuality && (f.imageSmoothingQuality = b.imageSmoothingQuality);
    f.drawImage.apply(f, ha(r));
    return h;
  }, setAspectRatio:function(a) {
    var b = this.options;
    this.disabled || c(a) || (b.aspectRatio = Math.max(0, a) || NaN, this.ready && (this.initCropBox(), this.cropped && this.renderCropBox()));
  }, setDragMode:function(a) {
    var b = this.options;
    if (this.loaded && !this.disabled) {
      var c = "crop" === a;
      var d = b.movable && "move" === a;
      a = c || d ? a : "none";
      this.$dragBox.data("action", a).toggleClass("cropper-crop", c).toggleClass("cropper-move", d);
      b.cropBoxMovable || this.$face.data("action", a).toggleClass("cropper-crop", c).toggleClass("cropper-move", d);
    }
  }});
  var pa = a.fn.cropper;
  a.fn.cropper = function(b) {
    for (var c = arguments.length, d = Array(1 < c ? c - 1 : 0), e = 1; e < c; e++) {
      d[e - 1] = arguments[e];
    }
    var f = void 0;
    this.each(function(c, e) {
      c = a(e);
      var g = c.data("cropper");
      if (!g) {
        if (/destroy/.test(b)) {
          return;
        }
        g = a.extend({}, c.data(), a.isPlainObject(b) && b);
        c.data("cropper", g = new R(e, g));
      }
      "string" === typeof b && (e = g[b], a.isFunction(e) && (f = e.apply(g, d)));
    });
    return "undefined" !== typeof f ? f : this;
  };
  a.fn.cropper.Constructor = R;
  a.fn.cropper.setDefaults = R.setDefaults;
  a.fn.cropper.noConflict = function() {
    a.fn.cropper = pa;
    return this;
  };
});
Polymer({is:"simpl-cropper", properties:{mainTabId:{type:String, value:"0"}, options:{type:String}}, observers:[], behaviors:[TranslationsBehavior, StyleScopeBehavior], attached:function() {
  this.atta || (this.atta = !0, this.hasImage = !1, this.dataWidth = this.dataHeight = 0, this.formData = {}, this.image = $(this.$.image), this.image.cropper({viewMode:0, movable:!0, zoomable:!0, rotatable:!1, scalable:!0, responsive:!1, ready:function(a) {
    this.fire("cropper-ready", {event:a, fileId:this.currentFileId});
  }.bind(this), crop:function(a) {
    this.dataHeight = Math.round(a.height);
    this.dataWidth = Math.round(a.width);
  }.bind(this)}));
}, reset:function() {
  this.image.cropper("destroy");
  this.mainTabId = "0";
  this.formData = {};
}, getImage:function() {
  return this.image;
}, setCurrentFileId:function(a) {
  this.currentFileId = a;
}, gotoEditTab:function() {
  this.currentFileId && (this.mainTabId = "1");
}, replaceImage:function(a, b) {
  console.log("replaceImage:", a);
  this.mainTabId = "1";
  this.image.cropper("replace", b);
  this.currentFileId = a;
  this.hasImage = !0;
}, getDimension:function() {
  return "h:" + this.dataHeight + " w:" + this.dataWidth;
}, onUploadValueChanged:function(a) {
  a = this.$.uploadFormId.getData();
  console.log("onUploadValueChanged:", a.uploadId);
  this.mainTabId = "1";
  var b = Object.keys(a.uploadId)[0];
  this.image.cropper("replace", a.uploadId[b]);
  this.currentFileId = b;
  this.hasImage = !0;
}, mainTabSelected:function() {
}, onTapReset:function() {
  this.image.cropper("reset");
}, onTapZoomIn:function() {
  this.image.cropper("zoom", "0.1");
}, onTapZoomOut:function() {
  this.image.cropper("zoom", "-0.1");
}, onTapZoomTo:function() {
  this.image.cropper("zoomTo", "0.01");
}, onTapMoveLeft:function() {
  this.image.cropper("move", "-10", "0");
}, onTapMoveRight:function() {
  this.image.cropper("move", "10", "0");
}, onTapMoveUp:function() {
  this.image.cropper("move", "0", "-10");
}, onTapMoveDown:function() {
  this.image.cropper("move", "0", "10");
}, onTapMoveTo0:function() {
  this.image.cropper("moveTo", "0", "0");
}, onTapPreview:function() {
  this.mainTabId = "2";
  var a = this.image.cropper("getCroppedCanvas");
  $(this.$.preview).html(a);
}, ready:function() {
}});
Polymer({is:"simpl-dispatcher", properties:{selected:{observer:"selectedChanged", type:String}}, ready:function() {
  this.nodes = this._getMenuYaml();
}, getNodes:function() {
  return this.nodes;
}, attached:function() {
  this.async(function() {
    this.initListener();
  });
}, initListener:function() {
  for (var a = document.querySelectorAll("a.menuentry"), b = 0; b < a.length; b++) {
    $(a[b]).tap(this.tapListener.bind(this), !1);
  }
  if (this.selected) {
    var c = this;
    setTimeout(function() {
      c.selectMenuItem(c.selected);
    }, 300);
  }
}, tapListener:function(a) {
  var b = a.target;
  if (b.params) {
    $("#mainContainer").animate({scrollTop:$(b.params.id).offset().top}, 1000);
  } else {
    if (a = a.target.page) {
      this._selectedPage && this.fire("menu-selected", {isSelected:!1, page:this._selectedPage}), b = this._selectedPage, this._selectedPage = a, this.fire("menu-selected", {isSelected:!0, prevPage:b, page:this._selectedPage}), this.selected = a.hash;
    }
  }
}, getPageByHash:function(a) {
  return a && a.startsWith("!") ? null : (a = document.querySelector("#hash_" + a)) ? a.page : null;
}, getActivePage:function() {
  return this._selectedPage;
}, selectMenuItem:function(a) {
  a = this.getPageByHash(a);
  null != a && a.provider.setSelected(a);
}, selectedChanged:function(a) {
  if (null == this._selectedPage || this.selected != this._selectedPage.hash) {
    if (a = this.getPageByHash(this.selected)) {
      var b = this._selectedPage;
      this._selectedPage = a;
      this.fire("menu-selected", {isSelected:!0, prevPage:b, page:this._selectedPage});
    }
  }
  this.selectMenuItem(this.selected);
}, filterLocalLinks:function(a) {
  if (a.querySelectorAll) {
    a = a.querySelectorAll("a");
    for (var b = 0; b < a.length; b++) {
      var c = a[b], d = c.getAttribute("href");
      if (d && d.match(/^local.*/)) {
        if (d = this.getPageByHash(d.substring(6))) {
          c.removeAttribute("href"), c.page = d, c.element = c, $(c).tap(this.tapListener.bind(this), !1);
        }
      } else {
        d && d.startsWith("#_") && (c.removeAttribute("href"), c.params = {id:d}, $(c).tap(this.tapListener.bind(this), !1));
      }
    }
  }
}, _traverse:function(a, b, c) {
  for (var d = 0; d < b.length; d++) {
    var e = b[d];
    e.uri && e.uri.startsWith("structure:") && (e.children = this._loadMenu(e.uri.substring(10)), e.uri = null);
    var f = e.name || e.title;
    f && (e.name = tr(f));
    _.isEmpty(e.icon) && (e.icon = "av:web-asset");
    _.isEmpty(e.hash) && (e.hash = e.id);
    _.isEmpty(e.hash) && f && (e.hash = f.toLowerCase().replace(/[^a-z0-9_]/g, "-"));
    for (var f = base = e.hash, g = 0; this._hashExists(c, f);) {
      f = base + g, g++;
    }
    "noop" == e.uri && (e.uri = "");
    0 < g && e.uri && (e.hash = f, f = 0 <= e.uri.indexOf("?"), e.uri += (f ? "&" : "?") + "dummy=" + d);
    e.url = e.uri || e.url;
    e.url && -1 != e.url.indexOf("%l") && (e.url = e.url.replace("%l", simpl4Globals.get("lang")));
    e.disabled = !0 === e.disabled || !1 === e.enabled;
    e.disabled || (f = _.map(a, function(a) {
      return tr(a.title);
    }).join("/"), e.path = _.isEmpty(f) ? tr(e.name) : f + "/" + tr(e.name), e.children && 0 < e.children.length ? (c.push(e), f = clone(e), f.children = null, a.push(f), this._traverse(a, e.children, c), a.pop()) : c.push(e));
  }
}, _loadMenu:function(a) {
  var b = null, c = a, d = b = null;
  0 <= a.indexOf(":") && (b = a.split(":")[0], simpl4.util.MessageManager.installMessages(b), a = a.split(":")[1], d = window.location.origin + "/repo/" + b, c = d + "/" + a);
  a.endsWith(".json") || a.endsWith(".yaml") || (c += ".json");
  console.log("_loadMenu.url:", c);
  b = jQuery.ajax({url:c, async:!1, error:function() {
    console.log(a + ".json not found.");
  }, dataType:"json"}).responseText;
  c = a;
  a.endsWith(".json") || a.endsWith(".yaml") || (c += ".yaml");
  console.log("_loadMenu2:", c);
  _.isEmpty(b) && (b = jQuery.ajax({url:c, async:!1, error:function() {
    console.log(a + ".yaml not found.");
  }, dataType:"json"}).responseText);
  try {
    b = JSON.parse(b);
  } catch (e) {
    alert("Error.Read Menu:" + e);
    console.error("Error.Read Menu:", e);
    return;
  }
  if (null != d) {
    for (c = 0; c < b.length; c++) {
      this._insertBase(b[c], d);
    }
  }
  return b;
}, _insertBase:function(a, b) {
  a.uri && "" != a.uri && (a.uri = b + "/" + a.uri);
  if (a.children) {
    for (var c = 0; c < a.children.length; c++) {
      this._insertBase(a.children[c], b);
    }
  }
}, _hashExists:function(a, b) {
  for (var c = 0; c < a.length; c++) {
    if (a[c].hash == b) {
      return !0;
    }
  }
  return !1;
}, _getMenuYaml:function() {
  if (null == this.name) {
    return [];
  }
  var a = this._loadMenu(this.name);
  0 < a.length && (_.isEmpty(a[0].id) ? a[0].hash = "0" : a[0].hash = a[0].id);
  this._traverse([], a, []);
  return a;
}});
Polymer({is:"simpl-rpc", properties:{_allparams:{computed:"_collectAll(method,service,params)"}, service:{type:String, value:"simpl4"}, method:{type:String}, params:{type:Object, value:null}, noauto:{type:Boolean, value:!1}, response:{type:Object, notify:!0}}, _collectAll:function() {
  !0 !== this.noauto && this.async(function() {
    this.go();
  }, null, 30);
}, ready:function() {
  this.request_id = 1;
  this.xhr = document.createElement("simpl-xhr");
}, _receive:function(a, b) {
  this._isSuccess(b) ? (a = this._evalResponse(b), console.log("rpc.receive(" + this.method + "):", a), a.error ? this._error2(a.error, b) : this._processResponse(a.result, b)) : this._error(b);
  this._complete(b);
}, _isSuccess:function(a) {
  a = a.status || 0;
  return !a || 200 <= a && 300 > a;
}, _processResponse:function(a, b) {
  this.response = a;
  this.fire("response", {response:a, xhr:b});
}, _error:function(a) {
  this.fire("error", {response:a.status + ": " + a.responseText, xhr:a});
}, _error2:function(a, b) {
  this.fire("error", {error:a, xhr:b});
}, _complete:function(a) {
  this.fire("complete", {response:a.status, xhr:a});
}, _evalResponse:function(a) {
  a = a.responseText;
  try {
    return JSON.parse(a);
  } catch (b) {
    return a;
  }
}, _getId:function() {
  return this.request_id++;
}, go:function() {
  console.log("rpc.go:", this.method + "/", this.params);
  var a = simpl4.util.Merge.clone(this.params), b = this.xhrArgs || {};
  b.headers = this.headers || {};
  b.headers && "string" == typeof b.headers && (b.headers = JSON5.parse(b.headers));
  b.headers["Content-Type"] = "application/json";
  var c = simpl4.util.Rpc._getUserName(), d = simpl4.util.Rpc._getPassword();
  b.headers.Authorization = "Basic " + simpl4.util.Base64.encode(c + ":" + d);
  b.callback = this._receive.bind(this);
  b.url = simpl4.util.BaseManager.getBaseUrl() + "/rpc/xyz";
  b.method = "POST";
  c = {jsonrpc:"2.0", method:this.method, service:this.service, id:this._getId()};
  c.params = a && "string" == typeof a ? JSON5.parse(a) : a || {};
  if (c.params.namespace && "default" == c.params.namespace || "camelRoute" == this.service || this.service.startsWith("simpl4")) {
    c.params.namespace = simpl4.util.BaseManager.getNamespace();
  }
  b.body = JSON.stringify(c, null, 2);
  null == this.xhr && (this.xhr = document.createElement("simpl-xhr"));
  return this.xhr.request(b);
}});
Polymer({is:"font-awesome", properties:{icon:{type:String}}, observers:["iconChanged(icon)"], iconChanged:function() {
  Polymer.dom(this.$.fontId).classList.add("fa");
  Polymer.dom(this.$.fontId).classList.add("fa-" + this.icon);
}});
LobiboxBehavior = {notify:function(a, b, c, d) {
  var e = "vaadin-icons:info-circle-o";
  "success" == b ? e = "vaadin-icons:check-circle-o" : "warning" == b ? e = "vaadin-icons:warning" : "error" == b && (e = "vaadin-icons:exclamation");
  d = $.extend({}, {delay:c, icon:e, msg:a}, d);
  return Lobibox.notify(b, d);
}};
Polymer({is:"simpl-import", properties:{data:{type:Object}, type:{type:String}, method:{type:String}, url:{observer:"urlChanged", type:String}}, behaviors:[StyleScopeBehavior], observers:["dataChanged(data,method)"], urlChanged:function(a) {
  null != this.url && (a = "?", 0 < this.url.indexOf("?") && (a = "&"), a = this.url + a + "time=" + (new Date).getTime(), this.importHref(a, this.onResponse.bind(this)));
}, dataChanged:function(a) {
  a = this.data;
  "string" == typeof a && (a = JSON5.parse(a));
  var b = this.method;
  -1 == b.indexOf(".") && (b = simpl4.util.BaseManager.getNamespace() + "." + b);
  a = {service:"camel-routing", method:b, params:a};
  var b = simpl4.util.BaseManager.getPassword(), c = simpl4.util.BaseManager.getUser(), b = simpl4.util.Base64.encode(c + ":" + b);
  a = simpl4.util.BaseManager.getBaseUrl() + "/rpc/get?rpc=" + encodeURIComponent(JSON.stringify(a)) + "&credentials=" + b;
  this.importHref(a, this.onResponse.bind(this));
}, onResponse:function(a) {
  a = a.target.import.body;
  if (a.innerHTML && a.innerHTML.startsWith('{"error":')) {
    console.error("simpl-import.onResponse:", JSON5.parse(a.innerHTML).error.message);
  } else {
    for (var b = this.$.insertPoint; b.firstChild;) {
      Polymer.dom(b).removeChild(b.firstChild);
    }
    if (a.firstElementChild) {
      if (1 < a.childNodes.length) {
        for (var c = 0; c < a.childNodes.length; c++) {
          var d = a.childNodes[c];
          Polymer.dom(b).appendChild(d);
        }
      } else {
        Polymer.dom(b).appendChild(a.firstElementChild);
      }
    }
    document.querySelector("#dispatcherId").filterLocalLinks(b.firstElementChild);
    this.async(function() {
      this.setScope(b);
    }, 50);
  }
}, setScope:function(a) {
  var b = document.querySelector("simpl-dispatcher").getActivePage();
  null != b && (b = b.scope, this.isAsciidoc(this.url) && null == b && (b = "asciidoctor-default"), this.setStyleScope(a, b));
}, isAsciidoc:function(a) {
  return "adoc" == this.type ? !0 : null == a ? !1 : 0 < a.indexOf(".adoc");
}});
(function(a) {
  function b() {
    return "" === l.hash || "#" === l.hash;
  }
  function c(a, b) {
    for (var c = 0; c < a.length && !1 !== b(a[c], c, a); c += 1) {
    }
  }
  function d(a) {
    for (var b = [], c = 0, d = a.length; c < d; c++) {
      b = b.concat(a[c]);
    }
    return b;
  }
  function e(a, b, c) {
    if (!a.length) {
      return c();
    }
    var d = 0;
    (function C() {
      b(a[d], function(b) {
        b || !1 === b ? (c(b), c = function() {
        }) : (d += 1, d === a.length ? c() : C());
      });
    })();
  }
  function f(a, b, c) {
    c = a;
    for (var d in b) {
      if (b.hasOwnProperty(d) && (c = b[d](a), c !== a)) {
        break;
      }
    }
    return c === a ? "([._a-zA-Z0-9-%()]+)" : c;
  }
  function g(a, b) {
    for (var c, d = 0, e = ""; c = a.substr(d).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/);) {
      d = c.index + c[0].length, c[0] = c[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)"), e += a.substr(0, c.index) + c[0];
    }
    a = e + a.substr(d);
    if (c = a.match(/:([^\/]+)/ig)) {
      for (var e = c.length, g = 0; g < e; g++) {
        d = c[g], a = "::" === d.slice(0, 2) ? d.slice(1) : a.replace(d, f(d, b));
      }
    }
    return a;
  }
  function h(a, b, c, d) {
    var e = 0;
    c = (c || "(").toString();
    d = (d || ")").toString();
    var f;
    for (f = 0; f < a.length; f++) {
      var g = a[f];
      if (g.indexOf(c, e) > g.indexOf(d, e) || ~g.indexOf(c, e) && !~g.indexOf(d, e) || !~g.indexOf(c, e) && ~g.indexOf(d, e)) {
        var h = g.indexOf(c, e);
        e = g.indexOf(d, e);
        if (~h && !~e || !~h && ~e) {
          a = [a.slice(0, (f || 1) + 1).join(b)].concat(a.slice((f || 1) + 1));
        }
        e = (e > h ? e : h) + 1;
        f = 0;
      } else {
        e = 0;
      }
    }
    return a;
  }
  var l = document.location, n = {mode:"modern", hash:l.hash, history:!1, check:function() {
    var a = l.hash;
    a != this.hash && (this.hash = a, this.onHashChanged());
  }, fire:function() {
    if ("modern" === this.mode) {
      !0 === this.history ? window.onpopstate() : window.onhashchange();
    } else {
      this.onHashChanged();
    }
  }, init:function(a, b) {
    function c(a) {
      for (var b = 0, c = p.listeners.length; b < c; b++) {
        p.listeners[b](a);
      }
    }
    var d = this;
    this.history = b;
    p.listeners || (p.listeners = []);
    "onhashchange" in window && (void 0 === document.documentMode || 7 < document.documentMode) ? (!0 === this.history ? setTimeout(function() {
      window.onpopstate = c;
    }, 500) : window.onhashchange = c, this.mode = "modern") : (b = document.createElement("iframe"), b.id = "state-frame", b.style.display = "none", document.body.appendChild(b), this.writeFrame(""), "onpropertychange" in document && "attachEvent" in document && document.attachEvent("onpropertychange", function() {
      "location" === event.propertyName && d.check();
    }), window.setInterval(function() {
      d.check();
    }, 50), this.onHashChanged = c, this.mode = "legacy");
    p.listeners.push(a);
    return this.mode;
  }, destroy:function(a) {
    if (p && p.listeners) {
      for (var b = p.listeners, c = b.length - 1; 0 <= c; c--) {
        b[c] === a && b.splice(c, 1);
      }
    }
  }, setHash:function(a) {
    "legacy" === this.mode && this.writeFrame(a);
    !0 === this.history ? (window.history.pushState({}, document.title, a), this.fire()) : l.hash = "/" === a[0] ? a : "/" + a;
    return this;
  }, writeFrame:function(a) {
    var b = document.getElementById("state-frame"), b = b.contentDocument || b.contentWindow.document;
    b.open();
    b.write("<script>_hash = '" + a + "'; onload = parent.listener.syncHash;<script>");
    b.close();
  }, syncHash:function() {
    var a = this._hash;
    a != l.hash && (l.hash = a);
    return this;
  }, onHashChanged:function() {
  }}, p = a.Router = function(a) {
    if (!(this instanceof p)) {
      return new p(a);
    }
    this.params = {};
    this.routes = {};
    this.methods = ["on", "once", "after", "before"];
    this.scope = [];
    this._methods = {};
    this._insert = this.insert;
    this.insert = this.insertEx;
    this.historySupport = null != (null != window.history ? window.history.pushState : null);
    this.configure();
    this.mount(a || {});
  };
  p.prototype.init = function(a) {
    var c = this;
    this.handler = function(a) {
      a = a && a.newURL || window.location.hash;
      a = !0 === c.history ? c.getPath() : a.replace(/.*#/, "");
      c.dispatch("on", "/" === a.charAt(0) ? a : "/" + a);
    };
    n.init(this.handler, this.history);
    !1 === this.history ? b() && a ? l.hash = a : b() || c.dispatch("on", "/" + l.hash.replace(/^(#\/|#|\/)/, "")) : (this.convert_hash_in_init ? (a = b() && a ? a : b() ? null : l.hash.replace(/^#/, "")) && window.history.replaceState({}, document.title, a) : a = this.getPath(), (a || !0 === this.run_in_init) && this.handler());
    return this;
  };
  p.prototype.explode = function() {
    var a = !0 === this.history ? this.getPath() : l.hash;
    "/" === a.charAt(1) && (a = a.slice(1));
    return a.slice(1, a.length).split("/");
  };
  p.prototype.setRoute = function(a, b, c) {
    var d = this.explode();
    "number" === typeof a && "string" === typeof b ? d[a] = b : "string" === typeof c ? d.splice(a, b, s) : d = [a];
    n.setHash(d.join("/"));
    return d;
  };
  p.prototype.insertEx = function(a, b, c, d) {
    "once" === a && (a = "on", c = function(a) {
      var b = !1;
      return function() {
        if (!b) {
          return b = !0, a.apply(this, arguments);
        }
      };
    }(c));
    return this._insert(a, b, c, d);
  };
  p.prototype.getRoute = function(a) {
    return "number" === typeof a ? this.explode()[a] : "string" === typeof a ? this.explode().indexOf(a) : this.explode();
  };
  p.prototype.destroy = function() {
    n.destroy(this.handler);
    return this;
  };
  p.prototype.getPath = function() {
    var a = window.location.pathname;
    "/" !== a.substr(0, 1) && (a = "/" + a);
    return a;
  };
  var q = /\?.*/;
  p.prototype.configure = function(a) {
    a = a || {};
    for (var b = 0; b < this.methods.length; b++) {
      this._methods[this.methods[b]] = !0;
    }
    this.recurse = a.recurse || this.recurse || !1;
    this.async = a.async || !1;
    this.delimiter = a.delimiter || "/";
    this.strict = "undefined" === typeof a.strict ? !0 : a.strict;
    this.notfound = a.notfound;
    this.resource = a.resource;
    this.history = a.html5history && this.historySupport || !1;
    this.run_in_init = !0 === this.history && !1 !== a.run_handler_in_init;
    this.convert_hash_in_init = !0 === this.history && !1 !== a.convert_hash_in_init;
    this.every = {after:a.after || null, before:a.before || null, on:a.on || null};
    return this;
  };
  p.prototype.param = function(a, b) {
    ":" !== a[0] && (a = ":" + a);
    var c = new RegExp(a, "g");
    this.params[a] = function(a) {
      return a.replace(c, b.source || b);
    };
    return this;
  };
  p.prototype.on = p.prototype.route = function(a, b, c) {
    var d = this;
    c || "function" != typeof b || (c = b, b = a, a = "on");
    if (Array.isArray(b)) {
      return b.forEach(function(b) {
        d.on(a, b, c);
      });
    }
    b.source && (b = b.source.replace(/\\\//ig, "/"));
    if (Array.isArray(a)) {
      return a.forEach(function(a) {
        d.on(a.toLowerCase(), b, c);
      });
    }
    b = b.split(new RegExp(this.delimiter));
    b = h(b, this.delimiter);
    this.insert(a, this.scope.concat(b), c);
  };
  p.prototype.path = function(a, b) {
    var c = this.scope.length;
    a.source && (a = a.source.replace(/\\\//ig, "/"));
    a = a.split(new RegExp(this.delimiter));
    a = h(a, this.delimiter);
    this.scope = this.scope.concat(a);
    b.call(this, this);
    this.scope.splice(c, a.length);
  };
  p.prototype.dispatch = function(a, b, c) {
    function d() {
      e.last = f.after;
      e.invoke(e.runlist(f), e, c);
    }
    var e = this, f = this.traverse(a, b.replace(q, ""), this.routes, ""), g = this._invoked;
    this._invoked = !0;
    if (!f || 0 === f.length) {
      return this.last = [], "function" === typeof this.notfound && this.invoke([this.notfound], {method:a, path:b}, c), !1;
    }
    "forward" === this.recurse && (f = f.reverse());
    if ((a = this.every && this.every.after ? [this.every.after].concat(this.last) : [this.last]) && 0 < a.length && g) {
      return this.async ? this.invoke(a, this, d) : (this.invoke(a, this), d()), !0;
    }
    d();
    return !0;
  };
  p.prototype.invoke = function(a, b, d) {
    var f = this;
    if (this.async) {
      var g = function(c, d) {
        if (Array.isArray(c)) {
          return e(c, g, d);
        }
        "function" == typeof c && c.apply(b, (a.captures || []).concat(d));
      };
      e(a, g, function() {
        d && d.apply(b, arguments);
      });
    } else {
      g = function(d) {
        if (Array.isArray(d)) {
          return c(d, g);
        }
        if ("function" === typeof d) {
          return d.apply(b, a.captures || []);
        }
        "string" === typeof d && f.resource && f.resource[d].apply(b, a.captures || []);
      }, c(a, g);
    }
  };
  p.prototype.traverse = function(a, b, c, d, e) {
    function f(a) {
      function b(a) {
        for (var c = [], d = 0; d < a.length; d++) {
          c[d] = Array.isArray(a[d]) ? b(a[d]) : a[d];
        }
        return c;
      }
      function c(a) {
        for (var b = a.length - 1; 0 <= b; b--) {
          Array.isArray(a[b]) ? (c(a[b]), 0 === a[b].length && a.splice(b, 1)) : e(a[b]) || a.splice(b, 1);
        }
      }
      if (!e) {
        return a;
      }
      var d = b(a);
      d.matched = a.matched;
      d.captures = a.captures;
      d.after = a.after.filter(e);
      c(d);
      return d;
    }
    var g = [], h;
    if (b === this.delimiter && c[a]) {
      var m = [[c.before, c[a]].filter(Boolean)];
      m.after = [c.after].filter(Boolean);
      m.matched = !0;
      m.captures = [];
      return f(m);
    }
    for (var l in c) {
      if (c.hasOwnProperty(l) && (!this._methods[l] || this._methods[l] && "object" === typeof c[l] && !Array.isArray(c[l])) && (m = h = d + this.delimiter + l, this.strict || (h += "[" + this.delimiter + "]?"), h = b.match(new RegExp("^" + h)))) {
        if (h[0] && h[0] == b && c[l][a]) {
          return m = [[c[l].before, c[l][a]].filter(Boolean)], m.after = [c[l].after].filter(Boolean), m.matched = !0, m.captures = h.slice(1), this.recurse && c === this.routes && (m.push([c.before, c.on].filter(Boolean)), m.after = m.after.concat([c.after].filter(Boolean))), f(m);
        }
        m = this.traverse(a, b, c[l], m);
        if (m.matched) {
          return 0 < m.length && (g = g.concat(m)), this.recurse && (g.push([c[l].before, c[l].on].filter(Boolean)), m.after = m.after.concat([c[l].after].filter(Boolean)), c === this.routes && (g.push([c.before, c.on].filter(Boolean)), m.after = m.after.concat([c.after].filter(Boolean)))), g.matched = !0, g.captures = m.captures, g.after = m.after, f(g);
        }
      }
    }
    return !1;
  };
  p.prototype.insert = function(a, b, c, d) {
    b = b.filter(function(a) {
      return a && 0 < a.length;
    });
    d = d || this.routes;
    var e = b.shift();
    /\:|\*/.test(e) && !/\\d|\\w/.test(e) && (e = g(e, this.params));
    if (0 < b.length) {
      return d[e] = d[e] || {}, this.insert(a, b, c, d[e]);
    }
    if (e || b.length || d !== this.routes) {
      b = typeof d[e];
      var f = Array.isArray(d[e]);
      if (d[e] && !f && "object" == b) {
        switch(f = typeof d[e][a], f) {
          case "function":
            d[e][a] = [d[e][a], c];
            return;
          case "object":
            d[e][a].push(c);
            return;
          case "undefined":
            d[e][a] = c;
            return;
        }
      } else {
        if ("undefined" == b) {
          b = {};
          b[a] = c;
          d[e] = b;
          return;
        }
      }
      throw Error("Invalid route context: " + b);
    }
    f = typeof d[a];
    switch(f) {
      case "function":
        d[a] = [d[a], c];
        break;
      case "object":
        d[a].push(c);
        break;
      case "undefined":
        d[a] = c;
    }
  };
  p.prototype.extend = function(a) {
    function b(a) {
      c._methods[a] = !0;
      c[a] = function() {
        c.on.apply(c, (1 === arguments.length ? [a, ""] : [a]).concat(Array.prototype.slice.call(arguments)));
      };
    }
    var c = this, d = a.length, e;
    for (e = 0; e < d; e++) {
      b(a[e]);
    }
  };
  p.prototype.runlist = function(a) {
    var b = this.every && this.every.before ? [this.every.before].concat(d(a)) : d(a);
    this.every && this.every.on && b.push(this.every.on);
    b.captures = a.captures;
    b.source = a.source;
    return b;
  };
  p.prototype.mount = function(a, b) {
    if (a && "object" === typeof a && !Array.isArray(a)) {
      b = b || [];
      Array.isArray(b) || (b = b.split(this.delimiter));
      for (var c in a) {
        if (a.hasOwnProperty(c)) {
          var d = c, e = b.slice(0), f = d, g = d.split(this.delimiter), l = typeof a[d], m = "" === g[0] || !this._methods[g[0]], r = m ? "on" : f;
          m && (f = f.slice((f.match(new RegExp("^" + this.delimiter)) || [""])[0].length), g.shift());
          m && "object" === l && !Array.isArray(a[d]) ? (e = e.concat(g), this.mount(a[d], e)) : (m && (e = e.concat(f.split(this.delimiter)), e = h(e, this.delimiter)), this.insert(r, e, a[d]));
        }
      }
    }
  };
})("object" === typeof exports ? exports : window);
(function() {
  var a;
  Polymer({is:"flatiron-director", properties:{autoHash:{value:!1, type:Boolean}, route:{notify:!0, type:String}}, observers:["routeChanged(route)"], attached:function() {
    this.router.on(/(.*)/, function(a) {
      this.route = a;
    }.bind(this));
    var a = this.router.getRoute();
    window.startPage && (a = [window.startPage], window.startPage = null);
    this.route = a && "" != a ? a.join(this.router.delimiter) : "0";
  }, routeChanged:function() {
    this.autoHash && (window.location.hash = this.route);
    this.fire("director-route", this.route);
  }, changeRoute:function(a) {
    this.route = a;
  }, get router() {
    a || (a = new Router, a.init());
    return a;
  }});
})();
Polymer({is:"simpl-asciidoctor", properties:{data:{observer:"dataChanged", type:String}, scope:{type:String}, css:{type:String}}, behaviors:[CSSImportBehavior, StyleScopeBehavior], attached:function(a) {
}, dataChanged:function(a) {
  a = document.querySelector("simpl-dispatcher").getActivePage();
  a = this.scope || a.scope || "asciidoctor-default";
  this.selectedPage = {scope:a};
  this.css && this.importSheet(this.css);
  var b = this.textContent;
  var c = "object" != typeof this.data || Array.isArray(this.data) ? {data:this.data} : this.data;
  b = simpl4.util.Rpc.rpcSync("camelRoute:asciidoctor", {namespace:"global", data:c, template:b});
  this.$.asciidoctorId.innerHTML = b;
  this.setStyleScope(this.$.asciidoctorId, a);
}});
Polymer({is:"simpl-lightbox", behaviors:[Polymer.IronOverlayBehavior], properties:{withBackdrop:{type:Boolean, value:!0}, items:{type:Array, value:function() {
  return [];
}, observer:"_updateItems"}, selectedItem:{type:Object, value:function() {
  return {};
}, notify:!0, readOnly:!0, observer:"_onSelect"}, selectedIndex:{type:Number, value:0, notify:!0, observer:"_onIndexChanged"}, autoplayVideos:{type:Boolean, value:!1}}, listeners:{"iron-overlay-opened":"_onOpen", "iron-overlay-closed":"_onClose", "iron-overlay-cancelled":"_onClose", keyup:"_onKeyup"}, _currentMediaElement:null, selectPrevious:function() {
  0 === this.selectedIndex ? this.selectedIndex = this.items.length - 1 : this.selectedIndex--;
}, selectNext:function() {
  this.selectedIndex === this.items.length - 1 ? this.selectedIndex = 0 : this.selectedIndex++;
}, useStrategy:function(a, b) {
  this._strategies[a] = b;
}, _strategies:{pdf:"_displayPdf", pdfRPC:"_displayPdfRPC", image:"_displayImage", html:"_displayHtml", video:"_displayVideo"}, _replaceMedia:function(a) {
  this.$.viewer.innerHTML = "";
  Polymer.dom(this.$.viewer).appendChild(a);
  this._currentMediaElement = a;
}, _displayPdfRPC:function(a) {
  this.$.viewer.innerHTML = "";
  var b = this, c = simpl4.util.BaseManager.getBaseUrl() + "/rpc/xyz", d = new XMLHttpRequest;
  d.open("POST", c, !0);
  d.responseType = "blob";
  var c = simpl4.util.Rpc._getUserName(), e = simpl4.util.Rpc._getPassword();
  d.setRequestHeader("Authorization", "Basic " + simpl4.util.Base64.encode(c + ":" + e));
  d.setRequestHeader("Content-type", "application/json; charset=utf-8");
  a.wait && this.$.toastId.show(a.wait, "success", "100000");
  d.onload = function(a) {
    if (200 == this.status) {
      a = new Blob([this.response], {type:"application/pdf"});
      if (window.navigator.msSaveBlob) {
        window.navigator.msSaveBlob(a, "download.pdf"), b.close();
      } else {
        a = URL.createObjectURL(a);
        var c = document.createElement("simpl-pdfviewer");
        c.file = a;
        c.height = "100%";
        c.style = "position:absolute;";
        b._replaceMedia(c);
      }
      b.$.toastId.close();
    } else {
      console.error("Error download:", this.status), this.$.toastId.show("Error download:" + this.status, "error", "100000");
    }
    d.onerror = function(a) {
      console.log("Failed:", a);
      this.$.toastId.show("Failed:" + a, "error", "100000");
    };
  };
  console.log("send:", a.rpc);
  d.send(JSON.stringify(a.rpc));
}, _displayPdf:function(a) {
  var b = document.createElement("simpl-pdfviewer");
  b.file = a.src;
  b.height = "100%";
  b.style = "position:absolute;";
  this._replaceMedia(b);
}, _displayImage:function(a) {
  var b = document.createElement("iron-image");
  b.src = a.src;
  b.sizing = "contain";
  b.preload = !0;
  b.fade = !0;
  this._replaceMedia(b);
}, _displayHtml:function(a) {
  var b = document.createElement("iframe");
  b.src = a.src;
  b.fade = !0;
  this._replaceMedia(b);
}, _displayVideo:function(a) {
  var b = document.createElement("paper-video");
  b.poster = a.thumbnail;
  b.controls = !0;
  b.src = a.src;
  this._replaceMedia(b);
  this._maybeAutoplayVideo(a);
}, _updateItems:function() {
  if (this.items.length) {
    var a = this.selectedIndex;
    this.selectedIndex = 0;
    0 === a && this._setSelectedItem(this.items[0]);
  }
}, _onIndexChanged:function(a) {
  this.items.length && this._setSelectedItem(this.items[a]);
}, _onSelect:function(a) {
  this.debounce("doSelect", function() {
    this.__onSelect(a);
  }, 300);
}, __onSelect:function(a) {
  console.log("_onSelect");
  if (a) {
    var b = this._strategies[a.type];
    if (b) {
      if ("function" === typeof b) {
        b.call(this, a);
      } else {
        this[b](a);
      }
      this.$.viewer.setAttribute("media-type", a.type);
    }
  }
}, _maybeAutoplayVideo:function(a) {
  "video" === a.type && (this._currentMediaElement.$.container.focus(), (a.autoplay || this.autoplayVideos) && null !== this._currentMediaElement && this.opened && this._currentMediaElement.play());
}, _toggleVideo:function() {
  if ("video" === this.selectedItem.type) {
    this._currentMediaElement[this._currentMediaElement.paused ? "play" : "pause"]();
  }
}, _hideControls:function(a) {
  return 1 >= a.length;
}, _onOpen:function() {
  this._maybeAutoplayVideo(this.selectedItem);
}, _onClose:function() {
  "video" === this.selectedItem.type && this._currentMediaElement.pause();
}, _onKeyup:function(a) {
  switch(a.which || a.keyCode) {
    case 39:
      this.selectNext();
      break;
    case 37:
      this.selectPrevious();
  }
}});
Polymer({is:"simpl-pdfviewer", properties:{file:{type:String, value:void 0, reflectToAttribute:!0}, notSupportedMessage:{type:String, value:"It appears your Web browser is not configured to display PDF files. No worries, just"}, notSupportedLinkMessage:{type:String, value:"click here to download the PDF file."}, height:{type:String, value:"400px"}, width:{type:String, value:"100%"}, card:{type:Boolean, value:!1}, downloadLabel:{type:String, value:"Download"}, elevation:{type:String, value:"1"}}, 
clear:function() {
  this.file = void 0;
}, _download:function() {
  window.location = this.file;
}});
Polymer({is:"simpl-elements-docviewer", properties:{}, observers:[], ready:function() {
}});
Polymer({is:"simpl-panel", properties:{heading:{type:String, value:""}, collapsable:{value:!1, type:Boolean}, showHeader:{value:!0, type:Boolean}, collapsed:{value:!1, observer:"collapsedChanged", type:Boolean}, collapsecolor:{value:"white", type:String}, height:{value:null, observer:"heightChanged", type:String}}, getIconFill:function() {
  return "fill:" + this.collapsecolor;
}, attached:function() {
}, ready:function() {
  this.height || this.style.height ? (this.style.height && !this.height && (this.height = parseInt(this.style.height, 10)), this.style.height = !0 === this.collapsable && !0 === this.collapsed ? parseInt(this.height, 10) + "px" : "30px", this.$.panelContent.style["-ms-flex-preferred-size"] = parseInt(this.height, 10) - 50 + "px") : this.$.panelContent.style["-ms-flex"] = "none";
  !0 === this.collapsable && (this.$.collapsable.style.display = "block", this.$.panelContent.style.display = !0 === this.collapsed ? "none" : "block", this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand"));
  this.$.heading.style.display = !0 === this.showHeader ? "flex" : "none";
  var a = this;
  this.$.heading.addEventListener("click", function() {
    a.toggleCollapse();
  }, !1);
}, heightChanged:function(a, b) {
  this.height || this.style.height ? (this.style.height && !this.height && (this.height = parseInt(this.style.height, 10)), this.style.height = !0 === this.collapsable && !0 === this.collapsed ? parseInt(this.height, 10) + "px" : "30px", this.$.panelContent.style["-ms-flex-preferred-size"] = parseInt(this.height, 10) - 50 + "px") : this.$.panelContent.style["-ms-flex"] = "none";
}, close:function() {
  this.collapsed = !0;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, open:function() {
  this.collapsed = !1;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, toggleCollapse:function() {
  this.collapsed = !this.collapsed;
  this.$.collapsable.icon = "custom-icons:" + (this.collapsed ? "icon-collapse" : "icon-expand");
}, collapsedChanged:function() {
  !0 === this.collapsable && (!0 === this.collapsed ? (this.$.panelContent.style.display = "none", this.style.height = "30px", this.fire("close-action", {data:this.data})) : (this.height && 30 != this.height ? (this.style.height = parseInt(this.height, 10) + "px", this.$.panelContent.style.height = parseInt(this.height, 10) - 40 + "px") : this.style.height = null, this.$.panelContent.style["-ms-flex"] = "none", this.$.panelContent.style.display = "block", this.fire("open-action", {data:this.data})));
}});
(function(a, b) {
  "function" === typeof define && define.amd ? define(["jquery", "microevent"], b) : b(a.jQuery, a.MicroEvent);
})(this, function(a, b) {
  function c(b, c) {
    b && (a.isArray(b) ? a.each(b, function(b, d) {
      a.isPlainObject(d) ? a.each(d, function(a, b) {
        c(a, b);
        return !1;
      }) : c(b, d);
    }) : a.each(b, function(a, b) {
      c(a, b);
    }));
  }
  function d(a, b) {
    b = Array.prototype.slice.call(arguments);
    return a.replace(/{([0-9]+)}/g, function(a, c) {
      return b[parseInt(c) + 1];
    });
  }
  function e(a, b) {
    switch(b) {
      case "integer":
        return parseInt(a);
      case "double":
        return parseFloat(a);
      default:
        return a;
    }
  }
  function f(a) {
    return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  function g(a, b) {
    var c = b.closest(".rule-container");
    c.length ? a.detach().insertAfter(c) : (c = b.closest(".rules-group-header"), c.length ? (c = b.closest(".rules-group-container"), a.detach().prependTo(c.find(".rules-list").eq(0))) : (c = b.closest(".rules-group-container"), c.length && a.detach().appendTo(c.find(".rules-list").eq(0))));
  }
  function e(a, b) {
    switch(b) {
      case "integer":
        return parseInt(a);
      case "double":
        return parseFloat(a);
      default:
        return a;
    }
  }
  function h(a) {
    return "string" !== typeof a ? a : a.replace(/[\0\n\r\b\\\'\"]/g, function(a) {
      switch(a) {
        case "\x00":
          return "\\0";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "\b":
          return "\\b";
        default:
          return "\\" + a;
      }
    }).replace(/\t/g, "\\t").replace(/\x1a/g, "\\Z");
  }
  function l(a, b) {
    b ? jQuery(a).css("display", "") : jQuery(a).css("display", "none");
  }
  var n = "string integer double date time datetime".split(" "), p = ["text", "radio", "checkbox", "select"], q = function(a, b) {
    console.log("QueryBuilder.construct");
    this.$el = a;
    this.init(b);
  };
  b.mixin(q);
  q.DEFAULTS = {filters:[], plugins:null, onValidationError:null, onAfterAddGroup:null, onAfterAddRule:null, onAfterCreateRuleInput:null, onAfterChangeOperator:null, display_errors:!0, allow_groups:-1, conditions:["AND", "OR"], default_condition:"AND", default_rule_flags:{filter_readonly:!1, operator_readonly:!1, value_readonly:!1, no_delete:!1}, template:{group:null, rule:null}, lang:{add_rule:"Add rule", add_group:"Add group", delete_rule:"Delete", delete_group:"Delete", condition_and:"AND", condition_or:"OR", 
  filter_select_placeholder:"------", operators:{equal:"equal", not_equal:"not equal", "in":"in", not_in:"not in", less:"less", less_or_equal:"less or equal", greater:"greater", greater_or_equal:"greater or equal", between:"between", begins_with:"begins with", not_begins_with:"doesn't begin with", contains:"contains", not_contains:"doesn't contain", ends_with:"ends with", not_ends_with:"doesn't end with", is_empty:"is empty", is_not_empty:"is not empty", is_null:"is null", is_not_null:"is not null"}, 
  errors:{no_filter:"No filter selected", empty_group:"The group is empty", radio_empty:"No value selected", checkbox_empty:"No value selected", select_empty:"No value selected", string_empty:"Empty value", string_exceed_min_length:"Must contain at least {0} characters", string_exceed_max_length:"Must not contain more than {0} characters", string_invalid_format:"Invalid format ({0})", number_nan:"Not a number", number_not_integer:"Not an integer", number_not_double:"Not a real number", number_exceed_min:"Must be greater than {0}", 
  number_exceed_max:"Must be lower than {0}", number_wrong_step:"Must be a multiple of {0}", datetime_invalid:"Invalid date format ({0})", datetime_exceed_min:"Must be after {0}", datetime_exceed_max:"Must be before {0}"}}, operators:[{type:"equal", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"not_equal", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"in", accept_values:1, apply_to:["string", "number", "datetime"]}, {type:"not_in", accept_values:1, apply_to:["string", 
  "number", "datetime"]}, {type:"less", accept_values:1, apply_to:["number", "datetime"]}, {type:"less_or_equal", accept_values:1, apply_to:["number", "datetime"]}, {type:"greater", accept_values:1, apply_to:["number", "datetime"]}, {type:"greater_or_equal", accept_values:1, apply_to:["number", "datetime"]}, {type:"between", accept_values:2, apply_to:["number", "datetime"]}, {type:"begins_with", accept_values:1, apply_to:["string"]}, {type:"not_begins_with", accept_values:1, apply_to:["string"]}, 
  {type:"contains", accept_values:1, apply_to:["string"]}, {type:"not_contains", accept_values:1, apply_to:["string"]}, {type:"ends_with", accept_values:1, apply_to:["string"]}, {type:"not_ends_with", accept_values:1, apply_to:["string"]}, {type:"is_empty", accept_values:0, apply_to:["string"]}, {type:"is_not_empty", accept_values:0, apply_to:["string"]}, {type:"is_null", accept_values:0, apply_to:["string", "number", "datetime"]}, {type:"is_not_null", accept_values:0, apply_to:["string", "number", 
  "datetime"]}], icons:{add_group:"glyphicon glyphicon-plus-sign", add_rule:"glyphicon glyphicon-plus", remove_group:"glyphicon glyphicon-remove", remove_rule:"glyphicon glyphicon-remove", error:"glyphicon glyphicon-warning-sign"}};
  q.plugins = {};
  q.define = function(a, b) {
    q.plugins[a] = b;
  };
  q.extend = function(b) {
    a.extend(q.prototype, b);
  };
  q.prototype.initPlugins = function() {
    if (this.settings.plugins) {
      var b = this, c = {};
      a.isArray(this.settings.plugins) ? a.each(this.settings.plugins, function(a, b) {
        c[b] = {};
      }) : a.each(this.settings.plugins, function(a, b) {
        c[a] = b;
      });
      a.each(c, function(c, d) {
        c in q.plugins ? q.plugins[c].call(b, d) : a.error('Unable to find plugin "' + c + '"');
      });
    }
  };
  q.prototype.init = function(b) {
    this.settings = a.extendext(!0, "replace", {}, q.DEFAULTS, b);
    this.status = {group_id:0, rule_id:0, generatedId:!1, has_optgroup:!1};
    !1 === this.settings.allow_groups ? this.settings.allow_groups = 0 : !0 === this.settings.allow_groups && (this.settings.allow_groups = -1);
    this.filters = this.settings.filters;
    this.lang = this.settings.lang;
    this.icons = this.settings.icons;
    this.operators = this.settings.operators;
    this.template = this.settings.template;
    null === this.template.group && (this.template.group = this.getGroupTemplate);
    null === this.template.rule && (this.template.rule = this.getRuleTemplate);
    this.$el.attr("id") || (this.$el.attr("id", "qb_" + Math.floor(99999 * Math.random())), this.status.generatedId = !0);
    this.$el_id = this.$el.attr("id");
    this.$el.addClass("query-builder");
    (!this.filters || 1 > this.filters.length) && a.error("Missing filters list");
    this.checkFilters();
    this.bindEvents();
    this.initPlugins();
    this.trigger("afterInit");
    b.rules ? this.setRules(b.rules) : this.addGroup(this.$el);
  };
  q.prototype.destroy = function() {
    this.trigger("beforeDestroy");
    this.status.generatedId && this.$el.removeAttr("id");
    this.$el.empty().off("click.queryBuilder change.queryBuilder").removeClass("query-builder").removeData("queryBuilder");
  };
  q.prototype.reset = function() {
    this.status.group_id = 1;
    this.status.rule_id = 0;
    this.$el.find(">.rules-group-container>.rules-group-body>.rules-list").empty();
    this.addRule(this.$el.find(">.rules-group-container"));
    this.trigger("afterReset");
  };
  q.prototype.clear = function() {
    this.status.group_id = 0;
    this.status.rule_id = 0;
    this.$el.empty();
    this.trigger("afterClear");
  };
  q.prototype.getRules = function() {
    this.clearErrors();
    var b = this, c = function v(c) {
      var d = {}, e = c.find(">.rules-group-body>.rules-list>*");
      d.condition = b.getGroupCondition(c);
      d.rules = [];
      for (var f = 0, g = e.length; f < g; f++) {
        var h = e.eq(f);
        if (h.hasClass("rule-container")) {
          var l = b.getRuleFilter(h);
          if ("-1" == l) {
            return b.triggerValidationError(["no_filter"], h, null, null, null), {};
          }
          var l = b.getFilterById(l), m = b.getOperatorByType(b.getRuleOperator(h)), n = null;
          if (0 !== m.accept_values) {
            var n = b.getRuleValue(h, l, m), r = b.validateValue(h, n, l, m);
            if (!0 !== r) {
              return b.triggerValidationError(r, h, n, l, m), {};
            }
          }
          h = {id:l.id, field:l.field, type:l.type, input:l.input, operator:m.type, value:n};
        } else {
          if (h = v(h), a.isEmptyObject(h)) {
            return {};
          }
        }
        d.rules.push(h);
      }
      return 0 === d.rules.length ? (b.triggerValidationError(["empty_group"], c, null, null, null), {}) : d;
    }(this.$el.find(">.rules-group-container"));
    return this.change("getRules", c);
  };
  q.prototype.setRules = function(b) {
    this.clear();
    b && b.rules && 0 !== b.rules.length || a.error("Incorrect data object passed");
    b = this.change("setRules", b);
    var c = this;
    (function v(b, e) {
      var f = c.addGroup(e, !1);
      e = f.find(">.rules-group-header input[name$=_cond]");
      void 0 === b.condition && (b.condition = c.settings.default_condition);
      for (var g = 0, h = c.settings.conditions.length; g < h; g++) {
        var l = c.settings.conditions[g];
        e.filter("[value=" + l + "]").prop("checked", b.condition.toUpperCase() == l.toUpperCase());
      }
      e.trigger("change");
      a.each(b.rules, function(b, e) {
        if (e.rules && 0 < e.rules.length) {
          -1 !== c.settings.allow_groups && c.settings.allow_groups < f.data("queryBuilder").level ? (c.reset(), a.error(d("No more than {0} groups are allowed", c.settings.allow_groups))) : v(e, f);
        } else {
          void 0 === e.id && a.error("Missing rule field id");
          void 0 === e.value && (e.value = "");
          void 0 === e.operator && (e.operator = "equal");
          b = c.addRule(f);
          var g = c.getFilterById(e.id), h = c.getOperatorByType(e.operator);
          b.find(".rule-filter-container select[name$=_filter]").val(e.id).trigger("change");
          b.find(".rule-operator-container select[name$=_operator]").val(e.operator).trigger("change");
          0 !== h.accept_values && c.setRuleValue(b, e.value, g, h);
          c.applyRuleFlags(b, e);
          g.onAfterSetValue && g.onAfterSetValue.call(c, b, e.value, g, h);
        }
      });
    })(b, this.$el);
  };
  q.prototype.checkFilters = function() {
    var b = [], c = this;
    a.each(this.filters, function(d, e) {
      e.id || a.error("Missing filter id: " + d);
      -1 != b.indexOf(e.id) && a.error("Filter already defined: " + e.id);
      b.push(e.id);
      e.type || a.error("Missing filter type: " + e.id);
      -1 == n.indexOf(e.type) && a.error("Invalid type: " + e.type);
      e.input ? "function" != typeof e.input && -1 == p.indexOf(e.input) && a.error("Invalid input: " + e.input) : e.input = "text";
      e.field || (e.field = e.id);
      e.label || (e.label = e.field);
      c.status.has_optgroup |= !!e.optgroup;
      e.optgroup || (e.optgroup = null);
      switch(e.type) {
        case "string":
          e.internalType = "string";
          break;
        case "integer":
        case "double":
          e.internalType = "number";
          break;
        case "date":
        case "time":
        case "datetime":
          e.internalType = "datetime";
      }
      switch(e.input) {
        case "radio":
        case "checkbox":
          (!e.values || 1 > e.values.length) && a.error("Missing values for filter: " + e.id);
      }
    });
    if (this.status.has_optgroup) {
      var d = [], e = [];
      a.each(this.filters, function(a, b) {
        b.optgroup ? (a = d.lastIndexOf(b.optgroup), -1 == a && (a = d.length)) : a = d.length;
        d.splice(a, 0, b.optgroup);
        e.splice(a, 0, b);
      });
      this.filters = e;
    }
    this.trigger("afterCheckFilters");
  };
  q.prototype.bindEvents = function() {
    var b = this;
    this.$el.on("change.queryBuilder", ".rules-group-header input[name$=_cond]", function() {
      var b = a(this);
      b.is(":checked") && (b.parent().addClass("active"), b.parent().siblings().removeClass("active"));
    });
    this.$el.on("change.queryBuilder", ".rule-filter-container select[name$=_filter]", function() {
      var c = a(this), d = c.closest(".rule-container");
      b.updateRuleFilter(d, c.val());
    });
    this.$el.on("change.queryBuilder", ".rule-operator-container select[name$=_operator]", function() {
      var c = a(this), d = c.closest(".rule-container");
      b.updateRuleOperator(d, c.val());
    });
    this.$el.on("click.queryBuilder", "[data-add=rule]", function() {
      var c = a(this).closest(".rules-group-container");
      b.addRule(c);
    });
    if (0 !== this.settings.allow_groups) {
      this.$el.on("click.queryBuilder", "[data-add=group]", function() {
        var c = a(this).closest(".rules-group-container");
        b.addGroup(c);
      });
    }
    this.$el.on("click.queryBuilder", "[data-delete=rule]", function() {
      a(this).closest(".rule-container").remove();
    });
    this.$el.on("click.queryBuilder", "[data-delete=group]", function() {
      var c = a(this).closest(".rules-group-container");
      b.deleteGroup(c);
    });
  };
  q.prototype.addGroup = function(b, c) {
    var d = this.nextGroupId(), e = (b.data("queryBuilder") || {}).level || 0;
    b = 0 === e ? b : b.find(">.rules-group-body>.rules-list");
    d = a(this.template.group.call(this, d, ++e));
    d.data("queryBuilder", {level:e});
    b.append(d);
    this.settings.onAfterAddGroup && this.settings.onAfterAddGroup.call(this, d);
    this.trigger("afterAddGroup", d);
    void 0 !== c && !0 !== c || this.addRule(d);
    return d;
  };
  q.prototype.deleteGroup = function(b) {
    if (b[0].id != this.$el_id + "_group_0") {
      this.trigger("beforeDeleteGroup", b);
      var c = this, d = !1;
      b.find(">.rules-group-body>.rules-list>*").each(function() {
        var b = a(this);
        b.hasClass("rule-container") ? b.data("queryBuilder").flags.no_delete ? d = !0 : b.remove() : d |= c.deleteGroup(b);
      });
      d || b.remove();
      return d;
    }
  };
  q.prototype.addRule = function(b) {
    var c = this.nextRuleId();
    b = b.find(">.rules-group-body>.rules-list");
    var d = a(this.template.rule.call(this, c)), c = a(this.getRuleFilterSelect(c));
    d.data("queryBuilder", {flags:{}});
    b.append(d);
    d.find(".rule-filter-container").append(c);
    this.settings.onAfterAddRule && this.settings.onAfterAddRule.call(this, d);
    this.trigger("afterAddRule", d);
    return d;
  };
  q.prototype.createRuleOperators = function(b, c) {
    var d = b.find(".rule-operator-container").empty();
    if (null !== c) {
      var e = this.getOperators(c), f = a(this.getRuleOperatorSelect(b.attr("id"), e));
      d.html(f);
      b.data("queryBuilder").operator = e[0];
      this.trigger("afterCreateRuleOperators", b, c, e);
    }
  };
  q.prototype.createRuleInput = function(b, c) {
    var d = b.find(".rule-value-container").empty();
    if (null !== c) {
      var e = this.getOperatorByType(this.getRuleOperator(b));
      if (0 !== e.accept_values) {
        for (var f = a(), g = 0; g < e.accept_values; g++) {
          var h = a(this.getRuleInput(b.attr("id"), c, g));
          0 < g && d.append(" , ");
          d.append(h);
          f = f.add(h);
        }
        l(d, !0);
        c.onAfterCreateRuleInput && c.onAfterCreateRuleInput.call(this, b, c);
        if (c.plugin) {
          f[c.plugin](c.plugin_config || {});
        }
        this.trigger("afterCreateRuleInput", b, c, e);
      }
    }
  };
  q.prototype.updateRuleFilter = function(a, b) {
    b = "-1" != b ? this.getFilterById(b) : null;
    this.createRuleOperators(a, b);
    this.createRuleInput(a, b);
    a.data("queryBuilder").filter = b;
  };
  q.prototype.updateRuleOperator = function(a, b) {
    var c = a.find(".rule-value-container"), d = this.getFilterById(this.getRuleFilter(a));
    b = this.getOperatorByType(b);
    if (0 === b.accept_values) {
      l(c, !1);
    } else {
      l(c, !0);
      var e = a.data("queryBuilder").operator;
      (c.is(":empty") || b.accept_values != e.accept_values) && this.createRuleInput(a, d);
    }
    a.data("queryBuilder").operator = b;
    d.onAfterChangeOperator && d.onAfterChangeOperator.call(this, a, d, b);
    this.trigger("afterChangeOperator", a, d, b);
  };
  q.prototype.validateValue = function(a, b, c, d) {
    var e = c.validation || {}, f = !0;
    1 == d.accept_values && (b = [b]);
    if (e.callback) {
      return f = e.callback.call(this, b, c, d, a), this.change("validateValue", f, a, b, c, d);
    }
    for (var g = 0; g < d.accept_values; g++) {
      switch(c.input) {
        case "radio":
          void 0 === b[g] && (f = ["radio_empty"]);
          break;
        case "checkbox":
          0 === b[g].length && (f = ["checkbox_empty"]);
          break;
        case "select":
          c.multiple ? 0 === b[g].length && (f = ["select_empty"]) : void 0 === b[g] && (f = ["select_empty"]);
          break;
        default:
          switch(c.internalType) {
            case "string":
              if (void 0 !== e.min) {
                if (b[g].length < e.min) {
                  f = ["string_exceed_min_length", e.min];
                  break;
                }
              } else {
                if (1000 === b[g].length) {
                  f = ["string_empty"];
                  break;
                }
              }
              if (void 0 !== e.max && b[g].length > e.max) {
                f = ["string_exceed_max_length", e.max];
                break;
              }
              e.format && !e.format.test(b[g]) && (f = ["string_invalid_format", e.format]);
              break;
            case "number":
              if (isNaN(b[g])) {
                f = ["number_nan"];
                break;
              }
              if ("integer" == c.type) {
                if (parseInt(b[g]) != b[g]) {
                  f = ["number_not_integer"];
                  break;
                }
              } else {
                if (parseFloat(b[g]) != b[g]) {
                  f = ["number_not_double"];
                  break;
                }
              }
              if (void 0 !== e.min && b[g] < e.min) {
                f = ["number_exceed_min", e.min];
                break;
              }
              if (void 0 !== e.max && b[g] > e.max) {
                f = ["number_exceed_max", e.max];
                break;
              }
              if (void 0 !== e.step) {
                var h = b[g] / e.step;
                parseInt(h) != h && (f = ["number_wrong_step", e.step]);
              }
              break;
            case "datetime":
              window.moment && e.format && (h = moment(b[g], e.format), h.isValid() ? e.min && h < moment(e.min, e.format) ? f = ["datetime_exceed_min", e.min] : e.max && h > moment(e.max, e.format) && (f = ["datetime_exceed_max", e.max]) : f = ["datetime_invalid"]);
          }
      }
      if (!0 !== f) {
        break;
      }
    }
    return this.change("validateValue", f, a, b, c, d);
  };
  q.prototype.clearErrors = function() {
    this.$el.find(".has-error").removeClass("has-error");
  };
  q.prototype.triggerValidationError = function(b, c, e, f, g) {
    a.isArray(b) || (b = [b]);
    f && f.onValidationError && f.onValidationError.call(this, c, b, e, f, g);
    this.settings.onValidationError && this.settings.onValidationError.call(this, c, b, e, f, g);
    e = jQuery.Event("validationError.queryBuilder", {error:b, filter:f, operator:g, value:e, targetRule:c[0], builder:this});
    this.$el.trigger(e);
    this.settings.display_errors && !e.isDefaultPrevented() && (e = a.extend([], b, [this.lang.errors[b[0]] || b[0]]), c.addClass("has-error"), c.find(".error-container").eq(0).attr("title", d.apply(null, e)));
    this.trigger("validationError", c, b);
  };
  q.prototype.nextGroupId = function() {
    return this.$el_id + "_group_" + this.status.group_id++;
  };
  q.prototype.nextRuleId = function() {
    return this.$el_id + "_rule_" + this.status.rule_id++;
  };
  q.prototype.getOperators = function(a) {
    "string" === typeof a && (a = this.getFilterById(a));
    for (var b = [], c = 0, d = this.operators.length; c < d; c++) {
      if (a.operators) {
        if (-1 == a.operators.indexOf(this.operators[c].type)) {
          continue;
        }
      } else {
        if (-1 == this.operators[c].apply_to.indexOf(a.internalType)) {
          continue;
        }
      }
      b.push(this.operators[c]);
    }
    a.operators && b.sort(function(b, c) {
      return a.operators.indexOf(b.type) - a.operators.indexOf(c.type);
    });
    return this.change("getOperators", b, a);
  };
  q.prototype.getFilterById = function(b) {
    for (var c = 0, d = this.filters.length; c < d; c++) {
      if (this.filters[c].id == b) {
        return this.filters[c];
      }
    }
    a.error("Undefined filter: " + b);
  };
  q.prototype.getOperatorByType = function(b) {
    for (var c = 0, d = this.operators.length; c < d; c++) {
      if (this.operators[c].type == b) {
        return this.operators[c];
      }
    }
    a.error("Undefined operator: " + b);
  };
  q.prototype.getGroupCondition = function(a) {
    return a.find(">.rules-group-header input[name$=_cond]:checked").val();
  };
  q.prototype.getRuleFilter = function(a) {
    return a.find(".rule-filter-container select[name$=_filter]").val();
  };
  q.prototype.getRuleOperator = function(a) {
    return a.find(".rule-operator-container select[name$=_operator]").val();
  };
  q.prototype.getRuleValue = function(b, c, d) {
    c = c || this.getFilterById(this.getRuleFilter(b));
    d = d || this.getOperatorByType(this.getRuleOperator(b));
    for (var e = [], f = [], g = b.find(".rule-value-container"), h = 0; h < d.accept_values; h++) {
      var l = b[0].id + "_value_" + h;
      switch(c.input) {
        case "radio":
          e.push(g.find("input[name=" + l + "]:checked").val());
          break;
        case "checkbox":
          g.find("input[name=" + l + "]:checked").each(function() {
            f.push(a(this).val());
          });
          e.push(f);
          break;
        case "select":
          c.multiple ? (g.find("select[name=" + l + "] option:selected").each(function() {
            f.push(a(this).val());
          }), e.push(f)) : e.push(g.find("select[name=" + l + "] option:selected").val());
          break;
        default:
          e.push(g.find("[name=" + l + "]").val());
      }
    }
    1 == d.accept_values && (e = e[0]);
    c.valueParser && (e = c.valueParser.call(this, b, e, c, d));
    return this.change("getRuleValue", e, b, c, d);
  };
  q.prototype.setRuleValue = function(b, c, d, e) {
    d = d || this.getFilterById(this.getRuleFilter(b));
    e = e || this.getOperatorByType(this.getRuleOperator(b));
    this.trigger("beforeSetRuleValue", b, c, d, e);
    if (d.valueSetter) {
      d.valueSetter.call(this, b, c, d, e);
    } else {
      var f = b.find(".rule-value-container");
      1 == e.accept_values && (c = [c]);
      for (var g = 0; g < e.accept_values; g++) {
        var h = b[0].id + "_value_" + g;
        switch(d.input) {
          case "radio":
            f.find("input[name=" + h + '][value="' + c[g] + '"]').prop("checked", !0).trigger("change");
            break;
          case "checkbox":
            a.isArray(c[g]) || (c[g] = [c[g]]);
            a.each(c[g], function(a, b) {
              f.find("input[name=" + h + '][value="' + b + '"]').prop("checked", !0).trigger("change");
            });
            break;
          case "select":
            f.find("select[name=" + h + "]").val(c[g]).trigger("change");
            break;
          default:
            f.find("input[name=" + h + "]").val(c[g]).trigger("change");
        }
      }
    }
    this.trigger("afterSetRuleValue", b, c, d, e);
  };
  q.prototype.applyRuleFlags = function(a, b) {
    var c = this.getRuleFlags(b);
    a.data("queryBuilder").flags = c;
    c.filter_readonly && a.find("select[name$=_filter]").prop("disabled", !0);
    c.operator_readonly && a.find("select[name$=_operator]").prop("disabled", !0);
    c.value_readonly && a.find("input[name*=_value_], select[name*=_value_]").prop("disabled", !0);
    c.no_delete && a.find("[data-delete=rule]").remove();
    this.trigger("afterApplyRuleFlags", a, b, c);
  };
  q.prototype.getGroupTemplate = function(a, b) {
    a = '<dl id="' + a + '" class="style-scope simpl-filter rules-group-container"><dt class="style-scope simpl-filter rules-group-header"><div class="style-scope simpl-filter btn-group pull-right group-actions"><paper-button type="button" class="style-scope simpl-filter button_secondary_raised" data-add="rule"><i class="style-scope simpl-filter ' + this.icons.add_rule + '"></i> ' + this.lang.add_rule + "</paper-button>" + (-1 === this.settings.allow_groups || this.settings.allow_groups >= b ? '<paper-button type="button" class="style-scope simpl-filter button_secondary_raised" data-add="group"><i class="style-scope simpl-filter ' + 
    this.icons.add_group + '"></i> ' + this.lang.add_group + "</paper-button>" : "") + (1 < b ? '<paper-button type="button" class="style-scope simpl-filter small button_error_raised" data-delete="group"><i class="' + this.icons.remove_group + '"></i> ' + this.lang.delete_group + "</paper-button>" : "") + '</div><div class="style-scope simpl-filter btn-group group-conditions">' + this.getGroupConditions(a) + "</div>" + (this.settings.display_errors ? '<div class="style-scope simpl-filter error-container" data-toggle="tooltip" data-placement="right"><i class="style-scope simpl-filter ' + 
    this.icons.error + '"></i></div>' : "") + '</dt><dd class="style-scope simpl-filter rules-group-body"><ul class="style-scope simpl-filter rules-list"></ul></dd></dl>';
    return this.change("getGroupTemplate", a, b);
  };
  q.prototype.getGroupConditions = function(a) {
    for (var b = "", c = 0, d = this.settings.conditions.length; c < d; c++) {
      var e = this.settings.conditions[c], f = e == this.settings.default_condition, g = this.lang["condition_" + e.toLowerCase()] || e, b = b + ('<label class="btn btn-xs btn-primary ' + (f ? "active" : "") + '"><input type="radio" name="' + a + '_cond" value="' + e + '" ' + (f ? "checked" : "") + "> " + g + "</label>");
    }
    return this.change("getGroupConditions", b);
  };
  q.prototype.getRuleTemplate = function(a) {
    return this.change("getRuleTemplate", '<li id="' + a + '" class="style-scope simpl-filter rule-container"><div class="style-scope simpl-filter rule-header"><div class="style-scope simpl-filter btn-group pull-right rule-actions"><paper-button type="button" class="style-scope simpl-filter small button_error_raised" data-delete="rule"><i class="style-scope simpl-filter ' + this.icons.remove_rule + '"></i> ' + this.lang.delete_rule + "</paper-button></div></div>" + (this.settings.display_errors ? 
    '<div class="style-scope simpl-filter error-container"><i class="' + this.icons.error + '"></i></div>' : "") + '<div class="style-scope simpl-filter rule-filter-container"></div><div class="style-scope simpl-filter rule-operator-container"></div><div class="style-scope simpl-filter rule-value-container"></div></li>');
  };
  q.prototype.getRuleFilterSelect = function(b) {
    var c = null, d = '<select name="' + b + '_filter">', d = d + ('<option value="-1">' + this.lang.filter_select_placeholder + "</option>");
    a.each(this.filters, function(a, b) {
      c != b.optgroup && (null !== c && (d += "</optgroup>"), c = b.optgroup, null !== c && (d += '<optgroup label="' + c + '">'));
      d += '<option value="' + b.id + '">' + b.label + "</option>";
    });
    null !== c && (d += "</optgroup>");
    d += "</select>";
    return this.change("getRuleFilterSelect", d);
  };
  q.prototype.getRuleOperatorSelect = function(a, b) {
    a = '<select name="' + a + '_operator">';
    for (var c = 0, d = b.length; c < d; c++) {
      a += '<option value="' + b[c].type + '">' + (this.lang.operators[b[c].type] || b[c].type) + "</option>";
    }
    return this.change("getRuleOperatorSelect", a + "</select>");
  };
  q.prototype.getRuleInput = function(a, b, d) {
    var e = this.$el.find("#" + a), f = b.validation || {}, g = a + "_value_" + d, h = "";
    if ("function" === typeof b.input) {
      h = b.input.call(this, e, b, g);
    } else {
      switch(b.input) {
        case "radio":
          var l = b.vertical ? " class=block" : "";
          c(b.values, function(a, b) {
            h += "<label" + l + '><input type="radio" name="' + g + '" value="' + a + '"> ' + b + "</label> ";
          });
          break;
        case "checkbox":
          l = b.vertical ? " class=block" : "";
          c(b.values, function(a, b) {
            h += "<label" + l + '><input type="checkbox" name="' + g + '" value="' + a + '"> ' + b + "</label> ";
          });
          break;
        case "select":
          h += '<select name="' + g + '"' + (b.multiple ? " multiple" : "") + ">";
          c(b.values, function(a, b) {
            h += '<option value="' + a + '"> ' + b + "</option> ";
          });
          h += "</select>";
          break;
        default:
          switch(b.internalType) {
            case "number":
              h += '<input type="number" name="' + g + '"';
              void 0 !== f.step && (h += ' step="' + f.step + '"');
              void 0 !== f.min && (h += ' min="' + f.min + '"');
              void 0 !== f.max && (h += ' max="' + f.max + '"');
              b.placeholder && (h += ' placeholder="' + b.placeholder + '"');
              h += ">";
              break;
            default:
              h += '<input type="text" name="' + g + '"', b.placeholder && (h += ' placeholder="' + b.placeholder + '"'), h += ">";
          }
      }
    }
    return this.change("getRuleInput", h, e, b, g);
  };
  q.prototype.getRuleFlags = function(b) {
    var c = a.extend({}, this.settings.default_rule_flags);
    b.readonly && a.extend(c, {filter_readonly:!0, operator_readonly:!0, value_readonly:!0, no_delete:!0});
    b.flags && a.extend(c, b.flags);
    return this.change("getRuleFlags", c, b);
  };
  a.fn.queryBuilder = function(b) {
    1 < this.length && a.error("Unable to initialize on multiple target");
    var c = this.data("queryBuilder"), d = "object" == typeof b && b || {};
    if (!c && "destroy" == b) {
      return this;
    }
    c || this.data("queryBuilder", new q(this, d));
    return "string" == typeof b ? c[b].apply(c, Array.prototype.slice.call(arguments, 1)) : this;
  };
  a.fn.queryBuilder.defaults = {set:function(b) {
    a.extendext(!0, "replace", q.DEFAULTS, b);
  }, get:function(b) {
    var c = q.DEFAULTS;
    b && (c = c[b]);
    return a.extend(!0, {}, c);
  }};
  a.fn.queryBuilder.constructor = q;
  a.fn.queryBuilder.extend = q.extend;
  a.fn.queryBuilder.define = q.define;
  a.fn.queryBuilder.define("bt-selectpicker", function(b) {
    a.fn.selectpicker && a.fn.selectpicker.Constructor || a.error('Bootstrap Select is required to use "bt-selectpicker" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');
    b = a.extend({container:"body", style:"btn-inverse btn-xs", width:"auto", showIcon:!1}, b || {});
    this.on("afterAddRule", function(a) {
      a.find(".rule-filter-container select").selectpicker(b);
    });
    this.on("afterCreateRuleOperators", function(a) {
      a.find(".rule-operator-container select").selectpicker(b);
    });
  });
  a.fn.queryBuilder.define("bt-tooltip-errors", function(b) {
    a.fn.tooltip && a.fn.tooltip.Constructor && a.fn.tooltip.Constructor.prototype.fixTitle || a.error('Bootstrap Tooltip is required to use "bt-tooltip-errors" plugin. Get it here: http://getbootstrap.com');
    b = a.extend({placement:"right"}, b || {});
    this.on("ruleTemplate", function(a) {
      return a.replace('class="error-container"', 'class="error-container" data-toggle="tooltip"');
    });
    this.on("validationError", function(a) {
      a.find(".error-container").eq(0).tooltip(b).tooltip("hide").tooltip("fixTitle");
    });
  });
  a.fn.queryBuilder.defaults.set({mongoOperators:{equal:function(a) {
    return a[0];
  }, not_equal:function(a) {
    return {$ne:a[0]};
  }, in:function(a) {
    return {$in:a};
  }, not_in:function(a) {
    return {$nin:a};
  }, less:function(a) {
    return {$lt:a[0]};
  }, less_or_equal:function(a) {
    return {$lte:a[0]};
  }, greater:function(a) {
    return {$gt:a[0]};
  }, greater_or_equal:function(a) {
    return {$gte:a[0]};
  }, between:function(a) {
    return {$gte:a[0], $lte:a[1]};
  }, begins_with:function(a) {
    return {$regex:"^" + f(a[0])};
  }, not_begins_with:function(a) {
    return {$not:{$regex:"^" + f(a[0])}};
  }, contains:function(a) {
    return {$regex:f(a[0])};
  }, not_contains:function(a) {
    return {$not:{$regex:f(a[0])}};
  }, ends_with:function(a) {
    return {$regex:f(a[0]) + "$"};
  }, not_ends_with:function(a) {
    return {$not:{$regex:f(a[0]) + "$"}};
  }, is_empty:function(a) {
    return "";
  }, is_not_empty:function(a) {
    return {$ne:""};
  }, is_null:function(a) {
    return null;
  }, is_not_null:function(a) {
    return {$ne:null};
  }}});
  a.fn.queryBuilder.extend({getMongo:function(b) {
    b = void 0 === b ? this.getRules() : b;
    var c = this;
    return function v(b) {
      b.condition || (b.condition = c.settings.default_condition);
      -1 === ["AND", "OR"].indexOf(b.condition.toUpperCase()) && a.error("Unable to build MongoDB query with " + b.condition + " condition");
      if (!b.rules) {
        return {};
      }
      var d = [];
      a.each(b.rules, function(b, f) {
        if (f.rules && 0 < f.rules.length) {
          d.push(v(f));
        } else {
          b = c.settings.mongoOperators[f.operator];
          var g = c.getOperatorByType(f.operator), h = [];
          void 0 === b && a.error("MongoDB operation unknown for operator " + f.operator);
          g.accept_values && (f.value instanceof Array || (f.value = [f.value]), f.value.forEach(function(a, b) {
            h.push(e(a, f.type));
          }));
          g = {};
          g[f.field] = b.call(c, h);
          d.push(g);
        }
      });
      var f = {};
      f["$" + b.condition.toLowerCase()] = d;
      return f;
    }(b);
  }});
  a.fn.queryBuilder.defaults.set({default_rule_flags:{no_sortable:!1}, icons:{sort:"glyphicon glyphicon-sort"}});
  a.fn.queryBuilder.define("sortable", function(b) {
    this.on("afterInit", function() {
      a.event.props.push("dataTransfer");
      var b, c, d = this;
      this.$el.on("mouseover", ".drag-handle", function() {
        d.$el.find(".rule-container, .rules-group-container").attr("draggable", !0);
      });
      this.$el.on("mouseout", ".drag-handle", function() {
        d.$el.find(".rule-container, .rules-group-container").removeAttr("draggable");
      });
      this.$el.on("dragstart", "[draggable]", function(d) {
        d.stopPropagation();
        d.dataTransfer.setData("text", "drag");
        c = a(d.target);
        b = a('<div class="rule-placeholder">&nbsp;</div>');
        b.css("min-height", c.height());
        b.insertAfter(c);
        setTimeout(function() {
          l(c, !1);
        }, 0);
      });
      this.$el.on("dragenter", "[draggable]", function(c) {
        c.preventDefault();
        c.stopPropagation();
        g(b, a(c.target));
      });
      this.$el.on("dragover", "[draggable]", function(a) {
        a.preventDefault();
        a.stopPropagation();
      });
      this.$el.on("drop", function(b) {
        b.preventDefault();
        b.stopPropagation();
        g(c, a(b.target));
      });
      this.$el.on("dragend", "[draggable]", function(a) {
        a.preventDefault();
        a.stopPropagation();
        l(c, !0);
        b.remove();
        c = b = null;
        d.$el.find(".rule-container, .rules-group-container").removeAttr("draggable");
      });
    });
    this.on("afterApplyRuleFlags", function(a, b, c) {
      c.no_sortable && a.find(".drag-handle").remove();
    });
    this.on("getGroupTemplate", function(b, c) {
      1 < c && (b = a(b), b.find(".group-conditions").after('<div class="drag-handle"><i class="' + this.icons.sort + '"></i></div>'), b = b.prop("outerHTML"));
      return b;
    });
    this.on("getRuleTemplate", function(b) {
      b = a(b);
      b.find(".rule-header").after('<div class="drag-handle"><i class="' + this.icons.sort + '"></i></div>');
      return b.prop("outerHTML");
    });
  });
  a.fn.queryBuilder.defaults.set({sqlOperators:{equal:"= ?", not_equal:"!= ?", in:{op:"IN(?)", list:!0, sep:", "}, not_in:{op:"NOT IN(?)", list:!0, sep:", "}, less:"< ?", less_or_equal:"<= ?", greater:"> ?", greater_or_equal:">= ?", between:{op:"BETWEEN ?", list:!0, sep:" AND "}, begins_with:{op:"LIKE(?)", fn:function(a) {
    return a + "%";
  }}, not_begins_with:{op:"NOT LIKE(?)", fn:function(a) {
    return a + "%";
  }}, contains:{op:"LIKE(?)", fn:function(a) {
    return "%" + a + "%";
  }}, not_contains:{op:"NOT LIKE(?)", fn:function(a) {
    return "%" + a + "%";
  }}, ends_with:{op:"LIKE(?)", fn:function(a) {
    return "%" + a;
  }}, not_ends_with:{op:"NOT LIKE(?)", fn:function(a) {
    return "%" + a;
  }}, is_empty:'== ""', is_not_empty:'!= ""', is_null:"IS NULL", is_not_null:"IS NOT NULL"}});
  a.fn.queryBuilder.extend({getSQL:function(b, c, d) {
    d = void 0 === d ? this.getRules() : d;
    b = !0 === b || void 0 === b ? "question_mark" : b;
    c = c || void 0 === c ? "\n" : " ";
    var f = this, g = 1, l = [];
    d = function H(d) {
      d.condition || (d.condition = f.settings.default_condition);
      -1 === ["AND", "OR"].indexOf(d.condition.toUpperCase()) && a.error("Unable to build SQL query with " + d.condition + " condition");
      if (!d.rules) {
        return "";
      }
      var n = [];
      a.each(d.rules, function(d, m) {
        if (m.rules && 0 < m.rules.length) {
          n.push("(" + c + H(m) + c + ")" + c);
        } else {
          var p = f.getSqlOperator(m.operator);
          d = f.getOperatorByType(m.operator);
          var q = "";
          !1 === p && a.error("SQL operation unknown for operator " + m.operator);
          d.accept_values && (m.value instanceof Array ? !p.list && 1 < m.value.length && a.error("Operator " + m.operator + " cannot accept multiple values") : m.value = [m.value], m.value.forEach(function(a, c) {
            0 < c && (q += p.sep);
            "integer" == m.type || "double" == m.type ? a = e(a, m.type) : b || (a = h(a));
            p.fn && (a = p.fn(a));
            b ? (q = "question_mark" == b ? q + "?" : q + ("$" + g), l.push(a), g++) : ("string" === typeof a && (a = "'" + a + "'"), q += a);
          }));
          n.push(m.field + " " + p.op.replace(/\?/, q));
        }
      });
      return n.join(" " + d.condition + c);
    }(d);
    return b ? {sql:d, params:l} : {sql:d};
  }, getSqlOperator:function(a) {
    a = this.settings.sqlOperators[a];
    if (void 0 === a) {
      return !1;
    }
    "string" === typeof a && (a = {op:a});
    a.list || (a.list = !1);
    a.list && !a.sep && (a.sep = ", ");
    return a;
  }});
});
Polymer({is:"simpl-filter", behaviors:[StyleScopeBehavior, TranslationsBehavior], searchMode:"simple", isBuilderInitialized:!1, searchModeIcon:"expand-more", properties:{namespace:{observer:"namespaceChanged", type:String}, entity:{observer:"entityChanged", type:String}, withCancel:{type:Boolean, value:!1}, isInited:{type:Boolean, value:!1}, filter:{value:null, notify:!0, type:String}}, getSearchModeIcon:function() {
  return this.searchModeIcon;
}, namespaceChanged:function() {
  console.log("filter.namespaceChanged:", this.namespace + "/" + this.entity);
  null != this.entity && this.init();
}, entityChanged:function() {
  console.log("filter.entityChanged:", this.namespace + "/" + this.entity);
  null != this.namespace && this.init();
}, ready:function() {
}, doSearch:function() {
  null != this.entity && this.search();
}, attached:function() {
  !0 !== this.isInited && this.init();
}, init:function() {
  console.debug("Filter.attached.Entity:", this.entity + "/namespace:" + this.namespace);
  if (null != this.entity && null != this.namespace) {
    var a = simpl4.util.SearchFilter.createSearchFilter(this.entity, {namespace:this.namespace});
    console.debug("Builder;", this.builder);
    $(this.$.builder).queryBuilder({icons:{add_group:"fa fa-plus-circle", add_rule:"fa fa-plus", remove_group:"fa fa-minus", remove_rule:"fa fa-minus", error:"fa fa-bug", sort:"fa fa-arrows-v"}, sortable:!1, display_errors:!0, filters:a, lang:this.getLang()});
    $(this.$.builder).queryBuilder("setRules", {condition:"AND", rules:[{id:a[0].id, operator:a[0].operators[0], value:""}]});
    this.isBuilderInitialized = !0;
    this.searchMode = "simple";
    this.setSearchMode(this.searchMode);
    this.async(function() {
      this.setStyleScope(this.$.builder, "style-scope", this.tagName.toLowerCase());
    });
    this.isInited = !0;
  }
}, renameOne:function(a, b, c) {
  c[b] = c[a];
  delete c[a];
}, deleteOne:function(a, b) {
  delete b[a];
}, connectorToLowerCase:function(a) {
  void 0 !== a.connector && (a.connector = a.connector.toLowerCase());
}, opToSimpl4:function(a) {
  void 0 !== a.op && (a.op = simpl4.util.SearchFilter.mapOpToSimpl4(a.op));
}, renameToSimpl4:function(a) {
  this.renameOne("condition", "connector", a);
  this.connectorToLowerCase(a);
  this.renameOne("value", "data", a);
  this.renameOne("operator", "op", a);
  this.deleteOne("input", a);
  this.deleteOne("type", a);
  this.deleteOne("id", a);
  this.opToSimpl4(a);
  var b = a.rules || [];
  a.children = b;
  delete a.rules;
  if (0 < b.length) {
    for (var c = 0; c < b.length; c++) {
      this.renameToSimpl4(b[c]);
    }
  }
  return a;
}, renameFromSimpl4:function(a, b) {
  this.renameOne("connector", "condition", a);
  this.renameOne("data", "value", a);
  this.renameOne("op", "operator", a);
  a.input = b.edittype;
  a.type = b.datetype;
  a.id = a.field;
  var c = a.children || [];
  a.rules = c;
  delete a.children;
  if (0 < c.length) {
    for (var d = 0; d < c.length; d++) {
      this.renameFromSimpl4(c[d], b);
    }
  }
  return a;
}, getRules:function() {
  return this.renameToSimpl4($(this.$.builder).queryBuilder("getRules"));
}, setRules:function(a) {
  $(this.$.builder).queryBuilder("setRules", a);
}, reset:function(a) {
  $(this.$.builder).queryBuilder("reset");
}, loadSearch:function(a) {
}, saveSearch:function(a) {
}, toggleSearchMode:function() {
  this.searchMode = "complex" == this.searchMode ? "simple" : "complex";
  this.setSearchMode(this.searchMode);
  this.searchTooltip = "complex" == this.searchMode ? tr("button.complex-search") : tr("button.simple-search");
}, setSearchMode:function(a) {
  console.log("setSearchMode:", a);
  0 != this.isBuilderInitialized && ("complex" == a ? (this.searchModeIcon = "expand-less", Polymer.dom(this.root).querySelector(".rules-group-header").removeAttribute("invisible"), Polymer.dom(this.root).querySelector(".rule-header").removeAttribute("invisible"), $(Polymer.dom(this.root).querySelectorAll(".rule-container")).removeAttr("simpleSearch"), $(Polymer.dom(this.root).querySelectorAll(".rules-group-container")).removeAttr("simpleSearch")) : (this.searchModeIcon = "expand-more", Polymer.dom(this.root).querySelector(".rules-group-header").setAttribute("invisible", 
  ""), Polymer.dom(this.root).querySelector(".rule-header").setAttribute("invisible", ""), $(Polymer.dom(this.root).querySelectorAll(".rule-container")).attr("simpleSearch", ""), $(Polymer.dom(this.root).querySelectorAll(".rules-group-container")).attr("simpleSearch", "")));
}, cancel:function(a) {
  this.fire("cancel", {});
}, search:function(a) {
  this.getRules();
  a = this.getRules();
  a.entity = this.entity;
  console.log("Filter.namespace:", this.namespace);
  a.namespace = this.namespace;
  this.set("filter", a);
}, getLang:function() {
  return {add_rule:tr("querybuilder.add_rule"), add_group:tr("querybuilder.add_group"), delete_rule:tr("querybuilder.delete_rule"), delete_group:tr("querybuilder.delete_group"), condition_and:tr("querybuilder.condition_and"), condition_or:tr("querybuilder.condition_or"), filter_select_placeholder:tr("querybuilder.filter_select_placeholder"), operators:{equal:tr("querybuilder.equal"), not_equal:tr("querybuilder.not_equal"), "in":tr("querybuilder.in"), not_in:tr("querybuilder.not_in"), less:tr("querybuilder.less"), 
  less_or_equal:tr("querybuilder.less_or_equal"), greater:tr("querybuilder.greater"), greater_or_equal:tr("querybuilder.greater_or_equal"), begins_with:tr("querybuilder.begins_with"), not_begins_with:tr("querybuilder.not_begins_with"), contains:tr("querybuilder.contains"), not_contains:tr("querybuilder.not_contains"), ends_with:tr("querybuilder.ends_with"), not_ends_with:tr("querybuilder.not_ends_with"), is_empty:tr("querybuilder.is_empty"), is_not_empty:tr("querybuilder.is_not_empty"), is_null:tr("querybuilder.is_null"), 
  is_not_null:tr("querybuilder.is_not_null")}};
}});
Polymer({is:"simpl-embeddedlist", behaviors:[Polymer.IronA11yKeysBehavior, DialogBehavior, TranslationsBehavior], properties:{namespace:{value:null, type:String}, entity:{value:null, type:String}, mode:{value:"add", type:String}, height:{value:"150", type:String}, buttons:{value:"save,add,del,edit,cancel", type:String}, buttonList:{type:String}}, observers:["buttonsChanged(buttons)", "heightChanged(height)", "entityChanged(entity,namespace)"], buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", position:"global", text:tr("button.new"), disabled:!1}, edit:{action:this.editAction, icon:"create", position:"global", text:tr("button.edit"), disabled:!0}, del:{action:this.delAction, icon:"delete", position:"global", text:tr("button.del"), disabled:!0}, save:{action:this.saveAction, icon:"undo", position:"form", text:tr("button.take_over"), disabled:!1}, cancel:{action:this.cancelAction, icon:"cancel", position:"form", text:tr("button.cancel"), 
  disabled:!1}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, heightChanged:function() {
  console.log("embeddedlist.height:" + this.height);
  this.dataTablesOptions = {paging:!1, dom:"ft", scrollY:this.height + "px"};
  this.data = [];
}, getData:function() {
  return this.data;
}, setData:function(a) {
  this.data = a;
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, isGlobalButton:function(a) {
  console.log("isGlobalButton:", a.position);
  return "global" == a.position;
}, isFormButton:function(a) {
  console.log("isFormButton:", a.position);
  return "form" == a.position;
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, onRowSelected:function(a) {
  this.currentData = a.detail.rows[0];
  this.setButtonState("edit", !0);
  this.setButtonState("del", !0);
  a.detail.doubleTap && this.editAction();
}, addAction:function() {
  this.entityName = this.entity;
  console.log("embeddedlist.entity:", this.entity);
  this.mode = "add";
  this.$.formid.setData({});
  this.async(function() {
    this.openDialog(this.$.formDialog);
  }, 50);
}, editAction:function() {
  this.mode = "edit";
  this.$.formid.setData(this.currentData);
  this.async(function() {
    this.openDialog(this.$.formDialog);
  }, 50);
}, delAction:function() {
  this.setButtonState("del", !1);
  this.mode = "del";
  this._saveAction();
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  this._saveAction();
}, cancelAction:function(a) {
  this.closeDialog(this.$.formDialog);
}, saveAction:function() {
  this.$.formid.validate() && this._saveAction();
}, _saveAction:function() {
  this.setButtonState("edit", !1);
  this.setButtonState("del", !1);
  this.cancelAction();
  var a = this.$.formid.getData(), b = clone(this.data) || [];
  this.data = [];
  if ("add" == this.mode) {
    a._id = this.guid(), b.push(a);
  } else {
    if ("del" == this.mode) {
      a = this.currentData;
      var c = _.findIndex(b, function(b) {
        return b._id == a._id;
      });
      b.splice(c, 1);
    } else {
      c = _.findIndex(b, function(b) {
        return b._id == a._id;
      }), simpl4.util.Merge.merge(!1, b[c], a);
    }
  }
  this.async(function() {
    this.data = b;
    this.fire("changed", {data:this.data});
  }, 150);
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
  this.setFormSpec(this.namespace, this.entity);
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
  }
}, getColumns:function(a) {
  console.log("getColumns:", a + "/" + this.namespace);
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "main-grid", !1);
    var d = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(d, a);
  } catch (e) {
    console.error("getSelectableFields:", e);
    return;
  }
  return d;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  for (var c = [], d = 0; d < a.length; d++) {
    var e = a[d];
    if ("id" != e.id) {
      var f = {};
      f.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + e.id);
      f.title = f.label;
      f.data = e.name;
      c.push(f);
    }
  }
  console.debug("embeddedlist.meta:", c);
  this.meta = c;
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}, guid:function() {
  var a = 46656 * Math.random() | 0, b = 46656 * Math.random() | 0, a = ("000" + a.toString(36)).slice(-3), b = ("000" + b.toString(36)).slice(-3);
  return a + b;
}, getToast:function() {
  var a = document.querySelector("#toastGlobal");
  null == a && (a = this.querySelector("#toastId"));
  return a;
}});
Polymer({is:"simpl-linkedlist", behaviors:[Polymer.IronA11yKeysBehavior, DialogBehavior, TranslationsBehavior], properties:{namespace:{value:null, type:String}, entity:{value:null, type:String}, height:{value:"150", type:String}, buttons:{value:"select,del", type:String}, buttonList:{type:String}}, observers:["buttonsChanged(buttons)", "heightChanged(height)", "entityChanged(entity,namespace)"], buttonsChanged:function() {
  var a = {select:{action:this.openSelectDialog, icon:"add", text:tr("button.select"), disabled:!1}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, heightChanged:function() {
  console.log("linkedlist.height:" + this.height);
  this.dataTablesOptions = {paging:!1, dom:"ft", scrollY:this.height + "px"};
  this.data = [];
}, getData:function() {
  return this.data;
}, setData:function(a) {
  this.data = a;
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, onRowSelected:function(a) {
  this.currentData = a.detail.rows[0];
  this.setButtonState("del", !0);
}, openSelectDialog:function() {
  this.entityName = this.entity;
  console.log("linkedlist.selectOpenAction:", this.entity);
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.selectDialog);
  }, 250);
}, rowsSelected:function(a) {
  a.detail.doubleTap && (this.setButtonState("del", !1), console.log("linkedlist.selectAction:", a.detail), this.changeData("select", a.detail.rows[0]));
}, delAction:function() {
  this.setButtonState("del", !1);
  this.changeData("del", this.currentData);
}, changeData:function(a, b) {
  this.closeDialog(this.$.selectDialog);
  var c = clone(this.data) || [];
  this.data = [];
  "select" == a ? (a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), 0 > a && c.push(b)) : "del" == a && (a = _.findIndex(c, function(a) {
    return a._id == b._id;
  }), c.splice(a, 1));
  this.async(function() {
    this.data = c;
    this.fire("changed", {data:this.data});
  }, 150);
}, selectCancelAction:function(a) {
  this.setButtonState("del", !1);
  this.closeDialog(this.$.selectDialog);
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
}, getColumns:function(a) {
  console.log("getColumns:", a + "/" + this.namespace);
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "main-grid", !1);
    colModel = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(colModel, a);
  } catch (d) {
    console.error("getSelectableFields:", d);
    return;
  }
  return colModel;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  a = [];
  for (var c = 0; c < colModel.length; c++) {
    var d = colModel[c];
    if ("id" != d.id) {
      var e = {};
      e.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + d.id);
      e.title = e.label;
      e.data = d.name;
      a.push(e);
    }
  }
  console.debug("linkedlist.meta:", a);
  this.meta = a;
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  return tr(this.getPackFromEntity(this.entity) + "." + this.getSimpleEntityName(a));
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}});
Polymer({is:"simpl-crud", behaviors:[Polymer.IronA11yKeysBehavior, LobiboxBehavior, TranslationsBehavior], properties:{namespace:{type:String}, filterName:{value:null, type:String}, autoSearch:{value:!1, type:Boolean}, entity:{type:String}, withPanel:{type:Object, value:!0}, saveDisabled:{type:Boolean, value:!0}, buttonList:{type:String, value:"add,edit,copy,detail"}, buttonListDetail:{type:String, value:"add,edit,copy"}, pageSelected:{type:Number, value:0}, selectedDetailsTabId:{type:String, observer:"selectedDetailsTabIdChanged"}, 
pressed:{type:String, readOnly:!0, value:""}, showHeader:{type:Boolean, value:!1}, noCarriageReturn:{type:Boolean, value:!1}, boundKeys:{type:Array, value:function() {
  return Object.keys(this.keyBindings).join(" ").split(" ");
}}, preventDefault:{type:Boolean, value:!0, notify:!0}, keyEventTarget:{type:Object, value:function() {
  return this;
}}}, keyBindings:{enter:"_enterPressed"}, _enterPressed:function() {
  console.log("_enterPressedCrud:", this.saveDisabled);
  console.log("_pageSelected:", this.pageSelected);
  0 == this.pageSelected || this.noCarriageReturn || !0 === this.saveDisabled || this.saveAction();
}, onError:function(a) {
  console.log("exceptionCrud:", a);
  this.fire("error", a.detail);
}, attached:function() {
  1 != this.initialized && (this.init(), this.autoSearch && this.async(function() {
    this.querySelector("#filterId").doSearch();
  }, 200));
}, init:function() {
  this.selectedDetailsTabId = "detailsMainTabId";
  this.entryAnimation = "slide-from-left-animation";
  this.exitAnimation = "slide-left-animation";
  this.namespace && this.namespace != simpl4.util.BaseManager.getNamespace() && simpl4MessageManager.installMessages(this.namespace);
  this.mainEntityName = this.entity;
  var a = this.getPack(this.mainEntityName);
  this._pack = a.pack;
  this.panelHeaderCrudTable = tr(a.pack + "." + a.entityName + "_list");
  this.pageStack = [];
  this.pageSelected = 0;
  this.initialized = !0;
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    console.debug("setFormSpec:", c);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
  }
}, getFormSpec:function(a) {
  return [simpl4FormManager.getCrudForm(a.entity, a.namespace || this.namespace)];
}, getEditMode:function() {
  return "edit";
}, selectedDetailsTabIdChanged:function(a) {
  a = this.$.ironPages.querySelector("#" + this.selectedDetailsTabId);
  if (null != a) {
    var b = a.dataDesc;
    b.namespace = this.namespace;
    "table" == b.type ? a.filter = b : a.setData(clone(this.getFormData(b)));
  }
}, cancelAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  var b = this.pageStack.pop();
  console.log("CancelAction:" + b);
  this.needRefresh ? (this.needRefresh = !1, setTimeout(function() {
    this.pageSelected = b;
    this.currentTable && this.currentTable.refresh();
  }.bind(this), 100)) : this.async(function() {
    this.pageSelected = b;
  }, 100);
}, copyAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  a = a.detail;
  this.mode = "add";
  this.pageStack.push(this.pageSelected);
  console.log("copyAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  this.loadBeforeEdit() ? this.currentRowData = this.getData(a.data) : this.currentRowData = a.data;
  this.currentTable = a.table;
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.whenElementsReady(function() {
    console.debug("Ready");
    this.$.formid.setData(clone(this.currentRowData));
    this.pageSelected = 1;
  }.bind(this));
}, prevAction:function(a) {
  0 < this.currentRowIndex && (this.currentRowIndex--, this.loadBeforeEdit() ? this.currentRowData = this.getData(this.currentDataSet[this.currentRowIndex]) : this.currentRowData = this.currentDataSet[this.currentRowIndex], "firefox" == Detectizr.browser.name ? (this.$.formid.clearData(), this.async(function() {
    this.$.formid.setData(clone(this.currentRowData));
  }, 10)) : this.$.formid.setData(clone(this.currentRowData)));
  this.handlePrevNextButtons();
}, nextAction:function(a) {
  this.currentRowIndex < this.currentDataSet.length - 1 && (this.currentRowIndex++, this.loadBeforeEdit() ? this.currentRowData = this.getData(this.currentDataSet[this.currentRowIndex]) : this.currentRowData = this.currentDataSet[this.currentRowIndex], "firefox" == Detectizr.browser.name ? (this.$.formid.clearData(), this.async(function() {
    this.$.formid.setData(clone(this.currentRowData));
  }, 10)) : this.$.formid.setData(clone(this.currentRowData)));
  this.handlePrevNextButtons();
}, editAction:function(a) {
  a = a.detail;
  this.mode = "edit";
  this.pageStack.push(this.pageSelected);
  console.log("editAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-form", {namespace:a.namespace}).loadBeforeEdit ? this.currentRowData = this.getData(a.data) : this.currentRowData = a.data;
  this.currentTable = a.table;
  this.currentDataSet = a.dataSet;
  this.currentRowIndex = a.rowIndex;
  console.log("currentRowData:", this.currentRowData);
  this.prevNextButtonsInvisible = null;
  this.handlePrevNextButtons();
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.$.formid.setData(clone(this.currentRowData));
  this.whenElementsReady(function() {
    this.pageSelected = 1;
  }.bind(this));
}, rowsSelected:function(a) {
  console.log("rowsSelected:", a.detail);
  if (a.detail.doubleTap) {
    var b = this.querySelector("#crudTableId");
    this.editAction({detail:{data:a.detail.rows[0], dataSet:b.dataSet, rowIndex:b.currentRowIndex, table:b, entity:this.entity, namespace:this.namespace}});
  }
}, refreshAction:function(a) {
  a = a.detail;
  console.log("refreshAction:", a);
  a.table.refresh();
}, delAction:function(a) {
  var b = a.detail;
  console.log("delAction:", b);
  this.currentTable = b.table;
  Lobibox.confirm({msg:tr("entitytypes.confirm_delete"), title:"&nbsp;", callback:function(b, d) {
    "yes" === d && (this.mode = "del", this.onDeleteOk(a));
  }.bind(this)});
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  try {
    this.deleteData(a.detail.data), this.async(function() {
      this.currentTable && this.currentTable.refresh();
    }, 100), this.notify(tr("entitytypes.deleted"), "success", "5000");
  } catch (b) {
    console.error("delAction:", b), a = null, a = b.message ? b.message : b.toString(), this.notify(a, "error", "10000");
  }
}, _addAction:function(a) {
  a = {detail:{namespace:this.namespace, entityChild:"", entity:this.entity}};
  this.addAction(a);
}, addAction:function(a) {
  this.prevNextButtonsInvisible = !0;
  a = a.detail;
  this.mode = "add";
  this.pageStack.push(this.pageSelected);
  console.log("addAction:", a);
  this.setFormSpec(a.namespace, a.entity);
  this.currentEntityName = a.entity;
  this.currentEntityChildName = a.entityChild;
  this.currentTable = a.table;
  a = this.getPack(a.entity);
  this.panelHeaderCrudForm = tr(a.pack + "." + a.entityName);
  this.$.formid.setData({});
  this.whenElementsReady(function() {
    this.pageSelected = 1;
  }.bind(this));
}, detailAction:function(a) {
  console.log("detailAction:", a.detail);
  console.log("detailAction:", this.$.detailsOverviewId);
  var b = a.detail.data;
  this.$.detailsOverviewId.setData(a.detail.data);
  a = simpl4EntityManager.getPropertiesForEntity(this.mainEntityName, {namespace:this.namespace});
  this.panelHeaderDetails = this._maskedEval(a.title_expression, b, "");
  a = simpl4EntityManager.getEntity(this.mainEntityName, this.namespace);
  this.mainEntityId = this.getIdValue(this.mainEntityName, this.namespace, b);
  for (var c = [], d = 0; d < a.childs.length; d++) {
    var e = a.childs[d], f = {};
    if ("team" != e.modulename) {
      f.entity = e.modulename;
      f.namespace = e.namespace;
      f.title = tr("data." + e.name);
      f.id = e.name;
      f.buttonListDetail = this.buttonListDetail;
      f.rpc = {storeId:this.namespace + "_data", entity:this.mainEntityName, entityChild:e.name, id:b.id, pageSize:0};
      var g = e.datatype.split("/");
      f.type = "list" == g[0] ? "table" : "form";
      f.dependent = e.dependent;
      c.push(f);
    }
  }
  this.entityChildList = c;
  this.pageStack.push(this.pageSelected);
  this.async(function() {
    this.pageSelected = 2;
  }, 100);
}, storeData:function(a) {
  var b = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace}), c = b.customServiceUpdate, b = b.customServiceInsert, d = this.mode;
  return "add" == d && b ? this._storeDataCustom(a, b) : "edit" == d && c ? this._storeDataCustom(a, c) : this._storeData(a);
}, _storeData:function(a) {
  var b = this.getPack(this.mainEntityName);
  if (this.mainEntityName != this.currentEntityName) {
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, entityChild:this.currentEntityChildName, id:this.mainEntityId, idChild:this.getIdValue(this.mainEntityName, this.namespace, a), data:a};
  } else {
    var c = this.getIdValue(this.mainEntityName, this.namespace, a);
    console.log("storeData.idValue:", c);
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:c, data:a};
  }
  console.log("rpc:", a);
  return simpl4.util.Rpc.rpcSync("data:" + ("add" == this.mode ? "insert" : "update"), a);
}, _storeDataCustom:function(a, b) {
  -1 == b.indexOf(":") && (b = "camelRoute:" + b);
  -1 == b.indexOf(".") && (b = b.split(":"), b = b[0] + ":" + this.namespace + "." + b[1]);
  var c = this.getPack(this.mainEntityName);
  if (this.mainEntityName != this.currentEntityName) {
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + c.pack, entity:c.entityName, entityChild:this.currentEntityChildName, id:this.mainEntityId, idChild:this.getIdValue(this.mainEntityName, this.namespace, a), data:a};
  } else {
    var d = this.getIdValue(this.mainEntityName, this.namespace, a);
    console.log("idValue:", d);
    a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + c.pack, entity:c.entityName, id:d, data:a};
  }
  window.uuid && (a.uuid = window.uuid);
  return simpl4.util.Rpc.rpcSync(b, a);
}, deleteData:function(a) {
  var b = this.getPack(this.mainEntityName);
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:this.getIdValue(this.mainEntityName, this.namespace, a)};
  console.log("rpc.delete:", a);
  return simpl4.util.Rpc.rpcSync("data:delete", a);
}, getData:function(a) {
  var b = this.getPack(this.currentEntityName);
  a = this.getIdValue(this.currentEntityName, this.namespace, a);
  b = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + b.pack, entity:b.entityName, id:a};
  return simpl4.util.Rpc.rpcSync("data:queryOne", b);
}, getPack:function(a) {
  var b = "data", c = a;
  a && 0 < a.indexOf(":") && (b = a.split(":")[0], c = a.split(":")[1]);
  return {entityName:c, pack:b};
}, getIdValue:function(a, b, c) {
  console.log("getIdValue:", a + "/", c);
  a = simpl4.util.EntityManager.getEntity(a, b).primaryKeys;
  if (null == a || 0 === a.length) {
    a = null != c._id ? ["_id"] : ["id"];
  }
  for (var d = b = "", e = 0; e < a.length; e++) {
    b += d + (c[a[e]] || ""), d = ":";
  }
  return b;
}, saveAction:function() {
  var a, b = this.$.formid._postProcessService(), c = this.$.formid.getData();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid._postProcessLocal();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid.validate();
  console.log("saveAction.valid(" + b + "):", c);
  if (b) {
    try {
      "edit" == this.mode && (c = simpl4.util.Merge.merge(!0, this.currentRowData, c));
      console.log("saveAction.storeData:", c);
      var d = this.storeData(c).constraintViolations;
      if (d) {
        c = "";
        for (b = 0; b < d.length; b++) {
          var e = d[b];
          (a = e.message) && a.match(/^[@%].*/) && (a = tr(a.substring(1)));
          c += this.$.formid._getLabel(e.path) + " : " + a + "<br />";
        }
        this.alert(c);
      } else {
        a = "", a = "add" == this.mode ? tr("data.form.created") : tr("data.form.saved"), this.notify(a, "success", "10000"), this.needRefresh = !0, "add" == this.mode && this.cancelAction(), "edit" == this.mode && 0 == this.loadBeforeEdit() && (simpl4.util.Merge.merge(!1, this.currentRowData, c), console.log("merged:", JSON.stringify(this.currentRowData, null, 2)));
      }
    } catch (f) {
      console.error("saveAction:", f), f.message ? a = f.message : (a = f.toString(), a = a.substring(a.indexOf("entityName:") + 11), a = tr("data.form.save") + ": (" + a + ")"), this.notify(a, "error", "10000");
    }
  } else {
    a = tr("widgets.table.form_incomplete"), this.notify(a, "error", "10000");
  }
}, handlePrevNextButtons:function() {
  this.prevNextButtonsInvisible || (this.$.nextButton.disabled = this.currentRowIndex < this.currentDataSet.length - 1 ? !1 : !0, this.$.prevButton.disabled = 0 < this.currentRowIndex ? !1 : !0);
}, isForm:function(a) {
  return "form" == a.type;
}, isTable:function(a) {
  return "table" == a.type;
}, loadBeforeEdit:function() {
  return !0 === simpl4.util.EntityManager.getEntityViewProperties(this.entity, "main-form", {namespace:this.namespace}).loadBeforeEdit;
}, getFormData:function(a) {
  simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-form", {namespace:a.namespace});
  a = simpl4.util.Rpc.rpcSync("data:query", a.rpc);
  return 0 < a.rows.length ? a.rows[0] : {};
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("Crud._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}, whenElementsReady:function(a) {
  this.async(function() {
    a();
  }, 50);
}, getHelp:function() {
  return tr("crud2.select_with");
}, alert:function(a) {
  this.querySelector("#error p").innerHTML = a;
  this.querySelector("#error").open();
}});
Polymer({is:"simpl-crud2", behaviors:[Polymer.IronA11yKeysBehavior, LobiboxBehavior, DialogBehavior, TranslationsBehavior], properties:{getFirst:{value:!1, type:Boolean}, namespace:{type:String}, mode:{value:"add", type:String}, buttons:{value:"save,add,del,search", type:String}, entity:{type:String}, buttonList:{value:null, type:Array}}, observers:["buttonsChanged(isAttached)", "entityChanged(entity)"], attached:function() {
  this.isAttached = !0;
  1 != this.initialized && this.getFirst && this.async(function() {
    this.getInitialData();
  }, 200);
  this.initialized;
}, buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", text:tr("button.new"), disabled:!1}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}, save:{action:this.saveAction, icon:"save", text:tr("button.save"), disabled:!1}, search:{action:this.searchAction, icon:"search", text:tr("button.select"), disabled:!1}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.set("buttonList", b);
}, setButtonState:function(a, b) {
  if (null != this.buttonDef) {
    this.buttonDef[a].disabled = !b;
    for (var c = 0; c < this.buttonList.length; c++) {
      this.buttonList[c].name == a && this.set("buttonList." + c + ".disabled", !b);
    }
  }
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, addAction:function(a) {
  this.mode = "add";
  this.setButtonState("save", !0);
  this.setButtonState("del", !1);
  this.$.formid.setData({});
  !0 !== a && this.fire("add-action", {entity:this.entity, namespace:this.namespace});
}, searchAction:function() {
  this.entityName = this.entity;
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.searchDialog);
  }, 200);
  this.fire("search-action", {entity:this.entity, namespace:this.namespace});
}, delAction:function() {
  Lobibox.confirm({msg:tr("entitytypes.confirm_delete"), title:"&nbsp;", callback:function(a, b) {
    "yes" === b && (this.mode = "del", this.setButtonState("del", !1), this.onDeleteOk({detail:this.currentData}), this.fire("del-action", {entity:this.entity, namespace:this.namespace}));
  }.bind(this)});
}, onDeleteOk:function(a) {
  console.log("deleteok:", a);
  try {
    this.deleteData(a.detail), this.notify(tr("entitytypes.deleted"), "success", "5000"), this.addAction(!0);
  } catch (b) {
    console.error("delAction:", b), this.notify(b.message ? b.message : b.toString(), "error", "10000");
  }
}, selectCancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.searchDialog);
  }, 50);
}, selectAction:function(a) {
  this.setButtonState("del", !0);
  this.mode = "edit";
  var b = a.detail.data;
  console.log("selectAction:", a);
  this.closeDialog(this.$.searchDialog);
  this.currentData = clone(b);
  this.$.formid.setData(this.currentData);
}, rowsSelected:function(a) {
  console.log("rowsSelected:", a.detail);
  a.detail.doubleTap && (this.setButtonState("del", !0), this.mode = "edit", a = a.detail.rows[0], this.closeDialog(this.$.searchDialog), this.currentData = clone(a), this.$.formid.setData(this.currentData));
}, saveAction:function() {
  this._saveAction() && this.addAction(!0);
}, _saveAction:function() {
  var a, b = this.$.formid._postProcessService(), c = this.$.formid.getData();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid._postProcessLocal();
  null != b && (this.$.formid._setFieldData(b), c = simpl4.util.Merge.merge(!0, c, b));
  b = this.$.formid.validate();
  console.log("saveAction.valid(" + b + "):", c);
  if (b) {
    try {
      console.log("saveAction.storeData:", c);
      var d = this.storeData(c);
      console.log("ret:", d);
      var e = d.constraintViolations;
      if (e) {
        c = "";
        for (d = 0; d < e.length; d++) {
          var f = e[d];
          (a = f.message) && a.match(/^[@%].*/) && (a = tr(a.substring(1)));
          c += this.$.formid._getLabel(f.path) + " : " + a + "<br />";
        }
        this.alert(c);
      } else {
        a = "", a = "add" == this.mode ? tr("data.form.created") : tr("data.form.saved"), c.id = d.id, this.$.formid.updateData(c), this.notify(a, "success", "10000");
      }
    } catch (g) {
      return console.error("saveAction:", g.stack), g.message ? a = g.message : (a = g.toString(), a = a.substring(a.indexOf("entityName:") + 11), a = tr("data.form.save") + ": (" + a + ")"), this.notify(a, "error", "10000"), !1;
    }
  } else {
    return a = tr("widgets.table.form_incomplete"), this.notify(a, "error", "10000"), !1;
  }
  return !0;
}, storeData:function(a) {
  var b = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace}), c = b.customServiceUpdate, b = b.customServiceInsert, d = this.mode;
  return "add" == d && b ? this._storeDataCustom(a, b) : "edit" == d && c ? this._storeDataCustom(a, c) : this._storeData(a);
}, _storeData:function(a) {
  var b = this.getIdValue(this.entity, this.namespace, a);
  console.log("storeData.idValue:", b);
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this.getPackFromEntity(this.entity), entity:this.entity, id:b, data:a};
  console.log("rpc:", a);
  console.log("mode:", this.mode);
  return simpl4.util.Rpc.rpcSync("data:" + ("add" == this.mode ? "insert" : "update"), a);
}, deleteData:function(a) {
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this.getPackFromEntity(this.entity), entity:this.entity, id:this.getIdValue(this.entity, this.namespace, a)};
  console.log("rpc.delete:", a);
  return simpl4.util.Rpc.rpcSync("data:delete", a);
}, getIdValue:function(a, b, c) {
  if ("add" == this.mode) {
    return null;
  }
  console.log("getIdValue:", a + "/", c);
  a = simpl4.util.EntityManager.getEntity(a, b).primaryKeys;
  if (null == a || 0 === a.length) {
    a = null != c._id ? ["_id"] : ["id"];
  }
  for (var d = b = "", e = 0; e < a.length; e++) {
    b += d + (c[a[e]] || ""), d = ":";
  }
  return b;
}, entityChanged:function() {
  this.getColumns(this.entity);
  this._pack = this.getPackFromEntity(this.entity);
  this.setFormSpec(this.namespace, this.entity);
}, setFormSpec:function(a, b) {
  if (a !== this.prevNamespace || b !== this.prevEntityName) {
    this.currentNamespace = a;
    var c = simpl4FormManager.getCrudForm(b, a);
    console.debug("setFormSpec:", c);
    this.prevEntityName = b;
    this.prevNamespace = a;
    "string" === typeof c ? this.formName = c : this.formSpec = [c];
    this.async(function() {
      this.$.formid.setData({});
    }, 5);
  }
}, getFormSpec:function(a) {
  return [simpl4FormManager.getCrudForm(a.entity, a.namespace || this.namespace)];
}, getEditMode:function() {
  return "edit";
}, getColumns:function(a) {
  try {
    var b = simpl4.util.EntityManager, c = b.getEntityViewFields(a, this.namespace, "report", !1);
    colModel = b.buildColModel(c, this.namespace, a, "search");
    this._buildMeta(colModel, a);
  } catch (d) {
    console.error("getSelectableFields:", d);
    return;
  }
  return colModel;
}, _buildMeta:function(a, b) {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  a = [];
  for (var c = 0; c < colModel.length; c++) {
    var d = colModel[c], e = {};
    e.label = tr(this.getPackFromEntity(b) + "." + this.getSimpleEntityName(b) + "." + d.id);
    e.title = e.label;
    e.data = d.name;
    a.push(e);
  }
  console.debug("meta:", a);
  this.meta = a;
  this.data = [{articleId:"ABC"}];
}, getInitialData:function(a) {
  a = {storeId:(this.namespace || simpl4.util.BaseManager.getNamespace()) + "_" + this._pack, entity:this.entity};
  a = simpl4.util.Rpc.rpcSync("data:query", a);
  null != a && a.rows && (this.currentData = clone(a.rows[0]), console.log("currentData:", this.currentData), this.$.formid.setData(this.currentData), this.mode = "edit");
  return a;
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  return tr(this.getPackFromEntity(this.entity) + "." + this.getSimpleEntityName(a));
}, getPackFromEntity:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[0] : "data";
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}});
Polymer({is:"simpl-details", properties:{namespace:{type:String}, entity:{observer:"entityChanged", type:String}}, attached:function(a) {
}, getCellData:function(a) {
  return this.data[a.data];
}, entityChanged:function(a) {
  this.namespace = this.namespace || simpl4.util.BaseManager.getNamespace();
  this.meta = this.preProcessMeta(simpl4EntityManager.getEntityViewFields(this.entity, "main-form", !0, {namespace:this.namespace}));
}, preProcessData:function(a) {
  var b = Object.keys(this.selectableList), c = Object.keys(this.dateList);
  Object.keys(this.datetimeList);
  a.forEach(function(a) {
    b.forEach(function(b) {
      a[b + "_display"] = this.selectableList[b][a[b]];
    }, this);
    c.forEach(function(b) {
      a[b + "_display"] = this.getDate(a[b]);
    }, this);
  }, this);
  return a;
}, preProcessMeta:function(a) {
  this.selectableList = {};
  this.dateList = {};
  this.datetimeList = {};
  this.columns = [];
  var b = [];
  null == a && (a = []);
  a.forEach(function(a) {
    var c = a.name;
    a.hidden || (a.selectable_items && Array.isArray(a.selectable_items.getItems()) && (this.selectableList[a.name] = this.toMap(a.selectable_items.getItems()), c = a.name + "_display"), "date" == a.datatype && (this.dateList[a.name] = !0, c = a.name + "_display"), "datetime" == a.datatype && (this.datetimeList[a.name] = !0, c = a.name + "_display"), c = {title:tr("data." + this.entity + "." + a.name), data:c}, b.push(c), this.columns.push(a.name));
  }, this);
  return b;
}, toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.value] = a.label;
  }, this);
  return b;
}, getDate:function(a) {
  return null == a ? "--" : moment(parseInt(a)).format("L");
}, setData:function(a) {
  this.data = null;
  this.async(function() {
    this.data = this.preProcessData([a])[0];
  }, 100);
}});
Polymer({is:"delete-dialog", behaviors:[TranslationsBehavior], onTap:function() {
  this.fire("delete-ok", this.data);
  this.$.dialogId.close();
}, close:function(a) {
  this.$.dialogId.close();
}, open:function(a) {
  this.data = a;
  this.$.dialogId.open();
}});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c || (c = "undefined" !== typeof window ? require("jquery") : require("jquery")(b));
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  function e(b) {
    var c, d, f = {};
    a.each(b, function(a, g) {
      (c = a.match(/^([^A-Z]+?)([A-Z])/)) && -1 !== "a aa ai ao as b fn i m o s ".indexOf(c[1] + " ") && (d = a.replace(c[0], c[2].toLowerCase()), f[d] = a, "o" === c[1] && e(b[a]));
    });
    b._hungarianMap = f;
  }
  function f(b, c, g) {
    b._hungarianMap || e(b);
    var t;
    a.each(c, function(e, h) {
      t = b._hungarianMap[e];
      t === d || !g && c[t] !== d || ("o" === t.charAt(0) ? (c[t] || (c[t] = {}), a.extend(!0, c[t], c[e]), f(b[t], c[t], g)) : c[t] = c[e]);
    });
  }
  function g(a) {
    var b = x.defaults.oLanguage, c = a.sZeroRecords;
    !a.sEmptyTable && c && "No data available in table" === b.sEmptyTable && ca(a, a, "sZeroRecords", "sEmptyTable");
    !a.sLoadingRecords && c && "Loading..." === b.sLoadingRecords && ca(a, a, "sZeroRecords", "sLoadingRecords");
    a.sInfoThousands && (a.sThousands = a.sInfoThousands);
    (a = a.sDecimal) && nb(a);
  }
  function h(a) {
    V(a, "ordering", "bSort");
    V(a, "orderMulti", "bSortMulti");
    V(a, "orderClasses", "bSortClasses");
    V(a, "orderCellsTop", "bSortCellsTop");
    V(a, "order", "aaSorting");
    V(a, "orderFixed", "aaSortingFixed");
    V(a, "paging", "bPaginate");
    V(a, "pagingType", "sPaginationType");
    V(a, "pageLength", "iDisplayLength");
    V(a, "searching", "bFilter");
    "boolean" === typeof a.sScrollX && (a.sScrollX = a.sScrollX ? "100%" : "");
    "boolean" === typeof a.scrollX && (a.scrollX = a.scrollX ? "100%" : "");
    if (a = a.aoSearchCols) {
      for (var b = 0, c = a.length; b < c; b++) {
        a[b] && f(x.models.oSearch, a[b]);
      }
    }
  }
  function l(b) {
    V(b, "orderable", "bSortable");
    V(b, "orderData", "aDataSort");
    V(b, "orderSequence", "asSorting");
    V(b, "orderDataType", "sortDataType");
    var c = b.aDataSort;
    c && !a.isArray(c) && (b.aDataSort = [c]);
  }
  function n(b) {
    if (!x.__browser) {
      var c = {};
      x.__browser = c;
      var d = a("<div/>").css({position:"fixed", top:0, left:0, height:1, width:1, overflow:"hidden"}).append(a("<div/>").css({position:"absolute", top:1, left:1, width:100, overflow:"scroll"}).append(a("<div/>").css({width:"100%", height:10}))).appendTo("body"), e = d.children(), f = e.children();
      c.barWidth = e[0].offsetWidth - e[0].clientWidth;
      c.bScrollOversize = 100 === f[0].offsetWidth && 100 !== e[0].clientWidth;
      c.bScrollbarLeft = 1 !== Math.round(f.offset().left);
      c.bBounding = d[0].getBoundingClientRect().width ? !0 : !1;
      d.remove();
    }
    a.extend(b.oBrowser, x.__browser);
    b.oScroll.iBarWidth = x.__browser.barWidth;
  }
  function p(a, b, c, e, f, g) {
    var t = !1;
    if (c !== d) {
      var h = c;
      t = !0;
    }
    for (; e !== f;) {
      a.hasOwnProperty(e) && (h = t ? b(h, a[e], e, a) : a[e], t = !0, e += g);
    }
    return h;
  }
  function q(b, d) {
    var e = x.defaults.column, f = b.aoColumns.length, e = a.extend({}, x.models.oColumn, e, {nTh:d ? d : c.createElement("th"), sTitle:e.sTitle ? e.sTitle : d ? d.innerHTML : "", aDataSort:e.aDataSort ? e.aDataSort : [f], mData:e.mData ? e.mData : f, idx:f});
    b.aoColumns.push(e);
    e = b.aoPreSearchCols;
    e[f] = a.extend({}, x.models.oSearch, e[f]);
    m(b, f, a(d).data());
  }
  function m(b, c, e) {
    c = b.aoColumns[c];
    var g = b.oClasses, t = a(c.nTh);
    if (!c.sWidthOrig) {
      c.sWidthOrig = t.attr("width") || null;
      var h = (t.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
      h && (c.sWidthOrig = h[1]);
    }
    e !== d && null !== e && (l(e), f(x.defaults.column, e), e.mDataProp === d || e.mData || (e.mData = e.mDataProp), e.sType && (c._sManualType = e.sType), e.className && !e.sClass && (e.sClass = e.className), a.extend(c, e), ca(c, e, "sWidth", "sWidthOrig"), e.iDataSort !== d && (c.aDataSort = [e.iDataSort]), ca(c, e, "aDataSort"));
    var w = c.mData, G = W(w), n = c.mRender ? W(c.mRender) : null;
    e = function(a) {
      return "string" === typeof a && -1 !== a.indexOf("@");
    };
    c._bAttrSrc = a.isPlainObject(w) && (e(w.sort) || e(w.type) || e(w.filter));
    c._setter = null;
    c.fnGetData = function(a, b, c) {
      var e = G(a, b, d, c);
      return n && b ? n(e, b, a, c) : e;
    };
    c.fnSetData = function(a, b, c) {
      return Z(w)(a, b, c);
    };
    "number" !== typeof w && (b._rowReadObject = !0);
    b.oFeatures.bSort || (c.bSortable = !1, t.addClass(g.sSortableNone));
    b = -1 !== a.inArray("asc", c.asSorting);
    e = -1 !== a.inArray("desc", c.asSorting);
    c.bSortable && (b || e) ? b && !e ? (c.sSortingClass = g.sSortableAsc, c.sSortingClassJUI = g.sSortJUIAscAllowed) : !b && e ? (c.sSortingClass = g.sSortableDesc, c.sSortingClassJUI = g.sSortJUIDescAllowed) : (c.sSortingClass = g.sSortable, c.sSortingClassJUI = g.sSortJUI) : (c.sSortingClass = g.sSortableNone, c.sSortingClassJUI = "");
  }
  function r(a) {
    if (!1 !== a.oFeatures.bAutoWidth) {
      var b = a.aoColumns;
      La(a);
      for (var c = 0, d = b.length; c < d; c++) {
        b[c].nTh.style.width = b[c].sWidth;
      }
    }
    b = a.oScroll;
    "" === b.sY && "" === b.sX || za(a);
    M(a, null, "column-sizing", [a]);
  }
  function u(a, b) {
    a = C(a, "bVisible");
    return "number" === typeof a[b] ? a[b] : null;
  }
  function v(b, c) {
    b = C(b, "bVisible");
    c = a.inArray(c, b);
    return -1 !== c ? c : null;
  }
  function A(b) {
    var c = 0;
    a.each(b.aoColumns, function(b, d) {
      d.bVisible && "none" !== a(d.nTh).css("display") && c++;
    });
    return c;
  }
  function C(b, c) {
    var d = [];
    a.map(b.aoColumns, function(a, b) {
      a[c] && d.push(b);
    });
    return d;
  }
  function B(a) {
    var b = a.aoColumns, c = a.aoData, e = x.ext.type.detect, f, g, h;
    var t = 0;
    for (f = b.length; t < f; t++) {
      var l = b[t];
      var n = [];
      if (!l.sType && l._sManualType) {
        l.sType = l._sManualType;
      } else {
        if (!l.sType) {
          var m = 0;
          for (g = e.length; m < g; m++) {
            var p = 0;
            for (h = c.length; p < h; p++) {
              n[p] === d && (n[p] = F(a, p, t, "type"));
              var q = e[m](n[p], a);
              if (!q && m !== e.length - 1) {
                break;
              }
              if ("html" === q) {
                break;
              }
            }
            if (q) {
              l.sType = q;
              break;
            }
          }
          l.sType || (l.sType = "string");
        }
      }
    }
  }
  function H(b, c, e, f) {
    var g, h, t, w = b.aoColumns;
    if (c) {
      for (g = c.length - 1; 0 <= g; g--) {
        var l = c[g];
        var G = l.targets !== d ? l.targets : l.aTargets;
        a.isArray(G) || (G = [G]);
        var n = 0;
        for (h = G.length; n < h; n++) {
          if ("number" === typeof G[n] && 0 <= G[n]) {
            for (; w.length <= G[n];) {
              q(b);
            }
            f(G[n], l);
          } else {
            if ("number" === typeof G[n] && 0 > G[n]) {
              f(w.length + G[n], l);
            } else {
              if ("string" === typeof G[n]) {
                var aa = 0;
                for (t = w.length; aa < t; aa++) {
                  ("_all" == G[n] || a(w[aa].nTh).hasClass(G[n])) && f(aa, l);
                }
              }
            }
          }
        }
      }
    }
    if (e) {
      for (g = 0, b = e.length; g < b; g++) {
        f(g, e[g]);
      }
    }
  }
  function z(b, c, e, f) {
    var g = b.aoData.length, h = a.extend(!0, {}, x.models.oRow, {src:e ? "dom" : "data", idx:g});
    h._aData = c;
    b.aoData.push(h);
    for (var t = b.aoColumns, l = 0, w = t.length; l < w; l++) {
      t[l].sType = null;
    }
    b.aiDisplayMaster.push(g);
    c = b.rowIdFn(c);
    c !== d && (b.aIds[c] = h);
    !e && b.oFeatures.bDeferRender || L(b, g, e, f);
    return g;
  }
  function D(b, c) {
    var d;
    c instanceof a || (c = a(c));
    return c.map(function(a, c) {
      d = pa(b, c);
      return z(b, d.data, c, d.cells);
    });
  }
  function F(a, b, c, e) {
    var f = a.iDraw, g = a.aoColumns[c], h = a.aoData[b]._aData, t = g.sDefaultContent, l = g.fnGetData(h, e, {settings:a, row:b, col:c});
    if (l === d) {
      return a.iDrawError != f && null === t && (fa(a, 0, "Requested unknown parameter " + ("function" == typeof g.mData ? "{function}" : "'" + g.mData + "'") + " for row " + b + ", column " + c, 4), a.iDrawError = f), t;
    }
    if ((l === h || null === l) && null !== t && e !== d) {
      l = t;
    } else {
      if ("function" === typeof l) {
        return l.call(h);
      }
    }
    return null === l && "display" == e ? "" : l;
  }
  function K(a, b, c, d) {
    a.aoColumns[c].fnSetData(a.aoData[b]._aData, d, {settings:a, row:b, col:c});
  }
  function I(b) {
    return a.map(b.match(/(\\.|[^\.])+/g) || [""], function(a) {
      return a.replace(/\\./g, ".");
    });
  }
  function W(b) {
    if (a.isPlainObject(b)) {
      var c = {};
      a.each(b, function(a, b) {
        b && (c[a] = W(b));
      });
      return function(a, b, e, f) {
        var g = c[b] || c._;
        return g !== d ? g(a, b, e, f) : a;
      };
    }
    if (null === b) {
      return function(a) {
        return a;
      };
    }
    if ("function" === typeof b) {
      return function(a, c, d, e) {
        return b(a, c, d, e);
      };
    }
    if ("string" !== typeof b || -1 === b.indexOf(".") && -1 === b.indexOf("[") && -1 === b.indexOf("(")) {
      return function(a, c) {
        return a[b];
      };
    }
    var e = function(b, c, f) {
      if ("" !== f) {
        var g = I(f);
        for (var h = 0, t = g.length; h < t; h++) {
          f = g[h].match(ta);
          var l = g[h].match(ma);
          if (f) {
            g[h] = g[h].replace(ta, "");
            "" !== g[h] && (b = b[g[h]]);
            l = [];
            g.splice(0, h + 1);
            g = g.join(".");
            if (a.isArray(b)) {
              for (h = 0, t = b.length; h < t; h++) {
                l.push(e(b[h], c, g));
              }
            }
            b = f[0].substring(1, f[0].length - 1);
            b = "" === b ? l : l.join(b);
            break;
          } else {
            if (l) {
              g[h] = g[h].replace(ma, "");
              b = b[g[h]]();
              continue;
            }
          }
          if (null === b || b[g[h]] === d) {
            return d;
          }
          b = b[g[h]];
        }
      }
      return b;
    };
    return function(a, c) {
      return e(a, c, b);
    };
  }
  function Z(b) {
    if (a.isPlainObject(b)) {
      return Z(b._);
    }
    if (null === b) {
      return function() {
      };
    }
    if ("function" === typeof b) {
      return function(a, c, d) {
        b(a, "set", c, d);
      };
    }
    if ("string" !== typeof b || -1 === b.indexOf(".") && -1 === b.indexOf("[") && -1 === b.indexOf("(")) {
      return function(a, c) {
        a[b] = c;
      };
    }
    var c = function(b, e, f) {
      f = I(f);
      var g = f[f.length - 1];
      for (var h, t, l = 0, w = f.length - 1; l < w; l++) {
        h = f[l].match(ta);
        t = f[l].match(ma);
        if (h) {
          f[l] = f[l].replace(ta, "");
          b[f[l]] = [];
          g = f.slice();
          g.splice(0, l + 1);
          h = g.join(".");
          if (a.isArray(e)) {
            for (t = 0, w = e.length; t < w; t++) {
              g = {}, c(g, e[t], h), b[f[l]].push(g);
            }
          } else {
            b[f[l]] = e;
          }
          return;
        }
        t && (f[l] = f[l].replace(ma, ""), b = b[f[l]](e));
        if (null === b[f[l]] || b[f[l]] === d) {
          b[f[l]] = {};
        }
        b = b[f[l]];
      }
      if (g.match(ma)) {
        b[g.replace(ma, "")](e);
      } else {
        b[g.replace(ta, "")] = e;
      }
    };
    return function(a, d) {
      return c(a, d, b);
    };
  }
  function ha(a) {
    return X(a.aoData, "_aData");
  }
  function ka(a) {
    a.aoData.length = 0;
    a.aiDisplayMaster.length = 0;
    a.aiDisplay.length = 0;
    a.aIds = {};
  }
  function la(a, b, c) {
    for (var e = -1, f = 0, g = a.length; f < g; f++) {
      a[f] == b ? e = f : a[f] > b && a[f]--;
    }
    -1 != e && c === d && a.splice(e, 1);
  }
  function R(a, b, c, e) {
    var f = a.aoData[b], g, h = function(c, d) {
      for (; c.childNodes.length;) {
        c.removeChild(c.firstChild);
      }
      c.innerHTML = F(a, b, d, "display");
    };
    if ("dom" !== c && (c && "auto" !== c || "dom" !== f.src)) {
      var t = f.anCells;
      if (t) {
        if (e !== d) {
          h(t[e], e);
        } else {
          for (c = 0, g = t.length; c < g; c++) {
            h(t[c], c);
          }
        }
      }
    } else {
      f._aData = pa(a, f, e, e === d ? d : f._aData).data;
    }
    f._aSortData = null;
    f._aFilterData = null;
    h = a.aoColumns;
    if (e !== d) {
      h[e].sType = null;
    } else {
      c = 0;
      for (g = h.length; c < g; c++) {
        h[c].sType = null;
      }
      da(a, f);
    }
  }
  function pa(b, c, e, f) {
    var g = [], h = c.firstChild, t, l = 0, w, n = b.aoColumns, G = b._rowReadObject;
    f = f !== d ? f : G ? {} : [];
    var m = function(a, b) {
      if ("string" === typeof a) {
        var c = a.indexOf("@");
        -1 !== c && (c = a.substring(c + 1), Z(a)(f, b.getAttribute(c)));
      }
    }, p = function(b) {
      if (e === d || e === l) {
        t = n[l], w = a.trim(b.innerHTML), t && t._bAttrSrc ? (Z(t.mData._)(f, w), m(t.mData.sort, b), m(t.mData.type, b), m(t.mData.filter, b)) : G ? (t._setter || (t._setter = Z(t.mData)), t._setter(f, w)) : f[l] = w;
      }
      l++;
    };
    if (h) {
      for (; h;) {
        var aa = h.nodeName.toUpperCase();
        if ("TD" == aa || "TH" == aa) {
          p(h), g.push(h);
        }
        h = h.nextSibling;
      }
    } else {
      for (g = c.anCells, h = 0, aa = g.length; h < aa; h++) {
        p(g[h]);
      }
    }
    (c = c.firstChild ? c : c.nTr) && (c = c.getAttribute("id")) && Z(b.rowId)(f, c);
    return {data:f, cells:g};
  }
  function L(b, d, e, f) {
    var g = b.aoData[d], h = g._aData, t = [], l;
    if (null === g.nTr) {
      var w = e || c.createElement("tr");
      g.nTr = w;
      g.anCells = t;
      w._DT_RowIndex = d;
      da(b, g);
      var n = 0;
      for (l = b.aoColumns.length; n < l; n++) {
        var G = b.aoColumns[n];
        var m = e ? f[n] : c.createElement(G.sCellType);
        m._DT_CellIndex = {row:d, column:n};
        t.push(m);
        e && !G.mRender && G.mData === n || a.isPlainObject(G.mData) && G.mData._ === n + ".display" || (m.innerHTML = F(b, d, n, "display"));
        G.sClass && (m.className += " " + G.sClass);
        G.bVisible && !e ? w.appendChild(m) : !G.bVisible && e && m.parentNode.removeChild(m);
        G.fnCreatedCell && G.fnCreatedCell.call(b.oInstance, m, F(b, d, n), h, d, n);
      }
      M(b, "aoRowCreatedCallback", null, [w, h, d]);
    }
    g.nTr.setAttribute("role", "row");
  }
  function da(b, c) {
    var d = c.nTr, e = c._aData;
    if (d) {
      if (b = b.rowIdFn(e)) {
        d.id = b;
      }
      e.DT_RowClass && (b = e.DT_RowClass.split(" "), c.__rowc = c.__rowc ? Aa(c.__rowc.concat(b)) : b, a(d).removeClass(c.__rowc.join(" ")).addClass(e.DT_RowClass));
      e.DT_RowAttr && a(d).attr(e.DT_RowAttr);
      e.DT_RowData && a(d).data(e.DT_RowData);
    }
  }
  function U(b) {
    var c, d, e = b.nTHead, f = b.nTFoot, g = 0 === a("th, td", e).length, h = b.oClasses, t = b.aoColumns;
    g && (d = a("<tr/>").appendTo(e));
    var l = 0;
    for (c = t.length; l < c; l++) {
      var n = t[l];
      var m = a(n.nTh).addClass(n.sClass);
      g && m.appendTo(d);
      b.oFeatures.bSort && (m.addClass(n.sSortingClass), !1 !== n.bSortable && (m.attr("tabindex", b.iTabIndex).attr("aria-controls", b.sTableId), Ma(b, n.nTh, l)));
      n.sTitle != m[0].innerHTML && m.html(n.sTitle);
      Na(b, "header")(b, m, n, h);
    }
    g && ra(b.aoHeader, e);
    a(e).find(">tr").attr("role", "row");
    a(e).find(">tr>th, >tr>td").addClass(h.sHeaderTH);
    a(f).find(">tr>th, >tr>td").addClass(h.sFooterTH);
    if (null !== f) {
      for (b = b.aoFooter[0], l = 0, c = b.length; l < c; l++) {
        n = t[l], n.nTf = b[l].cell, n.sClass && a(n.nTf).addClass(n.sClass);
      }
    }
  }
  function qa(b, c, e) {
    var f, g, h = [], t = [], l = b.aoColumns.length;
    if (c) {
      e === d && (e = !1);
      var w = 0;
      for (f = c.length; w < f; w++) {
        h[w] = c[w].slice();
        h[w].nTr = c[w].nTr;
        for (g = l - 1; 0 <= g; g--) {
          b.aoColumns[g].bVisible || e || h[w].splice(g, 1);
        }
        t.push([]);
      }
      w = 0;
      for (f = h.length; w < f; w++) {
        if (b = h[w].nTr) {
          for (; g = b.firstChild;) {
            b.removeChild(g);
          }
        }
        g = 0;
        for (c = h[w].length; g < c; g++) {
          var n = l = 1;
          if (t[w][g] === d) {
            b.appendChild(h[w][g].cell);
            for (t[w][g] = 1; h[w + l] !== d && h[w][g].cell == h[w + l][g].cell;) {
              t[w + l][g] = 1, l++;
            }
            for (; h[w][g + n] !== d && h[w][g].cell == h[w][g + n].cell;) {
              for (e = 0; e < l; e++) {
                t[w + e][g + n] = 1;
              }
              n++;
            }
            a(h[w][g].cell).attr("rowspan", l).attr("colspan", n);
          }
        }
      }
    }
  }
  function ia(b) {
    var c = M(b, "aoPreDrawCallback", "preDraw", [b]);
    if (-1 !== a.inArray(!1, c)) {
      Y(b, !1);
    } else {
      var c = [], e = 0, f = b.asStripeClasses, g = f.length, h = b.oLanguage, t = b.iInitDisplayStart, l = "ssp" == S(b), n = b.aiDisplay;
      b.bDrawing = !0;
      t !== d && -1 !== t && (b._iDisplayStart = l ? t : t >= b.fnRecordsDisplay() ? 0 : t, b.iInitDisplayStart = -1);
      var t = b._iDisplayStart, m = b.fnDisplayEnd();
      if (b.bDeferLoading) {
        b.bDeferLoading = !1, b.iDraw++, Y(b, !1);
      } else {
        if (!l) {
          b.iDraw++;
        } else {
          if (!b.bDestroying && !cb(b)) {
            return;
          }
        }
      }
      if (0 !== n.length) {
        for (h = l ? b.aoData.length : m, l = l ? 0 : t; l < h; l++) {
          var p = n[l], q = b.aoData[p];
          null === q.nTr && L(b, p);
          p = q.nTr;
          if (0 !== g) {
            var r = f[e % g];
            q._sRowStripe != r && (a(p).removeClass(q._sRowStripe).addClass(r), q._sRowStripe = r);
          }
          M(b, "aoRowCallback", null, [p, q._aData, e, l]);
          c.push(p);
          e++;
        }
      } else {
        e = h.sZeroRecords, 1 == b.iDraw && "ajax" == S(b) ? e = h.sLoadingRecords : h.sEmptyTable && 0 === b.fnRecordsTotal() && (e = h.sEmptyTable), c[0] = a("<tr/>", {"class":g ? f[0] : ""}).append(a("<td />", {valign:"top", colSpan:A(b), "class":b.oClasses.sRowEmpty}).html(e))[0];
      }
      M(b, "aoHeaderCallback", "header", [a(b.nTHead).children("tr")[0], ha(b), t, m, n]);
      M(b, "aoFooterCallback", "footer", [a(b.nTFoot).children("tr")[0], ha(b), t, m, n]);
      f = a(b.nTBody);
      f.children().detach();
      f.append(a(c));
      M(b, "aoDrawCallback", "draw", [b]);
      b.bSorted = !1;
      b.bFiltered = !1;
      b.bDrawing = !1;
    }
  }
  function ja(a, b) {
    var c = a.oFeatures, d = c.bFilter;
    c.bSort && ob(a);
    d ? sa(a, a.oPreviousSearch) : a.aiDisplay = a.aiDisplayMaster.slice();
    !0 !== b && (a._iDisplayStart = 0);
    a._drawHold = b;
    ia(a);
    a._drawHold = !1;
  }
  function bb(b) {
    var c = b.oClasses, d = a(b.nTable), d = a("<div/>").insertBefore(d), e = b.oFeatures, f = a("<div/>", {id:b.sTableId + "_wrapper", "class":c.sWrapper + (b.nTFoot ? "" : " " + c.sNoFooter)});
    b.nHolding = d[0];
    b.nTableWrapper = f[0];
    b.nTableReinsertBefore = b.nTable.nextSibling;
    for (var g = b.sDom.split(""), h, t, l, n, m, p, q = 0; q < g.length; q++) {
      h = null;
      t = g[q];
      if ("<" == t) {
        l = a("<div/>")[0];
        n = g[q + 1];
        if ("'" == n || '"' == n) {
          m = "";
          for (p = 2; g[q + p] != n;) {
            m += g[q + p], p++;
          }
          "H" == m ? m = c.sJUIHeader : "F" == m && (m = c.sJUIFooter);
          -1 != m.indexOf(".") ? (n = m.split("."), l.id = n[0].substr(1, n[0].length - 1), l.className = n[1]) : "#" == m.charAt(0) ? l.id = m.substr(1, m.length - 1) : l.className = m;
          q += p;
        }
        f.append(l);
        f = a(l);
      } else {
        if (">" == t) {
          f = f.parent();
        } else {
          if ("l" == t && e.bPaginate && e.bLengthChange) {
            h = pb(b);
          } else {
            if ("f" == t && e.bFilter) {
              h = fb(b);
            } else {
              if ("r" == t && e.bProcessing) {
                h = qb(b);
              } else {
                if ("t" == t) {
                  h = rb(b);
                } else {
                  if ("i" == t && e.bInfo) {
                    h = mb(b);
                  } else {
                    if ("p" == t && e.bPaginate) {
                      h = sb(b);
                    } else {
                      if (0 !== x.ext.feature.length) {
                        for (l = x.ext.feature, p = 0, n = l.length; p < n; p++) {
                          if (t == l[p].cFeature) {
                            h = l[p].fnInit(b);
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      h && (l = b.aanFeatures, l[t] || (l[t] = []), l[t].push(h), f.append(h));
    }
    d.replaceWith(f);
    b.nHolding = null;
  }
  function ra(b, c) {
    c = a(c).children("tr");
    var d, e, f;
    b.splice(0, b.length);
    var g = 0;
    for (f = c.length; g < f; g++) {
      b.push([]);
    }
    g = 0;
    for (f = c.length; g < f; g++) {
      var h = c[g];
      for (d = h.firstChild; d;) {
        if ("TD" == d.nodeName.toUpperCase() || "TH" == d.nodeName.toUpperCase()) {
          var t = 1 * d.getAttribute("colspan");
          var l = 1 * d.getAttribute("rowspan");
          t = t && 0 !== t && 1 !== t ? t : 1;
          l = l && 0 !== l && 1 !== l ? l : 1;
          var w = 0;
          for (e = b[g]; e[w];) {
            w++;
          }
          var n = w;
          var m = 1 === t ? !0 : !1;
          for (e = 0; e < t; e++) {
            for (w = 0; w < l; w++) {
              b[g + w][n + e] = {cell:d, unique:m}, b[g + w].nTr = h;
            }
          }
        }
        d = d.nextSibling;
      }
    }
  }
  function wa(a, b, c) {
    var d = [];
    c || (c = a.aoHeader, b && (c = [], ra(c, b)));
    b = 0;
    for (var e = c.length; b < e; b++) {
      for (var f = 0, g = c[b].length; f < g; f++) {
        !c[b][f].unique || d[f] && a.bSortCellsTop || (d[f] = c[b][f].cell);
      }
    }
    return d;
  }
  function xa(b, c, d) {
    M(b, "aoServerParams", "serverParams", [c]);
    if (c && a.isArray(c)) {
      var e = {}, f = /(.*?)\[\]$/;
      a.each(c, function(a, b) {
        (a = b.name.match(f)) ? (a = a[0], e[a] || (e[a] = []), e[a].push(b.value)) : e[b.name] = b.value;
      });
      c = e;
    }
    var g = b.ajax, h = b.oInstance, t = function(a) {
      M(b, null, "xhr", [b, a, b.jqXHR]);
      d(a);
    };
    if (a.isPlainObject(g) && g.data) {
      var l = g.data;
      var w = a.isFunction(l) ? l(c, b) : l;
      c = a.isFunction(l) && w ? w : a.extend(!0, c, w);
      delete g.data;
    }
    w = {data:c, success:function(a) {
      var c = a.error || a.sError;
      c && fa(b, 0, c);
      b.json = a;
      t(a);
    }, dataType:"json", cache:!1, type:b.sServerMethod, error:function(c, d, e) {
      e = M(b, null, "xhr", [b, null, b.jqXHR]);
      -1 === a.inArray(!0, e) && ("parsererror" == d ? fa(b, 0, "Invalid JSON response", 1) : 4 === c.readyState && fa(b, 0, "Ajax error", 7));
      Y(b, !1);
    }};
    b.oAjaxData = c;
    M(b, null, "preXhr", [b, c]);
    b.fnServerData ? b.fnServerData.call(h, b.sAjaxSource, a.map(c, function(a, b) {
      return {name:b, value:a};
    }), t, b) : b.sAjaxSource || "string" === typeof g ? b.jqXHR = a.ajax(a.extend(w, {url:g || b.sAjaxSource})) : a.isFunction(g) ? b.jqXHR = g.call(h, c, t, b) : (b.jqXHR = a.ajax(a.extend(w, g)), g.data = l);
  }
  function cb(a) {
    return a.bAjaxDataGet ? (a.iDraw++, Y(a, !0), xa(a, db(a), function(b) {
      eb(a, b);
    }), !1) : !0;
  }
  function db(b) {
    var c = b.aoColumns, d = c.length, e = b.oFeatures, f = b.oPreviousSearch, g = b.aoPreSearchCols, h = [], t = na(b);
    var l = b._iDisplayStart;
    var n = !1 !== e.bPaginate ? b._iDisplayLength : -1;
    var m = function(a, b) {
      h.push({name:a, value:b});
    };
    m("sEcho", b.iDraw);
    m("iColumns", d);
    m("sColumns", X(c, "sName").join(","));
    m("iDisplayStart", l);
    m("iDisplayLength", n);
    var p = {draw:b.iDraw, columns:[], order:[], start:l, length:n, search:{value:f.sSearch, regex:f.bRegex}};
    for (l = 0; l < d; l++) {
      var q = c[l];
      var r = g[l];
      n = "function" == typeof q.mData ? "function" : q.mData;
      p.columns.push({data:n, name:q.sName, searchable:q.bSearchable, orderable:q.bSortable, search:{value:r.sSearch, regex:r.bRegex}});
      m("mDataProp_" + l, n);
      e.bFilter && (m("sSearch_" + l, r.sSearch), m("bRegex_" + l, r.bRegex), m("bSearchable_" + l, q.bSearchable));
      e.bSort && m("bSortable_" + l, q.bSortable);
    }
    e.bFilter && (m("sSearch", f.sSearch), m("bRegex", f.bRegex));
    e.bSort && (a.each(t, function(a, b) {
      p.order.push({column:b.col, dir:b.dir});
      m("iSortCol_" + a, b.col);
      m("sSortDir_" + a, b.dir);
    }), m("iSortingCols", t.length));
    c = x.ext.legacy.ajax;
    return null === c ? b.sAjaxSource ? h : p : c ? h : p;
  }
  function eb(a, b) {
    var c = function(a, c) {
      return b[a] !== d ? b[a] : b[c];
    }, e = ya(a, b), f = c("sEcho", "draw"), g = c("iTotalRecords", "recordsTotal"), c = c("iTotalDisplayRecords", "recordsFiltered");
    if (f) {
      if (1 * f < a.iDraw) {
        return;
      }
      a.iDraw = 1 * f;
    }
    ka(a);
    a._iRecordsTotal = parseInt(g, 10);
    a._iRecordsDisplay = parseInt(c, 10);
    f = 0;
    for (g = e.length; f < g; f++) {
      z(a, e[f]);
    }
    a.aiDisplay = a.aiDisplayMaster.slice();
    a.bAjaxDataGet = !1;
    ia(a);
    a._bInitComplete || Ba(a, b);
    a.bAjaxDataGet = !0;
    Y(a, !1);
  }
  function ya(b, c) {
    b = a.isPlainObject(b.ajax) && b.ajax.dataSrc !== d ? b.ajax.dataSrc : b.sAjaxDataProp;
    return "data" === b ? c.aaData || c[b] : "" !== b ? W(b)(c) : c;
  }
  function fb(b) {
    var d = b.oClasses, e = b.sTableId, f = b.oLanguage, g = b.oPreviousSearch, h = b.aanFeatures, t = '<input type="search" class="' + d.sFilterInput + '"/>', l = f.sSearch, l = l.match(/_INPUT_/) ? l.replace("_INPUT_", t) : l + t, d = a("<div/>", {id:h.f ? null : e + "_filter", "class":d.sFilter}).append(a("<label/>").append(l)), h = function() {
      var a = this.value ? this.value : "";
      a != g.sSearch && (sa(b, {sSearch:a, bRegex:g.bRegex, bSmart:g.bSmart, bCaseInsensitive:g.bCaseInsensitive}), b._iDisplayStart = 0, ia(b));
    }, t = null !== b.searchDelay ? b.searchDelay : "ssp" === S(b) ? 400 : 0, n = a("input", d).val(g.sSearch).attr("placeholder", f.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT", t ? Oa(h, t) : h).bind("keypress.DT", function(a) {
      if (13 == a.keyCode) {
        return !1;
      }
    }).attr("aria-controls", e);
    a(b.nTable).on("search.dt.DT", function(a, d) {
      if (b === d) {
        try {
          n[0] !== c.activeElement && n.val(g.sSearch);
        } catch (ac) {
        }
      }
    });
    return d[0];
  }
  function sa(a, b, c) {
    var e = a.oPreviousSearch, f = a.aoPreSearchCols, g = function(a) {
      e.sSearch = a.sSearch;
      e.bRegex = a.bRegex;
      e.bSmart = a.bSmart;
      e.bCaseInsensitive = a.bCaseInsensitive;
    }, h = function(a) {
      return a.bEscapeRegex !== d ? !a.bEscapeRegex : a.bRegex;
    };
    B(a);
    if ("ssp" != S(a)) {
      ib(a, b.sSearch, c, h(b), b.bSmart, b.bCaseInsensitive);
      g(b);
      for (b = 0; b < f.length; b++) {
        hb(a, f[b].sSearch, b, h(f[b]), f[b].bSmart, f[b].bCaseInsensitive);
      }
      gb(a);
    } else {
      g(b);
    }
    a.bFiltered = !0;
    M(a, null, "search", [a]);
  }
  function gb(b) {
    for (var c = x.ext.search, d = b.aiDisplay, e, f, g = 0, h = c.length; g < h; g++) {
      for (var t = [], l = 0, n = d.length; l < n; l++) {
        f = d[l], e = b.aoData[f], c[g](b, e._aFilterData, f, e._aData, l) && t.push(f);
      }
      d.length = 0;
      a.merge(d, t);
    }
  }
  function hb(a, b, c, d, e, f) {
    if ("" !== b) {
      var g = a.aiDisplay;
      d = Ka(b, d, e, f);
      for (e = g.length - 1; 0 <= e; e--) {
        b = a.aoData[g[e]]._aFilterData[c], d.test(b) || g.splice(e, 1);
      }
    }
  }
  function ib(a, b, c, d, e, f) {
    d = Ka(b, d, e, f);
    e = a.oPreviousSearch.sSearch;
    f = a.aiDisplayMaster;
    0 !== x.ext.search.length && (c = !0);
    var g = jb(a);
    if (0 >= b.length) {
      a.aiDisplay = f.slice();
    } else {
      if (g || c || e.length > b.length || 0 !== b.indexOf(e) || a.bSorted) {
        a.aiDisplay = f.slice();
      }
      b = a.aiDisplay;
      for (c = b.length - 1; 0 <= c; c--) {
        d.test(a.aoData[b[c]]._sFilterRow) || b.splice(c, 1);
      }
    }
  }
  function Ka(b, c, d, e) {
    b = c ? b : Pa(b);
    d && (b = "^(?=.*?" + a.map(b.match(/"[^"]+"|[^ ]+/g) || [""], function(a) {
      if ('"' === a.charAt(0)) {
        var b = a.match(/^"(.*)"$/);
        a = b ? b[1] : a;
      }
      return a.replace('"', "");
    }).join(")(?=.*?") + ").*$");
    return new RegExp(b, e ? "i" : "");
  }
  function jb(a) {
    var b = a.aoColumns, c, d, e = x.ext.type.search;
    var f = !1;
    var g = 0;
    for (c = a.aoData.length; g < c; g++) {
      var h = a.aoData[g];
      if (!h._aFilterData) {
        var t = [];
        var l = 0;
        for (d = b.length; l < d; l++) {
          f = b[l];
          if (f.bSearchable) {
            var n = F(a, g, l, "filter");
            e[f.sType] && (n = e[f.sType](n));
            null === n && (n = "");
            "string" !== typeof n && n.toString && (n = n.toString());
          } else {
            n = "";
          }
          n.indexOf && -1 !== n.indexOf("&") && (Ca.innerHTML = n, n = Ob ? Ca.textContent : Ca.innerText);
          n.replace && (n = n.replace(/[\r\n]/g, ""));
          t.push(n);
        }
        h._aFilterData = t;
        h._sFilterRow = t.join("  ");
        f = !0;
      }
    }
    return f;
  }
  function kb(a) {
    return {search:a.sSearch, smart:a.bSmart, regex:a.bRegex, caseInsensitive:a.bCaseInsensitive};
  }
  function lb(a) {
    return {sSearch:a.search, bSmart:a.smart, bRegex:a.regex, bCaseInsensitive:a.caseInsensitive};
  }
  function mb(b) {
    var c = b.sTableId, d = b.aanFeatures.i, e = a("<div/>", {"class":b.oClasses.sInfo, id:d ? null : c + "_info"});
    d || (b.aoDrawCallback.push({fn:tb, sName:"information"}), e.attr("role", "status").attr("aria-live", "polite"), a(b.nTable).attr("aria-describedby", c + "_info"));
    return e[0];
  }
  function tb(b) {
    var c = b.aanFeatures.i;
    if (0 !== c.length) {
      var d = b.oLanguage, e = b._iDisplayStart + 1, f = b.fnDisplayEnd(), g = b.fnRecordsTotal(), h = b.fnRecordsDisplay(), t = h ? d.sInfo : d.sInfoEmpty;
      h !== g && (t += " " + d.sInfoFiltered);
      t += d.sInfoPostFix;
      t = ub(b, t);
      d = d.fnInfoCallback;
      null !== d && (t = d.call(b.oInstance, b, e, f, g, h, t));
      a(c).html(t);
    }
  }
  function ub(a, b) {
    var c = a.fnFormatNumber, d = a._iDisplayStart + 1, e = a._iDisplayLength, f = a.fnRecordsDisplay(), g = -1 === e;
    return b.replace(/_START_/g, c.call(a, d)).replace(/_END_/g, c.call(a, a.fnDisplayEnd())).replace(/_MAX_/g, c.call(a, a.fnRecordsTotal())).replace(/_TOTAL_/g, c.call(a, f)).replace(/_PAGE_/g, c.call(a, g ? 1 : Math.ceil(d / e))).replace(/_PAGES_/g, c.call(a, g ? 1 : Math.ceil(f / e)));
  }
  function ua(a) {
    var b = a.iInitDisplayStart, c = a.aoColumns;
    var d = a.oFeatures;
    var e = a.bDeferLoading;
    if (a.bInitialised) {
      bb(a);
      U(a);
      qa(a, a.aoHeader);
      qa(a, a.aoFooter);
      Y(a, !0);
      d.bAutoWidth && La(a);
      var f = 0;
      for (d = c.length; f < d; f++) {
        var g = c[f];
        g.sWidth && (g.nTh.style.width = Q(g.sWidth));
      }
      M(a, null, "preInit", [a]);
      ja(a);
      c = S(a);
      if ("ssp" != c || e) {
        "ajax" == c ? xa(a, [], function(c) {
          var d = ya(a, c);
          for (f = 0; f < d.length; f++) {
            z(a, d[f]);
          }
          a.iInitDisplayStart = b;
          ja(a);
          Y(a, !1);
          Ba(a, c);
        }, a) : (Y(a, !1), Ba(a));
      }
    } else {
      setTimeout(function() {
        ua(a);
      }, 200);
    }
  }
  function Ba(a, b) {
    a._bInitComplete = !0;
    (b || a.oInit.aaData) && r(a);
    M(a, null, "plugin-init", [a, b]);
    M(a, "aoInitComplete", "init", [a, b]);
  }
  function Qa(a, b) {
    b = parseInt(b, 10);
    a._iDisplayLength = b;
    Ra(a);
    M(a, null, "length", [a, b]);
  }
  function pb(b) {
    for (var c = b.oClasses, d = b.sTableId, e = b.aLengthMenu, f = a.isArray(e[0]), g = f ? e[0] : e, e = f ? e[1] : e, f = a("<select/>", {name:d + "_length", "aria-controls":d, "class":c.sLengthSelect}), h = 0, t = g.length; h < t; h++) {
      f[0][h] = new Option(e[h], g[h]);
    }
    var l = a("<div><label/></div>").addClass(c.sLength);
    b.aanFeatures.l || (l[0].id = d + "_length");
    l.children().append(b.oLanguage.sLengthMenu.replace("_MENU_", f[0].outerHTML));
    a("select", l).val(b._iDisplayLength).bind("change.DT", function(c) {
      Qa(b, a(this).val());
      ia(b);
    });
    a(b.nTable).bind("length.dt.DT", function(c, d, e) {
      b === d && a("select", l).val(e);
    });
    return l[0];
  }
  function sb(b) {
    var c = b.sPaginationType, d = x.ext.pager[c], e = "function" === typeof d, f = function(a) {
      ia(a);
    }, c = a("<div/>").addClass(b.oClasses.sPaging + c)[0], g = b.aanFeatures;
    e || d.fnInit(b, c, f);
    g.p || (c.id = b.sTableId + "_paginate", b.aoDrawCallback.push({fn:function(a) {
      if (e) {
        var b = a._iDisplayStart, c = a._iDisplayLength, h = a.fnRecordsDisplay(), t = -1 === c, b = t ? 0 : Math.ceil(b / c), c = t ? 1 : Math.ceil(h / c), h = d(b, c), l, t = 0;
        for (l = g.p.length; t < l; t++) {
          Na(a, "pageButton")(a, g.p[t], t, h, b, c);
        }
      } else {
        d.fnUpdate(a, f);
      }
    }, sName:"pagination"}));
    return c;
  }
  function Sa(a, b, c) {
    var d = a._iDisplayStart, e = a._iDisplayLength, f = a.fnRecordsDisplay();
    0 === f || -1 === e ? d = 0 : "number" === typeof b ? (d = b * e, d > f && (d = 0)) : "first" == b ? d = 0 : "previous" == b ? (d = 0 <= e ? d - e : 0, 0 > d && (d = 0)) : "next" == b ? d + e < f && (d += e) : "last" == b ? d = Math.floor((f - 1) / e) * e : fa(a, 0, "Unknown paging action: " + b, 5);
    b = a._iDisplayStart !== d;
    a._iDisplayStart = d;
    b && (M(a, null, "page", [a]), c && ia(a));
    return b;
  }
  function qb(b) {
    return a("<div/>", {id:b.aanFeatures.r ? null : b.sTableId + "_processing", "class":b.oClasses.sProcessing}).html(b.oLanguage.sProcessing).insertBefore(b.nTable)[0];
  }
  function Y(b, c) {
    b.oFeatures.bProcessing && a(b.aanFeatures.r).css("display", c ? "block" : "none");
    M(b, null, "processing", [b, c]);
  }
  function rb(b) {
    var c = a(b.nTable);
    c.attr("role", "grid");
    var d = b.oScroll;
    if ("" === d.sX && "" === d.sY) {
      return b.nTable;
    }
    var e = d.sX, f = d.sY, g = b.oClasses, h = c.children("caption"), l = h.length ? h[0]._captionSide : null, t = a(c[0].cloneNode(!1)), n = a(c[0].cloneNode(!1)), m = c.children("tfoot");
    m.length || (m = null);
    t = a("<div/>", {"class":g.sScrollWrapper}).append(a("<div/>", {"class":g.sScrollHead}).css({overflow:"hidden", position:"relative", border:0, width:e ? e ? Q(e) : null : "100%"}).append(a("<div/>", {"class":g.sScrollHeadInner}).css({"box-sizing":"content-box", width:d.sXInner || "100%"}).append(t.removeAttr("id").css("margin-left", 0).append("top" === l ? h : null).append(c.children("thead"))))).append(a("<div/>", {"class":g.sScrollBody}).css({position:"relative", overflow:"auto", width:e ? 
    Q(e) : null}).append(c));
    m && t.append(a("<div/>", {"class":g.sScrollFoot}).css({overflow:"hidden", border:0, width:e ? e ? Q(e) : null : "100%"}).append(a("<div/>", {"class":g.sScrollFootInner}).append(n.removeAttr("id").css("margin-left", 0).append("bottom" === l ? h : null).append(c.children("tfoot")))));
    var c = t.children(), p = c[0], g = c[1], q = m ? c[2] : null;
    if (e) {
      a(g).on("scroll.DT", function(a) {
        a = this.scrollLeft;
        p.scrollLeft = a;
        m && (q.scrollLeft = a);
      });
    }
    a(g).css(f && d.bCollapse ? "max-height" : "height", f);
    b.nScrollHead = p;
    b.nScrollBody = g;
    b.nScrollFoot = q;
    b.aoDrawCallback.push({fn:za, sName:"scrolling"});
    return t[0];
  }
  function za(b) {
    var c = b.oScroll, e = c.sX, f = c.sXInner, g = c.sY, c = c.iBarWidth, h = a(b.nScrollHead), l = h[0].style, t = h.children("div"), n = t[0].style, m = t.children("table"), t = b.nScrollBody, p = a(t), q = t.style, v = a(b.nScrollFoot).children("div"), A = v.children("table"), y = a(b.nTHead), x = a(b.nTable), z = x[0], B = z.style, C = b.nTFoot ? a(b.nTFoot) : null, D = b.oBrowser, F = D.bScrollOversize, E = X(b.aoColumns, "nTh"), H = [], I = [], J = [], L = [], M, O = function(a) {
      a = a.style;
      a.paddingTop = "0";
      a.paddingBottom = "0";
      a.borderTopWidth = "0";
      a.borderBottomWidth = "0";
      a.height = 0;
    };
    var K = t.scrollHeight > t.clientHeight;
    if (b.scrollBarVis !== K && b.scrollBarVis !== d) {
      b.scrollBarVis = K, r(b);
    } else {
      b.scrollBarVis = K;
      x.children("thead, tfoot").remove();
      if (C) {
        var N = C.clone().prependTo(x);
        var P = C.find("tr");
        N = N.find("tr");
      }
      var R = y.clone().prependTo(x);
      y = y.find("tr");
      K = R.find("tr");
      R.find("th, td").removeAttr("tabindex");
      e || (q.width = "100%", h[0].style.width = "100%");
      a.each(wa(b, R), function(a, c) {
        M = u(b, a);
        c.style.width = b.aoColumns[M].sWidth;
      });
      C && ea(function(a) {
        a.style.width = "";
      }, N);
      h = x.outerWidth();
      "" === e ? (B.width = "100%", F && (x.find("tbody").height() > t.offsetHeight || "scroll" == p.css("overflow-y")) && (B.width = Q(x.outerWidth() - c)), h = x.outerWidth()) : "" !== f && (B.width = Q(f), h = x.outerWidth());
      ea(O, K);
      ea(function(b) {
        J.push(b.innerHTML);
        H.push(Q(a(b).css("width")));
      }, K);
      ea(function(b, c) {
        -1 !== a.inArray(b, E) && (b.style.width = H[c]);
      }, y);
      a(K).height(0);
      C && (ea(O, N), ea(function(b) {
        L.push(b.innerHTML);
        I.push(Q(a(b).css("width")));
      }, N), ea(function(a, b) {
        a.style.width = I[b];
      }, P), a(N).height(0));
      ea(function(a, b) {
        a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + J[b] + "</div>";
        a.style.width = H[b];
      }, K);
      C && ea(function(a, b) {
        a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + L[b] + "</div>";
        a.style.width = I[b];
      }, N);
      x.outerWidth() < h ? (P = t.scrollHeight > t.offsetHeight || "scroll" == p.css("overflow-y") ? h + c : h, F && (t.scrollHeight > t.offsetHeight || "scroll" == p.css("overflow-y")) && (B.width = Q(P - c)), "" !== e && "" === f || fa(b, 1, "Possible column misalignment", 6)) : P = "100%";
      q.width = Q(P);
      l.width = Q(P);
      C && (b.nScrollFoot.style.width = Q(P));
      !g && F && (q.height = Q(z.offsetHeight + c));
      e = x.outerWidth();
      m[0].style.width = Q(e);
      n.width = Q(e);
      f = x.height() > t.clientHeight || "scroll" == p.css("overflow-y");
      g = "padding" + (D.bScrollbarLeft ? "Left" : "Right");
      n[g] = f ? c + "px" : "0px";
      C && (A[0].style.width = Q(e), v[0].style.width = Q(e), v[0].style[g] = f ? c + "px" : "0px");
      x.children("colgroup").insertBefore(x.children("thead"));
      p.scroll();
      !b.bSorted && !b.bFiltered || b._drawHold || (t.scrollTop = 0);
    }
  }
  function ea(a, b, c) {
    for (var d = 0, e = 0, f = b.length, g, h; e < f;) {
      g = b[e].firstChild;
      for (h = c ? c[e].firstChild : null; g;) {
        1 === g.nodeType && (c ? a(g, h, d) : a(g, d), d++), g = g.nextSibling, h = c ? h.nextSibling : null;
      }
      e++;
    }
  }
  function La(c) {
    var d = c.nTable, e = c.aoColumns, f = c.oScroll, g = f.sY, h = f.sX, l = f.sXInner, t = e.length, n = C(c, "bVisible"), m = a("th", c.nTHead), p = d.getAttribute("width"), q = d.parentNode, v = !1, x, y = c.oBrowser, f = y.bScrollOversize;
    (x = d.style.width) && -1 !== x.indexOf("%") && (p = x);
    for (x = 0; x < n.length; x++) {
      var z = e[n[x]];
      null !== z.sWidth && (z.sWidth = vb(z.sWidthOrig, q), v = !0);
    }
    if (f || !v && !h && !g && t == A(c) && t == m.length) {
      for (x = 0; x < t; x++) {
        n = u(c, x), null !== n && (e[n].sWidth = Q(m.eq(x).width()));
      }
    } else {
      t = a(d).clone().css("visibility", "hidden").removeAttr("id");
      t.find("tbody tr").remove();
      var B = a("<tr/>").appendTo(t.find("tbody"));
      t.find("thead, tfoot").remove();
      t.append(a(c.nTHead).clone()).append(a(c.nTFoot).clone());
      t.find("tfoot th, tfoot td").css("width", "");
      m = wa(c, t.find("thead")[0]);
      for (x = 0; x < n.length; x++) {
        z = e[n[x]], m[x].style.width = null !== z.sWidthOrig && "" !== z.sWidthOrig ? Q(z.sWidthOrig) : "", z.sWidthOrig && h && a(m[x]).append(a("<div/>").css({width:z.sWidthOrig, margin:0, padding:0, border:0, height:1}));
      }
      if (c.aoData.length) {
        for (x = 0; x < n.length; x++) {
          v = n[x], z = e[v], a(wb(c, v)).clone(!1).append(z.sContentPadding).appendTo(B);
        }
      }
      a("[name]", t).removeAttr("name");
      z = a("<div/>").css(h || g ? {position:"absolute", top:0, left:0, height:1, right:0, overflow:"hidden"} : {}).append(t).appendTo(q);
      h && l ? t.width(l) : h ? (t.css("width", "auto"), t.removeAttr("width"), t.width() < q.clientWidth && p && t.width(q.clientWidth)) : g ? t.width(q.clientWidth) : p && t.width(p);
      for (x = g = 0; x < n.length; x++) {
        q = a(m[x]), l = q.outerWidth() - q.width(), q = y.bBounding ? Math.ceil(m[x].getBoundingClientRect().width) : q.outerWidth(), g += q, e[n[x]].sWidth = Q(q - l);
      }
      d.style.width = Q(g);
      z.remove();
    }
    p && (d.style.width = Q(p));
    !p && !h || c._reszEvt || (d = function() {
      a(b).bind("resize.DT-" + c.sInstance, Oa(function() {
        r(c);
      }));
    }, f ? setTimeout(d, 1000) : d(), c._reszEvt = !0);
  }
  function vb(b, d) {
    if (!b) {
      return 0;
    }
    b = a("<div/>").css("width", Q(b)).appendTo(d || c.body);
    d = b[0].offsetWidth;
    b.remove();
    return d;
  }
  function wb(b, c) {
    var d = xb(b, c);
    if (0 > d) {
      return null;
    }
    var e = b.aoData[d];
    return e.nTr ? e.anCells[c] : a("<td/>").html(F(b, d, c, "display"))[0];
  }
  function xb(a, b) {
    for (var c, d = -1, e = -1, f = 0, g = a.aoData.length; f < g; f++) {
      c = F(a, f, b, "display") + "", c = c.replace(Pb, ""), c = c.replace(/&nbsp;/g, " "), c.length > d && (d = c.length, e = f);
    }
    return e;
  }
  function Q(a) {
    return null === a ? "0px" : "number" == typeof a ? 0 > a ? "0px" : a + "px" : a.match(/\d$/) ? a + "px" : a;
  }
  function na(b) {
    var c = [], e = b.aoColumns;
    var f = b.aaSortingFixed;
    var g = a.isPlainObject(f);
    var h = [];
    var l = function(b) {
      b.length && !a.isArray(b[0]) ? h.push(b) : a.merge(h, b);
    };
    a.isArray(f) && l(f);
    g && f.pre && l(f.pre);
    l(b.aaSorting);
    g && f.post && l(f.post);
    for (b = 0; b < h.length; b++) {
      var t = h[b][0];
      l = e[t].aDataSort;
      f = 0;
      for (g = l.length; f < g; f++) {
        var n = l[f];
        var m = e[n].sType || "string";
        h[b]._idx === d && (h[b]._idx = a.inArray(h[b][1], e[n].asSorting));
        c.push({src:t, col:n, dir:h[b][1], index:h[b]._idx, type:m, formatter:x.ext.type.order[m + "-pre"]});
      }
    }
    return c;
  }
  function ob(a) {
    var b, c = [], d = x.ext.type.order, e = a.aoData, f = 0, g = a.aiDisplayMaster;
    B(a);
    var h = na(a);
    var l = 0;
    for (b = h.length; l < b; l++) {
      var t = h[l];
      t.formatter && f++;
      yb(a, t.col);
    }
    if ("ssp" != S(a) && 0 !== h.length) {
      l = 0;
      for (b = g.length; l < b; l++) {
        c[g[l]] = l;
      }
      f === h.length ? g.sort(function(a, b) {
        var d, f = h.length, g = e[a]._aSortData, l = e[b]._aSortData;
        for (d = 0; d < f; d++) {
          var t = h[d];
          var n = g[t.col];
          var w = l[t.col];
          n = n < w ? -1 : n > w ? 1 : 0;
          if (0 !== n) {
            return "asc" === t.dir ? n : -n;
          }
        }
        n = c[a];
        w = c[b];
        return n < w ? -1 : n > w ? 1 : 0;
      }) : g.sort(function(a, b) {
        var f, g = h.length, l = e[a]._aSortData, t = e[b]._aSortData;
        for (f = 0; f < g; f++) {
          var n = h[f];
          var w = l[n.col];
          var m = t[n.col];
          n = d[n.type + "-" + n.dir] || d["string-" + n.dir];
          w = n(w, m);
          if (0 !== w) {
            return w;
          }
        }
        w = c[a];
        m = c[b];
        return w < m ? -1 : w > m ? 1 : 0;
      });
    }
    a.bSorted = !0;
  }
  function zb(a) {
    var b = a.aoColumns, c = na(a);
    a = a.oLanguage.oAria;
    for (var d = 0, e = b.length; d < e; d++) {
      var f = b[d];
      var g = f.asSorting;
      var h = f.sTitle.replace(/<.*?>/g, "");
      var l = f.nTh;
      l.removeAttribute("aria-sort");
      f.bSortable && (0 < c.length && c[0].col == d ? (l.setAttribute("aria-sort", "asc" == c[0].dir ? "ascending" : "descending"), f = g[c[0].index + 1] || g[0]) : f = g[0], h += "asc" === f ? a.sSortAscending : a.sSortDescending);
      l.setAttribute("aria-label", h);
    }
  }
  function Ta(b, c, e, f) {
    var g = b.aaSorting, h = b.aoColumns[c].asSorting, l = function(b, c) {
      var e = b._idx;
      e === d && (e = a.inArray(b[1], h));
      return e + 1 < h.length ? e + 1 : c ? null : 0;
    };
    "number" === typeof g[0] && (g = b.aaSorting = [g]);
    e && b.oFeatures.bSortMulti ? (e = a.inArray(c, X(g, "0")), -1 !== e ? (c = l(g[e], !0), null === c && 1 === g.length && (c = 0), null === c ? g.splice(e, 1) : (g[e][1] = h[c], g[e]._idx = c)) : (g.push([c, h[0], 0]), g[g.length - 1]._idx = 0)) : g.length && g[0][0] == c ? (c = l(g[0]), g.length = 1, g[0][1] = h[c], g[0]._idx = c) : (g.length = 0, g.push([c, h[0]]), g[0]._idx = 0);
    ja(b);
    "function" == typeof f && f(b);
  }
  function Ma(a, b, c, d) {
    var e = a.aoColumns[c];
    Ua(b, {}, function(b) {
      !1 !== e.bSortable && (a.oFeatures.bProcessing ? (Y(a, !0), setTimeout(function() {
        Ta(a, c, b.shiftKey, d);
        "ssp" !== S(a) && Y(a, !1);
      }, 0)) : Ta(a, c, b.shiftKey, d));
    });
  }
  function Da(b) {
    var c = b.aLastSort, d = b.oClasses.sSortColumn, e = na(b), f = b.oFeatures, g;
    if (f.bSort && f.bSortClasses) {
      f = 0;
      for (g = c.length; f < g; f++) {
        var h = c[f].src;
        a(X(b.aoData, "anCells", h)).removeClass(d + (2 > f ? f + 1 : 3));
      }
      f = 0;
      for (g = e.length; f < g; f++) {
        h = e[f].src, a(X(b.aoData, "anCells", h)).addClass(d + (2 > f ? f + 1 : 3));
      }
    }
    b.aLastSort = e;
  }
  function yb(a, b) {
    var c = a.aoColumns[b], d = x.ext.order[c.sSortDataType], e;
    d && (e = d.call(a.oInstance, a, b, v(a, b)));
    for (var f, g = x.ext.type.order[c.sType + "-pre"], h = 0, l = a.aoData.length; h < l; h++) {
      if (c = a.aoData[h], c._aSortData || (c._aSortData = []), !c._aSortData[b] || d) {
        f = d ? e[h] : F(a, h, b, "sort"), c._aSortData[b] = g ? g(f) : f;
      }
    }
  }
  function Ea(b) {
    if (b.oFeatures.bStateSave && !b.bDestroying) {
      var c = {time:+new Date, start:b._iDisplayStart, length:b._iDisplayLength, order:a.extend(!0, [], b.aaSorting), search:kb(b.oPreviousSearch), columns:a.map(b.aoColumns, function(a, c) {
        return {visible:a.bVisible, search:kb(b.aoPreSearchCols[c])};
      })};
      M(b, "aoStateSaveParams", "stateSaveParams", [b, c]);
      b.oSavedState = c;
      b.fnStateSaveCallback.call(b.oInstance, b, c);
    }
  }
  function Ab(b, c) {
    var e, f = b.aoColumns;
    if (b.oFeatures.bStateSave && (c = b.fnStateLoadCallback.call(b.oInstance, b)) && c.time) {
      var g = M(b, "aoStateLoadParams", "stateLoadParams", [b, c]);
      if (-1 === a.inArray(!1, g) && (g = b.iStateDuration, !(0 < g && c.time < +new Date - 1000 * g) && f.length === c.columns.length)) {
        b.oLoadedState = a.extend(!0, {}, c);
        c.start !== d && (b._iDisplayStart = c.start, b.iInitDisplayStart = c.start);
        c.length !== d && (b._iDisplayLength = c.length);
        c.order !== d && (b.aaSorting = [], a.each(c.order, function(a, c) {
          b.aaSorting.push(c[0] >= f.length ? [0, c[1]] : c);
        }));
        c.search !== d && a.extend(b.oPreviousSearch, lb(c.search));
        g = 0;
        for (e = c.columns.length; g < e; g++) {
          var h = c.columns[g];
          h.visible !== d && (f[g].bVisible = h.visible);
          h.search !== d && a.extend(b.aoPreSearchCols[g], lb(h.search));
        }
        M(b, "aoStateLoaded", "stateLoaded", [b, c]);
      }
    }
  }
  function Fa(b) {
    var c = x.settings;
    b = a.inArray(b, X(c, "nTable"));
    return -1 !== b ? c[b] : null;
  }
  function fa(a, c, d, e) {
    d = "DataTables warning: " + (a ? "table id=" + a.sTableId + " - " : "") + d;
    e && (d += ". For more information about this error, please see http://datatables.net/tn/" + e);
    if (c) {
      b.console && console.log && console.log(d);
    } else {
      if (c = x.ext, c = c.sErrMode || c.errMode, a && M(a, null, "error", [a, e, d]), "alert" == c) {
        alert(d);
      } else {
        if ("throw" == c) {
          throw Error(d);
        }
        "function" == typeof c && c(a, e, d);
      }
    }
  }
  function ca(b, c, e, f) {
    a.isArray(e) ? a.each(e, function(d, e) {
      a.isArray(e) ? ca(b, c, e[0], e[1]) : ca(b, c, e);
    }) : (f === d && (f = e), c[e] !== d && (b[f] = c[e]));
  }
  function Bb(b, c, d) {
    var e;
    for (e in c) {
      if (c.hasOwnProperty(e)) {
        var f = c[e];
        a.isPlainObject(f) ? (a.isPlainObject(b[e]) || (b[e] = {}), a.extend(!0, b[e], f)) : d && "data" !== e && "aaData" !== e && a.isArray(f) ? b[e] = f.slice() : b[e] = f;
      }
    }
    return b;
  }
  function Ua(b, c, d) {
    a(b).bind("click.DT", c, function(a) {
      b.blur();
      d(a);
    }).bind("keypress.DT", c, function(a) {
      13 === a.which && (a.preventDefault(), d(a));
    }).bind("selectstart.DT", function() {
      return !1;
    });
  }
  function T(a, b, c, d) {
    c && a[b].push({fn:c, sName:d});
  }
  function M(b, c, d, e) {
    var f = [];
    c && (f = a.map(b[c].slice().reverse(), function(a, c) {
      return a.fn.apply(b.oInstance, e);
    }));
    null !== d && (c = a.Event(d + ".dt"), a(b.nTable).trigger(c, e), f.push(c.result));
    return f;
  }
  function Ra(a) {
    var b = a._iDisplayStart, c = a.fnDisplayEnd(), d = a._iDisplayLength;
    b >= c && (b = c - d);
    b -= b % d;
    if (-1 === d || 0 > b) {
      b = 0;
    }
    a._iDisplayStart = b;
  }
  function Na(b, c) {
    b = b.renderer;
    var d = x.ext.renderer[c];
    return a.isPlainObject(b) && b[c] ? d[b[c]] || d._ : "string" === typeof b ? d[b] || d._ : d._;
  }
  function S(a) {
    return a.oFeatures.bServerSide ? "ssp" : a.ajax || a.sAjaxSource ? "ajax" : "dom";
  }
  function Ga(a, b) {
    var c = Cb.numbers_length, d = Math.floor(c / 2);
    b <= c ? a = oa(0, b) : a <= d ? (a = oa(0, c - 2), a.push("ellipsis"), a.push(b - 1)) : (a >= b - 1 - d ? a = oa(b - (c - 2), b) : (a = oa(a - d + 2, a + d - 1), a.push("ellipsis"), a.push(b - 1)), a.splice(0, 0, "ellipsis"), a.splice(0, 0, 0));
    a.DT_el = "span";
    return a;
  }
  function nb(b) {
    a.each({num:function(a) {
      return Ha(a, b);
    }, "num-fmt":function(a) {
      return Ha(a, b, Va);
    }, "html-num":function(a) {
      return Ha(a, b, Ia);
    }, "html-num-fmt":function(a) {
      return Ha(a, b, Ia, Va);
    }}, function(a, c) {
      N.type.order[a + b + "-pre"] = c;
      a.match(/^html\-/) && (N.type.search[a + b] = N.type.search.html);
    });
  }
  function Db(a) {
    return function() {
      var b = [Fa(this[x.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
      return x.ext.internal[a].apply(this, b);
    };
  }
  var x = function(b) {
    this.$ = function(a, b) {
      return this.api(!0).$(a, b);
    };
    this._ = function(a, b) {
      return this.api(!0).rows(a, b).data();
    };
    this.api = function(a) {
      return a ? new J(Fa(this[N.iApiIndex])) : new J(this);
    };
    this.fnAddData = function(b, c) {
      var e = this.api(!0);
      b = a.isArray(b) && (a.isArray(b[0]) || a.isPlainObject(b[0])) ? e.rows.add(b) : e.row.add(b);
      (c === d || c) && e.draw();
      return b.flatten().toArray();
    };
    this.fnAdjustColumnSizing = function(a) {
      var b = this.api(!0).columns.adjust(), c = b.settings()[0], e = c.oScroll;
      a === d || a ? b.draw(!1) : "" === e.sX && "" === e.sY || za(c);
    };
    this.fnClearTable = function(a) {
      var b = this.api(!0).clear();
      (a === d || a) && b.draw();
    };
    this.fnClose = function(a) {
      this.api(!0).row(a).child.hide();
    };
    this.fnDeleteRow = function(a, b, c) {
      var e = this.api(!0);
      a = e.rows(a);
      var f = a.settings()[0], g = f.aoData[a[0][0]];
      a.remove();
      b && b.call(this, f, g);
      (c === d || c) && e.draw();
      return g;
    };
    this.fnDestroy = function(a) {
      this.api(!0).destroy(a);
    };
    this.fnDraw = function(a) {
      this.api(!0).draw(a);
    };
    this.fnFilter = function(a, b, c, e, f, g) {
      f = this.api(!0);
      null === b || b === d ? f.search(a, c, e, g) : f.column(b).search(a, c, e, g);
      f.draw();
    };
    this.fnGetData = function(a, b) {
      var c = this.api(!0);
      if (a !== d) {
        var e = a.nodeName ? a.nodeName.toLowerCase() : "";
        return b !== d || "td" == e || "th" == e ? c.cell(a, b).data() : c.row(a).data() || null;
      }
      return c.data().toArray();
    };
    this.fnGetNodes = function(a) {
      var b = this.api(!0);
      return a !== d ? b.row(a).node() : b.rows().nodes().flatten().toArray();
    };
    this.fnGetPosition = function(a) {
      var b = this.api(!0), c = a.nodeName.toUpperCase();
      return "TR" == c ? b.row(a).index() : "TD" == c || "TH" == c ? (a = b.cell(a).index(), [a.row, a.columnVisible, a.column]) : null;
    };
    this.fnIsOpen = function(a) {
      return this.api(!0).row(a).child.isShown();
    };
    this.fnOpen = function(a, b, c) {
      return this.api(!0).row(a).child(b, c).show().child()[0];
    };
    this.fnPageChange = function(a, b) {
      a = this.api(!0).page(a);
      (b === d || b) && a.draw(!1);
    };
    this.fnSetColumnVis = function(a, b, c) {
      a = this.api(!0).column(a).visible(b);
      (c === d || c) && a.columns.adjust().draw();
    };
    this.fnSettings = function() {
      return Fa(this[N.iApiIndex]);
    };
    this.fnSort = function(a) {
      this.api(!0).order(a).draw();
    };
    this.fnSortListener = function(a, b, c) {
      this.api(!0).order.listener(a, b, c);
    };
    this.fnUpdate = function(a, b, c, e, f) {
      var g = this.api(!0);
      c === d || null === c ? g.row(b).data(a) : g.cell(b, c).data(a);
      (f === d || f) && g.columns.adjust();
      (e === d || e) && g.draw();
      return 0;
    };
    this.fnVersionCheck = N.fnVersionCheck;
    var c = this, e = b === d, t = this.length;
    e && (b = {});
    this.oApi = this.internal = N.internal;
    for (var p in x.ext.internal) {
      p && (this[p] = Db(p));
    }
    this.each(function() {
      var p = {}, p = 1 < t ? Bb(p, b, !0) : b, w = 0, r, G = this.getAttribute("id"), aa = !1, u = x.defaults, ba = a(this);
      if ("table" != this.nodeName.toLowerCase()) {
        fa(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
      } else {
        h(u);
        l(u.column);
        f(u, u, !0);
        f(u.column, u.column, !0);
        f(u, a.extend(p, ba.data()));
        var v = x.settings, w = 0;
        for (r = v.length; w < r; w++) {
          var A = v[w];
          if (A.nTable == this || A.nTHead.parentNode == this || A.nTFoot && A.nTFoot.parentNode == this) {
            w = p.bRetrieve !== d ? p.bRetrieve : u.bRetrieve;
            if (e || w) {
              return A.oInstance;
            }
            if (p.bDestroy !== d ? p.bDestroy : u.bDestroy) {
              A.oInstance.fnDestroy();
              break;
            } else {
              fa(A, 0, "Cannot reinitialise DataTable", 3);
              return;
            }
          }
          if (A.sTableId == this.id) {
            v.splice(w, 1);
            break;
          }
        }
        if (null === G || "" === G) {
          this.id = G = "DataTables_Table_" + x.ext._unique++;
        }
        var y = a.extend(!0, {}, x.models.oSettings, {sDestroyWidth:ba[0].style.width, sInstance:G, sTableId:G});
        y.nTable = this;
        y.oApi = c.internal;
        y.oInit = p;
        v.push(y);
        y.oInstance = 1 === c.length ? c : ba.dataTable();
        h(p);
        p.oLanguage && g(p.oLanguage);
        p.aLengthMenu && !p.iDisplayLength && (p.iDisplayLength = a.isArray(p.aLengthMenu[0]) ? p.aLengthMenu[0][0] : p.aLengthMenu[0]);
        p = Bb(a.extend(!0, {}, u), p);
        ca(y.oFeatures, p, "bPaginate bLengthChange bFilter bSort bSortMulti bInfo bProcessing bAutoWidth bSortClasses bServerSide bDeferRender".split(" "));
        ca(y, p, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], ["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"], ["bJQueryUI", "bJUI"]]);
        ca(y.oScroll, p, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);
        ca(y.oLanguage, p, "fnInfoCallback");
        T(y, "aoDrawCallback", p.fnDrawCallback, "user");
        T(y, "aoServerParams", p.fnServerParams, "user");
        T(y, "aoStateSaveParams", p.fnStateSaveParams, "user");
        T(y, "aoStateLoadParams", p.fnStateLoadParams, "user");
        T(y, "aoStateLoaded", p.fnStateLoaded, "user");
        T(y, "aoRowCallback", p.fnRowCallback, "user");
        T(y, "aoRowCreatedCallback", p.fnCreatedRow, "user");
        T(y, "aoHeaderCallback", p.fnHeaderCallback, "user");
        T(y, "aoFooterCallback", p.fnFooterCallback, "user");
        T(y, "aoInitComplete", p.fnInitComplete, "user");
        T(y, "aoPreDrawCallback", p.fnPreDrawCallback, "user");
        y.rowIdFn = W(p.rowId);
        n(y);
        G = y.oClasses;
        p.bJQueryUI ? (a.extend(G, x.ext.oJUIClasses, p.oClasses), p.sDom === u.sDom && "lfrtip" === u.sDom && (y.sDom = '<"H"lfr>t<"F"ip>'), y.renderer) ? a.isPlainObject(y.renderer) && !y.renderer.header && (y.renderer.header = "jqueryui") : y.renderer = "jqueryui" : a.extend(G, x.ext.classes, p.oClasses);
        ba.addClass(G.sTable);
        y.iInitDisplayStart === d && (y.iInitDisplayStart = p.iDisplayStart, y._iDisplayStart = p.iDisplayStart);
        null !== p.iDeferLoading && (y.bDeferLoading = !0, w = a.isArray(p.iDeferLoading), y._iRecordsDisplay = w ? p.iDeferLoading[0] : p.iDeferLoading, y._iRecordsTotal = w ? p.iDeferLoading[1] : p.iDeferLoading);
        var B = y.oLanguage;
        a.extend(!0, B, p.oLanguage);
        "" !== B.sUrl && (a.ajax({dataType:"json", url:B.sUrl, success:function(b) {
          g(b);
          f(u.oLanguage, b);
          a.extend(!0, B, b);
          ua(y);
        }, error:function() {
          ua(y);
        }}), aa = !0);
        null === p.asStripeClasses && (y.asStripeClasses = [G.sStripeOdd, G.sStripeEven]);
        var w = y.asStripeClasses, C = ba.children("tbody").find("tr").eq(0);
        -1 !== a.inArray(!0, a.map(w, function(a, b) {
          return C.hasClass(a);
        })) && (a("tbody tr", this).removeClass(w.join(" ")), y.asDestroyStripes = w.slice());
        v = [];
        w = this.getElementsByTagName("thead");
        0 !== w.length && (ra(y.aoHeader, w[0]), v = wa(y));
        if (null === p.aoColumns) {
          for (A = [], w = 0, r = v.length; w < r; w++) {
            A.push(null);
          }
        } else {
          A = p.aoColumns;
        }
        w = 0;
        for (r = A.length; w < r; w++) {
          q(y, v ? v[w] : null);
        }
        H(y, p.aoColumnDefs, A, function(a, b) {
          m(y, a, b);
        });
        if (C.length) {
          var F = function(a, b) {
            return null !== a.getAttribute("data-" + b) ? b : null;
          };
          a(C[0]).children("th, td").each(function(a, b) {
            var c = y.aoColumns[a];
            if (c.mData === a) {
              var e = F(b, "sort") || F(b, "order");
              b = F(b, "filter") || F(b, "search");
              if (null !== e || null !== b) {
                c.mData = {_:a + ".display", sort:null !== e ? a + ".@data-" + e : d, type:null !== e ? a + ".@data-" + e : d, filter:null !== b ? a + ".@data-" + b : d}, m(y, a);
              }
            }
          });
        }
        var E = y.oFeatures;
        p.bStateSave && (E.bStateSave = !0, Ab(y, p), T(y, "aoDrawCallback", Ea, "state_save"));
        if (p.aaSorting === d) {
          for (v = y.aaSorting, w = 0, r = v.length; w < r; w++) {
            v[w][1] = y.aoColumns[w].asSorting[0];
          }
        }
        Da(y);
        E.bSort && T(y, "aoDrawCallback", function() {
          if (y.bSorted) {
            var b = na(y), c = {};
            a.each(b, function(a, b) {
              c[b.src] = b.dir;
            });
            M(y, null, "order", [y, b, c]);
            zb(y);
          }
        });
        T(y, "aoDrawCallback", function() {
          (y.bSorted || "ssp" === S(y) || E.bDeferRender) && Da(y);
        }, "sc");
        w = ba.children("caption").each(function() {
          this._captionSide = ba.css("caption-side");
        });
        r = ba.children("thead");
        0 === r.length && (r = a("<thead/>").appendTo(this));
        y.nTHead = r[0];
        r = ba.children("tbody");
        0 === r.length && (r = a("<tbody/>").appendTo(this));
        y.nTBody = r[0];
        r = ba.children("tfoot");
        0 === r.length && 0 < w.length && ("" !== y.oScroll.sX || "" !== y.oScroll.sY) && (r = a("<tfoot/>").appendTo(this));
        0 === r.length || 0 === r.children().length ? ba.addClass(G.sNoFooter) : 0 < r.length && (y.nTFoot = r[0], ra(y.aoFooter, y.nTFoot));
        if (p.aaData) {
          for (w = 0; w < p.aaData.length; w++) {
            z(y, p.aaData[w]);
          }
        } else {
          (y.bDeferLoading || "dom" == S(y)) && D(y, a(y.nTBody).children("tr"));
        }
        y.aiDisplay = y.aiDisplayMaster.slice();
        y.bInitialised = !0;
        !1 === aa && ua(y);
      }
    });
    c = null;
    return this;
  }, N, E, O, Wa = {}, Eb = /[\r\n]/g, Ia = /<.*?>/g, Qb = /^[\w\+\-]/, Rb = /[\w\+\-]$/, Sb = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\|\$|\^|\-)/g, Va = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi, ga = function(a) {
    return a && !0 !== a && "-" !== a ? !1 : !0;
  }, Fb = function(a) {
    var b = parseInt(a, 10);
    return !isNaN(b) && isFinite(a) ? b : null;
  }, Gb = function(a, b) {
    Wa[b] || (Wa[b] = new RegExp(Pa(b), "g"));
    return "string" === typeof a && "." !== b ? a.replace(/\./g, "").replace(Wa[b], ".") : a;
  }, Xa = function(a, b, c) {
    var d = "string" === typeof a;
    if (ga(a)) {
      return !0;
    }
    b && d && (a = Gb(a, b));
    c && d && (a = a.replace(Va, ""));
    return !isNaN(parseFloat(a)) && isFinite(a);
  }, Hb = function(a, b, c) {
    return ga(a) ? !0 : ga(a) || "string" === typeof a ? Xa(a.replace(Ia, ""), b, c) ? !0 : null : null;
  }, X = function(a, b, c) {
    var e = [], f = 0, g = a.length;
    if (c !== d) {
      for (; f < g; f++) {
        a[f] && a[f][b] && e.push(a[f][b][c]);
      }
    } else {
      for (; f < g; f++) {
        a[f] && e.push(a[f][b]);
      }
    }
    return e;
  }, va = function(a, b, c, e) {
    var f = [], g = 0, h = b.length;
    if (e !== d) {
      for (; g < h; g++) {
        a[b[g]][c] && f.push(a[b[g]][c][e]);
      }
    } else {
      for (; g < h; g++) {
        f.push(a[b[g]][c]);
      }
    }
    return f;
  }, oa = function(a, b) {
    var c = [];
    if (b === d) {
      b = 0;
      var e = a;
    } else {
      e = b, b = a;
    }
    for (a = b; a < e; a++) {
      c.push(a);
    }
    return c;
  }, Ib = function(a) {
    for (var b = [], c = 0, d = a.length; c < d; c++) {
      a[c] && b.push(a[c]);
    }
    return b;
  }, Aa = function(a) {
    var b = [], c = a.length, d, e = 0;
    var f = 0;
    a: for (; f < c; f++) {
      var g = a[f];
      for (d = 0; d < e; d++) {
        if (b[d] === g) {
          continue a;
        }
      }
      b.push(g);
      e++;
    }
    return b;
  };
  x.util = {throttle:function(a, b) {
    var c = b !== d ? b : 200, e, f;
    return function() {
      var b = this, g = +new Date, h = arguments;
      e && g < e + c ? (clearTimeout(f), f = setTimeout(function() {
        e = d;
        a.apply(b, h);
      }, c)) : (e = g, a.apply(b, h));
    };
  }, escapeRegex:function(a) {
    return a.replace(Sb, "\\$1");
  }};
  var V = function(a, b, c) {
    a[b] !== d && (a[c] = a[b]);
  }, ta = /\[.*?\]$/, ma = /\(\)$/, Pa = x.util.escapeRegex, Ca = a("<div>")[0], Ob = Ca.textContent !== d, Pb = /<.*?>/g, Oa = x.util.throttle, Jb = [], P = Array.prototype, Tb = function(b) {
    var c, d = x.settings, e = a.map(d, function(a, b) {
      return a.nTable;
    });
    if (b) {
      if (b.nTable && b.oApi) {
        return [b];
      }
      if (b.nodeName && "table" === b.nodeName.toLowerCase()) {
        var f = a.inArray(b, e);
        return -1 !== f ? [d[f]] : null;
      }
      if (b && "function" === typeof b.settings) {
        return b.settings().toArray();
      }
      "string" === typeof b ? c = a(b) : b instanceof a && (c = b);
    } else {
      return [];
    }
    if (c) {
      return c.map(function(b) {
        f = a.inArray(this, e);
        return -1 !== f ? d[f] : null;
      }).toArray();
    }
  };
  var J = function(b, c) {
    if (!(this instanceof J)) {
      return new J(b, c);
    }
    var d = [], e = function(a) {
      (a = Tb(a)) && (d = d.concat(a));
    };
    if (a.isArray(b)) {
      for (var f = 0, g = b.length; f < g; f++) {
        e(b[f]);
      }
    } else {
      e(b);
    }
    this.context = Aa(d);
    c && a.merge(this, c);
    this.selector = {rows:null, cols:null, opts:null};
    J.extend(this, this, Jb);
  };
  x.Api = J;
  a.extend(J.prototype, {any:function() {
    return 0 !== this.count();
  }, concat:P.concat, context:[], count:function() {
    return this.flatten().length;
  }, each:function(a) {
    for (var b = 0, c = this.length; b < c; b++) {
      a.call(this, this[b], b, this);
    }
    return this;
  }, eq:function(a) {
    var b = this.context;
    return b.length > a ? new J(b[a], this[a]) : null;
  }, filter:function(a) {
    var b = [];
    if (P.filter) {
      b = P.filter.call(this, a, this);
    } else {
      for (var c = 0, d = this.length; c < d; c++) {
        a.call(this, this[c], c, this) && b.push(this[c]);
      }
    }
    return new J(this.context, b);
  }, flatten:function() {
    var a = [];
    return new J(this.context, a.concat.apply(a, this.toArray()));
  }, join:P.join, indexOf:P.indexOf || function(a, b) {
    b = b || 0;
    for (var c = this.length; b < c; b++) {
      if (this[b] === a) {
        return b;
      }
    }
    return -1;
  }, iterator:function(a, b, c, e) {
    var f = [], g, h, l = this.context, n, t = this.selector;
    "string" === typeof a && (e = c, c = b, b = a, a = !1);
    var m = 0;
    for (g = l.length; m < g; m++) {
      var p = new J(l[m]);
      if ("table" === b) {
        var q = c.call(p, l[m], m);
        q !== d && f.push(q);
      } else {
        if ("columns" === b || "rows" === b) {
          q = c.call(p, l[m], this[m], m), q !== d && f.push(q);
        } else {
          if ("column" === b || "column-rows" === b || "row" === b || "cell" === b) {
            var w = this[m];
            "column-rows" === b && (n = Ja(l[m], t.opts));
            var r = 0;
            for (h = w.length; r < h; r++) {
              q = w[r], q = "cell" === b ? c.call(p, l[m], q.row, q.column, m, r) : c.call(p, l[m], q, m, r, n), q !== d && f.push(q);
            }
          }
        }
      }
    }
    return f.length || e ? (a = new J(l, a ? f.concat.apply([], f) : f), b = a.selector, b.rows = t.rows, b.cols = t.cols, b.opts = t.opts, a) : this;
  }, lastIndexOf:P.lastIndexOf || function(a, b) {
    return this.indexOf.apply(this.toArray.reverse(), arguments);
  }, length:0, map:function(a) {
    var b = [];
    if (P.map) {
      b = P.map.call(this, a, this);
    } else {
      for (var c = 0, d = this.length; c < d; c++) {
        b.push(a.call(this, this[c], c));
      }
    }
    return new J(this.context, b);
  }, pluck:function(a) {
    return this.map(function(b) {
      return b[a];
    });
  }, pop:P.pop, push:P.push, reduce:P.reduce || function(a, b) {
    return p(this, a, b, 0, this.length, 1);
  }, reduceRight:P.reduceRight || function(a, b) {
    return p(this, a, b, this.length - 1, -1, -1);
  }, reverse:P.reverse, selector:null, shift:P.shift, sort:P.sort, splice:P.splice, toArray:function() {
    return P.slice.call(this);
  }, to$:function() {
    return a(this);
  }, toJQuery:function() {
    return a(this);
  }, unique:function() {
    return new J(this.context, Aa(this));
  }, unshift:P.unshift});
  J.extend = function(b, c, d) {
    if (d.length && c && (c instanceof J || c.__dt_wrapper)) {
      var e, f = function(a, b, c) {
        return function() {
          var d = b.apply(a, arguments);
          J.extend(d, d, c.methodExt);
          return d;
        };
      };
      var g = 0;
      for (e = d.length; g < e; g++) {
        var h = d[g];
        c[h.name] = "function" === typeof h.val ? f(b, h.val, h) : a.isPlainObject(h.val) ? {} : h.val;
        c[h.name].__dt_wrapper = !0;
        J.extend(b, c[h.name], h.propExt);
      }
    }
  };
  J.register = E = function(b, c) {
    if (a.isArray(b)) {
      for (var d = 0, e = b.length; d < e; d++) {
        J.register(b[d], c);
      }
    } else {
      var e = b.split("."), f = Jb, g;
      b = 0;
      for (d = e.length; b < d; b++) {
        var h = (g = -1 !== e[b].indexOf("()")) ? e[b].replace("()", "") : e[b];
        a: {
          var l = 0;
          for (var n = f.length; l < n; l++) {
            if (f[l].name === h) {
              l = f[l];
              break a;
            }
          }
          l = null;
        }
        l || (l = {name:h, val:{}, methodExt:[], propExt:[]}, f.push(l));
        b === d - 1 ? l.val = c : f = g ? l.methodExt : l.propExt;
      }
    }
  };
  J.registerPlural = O = function(b, c, e) {
    J.register(b, e);
    J.register(c, function() {
      var b = e.apply(this, arguments);
      return b === this ? this : b instanceof J ? b.length ? a.isArray(b[0]) ? new J(b.context, b[0]) : b[0] : d : b;
    });
  };
  var Ub = function(b, c) {
    if ("number" === typeof b) {
      return [c[b]];
    }
    var d = a.map(c, function(a, b) {
      return a.nTable;
    });
    return a(d).filter(b).map(function(b) {
      b = a.inArray(this, d);
      return c[b];
    }).toArray();
  };
  E("tables()", function(a) {
    return a ? new J(Ub(a, this.context)) : this;
  });
  E("table()", function(a) {
    a = this.tables(a);
    var b = a.context;
    return b.length ? new J(b[0]) : a;
  });
  O("tables().nodes()", "table().node()", function() {
    return this.iterator("table", function(a) {
      return a.nTable;
    }, 1);
  });
  O("tables().body()", "table().body()", function() {
    return this.iterator("table", function(a) {
      return a.nTBody;
    }, 1);
  });
  O("tables().header()", "table().header()", function() {
    return this.iterator("table", function(a) {
      return a.nTHead;
    }, 1);
  });
  O("tables().footer()", "table().footer()", function() {
    return this.iterator("table", function(a) {
      return a.nTFoot;
    }, 1);
  });
  O("tables().containers()", "table().container()", function() {
    return this.iterator("table", function(a) {
      return a.nTableWrapper;
    }, 1);
  });
  E("draw()", function(a) {
    return this.iterator("table", function(b) {
      "page" === a ? ia(b) : ("string" === typeof a && (a = "full-hold" === a ? !1 : !0), ja(b, !1 === a));
    });
  });
  E("page()", function(a) {
    return a === d ? this.page.info().page : this.iterator("table", function(b) {
      Sa(b, a);
    });
  });
  E("page.info()", function(a) {
    if (0 === this.context.length) {
      return d;
    }
    a = this.context[0];
    var b = a._iDisplayStart, c = a.oFeatures.bPaginate ? a._iDisplayLength : -1, e = a.fnRecordsDisplay(), f = -1 === c;
    return {page:f ? 0 : Math.floor(b / c), pages:f ? 1 : Math.ceil(e / c), start:b, end:a.fnDisplayEnd(), length:c, recordsTotal:a.fnRecordsTotal(), recordsDisplay:e, serverSide:"ssp" === S(a)};
  });
  E("page.len()", function(a) {
    return a === d ? 0 !== this.context.length ? this.context[0]._iDisplayLength : d : this.iterator("table", function(b) {
      Qa(b, a);
    });
  });
  var Kb = function(a, b, c) {
    if (c) {
      var d = new J(a);
      d.one("draw", function() {
        c(d.ajax.json());
      });
    }
    if ("ssp" == S(a)) {
      ja(a, b);
    } else {
      Y(a, !0);
      var e = a.jqXHR;
      e && 4 !== e.readyState && e.abort();
      xa(a, [], function(c) {
        ka(a);
        c = ya(a, c);
        for (var d = 0, e = c.length; d < e; d++) {
          z(a, c[d]);
        }
        ja(a, b);
        Y(a, !1);
      });
    }
  };
  E("ajax.json()", function() {
    var a = this.context;
    if (0 < a.length) {
      return a[0].json;
    }
  });
  E("ajax.params()", function() {
    var a = this.context;
    if (0 < a.length) {
      return a[0].oAjaxData;
    }
  });
  E("ajax.reload()", function(a, b) {
    return this.iterator("table", function(c) {
      Kb(c, !1 === b, a);
    });
  });
  E("ajax.url()", function(b) {
    var c = this.context;
    if (b === d) {
      if (0 === c.length) {
        return d;
      }
      c = c[0];
      return c.ajax ? a.isPlainObject(c.ajax) ? c.ajax.url : c.ajax : c.sAjaxSource;
    }
    return this.iterator("table", function(c) {
      a.isPlainObject(c.ajax) ? c.ajax.url = b : c.ajax = b;
    });
  });
  E("ajax.url().load()", function(a, b) {
    return this.iterator("table", function(c) {
      Kb(c, !1 === b, a);
    });
  });
  var Ya = function(b, c, e, f, g) {
    var h = [], l, n, m;
    var p = typeof c;
    c && "string" !== p && "function" !== p && c.length !== d || (c = [c]);
    p = 0;
    for (n = c.length; p < n; p++) {
      var t = c[p] && c[p].split ? c[p].split(",") : [c[p]];
      var q = 0;
      for (m = t.length; q < m; q++) {
        (l = e("string" === typeof t[q] ? a.trim(t[q]) : t[q])) && l.length && (h = h.concat(l));
      }
    }
    b = N.selector[b];
    if (b.length) {
      for (p = 0, n = b.length; p < n; p++) {
        h = b[p](f, g, h);
      }
    }
    return Aa(h);
  }, Za = function(b) {
    b || (b = {});
    b.filter && b.search === d && (b.search = b.filter);
    return a.extend({search:"none", order:"current", page:"all"}, b);
  }, $a = function(a) {
    for (var b = 0, c = a.length; b < c; b++) {
      if (0 < a[b].length) {
        return a[0] = a[b], a[0].length = 1, a.length = 1, a.context = [a.context[b]], a;
      }
    }
    a.length = 0;
    return a;
  }, Ja = function(b, c) {
    var d = [], e = b.aiDisplay;
    var f = b.aiDisplayMaster;
    var g = c.search;
    var h = c.order;
    c = c.page;
    if ("ssp" == S(b)) {
      return "removed" === g ? [] : oa(0, f.length);
    }
    if ("current" == c) {
      for (f = b._iDisplayStart, b = b.fnDisplayEnd(); f < b; f++) {
        d.push(e[f]);
      }
    } else {
      if ("current" == h || "applied" == h) {
        d = "none" == g ? f.slice() : "applied" == g ? e.slice() : a.map(f, function(b, c) {
          return -1 === a.inArray(b, e) ? b : null;
        });
      } else {
        if ("index" == h || "original" == h) {
          for (f = 0, b = b.aoData.length; f < b; f++) {
            "none" == g ? d.push(f) : (h = a.inArray(f, e), (-1 === h && "removed" == g || 0 <= h && "applied" == g) && d.push(f));
          }
        }
      }
    }
    return d;
  }, Vb = function(b, c, e) {
    return Ya("row", c, function(c) {
      var f = Fb(c);
      if (null !== f && !e) {
        return [f];
      }
      var g = Ja(b, e);
      if (null !== f && -1 !== a.inArray(f, g)) {
        return [f];
      }
      if (!c) {
        return g;
      }
      if ("function" === typeof c) {
        return a.map(g, function(a) {
          var d = b.aoData[a];
          return c(a, d._aData, d.nTr) ? a : null;
        });
      }
      f = Ib(va(b.aoData, g, "nTr"));
      if (c.nodeName) {
        if (c._DT_RowIndex !== d) {
          return [c._DT_RowIndex];
        }
        if (c._DT_CellIndex) {
          return [c._DT_CellIndex.row];
        }
        f = a(c).closest("*[data-dt-row]");
        return f.length ? [f.data("dt-row")] : [];
      }
      return "string" === typeof c && "#" === c.charAt(0) && (g = b.aIds[c.replace(/^#/, "")], g !== d) ? [g.idx] : a(f).filter(c).map(function() {
        return this._DT_RowIndex;
      }).toArray();
    }, b, e);
  };
  E("rows()", function(b, c) {
    b === d ? b = "" : a.isPlainObject(b) && (c = b, b = "");
    c = Za(c);
    var e = this.iterator("table", function(a) {
      return Vb(a, b, c);
    }, 1);
    e.selector.rows = b;
    e.selector.opts = c;
    return e;
  });
  E("rows().nodes()", function() {
    return this.iterator("row", function(a, b) {
      return a.aoData[b].nTr || d;
    }, 1);
  });
  E("rows().data()", function() {
    return this.iterator(!0, "rows", function(a, b) {
      return va(a.aoData, b, "_aData");
    }, 1);
  });
  O("rows().cache()", "row().cache()", function(a) {
    return this.iterator("row", function(b, c) {
      b = b.aoData[c];
      return "search" === a ? b._aFilterData : b._aSortData;
    }, 1);
  });
  O("rows().invalidate()", "row().invalidate()", function(a) {
    return this.iterator("row", function(b, c) {
      R(b, c, a);
    });
  });
  O("rows().indexes()", "row().index()", function() {
    return this.iterator("row", function(a, b) {
      return b;
    }, 1);
  });
  O("rows().ids()", "row().id()", function(a) {
    for (var b = [], c = this.context, d = 0, e = c.length; d < e; d++) {
      for (var f = 0, g = this[d].length; f < g; f++) {
        var h = c[d].rowIdFn(c[d].aoData[this[d][f]]._aData);
        b.push((!0 === a ? "#" : "") + h);
      }
    }
    return new J(c, b);
  });
  O("rows().remove()", "row().remove()", function() {
    var a = this;
    this.iterator("row", function(b, c, e) {
      var f = b.aoData, g = f[c], h, l;
      f.splice(c, 1);
      var n = 0;
      for (h = f.length; n < h; n++) {
        var m = f[n];
        var p = m.anCells;
        null !== m.nTr && (m.nTr._DT_RowIndex = n);
        if (null !== p) {
          for (m = 0, l = p.length; m < l; m++) {
            p[m]._DT_CellIndex.row = n;
          }
        }
      }
      la(b.aiDisplayMaster, c);
      la(b.aiDisplay, c);
      la(a[e], c, !1);
      Ra(b);
      c = b.rowIdFn(g._aData);
      c !== d && delete b.aIds[c];
    });
    this.iterator("table", function(a) {
      for (var b = 0, c = a.aoData.length; b < c; b++) {
        a.aoData[b].idx = b;
      }
    });
    return this;
  });
  E("rows.add()", function(b) {
    var c = this.iterator("table", function(a) {
      var c, d = [];
      var e = 0;
      for (c = b.length; e < c; e++) {
        var f = b[e];
        f.nodeName && "TR" === f.nodeName.toUpperCase() ? d.push(D(a, f)[0]) : d.push(z(a, f));
      }
      return d;
    }, 1), d = this.rows(-1);
    d.pop();
    a.merge(d, c);
    return d;
  });
  E("row()", function(a, b) {
    return $a(this.rows(a, b));
  });
  E("row().data()", function(a) {
    var b = this.context;
    if (a === d) {
      return b.length && this.length ? b[0].aoData[this[0]]._aData : d;
    }
    b[0].aoData[this[0]]._aData = a;
    R(b[0], this[0], "data");
    return this;
  });
  E("row().node()", function() {
    var a = this.context;
    return a.length && this.length ? a[0].aoData[this[0]].nTr || null : null;
  });
  E("row.add()", function(b) {
    b instanceof a && b.length && (b = b[0]);
    var c = this.iterator("table", function(a) {
      return b.nodeName && "TR" === b.nodeName.toUpperCase() ? D(a, b)[0] : z(a, b);
    });
    return this.row(c[0]);
  });
  var Wb = function(b, c, d, e) {
    var f = [], g = function(c, d) {
      if (a.isArray(c) || c instanceof a) {
        for (var e = 0, h = c.length; e < h; e++) {
          g(c[e], d);
        }
      } else {
        c.nodeName && "tr" === c.nodeName.toLowerCase() ? f.push(c) : (e = a("<tr><td/></tr>").addClass(d), a("td", e).addClass(d).html(c)[0].colSpan = A(b), f.push(e[0]));
      }
    };
    g(d, e);
    c._details && c._details.remove();
    c._details = a(f);
    c._detailsShow && c._details.insertAfter(c.nTr);
  }, ab = function(a, b) {
    var c = a.context;
    c.length && (a = c[0].aoData[b !== d ? b : a[0]]) && a._details && (a._details.remove(), a._detailsShow = d, a._details = d);
  }, Lb = function(a, b) {
    var c = a.context;
    c.length && a.length && (a = c[0].aoData[a[0]], a._details && ((a._detailsShow = b) ? a._details.insertAfter(a.nTr) : a._details.detach(), Xb(c[0])));
  }, Xb = function(a) {
    var b = new J(a), c = a.aoData;
    b.off("draw.dt.DT_details column-visibility.dt.DT_details destroy.dt.DT_details");
    0 < X(c, "_details").length && (b.on("draw.dt.DT_details", function(d, e) {
      a === e && b.rows({page:"current"}).eq(0).each(function(a) {
        a = c[a];
        a._detailsShow && a._details.insertAfter(a.nTr);
      });
    }), b.on("column-visibility.dt.DT_details", function(b, d, e, f) {
      if (a === d) {
        for (d = A(d), e = 0, f = c.length; e < f; e++) {
          b = c[e], b._details && b._details.children("td[colspan]").attr("colspan", d);
        }
      }
    }), b.on("destroy.dt.DT_details", function(d, e) {
      if (a === e) {
        for (d = 0, e = c.length; d < e; d++) {
          c[d]._details && ab(b, d);
        }
      }
    }));
  };
  E("row().child()", function(a, b) {
    var c = this.context;
    if (a === d) {
      return c.length && this.length ? c[0].aoData[this[0]]._details : d;
    }
    !0 === a ? this.child.show() : !1 === a ? ab(this) : c.length && this.length && Wb(c[0], c[0].aoData[this[0]], a, b);
    return this;
  });
  E(["row().child.show()", "row().child().show()"], function(a) {
    Lb(this, !0);
    return this;
  });
  E(["row().child.hide()", "row().child().hide()"], function() {
    Lb(this, !1);
    return this;
  });
  E(["row().child.remove()", "row().child().remove()"], function() {
    ab(this);
    return this;
  });
  E("row().child.isShown()", function() {
    var a = this.context;
    return a.length && this.length ? a[0].aoData[this[0]]._detailsShow || !1 : !1;
  });
  var Yb = /^(.+):(name|visIdx|visible)$/, Mb = function(a, b, c, d, e) {
    c = [];
    d = 0;
    for (var f = e.length; d < f; d++) {
      c.push(F(a, e[d], b));
    }
    return c;
  }, Zb = function(b, c, d) {
    var e = b.aoColumns, f = X(e, "sName"), g = X(e, "nTh");
    return Ya("column", c, function(c) {
      var h = Fb(c);
      if ("" === c) {
        return oa(e.length);
      }
      if (null !== h) {
        return [0 <= h ? h : e.length + h];
      }
      if ("function" === typeof c) {
        var l = Ja(b, d);
        return a.map(e, function(a, d) {
          return c(d, Mb(b, d, 0, 0, l), g[d]) ? d : null;
        });
      }
      var n = "string" === typeof c ? c.match(Yb) : "";
      if (n) {
        switch(n[2]) {
          case "visIdx":
          case "visible":
            h = parseInt(n[1], 10);
            if (0 > h) {
              var m = a.map(e, function(a, b) {
                return a.bVisible ? b : null;
              });
              return [m[m.length + h]];
            }
            return [u(b, h)];
          case "name":
            return a.map(f, function(a, b) {
              return a === n[1] ? b : null;
            });
          default:
            return [];
        }
      }
      if (c.nodeName && c._DT_CellIndex) {
        return [c._DT_CellIndex.column];
      }
      h = a(g).filter(c).map(function() {
        return a.inArray(this, g);
      }).toArray();
      if (h.length || !c.nodeName) {
        return h;
      }
      h = a(c).closest("*[data-dt-column]");
      return h.length ? [h.data("dt-column")] : [];
    }, b, d);
  };
  E("columns()", function(b, c) {
    b === d ? b = "" : a.isPlainObject(b) && (c = b, b = "");
    c = Za(c);
    var e = this.iterator("table", function(a) {
      return Zb(a, b, c);
    }, 1);
    e.selector.cols = b;
    e.selector.opts = c;
    return e;
  });
  O("columns().header()", "column().header()", function(a, b) {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].nTh;
    }, 1);
  });
  O("columns().footer()", "column().footer()", function(a, b) {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].nTf;
    }, 1);
  });
  O("columns().data()", "column().data()", function() {
    return this.iterator("column-rows", Mb, 1);
  });
  O("columns().dataSrc()", "column().dataSrc()", function() {
    return this.iterator("column", function(a, b) {
      return a.aoColumns[b].mData;
    }, 1);
  });
  O("columns().cache()", "column().cache()", function(a) {
    return this.iterator("column-rows", function(b, c, d, e, f) {
      return va(b.aoData, f, "search" === a ? "_aFilterData" : "_aSortData", c);
    }, 1);
  });
  O("columns().nodes()", "column().nodes()", function() {
    return this.iterator("column-rows", function(a, b, c, d, e) {
      return va(a.aoData, e, "anCells", b);
    }, 1);
  });
  O("columns().visible()", "column().visible()", function(b, c) {
    var e = this.iterator("column", function(c, e) {
      if (b === d) {
        return c.aoColumns[e].bVisible;
      }
      var f = c.aoColumns, g = f[e], h = c.aoData, l;
      if (b !== d && g.bVisible !== b) {
        if (b) {
          var n = a.inArray(!0, X(f, "bVisible"), e + 1);
          var m = 0;
          for (l = h.length; m < l; m++) {
            var p = h[m].nTr;
            f = h[m].anCells;
            p && p.insertBefore(f[e], f[n] || null);
          }
        } else {
          a(X(c.aoData, "anCells", e)).detach();
        }
        g.bVisible = b;
        qa(c, c.aoHeader);
        qa(c, c.aoFooter);
        Ea(c);
      }
    });
    b !== d && (this.iterator("column", function(a, d) {
      M(a, null, "column-visibility", [a, d, b, c]);
    }), (c === d || c) && this.columns.adjust());
    return e;
  });
  O("columns().indexes()", "column().index()", function(a) {
    return this.iterator("column", function(b, c) {
      return "visible" === a ? v(b, c) : c;
    }, 1);
  });
  E("columns.adjust()", function() {
    return this.iterator("table", function(a) {
      r(a);
    }, 1);
  });
  E("column.index()", function(a, b) {
    if (0 !== this.context.length) {
      var c = this.context[0];
      if ("fromVisible" === a || "toData" === a) {
        return u(c, b);
      }
      if ("fromData" === a || "toVisible" === a) {
        return v(c, b);
      }
    }
  });
  E("column()", function(a, b) {
    return $a(this.columns(a, b));
  });
  var $b = function(b, c, e) {
    var f = b.aoData, g = Ja(b, e), h = Ib(va(f, g, "anCells")), l = a([].concat.apply([], h)), n, m = b.aoColumns.length, p, q, t, r, w, u;
    return Ya("cell", c, function(c) {
      var e = "function" === typeof c;
      if (null === c || c === d || e) {
        p = [];
        q = 0;
        for (t = g.length; q < t; q++) {
          for (n = g[q], r = 0; r < m; r++) {
            w = {row:n, column:r}, e ? (u = f[n], c(w, F(b, n, r), u.anCells ? u.anCells[r] : null) && p.push(w)) : p.push(w);
          }
        }
        return p;
      }
      if (a.isPlainObject(c)) {
        return [c];
      }
      e = l.filter(c).map(function(a, b) {
        return {row:b._DT_CellIndex.row, column:b._DT_CellIndex.column};
      }).toArray();
      if (e.length || !c.nodeName) {
        return e;
      }
      u = a(c).closest("*[data-dt-row]");
      return u.length ? [{row:u.data("dt-row"), column:u.data("dt-column")}] : [];
    }, b, e);
  };
  E("cells()", function(b, c, e) {
    a.isPlainObject(b) && (b.row === d ? (e = b, b = null) : (e = c, c = null));
    a.isPlainObject(c) && (e = c, c = null);
    if (null === c || c === d) {
      return this.iterator("table", function(a) {
        return $b(a, b, Za(e));
      });
    }
    var f = this.columns(c, e), g = this.rows(b, e), h, l, n, m, p, q = this.iterator("table", function(a, b) {
      h = [];
      l = 0;
      for (n = g[b].length; l < n; l++) {
        for (m = 0, p = f[b].length; m < p; m++) {
          h.push({row:g[b][l], column:f[b][m]});
        }
      }
      return h;
    }, 1);
    a.extend(q.selector, {cols:c, rows:b, opts:e});
    return q;
  });
  O("cells().nodes()", "cell().node()", function() {
    return this.iterator("cell", function(a, b, c) {
      return (a = a.aoData[b]) && a.anCells ? a.anCells[c] : d;
    }, 1);
  });
  E("cells().data()", function() {
    return this.iterator("cell", function(a, b, c) {
      return F(a, b, c);
    }, 1);
  });
  O("cells().cache()", "cell().cache()", function(a) {
    a = "search" === a ? "_aFilterData" : "_aSortData";
    return this.iterator("cell", function(b, c, d) {
      return b.aoData[c][a][d];
    }, 1);
  });
  O("cells().render()", "cell().render()", function(a) {
    return this.iterator("cell", function(b, c, d) {
      return F(b, c, d, a);
    }, 1);
  });
  O("cells().indexes()", "cell().index()", function() {
    return this.iterator("cell", function(a, b, c) {
      return {row:b, column:c, columnVisible:v(a, c)};
    }, 1);
  });
  O("cells().invalidate()", "cell().invalidate()", function(a) {
    return this.iterator("cell", function(b, c, d) {
      R(b, c, a, d);
    });
  });
  E("cell()", function(a, b, c) {
    return $a(this.cells(a, b, c));
  });
  E("cell().data()", function(a) {
    var b = this.context, c = this[0];
    if (a === d) {
      return b.length && c.length ? F(b[0], c[0].row, c[0].column) : d;
    }
    K(b[0], c[0].row, c[0].column, a);
    R(b[0], c[0].row, "data", c[0].column);
    return this;
  });
  E("order()", function(b, c) {
    var e = this.context;
    if (b === d) {
      return 0 !== e.length ? e[0].aaSorting : d;
    }
    "number" === typeof b ? b = [[b, c]] : b.length && !a.isArray(b[0]) && (b = Array.prototype.slice.call(arguments));
    return this.iterator("table", function(a) {
      a.aaSorting = b.slice();
    });
  });
  E("order.listener()", function(a, b, c) {
    return this.iterator("table", function(d) {
      Ma(d, a, b, c);
    });
  });
  E("order.fixed()", function(b) {
    if (!b) {
      var c = this.context, c = c.length ? c[0].aaSortingFixed : d;
      return a.isArray(c) ? {pre:c} : c;
    }
    return this.iterator("table", function(c) {
      c.aaSortingFixed = a.extend(!0, {}, b);
    });
  });
  E(["columns().order()", "column().order()"], function(b) {
    var c = this;
    return this.iterator("table", function(d, e) {
      var f = [];
      a.each(c[e], function(a, c) {
        f.push([c, b]);
      });
      d.aaSorting = f;
    });
  });
  E("search()", function(b, c, e, f) {
    var g = this.context;
    return b === d ? 0 !== g.length ? g[0].oPreviousSearch.sSearch : d : this.iterator("table", function(d) {
      d.oFeatures.bFilter && sa(d, a.extend({}, d.oPreviousSearch, {sSearch:b + "", bRegex:null === c ? !1 : c, bSmart:null === e ? !0 : e, bCaseInsensitive:null === f ? !0 : f}), 1);
    });
  });
  O("columns().search()", "column().search()", function(b, c, e, f) {
    return this.iterator("column", function(g, h) {
      var l = g.aoPreSearchCols;
      if (b === d) {
        return l[h].sSearch;
      }
      g.oFeatures.bFilter && (a.extend(l[h], {sSearch:b + "", bRegex:null === c ? !1 : c, bSmart:null === e ? !0 : e, bCaseInsensitive:null === f ? !0 : f}), sa(g, g.oPreviousSearch, 1));
    });
  });
  E("state()", function() {
    return this.context.length ? this.context[0].oSavedState : null;
  });
  E("state.clear()", function() {
    return this.iterator("table", function(a) {
      a.fnStateSaveCallback.call(a.oInstance, a, {});
    });
  });
  E("state.loaded()", function() {
    return this.context.length ? this.context[0].oLoadedState : null;
  });
  E("state.save()", function() {
    return this.iterator("table", function(a) {
      Ea(a);
    });
  });
  x.versionCheck = x.fnVersionCheck = function(a) {
    var b = x.version.split(".");
    a = a.split(".");
    for (var c, d, e = 0, f = a.length; e < f; e++) {
      if (c = parseInt(b[e], 10) || 0, d = parseInt(a[e], 10) || 0, c !== d) {
        return c > d;
      }
    }
    return !0;
  };
  x.isDataTable = x.fnIsDataTable = function(b) {
    var c = a(b).get(0), d = !1;
    a.each(x.settings, function(b, e) {
      b = e.nScrollHead ? a("table", e.nScrollHead)[0] : null;
      var f = e.nScrollFoot ? a("table", e.nScrollFoot)[0] : null;
      if (e.nTable === c || b === c || f === c) {
        d = !0;
      }
    });
    return d;
  };
  x.tables = x.fnTables = function(b) {
    var c = !1;
    a.isPlainObject(b) && (c = b.api, b = b.visible);
    var d = a.map(x.settings, function(c) {
      if (!b || b && a(c.nTable).is(":visible")) {
        return c.nTable;
      }
    });
    return c ? new J(d) : d;
  };
  x.camelToHungarian = f;
  E("$()", function(b, c) {
    c = this.rows(c).nodes();
    c = a(c);
    return a([].concat(c.filter(b).toArray(), c.find(b).toArray()));
  });
  a.each(["on", "one", "off"], function(b, c) {
    E(c + "()", function() {
      var b = Array.prototype.slice.call(arguments);
      b[0].match(/\.dt\b/) || (b[0] += ".dt");
      var d = a(this.tables().nodes());
      d[c].apply(d, b);
      return this;
    });
  });
  E("clear()", function() {
    return this.iterator("table", function(a) {
      ka(a);
    });
  });
  E("settings()", function() {
    return new J(this.context, this.context);
  });
  E("init()", function() {
    var a = this.context;
    return a.length ? a[0].oInit : null;
  });
  E("data()", function() {
    return this.iterator("table", function(a) {
      return X(a.aoData, "_aData");
    }).flatten();
  });
  E("destroy()", function(c) {
    c = c || !1;
    return this.iterator("table", function(d) {
      var e = d.nTableWrapper.parentNode, f = d.oClasses, g = d.nTable, h = d.nTBody, l = d.nTHead, n = d.nTFoot, m = a(g), h = a(h), p = a(d.nTableWrapper), q = a.map(d.aoData, function(a) {
        return a.nTr;
      }), r;
      d.bDestroying = !0;
      M(d, "aoDestroyCallback", "destroy", [d]);
      c || (new J(d)).columns().visible(!0);
      p.unbind(".DT").find(":not(tbody *)").unbind(".DT");
      a(b).unbind(".DT-" + d.sInstance);
      g != l.parentNode && (m.children("thead").detach(), m.append(l));
      n && g != n.parentNode && (m.children("tfoot").detach(), m.append(n));
      d.aaSorting = [];
      d.aaSortingFixed = [];
      Da(d);
      a(q).removeClass(d.asStripeClasses.join(" "));
      a("th, td", l).removeClass(f.sSortable + " " + f.sSortableAsc + " " + f.sSortableDesc + " " + f.sSortableNone);
      d.bJUI && (a("th span." + f.sSortIcon + ", td span." + f.sSortIcon, l).detach(), a("th, td", l).each(function() {
        var b = a("div." + f.sSortJUIWrapper, this);
        a(this).append(b.contents());
        b.detach();
      }));
      h.children().detach();
      h.append(q);
      l = c ? "remove" : "detach";
      m[l]();
      p[l]();
      !c && e && (e.insertBefore(g, d.nTableReinsertBefore), m.css("width", d.sDestroyWidth).removeClass(f.sTable), (r = d.asDestroyStripes.length) && h.children().each(function(b) {
        a(this).addClass(d.asDestroyStripes[b % r]);
      }));
      e = a.inArray(d, x.settings);
      -1 !== e && x.settings.splice(e, 1);
    });
  });
  a.each(["column", "row", "cell"], function(a, b) {
    E(b + "s().every()", function(a) {
      var c = this.selector.opts, e = this;
      return this.iterator(b, function(f, g, h, l, n) {
        a.call(e[b](g, "cell" === b ? h : c, "cell" === b ? c : d), g, h, l, n);
      });
    });
  });
  E("i18n()", function(b, c, e) {
    var f = this.context[0];
    b = W(b)(f.oLanguage);
    b === d && (b = c);
    e !== d && a.isPlainObject(b) && (b = b[e] !== d ? b[e] : b._);
    return b.replace("%d", e);
  });
  x.version = "1.10.12";
  x.settings = [];
  x.models = {};
  x.models.oSearch = {bCaseInsensitive:!0, sSearch:"", bRegex:!1, bSmart:!0};
  x.models.oRow = {nTr:null, anCells:null, _aData:[], _aSortData:null, _aFilterData:null, _sFilterRow:null, _sRowStripe:"", src:null, idx:-1};
  x.models.oColumn = {idx:null, aDataSort:null, asSorting:null, bSearchable:null, bSortable:null, bVisible:null, _sManualType:null, _bAttrSrc:!1, fnCreatedCell:null, fnGetData:null, fnSetData:null, mData:null, mRender:null, nTh:null, nTf:null, sClass:null, sContentPadding:null, sDefaultContent:null, sName:null, sSortDataType:"std", sSortingClass:null, sSortingClassJUI:null, sTitle:null, sType:null, sWidth:null, sWidthOrig:null};
  x.defaults = {aaData:null, aaSorting:[[0, "asc"]], aaSortingFixed:[], ajax:null, aLengthMenu:[10, 25, 50, 100], aoColumns:null, aoColumnDefs:null, aoSearchCols:[], asStripeClasses:null, bAutoWidth:!0, bDeferRender:!1, bDestroy:!1, bFilter:!0, bInfo:!0, bJQueryUI:!1, bLengthChange:!0, bPaginate:!0, bProcessing:!1, bRetrieve:!1, bScrollCollapse:!1, bServerSide:!1, bSort:!0, bSortMulti:!0, bSortCellsTop:!1, bSortClasses:!0, bStateSave:!1, fnCreatedRow:null, fnDrawCallback:null, fnFooterCallback:null, 
  fnFormatNumber:function(a) {
    return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
  }, fnHeaderCallback:null, fnInfoCallback:null, fnInitComplete:null, fnPreDrawCallback:null, fnRowCallback:null, fnServerData:null, fnServerParams:null, fnStateLoadCallback:function(a) {
    try {
      return JSON.parse((-1 === a.iStateDuration ? sessionStorage : localStorage).getItem("DataTables_" + a.sInstance + "_" + location.pathname));
    } catch (w) {
    }
  }, fnStateLoadParams:null, fnStateLoaded:null, fnStateSaveCallback:function(a, b) {
    try {
      (-1 === a.iStateDuration ? sessionStorage : localStorage).setItem("DataTables_" + a.sInstance + "_" + location.pathname, JSON.stringify(b));
    } catch (G) {
    }
  }, fnStateSaveParams:null, iStateDuration:7200, iDeferLoading:null, iDisplayLength:10, iDisplayStart:0, iTabIndex:0, oClasses:{}, oLanguage:{oAria:{sSortAscending:": activate to sort column ascending", sSortDescending:": activate to sort column descending"}, oPaginate:{sFirst:"First", sLast:"Last", sNext:"Next", sPrevious:"Previous"}, sEmptyTable:"No data available in table", sInfo:"Showing _START_ to _END_ of _TOTAL_ entries", sInfoEmpty:"Showing 0 to 0 of 0 entries", sInfoFiltered:"(filtered from _MAX_ total entries)", 
  sInfoPostFix:"", sDecimal:"", sThousands:",", sLengthMenu:"Show _MENU_ entries", sLoadingRecords:"Loading...", sProcessing:"Processing...", sSearch:"Search:", sSearchPlaceholder:"", sUrl:"", sZeroRecords:"No matching records found"}, oSearch:a.extend({}, x.models.oSearch), sAjaxDataProp:"data", sAjaxSource:null, sDom:"lfrtip", searchDelay:null, sPaginationType:"simple_numbers", sScrollX:"", sScrollXInner:"", sScrollY:"", sServerMethod:"GET", renderer:null, rowId:"DT_RowId"};
  e(x.defaults);
  x.defaults.column = {aDataSort:null, iDataSort:-1, asSorting:["asc", "desc"], bSearchable:!0, bSortable:!0, bVisible:!0, fnCreatedCell:null, mData:null, mRender:null, sCellType:"td", sClass:"", sContentPadding:"", sDefaultContent:null, sName:"", sSortDataType:"std", sTitle:null, sType:null, sWidth:null};
  e(x.defaults.column);
  x.models.oSettings = {oFeatures:{bAutoWidth:null, bDeferRender:null, bFilter:null, bInfo:null, bLengthChange:null, bPaginate:null, bProcessing:null, bServerSide:null, bSort:null, bSortMulti:null, bSortClasses:null, bStateSave:null}, oScroll:{bCollapse:null, iBarWidth:0, sX:null, sXInner:null, sY:null}, oLanguage:{fnInfoCallback:null}, oBrowser:{bScrollOversize:!1, bScrollbarLeft:!1, bBounding:!1, barWidth:0}, ajax:null, aanFeatures:[], aoData:[], aiDisplay:[], aiDisplayMaster:[], aIds:{}, aoColumns:[], 
  aoHeader:[], aoFooter:[], oPreviousSearch:{}, aoPreSearchCols:[], aaSorting:null, aaSortingFixed:[], asStripeClasses:null, asDestroyStripes:[], sDestroyWidth:0, aoRowCallback:[], aoHeaderCallback:[], aoFooterCallback:[], aoDrawCallback:[], aoRowCreatedCallback:[], aoPreDrawCallback:[], aoInitComplete:[], aoStateSaveParams:[], aoStateLoadParams:[], aoStateLoaded:[], sTableId:"", nTable:null, nTHead:null, nTFoot:null, nTBody:null, nTableWrapper:null, bDeferLoading:!1, bInitialised:!1, aoOpenRows:[], 
  sDom:null, searchDelay:null, sPaginationType:"two_button", iStateDuration:0, aoStateSave:[], aoStateLoad:[], oSavedState:null, oLoadedState:null, sAjaxSource:null, sAjaxDataProp:null, bAjaxDataGet:!0, jqXHR:null, json:d, oAjaxData:d, fnServerData:null, aoServerParams:[], sServerMethod:null, fnFormatNumber:null, aLengthMenu:null, iDraw:0, bDrawing:!1, iDrawError:-1, _iDisplayLength:10, _iDisplayStart:0, _iRecordsTotal:0, _iRecordsDisplay:0, bJUI:null, oClasses:{}, bFiltered:!1, bSorted:!1, bSortCellsTop:null, 
  oInit:null, aoDestroyCallback:[], fnRecordsTotal:function() {
    return "ssp" == S(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length;
  }, fnRecordsDisplay:function() {
    return "ssp" == S(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length;
  }, fnDisplayEnd:function() {
    var a = this._iDisplayLength, b = this._iDisplayStart, c = b + a, d = this.aiDisplay.length, e = this.oFeatures, f = e.bPaginate;
    return e.bServerSide ? !1 === f || -1 === a ? b + d : Math.min(b + a, this._iRecordsDisplay) : !f || c > d || -1 === a ? d : c;
  }, oInstance:null, sInstance:null, iTabIndex:0, nScrollHead:null, nScrollFoot:null, aLastSort:[], oPlugins:{}, rowIdFn:null, rowId:null};
  x.ext = N = {buttons:{}, classes:{}, builder:"-source-", errMode:"window.console.error", feature:[], search:[], selector:{cell:[], column:[], row:[]}, internal:{}, legacy:{ajax:null}, pager:{}, renderer:{pageButton:{}, header:{}}, order:{}, type:{detect:[], search:{}, order:{}}, _unique:0, fnVersionCheck:x.fnVersionCheck, iApiIndex:0, oJUIClasses:{}, sVersion:x.version};
  a.extend(N, {afnFiltering:N.search, aTypes:N.type.detect, ofnSearch:N.type.search, oSort:N.type.order, afnSortData:N.order, aoFeatures:N.feature, oApi:N.internal, oStdClasses:N.classes, oPagination:N.pager});
  a.extend(x.ext.classes, {sTable:"dataTable", sNoFooter:"no-footer", sPageButton:"paginate_button", sPageButtonActive:"current", sPageButtonDisabled:"disabled", sStripeOdd:"odd", sStripeEven:"even", sRowEmpty:"dataTables_empty", sWrapper:"dataTables_wrapper", sFilter:"dataTables_filter", sInfo:"dataTables_info", sPaging:"dataTables_paginate paging_", sLength:"dataTables_length", sProcessing:"dataTables_processing", sSortAsc:"sorting_asc", sSortDesc:"sorting_desc", sSortable:"sorting", sSortableAsc:"sorting_asc_disabled", 
  sSortableDesc:"sorting_desc_disabled", sSortableNone:"sorting_disabled", sSortColumn:"sorting_", sFilterInput:"", sLengthSelect:"", sScrollWrapper:"dataTables_scroll", sScrollHead:"dataTables_scrollHead", sScrollHeadInner:"dataTables_scrollHeadInner", sScrollBody:"dataTables_scrollBody", sScrollFoot:"dataTables_scrollFoot", sScrollFootInner:"dataTables_scrollFootInner", sHeaderTH:"", sFooterTH:"", sSortJUIAsc:"", sSortJUIDesc:"", sSortJUI:"", sSortJUIAscAllowed:"", sSortJUIDescAllowed:"", sSortJUIWrapper:"", 
  sSortIcon:"", sJUIHeader:"", sJUIFooter:""});
  a.extend(x.ext.oJUIClasses, x.ext.classes, {sPageButton:"fg-button ui-button ui-state-default", sPageButtonActive:"ui-state-disabled", sPageButtonDisabled:"ui-state-disabled", sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_", sSortAsc:"ui-state-default sorting_asc", sSortDesc:"ui-state-default sorting_desc", sSortable:"ui-state-default sorting", sSortableAsc:"ui-state-default sorting_asc_disabled", sSortableDesc:"ui-state-default sorting_desc_disabled", 
  sSortableNone:"ui-state-default sorting_disabled", sSortJUIAsc:"css_right ui-icon ui-icon-triangle-1-n", sSortJUIDesc:"css_right ui-icon ui-icon-triangle-1-s", sSortJUI:"css_right ui-icon ui-icon-carat-2-n-s", sSortJUIAscAllowed:"css_right ui-icon ui-icon-carat-1-n", sSortJUIDescAllowed:"css_right ui-icon ui-icon-carat-1-s", sSortJUIWrapper:"DataTables_sort_wrapper", sSortIcon:"DataTables_sort_icon", sScrollHead:"dataTables_scrollHead ui-state-default", sScrollFoot:"dataTables_scrollFoot ui-state-default", 
  sHeaderTH:"ui-state-default", sFooterTH:"ui-state-default", sJUIHeader:"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-tl ui-corner-tr", sJUIFooter:"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix ui-corner-bl ui-corner-br"});
  var Cb = x.ext.pager;
  a.extend(Cb, {simple:function(a, b) {
    return ["previous", "next"];
  }, full:function(a, b) {
    return ["first", "previous", "next", "last"];
  }, numbers:function(a, b) {
    return [Ga(a, b)];
  }, simple_numbers:function(a, b) {
    return ["previous", Ga(a, b), "next"];
  }, full_numbers:function(a, b) {
    return ["first", "previous", Ga(a, b), "next", "last"];
  }, _numbers:Ga, numbers_length:7});
  a.extend(!0, x.ext.renderer, {pageButton:{_:function(b, d, e, f, g, h) {
    var l = b.oClasses, n = b.oLanguage.oPaginate, m = b.oLanguage.oAria.paginate || {}, p, q, r = 0, t = function(c, d) {
      var f, u = function(a) {
        Sa(b, a.data.action, !0);
      };
      var w = 0;
      for (f = d.length; w < f; w++) {
        var v = d[w];
        if (a.isArray(v)) {
          var x = a("<" + (v.DT_el || "div") + "/>").appendTo(c);
          t(x, v);
        } else {
          p = null;
          q = "";
          switch(v) {
            case "ellipsis":
              c.append('<span class="ellipsis">&#x2026;</span>');
              break;
            case "first":
              p = n.sFirst;
              q = v + (0 < g ? "" : " " + l.sPageButtonDisabled);
              break;
            case "previous":
              p = n.sPrevious;
              q = v + (0 < g ? "" : " " + l.sPageButtonDisabled);
              break;
            case "next":
              p = n.sNext;
              q = v + (g < h - 1 ? "" : " " + l.sPageButtonDisabled);
              break;
            case "last":
              p = n.sLast;
              q = v + (g < h - 1 ? "" : " " + l.sPageButtonDisabled);
              break;
            default:
              p = v + 1, q = g === v ? l.sPageButtonActive : "";
          }
          null !== p && (x = a("<a>", {"class":l.sPageButton + " " + q, "aria-controls":b.sTableId, "aria-label":m[v], "data-dt-idx":r, tabindex:b.iTabIndex, id:0 === e && "string" === typeof v ? b.sTableId + "_" + v : null}).html(p).appendTo(c), Ua(x, {action:v}, u), r++);
        }
      }
    };
    try {
      var u = a(d).find(c.activeElement).data("dt-idx");
    } catch (y) {
    }
    t(a(d).empty(), f);
    u && a(d).find("[data-dt-idx=" + u + "]").focus();
  }}});
  a.extend(x.ext.type.detect, [function(a, b) {
    b = b.oLanguage.sDecimal;
    return Xa(a, b) ? "num" + b : null;
  }, function(a, b) {
    if (!(!a || a instanceof Date || Qb.test(a) && Rb.test(a))) {
      return null;
    }
    b = Date.parse(a);
    return null !== b && !isNaN(b) || ga(a) ? "date" : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Xa(a, b, !0) ? "num-fmt" + b : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Hb(a, b) ? "html-num" + b : null;
  }, function(a, b) {
    b = b.oLanguage.sDecimal;
    return Hb(a, b, !0) ? "html-num-fmt" + b : null;
  }, function(a, b) {
    return ga(a) || "string" === typeof a && -1 !== a.indexOf("<") ? "html" : null;
  }]);
  a.extend(x.ext.type.search, {html:function(a) {
    return ga(a) ? a : "string" === typeof a ? a.replace(Eb, " ").replace(Ia, "") : "";
  }, string:function(a) {
    return ga(a) ? a : "string" === typeof a ? a.replace(Eb, " ") : a;
  }});
  var Ha = function(a, b, c, d) {
    if (0 !== a && (!a || "-" === a)) {
      return -Infinity;
    }
    b && (a = Gb(a, b));
    a.replace && (c && (a = a.replace(c, "")), d && (a = a.replace(d, "")));
    return 1 * a;
  };
  a.extend(N.type.order, {"date-pre":function(a) {
    return Date.parse(a) || 0;
  }, "html-pre":function(a) {
    return ga(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "";
  }, "string-pre":function(a) {
    return ga(a) ? "" : "string" === typeof a ? a.toLowerCase() : a.toString ? a.toString() : "";
  }, "string-asc":function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }, "string-desc":function(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }});
  nb("");
  a.extend(!0, x.ext.renderer, {header:{_:function(b, c, d, e) {
    a(b.nTable).on("order.dt.DT", function(a, f, g, h) {
      b === f && (a = d.idx, c.removeClass(d.sSortingClass + " " + e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[a] ? e.sSortAsc : "desc" == h[a] ? e.sSortDesc : d.sSortingClass));
    });
  }, jqueryui:function(b, c, d, e) {
    a("<div/>").addClass(e.sSortJUIWrapper).append(c.contents()).append(a("<span/>").addClass(e.sSortIcon + " " + d.sSortingClassJUI)).appendTo(c);
    a(b.nTable).on("order.dt.DT", function(a, f, g, h) {
      b === f && (a = d.idx, c.removeClass(e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[a] ? e.sSortAsc : "desc" == h[a] ? e.sSortDesc : d.sSortingClass), c.find("span." + e.sSortIcon).removeClass(e.sSortJUIAsc + " " + e.sSortJUIDesc + " " + e.sSortJUI + " " + e.sSortJUIAscAllowed + " " + e.sSortJUIDescAllowed).addClass("asc" == h[a] ? e.sSortJUIAsc : "desc" == h[a] ? e.sSortJUIDesc : d.sSortingClassJUI));
    });
  }}});
  var Nb = function(a) {
    return "string" === typeof a ? a.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : a;
  };
  x.render = {number:function(a, b, c, d, e) {
    return {display:function(f) {
      if ("number" !== typeof f && "string" !== typeof f) {
        return f;
      }
      var g = 0 > f ? "-" : "", h = parseFloat(f);
      if (isNaN(h)) {
        return Nb(f);
      }
      f = Math.abs(h);
      h = parseInt(f, 10);
      f = c ? b + (f - h).toFixed(c).substring(2) : "";
      return g + (d || "") + h.toString().replace(/\B(?=(\d{3})+(?!\d))/g, a) + f + (e || "");
    }};
  }, text:function() {
    return {display:Nb};
  }};
  a.extend(x.ext.internal, {_fnExternApiFunc:Db, _fnBuildAjax:xa, _fnAjaxUpdate:cb, _fnAjaxParameters:db, _fnAjaxUpdateDraw:eb, _fnAjaxDataSrc:ya, _fnAddColumn:q, _fnColumnOptions:m, _fnAdjustColumnSizing:r, _fnVisibleToColumnIndex:u, _fnColumnIndexToVisible:v, _fnVisbleColumns:A, _fnGetColumns:C, _fnColumnTypes:B, _fnApplyColumnDefs:H, _fnHungarianMap:e, _fnCamelToHungarian:f, _fnLanguageCompat:g, _fnBrowserDetect:n, _fnAddData:z, _fnAddTr:D, _fnNodeToDataIndex:function(a, b) {
    return b._DT_RowIndex !== d ? b._DT_RowIndex : null;
  }, _fnNodeToColumnIndex:function(b, c, d) {
    return a.inArray(d, b.aoData[c].anCells);
  }, _fnGetCellData:F, _fnSetCellData:K, _fnSplitObjNotation:I, _fnGetObjectDataFn:W, _fnSetObjectDataFn:Z, _fnGetDataMaster:ha, _fnClearTable:ka, _fnDeleteIndex:la, _fnInvalidate:R, _fnGetRowElements:pa, _fnCreateTr:L, _fnBuildHead:U, _fnDrawHead:qa, _fnDraw:ia, _fnReDraw:ja, _fnAddOptionsHtml:bb, _fnDetectHeader:ra, _fnGetUniqueThs:wa, _fnFeatureHtmlFilter:fb, _fnFilterComplete:sa, _fnFilterCustom:gb, _fnFilterColumn:hb, _fnFilter:ib, _fnFilterCreateSearch:Ka, _fnEscapeRegex:Pa, _fnFilterData:jb, 
  _fnFeatureHtmlInfo:mb, _fnUpdateInfo:tb, _fnInfoMacros:ub, _fnInitialise:ua, _fnInitComplete:Ba, _fnLengthChange:Qa, _fnFeatureHtmlLength:pb, _fnFeatureHtmlPaginate:sb, _fnPageChange:Sa, _fnFeatureHtmlProcessing:qb, _fnProcessingDisplay:Y, _fnFeatureHtmlTable:rb, _fnScrollDraw:za, _fnApplyToChildren:ea, _fnCalculateColumnWidths:La, _fnThrottle:Oa, _fnConvertToWidth:vb, _fnGetWidestNode:wb, _fnGetMaxLenString:xb, _fnStringToCss:Q, _fnSortFlatten:na, _fnSort:ob, _fnSortAria:zb, _fnSortListener:Ta, 
  _fnSortAttachListener:Ma, _fnSortingClasses:Da, _fnSortData:yb, _fnSaveState:Ea, _fnLoadState:Ab, _fnSettingsFromNode:Fa, _fnLog:fa, _fnMap:ca, _fnBindAction:Ua, _fnCallbackReg:T, _fnCallbackFire:M, _fnLengthOverflow:Ra, _fnRenderer:Na, _fnDataSource:S, _fnRowAttributes:da, _fnCalculateEnd:function() {
  }});
  a.fn.dataTable = x;
  x.$ = a;
  a.fn.dataTableSettings = x.settings;
  a.fn.dataTableExt = x.ext;
  a.fn.DataTable = function(b) {
    return a(this).dataTable(b).api();
  };
  a.each(x, function(b, c) {
    a.fn.DataTable[b] = c;
  });
  return a.fn.dataTable;
});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  var e = a.fn.dataTable, f = function(b, c) {
    if (!e.versionCheck || !e.versionCheck("1.10.3")) {
      throw "DataTables Responsive requires DataTables 1.10.3 or newer";
    }
    this.s = {dt:new e.Api(b), columns:[], current:[]};
    this.s.dt.settings()[0].responsive || (c && "string" === typeof c.details ? c.details = {type:c.details} : c && !1 === c.details ? c.details = {type:!1} : c && !0 === c.details && (c.details = {type:"inline"}), this.c = a.extend(!0, {}, f.defaults, e.defaults.responsive, c), b.responsive = this, this._constructor());
  };
  a.extend(f.prototype, {_constructor:function() {
    var c = this, d = this.s.dt, f = d.settings()[0], g = a(b).width();
    d.settings()[0]._responsive = this;
    a(b).on("resize.dtr orientationchange.dtr", e.util.throttle(function() {
      var d = a(b).width();
      d !== g && (c._resize(), g = d);
    }));
    f.oApi._fnCallbackReg(f, "aoRowCreatedCallback", function(b, e, f) {
      -1 !== a.inArray(!1, c.s.current) && a("td, th", b).each(function(b) {
        b = d.column.index("toData", b);
        !1 === c.s.current[b] && a(this).css("display", "none");
      });
    });
    d.on("destroy.dtr", function() {
      d.off(".dtr");
      a(d.table().body()).off(".dtr");
      a(b).off("resize.dtr orientationchange.dtr");
      a.each(c.s.current, function(a, b) {
        !1 === b && c._setColumnVis(a, !0);
      });
    });
    this.c.breakpoints.sort(function(a, b) {
      return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
    });
    this._classLogic();
    this._resizeAuto();
    f = this.c.details;
    !1 !== f.type && (c._detailsInit(), d.on("column-visibility.dtr", function(a, b, d, e) {
      c._classLogic();
      c._resizeAuto();
      c._resize();
    }), d.on("draw.dtr", function() {
      console.log("redraw");
    }), a(d.table().node()).addClass("dtr-" + f.type));
    d.on("column-reorder.dtr", function(a, b, d) {
      c._classLogic();
      c._resizeAuto();
      c._resize();
    });
    d.on("column-sizing.dtr", function() {
      c._resizeAuto();
      c._resize();
    });
    d.on("init.dtr", function(b, e, f) {
      c._resizeAuto();
      c._resize();
      a.inArray(!1, c.s.current) && d.columns.adjust();
    });
    this._resize();
  }, _columnsVisiblity:function(b) {
    var c = this.s.dt, d = this.s.columns, e, f = d.map(function(a, b) {
      return {columnIdx:b, priority:a.priority};
    }).sort(function(a, b) {
      return a.priority !== b.priority ? a.priority - b.priority : a.columnIdx - b.columnIdx;
    }), g = a.map(d, function(c) {
      return c.auto && null === c.minWidth ? !1 : !0 === c.auto ? "-" : -1 !== a.inArray(b, c.includeIn);
    }), h = 0;
    var u = 0;
    for (e = g.length; u < e; u++) {
      !0 === g[u] && (h += d[u].minWidth);
    }
    u = c.settings()[0].oScroll;
    u = u.sY || u.sX ? u.iBarWidth : 0;
    c = c.table().container().offsetWidth - u - h;
    u = 0;
    for (e = g.length; u < e; u++) {
      d[u].control && (c -= d[u].minWidth);
    }
    h = !1;
    u = 0;
    for (e = f.length; u < e; u++) {
      var v = f[u].columnIdx;
      "-" === g[v] && !d[v].control && d[v].minWidth && (h || 0 > c - d[v].minWidth ? (h = !0, g[v] = !1) : g[v] = !0, c -= d[v].minWidth);
    }
    f = !1;
    u = 0;
    for (e = d.length; u < e; u++) {
      if (!d[u].control && !d[u].never && !g[u]) {
        f = !0;
        break;
      }
    }
    u = 0;
    for (e = d.length; u < e; u++) {
      d[u].control && (g[u] = f);
    }
    -1 === a.inArray(!0, g) && (g[0] = !0);
    return g;
  }, _classLogic:function() {
    var b = this, c = this.c.breakpoints, e = this.s.dt, f = e.columns().eq(0).map(function(b) {
      var c = this.column(b), f = c.header().className;
      b = e.settings()[0].aoColumns[b].responsivePriority;
      b === d && (c = a(c.header()).data("priority"), b = c !== d ? 1 * c : 10000);
      return {className:f, includeIn:[], auto:!1, control:!1, never:f.match(/\bnever\b/) ? !0 : !1, priority:b};
    }), g = function(b, c) {
      b = f[b].includeIn;
      -1 === a.inArray(c, b) && b.push(c);
    }, m = function(a, d, e, h) {
      if (!e) {
        f[a].includeIn.push(d);
      } else {
        if ("max-" === e) {
          for (h = b._find(d).width, d = 0, e = c.length; d < e; d++) {
            c[d].width <= h && g(a, c[d].name);
          }
        } else {
          if ("min-" === e) {
            for (h = b._find(d).width, d = 0, e = c.length; d < e; d++) {
              c[d].width >= h && g(a, c[d].name);
            }
          } else {
            if ("not-" === e) {
              for (d = 0, e = c.length; d < e; d++) {
                -1 === c[d].name.indexOf(h) && g(a, c[d].name);
              }
            }
          }
        }
      }
    };
    f.each(function(b, d) {
      for (var e = b.className.split(" "), f = !1, g = 0, h = e.length; g < h; g++) {
        var l = a.trim(e[g]);
        if ("all" === l) {
          f = !0;
          b.includeIn = a.map(c, function(a) {
            return a.name;
          });
          return;
        }
        if ("none" === l || b.never) {
          f = !0;
          return;
        }
        if ("control" === l) {
          f = !0;
          b.control = !0;
          return;
        }
        a.each(c, function(a, b) {
          a = b.name.split("-");
          var c = l.match(new RegExp("(min\\-|max\\-|not\\-)?(" + a[0] + ")(\\-[_a-zA-Z0-9])?"));
          c && (f = !0, c[2] === a[0] && c[3] === "-" + a[1] ? m(d, b.name, c[1], c[2] + c[3]) : c[2] !== a[0] || c[3] || m(d, b.name, c[1], c[2]));
        });
      }
      f || (b.auto = !0);
    });
    this.s.columns = f;
  }, _detailsDisplay:function(b, c) {
    var d = this, e = this.s.dt, f = this.c.details;
    if (f && !1 !== f.type) {
      var g = f.display(b, c, function() {
        return f.renderer(e, b[0], d._detailsObj(b[0]));
      });
      !0 !== g && !1 !== g || a(e.table().node()).triggerHandler("responsive-display.dt", [e, b, g, c]);
    }
  }, _detailsInit:function() {
    var b = this, c = this.s.dt, d = this.c.details;
    "inline" === d.type && (d.target = "td:first-child, th:first-child");
    c.on("draw.dtr", function() {
      b._tabIndexes();
    });
    b._tabIndexes();
    a(c.table().body()).on("keyup.dtr", "td, th", function(b) {
      13 === b.keyCode && a(this).data("dtr-keyboard") && a(this).click();
    });
    var e = d.target, d = "string" === typeof e ? e : "td, th";
    a(c.table().body()).on("click.dtr mousedown.dtr mouseup.dtr", d, function(d) {
      if (a(c.table().node()).hasClass("collapsed") && c.row(a(this).closest("tr")).length) {
        if ("number" === typeof e) {
          var f = 0 > e ? c.columns().eq(0).length + e : e;
          if (c.cell(this).index().column !== f) {
            return;
          }
        }
        f = c.row(a(this).closest("tr"));
        "click" === d.type ? b._detailsDisplay(f, !1) : "mousedown" === d.type ? a(this).css("outline", "none") : "mouseup" === d.type && a(this).blur().css("outline", "");
      }
    });
  }, _detailsObj:function(b) {
    var c = this, d = this.s.dt;
    return a.map(this.s.columns, function(a, e) {
      if (!a.never && !a.control) {
        return {title:d.settings()[0].aoColumns[e].sTitle, data:d.cell(b, e).render(c.c.orthogonal), hidden:d.column(e).visible() && !c.s.current[e], columnIndex:e, rowIndex:b};
      }
    });
  }, _find:function(a) {
    for (var b = this.c.breakpoints, c = 0, d = b.length; c < d; c++) {
      if (b[c].name === a) {
        return b[c];
      }
    }
  }, _redrawChildren:function() {
    var a = this, b = this.s.dt;
    b.rows({page:"current"}).iterator("row", function(c, d) {
      b.row(d);
      a._detailsDisplay(b.row(d), !0);
    });
  }, _resize:function() {
    var c = this, d = this.s.dt, e = a(b).width(), f = this.c.breakpoints, g = f[0].name, m = this.s.columns, r, u = this.s.current.slice();
    for (r = f.length - 1; 0 <= r; r--) {
      if (e <= f[r].width) {
        g = f[r].name;
        break;
      }
    }
    var v = this._columnsVisiblity(g);
    this.s.current = v;
    f = !1;
    r = 0;
    for (e = m.length; r < e; r++) {
      if (!1 === v[r] && !m[r].never && !m[r].control) {
        f = !0;
        break;
      }
    }
    a(d.table().node()).toggleClass("collapsed", f);
    var A = !1;
    d.columns().eq(0).each(function(a, b) {
      v[b] !== u[b] && (A = !0, c._setColumnVis(a, v[b]));
    });
    A && (this._redrawChildren(), a(d.table().node()).trigger("responsive-resize.dt", [d, this.s.current]));
  }, _resizeAuto:function() {
    var b = this.s.dt, c = this.s.columns;
    if (this.c.auto && -1 !== a.inArray(!0, a.map(c, function(a) {
      return a.auto;
    }))) {
      b.table().node();
      var d = b.table().node().cloneNode(!1), e = a(b.table().header().cloneNode(!1)).appendTo(d), f = a(b.table().body()).clone(!1, !1).empty().appendTo(d), g = b.columns().header().filter(function(a) {
        return b.column(a).visible();
      }).to$().clone(!1).css("display", "table-cell");
      a(f).append(a(b.rows({page:"current"}).nodes()).clone(!1)).find("th, td").css("display", "");
      if (f = b.table().footer()) {
        var f = a(f.cloneNode(!1)).appendTo(d), r = b.columns().footer().filter(function(a) {
          return b.column(a).visible();
        }).to$().clone(!1).css("display", "table-cell");
        a("<tr/>").append(r).appendTo(f);
      }
      a("<tr/>").append(g).appendTo(e);
      "inline" === this.c.details.type && a(d).addClass("dtr-inline collapsed");
      a(d).find("[name]").removeAttr("name");
      d = a("<div/>").css({width:1, height:1, overflow:"hidden"}).append(d);
      d.insertBefore(b.table().node());
      g.each(function(a) {
        a = b.column.index("fromVisible", a);
        c[a].minWidth = this.offsetWidth || 0;
      });
      d.remove();
    }
  }, _setColumnVis:function(b, c) {
    var d = this.s.dt;
    c = c ? "" : "none";
    a(d.column(b).header()).css("display", c);
    a(d.column(b).footer()).css("display", c);
    d.column(b).nodes().to$().css("display", c);
  }, _tabIndexes:function() {
    var b = this.s.dt, c = b.cells({page:"current"}).nodes().to$(), d = b.settings()[0], e = this.c.details.target;
    c.filter("[data-dtr-keyboard]").removeData("[data-dtr-keyboard]");
    a("number" === typeof e ? ":eq(" + e + ")" : e, b.rows({page:"current"}).nodes()).attr("tabIndex", d.iTabIndex).data("dtr-keyboard", 1);
  }});
  f.breakpoints = [{name:"desktop", width:Infinity}, {name:"tablet-l", width:1024}, {name:"tablet-p", width:768}, {name:"mobile-l", width:480}, {name:"mobile-p", width:320}];
  f.display = {childRow:function(b, c, d) {
    if (c) {
      if (a(b.node()).hasClass("parent")) {
        return b.child(d(), "child").show(), !0;
      }
    } else {
      if (b.child.isShown()) {
        return b.child(!1), a(b.node()).removeClass("parent"), !1;
      }
      b.child(d(), "child").show();
      a(b.node()).addClass("parent");
      return !0;
    }
  }, childRowImmediate:function(b, c, d) {
    if (!c && b.child.isShown() || !b.responsive.hasHidden()) {
      return b.child(!1), a(b.node()).removeClass("parent"), !1;
    }
    b.child(d(), "child").show();
    a(b.node()).addClass("parent");
    return !0;
  }, modal:function(b) {
    return function(d, e, f) {
      if (e) {
        a("div.dtr-modal-content").empty().append(f());
      } else {
        var g = function() {
          h.remove();
          a(c).off("keypress.dtr");
        }, h = a('<div class="dtr-modal"/>').append(a('<div class="dtr-modal-display"/>').append(a('<div class="dtr-modal-content"/>').append(f())).append(a('<div class="dtr-modal-close">&times;</div>').click(function() {
          g();
        }))).append(a('<div class="dtr-modal-background"/>').click(function() {
          g();
        })).appendTo("body");
        a(c).on("keyup.dtr", function(a) {
          27 === a.keyCode && (a.stopPropagation(), g());
        });
      }
      b && b.header && a("div.dtr-modal-content").prepend("<h2>" + b.header(d) + "</h2>");
    };
  }};
  f.renderer = {listHidden:function() {
    return function(b, c, d) {
      return (b = a.map(d, function(a) {
        return a.hidden ? '<li data-dtr-index="' + a.columnIndex + '" data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><span class="dtr-title">' + a.title + '</span> <span class="dtr-data">' + a.data + "</span></li>" : "";
      }).join("")) ? a('<ul data-dtr-index="' + c + '"/>').append(b) : !1;
    };
  }, tableAll:function(b) {
    b = a.extend({tableClass:""}, b);
    return function(c, d, e) {
      c = a.map(e, function(a) {
        return '<tr data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><td>' + a.title + ":</td> <td>" + a.data + "</td></tr>";
      }).join("");
      return a('<table class="' + b.tableClass + '" width="100%"/>').append(c);
    };
  }};
  f.defaults = {breakpoints:f.breakpoints, auto:!0, details:{display:f.display.childRow, renderer:f.renderer.listHidden(), target:0, type:"inline"}, orthogonal:"display"};
  var g = a.fn.dataTable.Api;
  g.register("responsive()", function() {
    return this;
  });
  g.register("responsive.index()", function(b) {
    b = a(b);
    return {column:b.data("dtr-index"), row:b.parent().data("dtr-index")};
  });
  g.register("responsive.rebuild()", function() {
    return this.iterator("table", function(a) {
      a._responsive && a._responsive._classLogic();
    });
  });
  g.register("responsive.recalc()", function() {
    return this.iterator("table", function(a) {
      a._responsive && (a._responsive._resizeAuto(), a._responsive._resize());
    });
  });
  g.register("responsive.hasHidden()", function() {
    var b = this.context[0];
    return b._responsive ? -1 !== a.inArray(!1, b._responsive.s.current) : !1;
  });
  f.version = "2.1.0";
  a.fn.dataTable.Responsive = f;
  a.fn.DataTable.Responsive = f;
  a(c).on("preInit.dt.dtr", function(b, c, d) {
    "dt" === b.namespace && (a(c.nTable).hasClass("responsive") || a(c.nTable).hasClass("dt-responsive") || c.oInit.responsive || e.defaults.responsive) && (b = c.oInit.responsive, !1 !== b && new f(c, a.isPlainObject(b) ? b : {}));
  });
  return f;
});
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(b) {
    return a(b, window, document);
  }) : "object" === typeof exports ? module.exports = function(b, c) {
    b || (b = window);
    c && c.fn.dataTable || (c = require("datatables.net")(b, c).$);
    return a(c, b, b.document);
  } : a(jQuery, window, document);
})(function(a, b, c, d) {
  var e = a.fn.dataTable, f = function(b, e) {
    this instanceof f ? (e === d && (e = {}), this.s = {dt:a.fn.dataTable.Api(b).settings()[0], tableTop:0, tableBottom:0, redrawTop:0, redrawBottom:0, autoHeight:!0, viewportRows:0, stateTO:null, drawTO:null, heights:{jump:null, page:null, virtual:null, scroll:null, row:null, viewport:null}, topRowFloat:0, scrollDrawDiff:null, loaderVisible:!1}, this.s = a.extend(this.s, f.oDefaults, e), this.s.heights.row = this.s.rowHeight, this.dom = {force:c.createElement("div"), scroller:null, table:null, loader:null}, 
    this.s.dt.oScroller || (this.s.dt.oScroller = this, this._fnConstruct())) : alert("Scroller warning: Scroller must be initialised with the 'new' keyword.");
  };
  a.extend(f.prototype, {fnRowToPixels:function(a, b, c) {
    a = c ? this._domain("virtualToPhysical", a * this.s.heights.row) : this.s.baseScrollTop + (a - this.s.baseRowTop) * this.s.heights.row;
    return b || b === d ? parseInt(a, 10) : a;
  }, fnPixelsToRow:function(a, b, c) {
    var e = a - this.s.baseScrollTop;
    a = c ? this._domain("physicalToVirtual", a) / this.s.heights.row : e / this.s.heights.row + this.s.baseRowTop;
    return b || b === d ? parseInt(a, 10) : a;
  }, fnScrollToRow:function(b, c) {
    var d = this, e = !1, f = this.fnRowToPixels(b), g = b - (this.s.displayBuffer - 1) / 2 * this.s.viewportRows;
    0 > g && (g = 0);
    (f > this.s.redrawBottom || f < this.s.redrawTop) && this.s.dt._iDisplayStart !== g && (e = !0, f = this.fnRowToPixels(b, !1, !0));
    "undefined" == typeof c || c ? (this.s.ani = e, a(this.dom.scroller).animate({scrollTop:f}, function() {
      setTimeout(function() {
        d.s.ani = !1;
      }, 25);
    })) : a(this.dom.scroller).scrollTop(f);
  }, fnMeasure:function(b) {
    this.s.autoHeight && this._fnCalcRowHeight();
    var c = this.s.heights;
    c.row && (c.viewport = a(this.dom.scroller).height(), this.s.viewportRows = parseInt(c.viewport / c.row, 10) + 1, this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer);
    (b === d || b) && this.s.dt.oInstance.fnDraw(!1);
  }, fnPageInfo:function() {
    var a = this.dom.scroller.scrollTop, b = this.s.dt.fnRecordsDisplay(), c = Math.ceil(this.fnPixelsToRow(a + this.s.heights.viewport, !1, this.s.ani));
    return {start:Math.floor(this.fnPixelsToRow(a, !1, this.s.ani)), end:b < c ? b - 1 : c - 1};
  }, _fnConstruct:function() {
    var c = this;
    if (this.s.dt.oFeatures.bPaginate) {
      this.dom.force.style.position = "relative";
      this.dom.force.style.top = "0px";
      this.dom.force.style.left = "0px";
      this.dom.force.style.width = "1px";
      this.dom.scroller = a("div." + this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
      this.dom.scroller.appendChild(this.dom.force);
      this.dom.scroller.style.position = "relative";
      this.dom.table = a(">table", this.dom.scroller)[0];
      this.dom.table.style.position = "absolute";
      this.dom.table.style.top = "0px";
      this.dom.table.style.left = "0px";
      a(this.s.dt.nTableWrapper).addClass("DTS");
      this.s.loadingIndicator && (this.dom.loader = a('<div class="dataTables_processing DTS_Loading">' + this.s.dt.oLanguage.sLoadingRecords + "</div>").css("display", "none"), a(this.dom.scroller.parentNode).css("position", "relative").append(this.dom.loader));
      this.s.heights.row && "auto" != this.s.heights.row && (this.s.autoHeight = !1);
      this.fnMeasure(!1);
      this.s.ingnoreScroll = !0;
      this.s.stateSaveThrottle = this.s.dt.oApi._fnThrottle(function() {
        c.s.dt.oApi._fnSaveState(c.s.dt);
      }, 500);
      a(this.dom.scroller).on("scroll.DTS", function(a) {
        c._fnScroll.call(c);
      });
      a(this.dom.scroller).on("touchstart.DTS", function() {
        c._fnScroll.call(c);
      });
      this.s.dt.aoDrawCallback.push({fn:function() {
        c.s.dt.bInitialised && c._fnDrawCallback.call(c);
      }, sName:"Scroller"});
      a(b).on("resize.DTS", function() {
        c.fnMeasure(!1);
        c._fnInfo();
      });
      var d = !0;
      this.s.dt.oApi._fnCallbackReg(this.s.dt, "aoStateSaveParams", function(a, b) {
        d && c.s.dt.oLoadedState ? (b.iScroller = c.s.dt.oLoadedState.iScroller, b.iScrollerTopRow = c.s.dt.oLoadedState.iScrollerTopRow, d = !1) : (b.iScroller = c.dom.scroller.scrollTop, b.iScrollerTopRow = c.s.topRowFloat);
      }, "Scroller_State");
      this.s.dt.oLoadedState && (this.s.topRowFloat = this.s.dt.oLoadedState.iScrollerTopRow || 0);
      a(this.s.dt.nTable).one("init.dt", function() {
        c.fnMeasure();
      });
      this.s.dt.aoDestroyCallback.push({sName:"Scroller", fn:function() {
        a(b).off("resize.DTS");
        a(c.dom.scroller).off("touchstart.DTS scroll.DTS");
        a(c.s.dt.nTableWrapper).removeClass("DTS");
        a("div.DTS_Loading", c.dom.scroller.parentNode).remove();
        a(c.s.dt.nTable).off("init.dt");
        c.dom.table.style.position = "";
        c.dom.table.style.top = "";
        c.dom.table.style.left = "";
      }});
    } else {
      this.s.dt.oApi._fnLog(this.s.dt, 0, "Pagination must be enabled for Scroller");
    }
  }, _fnScroll:function() {
    var b = this, c = this.s.heights, d = this.dom.scroller.scrollTop;
    if (!this.s.skip && !this.s.ingnoreScroll) {
      if (this.s.dt.bFiltered || this.s.dt.bSorted) {
        this.s.lastScrollTop = 0;
      } else {
        this._fnInfo();
        clearTimeout(this.s.stateTO);
        this.s.stateTO = setTimeout(function() {
          b.s.dt.oApi._fnSaveState(b.s.dt);
        }, 250);
        if (d < this.s.redrawTop || d > this.s.redrawBottom) {
          var e = Math.ceil((this.s.displayBuffer - 1) / 2 * this.s.viewportRows);
          if (Math.abs(d - this.s.lastScrollTop) > c.viewport || this.s.ani) {
            var f = parseInt(this._domain("physicalToVirtual", d) / c.row, 10) - e;
            this.s.topRowFloat = this._domain("physicalToVirtual", d) / c.row;
          } else {
            f = this.fnPixelsToRow(d) - e, this.s.topRowFloat = this.fnPixelsToRow(d, !1);
          }
          0 >= f ? f = 0 : f + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ? (f = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength, 0 > f && (f = 0)) : 0 !== f % 2 && f++;
          f != this.s.dt._iDisplayStart && (this.s.tableTop = a(this.s.dt.nTable).offset().top, this.s.tableBottom = a(this.s.dt.nTable).height() + this.s.tableTop, c = function() {
            null === b.s.scrollDrawReq && (b.s.scrollDrawReq = d);
            b.s.dt._iDisplayStart = f;
            b.s.dt.oApi._fnDraw(b.s.dt);
          }, this.s.dt.oFeatures.bServerSide ? (clearTimeout(this.s.drawTO), this.s.drawTO = setTimeout(c, this.s.serverWait)) : c(), this.dom.loader && !this.s.loaderVisible && (this.dom.loader.css("display", "block"), this.s.loaderVisible = !0));
        } else {
          this.s.topRowFloat = this._domain("physicalToVirtual", d) / c.row;
        }
        this.s.lastScrollTop = d;
        this.s.stateSaveThrottle();
      }
    }
  }, _domain:function(a, b) {
    var c = this.s.heights;
    if (c.virtual === c.scroll) {
      return b;
    }
    var d = (c.scroll - c.viewport) / 2, e = (c.virtual - c.viewport) / 2;
    var f = e / (d * d);
    if ("virtualToPhysical" === a) {
      if (b < e) {
        return Math.pow(b / f, 0.5);
      }
      b = 2 * e - b;
      return 0 > b ? c.scroll : 2 * d - Math.pow(b / f, 0.5);
    }
    if ("physicalToVirtual" === a) {
      if (b < d) {
        return b * b * f;
      }
      b = 2 * d - b;
      return 0 > b ? c.virtual : 2 * e - b * b * f;
    }
  }, _fnDrawCallback:function() {
    var b = this, c = this.s.heights, d = this.dom.scroller.scrollTop, e = a(this.s.dt.nTable).height(), f = this.s.dt._iDisplayStart, g = this.s.dt._iDisplayLength, r = this.s.dt.fnRecordsDisplay();
    this.s.skip = !0;
    this._fnScrollForce();
    d = 0 === f ? this.s.topRowFloat * c.row : f + g >= r ? c.scroll - (r - this.s.topRowFloat) * c.row : this._domain("virtualToPhysical", this.s.topRowFloat * c.row);
    this.dom.scroller.scrollTop = d;
    this.s.baseScrollTop = d;
    this.s.baseRowTop = this.s.topRowFloat;
    var u = d - (this.s.topRowFloat - f) * c.row;
    0 === f ? u = 0 : f + g >= r && (u = c.scroll - e);
    this.dom.table.style.top = u + "px";
    this.s.tableTop = u;
    this.s.tableBottom = e + this.s.tableTop;
    e = (d - this.s.tableTop) * this.s.boundaryScale;
    this.s.redrawTop = d - e;
    this.s.redrawBottom = d + e;
    this.s.skip = !1;
    this.s.dt.oFeatures.bStateSave && null !== this.s.dt.oLoadedState && "undefined" != typeof this.s.dt.oLoadedState.iScroller ? ((d = !this.s.dt.sAjaxSource && !b.s.dt.ajax || this.s.dt.oFeatures.bServerSide ? !1 : !0) && 2 == this.s.dt.iDraw || !d && 1 == this.s.dt.iDraw) && setTimeout(function() {
      a(b.dom.scroller).scrollTop(b.s.dt.oLoadedState.iScroller);
      b.s.redrawTop = b.s.dt.oLoadedState.iScroller - c.viewport / 2;
      setTimeout(function() {
        b.s.ingnoreScroll = !1;
      }, 0);
    }, 0) : b.s.ingnoreScroll = !1;
    this.s.dt.oFeatures.bInfo && setTimeout(function() {
      b._fnInfo.call(b);
    }, 0);
    this.dom.loader && this.s.loaderVisible && (this.dom.loader.css("display", "none"), this.s.loaderVisible = !1);
  }, _fnScrollForce:function() {
    var a = this.s.heights;
    a.virtual = a.row * this.s.dt.fnRecordsDisplay();
    a.scroll = a.virtual;
    1000000 < a.scroll && (a.scroll = 1000000);
    this.dom.force.style.height = a.scroll > this.s.heights.row ? a.scroll + "px" : this.s.heights.row + "px";
  }, _fnCalcRowHeight:function() {
    var b = this.s.dt, c = b.nTable, d = c.cloneNode(!1), e = a("<tbody/>").appendTo(d), f = a('<div class="' + b.oClasses.sWrapper + ' DTS"><div class="' + b.oClasses.sScrollWrapper + '"><div class="' + b.oClasses.sScrollBody + '"></div></div></div>');
    for (a("tbody tr:lt(4)", c).clone().appendTo(e); 3 > a("tr", e).length;) {
      e.append("<tr><td>&nbsp;</td></tr>");
    }
    a("div." + b.oClasses.sScrollBody, f).append(d);
    b = this.s.dt.nHolding || c.parentNode;
    a(b).is(":visible") || (b = "body");
    f.appendTo(b);
    this.s.heights.row = a("tr", e).eq(1).outerHeight();
    f.remove();
  }, _fnInfo:function() {
    if (this.s.dt.oFeatures.bInfo) {
      var b = this.s.dt, c = b.oLanguage, d = this.dom.scroller.scrollTop, e = Math.floor(this.fnPixelsToRow(d, !1, this.s.ani) + 1), f = b.fnRecordsTotal(), g = b.fnRecordsDisplay(), d = Math.ceil(this.fnPixelsToRow(d + this.s.heights.viewport, !1, this.s.ani)), d = g < d ? g : d, r = b.fnFormatNumber(e), u = b.fnFormatNumber(d), v = b.fnFormatNumber(f), A = b.fnFormatNumber(g), r = 0 === b.fnRecordsDisplay() && b.fnRecordsDisplay() == b.fnRecordsTotal() ? c.sInfoEmpty + c.sInfoPostFix : 0 === b.fnRecordsDisplay() ? 
      c.sInfoEmpty + " " + c.sInfoFiltered.replace("_MAX_", v) + c.sInfoPostFix : b.fnRecordsDisplay() == b.fnRecordsTotal() ? c.sInfo.replace("_START_", r).replace("_END_", u).replace("_MAX_", v).replace("_TOTAL_", A) + c.sInfoPostFix : c.sInfo.replace("_START_", r).replace("_END_", u).replace("_MAX_", v).replace("_TOTAL_", A) + " " + c.sInfoFiltered.replace("_MAX_", b.fnFormatNumber(b.fnRecordsTotal())) + c.sInfoPostFix;
      (c = c.fnInfoCallback) && (r = c.call(b.oInstance, b, e, d, f, g, r));
      e = b.aanFeatures.i;
      if ("undefined" != typeof e) {
        for (f = 0, g = e.length; f < g; f++) {
          a(e[f]).html(r);
        }
      }
      a(b.nTable).triggerHandler("info.dt");
    }
  }});
  f.defaults = {trace:!1, rowHeight:"auto", serverWait:200, displayBuffer:9, boundaryScale:0.5, loadingIndicator:!1};
  f.oDefaults = f.defaults;
  f.version = "1.4.2";
  "function" == typeof a.fn.dataTable && "function" == typeof a.fn.dataTableExt.fnVersionCheck && a.fn.dataTableExt.fnVersionCheck("1.10.0") ? a.fn.dataTableExt.aoFeatures.push({fnInit:function(a) {
    var b = a.oInit;
    new f(a, b.scroller || b.oScroller || {});
  }, cFeature:"S", sFeature:"Scroller"}) : alert("Warning: Scroller requires DataTables 1.10.0 or greater - www.datatables.net/download");
  a(c).on("preInit.dt.dtscroller", function(b, c) {
    if ("dt" === b.namespace) {
      b = c.oInit.scroller;
      var d = e.defaults.scroller;
      if (b || d) {
        d = a.extend({}, b, d), !1 !== b && new f(c, d);
      }
    }
  });
  a.fn.dataTable.Scroller = f;
  a.fn.DataTable.Scroller = f;
  var g = a.fn.dataTable.Api;
  g.register("scroller()", function() {
    return this;
  });
  g.register("scroller().rowToPixels()", function(a, b, c) {
    var d = this.context;
    if (d.length && d[0].oScroller) {
      return d[0].oScroller.fnRowToPixels(a, b, c);
    }
  });
  g.register("scroller().pixelsToRow()", function(a, b, c) {
    var d = this.context;
    if (d.length && d[0].oScroller) {
      return d[0].oScroller.fnPixelsToRow(a, b, c);
    }
  });
  g.register("scroller().scrollToRow()", function(a, b) {
    this.iterator("table", function(c) {
      c.oScroller && c.oScroller.fnScrollToRow(a, b);
    });
    return this;
  });
  g.register("row().scrollTo()", function(a) {
    var b = this;
    this.iterator("row", function(c, d) {
      c.oScroller && (d = b.rows({order:"applied", search:"applied"}).indexes().indexOf(d), c.oScroller.fnScrollToRow(d, a));
    });
    return this;
  });
  g.register("scroller.measure()", function(a) {
    this.iterator("table", function(b) {
      b.oScroller && b.oScroller.fnMeasure(a);
    });
    return this;
  });
  g.register("scroller.page()", function() {
    var a = this.context;
    if (a.length && a[0].oScroller) {
      return a[0].oScroller.fnPageInfo();
    }
  });
  return f;
});
$.fn.dataTableExt.oPagination.two_button = {fnInit:function(a, b, c) {
  var d = document.createElement("span"), e = document.createElement("span");
  d.className = "paginate_button previous fa fa-angle-left fa-2x";
  e.className = "paginate_button next fa-angle-right fa-2x";
  b.appendChild(d);
  b.appendChild(e);
  $(d).click(function() {
    a.oApi._fnPageChange(a, "previous");
    c(a);
  });
  $(e).click(function() {
    a.oApi._fnPageChange(a, "next");
    c(a);
  });
  $(d).bind("selectstart", function() {
    return !1;
  });
  $(e).bind("selectstart", function() {
    return !1;
  });
}, fnUpdate:function(a, b) {
  if (a.aanFeatures.p) {
    b = a.aanFeatures.p;
    for (var c = 0, d = b.length; c < d; c++) {
      var e = b[c].getElementsByTagName("span");
      e[0].className = 0 === a._iDisplayStart ? "paginate_disabled_previous fa fa-caret-left fa-2x" : "paginate_enabled_previous fa fa-caret-left fa-2x";
      a.fnDisplayEnd() == a.fnRecordsDisplay() ? e[1].className = "paginate_disabled_next fa fa-caret-right fa-2x" : e[1].className = "paginate_enabled_next fa fa-caret-right fa-2x";
    }
  }
}};
DataTablesBehavior = {properties:{multiSelect:{type:Boolean, value:!1}, selection:{type:Array, notify:!0}, meta:{type:Object, value:null}, data:{type:Object}, options:{type:String}, namespace:{value:null, type:String}}, observers:["_dataChanged(data,meta)"], _createTable:function(a, b, c) {
  console.log("_createTable:", a);
  null == this.asyncRunning ? this._tableRecalcJob(function() {
  }.bind(this)) : this.asyncRunning = !0;
  this.__createTable(a, b, c);
}, recalc:function() {
  console.log("recalc:", this._api);
  this._api && (this._api.responsive.recalc(), this._api.columns.adjust());
}, createNew:function() {
  this._api.destroy(!1);
  this._api = null;
}, __createTable:function(a, b, c) {
  this.dataSet = b;
  c = c ? this._parseOptions(c) : this.options ? this._parseOptions(this.options) : {dom:"t", scrollY:"50vh", paging:!1};
  this._api && this._api.destroy(!1);
  var d = this, e = $(this.$.dataTablesId);
  a = "string" === typeof a ? JSON5.parse(a) : simpl4.util.Merge.clone(a);
  this._translate(a);
  if (null == a[0].class || -1 == a[0].class.indexOf("control")) {
    a.splice(0, 0, {data:"__control", class:"control"}), c.responsive = {details:{type:"column"}};
  }
  b.forEach(function(a, b) {
    a.__control = "";
  }.bind(this));
  this._api = e.DataTable(jQuery.extend({initComplete:function(a, b) {
    d.fire("init-complete", {settings:a, json:b});
  }, language:this._getLang(), paging:!0, pagingType:"two_button", bSort:!1, bFilter:!0, bDestroy:!0, bLengthChange:!0, stateSave:!1, _columnDefs:[{className:"control", orderable:!1, targets:0}], data:b, columns:a}, c));
  $(this.root.querySelectorAll("table.dataTables")).attr("id", "dataTablesId");
  this._createRowListener();
  this._addDetailCopier(e, this._api);
}, getApi:function() {
  return this._api;
}, _addDetailCopier:function(a, b) {
  var c = this;
  a.on("keyup change", ".child input, .child select, .child textarea", function(a) {
    a = $(this);
    var c = a.closest("ul").data("dtr-index"), d = a.closest("li").data("dtr-index"), c = b.cell({row:c, column:d}).node();
    $("input, select, textarea", c).val(a.val());
    a.is(":checked") && $("input", c).prop("checked", !0);
  });
  a.on("click", ".child iron-icon", function(a) {
    var b = c._getIndexDetail(a.target), d = c._copySelection(c._api.rows(b.row).data());
    this.fire("rows-selected", {dt:c, doubleTap:!1, index:b, target:a.target, rows:d});
  });
}, _createRowListener:function() {
  for (var a = this, b = this._api.rows().nodes(), c = 0; c < b.length; c++) {
    $(b[c]).swipe({tap:function(b, c) {
      a._tapAction(c, a._getIndex(c), $(c).closest("tr"), !1);
    }, doubleTap:function(b, c) {
      a._tapAction(c, a._getIndex(c), $(c).closest("tr"), !0);
    }, threshold:50});
  }
}, _tapAction:function(a, b, c, d) {
  this.currentRowIndex = c.index();
  this.multiSelect ? this._tapActionMulti(a, b, c, d) : this._tapActionSingle(a, b, c, d);
}, _tapActionSingle:function(a, b, c, d) {
  $(c).hasClass("selected");
  this.unselectAll();
  $(c).addClass("selected");
  c = this._copySelection(this._api.rows(".selected").data());
  this.fire("rows-selected", {dt:this, doubleTap:d, index:b, target:a, rows:c});
  this.selection = c;
}, _tapActionMulti:function(a, b, c, d) {
  $(c).toggleClass("selected");
  c = this._copySelection(this._api.rows(".selected").data());
  this.fire("rows-selected", {dt:this, doubleTap:d, index:b, target:a, rows:c});
  this.selection = c;
}, _getIndexDetail:function(a) {
  a = $(a).closest("li");
  return {row:a.attr("data-dt-row"), column:a.attr("data-dt-column")};
}, _getIndex:function(a) {
  a = $(a).closest("td");
  return this._api.cell(a).index();
}, getSelection:function() {
  return this.selection;
}, unselectAll:function() {
  if (null != this._api) {
    var a = this._api.rows().nodes();
    null != a && $(a).removeClass("selected");
  }
}, _copySelection:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    b.push(a[c]);
  }
  return b;
}, _dataChanged:function() {
  !0 === this.internalDataChanged ? this.internalDataChanged = null : this.async(function() {
    this.__dataChanged();
  }, 10);
}, __dataChanged:function() {
  if (null == this.meta || 0 == this.meta.length) {
    if (null == this.data || 0 == this.data.length) {
      return;
    }
    0 < this.data.length && (this.preparedMeta = this._prepareMetaFromData(this.data));
  } else {
    this.preparedMeta = this._prepareMeta(this.meta);
  }
  null != this.preparedMeta && (null == this._api ? (null == this.data && (this.internalDataChanged = !0, this.data = []), this._createTable(this.preparedMeta, this.data, this.options)) : (this._api.clear(), null != this.data && this.data.forEach(function(a, b) {
    a.__control = "";
    this._api.row.add(a);
  }.bind(this)), this._api.draw(), this._createRowListener()));
}, _prepareMeta:function(a) {
  var b = a.fields;
  if (null == b) {
    return a;
  }
  var c = a.aliases, d = [];
  b.forEach(function(a, b) {
    b = c[b];
    var e = a;
    b && b.match(/^[@%]/) && (e = tr(b.substring(1)));
    d.push({title:e, data:a});
  }, this);
  return d;
}, _prepareMetaFromData:function(a) {
  if (null != a && (Array.isArray(a) || (a = a.result), 0 != a.length)) {
    for (var b = [], c = 0; c < a.length; c++) {
      var d = Object.keys(a[c]);
      d.length > b.length && (b = d);
    }
    var e = [];
    b.forEach(function(a) {
      e.push({title:a, data:a});
    }, this);
    return e;
  }
}, _tableRecalcJob:function(a) {
  function b() {
    var a = c.$.dataTablesId.offsetWidth;
    0 < a && a != d && c.recalc();
    d = a;
    setTimeout(b, 30);
  }
  var c = this, d = -1;
  b();
}, _parseOptions:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, _translate:function(a) {
  for (var b = Object.keys(a), c = 0; c < b.length; c++) {
    var d = b[c], e = a[d].title;
    e && e.match(/^[@%]/) && (a[d].title = tr(e.substring(1)));
  }
  return a;
}, _getLang:function() {
  return {sEmptyTable:tr("datatables.sEmptyTable"), sInfo:tr("datatables.sInfo"), sInfoEmpty:tr("datatables.sInfoEmpty"), sInfoFiltered:tr("datatables.sInfoFiltered"), sInfoPostFix:tr("datatables.sInfoPostFix"), sInfoThousands:tr("datatables.sInfoThousands"), sLengthMenu:tr("datatables.sLengthMenu"), sLoadingRecords:tr("datatables.sLoadingRecords"), sProcessing:tr("datatables.sProcessing"), sSearch:tr("datatables.sSearch"), sZeroRecords:tr("datatables.sZeroRecords"), oPaginate:{sFirst:tr("datatables.sFirst"), 
  sPrevious:tr("datatables.sPrevious"), sNext:tr("datatables.sNext"), sLast:tr("datatables.sLast")}, oAria:{sSortAscending:tr("datatables.sSortAscending"), sSortDescending:tr("datatables.sSortDescending")}};
}};
Polymer({is:"simpl-datatables", behaviors:[ModernizrBehavior, DataTablesBehavior]});
Polymer({is:"simpl-crudtable", behaviors:[DataTablesBehavior, ModernizrBehavior, StyleScopeBehavior], properties:{disableSpinner:{type:Boolean, value:!1}, dtOptions:{type:String, value:""}, buttons:{type:String}, filter:{type:Object}}, observers:["filterChanged(filter.*,dtOptions)", "buttonsChanged(buttons,isAttached)", "selectionChanged(selection)"], ready:function() {
}, attached:function() {
  this.isAttached = !0;
}, addAction:function() {
  this.fire("add-action", {entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, editAction:function() {
  null != this.selection && this.fire("edit-action", {data:this.selection[0], dataSet:this.dataSet, rowIndex:this.currentRowIndex, entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, showAction:function() {
  null != this.selection && this.fire("show-action", {data:this.selection[0], entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, detailAction:function() {
  null != this.selection && this.fire("detail-action", {data:this.selection[0]});
}, delAction:function() {
  null != this.selection && this.fire("del-action", {data:this.selection[0], entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, refreshAction:function() {
  this.fire("refresh-action", {entity:this.entity, table:this, entityChild:this.id, namespace:this.namespace});
}, selectAction:function() {
  null != this.selection && this.fire("select-action", {data:this.selection[0]});
}, cancelAction:function() {
  this.fire("cancel-action", {});
}, copyAction:function() {
  null != this.selection && this.fire("copy-action", {data:this.selection[0], entity:this.entity, entityChild:this.id, table:this, namespace:this.namespace});
}, onTap:function(a) {
  a = a.srcElement || a.target;
  for (var b = null; a && !(b = a.getAttribute("name"));) {
    a = a.parentElement;
  }
  null != b && this.buttonDef[b].action.call(this);
}, selectionChanged:function() {
  if (null != this.buttonDef) {
    this.buttonDef.edit.disabled = this.buttonDef.copy.disabled = this.buttonDef.show.disabled = this.buttonDef.select.disabled = this.buttonDef.detail.disabled = null == this.selection;
    for (var a = 0; a < this.buttonList.length; a++) {
      "add" != this.buttonList[a].name && "cancel" != this.buttonList[a].name && "refresh" != this.buttonList[a].name && this.set("buttonList." + a + ".disabled", null == this.selection);
    }
  }
}, buttonsChanged:function() {
  var a = {add:{action:this.addAction, icon:"add", text:tr("button.new"), disabled:!1}, edit:{action:this.editAction, icon:"create", text:tr("button.edit"), disabled:!0}, del:{action:this.delAction, icon:"delete", text:tr("button.del"), disabled:!0}, refresh:{action:this.refreshAction, icon:"refresh", text:tr("button.refresh"), disabled:!1}, show:{action:this.showAction, icon:"bookmark-outline", text:tr("button.show"), disabled:!0}, copy:{action:this.copyAction, icon:"content-copy", text:tr("button.copy"), 
  disabled:!0}, detail:{action:this.detailAction, icon:"view-list", text:tr("button.details"), disabled:!0}, select:{action:this.selectAction, icon:"check", text:tr("button.select"), disabled:!0}, cancel:{action:this.cancelAction, icon:"cancel", text:tr("button.cancel"), disabled:!1}};
  this.buttonDef = a;
  var b = [];
  this.buttons.split(",").forEach(function(c) {
    var d = a[c];
    d.name = c;
    b.push(d);
  }.bind(this));
  this.buttonList = b;
}, filterChanged:function(a, b) {
  if (this.filter) {
    this.entity = this.filter.entity;
    this.namespace = this.filter.namespace || simpl4.util.BaseManager.getNamespace();
    a = !1;
    if (null == this.dtMeta || null == this._api) {
      a = !0;
    }
    a && (this.dtMeta = this.preProcessMeta(simpl4EntityManager.getEntityViewFields(this.filter.entity, "main-grid", !0, {namespace:this.namespace})));
    null == this.dtMeta || 0 == this.dtMeta.length ? console.error("crudtable.nometa:", this.filter) : (this.showSpinner(this.$.dataTablesId), this.getData(this.filter, a));
  }
}, showSpinner:function(a) {
  this.disableSpinner || this.async(function() {
    var a = this.querySelector(".spinner");
    a && (a.innerHTML = "", Spinners.create(a, {radius:22, dashes:30, width:2.5, height:10, opacity:1, padding:3, rotation:600, color:"#000000"}).play());
  }, 50);
}, _dataComplete:function(a, b) {
  this.async(function() {
    var a = this.querySelector(".spinner");
    a && (a.innerHTML = "");
  }, 150);
  this.dataSet = this.preProcessData(a);
  b ? this._createTable(this.dtMeta, this.dataSet, this.dtOptions) : (this._api.clear(), this.dataSet.forEach(function(a, b) {
    a.__control = "";
    this._api.row.add(a);
  }.bind(this)), this._api.draw(), this._createRowListener());
}, preProcessData:function(a) {
  var b = Object.keys(this.selectableList), c = Object.keys(this.dateList);
  Object.keys(this.datetimeList);
  a.forEach(function(a) {
    b.forEach(function(b) {
      a[b + "_display"] = this.selectableList[b][a[b]];
    }, this);
    c.forEach(function(b) {
      a[b + "_display"] = this.getDate(a[b]);
    }, this);
  }, this);
  return a;
}, metaChanged:function() {
  this.dtMeta = this.preProcessMeta(this.meta);
}, preProcessMeta:function(a) {
  this.selectableList = {};
  this.dateList = {};
  this.datetimeList = {};
  this.columns = [];
  var b = "data", c = this.entity;
  0 < this.entity.indexOf(":") && (b = this.entity.split(":")[0], c = this.entity.split(":")[1]);
  var d = [];
  a.forEach(function(a) {
    var e = a.name;
    a.hidden || (a.selectable_items && (this.selectableList[a.name] = this.toMap(a.selectable_items.getItems()), e = a.name + "_display"), "date" == a.datatype && (this.dateList[a.name] = !0, e = a.name + "_display"), "datetime" == a.datatype && (this.datetimeList[a.name] = !0, e = a.name + "_display"), e = {title:a.title || tr(b + "." + c + "." + a.name), data:e, visible:!0 !== a.invisible, class:a.tags, mRender:this.renderColumn.bind(this)}, 0 == e.visible && (e.class = "never"), d.push(e), this.columns.push(a.name));
  }, this);
  this.allModList = [];
  this.allModList.concat(this.selectableList);
  this.allModList.concat(this.dateList);
  this.allModList.concat(this.datetimeList);
  return d;
}, renderColumn:function(a, b, c, d) {
  a = d.settings.aoColumns[d.col].mData;
  d = d.settings.aoColumns[d.col].sClass;
  if ("mobile" == Detectizr.device.type && d && -1 < d.toLowerCase().indexOf("phone")) {
    return "<div class='phone'><a href='tel:" + c[a] + "'>" + c[a] + "</a></div>";
  }
  if ("document" == this.entity && "filename" == a) {
    d = encodeURIComponent(JSON.stringify(this._getRpcHeader(c.id)));
    b = simpl4.util.Rpc._getUserName();
    var e = simpl4.util.Rpc._getPassword();
    return "<div class='filename'><a class='filename' target='_blank' href='/rpc/get?credentials=" + simpl4.util.Base64.encode(b + ":" + e) + "&rpc=" + d + "'>" + c[a] + "</a></div>";
  }
  return c[a];
}, toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.value] = a.label;
  }, this);
  return b;
}, _getRpcHeader:function(a) {
  return {service:"data", method:"queryOne", params:{storeId:this.namespace + "_data", entity:"document", getContent:!0, id:a}};
}, getDate:function(a) {
  return null == a ? "--" : moment(parseInt(a)).format("L");
}, refresh:function() {
  this.filterChanged();
}, getData:function(a, b) {
  this.selection = null;
  var c = simpl4.util.EntityManager.getEntityViewProperties(a.entity, "main-grid", {namespace:this.namespace}), d = simpl4.util.EntityManager.getPropertiesForEntity(a.entity, {namespace:this.namespace}), e = null, f = this.dtMeta;
  if (f) {
    for (var e = [], g = 0; g < f.length; g++) {
      if (null != f[g].data) {
        if (f[g].data.endsWith("_display")) {
          var h = f[g].data;
          e.push(h.substring(0, h.length - 8));
        } else {
          e.push(f[g].data);
        }
      }
    }
  }
  f = "data";
  g = a.entity;
  0 < a.entity.indexOf(":") && (f = a.entity.split(":")[0], g = a.entity.split(":")[1]);
  a.rpc ? (a = simpl4.util.Rpc.rpcSync("data:query", a.rpc), this._dataComplete(a.rows, b)) : (d.customServiceRead ? (d = d.customServiceRead, -1 == d.indexOf(":") && (d = "camelRoute:" + d), -1 == d.indexOf(".") && (d = d.split(":"), d = d[0] + ":" + this.namespace + "." + d[1]), a = {service:d.split(":")[0], method:d.split(":")[1], parameter:{storeId:this.namespace + "_" + f, pageSize:100, orderby:c.orderby, uuid:window.uuid, entity:g, fields:e, filter:a}, async:!0, context:this, failed:function(a) {
    console.error("simpl-crudtable1:", a);
    this.fire("error", {error:a});
  }, completed:function(a) {
    console.error("completed:", a);
    this._dataComplete(a, b);
  }}) : a = {service:"data", method:"query", parameter:{storeId:this.namespace + "_" + f, pageSize:100, orderby:c.orderby, entity:g, fields:e, filter:a}, async:!0, context:this, failed:function(a) {
    console.error("simpl-crudtable2:", a);
    this.fire("error", {error:a});
  }, completed:function(a) {
    console.log("completed2:", a.rows);
    this._dataComplete(a.rows, b);
  }}, simpl4.util.Rpc.rpcAsync(a));
}});
Polymer({is:"simpl-executefilter", properties:{pagesize:{type:Number, value:100}, offset:{type:Number, value:0}, params:{type:Object, value:function() {
  return {};
}, notify:!0}, meta:{notify:!0, type:Object}, data:{type:Object, notify:!0}, name:{value:null, type:String}, namespace:{value:null, type:String}}, observers:["paramsChanged(params.*,name,namespace)"], ready:function() {
}, paramsChanged:function() {
  console.log("executefilter.paramsChanged:", this.params);
  this.execute(!0);
}, parseParams:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, execute:function(a) {
  var b = this.parseParams(this.params), c = this.namespace || simpl4.util.BaseManager.getNamespace();
  console.debug("execute.namespace:", c);
  console.debug("execute.name:", this.name);
  console.debug("execute.params:", b);
  console.debug("execute.pagesize:", this.pagesize);
  console.debug("execute.offset:", this.offset);
  var d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("data:executeFilterByName", {storeId:c + "_data", withMeta:a, pageSize:this.pagesize, offset:this.offset, params:b, name:this.name});
  } catch (e) {
    console.error("executefilter:", e.stack);
    return;
  }
  a && (this.meta = d.meta, console.log("Meta:", this.meta));
  console.log("executeFilter.data:", d.rows);
  this.data = d.rows;
}});
Polymer({is:"simpl-buildfilter", properties:{params:{type:Object, notify:!0}, namespace:{value:null, type:String}, name:{value:null, type:String}, filter:{value:null, notify:!0, type:String}}, observers:["paramsChanged(params.*,name)"], paramsChanged:function() {
  this.build(!0);
}, parseParams:function(a) {
  if (null != a) {
    return "string" == typeof a && (a = JSON5.parse(a)), a;
  }
}, insertFilterParams:function(a, b) {
  if (null == a) {
    return !1;
  }
  var c = !0, d = a.label;
  null == a.connector && null != d && d.match(/^[a-zA-Z].*/) && (null != b && (-1 < Object.keys(b).indexOf(d) || -1 < Object.keys(b).indexOf(d.toLowerCase())) ? (c = b[d], null == c && (d = d.toLowerCase(), c = b[d]), null != c && (a.data = c), c = !0) : c = !1, delete a.connector, delete a.label);
  for (var d = a.children, e = [], f = 0; f < d.length; f++) {
    var g = d[f];
    this.insertFilterParams(g, b) && e.push(g);
  }
  a.children = e;
  return c;
}, addPack:function(a, b) {
  return 0 < a.indexOf(":") ? a : b + ":" + a;
}, build:function(a) {
  var b = this.parseParams(this.params);
  a = this.namespace || simpl4.util.BaseManager.getNamespace();
  console.log("buildFilter.build:", a + "." + this.name + "/", b);
  var b = simpl4.util.Rpc.rpcSync("git:searchContent", {reponame:a, name:this.name, type:"sw.filter"}), c = b.filter;
  this.insertFilterParams(c, this.params);
  c.namespace = a;
  c.entity = this.addPack(b.modulename, b.pack);
  console.log("buildFilter.filter:", c);
  this.set("filter", c);
}});
FormBehavior = {_valueChanged:function(a) {
  var b = this._getData(), c = simpl4.util.BaseManager.getLanguage(), c = {$mode:this.mode, $lang:c}, c = simpl4.util.Merge.merge(!0, b, c);
  this.saveDisabled = this._isSaveDisabled(c);
  this._errorMessage = null;
  for (var b = 0, d = this.fields.length; b < d; b++) {
    var e = this.fields[b];
    var f = e.getAttribute("enabled-expr");
    a = e.getAttribute("readonly-expr");
    var g = e.getAttribute("content-expr");
    this._isNotEmpty(a) ? (a = this._maskedEval(a, c)) ? e.setAttribute("disabled", "r") : e.removeAttribute("disabled") : this._isNotEmpty(f) && ((a = this._maskedEval(f, c)) ? e.removeAttribute("disabled") : e.setAttribute("disabled", "e"));
    a = e.getAttribute("exclude-expr");
    this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? e.setAttribute("hidden", "") : e.removeAttribute("hidden"));
    a = e.getAttribute("invisible-expr");
    this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? e.setAttribute("visibility", "hidden") : e.removeAttribute("visibility"));
    this._isNotEmpty(g) && (a = this._maskedEval(g, c), e.setValue(a));
  }
  null == this.groups && (this.groups = []);
  b = 0;
  for (d = this.groups.length; b < d; b++) {
    g = this.groups[b], f = g.getAttribute("enabled-expr"), a = g.getAttribute("readonly-expr"), g.getAttribute("content-expr"), this._isNotEmpty(a) ? (a = this._maskedEval(a, c)) ? g.setAttribute("disabled", "r") : g.removeAttribute("disabled") : this._isNotEmpty(f) && ((a = this._maskedEval(f, c)) ? g.removeAttribute("disabled") : g.setAttribute("disabled", "e")), a = g.getAttribute("exclude-expr"), this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? g.setAttribute("hidden", "") : g.removeAttribute("hidden")), 
    a = g.getAttribute("invisible-expr"), this._isNotEmpty(a) && ((a = this._maskedEval(a, c)) ? g.setAttribute("visibility", "hidden") : g.removeAttribute("visibility"));
  }
  c = this.$.formdiv.parentNode.querySelectorAll("xaction-button");
  for (b = 0; b < c.length; b++) {
    d = c[b], "execute" == d.xaction && (this.saveDisabled ? d.setAttribute("disabled", "") : d.removeAttribute("disabled"));
  }
}, _isSaveDisabled:function(a) {
  var b = this._form.xf_save_disabled;
  if (this._isEmpty(b)) {
    return !1;
  }
  try {
    return this._maskedEval(b, a);
  } catch (c) {
    console.error("_postProcessLocalForm:", c);
  }
}, _isNotEmpty:function(a) {
  return null == a || 0 == a.length ? !1 : !0;
}, created:function() {
}, ready:function() {
}, _shapesChanged:function() {
  console.debug("simpl-baseform._shapesChanged");
  this._valueChanged();
}, validate:function(a) {
  var b = [], c = this._filterToArray("input-field,checkbox-field,select-field", this.$.formdiv, !0, !1);
  Array.prototype.forEach.call(c, function(a) {
    a.setInvalid(!1);
  });
  0 < c.length && (regula.bind({elements:c}), b = regula.validate({elements:c}), b.forEach(function(b) {
    b.failingElements.forEach(function(c) {
      c.setInvalid(!0 !== a ? !0 : !1);
      c.setErrorMessage(1 != a ? b.message : null);
    });
  }));
  for (var c = this._filterToArray("gridinput-field,tableselect-field,upload-field,embeddedobj-inline-field,linkedobj-field,linkedlist-field,embeddedobj-field,embeddedlist-field,tree-field,select-field", this.$.formdiv, !0, !0), d = 0; d < c.length; d++) {
    if ("SELECT-FIELD" != c[d].tagName || null == c[d].getAttribute("gridfield")) {
      var e = c[d].isInvalid;
      c[d].checkConstraints();
      c[d].isInvalid && b.push("Error");
      !0 === a && c[d].setInvalid(e);
    }
  }
  this._validateLocal(b);
  this._validateService(b);
  return 0 == b.length;
}, _validateLocal:function(a) {
  var b = this._form.xf_validate_local;
  if (this._isEmpty(b)) {
    return null;
  }
  for (var c = this._getData(), d = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $lang:d}, d = simpl4.util.Merge.merge(!0, c, d), e = b.items, b = [], c = 0; c < e.length; c++) {
    var f = e[c];
    !1 === this._maskedEval(f.expr, d) == 0 && ((f = f.errormsg) && f.match(/^[@%]/) && (f = tr(f.substring(1))), a.push(f), b.push(f));
  }
  d = a = "";
  for (c = 0; c < b.length; c++) {
    a += d + b[c], d = "<br/>";
  }
  this._setGlobalErrorMessage(a);
}, _validateService:function(a) {
  var b = this._form.xf_validate_service;
  if (this._isEmpty(b)) {
    return null;
  }
  try {
    -1 == b.indexOf(".") && (b = this.namespace + "." + b);
    for (var c = simpl4.util.BaseManager.getLanguage(), d = this._getData(), e = simpl4.util.Rpc.rpcSync("camelRoute:" + b, {data:d, lang:c, formName:this._removeExtension(this.formName), mode:this.mode, uuid:window.uuid}), c = [], d = 0; d < e.length; d++) {
      var f = e[d], g = f.message, h = f.path;
      g && g.match(/^[@%]/) && (g = tr(g.substring(1)));
      var l = !1;
      if (h) {
        var n = this._getField(h);
        n && (n.setInvalid(!0), n.setErrorMessage(g), l = !0);
      }
      a.push(g);
      l || c.push(g);
    }
    e = a = "";
    for (d = 0; d < c.length; d++) {
      a += e + c[d], e = "<br/>";
    }
    this._setGlobalErrorMessage(a);
  } catch (p) {
    console.error("_validateServiceForm.call:camelRoute:" + b), console.error("_validateServiceForm:", p);
  }
}, _setGlobalErrorMessage:function(a) {
  _.isEmpty(a) || (this._errorMessage = a, this.async(function() {
    var b = this.querySelector("#globalErrorId");
    null != b && (b.innerHTML = a);
  }, 50));
}, _getExcludes:function(a) {
  var b = [], c = this;
  $("simpl-form", this.$.formdiv).each(function(d) {
    b = b.concat(c._filterToArray(a, this, !1, !1));
  });
  return b;
}, _filterToArray:function(a, b, c, d) {
  var e = null;
  !0 === c && (e = this._getExcludes(a));
  var f = [];
  $(a, b).each(function(a) {
    a = this.getAttribute("data-constraints");
    if (d || null != a && 0 < a.length) {
      e ? 0 > e.indexOf(this) && f.push(this) : f.push(this);
    }
  });
  return f;
}, isNumEmpty:function(a) {
  return null == a || 0 == a || isNaN(a) || "" == a ? !0 : !1;
}, _maskedEval:function(a, b, c) {
  try {
    return b._ = _, b.moment = moment, b.accounting = accounting, b.Math = Math, b.form = this, b.tr = window.tr, b.isNumEmpty = this.isNumEmpty, b.parseFloat = window.parseFloat, b.parseInt = window.parseInt, b.isNaN = window.isNaN, metaes.evaluate(a.toString(), b);
  } catch (d) {
    console.error("\t" + d), console.debug("Form._maskedEval.script:", a), console.debug("Form._maskedEval.env:", b);
  }
  return c;
}, _maskedEvalNoError:function(a, b, c) {
  try {
    return b._ = _, b.moment = moment, b.accounting = accounting, b.Math = Math, b.form = this, b.tr = window.tr, b.parseFloat = window.parseFloat, b.parseInt = window.parseInt, b.isNaN = window.isNaN, metaes.evaluate(a.toString(), b);
  } catch (d) {
  }
  return c;
}, _whenFieldsReady:function(a) {
  function b() {
    null != c.fields && 0 < c.fields.length ? a() : setTimeout(b, 20);
  }
  var c = this;
  b();
}, _getField:function(a) {
  return this.fieldsMap[a];
}, _getLabel:function(a) {
  return this.fieldsMap[a].label;
}, _dataChanged:function() {
  !0 !== this.internal && this.__dataChanged();
  this.internal = !1;
}, __dataChanged:function() {
  this._whenFieldsReady(function() {
    this.preProcessData || this._doPreProcess();
    simpl4.util.Merge.merge(!1, this.data, this.preProcessData);
    this.preProcessData = null;
    this._setData(this.data);
  }.bind(this));
}, _setFieldData:function(a) {
  Object.keys(a).forEach(function(b) {
    var c = this._getField(b);
    null != c && null != c.setValue && (c.setInvalid && c.setInvalid(!1), c.setValue(a[b]));
  }, this);
}, setState:function(a) {
  this.setData(a);
}, setData:function(a) {
  this.resetData = jQuery.extend({}, a);
  null != a && (this.internal = !0, this.data = a, this.__dataChanged());
}, _setData:function(a) {
  null != a && (this.fields.forEach(function(b) {
    if (null != b.setValue) {
      b.withoutCheck = !0;
      b.setInvalid && (b.setInvalid(!1), b.setErrorMessage(null));
      var c = a[b.name];
      b.expressionIn && (c = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:c}, c = simpl4.util.Merge.merge(!0, a, c), c = this._maskedEval(b.expressionIn, c));
      var d = b.defaultvalue;
      null == c ? (d = this._maskedEvalNoError(d, {}, d), b.setValue(d)) : b.setValue(c);
      b.withoutCheck = !1;
    }
  }, this), this._valueChanged());
}, clearData:function() {
  this.fields.forEach(function(a) {
    null != a.setValue && (a.withoutCheck = !0, a.setInvalid && a.setInvalid(!1), a.setValue(null));
  }, this);
}, updateData:function(a) {
  this.internal = !0;
  this.data = this.data || {};
  Object.keys(a).forEach(function(b) {
    this.data[b] = a[b];
    var c = this.fieldsMap[b];
    if (c) {
      c.withoutCheck = !0;
      c.setInvalid && c.setInvalid(!1);
      var d = this.data[b];
      b = d;
      c.expressionIn && (d = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:d}, d = simpl4.util.Merge.merge(!0, a, d), d = this._maskedEval(c.expressionIn, d), console.log("expressionIn(" + c.name + "\t," + c.expressionIn + "\t," + b + ") -> ", d));
      c.setValue(d);
    }
  }.bind(this));
  this._valueChanged();
}, _getData:function() {
  var a = simpl4.util.Merge.merge(!0, this.data);
  this.fields.forEach(function(b) {
    null != b.getValue && (a[b.name] = b.getValue());
  }, this);
  return a;
}, getState:function() {
  return this.getData();
}, getData:function() {
  var a = simpl4.util.Merge.merge(!0, this.data);
  this.fields.forEach(function(b) {
    null != b.getValue && (a[b.name] = b.getValue());
  }, this);
  this.fields.forEach(function(b) {
    if (null != b.getValue && null != b.expressionOut) {
      b.getValue();
      var c = {$mode:this.mode, $lang:simpl4.util.BaseManager.getLanguage(), $self:b.getValue()}, c = simpl4.util.Merge.merge(!0, a, c);
      a[b.name] = this._maskedEval(b.expressionOut, c);
    }
  }, this);
  return a;
}, setItems:function(a) {
  this._whenFieldsReady(function() {
    this._setItems(a);
  }.bind(this));
}, _setItems:function(a) {
  this.fields.forEach(function(b) {
    null != b.setItems && null != a[b.name] && b.setItems(a[b.name]);
  }, this);
}, _getSelectionLists:function(a) {
  if (this._isEmpty(a)) {
    return {};
  }
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var b = {service:"camelRoute", method:a, parameter:{lang:simpl4.util.BaseManager.getLanguage(), mode:this.mode, uuid:window.uuid}, async:!1, context:this, failed:function(a) {
      console.error("_getSelectionLists:", a);
      console.log(a.stack);
    }, completed:function(a) {
      console.log("_getSelectionLists._selectionLists:", a);
      this._selectionLists = a;
    }};
    return simpl4.util.Rpc.rpcAsync(b);
  } catch (c) {
    console.error("_getSelectionLists.call:camelRoute:" + a), console.error("_getSelectionLists:", c);
  }
}, _postProcessService:function() {
  var a = this._form.xf_postprocess_service, b = this._form.xf_postprocess_service_mode;
  if (b != this.mode && "edit_add" != b || this._isEmpty(a)) {
    return null;
  }
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var c = simpl4.util.BaseManager.getLanguage(), d = this._getData(), e = simpl4.util.Rpc.rpcSync("camelRoute:" + a, {formData:d, lang:c, formName:this._removeExtension(this.formName), mode:this.mode, prePost:"post", uuid:window.uuid});
    console.log("_postProcessForm.replaceFormData:", e);
    return e;
  } catch (f) {
    console.error("_postProcessForm.call:camelRoute:" + a), console.error("_postProcessForm:", f);
  }
}, _postProcessLocal:function() {
  var a = this._form.xf_postprocess_local;
  if (this._isEmpty(a)) {
    return null;
  }
  try {
    var b = this._getData(), c = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $uuid:window.uuid, $lang:c}, d = simpl4.util.Merge.merge(!0, b, d);
    return this._maskedEval(a, d);
  } catch (e) {
    console.error("_postProcessLocalForm:", e);
  }
}, _preProcessService:function() {
  var a = this._form.xf_preprocess_service, b = this._form.xf_preprocess_service_mode, b = b == this.mode || "edit_add" == b;
  if (!b || this._isEmpty(a)) {
    return null;
  }
  console.log("_preProcessService:", a + "/" + b + "/preProcessData:", this.preProcessData + "/data:", this.data);
  try {
    -1 == a.indexOf(".") && (a = this.namespace + "." + a);
    var c = {service:"camelRoute", method:a, parameter:{formData:this.data, lang:simpl4.util.BaseManager.getLanguage(), formName:this._removeExtension(this.formName), mode:this.mode, prePost:"pre", uuid:window.uuid}, async:!1, context:this, failed:function(a) {
      console.error("_postProcessForm:", a);
      console.log(a.stack);
    }, completed:function(a) {
      console.log("_preProcessService.replaceFormData:", a);
      null != a && (this._preData = a, a._selectionLists && (this._selectionLists = a._selectionLists));
    }};
    return simpl4.util.Rpc.rpcAsync(c);
  } catch (d) {
    console.error("_postProcessServic:", d), console.debug("_postProcessService.call:method:" + a);
  }
}, _preProcessLocal:function() {
  var a = this._form.xf_preprocess_local;
  if (this._isEmpty(a)) {
    return null;
  }
  try {
    var b = this.data, c = simpl4.util.BaseManager.getLanguage(), d = {$mode:this.mode, $lang:c}, d = simpl4.util.Merge.merge(!0, b, d), e = this._maskedEval(a, d);
    null != e && (this._preData = e, console.log("_preProcessLocal.replaceFormData:", e));
  } catch (f) {
    console.error("_preProcessLocal:", f), console.debug("_preProcessLocal.script:", a);
  }
}, _doPreProcess:function() {
  this._preProcessService();
  var a = this._preData;
  this._preProcessLocal();
  this.preProcessData = simpl4.util.Merge.merge(!0, a, this._preData);
  this._preData = null;
}, _formNameChanged:function() {
  this.async(function() {
    this.__formNameChanged();
  }, 10);
}, __formNameChanged:function() {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this._preData = null;
  "empty" != this.formName && this.async(function() {
    var a = simpl4FormManager.getForm(this.formName, this.namespace);
    this._form = a.properties;
    this.defaultButtons = a.properties.xf_default_buttons;
    this.formVar = a.properties.xf_name;
    this._getSelectionLists(a.properties.xf_method_fetch);
    this._doPreProcess();
    this.shapes = this._prepareShape(a).childShapes;
    this._shapeMap = {};
    this._buildShapeMap(this.shapes[0]);
    this.async(function() {
      this.fields = this._filterToArray("[field]", this.$.formdiv, !0, !0);
      this.groups = this._filterToArray("simpl-group", this.$.formdiv, !0, !0);
      this.fieldsMap = this._toMap(this.fields);
      this.fields.forEach(function(a) {
        a.setForm(this);
      }, this);
      this.fire("form-ready", this);
      this._valueChanged();
      null == this.resetData && (this.resetData = this._getData());
    }, 1);
  }, 1);
}, _specChanged:function() {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this.async(function() {
    this.shapes = this.spec;
    this._shapeMap = {};
    this._buildShapeMap(this.shapes[0]);
    this.async(function() {
      this.fields = this._filterToArray("[field]", this.$.formdiv, !0, !0);
      this.groups = this._filterToArray("simpl-group", this.$.formdiv, !0, !0);
      this.fields.forEach(function(a) {
        a.setForm(this);
      }, this);
      this.fieldsMap = this._toMap(this.fields);
      this._valueChanged();
      this.fire("form-ready", this);
      null == this.resetData && (this.resetData = this._getData());
    }, 1);
  }, 1);
}, _formTabRenderer:function(a) {
  for (var b = 0; b < shapes.length; b++) {
    a = shapes[b], this._formElementRenderer(a);
  }
}, _formElementSelector:function(a) {
  for (var b = 0; b < a.length; b++) {
    var c = a[b];
    this.isField(c.id) && this._formElementRenderer(c);
    this.isTabView(c.id) && this._formTabRenderer(c.childShapes);
    (this.isGroup(c.id) || this.isRow(c.id) || this.isForm(c.id)) && this._formElementSelector(c.childShapes);
  }
}, _formElementRenderer:function(a) {
  this.isEnumSelect(a.id) && (this._itemMap[a.xf_id] = a.items);
}, getItems:function(a) {
  return this._itemMap[a];
}, initForm:function(a, b) {
  this.fields = [];
  this.fieldsMap = {};
  this.shapes = [];
  this._form = {};
  this._itemMap = {};
  this._preData = null;
  this.namespace = a;
  a = simpl4FormManager.getForm(b, a);
  this._form = a.properties;
  this.formVar = a.properties.xf_name;
  this._getSelectionLists(a.properties.xf_method_fetch);
  this._doPreProcess();
  this.shapes = this._prepareShape(a).childShapes;
  this._shapeMap = {};
  this._buildShapeMap(this.shapes[0]);
  this._formElementSelector(this.shapes);
}, _toMap:function(a) {
  var b = {};
  a.forEach(function(a) {
    b[a.name] = a;
  }, this);
  return b;
}, _convertType:function(a) {
  return "datetime" == a ? "date" : "password" == a ? "text" : a;
}, _buildShapeMap:function(a) {
  a.xf_id && (this._shapeMap[a.xf_id] = a);
  a = a.childShapes;
  for (var b = 0; a && b < a.length; b++) {
    this._buildShapeMap(a[b]);
  }
}, _prepareShape:function(a) {
  a = this._cleanShape(a);
  "Input" == a.id && (a.regulaConstraints = this._constructRegulaConstraints(a["xf_constraint_" + this._convertType(a.xf_type)], a.xf_errormsg));
  a.childShapes = _.sortBy(a.childShapes, function(a) {
    return 10000 * a.bounds.upperLeft.y + a.bounds.upperLeft.x;
  });
  var b = a.childShapes;
  a.childShapes = [];
  for (var c = null, d = 0; d < b.length; d++) {
    if ("Tabview" == a.id) {
      a.childShapes.push(this._prepareShape(b[d]));
    } else {
      if (0 == d || 0 < d && this._isLineBreak(b[d - 1], b[d])) {
        c = {id:"Row", childShapes:[]}, a.childShapes.push(c);
      }
      c.childShapes.push(this._prepareShape(b[d]));
    }
  }
  return a;
}, _cleanShape:function(a) {
  if ("input" == a.stencil.id.toLowerCase() || "textarea" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "upload" == a.stencil.id.toLowerCase() || "embeddedlist" == a.stencil.id.toLowerCase() || "linkedlist" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "embeddedobj" == a.stencil.id.toLowerCase() || "moduleselector" == a.stencil.id.toLowerCase() || "enumselect" == a.stencil.id.toLowerCase() || "treeselect" == a.stencil.id.toLowerCase() || 
  "tableselect" == a.stencil.id.toLowerCase() || "gridinput" == a.stencil.id.toLowerCase() || "checkbox" == a.stencil.id.toLowerCase() || "custom" == a.stencil.id.toLowerCase() || "page" == a.stencil.id.toLowerCase() || "group" == a.stencil.id.toLowerCase()) {
    var b = this._getLabelShape(a.childShapes);
    null != b ? (a.properties.label = b.properties.xf_text, null != a.properties.xf_id && "" != a.properties.xf_id || !a.properties.label || (a.properties.xf_id = a.properties.label.toLowerCase().replace(/\s/g, "")), 1 == a.childShapes.length && (a.childShapes = []), (b = a.properties.label) && b.match(/^[@%]/) && (a.properties.label = tr(b.substring(1)))) : a.properties.label = "";
    b = this._getHelpShape(a.childShapes);
    null != b ? (a.properties.help = b.properties.xf_message, 1 == a.childShapes.length && (a.childShapes = []), (b = a.properties.help) && b.match(/^[@%]/) && (a.properties.help = tr(b.substring(1)))) : a.properties.help = null;
    !this._isEmpty(a.properties.xf_default) && "input" == a.stencil.id.toLowerCase() && a.properties.xf_type.startsWith("date") && (b = a.properties.xf_default, "now" == a.properties.xf_default ? a.properties.xf_default = Date.create().getTime() : null != b && "string" === typeof b && 0 < b.length && (a.properties.xf_default = Date.create(b).getTime(), isNaN(a.properties.xf_default) && console.error("form-behavior:parse.error.DefaultDate(" + a.properties.xf_id + "):" + b)));
    _.isEmpty(a.properties.xf_required) && (a.properties.xf_required = "false");
    "textarea" == a.stencil.id.toLowerCase() && null == a.properties.xf_rows && (a.properties.xf_rows = 3);
    "moduleselector" == a.stencil.id.toLowerCase() && (a.properties.xf_namespace = this.namespace);
    if ("embeddedlist" == a.stencil.id.toLowerCase() || "linkedlist" == a.stencil.id.toLowerCase() || "linkedobj" == a.stencil.id.toLowerCase() || "embeddedobj" == a.stencil.id.toLowerCase()) {
      a.properties.xf_namespace = this.namespace, b = a.bounds, a.properties.height = b.lowerRight.y - b.upperLeft.y;
    }
    if ("gridinput" == a.stencil.id.toLowerCase()) {
      var c = a.properties;
      c.columns = c.xf_columns.items;
      for (b = 0; b < c.columns.length; b++) {
        var d = c.columns[b];
        d.display && d.display.match(/^[@%]/) && (d.display = tr(d.display.substring(1)));
        d.label && d.label.match(/^[@%]/) && (d.label = tr(d.label.substring(1)));
        if ("selection" == d.type) {
          d.id = "Enumselect";
          try {
            if (d.parameter && d.parameter.startsWith("enumeration")) {
              var e = simpl4FormManager.createSelectableItems(this.namespace, this.formName, c.xf_id, d.parameter);
              d.items = e.getItems();
            } else {
              d.items = JSONPath({json:this._selectionLists, path:d.parameter, callback:function() {
              }})[0];
            }
          } catch (r) {
            console.error("JSONPath:", r);
          }
        }
      }
      c.xf_columns = void 0;
      b = a.bounds;
      c.height = b.lowerRight.y - b.upperLeft.y;
    }
    "page" == a.stencil.id.toLowerCase() && (b = a.properties.xf_label) && b.match(/^[@%]/) && (a.properties.label = tr(b.substring(1)));
    if ("enumselect" == a.stencil.id.toLowerCase() || "tableselect" == a.stencil.id.toLowerCase() || "treeselect" == a.stencil.id.toLowerCase()) {
      var f = "tableselect" == a.stencil.id.toLowerCase(), g = "treeselect" == a.stencil.id.toLowerCase();
      c = a.properties;
      var h = c.xf_enumembed, l = c.xf_enum, n = c.xf_service, p = c.xf_filter, q = c.xf_jsonpath;
      e = c.xf_parammapping;
      b = c.xf_resultmapping;
      var m = c.xf_varname, d = c.xf_namespace;
      d && "-" != d || (d = this.namespace);
      this._isEmpty(m) ? this._isEmpty(q) ? !g && !f && h && 0 < h.totalCount ? (e = simpl4FormManager.createSelectableItems(d, this.formName, c.xf_id, h), c.items = e.getItems()) : !g && !f && l && 0 < l.totalCount ? (e = simpl4FormManager.createSelectableItems(d, this.formName, c.xf_id, JSON.stringify(c.xf_enum)), c.items = e.getItems()) : g || this._isEmpty(p) ? this._isEmpty(n) ? (e = simpl4FormManager.createSelectableItems(d, this.formName, c.xf_id, JSON.stringify(c.xf_enum)), c.items = e.getItems()) : 
      (f = {totalCount:1, enumDescription:"sw.service:" + n, items:[]}, f.params = this._doParameterMapping(e), e = simpl4FormManager.createSelectableItems(d, this.formName, c.xf_id, JSON.stringify(f)), c.items = this._doResultMapping(e.getItems(), b)) : (f = {totalCount:1, enumDescription:"sw.filter:" + p, items:[]}, f.params = this._doParameterMapping(e), f.checkParams = !0, e = simpl4FormManager.createSelectableItems(d, this.formName, c.xf_id, JSON.stringify(f)), d = e.getItems(), e.getMissingParamList() ? 
      (console.error("Filter:", f), console.error("Filter.misingParameters:", e.getMissingParamList())) : c.items = this._doResultMapping(d, b)) : (e = JSONPath({json:this._selectionLists, path:q, callback:function() {
      }}), c.items = null == e || 0 == e.length ? [] : e[0], c.items = this._doResultMapping(c.items, b)) : (c.items = this.variables[m], g || (c.items = this._doResultMapping(c.items, b)));
      "tableselect" == a.stencil.id.toLowerCase() && (null == c.items && (c.items = []), b = (b = c.xf_columns) ? b.items : [], c.meta = [], b.forEach(function(a, b) {
        var d = b = a.display;
        d && d.match(/^[@%]/) && (b = tr(d.substring(1)));
        null == b && (b = xf_id + "." + a.colname);
        c.meta.push({title:b, data:a.colname});
      }, this), b = a.bounds, c.height = b.lowerRight.y - b.upperLeft.y, 75 > c.height && (c.height = 75));
      if (0 < c.items.length && !this._isEmpty(a.properties.xf_default) && a.properties.xf_default.startsWith("#")) {
        try {
          a.properties.xf_default = c.items[parseInt(a.properties.xf_default.substring(1))].value;
        } catch (r) {
          console.error("set xf_default(" + a.properties.xf_id + "):", r);
        }
      }
    }
  } else {
    if ("actionbutton" == a.stencil.id.toLowerCase()) {
      b = a.properties.xf_iconname;
      e = a.properties.xf_action;
      d = a.properties.xf_enter;
      if (null == b || "" == b) {
        a.properties.xf_iconname = "execute" == e ? "check" : "clear";
      }
      null == this.enterAction && !0 === d && (this.enterAction = e);
      (b = a.properties.xf_label) && b.match(/^[@%]/) && (a.properties.xf_label = tr(b.substring(1)));
    } else {
      "alert" == a.stencil.id.toLowerCase() ? (b = simpl4.util.BaseManager.getLanguage(), a.properties.xf_message = a.properties["xf_message_" + b] ? this._expandString(a.properties["xf_message_" + b], this.variables) : this._expandString(a.properties.xf_message, this.variables)) : a.properties.label = "";
    }
  }
  null == a.properties.xf_type && (a.properties.xf_type = "noop");
  return _.extend(a.properties, {bounds:a.bounds}, a.stencil, {childShapes:a.childShapes});
}, _getHelpShape:function(a) {
  for (var b = 0; b < a.length; b++) {
    if ("help" == a[b].stencil.id.toLowerCase()) {
      return a[b];
    }
  }
  return null;
}, _getLabelShape:function(a) {
  for (var b = 0; b < a.length; b++) {
    if ("label" == a[b].stencil.id.toLowerCase()) {
      return a[b];
    }
  }
  return null;
}, _isLineBreak:function(a, b) {
  var c = !1;
  a.bounds.upperLeft.y != b.bounds.upperLeft.y && (c = !0);
  return c;
}, _doParameterMapping:function(a) {
  var b = {};
  if (!a) {
    return b;
  }
  console.log("----paramMapping:", a);
  var c = simpl4.util.Merge.merge(!0, this.preProcessData, this._getData());
  c.$uuid = window.uuid;
  c.$lang = simpl4.util.BaseManager.getLanguage();
  c.$mode = this.mode;
  console.log("----paramEnv:", c);
  a = a.items;
  for (var d = 0; d < a.length; d++) {
    b[a[d].param] = this._maskedEval(a[d].formexpr, c);
  }
  console.log("====paramMap:", b);
  return b;
}, _doResultMapping:function(a, b) {
  console.log("----resultList:", a);
  if ("string" == typeof a) {
    return console.error("----doResultMapping.cannot handle String result:", a), [];
  }
  var c = [];
  if (null == b || this._isEmpty(b.items)) {
    return a;
  }
  b = b.items;
  for (var d = 0; d < a.length; d++) {
    var e = a[d], f = clone(e);
    _.isString(e) && (f = {self:e});
    for (var g = 0; g < b.length; g++) {
      var h = b[g].mapping, l = b[g].resultexpr;
      _.isString(e) && (e = {self:e});
      f[h] = this._maskedEval(l, e);
    }
    c.push(f);
  }
  console.log("====selectionList:", c);
  return c;
}, _constructRegulaConstraints:function(a, b) {
  if (null == a || 0 == a.length) {
    return "";
  }
  a = a.replace(/DecimalMin/g, "Min");
  a = a.replace(/DecimalMax/g, "Max");
  a = JSON.parse(a);
  var c = "", d = "", e = this;
  Object.keys(a).forEach(function(f) {
    var g, h = a[f];
    if (!0 === h[0]) {
      c += d + "@" + e._mapKeys(f);
      var l = e._constraintParams[f];
      b ? (msg = b) && msg.match(/^[@%]/) && (msg = tr(msg.substring(1))) : msg = tr("validation." + e._mapKeys(f));
      for (g = 0; l && g < l.length; g++) {
        var n = l[g];
        var p = h[g + 1];
        "Size" != f && "Length" != f || 1 != g || (p = p || "512");
        var q = n;
        "regex" == n && (q += "p");
        msg = msg.replace("{" + q + "}", p);
      }
      c += '(message="' + msg + '"';
      if (l && 0 < l.length && (g = l[0], p = "format" == g ? '"YMD"' : h[1], "regex" == g && (p = this._correctRegex(h[1])), c += "," + g + "=" + p, 1 < l.length)) {
        g = l[1];
        p = h[2];
        if (null == p || "" == p) {
          if ("Size" == f || "Length" == f) {
            p = "512";
          }
        }
        c += "," + g + "=" + p;
      }
      c += ")";
      d = " ";
    }
  }, this);
  return c;
}, _correctRegex:function(a) {
  return null == a ? "/.*/" : 0 === a.indexOf("/") ? a : "/" + a + "/";
}, _mapKeys:function(a) {
  return "NotNull" == a ? "NotEmpty" : "Size" == a ? "Length" : a;
}, _constraintParams:{Max:["value"], Min:["value"], Range:["min", "max"], Pattern:["regex"], Length:["min", "max"], Size:["min", "max"], Digits:["integer", "fraction"], Past:["format"], Future:["format"], Step:["min", "max", "value"]}, _isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}, _removeExtension:function(a) {
  return a.endsWith(".form") ? a.substring(0, a.length - 5) : a;
}, _expandString:function(a, b) {
  if (null == a || 0 == a.length) {
    return "";
  }
  for (var c = 0, d = 0, e = null, f = "", g = 0, h = 0, l = 0; l < a.length; l++) {
    l < a.length - 2 && "${" == a.substring(l, l + 2) ? (0 == g && (h = l + 2), g++) : "}" == a.charAt(l) && 0 < g ? (--g, 0 == g && (c++, e = this._maskedEval(a.substring(h, l), b), f += e)) : 0 == g && (f += a.charAt(l), d++);
  }
  return 1 == c && 0 == d ? e : f;
}};
FieldBehavior = {properties:{readonly:{value:!1, type:Boolean}, autofocus:{value:!1, type:Boolean}, disabled:{value:!1, type:Boolean}, label:{value:null, type:String}, name:{value:null, type:String}, value:{type:String}, defaultValue:{value:null, type:String}, editValue:{value:null, type:String}}, created:function() {
  this._iid = getShortId();
}, attached:function() {
  this.isDomReady = !0;
}, detached:function() {
}, setForm:function(a) {
  this.form = a;
  this.convertNullToEmpty = !0 === a._form.xf_string_null_in_empty;
}, getPack:function() {
  return null == this.form ? null : this.form.pack;
}, setValue:function(a) {
  this.value = a;
}, getValue:function() {
  return this.value;
}, observers:["disabledChanged(disabled)"], getForm:function() {
  return this.form;
}, getSimpleEntityName:function(a) {
  return 0 <= a.indexOf(":") ? a.split(":")[1] : a;
}, disabledChanged:function(a) {
  this.alwaysFloatLabel = this.disabled;
}, _focusBlurHandler:function(a) {
  (a.path ? a.path[0] : a.target) === this && this._setFocused("focus" === a.type);
}, checkConstraints:function() {
  var a = this.getAttribute("data-constraints");
  if (null != a && 0 != a.length) {
    var b = [this];
    regula.bind({elements:b});
    this.async(function() {
      var a = regula.validate({elements:b});
      this.setInvalid(0 < a.length);
      0 < a.length ? this.setErrorMessage(a[0].message) : this.setErrorMessage(null);
    });
  }
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.invalid = a;
}};
(function(a) {
  "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
})(function(a) {
  var b = {options:{optionClass:"", dropdownClass:"", autoinit:!1, callback:!1, onSelected:!1, dynamicOptLabel:"Add a new option..."}, init:function(c) {
    function d(d) {
      if (!d.data("dropdownjs") && d.is("select")) {
        var e = d.attr("multiple"), g = d.attr("data-dynamic-opts"), h = a(), l = a("<div></div>");
        l.addClass("dropdownjs").addClass(c.dropdownStyle);
        l.data("select", d);
        l.data("options", c);
        var n = a("<input type=text readonly class=fakeinput>");
        a.material && n.data("mdproc", !0);
        l.append(n);
        var p = a("<ul></ul>");
        p.data("select", d);
        l.append(p);
        n.attr("placeholder", d.attr("placeholder"));
        d.find("option").each(function() {
          var c = a(this);
          b._addOption(p, c);
        });
        g && (h = a("<li class=dropdownjs-add></li>"), h.append("<input>"), h.find("input").attr("placeholder", c.dynamicOptLabel), p.append(h));
        l.find("li");
        if (e) {
          b._select(l, d.find(":selected"));
        } else {
          var q = d.find(":selected").length ? d.find(":selected").last() : d.find("option, li").first();
          b._select(l, q);
        }
        n.addClass(d[0].className);
        d.hide().attr("data-dropdownjs", !0);
        d.after(l);
        c.callback && c.callback(l);
        p.on("click", "li:not(.dropdownjs-add)", function(c) {
          b._select(l, a(this));
          d.change();
        });
        p.on("keydown", "li:not(.dropdownjs-add)", function(c) {
          if (27 === c.which) {
            return a(".dropdownjs > ul > li").attr("tabindex", -1), n.removeClass("focus").blur();
          }
          if (32 === c.which && !a(c.target).is("input")) {
            return b._select(l, a(this)), !1;
          }
        });
        p.on("focus", "li:not(.dropdownjs-add)", function() {
        });
        if (g && g.length) {
          h.on("keydown", function(b) {
            if (13 === b.which) {
              b = a("<option>");
              var c = h.find("input").val();
              h.find("input").val("");
              b.attr("value", c);
              b.text(c);
              d.append(b);
            }
          });
        }
        d.on("DOMNodeInserted", function(a) {
        });
        n.on("click focus", function(b) {
          b.stopPropagation();
          if (!d.is(":disabled")) {
            a(".dropdownjs > ul > li").attr("tabindex", -1);
            a(".dropdownjs > input").not(a(this)).removeClass("focus").blur();
            a(".dropdownjs > ul > li").not(".dropdownjs-add").attr("tabindex", 0);
            b = a(this).offset().top - a(document).scrollTop();
            a(this).offset();
            a(document).scrollLeft();
            var c = a(window).height() - (a(this).offset().top - a(document).scrollTop());
            a(window).width();
            a(this).offset();
            a(document).scrollLeft();
            var e = c;
            200 > e && b > c ? (e = b, p.attr("placement", "top-left")) : p.attr("placement", "bottom-left");
            console.log("height:", e);
            a(this).next("ul").css("max-height", e - 20);
            a(this).addClass("focus");
          }
        });
        a(document).on("click", function(b) {
          e && a(b.target).parents(".dropdownjs").length || a(b.target).parents(".dropdownjs-add").length || a(b.target).is(".dropdownjs-add") || (a(".dropdownjs > ul > li").attr("tabindex", -1), n.removeClass("focus"));
        });
      }
    }
    c = c ? a.extend(b.options, c) : b.options;
    if (c.autoinit) {
      a(document).on("DOMNodeInserted", function(b) {
        b = a(b.target);
        b.is("select") && b.is(c.autoinit) && d(b);
      });
    }
    a(this).each(function() {
      d(a(this));
    });
  }, select:function(c) {
    c = a(this).find('[value="' + c + '"]');
    b._select(a(this), c);
  }, _select:function(b, d) {
    if (!d.is(".dropdownjs-add")) {
      var c = b.data("select"), f = b.data("options"), g = b.find("input.fakeinput"), h = c.attr("multiple");
      b = b.find("li");
      if (h) {
        d.toggleClass("selected");
        var l = c.find('[value="' + d.attr("value") + '"]');
        l.prop("selected") ? l.prop("selected", !0) : l.prop("selected", !1);
        var n = [];
        b.each(function() {
          a(this).hasClass("selected") && n.push(a(this).text());
        });
        g.val(n.join(", "));
      }
      h || (b.not(d).removeClass("selected"), d.addClass("selected"), c.val(d.attr("value")), g.val(d.text().trim()));
      a.material && (g.val().trim() ? c.removeClass("empty") : c.addClass("empty"));
      if (f.onSelected) {
        f.onSelected(d.attr("value"));
      }
    }
  }, _addOption:function(b, d) {
    var c = a("<li></li>");
    c.addClass(this.options.optionStyle);
    d.text() ? c.text(d.text()) : c.html("&nbsp;");
    c.attr("value", d.val());
    b.data("select").attr("data-dynamic-opts") && (c.append("<span class=close></span>"), c.find(".close").on("click", function() {
      c.remove();
      d.remove();
    }));
    d.prop("selected") && c.attr("selected", !0);
    b.find(".dropdownjs-add").length ? b.find(".dropdownjs-add").before(c) : b.append(c);
  }};
  a.fn.dropdown = function(c) {
    if (b[c]) {
      return b[c].apply(this, Array.prototype.slice.call(arguments, 1));
    }
    if ("object" === typeof c | !c) {
      return b.init.apply(this, arguments);
    }
    a.error("Method " + c + " does not exists on jQuery.dropdown");
  };
});
Polymer({is:"html-echo", behaviors:[FieldBehavior], properties:{html:{observer:"htmlChanged", type:String}}, htmlChanged:function() {
  Polymer.dom(this).innerHTML = this.html;
}});
Polymer({is:"input-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, FieldBehavior, ModernizrBehavior], properties:{compact:{value:!1, type:Boolean}, noLabelFloat:{type:Boolean, computed:"_noLabelFloat(floatingLabel)"}, floatingLabel:{value:"true", type:String}, name:{type:String}, type:{value:"text", observer:"typeChanged", type:String}, step:{type:String}, max:{type:String}, min:{type:String}}, hasDate:!1, observers:["editValueChanged(editValue)", 
"valueChanged(value)", "validateAttributes(type)"], _noLabelFloat:function() {
  return "false" === this.floatingLabel || !1 === this.floatingLabel;
}, typeChanged:function() {
  this.type && this.type.match(/^date/) && (this._origType = this.type, this.hasDate || (this.type = "text", this.$.input.setAttribute("type", "text")));
  this.type && this.type.match(/^password/) && (this.autocomplete = "new-password");
}, isNumber:function() {
  return this.type && this.type.match(/^number$/) && !this.isDecimal() ? !0 : !1;
}, isDecimal:function() {
  return this._origType && this._origType.match(/^decimal/) ? !0 : !1;
}, isDate:function() {
  return this.isDateYearMonth() || this._origType && this._origType.match(/^date/) ? !0 : !1;
}, isDateYearMonth:function() {
  return this._origType && this._origType.match(/^dateyearmonth/) ? !0 : !1;
}, isDateTime:function() {
  return this._origType && this._origType.match(/^datetime/) ? !0 : !1;
}, created:function() {
  this._origType = null;
}, ready:function() {
  var a = this;
  Object.keys(this.properties).forEach(function(b) {
    void 0 === a.properties[b] && void 0 === a[b] && a.$.input.hasAttribute(b) && a.$.input.removeAttribute(b);
  });
}, attached:function() {
  this.pickerType = "bootstrap";
  if (null == this.label || "" == this.label) {
    this.label = this.name;
  }
  this.validateAttributes();
  this.decorator = this.$.decorator;
  this.input = this.$.input;
  this.validateAttributes();
  "number" == this.type && (this.preventInvalidInput = !0);
  var a = this.isDateTime();
  this.isDate() && !this.hasDate && (this.datetimePicker = this.getDatePicker(a, {}), this.hasTouch() && 1 != window.isGes && (this.readonly = !0), this._date && this.datetimePickerGotoDate(this._date));
  this.isDate() && this.hasDate && this.async(function() {
    this.alwaysFloatLabel = this.decorator._inputHasContent = !0;
  });
  this.compact && (jQuery(this.decorator).addClass("compact"), jQuery(this.$.input).addClass("compact"), is_chromium && !this.isDate() && jQuery(this.$.input).css("margin-top", "0px"));
}, i18n_de:{previousMonth:"Vorheriger Monat", nextMonth:"Nächster Monat", months:"Januar Februar März April Mai Juni Juli August September Oktober November Dezember".split(" "), weekdays:"Sontag Montag Dienstag Mittwoch Donnerstag Freitag Samstag".split(" "), weekdaysShort:"So Mo Di Mi Do Fr Sa".split(" ")}, i18n_en:{previousMonth:"Previous Month", nextMonth:"Next Month", months:"January February March April May June July August September October November December".split(" "), weekdays:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), 
weekdaysShort:"Sun Mon Tue Wed Thu Fri Sat".split(" "), midnight:"Midnight", noon:"Noon"}, tooltips:{today:"Go to today", clear:"Clear selection", close:"Close the picker", selectMonth:"Select Month", prevMonth:"Previous Month", nextMonth:"Next Month", selectYear:"Select Year", prevYear:"Previous Year", nextYear:"Next Year", selectDecade:"Select Decade", prevDecade:"Previous Decade", nextDecade:"Next Decade", prevCentury:"Previous Century", nextCentury:"Next Century", pickHour:"Pick Hour", incrementHour:"Increment Hour", 
decrementHour:"Decrement Hour", pickMinute:"Pick Minute", incrementMinute:"Increment Minute", decrementMinute:"Decrement Minute", pickSecond:"Pick Second", incrementSecond:"Increment Second", decrementSecond:"Decrement Second", togglePeriod:"Toggle Period", selectTime:"Select Time"}, tooltips_de:{today:"Heute auswählen", clear:"Löschen", close:"Schließen", selectMonth:"Monat auswählen", prevMonth:"vorheriger Monat", nextMonth:"nächster Monat", selectYear:"Jahr auswählen", prevYear:"vorheriges Jahr", 
nextYear:"nächstes Jahr", selectDecade:"Dekade auswählen", prevDecade:"vorherige Dekade", nextDecade:"nächste Dekade", prevCentury:"vorheriges Jahrhundert", nextCentury:"nächstes Jahrhundert", pickHour:"Stunde auswählen", incrementHour:"Stunde +1", decrementHour:"Stunde -1", pickMinute:"Minute auswählen", incrementMinute:"Minute +1", decrementMinute:"Minute -1", pickSecond:"Sekunde auswählen", incrementSecond:"Sekunde +1", decrementSecond:"Sekunde -1", togglePeriod:"Periode umschalten", selectTime:"Zeit auswählen"}, 
isAuthorizedType:function() {
  return -1 != "checkbox color date datetime datetime-local dateyearmonth email file month number password radio range tel text time url week".split(" ").indexOf(this.type);
}, lpad:function(a, b) {
  b = b || 2;
  return a.toString().length < b ? this.lpad("0" + a, b) : a;
}, validateAttributes:function() {
  this.input && ("text" == this.type || this.isAuthorizedType() || (this._origType = this.type, "double" == this.type || "decimal" == this.type ? (this.step = "0.01", this.type = "number") : "integer" == this.type ? (this.step = "1", this.type = "number") : this.type = "text"), this.isDateTime() && this.hasDate ? this.input.setAttribute("type", "datetime-local") : this.isDateYearMonth() && this.hasDate ? this.input.setAttribute("type", "date") : this.input.setAttribute("type", this.type));
}, committedValueChanged:function() {
}, editValueChanged:function() {
  null != this.type && (this.isDate() && !this.hasDate ? this.value = this._i18nToIso(this.editValue) : this.value = this.editValue, this.fire("value-changed", this));
}, valueChanged:function() {
  this.$.decorator && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this.isDate() && (a = this.hasDate ? this._toIso(a) : this._convertDate(a));
  this.editValue = a;
}, getValue:function() {
  return this.isDate() && "string" === typeof this.value && !this._isIsoDate(this.value) ? null : this.isNumber() && null != this.value ? parseInt(this.value) : this.isDecimal() && null != this.value ? ("string" === typeof this.value && 0 <= this.value.indexOf(",") && (this.value = this.value.replace(/,/, ".")), parseFloat(this.value)) : null == this.value && this.convertNullToEmpty ? "" : this.value;
}, getDatePicker:function(a, b) {
  if ("pikaday" == this.pickerType) {
    return a = new Pikaday({field:this.$.input, trigger:this.$.input, onSelect:function(a) {
    }.bind(this), i18n:"de" == simpl4.util.BaseManager.getLanguage() ? this.i18n_de : this.i18n_en, format:simpl4.util.BaseManager.getDateFormat() + (a ? " HH:mm" : ""), showTime:a, showSeconds:!1, use24hour:"de" == simpl4.util.BaseManager.getLanguage() ? !0 : !1, firstDay:1, yearRange:[1900, 2030]});
  }
  if ("bootstrap" == this.pickerType) {
    a = simpl4.util.BaseManager.getDateFormat() + (a ? " HH:mm" : "");
    b = this.isDateYearMonth() ? "years" : "days";
    var c = "MYd", c = this.isDateYearMonth() ? "MY" : this.isDateTime() ? "MYdhm" : "MYd", d = this["tooltips_" + simpl4.util.BaseManager.getLanguage()], e = simpl4.util.BaseManager.getLanguage();
    a = $(this.$.input).datetimepicker({locale:e, viewMode:b, showComponents:c, ignoreReadonly:!0, tooltips:d, focusOnShow:!1, format:a, showTodayButton:!0, showClear:!1, showClose:!0});
    var f = this;
    a.on("dp.change", function(a) {
      f.editValue = $(f.$.input).val();
    });
    return a;
  }
}, datetimePickerGotoDate:function(a) {
  "pikaday" == this.pickerType && this.datetimePicker.gotoDate(a);
}, _convertDate:function(a) {
  if (!a) {
    return this.datetimePicker ? this.datetimePickerGotoDate(new Date) : this._date = new Date, null;
  }
  a = this._toIso(a);
  this._date = this._isoToDate(a);
  this.datetimePicker && (this.datetimePickerGotoDate(this._date), this._date = null);
  return this._isoToI18n(a);
}, _toIso:function(a) {
  var b = a;
  if ("number" === typeof a || "string" === typeof a && !a.match(/[-]/)) {
    b = this.isDateTime(), b = moment(parseInt(a)).format(b ? "YYYY-MM-DDTHH:mm" : "YYYY-MM-DD");
  }
  return b;
}, _isoToI18n:function(a) {
  a = moment(a);
  var b = this.isDateTime(), b = simpl4.util.BaseManager.getDateFormat() + (b ? " HH:mm" : "");
  return a.format(b);
}, _isoToDate:function(a) {
  return moment(a).toDate();
}, _i18nToIso:function(a) {
  this.isDateTime() ? (a = moment(a, simpl4.util.BaseManager.getDateFormat() + " HH:mm"), a = a.year() + "-" + this.lpad(a.month() + 1) + "-" + this.lpad(a.date()) + "T" + this.lpad(a.hour()) + ":" + this.lpad(a.minute())) : (a = moment(a, simpl4.util.BaseManager.getDateFormat()), a = a.year() + "-" + this.lpad(a.month() + 1) + "-" + this.lpad(a.date()));
  return a;
}, _isIsoDate:function(a) {
  return this.isDateTime() ? a.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})/) : a.match(/(\d{4})-(\d{2})-(\d{2})/);
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  null != this.decorator && (this.invalid = a);
}, hasTouch:function() {
  return "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch;
}, setCustomValidity:function(a) {
}});
Polymer({is:"multiline-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, FieldBehavior], observers:["editValueChanged(editValue)"], properties:{}, editValueChanged:function() {
  this.value = this.editValue;
  this.fire("value-changed", this);
}, valueChanged:function() {
  this.$.decorator && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this.editValue = a;
}});
Polymer({is:"upload-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], listeners:{"upload-complete":"valueChanged"}, properties:{required:{value:"", type:String}, value:{type:Object}, maxsize:{value:0}, multi:{type:Boolean, value:!0}}, ready:function() {
  this.isInvalid = !1;
}, valueChanged:function(a) {
  var b = this.form._getField("filename");
  null != b && b.setValue(a.detail.target.file.name);
  this.multi ? this.value[a.detail.target.file.name] = a.detail.target.result : (this.value = {}, this.value[a.detail.currentTarget.file.name] = a.detail.currentTarget.result);
  this.fire("value-changed", this);
  this.checkConstraints();
}, getValue:function() {
  return this.value;
}, setValue:function(a) {
  this.value = {};
  this.disabled = !1;
  a = this.form._getField("filename");
  null == a || this.isEmpty(a.getValue()) || (this.disabled = !0);
  this.$.input.clear();
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || 0 < Object.keys(this.value).length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}});
Polymer({is:"custom-field", behaviors:[FieldBehavior], properties:{elementname:{type:String}, url:{observer:"urlChanged", type:String}}, observers:[], urlChanged:function() {
  null != this.url && this.importHref(this.url + "?time=" + (new Date).getTime(), this.onResponse.bind(this));
}, onResponse:function(a) {
  a = a.target.import.body;
  for (var b = this.$.insertPoint; b.firstChild;) {
    Polymer.dom(b).removeChild(b.firstChild);
  }
  a && a.firstElementChild && (1 == $(a).children().length ? Polymer.dom(b).appendChild(a.firstElementChild) : Polymer.dom(b).appendChild(a));
  this.field = this.querySelector(this.elementname);
  this.field.setValue(this.value);
  console.log("Custom(" + this.name + ").setValue:", this.value);
  this.field.label = this.label;
}, setValue:function(a) {
  this.value = a;
  null != this.field && (console.log("Custom(" + this.name + ").setValue:", this.value), this.field.setValue(a));
}, getValue:function() {
  if (null == this.field) {
    return console.log("custom-field.getValue:field is null"), null;
  }
  this.value = this.field.getValue();
  console.log("Custom(" + this.name + ").getValue:", this.value);
  return this.value;
}, valueChanged:function(a) {
  1 == this.isDomReady && this.withoutCheck && (this.withoutCheck = !1);
}});
Polymer({is:"checkbox-field", behaviors:[FieldBehavior], properties:{compact:{value:!1, type:Boolean}}, observers:["valueChanged(value)"], attached:function() {
  this.compact && jQuery(this).addClass("compact");
}, setValue:function(a) {
  this.value = a;
}, getValue:function() {
  return this.value;
}, valueChanged:function(a) {
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : (this.checkConstraints(), this.fire("value-changed", this)));
}});
Polymer({is:"toggle-field"});
Polymer({is:"select-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], _listeners:{"value-changed":"ignore"}, properties:{multiple:{value:!1}, compact:{value:!1}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}, required:{value:"false", type:String}, delimiter:{type:String, value:","}, diacritics:{type:Boolean, value:!0}, createFilter:{type:String, value:null}, highlight:{type:Boolean, 
value:!0}, persist:{type:Boolean, value:!0}, openOnFocus:{type:Boolean, value:!0}, maxOptions:{type:Number, value:1000}, maxItems:{type:Number, value:1}, hideSelected:{type:Boolean, value:!0}, closeAfterSelect:{type:Boolean, value:!1}, allowEmptyOption:{type:Boolean, value:!1}, scrollDuration:{type:Number, value:60}, loadThrottle:{type:Number, value:300}, loadingClass:{type:String, value:"loading"}, preload:{type:String, value:!1}, dropdownParent:{type:String, value:"body"}, addPrecedence:{type:Boolean, 
value:!1}, selectOnTab:{type:Boolean, value:!1}, options:{type:Array, value:[]}, optgroups:{type:Array, value:[]}, dataAttr:{type:String, value:"data-data"}, valueField:{type:String, value:"value"}, optgroupValueField:{type:String, value:"value"}, labelField:{type:String, value:"text"}, optgroupLabelField:{type:String, value:"label"}, optgroupField:{type:String, value:"optgroup"}, sortField:{type:String, value:"$order"}, searchField:{type:Array, value:["text"]}, searchConjunction:{type:String, value:"and"}, 
lockOptgroupOrder:{type:Boolean, value:!1}, copyClassesToDropdown:{type:Boolean, value:!0}, ajaxOptions:{type:String, value:null}, ajaxOptionsRoot:{type:String, value:null}, ajaxOptionsDataType:{type:String, value:null}, mutationObserver:{value:function() {
  var a = new MutationObserver(this.mutated.bind(this));
  a.observe(this, {attributes:!0, attributeOldValue:!0, attributeFilter:["disabled"]});
  return a;
}}}, listeners:{"value-changed":"_formValueChanged"}, observers:["valueChanged(value)", "compactChanged(compact)", "jsonItemsChanged(jsonItems)"], mutated:function(a) {
  var b = this;
  a.forEach(function(a) {
    a.target.getAttribute("name");
    var c = a.target.getAttribute("disabled");
    if (a.oldValue != c) {
      a = b.querySelector(".focused-line");
      var e = b.querySelector('input[type="text"]');
      null != a && ("r" == c ? (a.style.display = "none", e && e.setAttribute("tabindex", "-1")) : (a.style.display = "block", e && e.removeAttribute("tabindex")));
    }
  });
}, ready:function() {
  this.isInvalid = !1;
}, compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, setItems:function(a) {
  this.items = a;
}, itemsChanged:function() {
  if (null != this.form || _.isEmpty(this.parentName)) {
    for (var a = this.$.select; a.firstChild;) {
      a.removeChild(a.firstChild);
    }
    if (null != this.items) {
      this.selectize && this.selectize.clearOptions();
      if (_.isEmpty(this.parentName) || !_.isEmpty(this.parentName) && !_.isEmpty(this.parentValue)) {
        if (this.items.length) {
          for (var b = 0; b < this.items.length; b++) {
            var c = this.items[b], d = _.isEmpty(c.parent) ? null : c.parent.split(",");
            if (_.isEmpty(this.parentValue) || null == d || !(0 > _.indexOf(d, this.parentValue))) {
              if (this.selectize) {
                this.selectize.addOption({value:c.value, text:c.label});
              } else {
                var d = document.createElement("option"), e = document.createTextNode(c.label);
                d.value = c.value;
                Polymer.dom(d).appendChild(e);
                Polymer.dom(a).appendChild(d);
              }
            }
          }
        } else {
          var f = this.items;
          Object.keys(f).forEach(function(b) {
            b = f[b];
            var c = _.isEmpty(b.parent) ? null : b.parent.split(",");
            if (_.isEmpty(this.parentValue) || null == c || !(0 > _.indexOf(c, this.parentValue))) {
              if (this.selectize) {
                this.selectize.addOption({value:b.value, text:b.label});
              } else {
                var c = document.createElement("option"), d = document.createTextNode(b.label);
                c.value = b.value;
                Polymer.dom(c).appendChild(d);
                Polymer.dom(a).appendChild(c);
              }
            }
          });
        }
      }
      this.selectize && this.selectize.refreshOptions(!1);
    }
  }
}, valueChanged:function(a) {
  !0 !== this._invalueSetting && (this.async(function() {
    this.selectize && this.selectize.getValue() != this.value && (this._invalueSetting = !0, this.selectize.setValue(this.value), this._invalueSetting = !1);
  }, 300), 1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints()));
}, setValue:function(a) {
  this.value = a;
  this.selectize ? this.selectize.setValue(a) : this.__value = a;
}, getValue:function() {
  return !0 !== this.multiple && this.value && Array.isArray(this.value) && 0 < this.value.length ? this.value[0] : this.value;
}, onFocus:function(a) {
}, onCreate:function(a) {
  return this.combobox ? {value:a, text:a} : !1;
}, onChange:function(a) {
  "null" == a && (a = null);
  this.isEmpty(this.value) && this.isEmpty(a) || (this.value = a, this.fire("value-changed", this));
}, createSelectize:function() {
  !0 === this.multiple && (this.maxItems = 1000);
  var a = {delimiter:this.delimiter, diacritics:this.diacritics, create:this.onCreate.bind(this), createOnBlur:this.onCreate.bind(this), createFilter:this.createFilter, highlight:this.highlight, persist:this.persist, openOnFocus:this.openOnFocus, maxOptions:this.maxOptions, maxItems:this.maxItems, hideSelected:this.hideSelected, closeAfterSelect:this.closeAfterSelect, alglowEmptyOption:this.allowEmptyOption, scrollDuration:this.scrollDuration, loadThrottle:this.loadThrottle, loadingClass:this.loadingClass, 
  preload:this.preload, dropdownParent:this.dropdownParent, addPrecedence:this.addPrecedence, selectOnTab:this.selectOnTab, options:this.options, optgroups:this.optgroups, dataAttr:this.dataAttr, valueField:this.valueField, optgroupValueField:this.optgroupValueField, labelField:this.labelField, optgroupLabelField:this.optgroupLabelField, optgroupField:this.optgroupField, sortField:this.sortField, searchField:this.searchField, searchConjunction:this.searchConjunction, lockOptgroupOrder:this.lockOptgroupOrder, 
  copyClassesToDropdown:this.copyClassesToDropdown, onChange:this.onChange.bind(this), onFocus:this.onFocus.bind(this)};
  this.selectize = $(this.$.select).selectize(a)[0].selectize;
  this.__value && (this.selectize.setValue(this.__value), this.__value = null);
}, ignore:function(a) {
  "FORM-ELEMENT-RENDERER" != this.parentNode.tagName && (a.preventDefault(), a.stopPropagation());
}, attached:function() {
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  this.alwaysFloatLabel = !0;
  this.placeholder = " ";
  this.isDomReady = !0;
  this.compact && this.compactChanged();
  this.createSelectize();
  this.selectizeControl = this.$.decorator.querySelector(".selectize-control");
}, isEmpty:function(a) {
  return Array.isArray(a) ? 0 == a.length : null == a || "" == a ? !0 : !1;
}, checkConstraints:function() {
  var a = this.getAttribute("data-constraints");
  null != a && 0 < a.length ? this._checkConstraints(a) : (this.setInvalid(!1), this.isRequired() && this.isEmpty(this.value) && (this.setInvalid(!0), this.setErrorMessage(tr("This field is required"))));
}, _checkConstraints:function(a) {
  var b = [this];
  regula.bind({elements:b});
  this.async(function() {
    var a = regula.validate({elements:b});
    this.setInvalid(0 < a.length);
    0 < a.length ? this.setErrorMessage(a[0].message) : this.setErrorMessage(null);
  });
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, _formValueChanged:function(a) {
  for (var b = a.detail.name, c = this.getFieldsWithParent(), d = 0; d < c.length; d++) {
    var e = c[d];
    e.parentName == b && (e.parentValue = a.detail.getValue(), e.itemsChanged(), e.setValue(e.defaultvalue));
  }
}, getFieldsWithParent:function() {
  if (this.fieldsWithParent) {
    return this.fieldsWithParent;
  }
  var a = [];
  if (null == this.form) {
    return [];
  }
  this.form.fields.forEach(function(b) {
    _.isEmpty(b.parentName) || a.push(b);
  }, this);
  return this.fieldsWithParent = a;
}, isParentDest:function(a) {
  for (var b = this.getFieldsWithParent(), c = 0; c < b.length; c++) {
    if (b[c].parentName == a) {
      return !0;
    }
  }
  return !1;
}, setForm:function(a) {
  this.form = a;
  !this.isParentDest(this.name) && _.isEmpty(this.parentName) || this.itemsChanged();
  null == this.getValue() && this.setValue(this.defaultvalue);
}, isRequired:function() {
  if (!this.form) {
    return !1;
  }
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"tree-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], properties:{selectedItem:{observer:"selectedItemChanged", notify:!0, type:Object}, multiple:{value:!1}, compact:{value:!1}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}, required:{value:"false", type:String}, closeAfterSelect:{type:Boolean, value:!1}}, observers:["valueChanged(value)", "compactChanged(compact)", "jsonItemsChanged(jsonItems)"], 
ready:function() {
  this.isInvalid = !1;
  this.options = {autoOpen:!0};
}, compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, itemsChanged:function() {
  console.log("tree-field(" + this.name + ").itemsChanged:", this.items);
}, valueChanged:function(a) {
  console.log("tree-field(" + this.name + ",wo:" + this.withoutCheck + ").valueChanged:", this.value);
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  console.log("tree-field(" + this.name + ").setValue:", a);
  var b = a;
  if (_.isString(a)) {
    try {
      b = JSON5.parse(a).id;
    } catch (c) {
    }
  }
  _.isEmpty(b) ? (this.jqtree.tree("selectNode", null), this.selectedItem = null, this.$.dropdownId.querySelector("#input").value = "", this.setInvalid(!1)) : (a = this.jqtree.tree("getNodeById", b), this.jqtree.tree("selectNode", a), this.jqtree.tree("scrollToNode", a), this.$.dropdownId.querySelector("#input").value = a.name);
}, getValue:function() {
  return JSON.stringify(this.value);
}, selectedItemChanged:function(a) {
  console.log("tree-field(" + this.name + ").selectedItemChanged:", this.value + "/val:" + a);
  this.value = a;
  this.checkConstraints();
  this.fire("value-changed", this);
}, attached:function() {
  this.async(function() {
    this._attached();
  });
}, _attached:function() {
  this.alwaysFloatLabel = !0;
  this.placeholder = " ";
  console.log("tree-field(" + this.name + ").attached");
  this.isDomReady = !0;
  this.compact && this.compactChanged();
}, isEmpty:function(a) {
  return Array.isArray(a) ? 0 == a.length : null == a || "" == a ? !0 : !1;
}, checkConstraints:function() {
  console.log("tree-field(" + this.name + ").checkConstraints");
  this.setInvalid(!1);
  this.isRequired() && this.isEmpty(this.value) && (console.log("tree-field(" + this.name + ").checkConstraints2"), this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setErrorMessage:function(a) {
  this.errorMessage = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"dropdown-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, StyleScopeBehavior, FieldBehavior], properties:{multiple:{value:!1}, compact:{value:!1}, _dropdown:{type:Object}, jsonItems:{type:String}, items:{observer:"itemsChanged", type:Object}}, observers:["valueChanged(value)", "compactChanged(compact)", "jsonItemsChanged(jsonItems)"], compactChanged:function() {
  !1 !== this.compact && this.async(function() {
    jQuery(this.decorator).addClass("compact");
    jQuery(this.$.label).addClass("compact");
    jQuery(this).addClass("compact");
    var a = this.$.decorator.querySelector(".floated-label-placeholder");
    jQuery(a).addClass("compact");
  }, 20);
}, jsonItemsChanged:function(a) {
  this.items = JSON.parse(this.jsonItems);
}, itemsChanged:function() {
  for (var a = this.$.select; a.firstChild;) {
    a.removeChild(a.firstChild);
  }
  if (null != this.items) {
    for (var b = 0; b < this.items.length; b++) {
      var c = this.items[b], d = document.createElement("option"), e = document.createTextNode(c.label);
      d.value = c.value;
      Polymer.dom(d).appendChild(e);
      Polymer.dom(a).appendChild(d);
    }
  }
}, valueChanged:function(a) {
  1 == this.isDomReady && (this.withoutCheck ? this.withoutCheck = !1 : this.checkConstraints());
}, setValue:function(a) {
  this._dropdown.data("options", this._options);
  this.value = a;
  this.async(function() {
    $(this._dropdown).dropdown("select", this.value);
  }, 10);
}, getValue:function() {
  return this.value;
}, onSelected:function(a) {
  void 0 != a && (this.value = a, this.fire("value-changed", this));
}, onCallback:function(a) {
  this._dropdown = a;
  this.setStyleScope(this._dropdown.get(0), "style-scope", this.tagName.toLowerCase());
}, attached:function() {
  this.isDomReady = !0;
  this.compact && this.compactChanged();
  this._options = {onSelected:this.onSelected.bind(this), callback:this.onCallback.bind(this), optionClass:this.name};
  this.async(function() {
    $(this.$.select).dropdown(this._options);
  });
}});
Polymer({is:"gridinput-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, DialogBehavior, FormBehavior, FieldBehavior], properties:{required:{value:"", type:String}, columns:{value:null, observer:"columnsChanged", type:Array}, lines:{value:function() {
  return [];
}, type:Array}, entity:{type:String}, search:{value:!1, type:Boolean}, arrows:{value:!0, type:Boolean}, height:{value:null, type:String}}, listeners:{"value-changed":"_valueChanged", "internal-xaction":"_internalXAction"}, observers:["entityChanged(entity,namespace)"], ready:function() {
  this.isInvalid = !1;
  this.push("lines", {});
}, clearLines:function() {
  this.splice("lines", 0, this.lines.length);
  this.push("lines", {});
  this.setDefaultValue(0);
}, _valueChanged:function(a) {
  for (var b = a.target.parentNode.dataset.lid, c = {}, d = {}, e = 0; e < this.columns.length; e++) {
    a = this.querySelector("#id" + b + "_" + e);
    var f = this.columns[e];
    c[f.colname] = a.getValue();
    d[f.colname] = a;
  }
  Object.keys(this.exprMap).forEach(function(a) {
    var b = this.form._maskedEval(this.exprMap[a], c, "");
    d[a].setValue(b);
  }.bind(this));
}, getValue:function() {
  for (var a = [], b = 0; b < this.lines.length; b++) {
    a.push(this.getLineValues(b));
  }
  return a;
}, setValue:function(a) {
  a ? (this.clearLines(), this.async(function() {
    for (var b = 1; b < a.length; b++) {
      this.push("lines", {});
    }
    this.async(function() {
      for (var b = 0; b < a.length; b++) {
        this.setLineValues(a[b], b);
      }
    }, 100);
  }, 100)) : (this.clearLines(), this.async(function() {
    this.setLineValues({}, 0);
  }, 100));
}, getContainerStyle:function() {
  return "border:0px solid #f5f5f5;padding:2px;min-height:" + this.height + "px";
}, getElementId:function(a, b) {
  return "id" + a + "_" + b;
}, entityChanged:function() {
  this.async(function() {
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHeader:function(a) {
  this.pack = this.getPack() || "data";
  return tr(this.pack + "." + this.getSimpleEntityName(a));
}, _search:function(a) {
  this._lid = parseInt(a.target.dataset.lid);
  this._entityName = this.entityName;
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.searchDialog);
  }, 250);
}, rowsSelected:function(a) {
  a.detail.doubleTap && (a = a.detail.rows[0], this.closeDialog(this.$.searchDialog), console.log("data:", a), this.setLineValues(a, this._lid));
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.searchDialog);
  }, 50);
}, getHelp:function() {
  return tr("crud2.select_with");
}, columnsChanged:function() {
  var a = {};
  this.columns.each(function(b) {
    b.regulaConstraints = this._constructRegulaConstraints(b.constraints, b.errormsg);
    b.label = b.display;
    "Enumselect" != b.id && (b.id = "Input");
    b.xf_type = b.type;
    b.xf_id = b.colname;
    b.parameter && b.parameter.startsWith("expr:") && (a[b.colname] = b.parameter.substring(5));
  }.bind(this));
  this.exprMap = a;
}, addLine:function(a) {
  var b = parseInt(a.target.dataset.lid);
  this.push("lines", {});
  this.async(function() {
    for (var a = this.lines.length - 1; a - 1 > b; a--) {
      this._upLine(a);
    }
    this.setDefaultValue(this.lines.length - 1);
  }, 20);
}, removeLine:function(a) {
  1 < this.lines.length && this.splice("lines", a.target.dataset.lid, 1);
}, upLine:function(a) {
  a = parseInt(a.target.dataset.lid);
  0 != a && 1 != this.lines.length && this._upLine(a);
}, _upLine:function(a) {
  var b = this.getLineValues(a - 1);
  this.setLineValues(this.getLineValues(a), a - 1);
  this.setLineValues(b, a);
}, downLine:function(a) {
  a = parseInt(a.target.dataset.lid);
  if (a != this.lines.length - 1 && 1 != this.lines.length) {
    var b = this.getLineValues(a + 1);
    this.setLineValues(this.getLineValues(a), a + 1);
    this.setLineValues(b, a);
  }
}, setLineValues:function(a, b) {
  for (var c = 0; c < this.columns.length; c++) {
    var d = this.querySelector("#id" + b + "_" + c), e = this.columns[c], f = a[e.colname];
    d.getGridField().withoutCheck = !0;
    null == f && e.xf_default && (f = e.xf_default);
    d.setValue(f);
  }
}, getLineValues:function(a) {
  for (var b = {}, c = 0; c < this.columns.length; c++) {
    var d = this.querySelector("#id" + a + "_" + c).getValue();
    b[this.columns[c].colname] = d;
  }
  return b;
}, setDefaultValue:function(a) {
  for (var b = 0; b < this.columns.length; b++) {
    var c = this.querySelector("#id" + a + "_" + b), d = this.columns[b], e = null;
    c.getGridField().withoutCheck = !0;
    null == e && d.xf_default && (e = d.xf_default);
    c.setValue(e);
  }
}, checkConstraints:function() {
  this.setInvalid(!1);
  for (var a = 0; a < this.lines.length; a++) {
    this.validateLine(a);
  }
}, getColFlex:function(a) {
  return null != a && 0 < parseInt(a) ? "" : "flex";
}, getColStyle:function(a) {
  return null != a && 0 < parseInt(a) ? "width:" + a + "px;min-width:" + a + "px;" : "";
}, validateLine:function(a) {
  for (var b = 0; b < this.columns.length; b++) {
    var c = this.querySelector("#id" + a + "_" + b).getGridField();
    c.getAttribute("data-constraints") && (regula.bind({elements:[c]}), regula.validate({elements:[c]}));
  }
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"tableselect-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{multiSelect:{value:!1, type:Boolean}, required:{value:"", type:String}, items:{observer:"itemsChanged", type:Object}, selection:{type:Object, notify:!0}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["selectionChanged(selection)"], getHeight:function() {
  return "height:" + this.height + "px";
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.selection && 0 < this.selection.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.$.dataTable.unselectAll();
  this.value = null;
}, getValue:function() {
  return this.multiSelect ? this.value : Array.isArray(this.value) && 0 < this.value.length ? this.value[0] : null;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, selectionChanged:function() {
  this.value = this.selection;
  this.checkConstraints();
  this.fire("value-changed", this);
}, heightChanged:function() {
  this.dataTablesOptions = {paging:!0, dom:"rt", scrollCollapse:!1, scrollY:this.height - 40 + "px"};
  this.setInvalid(!1);
}, itemsChanged:function(a) {
}, setItems:function(a) {
  this.items = a;
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"linkedlist-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{required:{value:"", type:String}, entity:{value:null, type:String}, namespace:{value:null, type:String}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["entityChanged(entity,namespace)"], onChanged:function(a) {
  console.log("onChanged:", a);
  this.value = a.detail.data;
}, entityChanged:function() {
  console.log("Field.linkedlist-field.entityChanged:", this.entity + "/" + this.namespace);
  this.setInvalid(!1);
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.value && 0 < this.value.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.value = a;
  this.querySelector("#miniId").setData(a);
}, getValue:function() {
  return this.value;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, heightChanged:function() {
  this.setInvalid(!1);
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"embeddedlist-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{required:{value:"", type:String}, entity:{value:null, type:String}, namespace:{value:null, type:String}, meta:{type:Object}, height:{value:null, observer:"heightChanged", type:String}}, observers:["entityChanged(entity,namespace)"], onChanged:function(a) {
  console.log("onChanged:", a);
  this.value = a.detail.data;
}, entityChanged:function() {
  console.log("Field.embeddedlist-field.entityChanged:", this.entity + "/" + this.namespace);
  this.setInvalid(!1);
}, checkConstraints:function() {
  this.setInvalid(!1);
  !this.isRequired() || this.value && 0 < this.value.length || (this.setInvalid(!0), this.setErrorMessage(tr("This field is required")));
}, setValue:function(a) {
  this.value = a;
  console.log("setValue(" + this.entity + "," + this.name + "):", this.value);
  this.querySelector("#miniId").setData(a);
}, getValue:function() {
  console.log("getValue(" + this.entity + "," + this.name + "):", this.value);
  return this.value;
}, setErrorMessage:function(a) {
  this.error = a;
}, setInvalid:function(a) {
  this.isInvalid = a;
}, heightChanged:function() {
  this.setInvalid(!1);
}, isRequired:function() {
  var a = this.form._getData();
  return this.form._maskedEval(this.required, a, !1);
}});
Polymer({is:"linkedobj-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, DialogBehavior, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, isMetaNull:function() {
  return null == this.meta;
}, isFilter:function(a) {
  return null != this.filter;
}, ready:function() {
  console.log("Field.linkedobj.ready:", this.entity + "/" + this.namespace);
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
}, actionCallback:function() {
  this._entityName = this.entityName;
  this.$.filterId.doSearch();
  this.async(function() {
    this.openDialog(this.$.linkedObjDialog);
  }, 250);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, rowsSelected:function(a) {
  a.detail.doubleTap && (this.data = a.detail.rows[0], this.closeDialog(this.$.linkedObjDialog), a = this._maskedEval(this.props.title_expression, this.data), this.id = this.data.id || this.data._id, this.editValue = a || this.id || ".");
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.linkedObjDialog);
  }, 50);
}, editValueChanged:function() {
  this.editValue ? "odata" == this.getPack() ? this.value = this.data : this.value = this.editValue + "/" + this.id : this.value = null;
  console.log("editValueChanged(" + this.getPack() + "," + this.entityName + "," + this.name + "):", this.value);
  this.fire("value-changed", this);
}, getValue:function(a) {
  console.log("getValue(" + this.entityName + "," + this.name + "):", this.value);
  return this.value;
}, setValue:function(a) {
  console.log("setValue(" + this.entityName + "," + this.name + "):", a);
  null != a ? _.isString(a) ? (a = a.split("/"), this.editValue = a[0], this.id = a[1]) : (this.data = a, this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || this.data.id | NaN) : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  this.async(function() {
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHelp:function() {
  return tr("crud2.select_with");
}, getHeader:function(a) {
  this.pack = this.getPack() || "data";
  return tr(this.pack + "." + this.getSimpleEntityName(a));
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("LinkedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"embeddedobj-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, DialogBehavior, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, ready:function() {
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
  this.buttonsave = {icon:"undo", position:"form", text:tr("button.take_over"), disabled:!1};
  this.buttoncancel = {icon:"cancel", position:"form", text:tr("button.cancel"), disabled:!1};
}, setFormSpec:function(a, b) {
  a = simpl4FormManager.getCrudForm(b, a);
  console.log("setFormSpec(" + this.name + "):", a);
  "string" === typeof a ? this.formName = a : this.formSpec = [a];
}, actionCallback:function() {
  this._pack = this.getPack();
  this.$.formid.setData(this.data);
  this.async(function() {
    this.openDialog(this.$.embeddedObjDialog);
  }, 50);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, takeOverAction:function(a) {
  this.data = this.$.formid.getData();
  this.closeDialog(this.$.embeddedObjDialog);
  this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || ".";
}, cancelAction:function() {
  this.async(function() {
    this.closeDialog(this.$.embeddedObjDialog);
  }, 50);
}, editValueChanged:function() {
  this.value = this.editValue ? this.data : null;
  console.log("editValueChanged(" + this.name + "):", this.value);
  this.fire("value-changed", this);
}, setValue:function(a) {
  console.log("setValue(" + this.name + "):", a);
  null != a ? (this.data = a, this.editValue = this._maskedEval(this.props.title_expression, this.data) || this.data._id || ".") : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  console.log("entityChanged(" + this.name + "):", this.entity);
  this.async(function() {
    null != this.entity && this.setFormSpec(this.namespace, this.entity);
  }, 10);
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("EmbeddedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"embeddedobj-inline-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["entityChanged(entity,namespace)"], setFormSpec:function(a, b) {
  a = simpl4FormManager.getCrudForm(b, a);
  console.log("setFormSpec(" + this.name + "):", a);
  "string" === typeof a ? this.formName = a : this.formSpec = [a];
}, checkConstraints:function() {
  var a = this.$.formid.validate();
  this.setInvalid(!a);
}, setInvalid:function(a) {
  this.isInvalid = a;
}, getValue:function(a) {
  a = null;
  try {
    a = this.$.formid.getData();
  } catch (b) {
    return null;
  }
  console.log("getValue(" + this.name + "):", a);
  return a;
}, setValue:function(a) {
  console.log("setValue(" + this.name + "):", a);
  null != a ? this.$.formid.setData(a) : this.$.formid.setData({});
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  console.log("entityChanged(" + this.name + "):", this.entity);
  this.async(function() {
    null != this.entity && (this.setFormSpec(this.namespace, this.entity), this._pack = this.getPack());
  }, 10);
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("EmbeddedObjFieldField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"db-selector-field", behaviors:[Polymer.IronFormElementBehavior, Polymer.PaperInputBehavior, Polymer.IronControlState, TranslationsBehavior, FieldBehavior], properties:{namespace:{type:String}, entity:{type:String}}, observers:["editValueChanged(editValue)", "entityChanged(entity,namespace)"], id:null, isMetaNull:function() {
  return null == this.meta;
}, isFilter:function(a) {
  return null != this.filter;
}, ready:function() {
  this.props = simpl4.util.EntityManager.getPropertiesForEntity(this.entity, {namespace:this.namespace});
}, actionCallback:function() {
  this.async(function() {
    this.$.selectorDialog.open();
  }, 50);
}, clearCallback:function() {
  this.id = this.editValue = null;
}, selectAction:function(a) {
  a = a.detail.data;
  this.$.selectorDialog.close();
  this.assignValues(a);
}, assignValues:function(a) {
  for (var b = JSON.parse(this.fieldlist).items, c = 0; c < b.length; c++) {
    var d = b[c], e = d.path + "." + d.id, e = a[e];
    null == e && (e = d.id, e = a[e]);
    void 0 == e && (e = null);
    d = d.form_fieldname ? d.form_fieldname : d.db_fieldname;
    try {
      var f = this.form._getField(d);
      null == f ? console.error("db-selector-field.assignValue:field:" + d + " not found") : f.setValue(e);
    } catch (g) {
      console.error("db-selector-field.Cannot set value:" + g + "/" + g.stack);
    }
  }
}, getFieldDesc:function(a, b) {
  var c = this.fieldmap[a];
  null == c && (this.getSelectableFields(a), c = this.fieldmap[a]);
  for (a = 0; a < c.length; a++) {
    var d = c[a];
    if (!d.hidden && d.id == b) {
      return d;
    }
  }
  return null;
}, getSelectableFields:function(a) {
  var b = this.fieldmap[a];
  if (void 0 === b) {
    try {
      var c = simpl4.util.EntityManager, d = c.getEntityViewFields(a, this.namespace, "report", !1), b = c.buildColModel(d, this.namespace, a, "search");
      this.fieldmap[a] = b;
    } catch (e) {
      console.error("db-selector-field.getSelectableFields:" + e.stack);
      return;
    }
  }
  return b;
}, fieldlistChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
  this.fieldmap = {};
  for (var a = [], b = [], c = [], d = JSON.parse(this.fieldlist).items, e = 0; e < d.length; e++) {
    var f = d[e];
    if (!0 === f.display) {
      var g = this.getFieldDesc(f.module, f.id);
      if (null == g) {
        return console.error('db-selector-field.fieldlistChanged:field("' + f.id + '") not found in "' + f.module + '"'), null;
      }
      var h = g.datatype;
      h && h.match("^array") || (g = simpl4.util.Merge.deepmerge({}, g), g.fqn = f.path + "." + f.id, g.label = tr("data." + simpl4.util.Inflector.getEntityName(f.module)) + "/" + tr("data." + f.module + "." + f.id), g.title = g.label, b.push(g.fqn), c.push(f.mapping), g.id = g.fqn, g.name = g.fqn, a.push(g));
    }
  }
  this.meta = a;
}, cancelAction:function() {
  this.async(function() {
    this.$.selectorDialog.close();
  }, 50);
}, editValueChanged:function() {
  this.value = this.editValue ? this.editValue + "/" + this.id : null;
  this.fire("value-changed", this);
}, setValue:function(a) {
  null != a ? (a = a.split("/"), this.editValue = a[0], this.id = a[1]) : this.editValue = null;
}, namespaceChanged:function() {
  simpl4.util.MessageManager.installMessages(this.namespace);
}, entityChanged:function() {
  this.async(function() {
    console.log("Field(" + this.name + "):entityChanged:" + this.getPack() + "/" + this.getSimpleEntityName(this.entity) + "/" + this.namespace);
    if (null != this.entity) {
      var a = this.getPack();
      this.entityName = a ? a + ":" + this.getSimpleEntityName(this.entity) : this.entity;
    }
  }, 10);
}, getHeader:function(a) {
  var b = this.getPack() || "data";
  return tr(b + "." + this.getSimpleEntityName(a));
}, _maskedEval:function(a, b, c) {
  try {
    return (new Function("with(this) { return " + a + "}")).call(b);
  } catch (d) {
    console.log("DbSelectorField._maskedEval:" + a), console.error("error:" + d);
  }
  return c;
}});
Polymer({is:"xaction-button", behaviors:[Polymer.PaperButtonBehavior], properties:{xaction:{type:String}, xid:{type:String}}});
Polymer({is:"simpl-group"});
Polymer({is:"simpl-row"});
FormElementSelectorBehavior = {isTabView:function(a) {
  return "Tabview" == a;
}, isEnumSelect:function(a) {
  return "Enumselect" == a;
}, isTreeSelect:function(a) {
  return "Treeselect" == a;
}, isUpload:function(a) {
  return "Upload" == a;
}, isModuleSelector:function(a) {
  return "Moduleselector" == a;
}, isAlert:function(a) {
  return "Alert" == a;
}, isCustom:function(a) {
  return "Custom" == a;
}, isActionButton:function(a) {
  return "ActionButton" == a;
}, isTableSelect:function(a) {
  return "Tableselect" == a;
}, isEmbeddedList:function(a) {
  return "EmbeddedList" == a;
}, isLinkedList:function(a) {
  return "LinkedList" == a;
}, isEmbeddedObj:function(a) {
  return "EmbeddedObj" == a.id && (!a.xf_inline || !1 === a.xf_inline);
}, isEmbeddedObjInline:function(a) {
  return "EmbeddedObj" == a.id && a.xf_inline;
}, isGridInput:function(a) {
  return "Gridinput" == a;
}, isTextArea:function(a) {
  return "Textarea" == a;
}, isLinkedObj:function(a) {
  return "LinkedObj" == a;
}, isGroup:function(a) {
  return "Group" == a;
}, isRow:function(a) {
  return "Row" == a;
}, isPage:function(a) {
  return "Page" == a;
}, isForm:function(a) {
  return "Form" == a;
}, isField:function(a) {
  return "Input" == a || "Tableselect" == a || "Gridinput" == a || "EmbeddedList" == a || "LinkedList" == a || "Enumselect" == a || "Treeselect" == a || "Upload" == a || "Custom" == a || "Textarea" == a || "LinkedObj" == a || "EmbeddedObj" == a || "Moduleselector" == a || "Alert" == a || "break" == a;
}, isInputAndBoolean:function(a, b) {
  return "Input" == a && "boolean" == b;
}, isInputAndNotBoolean:function(a, b) {
  return "Input" == a && "boolean" != b;
}, tabTitle:function(a) {
  return a;
}};
Polymer({is:"grid-element-renderer", properties:{item:{observer:"itemChanged", type:Object}}, behaviors:[FormElementSelectorBehavior], setValue:function(a) {
  this._getGridField().setValue(a);
}, getGridField:function() {
  return this._getGridField();
}, getValue:function() {
  return this._getGridField().getValue();
}, itemChanged:function() {
}, _getGridField:function() {
  return this.field ? this.field : this.field = this.querySelector("[gridfield]");
}, attached:function() {
}});
Polymer({is:"form-element-renderer", properties:{item:{observer:"itemChanged", type:Object}}, behaviors:[FormElementSelectorBehavior], itemChanged:function() {
}, getActionButtonColor:function(a) {
  return "min-width:140px !important;";
}, getActionButtonClasses:function(a) {
  return "execute" == a ? "button button_primary" : "button";
}, _internalXAction:function(a) {
  this.fire("internal-xaction", null, {node:a.target || a.srcElement});
}, attached:function() {
}});
Polymer({is:"form-tab-renderer", behaviors:[FormElementSelectorBehavior], properties:{item:{type:Object}, pagesStyle:{computed:"computePagesStyle(item)"}}, observers:["routeChanged(route)"], getElementStyle:function() {
  return "display:block;padding-top:0px;padding-bottom:0px;";
}, getPageStyle:function() {
  return "margin-top:0px;padding:0px;";
}, computePagesStyle:function(a) {
  for (var b = 0, c = 0; c < a.childShapes.length; c++) {
    var d = a.childShapes[c], e = 0;
    d && d.bounds && (e = d.bounds.lowerRight.y - d.bounds.upperLeft.y);
    b = Math.max(b, e);
  }
  0 == b && (b = 500);
  return "overflow:hidden;min-height:" + (b - 30) + "px;";
}, ready:function() {
  var a = this.item.selected;
  !a && 0 < this.item.childShapes.length && (a = this.item.childShapes[0].xf_id);
  this.tabsId = a;
}});
Polymer({is:"form-element-selector", properties:{items:{type:Object}}, behaviors:[FormElementSelectorBehavior], attached:function() {
}});
Polymer({is:"simpl-form", behaviors:[Polymer.IronA11yKeysBehavior, FormBehavior, TranslationsBehavior], properties:{namespace:{type:String}, formName:{type:String}, mode:{type:String}, data:{type:Object}, variables:{type:Object}, enterAction:{type:String, value:null}, enterDisabled:{type:Boolean, value:!1}, saveDisabled:{type:Boolean, value:!1, notify:!0}}, observers:["_dataChanged(data.*)", "_specChanged(spec.*)", "_formNameChanged(formName)"], listeners:{"value-changed":"_valueChanged", "internal-xaction":"_internalXAction"}, 
keyBindings:{enter:"_enterPressed"}, _enterPressed:function() {
  var a = this.enterAction;
  if (null == a && !0 === this._form.xf_default_buttons && null != this._form.xf_used_default_buttons) {
    for (var b = this._form.xf_used_default_buttons.items, c = 0; c < b.length; c++) {
      var d = b[c];
      !0 === d.enter && (a = d.action);
    }
  }
  console.log("_enterPressedForm:", this.saveDisabled + "/" + a);
  this.enterDisabled || null == a || !0 === this.saveDisabled || this._internalXAction({xaction:a});
}, _getButtonLabel:function(a) {
  return a && a.startsWith("@") ? tr(a.substring(1)) : a;
}, __isSaveDisabled:function(a, b) {
  return this.saveDisabled && "execute" == b.action;
}, _internalXAction:function(a) {
  var b = a.target || a.srcElement, b = b || a;
  a = this.getData();
  "reset" === b.xaction && (console.log("resetData:", this.resetData), this._setData(this.resetData));
  if ("cancel" !== b.xaction && "reset" !== b.xaction) {
    var c = this._postProcessService();
    null != c && (this._setFieldData(c), a = simpl4.util.Merge.deepmerge(a, c));
    c = this._postProcessLocal();
    null != c && (this._setFieldData(c), a = simpl4.util.Merge.deepmerge(a, c));
    c = this.validate();
  }
  this.fire("xaction", {xaction:b.xaction, xid:b.xid, formVar:this.formVar, data:a, valid:c});
}, attached:function() {
  this.saveDisabled = !1;
}});
(function() {
  Polymer({is:"simpl-carousel", properties:{items:{type:Object}}, getSelector:function(a) {
    return "*[data-index='" + a + "']";
  }, get pageWidth() {
    return this.getBoundingClientRect().width;
  }, attached:function() {
    this.threshold = 0.2;
    this.carousel = this.$.carousel;
    this.carousel.selected = 0;
    this.addEventListener("track", function(a) {
      if ("start" !== a.detail.state) {
        var b = 0 > a.detail.dx, c = 0 < a.detail.dx;
        Math.abs(a.detail.dx) / this.pageWidth > this.threshold && (c && this.prev(), b && this.next());
      }
    });
  }, detached:function() {
    this.carousel = null;
  }, next:function() {
    this.entryAnimation = "slide-from-right-animation";
    $(this.$.carousel.querySelectorAll("section")).css("display", "");
    $(this.$.carousel.querySelector("section.iron-selected")).css("display", "none");
    this.carousel.selected = this.carousel.items.length === this.carousel.selected + 1 ? 0 : this.carousel.selected + 1;
  }, prev:function() {
    this.entryAnimation = "slide-from-left-animation";
    $(this.$.carousel.querySelectorAll("section")).css("display", "");
    $(this.$.carousel.querySelector("section.iron-selected")).css("display", "none");
    this.carousel.selected = 0 === this.carousel.selected ? this.carousel.items.length - 1 : this.carousel.selected - 1;
  }, get selected() {
    if (null != this.carousel) {
      return this.carousel.selected;
    }
  }});
})();
ScrollbarBehavior = {attached:function() {
  !1 !== this._autoScrollbar && this.async(function() {
    this._initScrollbars();
    $(".panel").on("onFullScreen.lobiPanel", function(a, b) {
      a = b.$body[0].querySelectorAll(".smooth-scrollbar");
      for (b = 0; b < a.length; b++) {
        var c = Scrollbar.get(a[b]);
        c && (c.setPosition(0, 0), c.update());
      }
    }.bind(this));
  }, 1000);
}, _initScrollbar:function(a) {
  var b = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  b || window.Scrollbar.init(a || this, {speed:b ? 1 : 4, damping:b ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10});
}, _initScrollbars:function(a) {
  a = a || this;
  var b = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints, c = [];
  b || (c = this._toElementArray(a.querySelectorAll(".dataTables_scrollBody")));
  a = this._toElementArray(a.querySelectorAll(".smooth-scrollbar"));
  c = c.concat(a);
  console.log("smoothElementArray:", c);
  for (a = 0; a < c.length; a++) {
    window.Scrollbar.init(c[a], {speed:b ? 1 : 4, damping:b ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10}), c[a].setAttribute("scrollbar", "");
  }
}, _toElementArray:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    b.push(a[c]);
  }
  return b;
}};
(function() {
  Polymer({is:"simpl-socialbuttons", properties:{data:{observer:"dataChanged", value:null, type:String}, text:{value:null, type:String}, url:{value:null, type:String}}, attached:function() {
    console.log("attached:", this.data);
  }, dataChanged:function() {
    this.async(function() {
      var a = this.data.split(",");
      console.log("dataChanged:", this.data);
      console.log("url:", this.url);
      $("#socialbuttons").jsSocials({url:this.url, text:this.text, shares:a});
    }, 100);
  }});
})();
Polymer({is:"simpl-upload", properties:{target:{type:String, value:""}, progressHidden:{type:Boolean, value:!1}, droppable:{type:Boolean, value:!1}, dropText:{type:String, value:"Drop Files Here"}, multi:{type:Boolean, value:!1}, maxsize:{value:0}, files:{type:Array, value:function() {
  return [];
}}, method:{type:String, value:"PUT"}, raised:{type:Boolean, value:!1}, noink:{type:Boolean, value:!1}, headers:{type:Object, value:{}}, retryText:{type:String, value:"Retry Upload"}, removeText:{type:String, value:"Remove"}, successText:{type:String, value:"Success"}, errorText:{type:String, value:"Error uploading file..."}, _shownDropText:{type:Boolean, value:!1}}, behaviors:[TranslationsBehavior], clear:function() {
  $(this.$.fileInput).val(null);
  this.set("files", []);
  this._showDropText();
}, ready:function() {
  this.raised && this.toggleAttribute("raised", !0, this.$.button);
  this.noink && this.toggleAttribute("noink", !0, this.$.button);
  this.droppable && (this._showDropText(), this.setupDrop());
}, setupDrop:function() {
  var a = this.$.UploadBorder;
  this.toggleClass("enabled", !0, a);
  this.ondragover = function(b) {
    b.stopPropagation();
    this.toggleClass("hover", !0, a);
    return !1;
  };
  this.ondragleave = function() {
    this.toggleClass("hover", !1, a);
    return !1;
  };
  this.ondrop = function(b) {
    this.toggleClass("hover", !1, a);
    b.preventDefault();
    for (var c = b.dataTransfer.files.length, d = 0; d < c; d++) {
      var e = b.dataTransfer.files[d];
      e.progress = 0;
      e.error = !1;
      e.complete = !1;
      0 == this.multi && this.clear();
      console.log("maxsize:", this.maxsize);
      0 != this.maxsize && e.size > this.maxsize ? (console.log("too large"), this.fire("upload-maxsize", {file:e})) : (this.push("files", e), this.uploadFile(e));
    }
  };
}, _fileClick:function() {
  var a = this.$.fileInput;
  if (a && document.createEvent) {
    var b = document.createEvent("MouseEvents");
    b.initEvent("click", !0, !1);
    a.dispatchEvent(b);
  }
}, _fileChange:function(a) {
  for (var b = a.target.files.length, c = 0; c < b; c++) {
    var d = a.target.files[c];
    d.progress = 0;
    d.error = !1;
    d.complete = !1;
    0 == this.multi && this.clear();
    console.log("maxsize:", this.maxsize);
    0 != this.maxsize && d.size > this.maxsize ? (console.log("too large"), this.fire("upload-maxsize", {file:d})) : (this.push("files", d), this.uploadFile(d));
  }
}, cancel:function(a) {
  a && a.xhr && (a.xhr.abort(), this.splice("files", this.files.indexOf(a), 1), this._showDropText());
}, _cancelUpload:function(a) {
  this.cancel(a.model.__data__.item);
}, _retryUpload:function(a) {
  a.model.set("item.error", !1);
  a.model.set("item.progress", 0);
  var b = this;
  this.async(function() {
    b.uploadFile(a.model.__data__.item);
  }, 50);
}, _showDropText:function() {
  this.set("_shownDropText", !this.files.length && this.droppable);
}, uploadFile:function(a) {
  if (a) {
    this._showDropText();
    var b = "files." + this.files.indexOf(a), c = new FileReader;
    c.file = a;
    c.onloadend = function(a) {
      console.log("onloadend:", a);
      this.set(b + ".complete", !0);
      this.fire("upload-complete", a);
    }.bind(this);
    c.readAsDataURL(a);
  }
}});
Polymer({is:"simpl-tree", properties:{nameProp:{value:"name", type:String}, data:{observer:"dataChanged", type:Object}, opened:{value:!1, type:Boolean}, idProp:{value:"path", type:String}, childrenProp:{value:"children", type:String}, selected:{observer:"selectedChanged", type:String}}, ready:function(a) {
  this.iconOpen = "hardware:keyboard-arrow-right";
  this.iconClose = "hardware:keyboard-arrow-down";
  this.iconBOM = "arrow-drop-down";
}, toggleEvent:function(a) {
  a.preventDefault();
  a.stopPropagation();
  a = a.target || a.srcElement;
  this.toggleChildren(a.parentNode, a);
}, toggleChildren:function(a, b) {
  -1 < a.className.indexOf("parent") && a.nextElementSibling && ("none" === a.nextElementSibling.style.display ? (a.className = "parent expanded", a.nextElementSibling.style.display = "block", b.setAttribute("icon", this.iconClose)) : (a.className = "parent collapsed", a.nextElementSibling.style.display = "none", b.setAttribute("icon", this.iconOpen)));
}, openChildren:function(a, b) {
  -1 < a.className.indexOf("parent") && a.nextElementSibling && "none" === a.nextElementSibling.style.display && (a.className = "parent expanded", a.nextElementSibling.style.display = "block", b.setAttribute("icon", this.iconClose));
}, _selectItem:function(a) {
  var b = a.target || a.srcElement;
  a = b;
  b = b.parentNode;
  b = b.getAttribute("idvalue");
  console.log("selectItem:", b);
  null != b && (this.prevSelected && this.prevSelected.removeAttribute("selected"), b = this.getItemById(b, this.data), this.fire("item-selected", {item:b}), a.setAttribute("selected", ""), this.prevSelected = a);
}, selectedChanged:function() {
  var a = this._tree.querySelector('[idvalue="' + this.selected + '"] span');
  this.openTree(a);
  this.prevSelected && this.prevSelected.removeAttribute("selected");
  this.prevSelected = a;
  a.setAttribute("selected", "");
  a = this.getItemById(this.selected, this.data);
  this.fire("item-selected", {item:a});
}, openTree:function(a) {
  for (a = a.parentElement; a && "DIV" == a.nodeName;) {
    a = a.parentElement;
    if ("LI" != a.nodeName) {
      break;
    }
    a = a.parentElement.parentElement;
    a = a.querySelector("div[idvalue]");
    var b = a.querySelector("iron-icon");
    this.openChildren(a, b);
  }
}, getItemById:function(a, b) {
  if (b[this.idProp] == a) {
    return b;
  }
  for (var c = b[this.childrenProp], d = 0; c && d < c.length; d++) {
    if (b = this.getItemById(a, c[d])) {
      return b;
    }
  }
  return null;
}, dataChanged:function() {
  this._createRoot();
}, _createRoot:function() {
  var a = document.createElement("div");
  Polymer.dom(a).setAttribute("id", "main");
  this._tree = a;
  this.$.treeRootId.firstChild && Polymer.dom(this.$.treeRootId).removeChild(this.$.treeRootId.firstChild);
  Polymer.dom(this.$.treeRootId).appendChild(a);
  console.log("simpl-tree._createRoot:", this.data);
  this._createNode(a, this.data, this.opened ? !0 : !1);
}, _createNode:function(a, b, c) {
  var d = document.createElement("div");
  Polymer.dom(d).classList.add("layout");
  Polymer.dom(d).classList.add("horizontal");
  d.addEventListener("click", this._selectItem.bind(this));
  Polymer.dom(a).appendChild(d);
  var e = !1;
  b.children && 0 < b.children.length && (Polymer.dom(d).classList.add("parent"), e = !0);
  Polymer.dom(d).classList.add(c ? "expanded" : "collapsed");
  Polymer.dom(d).setAttribute("idvalue", b[this.idProp]);
  var f = document.createElement("iron-icon");
  Polymer.dom(d).appendChild(f);
  e && Polymer.dom(f).setAttribute("icon", c ? "hardware:keyboard-arrow-down" : "hardware:keyboard-arrow-right");
  f.addEventListener("click", this.toggleEvent.bind(this));
  f = document.createElement("span");
  Polymer.dom(d).appendChild(f);
  Polymer.dom(f).classList.add("truncate");
  Polymer.dom(f).setAttribute("style", e ? "color:black;" : "color:gray;");
  Polymer.dom(f).setAttribute("title", b[this.nameProp]);
  d = document.createTextNode(b[this.nameProp]);
  Polymer.dom(f).appendChild(d);
  d = document.createElement("ul");
  Polymer.dom(d).setAttribute("style", c ? "display:block;" : "display:none;");
  Polymer.dom(a).appendChild(d);
  if (e) {
    for (a = 0; a < b.children.length; a++) {
      c = b.children[a], e = document.createElement("li"), Polymer.dom(d).appendChild(e), this._createNode(e, c, !1);
    }
  }
}, detached:function() {
}, attributeChanged:function(a, b, c) {
}});
(function() {
  Polymer({is:"simpl-toast", properties:{text:{type:String}, duration:{type:Number, value:3000}, type:{type:String}, heat:{type:String}, shelf:{type:String}, _breads:{type:Array, value:function() {
    return [];
  }}}, show:function(a, b, c, d, e) {
    this._bake({text:a, type:b || "info", duration:c, heat:e || "high", shelf:d || "bottom-left"});
  }, _bake:function(a) {
    var b = a.text || this.text;
    b && b.trim().length && (this.push("_breads", a), this._emptyTheToaster());
  }, _emptyTheToaster:function() {
    if (this._breads.length) {
      var a = this._breads[0], b = a.duration || this.duration, c = a.type || this.type, d = a.heat || this.heat, e = a.shelf || this.shelf, f = this.$.toast;
      this.shift("_breads");
      f.text = a.text || this.text;
      f.duration = b;
      this._turnOnTheToaster(c, d, e);
      this.async(function() {
        f.show();
      }, 100);
      this.async(function() {
        this._emptyTheToaster();
      }, b + 500);
    } else {
      this.async(function() {
        this._turnOffTheToaster();
      }, 1000);
    }
  }, _turnOnTheToaster:function(a, b, c) {
    var d = this.$.grill;
    a = a && a.toLowerCase() || "";
    this.toggleClass("info", "info" === a, d);
    this.toggleClass("success", "success" === a, d);
    this.toggleClass("warning", "warning" === a, d);
    this.toggleClass("error", "error" === a, d);
    b = b && b.toLowerCase() || "";
    this.toggleClass("low", "low" === b, d);
    this.toggleClass("middle", "middle" === b, d);
    this.toggleClass("high", "high" === b, d);
    c = c && c.toLowerCase() || "";
    this.toggleClass("top-left", "top-left" === c);
    this.toggleClass("top-right", "top-right" === c);
    this.toggleClass("bottom-left", "bottom-left" === c);
    this.toggleClass("bottom-right", "bottom-right" === c);
    "error" == a && (this.icon = "error");
    "info" == a && (this.icon = "info");
    "warning" == a && (this.icon = "warning");
    "success" == a && (this.icon = "check");
    0 <= c.indexOf("right") && (this.style.right = d.clientWidth + 24 + "px");
  }, close:function() {
    this.$.toast.hide();
  }, _turnOffTheToaster:function() {
    var a = this.$.grill;
    this.toggleClass("low", !1, a);
    this.toggleClass("middle", !1, a);
    this.toggleClass("high", !1, a);
  }});
})();
Polymer({is:"simpl-svg-hscroll", properties:{contentStyle:{computed:"getContentStyle(height)"}, src:{value:null, type:String}, height:{value:null, type:String}}, getContentStyle:function() {
  return "height:" + this.height + "px;";
}, attached:function() {
  var a = this.$.objId;
  a.addEventListener("load", function() {
    var b = a.getSVGDocument(), c = b.querySelector("svg");
    SVG(c);
    var d = SVG.get("layer1", b);
    $(c).swipe({swipe:function(a, b, c, h, l, n) {
      console.log("You swiped " + b + "/" + Math.pow(c, 2) / 100 + "/" + l);
      c = Math.pow(c, 2) / 100;
      0 != l && ("right" == b ? d.transform({x:c}, !0) : "left" == b && d.transform({x:-c}, !0));
    }, allowPageScroll:"vertical", threshold:0});
  });
}});
Polymer({is:"simpl-animatable-page", behaviors:[Polymer.NeonAnimatableBehavior], properties:{animationConfig:{type:Object, value:function() {
  return {entry:{name:"slide-from-right-animation", node:this}, exit:{name:"slide-left-animation", node:this}};
}}}});
Polymer({is:"simpl-zoom", properties:{styleClosed:{computed:"computeStyleClosed(maxWidthClosed)"}, backdrop:{value:!1, type:Boolean}, maxWidthClosed:{value:"600px", type:String}, image:{type:String}}, computeStyleClosed:function() {
  return "width:" + this.maxWidthClosed;
}, _dialogOpened:function() {
  this.async(function() {
    this.dialogOpened();
  }, 50);
}, dialogOpened:function() {
  this.dh = $(this.$.imageDialog).height();
  null == this.ih && (this.ih = $(this.$.bigImage).height());
  $(this.$.bigImage).panzoom({disablePan:!0});
  $(this.$.bigImage).pep({useCSSTranslation:!1, velocityMultiplier:1.0, allowDragEventPropagation:!1, xonstrainTo:"window"});
  $(this.$.bigImage).panzoom("zoom", this.dh / this.ih * 0.85);
  $(this.$.imageDialog).offset({top:0, left:this.isDrawerOpen() ? 230 : 0});
  $("#scroller", this).height(this.dh);
  $(this.$.bigImage).offset({top:58, left:this.isDrawerOpen() ? 230 : 0});
  var a = this, b = new Hammer.Manager(this.$.bigImage, {});
  b.add(new Hammer.Tap({event:"doubletap", taps:2, threshold:50, interval:400, time:250}));
  b.on("doubletap", function(b) {
    console.log("about to close");
    a.dialogClose();
  });
}, attached:function() {
  var a = this, b = new Hammer.Manager(this.$.imageClosed, {});
  b.add(new Hammer.Tap({event:"doubletap", taps:2, threshold:10, interval:250, time:250}));
  b.on("doubletap pinch", function(b) {
    console.log("about to open");
    a.dialogOpen();
  });
  0 <= Detectizr.browser.userAgent.indexOf("edge/") && (this.$.closedImageId.src = this.image, this.$.bigImage.src = this.image);
}, dialogOpen:function() {
  try {
    this._setParentsScrolling(!0);
  } catch (a) {
    alert(a);
  }
  this.async(function() {
    this.$.imageDialog.open();
    this.showMainToolbar(!1);
  }, 50);
}, dialogClose:function() {
  this.async(function() {
    this.$.imageDialog.close();
    this.showMainToolbar(!0);
  }, 50);
}, dialogClosed:function() {
  this._setParentsScrolling(!1);
  this.showMainToolbar(!0);
}, showMainToolbar:function(a) {
  a ? $("#mainToolbar").show() : $("#mainToolbar").hide();
}, isDrawerOpen:function() {
  return !1;
}, detached:function() {
}, _setParentsScrolling:function(a) {
  console.log("_setParentsScrolling,", this.tagName);
  if ("-webkit-overflow-scrolling" in this.style) {
    for (var b = Polymer.dom(this).parentNode; b;) {
      a ? b.style && (b._oldWebkitOverflowScrolling = b.style["-webkit-overflow-scrolling"], b.style["-webkit-overflow-scrolling"] = "auto") : "_oldWebkitOverflowScrolling" in b && (b.style["-webkit-overflow-scrolling"] = b._oldWebkitOverflowScrolling, delete b._oldWebkitOverflowScrolling), b = b.parentNode;
    }
  }
}});
Polymer({is:"simpl-viewer", properties:{}, observers:[], ready:function() {
  this.panelBackgroundColor = "#666666";
  this.panelHeader = "Maschine";
  this.panelHeaderBom = "Stückliste";
  this.panelHeaderDrawing = "Zeichnung";
  this.showAssemblies = !0;
  this.dataTablesOptions = {paging:!0, dom:"frtiS", scrollY:"150px"};
  simpl4.util.MessageManager.installMessages("bhs");
  var a = null;
  try {
    a = simpl4.util.Rpc.rpcSync("bhs:getBOMTree", {namespace:"bhs", machine:"2100097"});
  } catch (b) {
    alert("Viewer._init:" + b);
    return;
  }
  null == this.showAssemblies || "false" != this.showAssemblies && !1 !== this.showAssemblies || ($(this.$.assemblyId).css("display", "none"), $(this.$.viewerAndListId).attr("vl100", ""), $(this.$.viewerAndListId).removeAttr("vl66"));
  this.assemblies = a;
  window.buttonClicked = this.buttonClicked.bind(this);
}, tableHeightChanged:function() {
  this.tableHeight && (this.dataTablesOptions.scrollY = this.tableHeight + "px");
}, viewerHeightChanged:function() {
  this.viewerHeight && ($(this.$.viewer).css("min-height", this.viewerHeight + "px"), $(this.$.viewer).css("height", this.viewerHeight + "px"));
}, attached:function(a) {
  a = simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/openseadragon/";
  this._openSeadragon = OpenSeadragon({hash:"hash_" + this, element:this.$.viewer, prefixUrl:a, zoomPerClick:2.0, showFullPageControl:!1, autoHideControls:!1, navigatorMaintainSizeRatio:!0, navigatorSizeRatio:0.22, navigatorPosition:"BOTTOM_LEFT", showNavigator:!0});
  this.assemblyTableMeta = this.getAssembyTableMeta();
  this._openSeadragon.addHandler("open", this._addOverlays.bind(this));
  this._openSeadragon.addViewerInputHook({hooks:[{tracker:"viewer", handler:"clickHandler", hookHandler:this.onViewerClick.bind(this)}]});
  this.selected = "2100097.141027600.135450200";
  navigator.userAgent.match(/android/i) && $(this.$.viewer.querySelector(".openseadragon-container")).css("overflow", "auto");
  if (window.etk) {
    window.etk.onExternalReady();
  }
}, panelOpen:function() {
  $(window).trigger("resize.DT-dataTablesId");
  $(window).trigger("resize.dtr");
}, selectedAssemblyChanged:function(a) {
  console.log("Details:", a.detail);
  var b = a.detail.item, c = b.part;
  a = simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/png_" + c + "/map.xml";
  var d = this.getHotspots(a);
  this._hotspots = d;
  this.showLoading("Loading " + b.name + "...");
  setTimeout(function() {
    console.log("selectedAssemblyChanged:", b);
    this.panelHeaderBom = "Stückliste(" + b.name + ")";
    this.assemblyTableData = this.getAssembyTableData(b.path);
    this.open(c, d, "page-width");
  }.bind(this), 10);
}, showLoading:function(a) {
  this.toastMessage = a;
  this.$.toast.show();
}, partSelected:function(a) {
  a = a.detail.rows[0];
  console.log("partSelected:", a.part);
  this.selectHotspot(a.part);
}, open:function(a, b, c) {
  b = this._getParameter(a);
  this._openSeadragon.open({width:b.width, height:b.height, tileSize:256, getTileUrl:function(b, c, f) {
    return simpl4.util.BaseManager.getBaseUrl() + "/sw/resource/deep/SD_" + a + "/" + b + "/" + c + "_" + f + ".png";
  }});
}, close:function() {
  this._openSeadragon.close();
}, selectHotspot:function(a, b) {
  this._selectHotspot(a, !1);
}, destroy:function() {
  this._openSeadragon.destroy();
}, getHotspots:function(a) {
  var b;
  jQuery.ajax({url:a, async:!1, dataType:"text", success:function(a) {
    b = a;
  }});
  return (new simpl4.util.Xml2Json).convert(b).area;
}, getAssembyTableMeta:function(a) {
  a = [];
  var b = {data:"menge", title:"", class:"input menge"};
  b.mRender = this.renderColumn;
  a.push(b);
  b = {data:"basket", title:"", class:"wbutton", icon:"basket.gif"};
  b.mRender = this.renderColumn;
  a.push(b);
  b = {data:"part", class:"teilenummer alignLeft", width:"50"};
  b.title = tr("bomviewer.part");
  a.push(b);
  b = {data:"name", class:"teilename", width:"70"};
  b.title = tr("bomviewer.name");
  a.push(b);
  b = {data:"name2", title:"Beschreibung"};
  a.push(b);
  b = {data:"qty"};
  b.title = tr("bomviewer.qty");
  b.width = "20";
  a.push(b);
  b = {data:"price"};
  b.title = tr("bomviewer.price");
  return a;
}, renderColumn:function(a, b, c, d) {
  a = d.settings.aoColumns[d.col].mData;
  d = d.settings.aoColumns[d.col].sClass;
  b = simpl4.util.BaseManager.getBaseUrl();
  var e = simpl4.util.BaseManager.getNamespace();
  return d && -1 < d.toLowerCase().indexOf("input") ? "<div style='' class='input'><input id='id" + c.part + "' style='padding:0px !important; padding-top:3px !important; ;max-width:38px;margin:0px;font-size:10px;height:16px;xidth:100%;' type='text'></input></div>" : d && -1 < d.toLowerCase().indexOf("wbutton") ? "<div onClick='window.buttonClicked(" + c.part + ");' class='wbutton'><input style='height:16px;background:#787878;' src='" + b + "/repo/" + e + "/basket.gif' type='image'></input></div>" : 
  c[a];
}, buttonClicked:function(a) {
  var b = $(document.querySelector("html /deep/ #id" + a)), c = this.isEmpty(b.val()) ? 1 : parseInt(b.val());
  console.log("Part:" + a + "/" + c);
  !isNaN(c) && 0 < c && (b.val(null), window.etk && window.etk.addToBasket(a, c));
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}, getAssembyTableData:function(a) {
  try {
    var b = simpl4.util.Rpc.rpcSync("bhs:getAssembly", {namespace:"bhs", path:a + ".*{1}"});
    b.forEach(function(a) {
      this._hasHotspot(a.part) || (a.name = "<span style='color:rgba(0, 0, 0, 0.5);'>" + a.name + "</span>");
    }.bind(this));
    return b;
  } catch (c) {
    alert("BOMViewer._getAssemby:" + c);
  }
}, _hasHotspot:function(a) {
  null == this._hotspotMap && (this._hotspotMap = {}, this._hotspots.forEach(function(a) {
    this._hotspotMap[a.href] = !0;
  }.bind(this)));
  return this._hotspotMap[a];
}, _selectHotspot:function(a, b) {
  var c;
  if (!0 !== this.internalHotspotEvent) {
    for (var d = this.$.viewer.getElementsByClassName("hotspot"), e = null, f = 0; f < d.length; f++) {
      var g = d[f];
      jQuery(g).removeClass("selected");
      (c = g.$$hotspot) && c.href == a && (jQuery(g).addClass("selected"), e || (e = g));
    }
    !b && e && (c = e.$$hotspot, this._openSeadragon.viewport.panTo(c.p, !0));
  }
}, _addOverlays:function(a) {
  console.log("addOverlays:", a);
  a = a.eventSource;
  for (var b = this._hotspots, c = 0; c < b.length; c++) {
    var d = b[c], e = d.coords.split(","), f = 5.0 * e[0], g = 5.0 * e[1], e = a.viewport.imageToViewportRectangle(f, g, 5.0 * (e[2] - e[0] + 2), 5.0 * (e[3] - e[1] + 2)), f = a.viewport.imageToViewportCoordinates(f, g), d = this.createDiv(d.href, f);
    a.addOverlay(d, e);
  }
}, createDiv:function(a, b) {
  var c = document.createElement("div");
  c.className = "hotspot";
  c.$$hotspot = {p:b, href:a};
  return c;
}, onViewerClick:function(a) {
  var b = a.originalEvent, b = b.target || b.srcElement;
  b.$$hotspot && (a.preventDefaultAction = !0, a.stopBubbling = !0, b = b.$$hotspot, console.log("onViewerClick:", b), this._selectHotspot(b.href, !0), this.internalHotspotEvent = !0, this.selectBom(b.href), this.internalHotspotEvent = !1, a.preventDefaultAction = !0);
}, selectBom:function(a) {
  var b = this.$.bomTable, c = b._api, d = c.rows(function(b, c, d) {
    return c.part === a ? !0 : !1;
  });
  console.log("RowNodes:", d[0]);
  b.unselectAll();
  c.rows(d[0]).nodes().to$().addClass("selected");
  0 < d[0].length && (console.log("RowNodes:", d[0][0]), b = c.scroller(), console.log("Scroller:", b), b.scrollToRow(d[0][0] - 2, !1));
}, _getParameter:function(a) {
  return {123490603:{width:5263, height:3719}, 123551E3:{width:5263, height:3719}, 123555401:{width:5263, height:3719}, 123565300:{width:5263, height:3719}, 124451600:{width:4950, height:3825}, 124665200:{width:4950, height:3825}, 124665600:{width:5263, height:3719}, 124665700:{width:4950, height:3825}, 124751400:{width:5263, height:3719}, 124769600:{width:4950, height:3825}, 125429200:{width:5263, height:3719}, 125684601:{width:4950, height:3825}, 125684602:{width:4950, height:3825}, 127323700:{width:5263, 
  height:3719}, 128486700:{width:5263, height:3719}, 129729E3:{width:4950, height:3825}, 132818800:{width:5263, height:3719}, 132885800:{width:4950, height:3825}, 133294500:{width:5263, height:3719}, 133336500:{width:5263, height:3719}, 133424600:{width:5263, height:3719}, 133682500:{width:4950, height:3825}, 133777E3:{width:5263, height:3719}, 133793603:{width:7444, height:5263}, 133967200:{width:5263, height:3719}, 133971600:{width:5263, height:3719}, 133974300:{width:4950, height:3825}, 133974600:{width:4950, 
  height:3825}, 133999600:{width:5263, height:3719}, 134000600:{width:5263, height:3719}, 134000601:{width:5263, height:3719}, 134006E3:{width:5263, height:3719}, 134006001:{width:5263, height:3719}, 134102600:{width:5263, height:3719}, 134179500:{width:5263, height:3719}, 134413200:{width:4950, height:3825}, 134777700:{width:4950, height:3825}, 134861900:{width:5263, height:3719}, 134953200:{width:5263, height:3719}, 135096200:{width:5263, height:3719}, 135161500:{width:4950, height:3825}, 135224600:{width:4950, 
  height:3825}, 135234600:{width:4950, height:3825}, 135450200:{width:5263, height:3719}, 136421400:{width:5263, height:3719}, 136421800:{width:5263, height:3719}, 136924204:{width:3831, height:2394}, 137421800:{width:4950, height:3825}, 137756400:{width:5263, height:3719}, 138412E3:{width:5263, height:3719}, 139094200:{width:5263, height:3719}, 140645400:{width:4950, height:3825}, 140755100:{width:5263, height:3719}, 140755101:{width:4950, height:3825}, 140763300:{width:4950, height:3825}, 140763301:{width:5263, 
  height:3719}, 140779200:{width:3831, height:2394}, 140833100:{width:5263, height:3719}, 140833200:{width:5263, height:3719}, 141012800:{width:5263, height:3719}, 141027500:{width:3844, height:2394}, 141027600:{width:3844, height:2394}, 141027700:{width:3844, height:2394}, 141027800:{width:3831, height:2388}, 141027900:{width:3844, height:2394}, 141042700:{width:4950, height:3825}, 141078500:{width:5263, height:3719}, 141078600:{width:5263, height:3719}, 141078900:{width:5263, height:3719}, 141216100:{width:4950, 
  height:3825}, 141363400:{width:3831, height:2394}, 141363500:{width:5263, height:3719}, 141371E3:{width:3831, height:2388}, 141371800:{width:5263, height:3719}, 141378900:{width:3831, height:2394}, 141379300:{width:5263, height:3719}, 142080900:{width:4950, height:3825}, 145023400:{width:5263, height:3719}, 145028200:{width:5263, height:3719}, 145651400:{width:5263, height:3719}, 145661E3:{width:4950, height:3825}, 2100097:{width:3831, height:2388}}[a];
}});
Polymer({is:"simpl-xhr", request:function(a) {
  var b = new XMLHttpRequest, c = a.url, d = a.method || "GET", e = !a.sync, f = this.toQueryString(a.params);
  f && "GET" == d.toUpperCase() && (c += (0 < c.indexOf("?") ? "&" : "?") + f);
  f = this.isBodyMethod(d) ? a.body || f : null;
  b.open(d, c, e);
  a.responseType && (b.responseType = a.responseType);
  a.withCredentials && (b.withCredentials = !0);
  this.makeReadyStateHandler(b, a.callback);
  this.setRequestHeaders(b, a.headers);
  b.send(f);
  if (!e) {
    b.onreadystatechange(b);
  }
  return b;
}, toQueryString:function(a) {
  var b = [];
  for (d in a) {
    var c = a[d];
    var d = encodeURIComponent(d);
    b.push(null == c ? d : d + "=" + encodeURIComponent(c));
  }
  return b.join("&");
}, isBodyMethod:function(a) {
  return this.bodyMethods[(a || "").toUpperCase()];
}, bodyMethods:{POST:1, PUT:1, PATCH:1, DELETE:1}, makeReadyStateHandler:function(a, b) {
  a.onreadystatechange = function() {
    4 == a.readyState && b && b.call(null, a.response, a);
  };
}, setRequestHeaders:function(a, b) {
  if (b) {
    for (var c in b) {
      a.setRequestHeader(c, b[c]);
    }
  }
}});
!function() {
  Polymer({is:"app-grid", behaviors:[Polymer.Templatizer], properties:{itemWidth:{type:Number, value:128}, itemHeight:{type:Number, value:128}, itemSpacing:{type:Number, value:16}, items:{type:Array, value:function() {
    return [];
  }, observer:"_itemsChanged"}}, attached:function() {
    window.addEventListener("resize", this._layout.bind(this));
  }, detached:function() {
    window.removeEventListener("resize", this._layout);
  }, get parent() {
    return this.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? this.parentNode.host : this.parentNode;
  }, addItems:function(a) {
    gridEl = Polymer.dom(this.$.grid);
    for (k = 0; k < a.length; k++) {
      var b = document.createElement("div");
      b.classList.add("item-container");
      b.style.width = this.itemWidth + "px";
      b.style.height = this.itemHeight + "px";
      b.style.margin = 0;
      b.style.opacity = 0;
      gridEl.appendChild(b);
      userEl = this.stamp(null);
      userEl.item = a[k];
      b.appendChild(userEl.root);
    }
    this._layout();
  }, removeAllItems:function() {
    for (var a = Polymer.dom(this.$.grid); a.firstChild;) {
      a.removeChild(a.firstChild);
    }
  }, _itemsChanged:function(a, b) {
    (b = Polymer.dom(this).querySelector("template")) && this.templatize(b);
    for (b = Polymer.dom(this.$.grid); b.firstChild;) {
      b.removeChild(b.firstChild);
    }
    for (k = 0; k < a.length; k++) {
      var c = document.createElement("div");
      c.classList.add("item-container");
      c.style.width = this.itemWidth + "px";
      c.style.height = this.itemHeight + "px";
      c.style.margin = 0;
      c.style.opacity = 0;
      b.appendChild(c);
      userEl = this.stamp(null);
      userEl.item = a[k];
      c.appendChild(userEl.root);
    }
    this._layout();
  }, _layout:function() {
    var a;
    var b = Polymer.dom(this.$.grid).node;
    var c = Polymer.dom(b).querySelectorAll(".item-container");
    if (0 < c.length) {
      var d = +window.getComputedStyle(b).width.replace("px", "");
      var e = this.itemWidth + this.itemSpacing;
      var f = this.itemHeight + this.itemSpacing;
      var g = Math.floor(d / e);
      var h = this.itemSpacing;
      var l = (d - g * this.itemWidth - (g - 1) * this.itemSpacing) / 2;
      for (a = 0; a < c.length; a++) {
        d = c[a];
        var n = Math.floor(a % g);
        var p = Math.floor(a / g);
        d.style.opacity = 1;
        d.style.top = p * f + h + "px";
        d.style.left = n * e + l + "px";
      }
      b.style.height = (p + 1) * f + h + "px";
    }
  }});
}();
(function() {
  Polymer({is:"simpl-websocket", properties:{namespace:{type:String}, websocketName:{type:String}, osgiService:{type:String}, connected:{type:Boolean, value:!1, notify:!0}, recvMessage:{type:Object, notify:!0}}, observers:[], sendMessage:function(a) {
    if (!this.connected) {
      throw Error("simpl-websocket.send(...): not connected.");
    }
    a = JSON.stringify(a);
    console.log("<- sendMessage:", a);
    this.socket.onNext(a);
  }, closeConnection:function() {
    this.socket.onCompleted();
  }, openConnection:function(a, b) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), d = simpl4.util.Base64.encode(d + ":" + c), c = simpl4.util.BaseManager.getBaseUrl(), c = c.replace("http", "ws");
    a = a || {};
    a.credentials = d;
    a.namespace || (a.namespace = this.namespace);
    a.name || (a.name = this.websocketName);
    a.connectionKey || (a.connectionKey = getShortId());
    a.osgiService = this.osgiService;
    a = $.param(a);
    this.url = c + "/ws/xyz?" + a;
    a = Rx.Observer.create(function(a) {
      console.info("-> websocket open");
      this.connected = !0;
    }.bind(this));
    c = Rx.Observer.create(function(a) {
      console.log("websocket is about to close:", a);
      this.connected = !1;
    }.bind(this));
    this.socket = simpl4.util.Rx.observableFromWebSocket(this.url, {timeoutCallback:b, debug:!1, reconnectInterval:50}, a, c);
    var e = this;
    this.socket.subscribe(function(a) {
      var b = a.data, b = JSON.parse(b);
      e.fire("message", {data:b});
      e.async(function() {
        e.recvMessage = b;
      }, null, 0);
    }, function(a) {
      console.error("Error:" + a.reason + "(" + a.code + ")");
      var b = {errorMessage:a.reason};
      e.async(function() {
        e.recvMessage = b;
      }, null, 0);
    }, function() {
      console.info("websocket closed");
      e.connected = !1;
    });
  }});
})();
(function() {
  Polymer({is:"simpl-websocket-plain", properties:{namespace:{type:String}, websocketName:{type:String}, osgiservice:{type:String}, connected:{type:Boolean, notify:!0}, recvMessage:{type:Object, notify:!0}}, connected:!1, send:function(a) {
    if (!this.connected) {
      throw Error("simpl-websocket-plain.send(...): not connected.");
    }
    a = JSON.stringify(a);
    console.log("<- sendMessage:", a);
    this.wssocket.send(a);
  }, sendMessage:function(a) {
    this.send(a);
  }, closeConnection:function() {
    this.wssocket.close();
  }, openConnection:function(a, b) {
    var c = simpl4.util.BaseManager.getPassword(), d = simpl4.util.BaseManager.getUser(), d = simpl4.util.Base64.encode(d + ":" + c), c = simpl4.util.BaseManager.getBaseUrl(), c = c.replace("http", "ws");
    a = a || {};
    a.namespace = this.namespace;
    a.credentials = d;
    a.osgiService = this.osgiService;
    a.name = this.websocketName;
    a.connectionKey || (a.connectionKey = getShortId());
    a = $.param(a);
    this.url = c + "/ws/xyz?" + a;
    var e = this;
    this.wssocket = b = new ReconnectingWebSocket(this.url, null, {timeoutCallback:b, debug:!1, reconnectInterval:50});
    b.onopen = function(a) {
      e.connected = !0;
    };
    b.onclose = function(a) {
      console.log("onclose:", a);
      e.connected = !1;
      var b = {errorMessage:a.reason};
      e.async(function() {
        e.recvMessage = b;
      }, null, 0);
    };
    b.onerror = function(a) {
      console.error("WebSocket Error " + a);
    };
    b.onmessage = function(a) {
      var b = JSON.parse(a.data);
      e.async(function() {
        e.recvMessage = b;
      }, null, 0);
    };
  }});
})();
Polymer({is:"simpl-chat", behaviors:[TranslationsBehavior], properties:{demotext:{value:!1, type:Boolean}, chatList:{value:function() {
  return [];
}, type:Array}, connected:{value:!1, type:Boolean}, chatId:{value:"main", notify:!0, type:String}}, observers:["connectedChanged(connected)", "recvMessageChanged(recvMessage)", "chatIdChanged(chatId)"], attached:function() {
  this.chatId = "main";
}, ready:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.viewId = "loginView";
  this.camelWS = !1;
  this.recvMessage = null;
  this.autoConnect = !0;
  this.resourceId = null;
  this.pausingTimeout = 2500;
  this.isCurrentParticipant = !1;
  this.resourceId = getShortId();
  this.addUserCallback = this.addUser.bind(this);
  this.addGroupCallback = this.addGroup.bind(this);
  this.loginCallback = this.login.bind(this);
  this.joinRoomCallback = this.joinRoom.bind(this);
  this.leaveRoomCallback = this.leaveRoom.bind(this);
  window.addEventListener("unload", function(a) {
    !0 === this.connected && this.sendChatState("gone");
  }.bind(this));
  this.loginData = {username:Simpl4.Cache.getItem("chat.username"), password:Simpl4.Cache.getItem("chat.password"), domain:Simpl4.Cache.getItem("chat.domain")};
}, sendMessageInput:function() {
  var a = this.chatHash[this.chatId], b = this.querySelector("#messageInput-" + a.id), c = a.participant || $(this.querySelector("#participant-" + a.id)).val();
  if (this.isEmpty(c) && "mixedchat" === a.type) {
    this.showError("no participant selected"), console.error("no participant selected");
  } else {
    if ("" != b.value) {
      var d = {body:b.value, from:this.loginData.username};
      this.isEmpty(c) || (d.participant = c);
      "groupchat" === a.type && (d.room = a.id);
      "groupchat" !== a.type && (d.style = "background:light-yellow;", d.time = this.getTime(), this.getMessageBoxTemplate().unshift("items", d));
      this.$.websocket.sendMessage(d);
      b.setValue("");
      this.sendChatState("active");
      a.isComposing = !1;
    }
  }
}, recvMessageChanged:function() {
  var a = this.recvMessage;
  if (null != a) {
    a.time = this.getTime();
    console.log("-> recvMessage", a);
    var b = null;
    if (a.errorMessage) {
      b = a.errorMessage, (a = a.request) && a.command && "open" === a.command && this.async(function() {
        this.connected = !1;
      }, null, 30), this.showError(this.mapSomeErrors(b)), console.error(b), a && a.room && this.removeChat(a.room);
    } else {
      if ("groupchat" == a.type ? (b = this.getNameFromJid(a.from), a.from = a.from.split("/")[1], b = this.chatHash[b]) : "chat" == a.type && ((b = this.chatHash[this.getNameFromJid(a.from)]) || (b = this.chatHash.main)), this.isEmpty(a.body) || (a.style = "background:#f8f8f8;", this.getMessageBoxTemplate().unshift("items", a)), b && a.chatState && (b.chatState = tr("chat.state_" + a.chatState)), b && "groupchat" === b.type && (b.chatState = ""), b && "mixedchat" === b.type && $(this.querySelector("#participant-" + 
      this.chatId)).val() != this.getNameAndDomainFromJid(a.from) && (b.chatState = ""), a.rosterEntries && (b = this.filterSingleChat(a.rosterEntries), b.sort(this.sortRosterEntries), this.rosterEntries = b), a.presence && (b = this.getNameFromJid(a.from), b = this.chatHash[b])) {
        b = this.getChatIndex(b), console.log("index:", b), this.set("chatList." + b + ".presence", a.presence), console.log("chat.presence:", this.chatList[b].presence);
      }
    }
  }
}, login:function(a) {
  a = this.querySelector("#loginForm").getData();
  if (!this.isEmpty(a.username)) {
    this.isEmpty(a.resource) || (this.resourceId = a.resource);
    this.loginData = a;
    Simpl4.Cache.setItem("chat.username", this.loginData.username);
    Simpl4.Cache.setItem("chat.password", this.loginData.password);
    Simpl4.Cache.setItem("chat.domain", this.loginData.domain);
    this.rosterEntries = [];
    this.chatId = "main";
    this.resetChatList();
    var b = {};
    this.camelWS ? (b.camelHeaders = JSON.stringify({xmppUsername:a.username, xmppPassword:a.password, xmppResourceId:this.resourceId}), b.closeCommandBody = JSON.stringify({command:"close"}), b.connectionKey = a.username + "/" + this.resourceId) : (b.username = a.username, b.password = a.password, b.resourceId = this.resourceId);
    this.$.websocket.openConnection(b, this.socketTimeoutCallback.bind(this));
  }
}, disconnect:function() {
  this.sendChatState("gone");
  this.async(function() {
    this.removeAllChat();
    this.$.websocket.closeConnection();
  }, null, 300);
}, socketTimeoutCallback:function() {
  this.async(function() {
    this.sendOpen();
    for (var a = 0; a < this.chatList.length; a++) {
      var b = this.chatList[a];
      "groupchat" === b.type && this.sendJoin(b);
    }
  }, null, 500);
}, connectedChanged:function() {
  !0 === this.connected ? (this.viewId = "chatView", this.sendOpen()) : this.viewId = "loginView";
  if (!0 === this.connected) {
    this.bindFocusListener(!0);
  } else {
    for (var a = 0; this.chatList && a < this.chatList.length; a++) {
      "groupchat" !== this.chatList[a].type && this.bindFocusListener(!1);
    }
  }
}, bindFocusListener:function(a) {
  this.async(function() {
    var b = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input");
    a ? ($(b).on("focus", this.chatEventListener.bind(this)), $(b).on("blur", this.chatEventListener.bind(this))) : ($(b).off("focus", this.chatEventListener), $(b).off("blur", this.chatEventListener));
  }, null, 100);
}, showJoinRoomForm:function() {
  this.viewId = "joinRoomView";
  simpl4.util.Rpc.rpcAsync({service:"xmpp", method:"getRooms", parameter:{serviceName:"conference"}, async:!0, context:this, failed:function(a) {
    console.error("showJoinRoomForm:", a);
  }, completed:function(a) {
    for (var b = [], c = 0; c < a.length; c++) {
      var d = {};
      d.name = a[c].name;
      d.description = a[c].description;
      b.push(d);
    }
    a = {room:b};
    this.querySelector("#joinRoomForm").setItems(a);
  }});
}, joinRoom:function(a) {
  var b = a.detail.data;
  this.viewId = "chatView";
  if ("cancel" != a.detail.xaction && null != b.room) {
    var c = {};
    c.id = b.room.length ? b.room[0].name : b.room.name;
    c.description = b.room.length ? b.room[0].description : b.room.description;
    this.chatHash[c.id] ? this.set("chatId", c.id) : (c.messages = [], c.type = "groupchat", this.addChat(c), this.async(function() {
      this.set("chatId", c.id);
      this.sendJoin();
    }, null, 300));
    this.$.chatTabId.selected = c.id;
  }
}, openSingleChat:function() {
  var a = $(this.querySelector("#participant-" + this.chatId)).val(), b = {};
  b.id = this.getNameFromJid(a);
  b.participant = a;
  b.type = "singlechat";
  this.addChat(b);
  this.bindFocusListener(!0);
  this.updateRoster();
  $(this.querySelector("#participant-" + this.chatId)).val(null);
  this.isCurrentParticipant = !1;
  try {
    this.set("chatId", b.id);
  } catch (c) {
  }
}, showLeaveRoomForm:function() {
  this.viewId = "leaveRoomView";
  for (var a = [], b = 0; b < this.chatList.length; b++) {
    "groupchat" === this.chatList[b].type && a.push({name:this.chatList[b].id, description:this.chatList[b].description});
  }
  this.async(function() {
    var b = this.querySelector("#leaveRoomForm");
    b.setItems({room:a});
    b.querySelector("simpl-form /deep/ xaction-button").innerHTML = '<iron-icon icon="launch"></iron-icon>' + tr("chat.leaveRoom");
  }, 30);
}, leaveRoom:function(a) {
  var b = this.querySelector("#leaveRoomForm").getData();
  this.viewId = "chatView";
  "cancel" != a.detail.xaction && null != b.room && (a = b.room[0].name, this.$.websocket.sendMessage({command:"leaveRoom", parameter:{room:a}}), this.removeChat(a));
}, showAddUserForm:function() {
  this.viewId = "addUserView";
}, showAddGroupForm:function() {
  this.viewId = "addGroupView";
}, addUser:function(a) {
  var b = this.querySelector("#addUserForm");
  if ("execute" != a.detail.xaction || 0 != b.validate()) {
    if (this.viewId = "chatView", "cancel" != a.detail.xaction && (a = b.getData(), !this.isEmpty(a.username))) {
      var b = this.loginData.domain, c = a.username;
      -1 != c.indexOf("@") || this.isEmpty(b) || (c = c + "@" + b);
      this.$.websocket.sendMessage({command:"addUser", parameter:{username:c, nickname:a.nickname}});
    }
  }
}, addGroup:function(a) {
  var b = this.querySelector("#addGroupForm");
  if ("execute" != a.detail.xaction || 0 != b.validate()) {
    this.viewId = "chatView", "cancel" != a.detail.xaction && (a = addUserForm.getData(), this.isEmpty(a.groupname) || this.$.websocket.sendMessage({command:"addGroup", parameter:{groupname:a.groupname}}));
  }
}, onMessageKeydown:function(a) {
  a.keyCode && 13 == a.keyCode && this.sendMessageInput();
}, chatEventListener:function(a) {
  var b = this.chatHash[this.chatId];
  if ("groupchat" !== b.type) {
    var c = a.type;
    "keyup" == c && 13 != a.keyCode && ((a = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input"), $(a).val() && 0 == b.isComposing) ? (b.isComposing = !0, this.checkPausingTimeout = setTimeout(this.checkPausing.bind(this), this.pausingTimeout), this.sendChatState("composing")) : $(a).val() || 1 != b.isComposing ? $(a).val() && 1 == b.isComposing && (clearTimeout(this.checkPausingTimeout), this.checkPausingTimeout = setTimeout(this.checkPausing.bind(this), this.pausingTimeout)) : 
    (b.isComposing = !1, this.sendChatState("active")));
    "focus" == c && (a = this.querySelector("#messageInput-" + this.chatId + " /deep/ #input"), $(a).val() ? this.sendChatState("paused") : this.sendChatState("active"));
    "blur" == c && this.sendChatState("inactive");
  }
}, checkPausing:function() {
  var a = this.chatHash[this.chatId];
  a.isComposing && (this.sendChatState("paused"), a.isComposing = !1);
}, sendOpen:function(a) {
  var b = {command:"open", participant:"dummy"};
  this.async(function() {
    this.$.websocket.sendMessage(b);
  }, null, 20);
}, sendJoin:function(a) {
  null == a && (a = this.chatHash[this.chatId]);
  "groupchat" === a.type && this.$.websocket.sendMessage({body:"", from:this.loginData.username, room:a.id});
}, sendChatState:function(a) {
  var b = this.chatHash[this.chatId], c = b.participant || $(this.querySelector("#participant-" + b.id)).val();
  this.isEmpty(c) ? "mixedchat" === b.type && console.error("no participant selected") : this.$.websocket.sendMessage({command:"chatState", participant:c, parameter:{state:a}});
}, sortRosterEntries:function(a, b) {
  return a.username < b.username ? -1 : a.username > b.username ? 1 : 0;
}, getMessageBoxTemplate:function() {
  return this.querySelector("#messageBoxTemplate-" + this.chatHash[this.chatId].id);
}, showError:function(a) {
  this.errorMessage = a;
  this.$.toast_error.show();
}, getTime:function() {
  return "[" + moment().format(" HH:mm.ss") + "]";
}, chatIdChanged:function() {
  this.querySelector("#chatPages");
  this.chatHash && (this.currentChat = this.chatHash[this.chatId]);
}, getNameFromJid:function(a) {
  return -1 == a.indexOf("@") ? a : a.split("@")[0];
}, getNameAndDomainFromJid:function(a) {
  return -1 == a.indexOf("/") ? a : a.split("/")[0];
}, setCurrentParticipant:function(a) {
  var b = this.chatHash[this.chatId];
  $(this.querySelector("#participant-" + b.id)).val(a.target.dataset.username);
  this.isCurrentParticipant = !0;
  b.chatState = "";
}, filterSingleChat:function(a) {
  for (var b = [], c = 0; c < a.length; c++) {
    this.chatHash[this.getNameFromJid(a[c].username)] || b.push(a[c]);
  }
  return b;
}, updateRoster:function() {
  this.rosterEntries = this.filterSingleChat(this.rosterEntries);
}, resetChatList:function() {
  this.arrayClear(this.chatList);
  var a = {id:"main", isComposing:!1, messages:[], type:"mixedchat"};
  this.currentChat = a;
  this.addChat(a);
}, removeAllChat:function() {
  this.splice("chatList", 1, this.chatList.length - 1);
  this.chatHash = this.toHash(this.chatList);
  this.set("chatId", "main");
}, removeChat:function(a) {
  for (var b = 0; b < this.chatList.length; b++) {
    if (a === this.chatList[b].id) {
      this.splice("chatList", b, 1);
      break;
    }
  }
  this.chatHash = this.toHash(this.chatList);
  this.set("chatId", "main");
}, addChat:function(a) {
  a.messages = [];
  a.presence = [];
  a.isComposing = !1;
  a.chatState = "";
  this.push("chatList", a);
  this.chatHash = this.toHash(this.chatList);
}, arrayClear:function(a) {
  0 != a.length && this.splice("chatList", 0, a.length);
}, getChatIndex:function(a) {
  for (var b = 0; b < this.chatList.length; b++) {
    if (a.id === this.chatList[b].id) {
      return b;
    }
  }
}, toHash:function(a) {
  for (var b = {}, c = 0; c < a.length; c++) {
    b[a[c].id] = a[c];
  }
  return b;
}, isChatType:function(a, b) {
  return a == b;
}, isView:function(a, b) {
  return a == b;
}, strcat:function(a, b) {
  return a + b;
}, isLang:function(a) {
  var b = Simpl4.Cache.getItem("lang");
  return a == b;
}, mapSomeErrors:function(a) {
  return 0 < a.indexOf("not-authorized") ? tr("chat.not-authorized") : 0 < a.indexOf("registration-required") ? tr("chat.registration-required") : a;
}, isEmpty:function(a) {
  return null == a || "" == a ? !0 : !1;
}});
Polymer({is:"simpl-processcontroller", properties:{namespace:{type:String}, name:{type:String}, parameter:{type:String}}, observers:["nameChanged(namespace,name,parameter)"], behaviors:[LobiboxBehavior], ready:function() {
  this.panelBackgroundColor = "black";
  this.panelHeader = "";
  this.formName = null;
  console.log("ProcessController.ready");
}, attached:function() {
  console.log("ProcessController.attached:", this.namespace + "/" + this.name + "/" + this.paramObject);
  this.name && this.namespace && this.paramObject && this.startByName(this.namespace, this.name, this.paramObject);
}, isParamsOk:function(a, b) {
  return null != this.namespace && null != this.formName;
}, nameChanged:function() {
  var a = null;
  this.parameter && this.parameter.startsWith("{") && (a = JSON.parse(this.parameter));
  this.paramObject = a || {};
}, startByName:function(a, b, c) {
  this.namespace = a || simpl4.util.BaseManager.getNamespace();
  var d = this.getProcessDefinition(a, b);
  null == d ? this.alert("ProcessController.workflow(" + a + "," + b + ") not found") : (console.log("ProcessController:startByName" + a + "/" + b), this.start(d, c));
}, start:function(a, b, c) {
  this.processDefinition = a;
  this.processName = a.name;
  this.namespace = this.processDefinition.key.substring(0, this.processDefinition.key.indexOf("_"));
  console.log("Start:" + JSON.stringify(a, null, 2));
  console.log("startFormResourceKey:" + this.processDefinition.startFormResourceKey);
  this.processDefinition.startFormResourceKey ? this.showForm(null, c) : (a = b || {}, a.processDefinitionId = this.processDefinition.id, this.completeActivity(a, null, c));
}, showForm:function(a, b) {
  b && (this.finishCallback = b);
  var c = null, d = null, e = null;
  null == a ? (c = this.processDefinition.startFormResourceKey, this.namespace = this.processDefinition.key.substring(0, this.processDefinition.key.indexOf("_")), e = this.processName) : (c = a.formResourceKey, a.processName && (this.processName = a.processName), e = this.processName, d = a.name, this.namespace = a.processDefinitionKey.substring(0, a.processDefinitionKey.indexOf("-")));
  if (null == c) {
    this.handleExecuteButton(null, a, null, null, b);
  } else {
    var f = this.getFormName(c);
    console.log("{task,process}Name:" + d + "/" + e);
    console.log("formResourceKey:" + c);
    console.log("formName:" + f);
    console.log("namespace:" + this.namespace);
    var g = this;
    this.actionCallback = function(c) {
      console.log("ProcessController.actionCallback:", c.detail);
      var d = c.detail.xaction, e = c.detail.xid, f = c.detail.data, h = c.detail.formVar;
      c = c.detail.valid;
      if ("execute" == d) {
        if (!c) {
          Lobibox.notify("error", {delay:6000, icon:"vaadin-icons:exclamation", msg:tr("process.form_incomplete")});
          return;
        }
        g.handleExecuteButton(f, a, h, e, b);
      }
      "cancel" == d && g.finishCallback && g.finishCallback();
    };
    var h = {}, l = null;
    null != a ? (h = this.getProcessVariables(this.namespace, c, a.processInstanceId), l = this.getMappedFormValues(a.id, a.processInstanceId)) : h.__namespace = simpl4.util.BaseManager.getNamespace();
    this.panelHeader = d ? tr(e) + "/" + d : tr(e);
    this.variables = h;
    this.formName = "empty";
    this.async(function() {
      this.formName = f;
      console.log("formName:", f);
      this.async(function() {
        var a = this.querySelector("#formid");
        console.log("form:", a);
        a.setData(l);
      }, 300);
    }, 100);
  }
}, getFormName:function(a) {
  return -1 == a.indexOf(",") ? a : a.split(",")[0];
}, handleExecuteButton:function(a, b, c, d, e) {
  var f = {}, g = {};
  a && Object.keys(a).forEach(function(b, c) {
    b.match("^__") || (g[b] = a[b]);
  });
  null != d && (g.actionButton = d);
  null == b && (f.processDefinitionId = this.processDefinition.id);
  c && (f[this.removeSuffix(c)] = g);
  console.log("processVariables:" + JSON.stringify(f, null, 2));
  this.completeActivity(f, b, e);
}, removeSuffix:function(a) {
  return a.match(/.*\.form$/) ? a.substring(0, a.length - 5) : a;
}, getMappedFormValues:function(a, b) {
  var c = function(a) {
    this.alert("<div style='width:100%;overflow:auto'>" + a + "</div>");
  }.bind(this), d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("process:getTaskFormProperties", {executionId:b, taskId:a});
  } catch (e) {
    this.alert("ProcessController.getMappedFormValues:" + e);
    c.call(this, e);
    return;
  }
  return d && d.values ? (a = JSON.stringify(d.values), console.warn("values:" + a), d.values) : null;
}, getProcessVariables:function(a, b, c) {
  var d = null;
  try {
    d = simpl4.util.Rpc.rpcSync("process:getVariables", {namespace:a, formId:b, executionId:c});
  } catch (e) {
    this.alert("ProcessController.getProcessVariables:" + e);
    return;
  }
  return d;
}, completeActivity:function(a, b, c) {
  JSON.stringify(a);
  var d = function(a) {
    var d = JSON.stringify(a);
    console.log("ret:" + d);
    d = a.id;
    b && (d = JSON.stringify(b), console.log("task:" + d), d = b.executionId);
    (d = this.getTasks(d)) && 0 < d.total ? this.showForm(d.data[0], c) : b ? this.finish(tr("processes.taskform.started") + " -> ID" + b.processInstanceId, c) : this.finish(tr("processes.startform.started") + " -> ID" + (b ? b.processInstanceId : a.id), c);
  }.bind(this), e = function(a) {
    console.log("ret:" + JSON.stringify(a));
    a = a.message ? a.message : a.toString();
    a = a.replace(/\|/g, "<br/>");
    a = a.replace(/Script.*groovy: [0-9]{0,4}:/g, "<br/><br/>");
    a = a.replace(/ for class: Script[0-9]{1,2}/g, "");
    a = a.replace(/Script[0-9]{1,2}/g, "");
    a = a.replace(/Application error 500:/g, "");
    a = a.replace(/:java.lang.RuntimeException/g, "");
    a = a.replace(/:Line:/g, "<br/>Line:");
    a = a.replace(/: {0,2}Line:/g, "<br/>Line:");
    a = simpl4.util.Text.explode(a, 100);
    a = "<b>" + tr("processes." + (null != b ? "taskform" : "startform") + ".notstarted") + ": </b><pre style='font-size:10px'>" + a + "</pre>";
    this.alert(a, "large");
    null != b && this.showForm(b, c);
  }.bind(this), f = null;
  if (null == b) {
    return f = {service:"process", method:"startProcessInstance", parameter:{namespace:this.namespace ? this.namespace : simpl4.util.BaseManager.getNamespace(), processDefinitionId:a.processDefinitionId, processDefinitionKey:a.processDefinitionKey, processDefinitionName:a.processDefinitionName, businessKey:a.businessKey, startParams:a}, async:!1, context:this, failed:e, completed:d}, simpl4.util.Rpc.rpcAsync(f);
  }
  this.completeTask(b.id, a, d, e);
}, completeTask:function(a, b, c, d) {
  var e = function(a) {
    if (a) {
      for (var b = "", c = 0; c < a.length; c++) {
        var d = a[c];
        if (d.time) {
          var e = new Date;
          e.setTime(d.time);
          var f = simpl4.util.BaseManager.getLanguage();
          d.message = d.message.replace("{0}", e.toString("de" == f ? "d.M.yyyy" : "M/d/yyyy"));
        }
        d.message && d.message.match(/^@/) && (d.message = tr(d.message.substring(1)));
        d.message && d.message.match(/^%/) && (d.message = tr(d.message.substring(1)));
        b = d.path ? b + (d.path + " : " + d.message + "<br />") : b + (d.message + "<br />");
      }
      this.alert(b);
    }
  }.bind(this), f = null;
  try {
    f = simpl4.util.Rpc.rpcSync("process:executeTaskOperation", {taskId:a, operation:"complete", startParams:b});
    console.error("RET:" + f.success);
    if (!0 === f.success) {
      return c.call(this, f), f;
    }
    e(f.errors);
  } catch (g) {
    d.call(this, g);
    return;
  }
  return f;
}, getTasks:function(a) {
  var b = null, c = simpl4.util.BaseManager.getUser();
  try {
    b = simpl4.util.Rpc.rpcSync("process:getTasks", {queryParams:{assignee:c, processInstanceId:a}, listParams:{size:1000}});
  } catch (d) {
    this.alert("ProcessController.getTasks:" + d);
    return;
  }
  return b;
}, getProcessDefinition:function(a, b) {
  var c = null;
  try {
    c = simpl4.util.Rpc.rpcSync("process:getProcessDefinitions", {namespace:a ? a : simpl4.util.BaseManager.getNamespace(), version:-1, key:b});
  } catch (d) {
    this.alert("ProcessController.getProcessDefinitions:" + d);
    return;
  }
  a = c.data;
  return 0 < a.length ? a[0] : null;
}, finish:function(a, b) {
  this.notify(a, "success", 8000);
  this.async(function() {
    b();
  }, 500);
}, alert:function(a, b) {
  Lobibox.notify("error", {size:b || "normal", delay:6000, icon:"vaadin-icons:exclamation", msg:a});
}});
Polymer({is:"simpl-processes", behaviors:[DataTablesBehavior, ModernizrBehavior, TranslationsBehavior], properties:{namespace:{type:String}}, observers:["selectionChanged(selection)"], attached:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.panelBackgroundColor = "black";
  this.panelHeader = tr("tr.menu.process_list");
  this.dtMeta = null;
  this.pageSelected = 0;
  this.action = tr("processexplorer.definition.start_workflow");
  this.currentProcess = null;
  this.meta = this.getMeta();
  this.data = this.getProcessDefinitions();
}, startProcess:function(a) {
  var b = this;
  this.$.processController.start(this.selection[0], {}, function() {
    b.pageSelected = 0;
  });
  this.async(function() {
    b.pageSelected = 1;
  }, 200);
}, selectionChanged:function() {
  this.currentProcess = this.selection[0].key;
}, getCurrentProcessDescription:function() {
  return this.action + " (" + this.currentProcess + ")";
}, getMeta:function() {
  var a = [], b = {data:"id", title:"Id"};
  a.push(b);
  b = {data:"key"};
  b.title = tr("tasks.table.processName");
  a.push(b);
  return a;
}, getProcessDefinitions:function() {
  var a = null, b = this.namespace || simpl4.util.BaseManager.getNamespace();
  try {
    a = simpl4.util.Rpc.rpcSync("process:getProcessDefinitions", {namespace:b, version:-1});
  } catch (c) {
    alert("ProcessDefinitions.getProcessDefinitions:" + c);
    return;
  }
  return a.data;
}});
Polymer({is:"simpl-tasks", behaviors:[DataTablesBehavior, StyleScopeBehavior, ModernizrBehavior, TranslationsBehavior], properties:{namespace:{type:String}}, observers:["taskListModeSelectedChanged(taskListModeSelected)", "selectionChanged(selection)"], ready:function() {
  this.entryAnimation = "slide-from-right-animation";
  this.exitAnimation = "slide-right-animation";
  this.panelBackgroundColor = "black";
  this.panelHeader = tr("tasks.table.assigned");
  this.meta = null;
  this.action = tr("tasks.table.complete");
  this.currentTask = null;
  this.pageSelected = 0;
  channel.subscribe("route.changed", function(a) {
    "tasklist" == a.route && 0 == this.pageSelected && (console.debug("TaskList active:" + this.taskListModeSelected), this.taskListModeSelectedChanged(0 == this.taskListModeSelected ? 0 : 1));
  }.bind(this));
}, attached:function() {
  this.meta = this.getMeta();
  this.taskListModeSelected = 1;
}, startTask:function(a) {
  console.log("startTask:", this.selection[0]);
  a = this.selection[0];
  a.fromTaskList = !0;
  var b = this;
  this.$.processController.showForm(a, function() {
    b.async(function() {
      b.pageSelected = 0;
      b.taskListModeSelectedChanged(0 == this.taskListModeSelected ? 0 : 1);
    }, 50);
  });
  this.async(function() {
    b.pageSelected = 1;
  }, 200);
}, selectionChanged:function() {
  var a = this.selection[0];
  this.currentTask = a.processName + " / " + a.name;
}, taskListModeSelectedChanged:function(a) {
  this.action = 1 == a ? tr("tasks.task.complete") : tr("tasks.task.claim");
  this.panelHeader = 1 == a ? tr("tasks.table.assigned") : tr("tasks.table.not_assigned");
  this.data = this.getTasks(1 == a ? "assigned" : "notassigned");
  this.currentTask = null;
}, getCurrentTaskDescription:function() {
  return this.action + " (" + this.currentTask + ")";
}, getMeta:function() {
  var a = [], b = {data:"name"};
  b.title = tr("tasks.table.name");
  a.push(b);
  b = {data:"processName"};
  b.title = tr("tasks.table.processName");
  a.push(b);
  b = {data:"processTenantId"};
  b.title = tr("tasks.table.processCategory");
  a.push(b);
  b = {data:"id"};
  b.title = tr("tasks.table.taskid");
  a.push(b);
  b = {data:"processInstanceId"};
  b.title = tr("tasks.table.processInstanceId");
  a.push(b);
  b = {data:"description"};
  b.title = tr("tasks.table.description");
  a.push(b);
  b = {data:"createTime"};
  b.title = tr("tasks.table.time");
  a.push(b);
  return a;
}, getTasks:function(a) {
  this.userid = simpl4.util.BaseManager.getUser();
  try {
    var b = {assignee:this.userid, tenantId:this.namespace};
    "notassigned" == a && (b = {candidate:this.userid, tenantId:this.namespace});
    a = [];
    for (var c = simpl4.util.Rpc.rpcSync("process:getTasks", {queryParams:b, listParams:{size:1000}}).data, b = 0; b < c.length; b++) {
      var d = c[b];
      null == d.assignee ? (d.assigned = tr("tasks.table.not_assigned"), d.action = tr("tasks.table.claim")) : (d.assigned = d.assignee, d.action = tr("tasks.table.complete"));
      a.push(d);
    }
    return this.dataSet = a;
  } catch (e) {
    console.log("Tasks.getTasks:", e), alert("Tasks.getTasks:" + e);
  }
}});
DmnFieldBehavior = {behaviors:[Polymer.IronFormElementBehavior, Polymer.IronControlState], observers:["setValue(value)", "expressionValueChanged(expressionValue)"], attached:function() {
  this.appendItems();
}, focus:function() {
  this.$.expressionInput.focus();
}, appendItems:function() {
  for (var a = this.items, b = this.$.operationSelect; b.firstChild;) {
    b.removeChild(b.firstChild);
  }
  for (var c = 0; c < a.length; c++) {
    var d = a[c], e = document.createElement("option"), f = document.createTextNode(d.label);
    e.value = d.value;
    Polymer.dom(e).appendChild(f);
    Polymer.dom(b).appendChild(e);
  }
}, expressionValueChanged:function() {
  this.value || (this.value = {});
  this.value.expr = this.expressionValue;
}, operationValueChanged:function() {
  this.operationValue = this.$.operationSelect.value;
  this.value || (this.value = {});
  this.value.op = this.operationValue;
}, setValue:function(a) {
  a ? this.async(function() {
    this.$.operationSelect.value = this.getOp(a.op);
    this.expressionValue = a.expr;
  }, 10) : this.async(function() {
    this.$.operationSelect.value = this.getOp(null);
  }, 10);
}, getValue:function() {
  return {op:this.operationValue, expr:this.expressionValue};
}, getOp:function(a) {
  return a || this.items[0].value;
}};
Polymer({is:"dmn-string", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:"==~", label:"==~"}, {value:"startsWith", label:"startsWith"}, {value:"endsWith", label:"endsWith"}, {value:"contains", label:"contains"}, {value:"equalsIgnoreCase", label:"equalsIgnoreCase"}];
}});
Polymer({is:"dmn-integer", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:">", label:">"}, {value:"<", label:"<"}, {value:">=", label:">="}, {value:"<=", label:"<="}];
}});
Polymer({is:"dmn-date", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"=", label:"="}, {value:">", label:">"}, {value:"<", label:"<"}];
}});
Polymer({is:"dmn-list", behaviors:[DmnFieldBehavior], ready:function() {
  this.items = [{value:"oneOf", label:"oneOf"}, {value:"notOneOf", label:"notOneOf"}];
}});
Polymer({is:"dmn-paramdialog", behaviors:[DialogBehavior, TranslationsBehavior], onTap:function() {
  if (this.$.formId.validate()) {
    console.log("val");
    var a = this.$.formId.getData();
    console.log("fire:" + this.type + "paramdialog-ok");
    this.fire(this.type + "paramdialog-ok", {index:this.index, data:a});
  }
}, close:function(a) {
  this.destroyDialog(this.$.dialogId);
}, open:function(a, b) {
  this.formname = "dmn" + a + ".form";
  this.type = a;
  this.index = b;
  this.icon = "input" === this.type ? "icons:file-download" : "icons:file-upload";
  this.$.formId.setData({});
  this.openDialog(this.$.dialogId, "inherit");
}});
Polymer({is:"dmn-testdialog", behaviors:[DialogBehavior, TranslationsBehavior], isBoolean:function(a) {
  return "boolean" == a.variableType;
}, isString:function(a) {
  return "boolean" != a.variableType && "date" != a.realType;
}, isDate:function(a) {
  return "date" == a.realType;
}, onTest:function() {
  for (var a = {}, b = 0; b < this.decision.columns.conditions.length; b++) {
    var c = this.decision.columns.conditions[b], d = this.inputArea.querySelector("#" + c.variableName).getValue(), e = null;
    "string" == c.variableType && (e = "");
    null == d && (d = e);
    a[c.variableName] = "date" == c.realType ? moment(d).valueOf() : "integer" == c.variableType ? parseInt(d) : "double" == c.variableType ? parseFloat(d) : d;
  }
  console.log("variables:", a);
  this.doTest(a);
}, doTest:function(a) {
  var b = {service:"dmn", method:"executeDecision", parameter:{namespace:"mdm", variables:a, decisionString:JSON.stringify(this.decision)}, async:!0, context:this, failed:function(a) {
    console.error("executeDecision:", a);
    if (null != a) {
      this.$.toastId.show(tr("error"), "error", "10000");
      try {
        0 < a.message.indexOf("MultipleCompilationErrors") ? this.testResult = a.message.substring(this.getPosition(a.message, ":", 5) + 1) : this.testResult = a.message.substring(this.getPosition(a.message, ":", 2) + 1);
      } catch (d) {
      }
    }
  }, completed:function(b) {
    console.log("executeDecision.ret:", b);
    this.$.toastId.show(tr("Test ok"), "success", "10000");
    b = JSON.stringify({vars:a, result:b}, null, 2);
    this.testResult = b.substr(2, b.length - 3);
  }};
  simpl4.util.Rpc.rpcAsync(b);
}, getPosition:function(a, b, c) {
  return a.split(b, c).join(b).length;
}, onClose:function() {
  this.destroyDialog(this.$.dialogId);
}, open:function(a) {
  this.decision = a;
  this.inputArea = this.$.inputAreaId;
  this.openDialog(this.$.dialogId, "inherit");
}});
(function() {
  var a = [].indexOf || function(a) {
    for (var b = 0, c = this.length; b < c; b++) {
      if (b in this && this[b] === a) {
        return b;
      }
    }
    return -1;
  };
  var b = function() {
    function b(a, c) {
      var d;
      this.config = a;
      this.actionStack = c;
      this.dirtyCells = [];
      this.dirtyRows = [];
      this.copiedGridChange = this.config.copiedGridChange;
      this.uniqueValueKey = this.config.uniqueValueKey;
      this.rowIndex = this.config.rowIndex;
      this.useFixedHeaders = this.config.useFixedHeaders;
      this.element = this.config.element;
      this.contextMenu = new b.ContextMenu(this);
      this.themeName = this.config.themeName;
      this.customTheme = this.config.themeTemplate;
      this.theme = new b.Theme(this.themeName, this.customTheme);
      this.lastDragOver = this.draggingRow = null;
      this.lastDragOverIsBeforeFirstRow = !1;
      this.lastClickCell = null;
      this.headers = [];
      this.rows = [];
      this.subtotalRows = [];
      this.cols = [];
      this.source = this.config.rows;
      this.redCells = [];
      this.activeCells = [];
      this.openCell = this.selectedCol = this.selectionEnd = this.selectionStart = this.copiedCells = null;
      this.state = "ready";
      this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      this.topOffset = this.config.topOffset ? this.config.topOffset : 0;
      if (this.config.custom) {
        a = this.config.custom;
        for (d in a) {
          c = a[d], d in this.config.custom && this.set(d, c);
        }
        delete this.config.custom;
      }
      this.config.initialize && this.init();
      this.actionStack || (this.actionStack = new b.ActionStack(this));
      this.config.selectedCell && ((d = this.getCell(this.config.selectedCell[0], this.config.selectedCell[1])) && d.makeActive(), this.config.selectedCell = void 0);
    }
    b.prototype.init = function() {
      this.config.beforeInit && this.config.beforeInit();
      b.Hook.prototype.initTableHooks(this);
      this.build();
      this.events();
      this.render();
      this.removeBrowserHighlighting();
      this.rowIndex || this.setRowIndexes();
      this.config.afterInit && this.config.afterInit();
    };
    b.prototype.setRowIndexes = function() {
      var a, b;
      if (!this.config.uniqueValueKey) {
        return !1;
      }
      var c = {};
      var g = this.config.uniqueValueKey;
      var h = this.source;
      var l = a = 0;
      for (b = h.length; a < b; l = ++a) {
        var n = h[l];
        c[l] = n[g];
      }
      return this.rowIndex = c;
    };
    b.prototype.removeBrowserHighlighting = function() {
      var a;
      var b = "-webkit-touch-callout -webkit-user-select -khtml-user-select -moz-user-select -ms-user-select user-select".split(" ");
      var c = [];
      var g = 0;
      for (a = b.length; g < a; g++) {
        var h = b[g];
        c.push(this.tableEl.style[h] = "none");
      }
      return c;
    };
    b.prototype.build = function() {
      var a, c;
      var f = document.createElement("tr");
      if (this.config.includeRowHandles) {
        var g = document.createElement("th");
        f.appendChild(g);
      }
      var h = this.config.cols;
      g = a = 0;
      for (c = h.length; a < c; g = ++a) {
        g = h[g], g = new b.Column(g, this), this.cols.push(g), f.appendChild(g.element);
      }
      this.thead = document.createElement("thead");
      var l = this;
      this.thead.ondragenter = function() {
        var a;
        l.lastDragOverIsBeforeFirstRow = !0;
        if (a = l.lastDragOver) {
          return a.element.style.borderBottom = a.oldBorderBottom, a.element.style.borderTop = l.theme.borders.dragBorderStyle;
        }
      };
      this.thead.ondragleave = function() {
        var a = l.rows[0];
        return a.element.style.borderTop = a.oldBorderTop;
      };
      this.thead.appendChild(f);
      f = document.createElement("tbody");
      h = this.source;
      g = a = 0;
      for (c = h.length; a < c; g = ++a) {
        g = h[g];
        switch(g.gridEditRowType) {
          case "static":
            g = new b.StaticRow(g, this);
            break;
          case "subtotal":
            g = new b.SubTotalRow(g, this);
            break;
          case "heading":
            g = new b.HeaderRow(g, this);
            break;
          case "custom":
            var n = g.customClassName || "GenericRow";
            g = new b[n](g, this);
            break;
          default:
            g = new b.GenericRow(g, this);
        }
        this.rows.push(g);
        f.appendChild(g.element);
      }
      g = document.createElement("table");
      b.Utilities.prototype.setAttributes(g, {id:"editable-grid", "class":this.config.tableClass});
      g.appendChild(this.thead);
      g.appendChild(f);
      this.tableEl = g;
      if (this.useFixedHeaders) {
        return this.element.style.overflowY = "scroll", b.Utilities.prototype.fixHeaders(this), window.addEventListener("resize", function() {
          return b.Utilities.prototype.fixHeaders(l);
        });
      }
    };
    b.prototype.rebuild = function(a) {
      var b;
      null == a && (a = null);
      this.contextMenu.hide();
      var c = Object.create(this.config);
      c.rowIndex = this.rowIndex;
      if (null !== a) {
        for (b in a) {
          c[b] = a[b];
        }
      }
      c.copiedGridChange = this.copiedGridChange;
      a = this.actionStack;
      this.destroy();
      return this.constructor(c, a);
    };
    b.prototype.hideControl = function() {
      if (this.openCell) {
        return this.openCell.edit(this.openCell.control.value);
      }
    };
    b.prototype.events = function() {
      var c = this;
      document.onkeydown = function(b) {
        var d;
        if (c.activeCell()) {
          var e = b.keyCode;
          var h = b.shiftKey;
          var l = b.ctrlKey;
          if ((d = b.metaKey) || l) {
            if (e && 91 !== e && 92 !== e && (d = c.contextMenu.actionCallbacks.byControl[e])) {
              return b.preventDefault(), c.contextMenu.execute(d, b);
            }
          } else {
            switch(e) {
              case 8:
                c.openCell || (b.preventDefault(), c["delete"]());
                break;
              case 9:
                return b.preventDefault(), h ? c.moveTo(c.previousCell()) : c.moveTo(c.nextCell());
              case 13:
                c.activeCell().onReturnKeyPress();
                break;
              case 16:
                break;
              case 32:
                c.openCell || (b.preventDefault(), c.activeCell().onSpaceKeyPress());
                break;
              case 37:
                c.moveTo(c.previousCell());
                break;
              case 38:
                c.moveTo(c.aboveCell());
                break;
              case 39:
                c.activeCell().isBeingEdited() || c.moveTo(c.nextCell());
                break;
              case 40:
                c.moveTo(c.belowCell());
                break;
              case 46:
                c.openCell || (b.preventDefault(), c["delete"]());
                break;
              default:
                return 0 <= a.call([96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], e) && (e -= 48), c.openCellAndPopulateInitialValue(h, e);
            }
          }
        }
      };
      window.onresize = function() {
        if (c.openCell) {
          return b.Utilities.prototype.setStyles(c.openCell.control, c.openCell.position());
        }
      };
      window.onscroll = function() {
        if (c.openCell) {
          return c.openCell.reposition();
        }
      };
      this.element.onscroll = function(a) {
        c.openCell && c.openCell.reposition();
        if (c.useFixedHeaders) {
          return b.Utilities.prototype.repositionFixedHeader(c);
        }
      };
      this.tableEl.oncontextmenu = function(a) {
        return !1;
      };
      document.oncontextmenu = function(a) {
        return c.contextMenu.element === a.target ? !1 : !0;
      };
      return document.onclick = function(a) {
        var d = c.firstActiveCell();
        c.isDescendant(a.target || c.contextMenu.isVisible()) || !1 !== (null != d && 0 <= Polymer.dom(a).path.indexOf(d.control)) || (null != d && d.isBeingEdited() && null != d && d.edit(null != d ? d.control.value : void 0), b.Utilities.prototype.clearActiveCells(c));
        return c.contextMenu.hide();
      };
    };
    b.prototype.render = function() {
      this.element.hasChildNodes() && (this.element = this.config.element || document.querySelectorAll("#gridedit")[0]);
      return this.element.appendChild(this.tableEl);
    };
    b.prototype.getCell = function(a, b) {
      try {
        return this.rows[a].cells[b];
      } catch (f) {
      }
    };
    b.prototype.set = function(a, b) {
      if (void 0 !== a) {
        return this.config[a] = b;
      }
    };
    b.prototype.activeCell = function() {
      return 1 < this.activeCells.length ? this.activeCells : this.activeCells[0];
    };
    b.prototype.firstActiveCell = function() {
      return this.activeCells[0];
    };
    b.prototype.nextCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.next() : void 0;
    };
    b.prototype.previousCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.previous() : void 0;
    };
    b.prototype.aboveCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.above() : void 0;
    };
    b.prototype.belowCell = function() {
      var a;
      return null != (a = this.firstActiveCell()) ? a.below() : void 0;
    };
    b.prototype.moveTo = function(a, b) {
      var c;
      if (a) {
        void 0 === b && (b = a.table.firstActiveCell());
        var d = a.table.getDirection(b, a);
        a.beforeNavigateTo && (c = a.beforeNavigateTo(a, b, d));
        !1 !== c && (a.isVisible() || (d = a.table.activeCell().address[0], c = a.address[0], b = 1, c < d && (b = -1), window.scrollBy(0, (null != a ? a.position().height : NaN) * b)), a.makeActive());
      }
      return !1;
    };
    b.prototype.getDirection = function(a, b) {
      var c;
      var d = a.address[0];
      var e = b.address[0];
      var l = a.address[1];
      var n = b.address[1];
      d === e ? l > n ? c = "left" : l < n ? c = "right" : console.log("Cannot calculate direction going from cell " + a.address + " to cell " + b.address) : d > e ? c = "up" : d < e ? c = "down" : console.log("Cannot calculate direction going from cell " + a.address + " to cell " + b.address);
      return c;
    };
    b.prototype.edit = function(a, b) {
      null == b && (b = null);
      if (null !== b) {
        return null != a ? a.cellTypeObject.edit(b) : void 0;
      }
      a.cellTypeObject.edit();
      return !1;
    };
    b.prototype["delete"] = function() {
      var a;
      var b = this.activeCells;
      var c = 0;
      for (a = b.length; c < a; c++) {
        var g = b[c];
        g.editable && g.value("");
      }
      return !0;
    };
    b.prototype.clearActiveCells = function() {
      return b.Utilities.prototype.clearActiveCells(this);
    };
    b.prototype.setSelection = function() {
      var a, b, c, g, h;
      if (this.selectionStart && this.selectionEnd && this.selectionStart !== this.selectionEnd) {
        var l = this.activeCells;
        var n = 0;
        for (a = l.length; n < a; n++) {
          var p = l[n];
          p.showInactive();
        }
        this.activeCells = [];
        var q = function() {
          g = [];
          for (var a = b = this.selectionStart.address[0], c = this.selectionEnd.address[0]; b <= c ? a <= c : a >= c; b <= c ? a++ : a--) {
            g.push(a);
          }
          return g;
        }.apply(this);
        n = function() {
          h = [];
          for (var a = c = this.selectionStart.address[1], b = this.selectionEnd.address[1]; c <= b ? a <= b : a >= b; c <= b ? a++ : a--) {
            h.push(a);
          }
          return h;
        }.apply(this);
        var m = 0;
        for (a = q.length; m < a; m++) {
          var r = q[m];
          var u = 0;
          for (l = n.length; u < l; u++) {
            p = n[u], this.rows[r].cells[p].addToSelection();
          }
        }
      }
    };
    b.prototype.data = function() {
      var a, b;
      var c = [];
      var g = this.rows;
      var h = 0;
      for (a = g.length; h < a; h++) {
        var l = g[h];
        var n = [];
        var p = l.cells;
        var q = 0;
        for (b = p.length; q < b; q++) {
          l = p[q], n.push(l.value());
        }
        c.push(n);
      }
      return c;
    };
    b.prototype.repopulate = function() {
      var a, b;
      var c = this.rows;
      var g = [];
      var h = 0;
      for (b = c.length; h < b; h++) {
        var l = c[h];
        g.push(function() {
          var b;
          var c = l.cells;
          var d = [];
          var e = 0;
          for (b = c.length; e < b; e++) {
            a = c[e], d.push(a.value(a.source[a.valueKey] || a.col.defaultValue, !1));
          }
          return d;
        }());
      }
      return g;
    };
    b.prototype.destroy = function() {
      var a;
      this.useFixedHeaders && this.fixedHeader && this.fixedHeader.table && this.fixedHeader.table.parentNode && document.body.removeChild(this.fixedHeader.table);
      this.element.removeChild(this.tableEl);
      var b = [];
      for (a in this) {
        b.push(delete this[a]);
      }
      return b;
    };
    b.prototype.isDescendant = function(a) {
      for (a = a.parentNode; null != a;) {
        if (a === this.tableEl) {
          return !0;
        }
        a = a.parentNode;
      }
      return !1;
    };
    b.prototype.addToStack = function(a) {
      return this.actionStack.addAction(a);
    };
    b.prototype.undo = function() {
      return this.actionStack.undo();
    };
    b.prototype.redo = function() {
      return this.actionStack.redo();
    };
    b.prototype.moveRow = function(a, c, f) {
      null == f && (f = !0);
      var d = this.source[a];
      if (b.Hook.prototype.run(this, "beforeMoveRow", a, c)) {
        return this.source.splice(a, 1), this.source.splice(c, 0, d), f && this.addToStack({type:"move-row", oldIndex:a, newIndex:c}), this.rebuild({rows:this.source, initialize:!0, selectedCell:[c, 0]}), this.setDirtyRows(), b.Hook.prototype.run(this, "afterMoveRow", a, c);
      }
    };
    b.prototype.moveRows = function(a, c, f, g) {
      null == g && (g = !0);
      if (b.Hook.prototype.run(this, "beforeMoveRows", a, c)) {
        var d = a;
        var e = c;
        var n = a + f;
        if (c > a) {
          if (c < n) {
            this.clearActiveCells();
            return;
          }
          c = c - f + 1;
        } else {
          d = a + f - 1;
        }
        var p = this.source.splice(a, f);
        for (n = p.pop(); n;) {
          this.source.splice(c, 0, n), n = p.pop();
        }
        g && this.addToStack({type:"move-rows", modifiedRowToMoveIndex:d, modifiedNewIndex:c, numRows:f, originalRowToMoveIndex:a, originalNewIndex:e});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[c, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterMoveRows", a, c, f);
      }
    };
    b.prototype.addRow = function(a, c, f) {
      var d;
      null == c && (c = !0);
      null == f && (f = !1);
      if (b.Hook.prototype.run(this, "beforeAddRow", a, f)) {
        if (f) {
          var e = f;
        } else {
          e = {};
          var l = this.cols;
          var n = 0;
          for (d = l.length; n < d; n++) {
            var p = l[n];
            e[p.valueKey] = p.defaultValue || "";
          }
        }
        a || 0 === a ? this.source.splice(a, 0, e) : (a = this.source.length - 1, this.source.push(e));
        c && this.addToStack({type:"add-row", index:a, rowObject:f});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterAddRow", a, f);
      }
    };
    b.prototype.addRows = function(a, c, f) {
      var d, e, l;
      null == c && (c = !0);
      null == f && (f = []);
      if (b.Hook.prototype.run(this, "beforeAddRows", a, f)) {
        var n = d = 0;
        for (e = f.length; d < e; n = ++d) {
          var p = f[n];
          n = a + n;
          if (p) {
            var q = p;
          } else {
            q = {};
            var m = this.cols;
            var r = 0;
            for (l = m.length; r < l; r++) {
              p = m[r], q[p.valueKey] = p.defaultValue || "";
            }
          }
          n || 0 === n ? this.source.splice(n, 0, q) : this.source.push(q);
        }
        c && this.addToStack({type:"add-rows", index:a, rowObjects:f});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterAddRows", a, f);
      }
    };
    b.prototype.addScatteredRows = function(a) {
      var b;
      var c = Object.keys(a);
      c = c.sort();
      var d = 0;
      for (b = c.length; d < b; d++) {
        var h = c[d];
        var l = a[h];
        this.source.splice(h, 0, l);
      }
      this.rebuild({rows:this.source, initialize:!0, selectedCell:[h, 0]});
      return this.setDirtyRows();
    };
    b.prototype.insertBelow = function() {
      var a = this.contextMenu.getUpperLeftPasteCell();
      if (b.Hook.prototype.run(this, "beforeInsertBelow", a)) {
        return this.addRow(a.address[0] + 1), this.setDirtyRows(), b.Hook.prototype.run(this, "afterInsertBelow", a);
      }
    };
    b.prototype.insertAbove = function() {
      var a = this.contextMenu.getUpperLeftPasteCell();
      if (b.Hook.prototype.run(this, "beforeInsertAbove", a)) {
        return this.addRow(a.address[0]), this.setDirtyRows(), b.Hook.prototype.run(this, "afterInsertAbove", a);
      }
    };
    b.prototype.removeRow = function(a, c) {
      null == c && (c = !0);
      if (b.Hook.prototype.run(this, "beforeRemoveRow", a)) {
        var d = this.source[a];
        this.source.splice(a, 1);
        c && this.addToStack({type:"remove-row", index:a, rowObject:d});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[a, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterRemoveRow", a);
      }
    };
    b.prototype.removeRows = function(a, c) {
      var d;
      null == c && (c = !0);
      if (b.Hook.prototype.run(this, "beforeRemoveRows", a)) {
        a = a.sort(function(a, b) {
          return b - a;
        });
        var e = {};
        var h = 0;
        for (d = a.length; h < d; h++) {
          var l = a[h];
          var n = this.source[l];
          e[l] = n;
          this.source.splice(l, 1);
        }
        c && this.addToStack({type:"remove-rows", rowIndexes:a, rowObjects:e});
        this.rebuild({rows:this.source, initialize:!0, selectedCell:[l, 0]});
        this.setDirtyRows();
        return b.Hook.prototype.run(this, "afterRemoveRows", a);
      }
    };
    b.prototype.selectRow = function(a, c) {
      if (this.activeCell() && a) {
        var d = this.activeCells[0].address[0];
        var e = a.shiftKey;
        var h = a.ctrlKey;
        a = a.metaKey;
        h || a || b.Utilities.prototype.clearActiveCells(this);
        if (e) {
          if (0 > d - c) {
            e = this.rows.slice(d, +c + 1 || 9e9);
            a = [];
            h = 0;
            for (d = e.length; h < d; h++) {
              c = e[h], a.push(c.select());
            }
            return a;
          }
          e = this.rows.slice(c, +d + 1 || 9e9);
          a = [];
          h = 0;
          for (d = e.length; h < d; h++) {
            c = e[h], a.push(c.select());
          }
          return a;
        }
        c = this.rows[c];
        return c.select();
      }
      c = this.rows[c];
      return c.select();
    };
    b.prototype.calculateSubtotals = function() {
      var a;
      var b = this.subtotalRows;
      var c = [];
      var g = 0;
      for (a = b.length; g < a; g++) {
        var h = b[g];
        c.push(h.calculate());
      }
      return c;
    };
    b.prototype.openCellAndPopulateInitialValue = function(a, c) {
      if (!this.openCell) {
        return this.activeCell().onKeyPress(b.Utilities.prototype.valueFromKey(c, a));
      }
    };
    b.prototype.checkIfCellIsDirty = function(a) {
      var b = this.dirtyCells.indexOf(a);
      if (-1 === b) {
        if (a.isDirty()) {
          return this.dirtyCells.push(a);
        }
      } else {
        if (!a.isDirty()) {
          return this.dirtyCells.splice(b, 1);
        }
      }
    };
    b.prototype.setDirtyRows = function() {
      var a;
      if (!this.config.uniqueValueKey) {
        return !1;
      }
      this.dirtyRows = [];
      var b = this.uniqueValueKey;
      var c = this.rowIndex;
      var g = [];
      for (a in c) {
        var h = c[a];
        h !== this.source[a][b] ? g.push(this.dirtyRows.push(a)) : g.push(void 0);
      }
      return g;
    };
    b.prototype.isDirty = function() {
      return 0 < this.dirtyRows.length || 0 < this.dirtyCells.length;
    };
    b.prototype.addUndoAction = function(a, b) {
      return this.actionStack.addUndo(a, b);
    };
    b.prototype.addRedoAction = function(a, b) {
      return this.actionStack.addRedo(a, b);
    };
    return b;
  }();
  ("undefined" !== typeof exports && null !== exports ? exports : window).GridEdit = b;
}).call(this);
(function() {
  GridEdit.ActionStack = function() {
    function a(a) {
      this.table = a;
      this.userDefinedActions = {undo:{}, redo:{}};
      this.index = -1;
      this.actions = [];
    }
    a.prototype.getCell = function(a) {
      return this.table.getCell(a.address[0], a.address[1]);
    };
    a.prototype.addAction = function(a) {
      0 < this.actions.length && this.index < this.actions.length - 1 && (this.actions = this.actions.splice(0, this.index + 1));
      this.actions.push(a);
      return this.index++;
    };
    a.prototype.addUndo = function(a, c) {
      return this.userDefinedActions.undo[a] = c;
    };
    a.prototype.addRedo = function(a, c) {
      return this.userDefinedActions.redo[a] = c;
    };
    a.prototype.undo = function() {
      var a, c;
      if (-1 < this.index) {
        this.index--;
        var d = this.actions[this.index + 1];
        switch(d.type) {
          case "cell-edit":
            var e = this.getCell(d);
            e.value(d.oldValue, !1);
            break;
          case "cut":
            d.grid.undo(!1, !1);
            break;
          case "paste-pasteGrid":
            d.pasteGrid.undo(d.x, d.y);
            break;
          case "paste-copyGrid":
            d.grid.undo(d.x, d.y);
            break;
          case "fill":
            d.grid.undo(!1, !1);
            break;
          case "add-row":
            this.table.removeRow(d.index, !1);
            break;
          case "remove-row":
            this.table.addRow(d.index, !1, d.rowObject);
            break;
          case "move-row":
            this.table.moveRow(d.newIndex, d.oldIndex, !1);
            break;
          case "add-rows":
            var f = [];
            e = a = 0;
            for (c = d.rowObjects.length; 0 <= c ? a < c : a > c; e = 0 <= c ? ++a : --a) {
              f.push(e + d.index);
            }
            this.table.removeRows(f, !1);
            break;
          case "remove-rows":
            this.table.addScatteredRows(d.rowObjects);
            break;
          case "move-rows":
            this.table.moveRows(d.modifiedNewIndex, d.modifiedRowToMoveIndex, d.numRows, !1);
            break;
          default:
            return this.userDefinedActions.undo[d.type](d);
        }
      }
    };
    a.prototype.redo = function() {
      if (this.index < this.actions.length - 1) {
        this.index++;
        var a = this.actions[this.index];
        switch(a.type) {
          case "cell-edit":
            var c = this.table.getCell(a.address[0], a.address[1]);
            c.value(a.newValue, !1);
            break;
          case "cut":
            a.grid.apply(!1, !1);
            break;
          case "paste-pasteGrid":
            a.grid.applyTo(a.pasteGrid);
            break;
          case "paste-copyGrid":
            a.grid.apply(a.x, a.y);
            break;
          case "fill":
            a.grid.apply(!1, !1);
            break;
          case "add-row":
            this.table.addRow(a.index, !1, a.rowObject);
            break;
          case "remove-row":
            this.table.removeRow(a.index, !1);
            break;
          case "move-row":
            this.table.moveRow(a.oldIndex, a.newIndex, !1);
            break;
          case "add-rows":
            this.table.addRows(a.index, !1, a.rowObjects);
            break;
          case "remove-rows":
            this.table.removeRows(a.rowIndexes, !1);
            break;
          case "move-rows":
            this.table.moveRows(a.originalRowToMoveIndex, a.originalNewIndex, a.numRows, !1);
            break;
          default:
            return this.userDefinedActions.redo[a.type](a);
        }
      }
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.ContextMenu = function() {
    function a(a) {
      var b;
      this.table = a;
      this.active = !1 !== this.table.config.includeContextMenu;
      this.userDefinedActions = this.table.config.contextMenuItems;
      this.userDefinedOrder = this.table.config.contextMenuOrder;
      a = /Mac/.test(navigator.platform) ? "Cmd" : "Ctrl";
      this.actionNodes = {};
      this.actionCallbacks = {byName:{}, byControl:{}};
      this.borderedCells = [];
      this.defaultActions = {cut:{name:"Cut", shortCut:a + "+X", callback:this.cut}, copy:{name:"Copy", shortCut:a + "+C", callback:this.copy}, paste:{name:"Paste", shortCut:a + "+V", callback:this.paste}, undo:{name:"Undo", shortCut:a + "+Z", callback:this.undo}, redo:{name:"Redo", shortCut:a + "+Y", callback:this.redo}, fill:{name:"Fill", shortCut:"", hasDivider:!0, callback:this.fill}, selectAll:{name:"Select All", shortCut:a + "+A", callback:this.selectAll}, insertBelow:{name:"Insert Row Below", 
      shortCut:"", callback:this.insertBelow}, insertAbove:{name:"Insert Row Above", shortCut:"", callback:this.insertAbove}, removeRow:{name:"Remove Row(s)", shortCut:"", callback:this.removeRow}};
      this.element = document.createElement("div");
      this.element.id = "gridedit-context-menu";
      this.element.style.position = "fixed";
      this.element.style.zIndex = "1040";
      this.menu = document.createElement("ul");
      GridEdit.Utilities.prototype.setAttributes(this.menu, {"class":"dmn-dropdown-menu", role:"menu", "aria-labelledby":"aria-labelledby", style:"display:block;position:static;margin-bottom:5px;"});
      if (this.active) {
        if (this.userDefinedOrder) {
          var d = this.userDefinedOrder;
          var e = 0;
          for (b = d.length; e < b; e++) {
            var f = d[e];
            (a = this.userDefinedActions ? this.userDefinedActions[f] || this.defaultActions[f] : this.defaultActions[f]) && this.addAction(a);
          }
        } else {
          e = this.defaultActions;
          for (f in e) {
            a = e[f], this.userDefinedActions && (this.userDefinedActions[f] || !1 === this.userDefinedActions[f]) || this.addAction(a);
          }
          e = this.userDefinedActions;
          for (f in e) {
            a = e[f], !1 !== this.userDefinedActions[f] && this.addAction(a);
          }
        }
      }
      this.element.appendChild(this.menu);
      this.events(this);
      GridEdit.Hook.prototype.initContextMenuHooks(this);
      this;
    }
    a.prototype.addDivider = function() {
      var a = document.createElement("li");
      GridEdit.Utilities.prototype.setAttributes(a, {"class":"divider"});
      return this.menu.appendChild(a);
    };
    a.prototype.addAction = function(a) {
      var b = document.createElement("li");
      b.setAttribute("name", a.name);
      document.createElement("div");
      var d = document.createElement("span");
      d.textContent = a.shortCut;
      GridEdit.Utilities.prototype.setAttributes(d, {style:"float: right !important;"});
      var e = document.createElement("a");
      e.textContent = a.name;
      e.setAttribute("name", a.name);
      GridEdit.Utilities.prototype.setAttributes(e, {"class":"enabled", tabIndex:"-1"});
      a.hasDivider && this.addDivider();
      e.appendChild(d);
      b.appendChild(e);
      this.actionNodes[a.name] = b;
      this.actionCallbacks.byName[a.name] = a.callback;
      (e = a.shortCut) && /(ctrl|cmd)/i.test(e) && (e = e.split("+")[1], e = e.charCodeAt(0), this.actionCallbacks.byControl[e] = a.callback);
      return this.menu.appendChild(b);
    };
    a.prototype.show = function(a, c, d) {
      this.cell = d;
      if (this.active) {
        this.cell && !this.cell.isActive() && this.cell.makeActive();
        this.cell && (this.cells = this.cell.table.activeCells);
        GridEdit.Utilities.prototype.setStyles(this.element, {left:a, top:c});
        document.body.appendChild(this.element);
        var b = this.element;
        setTimeout(function() {
          var a = b.getBoundingClientRect();
          var c = GridEdit.Utilities.prototype.getScreenDimensions();
          var d = c.height > a.height;
          var e = a.bottom > c.height;
          var n = 0 > a.top;
          var p = c.width > a.width;
          var q = a.right > c.width;
          var m = 0 > a.left;
          d ? (b.style.overflowY = "hidden", b.style.height = "auto", e && (e = a.top - (a.bottom - c.height), b.style.top = e + "px"), n && (n = a.bottom + Math.abs(a.top), b.style.bottom = n + "px")) : (b.style.top = 0, b.style.height = c.height + "px", b.style.overflowY = "scroll");
          if (p) {
            if (b.style.overflowX = "hidden", b.style.width = "auto", q && (q = a.left - (a.right - c.width), b.style.left = q + "px"), m) {
              return m = a.right + Math.abs(a.left), b.style.right = m + "px";
            }
          } else {
            return b.style.left = 0, b.style.width = c.width + "px", b.style.overflowX = "scroll";
          }
        }, 100);
        return !1;
      }
    };
    a.prototype.hide = function() {
      if (this.isVisible()) {
        return document.body.removeChild(this.element);
      }
    };
    a.prototype.isVisible = function() {
      return null != this.element.parentNode;
    };
    a.prototype.getTargetPasteCell = function() {
      return this.table.activeCells.sort(this.sortFunc)[0];
    };
    a.prototype.sortFunc = function(a, c) {
      return a.address[0] - c.address[0];
    };
    a.prototype.getUpperLeftPasteCell = function() {
      var a;
      var c = this.table.activeCells;
      var d = c[0];
      var e = 0;
      for (a = c.length; e < a; e++) {
        var f = c[e];
        var g = f.address[0];
        var h = f.address[1];
        g < d.address[0] ? d = f : g === d.address[0] && h < d.address[1] && (d = f);
      }
      return d;
    };
    a.prototype.displayBorders = function() {
      if (this.table.copiedGridChange) {
        return this.table.copiedGridChange.displayBorders();
      }
    };
    a.prototype.hideBorders = function() {
      if (this.table.copiedGridChange) {
        return this.table.copiedGridChange.removeBorders();
      }
    };
    a.prototype.cut = function(a, c) {
      var b = c.contextMenu;
      b.hideBorders();
      c.copiedGridChange = new GridEdit.GridChange(c.activeCells);
      a = new GridEdit.GridChange(c.activeCells, "ge-blank");
      a.apply(!1, !1);
      c.addToStack({type:"cut", grid:a});
      b.displayBorders();
      return b.hide();
    };
    a.prototype.copy = function(a, c) {
      a = c.contextMenu;
      c.copiedGridChange = new GridEdit.GridChange(c.activeCells);
      a.displayBorders();
      return a.hide();
    };
    a.prototype.paste = function(a, c) {
      a = c.contextMenu;
      a.hide();
      var b = a.getUpperLeftPasteCell();
      a = c.copiedGridChange;
      if (b.editable && a) {
        var e = new GridEdit.GridChange(c.activeCells);
        e.copyValues();
        var f = a.applyTo(e);
        var g = b.address[0];
        b = b.address[1];
        return "pasteGrid" === f ? c.addToStack({type:"paste-pasteGrid", grid:a, pasteGrid:e, x:g, y:b}) : c.addToStack({type:"paste-copyGrid", grid:a, x:g, y:b});
      }
    };
    a.prototype.fill = function(a, c) {
      a = c.contextMenu;
      var b = a.getUpperLeftPasteCell().value();
      b = new GridEdit.GridChange(c.activeCells, b);
      b.apply(!1, !1);
      c.addToStack({type:"fill", grid:b});
      return a.hide();
    };
    a.prototype.selectAll = function(a, c) {
      c.clearActiveCells();
      return setTimeout(function() {
        var a;
        var b = c.rows;
        var f = [];
        var g = 0;
        for (a = b.length; g < a; g++) {
          var h = b[g];
          f.push(h.select());
        }
        return f;
      }, 100);
    };
    a.prototype.insertBelow = function(a, c) {
      return c.insertBelow();
    };
    a.prototype.insertAbove = function(a, c) {
      return c.insertAbove();
    };
    a.prototype.removeRow = function(a, c) {
      var b;
      var e = new GridEdit.GridChange(c.activeCells);
      a = {};
      var f = e.cells;
      var g = 0;
      for (b = f.length; g < b; g++) {
        e = f[g], a[e.address[0]] = !0;
      }
      return c.removeRows(Object.keys(a));
    };
    a.prototype.undo = function(a, c) {
      return c.undo();
    };
    a.prototype.redo = function(a, c) {
      return c.redo();
    };
    a.prototype.toggle = function(a) {
      a = this.actionNodes[a].classList;
      a.toggle("enabled");
      return a.toggle("disabled");
    };
    a.prototype.execute = function(a, c) {
      this.table.openCell && this.table.openCell.hideControl();
      if (GridEdit.Hook.prototype.run(this, "beforeContextMenuAction", c, this.table)) {
        a(c, this.table);
        var b = this.table;
        setTimeout(function() {
          if (b.useFixedHeaders) {
            return GridEdit.Utilities.prototype.fixHeaders(b);
          }
        }, 100);
        return GridEdit.Hook.prototype.run(this, "afterContextMenuAction", c, this.table);
      }
    };
    a.prototype.events = function(a) {
      return this.element.onclick = function(b) {
        var c = b.target.getAttribute("name");
        return a.execute(a.actionCallbacks.byName[c], b);
      };
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Utilities = function() {
    function a() {
    }
    a.prototype.setAttributes = function(a, c) {
      var b, e;
      var f = [];
      for (b in c) {
        (e = c[b]) ? f.push(a.setAttribute(b, e)) : f.push(void 0);
      }
      return f;
    };
    a.prototype.setStyles = function(a, c) {
      var b;
      var e = [];
      for (b in c) {
        var f = c[b];
        e.push(a.style[b] = f + "px");
      }
      return e;
    };
    a.prototype.clearActiveCells = function(a) {
      var b, d;
      var e = a.redCells;
      var f = a.activeCells;
      a.openCell && a.openCell.edit(a.openCell.control.value);
      if (0 < e.length) {
        var g = b = 0;
        for (d = e.length; b < d; g = ++b) {
          g = e[g], null != g && g.makeInactive();
        }
        a.redCells = [];
      }
      if (0 < f.length) {
        g = b = 0;
        for (d = f.length; b < d; g = ++b) {
          g = f[g], null != g && g.makeInactive(), null != g && g.hideControl();
        }
        a.activeCells = [];
      }
      a.selectionStart = null;
      a.selectionEnd = null;
      a.contextMenu.hide();
      if (a.selectedCol) {
        return a.selectedCol.makeInactive();
      }
    };
    a.prototype.capitalize = function(a) {
      return a.toLowerCase().replace(/\b./g, function(a) {
        return a.toUpperCase();
      });
    };
    a.prototype.valueFromKey = function(a, c) {
      a = String.fromCharCode(a);
      return c ? a : a.toLowerCase();
    };
    a.prototype.getScreenDimensions = function() {
      var a = window;
      var c = document;
      var d = c.documentElement;
      c = c.getElementsByTagName("body")[0];
      return {width:a.innerWidth || d.clientWidth || c.clientWidth, height:a.innerHeight || d.clientHeight || c.clientHeight};
    };
    a.prototype.repositionFixedHeader = function(a) {
      var b;
      if (b = a.fixedHeader) {
        if (b = b.table) {
          var d = document.documentElement;
          d = (window.pageXOffset || d.scrollLeft) - (d.clientLeft || 0);
          a = a.thead;
          a = a.getBoundingClientRect();
          return b.style.left = a.left + d + "px";
        }
      }
    };
    a.prototype.fixHeaders = function(a) {
      clearTimeout(this.fixHeadersBuffer);
      return this.fixHeadersBuffer = setTimeout(function() {
        var b, d, e;
        var f = a.config.includeRowHandles ? 1 : 0;
        var g = a.thead;
        var h = g.getElementsByTagName("th");
        if (a.fixedHeader) {
          (b = a.fixedHeader.table) && b.parentNode && a.fixedHeader.table.parentNode.removeChild(b), b = a.fixedHeader.backgroundColor;
        } else {
          if (b = window.getComputedStyle(g).backgroundColor, "rgba(0, 0, 0, 0)" === b || "transparent" === b) {
            b = "white";
          }
        }
        var l = document.documentElement;
        var n = (window.pageXOffset || l.scrollLeft) - (l.clientLeft || 0);
        var p = (window.pageYOffset || l.scrollTop) - (l.clientTop || 0);
        l = a.element;
        var q = l.scrollLeft || 0;
        var m = l.scrollTop || 0;
        var r = g.getBoundingClientRect();
        l = document.createElement("table");
        l.className = a.tableEl.className + " ge-fixed-table-header";
        l.style.position = "absolute";
        l.style.top = r.top + p + m + "px";
        l.style.left = r.left + n + q + "px";
        l.style.width = r.width + "px";
        l.style.zIndex = 1039;
        l.style.pointerEvents = "none";
        n = document.createElement("thead");
        n.className = g.className;
        n.ondragenter = g.ondragenter;
        n.ondragleave = g.ondragleave;
        p = document.createElement("tr");
        var u = r = m = 0;
        for (e = h.length; r < e; u = ++r) {
          var v = h[u];
          g = v.getBoundingClientRect();
          q = document.createElement("th");
          q.innerHTML = v.innerHTML;
          q.className = v.className;
          q.style.position = "absolute";
          q.style.minWidth = g.width + "px";
          q.style.maxWidth = g.width + "px";
          q.style.minHeight = g.height + "px";
          q.style.maxHeight = g.height + "px";
          q.style.left = m + "px";
          q.style.backgroundColor = b;
          q.setAttribute("col-id", u - f);
          q.onclick = function(b) {
            b = this.getAttribute("col-id");
            var c = a.cols[b];
            GridEdit.Utilities.prototype.clearActiveCells(a);
            return setTimeout(function() {
              var a;
              c.makeActive();
              var b = c.cells;
              var d = [];
              var e = 0;
              for (a = b.length; e < a; e++) {
                var f = b[e];
                d.push(f.addToSelection());
              }
              return d;
            }, 0);
          };
          if (v = a.cols[u - f]) {
            for (d in u = v.headerStyle ? v.headerStyle : v.style, u) {
              v = u[d], q.style[d] = v;
            }
          }
          m += g.width;
          p.appendChild(q);
        }
        n.appendChild(p);
        l.appendChild(n);
        document.body.appendChild(l);
        return a.fixedHeader = {table:l, backgroundColor:b};
      }, 100);
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Column = function() {
    function a(a, c) {
      var b;
      this.attributes = a;
      this.table = c;
      this.id = this.index = this.table.cols.length;
      this.defaultValue = this.attributes.defaultValue;
      this.cellClass = this.attributes.cellClass;
      this.cells = [];
      this.element = document.createElement("th");
      this.textNode = document.createTextNode(this.attributes.label);
      this.element.appendChild(this.textNode);
      var e = this.attributes.format;
      this.format = function(a) {
        return e ? e(a) : a;
      };
      a = this.attributes;
      for (b in a) {
        c = a[b], this[b] = c;
      }
      delete this.attributes;
      this.applyStyle();
      this.events();
    }
    a.prototype.applyStyle = function() {
      var a;
      if (this.headerStyle) {
        var c = [];
        for (a in this.headerStyle) {
          c.push(this.element.style[a] = this.headerStyle[a]);
        }
        return c;
      }
      c = [];
      for (a in this.style) {
        c.push(this.element.style[a] = this.style[a]);
      }
      return c;
    };
    a.prototype.next = function() {
      return this.table.cols[this.index + 1];
    };
    a.prototype.previous = function() {
      return this.table.cols[this.index - 1];
    };
    a.prototype.makeActive = function() {
      this.element.classList.add("active");
      return this.table.selectedCol = this;
    };
    a.prototype.makeInactive = function() {
      this.element.classList.remove("active");
      return this.table.selectedCol = null;
    };
    a.prototype.events = function() {
      var a = this;
      var c = a.table;
      this.element.onclick = function(b) {
        var d;
        GridEdit.Utilities.prototype.clearActiveCells(c);
        a.makeActive();
        var f = a.cells;
        var g = [];
        var h = 0;
        for (d = f.length; h < d; h++) {
          b = f[h], g.push(b.addToSelection());
        }
        return g;
      };
      return this.element.onmousedown = function(b) {
        if (3 === b.which) {
          c.contextMenu.show(b.x, b.y, a.cells[0]);
        } else {
          return !1;
        }
      };
    };
    return a;
  }();
}).call(this);
(function() {
  var a = function(a, d) {
    function c() {
      this.constructor = a;
    }
    for (var f in d) {
      b.call(d, f) && (a[f] = d[f]);
    }
    c.prototype = d.prototype;
    a.prototype = new c;
    a.__super__ = d.prototype;
    return a;
  }, b = {}.hasOwnProperty;
  GridEdit.Row = function() {
    function a(a, b) {
      this.attributes = a;
      this.table = b;
      this.id = this.table.rows.length;
      this.cells = [];
      this.index = this.table.rows.length;
      this.element = document.createElement("tr");
      if (this.cssClass = this.attributes.cssClass) {
        this.element.className = this.cssClass;
      }
      this.oldBorderBottom = this.element.style.borderBottom;
      this.oldBorderTop = this.element.style.borderTop;
      this.type = this.attributes.gridEditRowType;
      this.alwaysPristine = !1;
      var c = this.table;
      var d = this;
      this.element.ondragenter = function(a) {
        c.lastDragOverIsBeforeFirstRow = !1;
        if (a = c.lastDragOver) {
          if (0 === d.index || a.index !== d.index) {
            a.element.style.borderBottom = d.oldBorderBottom, d.element.style.borderBottom = c.theme.borders.dragBorderStyle;
          }
        } else {
          d.element.style.borderBottom = c.theme.borders.dragBorderStyle;
        }
        return c.lastDragOver = d;
      };
      this.includeRowHandles = this.table.config.includeRowHandles;
      GridEdit.Utilities.prototype.setAttributes(this.element, {id:"row-" + this.id});
    }
    a.prototype.createCell = function(a) {
      var b = this.table.cols[this.cells.length].type;
      c;
      switch(b) {
        case "string":
          var c = new GridEdit.StringCell(a, this);
          break;
        case "dmn-string":
          c = new GridEdit.DMNStringCell(a, this, "dmn-string");
          break;
        case "dmn-integer":
          c = new GridEdit.DMNStringCell(a, this, "dmn-integer");
          break;
        case "dmn-double":
          c = new GridEdit.DMNStringCell(a, this, "dmn-integer");
          break;
        case "dmn-date":
          c = new GridEdit.DMNStringCell(a, this, "dmn-date");
          break;
        case "dmn-list":
          c = new GridEdit.DMNStringCell(a, this, "dmn-list");
          break;
        case "number":
          c = new GridEdit.NumberCell(a, this);
          break;
        case "date":
          c = new GridEdit.DateCell(a, this);
          break;
        case "html":
          c = new GridEdit.HTMLCell(a, this);
          break;
        case "select":
          c = new GridEdit.SelectCell(a, this);
          break;
        case "textarea":
          c = new GridEdit.TextAreaCell(a, this);
          break;
        case "checkbox":
          c = new GridEdit.CheckBoxCell(a, this);
          break;
        default:
          c = new GridEdit.GenericCell(a, this);
      }
      return c;
    };
    a.prototype.below = function() {
      return this.table.rows[this.index + 1];
    };
    a.prototype.above = function() {
      return this.table.rows[this.index - 1];
    };
    a.prototype.select = function() {
      var a;
      var b = this.cells;
      var c = [];
      var g = 0;
      for (a = b.length; g < a; g++) {
        var h = b[g];
        c.push(h.addToSelection());
      }
      return c;
    };
    a.prototype.afterEdit = function() {
      return this.table.calculateSubtotals();
    };
    a.prototype.addHandle = function() {
      if (this.includeRowHandles) {
        var a = new GridEdit.HandleCell(this);
        return this.element.appendChild(a.element);
      }
    };
    return a;
  }();
  GridEdit.GenericRow = function(b) {
    function c(a, b) {
      var d, e;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.editable = !0;
      this.addHandle();
      var f = this.table.cols;
      var n = d = 0;
      for (e = f.length; d < e; n = ++d) {
        var p = f[n];
        p = this.createCell(this.attributes[p.valueKey]);
        this.cells.push(p);
        this.table.cols[n].cells.push(p);
        this.element.appendChild(p.element);
      }
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
  GridEdit.StaticRow = function(b) {
    function c(a, b) {
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.addHandle();
      this.editable = this.attributes.editable = !1;
      this.element.innerHTML = this.attributes.html;
      this.type = "static";
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
  GridEdit.SubTotalRow = function(b) {
    function c(a, b) {
      var d, e;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.subtotalColumns = {};
      this.labels = this.attributes.labels;
      this.running = this.attributes.running;
      this.alwaysPristine = !0;
      this.addHandle();
      var f = this.table.cols;
      var n = d = 0;
      for (e = f.length; d < e; n = ++d) {
        var p = f[n];
        var q = new GridEdit.GenericCell("", this);
        q.editable = !1;
        if (this.labels) {
          var m = this.labels[p.valueKey];
          q.element.innerHTML = m || "";
        }
        this.cells.push(q);
        this.table.cols[n].cells.push(q);
        this.element.appendChild(q.element);
        this.attributes.subtotal[p.valueKey] && (this.subtotalColumns[p.valueKey] = n);
      }
      this.table.subtotalRows.push(this);
      this.calculate();
    }
    a(c, b);
    c.prototype.calculate = function() {
      var a, b;
      var c = -1;
      if (!this.running) {
        var d = this.table.subtotalRows;
        var l = 0;
        for (b = d.length; l < b; l++) {
          var n = d[l];
          n = n.index;
          n < this.index && n > c && (c = n);
        }
      }
      n = this.subtotalColumns;
      var p = [];
      for (a in n) {
        l = n[a];
        var q = 0;
        var m = this.table.rows;
        b = 0;
        for (d = m.length; b < d; b++) {
          var r = m[b];
          if (r.index > c) {
            if (r.index === this.index) {
              break;
            }
            "subtotal" !== r.type && "header" !== r.type && (r = r.cells[l]) && (q += Number(r.value()));
          }
        }
        p.push(this.cells[l].value(q, !1));
      }
      return p;
    };
    c.prototype.afterEdit = function() {
    };
    return c;
  }(GridEdit.Row);
  GridEdit.HeaderRow = function(b) {
    function c(a, b) {
      var d, e;
      this.attributes = a;
      this.table = b;
      c.__super__.constructor.apply(this, arguments);
      this.editable = !0;
      this.addHandle();
      var f = this.table.cols;
      var n = d = 0;
      for (e = f.length; d < e; n = ++d) {
        var p = f[n];
        p = new GridEdit.HTMLCell(this.attributes[p.valueKey], this);
        p.editable = !0;
        this.cells.push(p);
        this.table.cols[n].cells.push(p);
        this.element.appendChild(p.element);
      }
      delete this.attributes;
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Row);
}).call(this);
(function() {
  var a = function(a, d) {
    function c() {
      this.constructor = a;
    }
    for (var f in d) {
      b.call(d, f) && (a[f] = d[f]);
    }
    c.prototype = d.prototype;
    a.prototype = new c;
    a.__super__ = d.prototype;
    return a;
  }, b = {}.hasOwnProperty;
  GridEdit.Cell = function() {
    function a(a, b) {
      this.originalValue = a;
      this.row = b;
      this.index = this.row.cells.length;
      this.id = this.row.id + "-" + this.index;
      this.address = [this.row.id, this.index];
      this.table = this.row.table;
      this.meta = this.col = this.table.cols[this.index];
      this.element = document.createElement("td");
    }
    a.prototype.initialize = function() {
      this.initEditable();
      this.initValueKey();
      this.initSource();
      this.initOriginalValue();
      this.initSourceValue();
      this.initNode();
      this.initControl();
      this.applyControlBehavior();
      this.applyEventBehavior();
      GridEdit.Hook.prototype.initCellHooks(this);
      return this.applyStyle();
    };
    a.prototype.initOriginalValue = function() {
      if (void 0 === this.originalValue) {
        return this.originalValue = "";
      }
    };
    a.prototype.initSourceValue = function() {
      return this.source[this.valueKey] = this.originalValue;
    };
    a.prototype.initEditable = function() {
      return this.editable = !1 !== this.col.editable;
    };
    a.prototype.initValueKey = function() {
      return this.valueKey = this.col.valueKey;
    };
    a.prototype.initSource = function() {
      return this.source = this.table.config.rows[this.address[0]];
    };
    a.prototype.initControl = function() {
      return this.control = document.createElement("input");
    };
    a.prototype.initNode = function() {
      this.element.appendChild(document.createTextNode(this.col.format(this.originalValue)));
      if ((this.placeholder || this.col.placeholder) && !this.originalValue) {
        return this.renderPlaceholder();
      }
    };
    a.prototype.renderPlaceholder = function() {
      this.originalColor = this.element.style.color;
      this.element.style.color = "#ccc";
      return this.element.textContent = this.placeholder || this.col.placeholder;
    };
    a.prototype.showRed = function() {
      return this.showUneditable();
    };
    a.prototype.applyStyle = function() {
      var a;
      this.col.cellClass && this.element.classList.add(this.col.cellClass);
      if (this.col.style) {
        var b = [];
        for (a in this.col.style) {
          b.push(this.element.style[a] = this.col.style[a]);
        }
        return b;
      }
    };
    a.prototype.addToSelection = function() {
      this.showActive();
      return this.table.activeCells.push(this);
    };
    a.prototype.removeFromSelection = function() {
      var a = this.table.activeCells.indexOf(this);
      this.table.activeCells.splice(a, 1);
      return this.showInactive();
    };
    a.prototype.isActive = function() {
      return -1 !== this.table.activeCells.indexOf(this);
    };
    a.prototype.makeActive = function(a) {
      null == a && (a = !0);
      this.table.hideControl();
      a && GridEdit.Utilities.prototype.clearActiveCells(this.table);
      if (!this.isActive() && GridEdit.Hook.prototype.run(this, "beforeActivate", this)) {
        return this.showActive(), this.table.activeCells.push(this), this.table.selectionStart = this, (a = this.table.openCell) && a.edit(a.control.value), GridEdit.Hook.prototype.run(this, "afterActivate", this);
      }
    };
    a.prototype.makeInactive = function() {
      return this.showInactive();
    };
    a.prototype.showActive = function() {
      if (!this.isActive()) {
        return this.oldBackgroundColor = this.element.style.backgroundColor, this.element.style.backgroundColor = this.table.theme.cells.activeColor;
      }
    };
    a.prototype.showInactive = function() {
      return this.element.style.backgroundColor = this.oldBackgroundColor || "";
    };
    a.prototype.showUneditable = function() {
      this.element.style.backgroundColor = this.table.theme.cells.uneditableColor;
      if (this.table.mobile) {
        var a = this;
        return setTimeout(function() {
          return a.makeInactive();
        }, 1000);
      }
      return this.table.redCells.push(this);
    };
    a.prototype.edit = function(a) {
      null == a && (a = null);
      if (this.editable) {
        if (null !== a) {
          if (this.value(a), this.isBeingEdited()) {
            return this.hideControl();
          }
        } else {
          return this.showControl();
        }
      } else {
        return this.showUneditable();
      }
    };
    a.prototype.value = function(a, b) {
      null == a && (a = null);
      null == b && (b = !0);
      var c = this.source[this.valueKey] || this.col.defaultValue;
      c = "object" === typeof c ? JSON.parse(JSON.stringify(c)) : c;
      if (null !== a && a !== c) {
        a = this.formatValue(a);
        var d = this.value();
        if (GridEdit.Hook.prototype.run(this, "beforeEdit", this, d, a)) {
          return b && this.table.addToStack({type:"cell-edit", oldValue:d, newValue:a, address:this.address}), this.setValue(a), this.renderValue(a), this.row.afterEdit(), this.table.useFixedHeaders && GridEdit.Utilities.prototype.fixHeaders(this.table), GridEdit.Hook.prototype.run(this, "afterEdit", this, d, a, this.table.contextMenu.getUpperLeftPasteCell()), this.table.checkIfCellIsDirty(this), a;
        }
      }
      return c;
    };
    a.prototype.formatValue = function(a) {
      console.trace("Cell.formatValue:", a);
      return a;
    };
    a.prototype.setValue = function(a) {
      return this.source[this.valueKey] = a;
    };
    a.prototype.select = function() {
      return this.control.select();
    };
    a.prototype.renderValue = function(a) {
      if ((this.placeholder || this.col.placeholder) && "" === a) {
        return this.renderPlaceholder();
      }
      this.element.style.color = this.originalColor || "";
      return this.element.textContent = this.col.format(a);
    };
    a.prototype.isDirty = function() {
      return this.row.alwaysPristine ? !1 : this.originalValue !== this.value();
    };
    a.prototype.focus = function() {
      if (this.table.mobile) {
        return this.control.focus();
      }
      var a = this.control;
      return setTimeout(function() {
        a.focus();
        var b = 0;
        a.value && (b = a.value.length);
        if (a.setSelectionRange) {
          return a.setSelectionRange(b, b);
        }
        if (a.createTextRange) {
          var c = a.createTextRange();
          c.collapse(!0);
          c.moveEnd("character", b);
          c.moveStart("character", b);
          return c.select();
        }
      }, 0);
    };
    a.prototype.showControl = function(a) {
      null == a && (a = null);
      if (this.editable) {
        if (GridEdit.Hook.prototype.run(this, "beforeControlInit", this)) {
          return this.table.contextMenu.hideBorders(), this.renderControl(), this.setControlValue(a), this.table.openCell = this, this.focus(), GridEdit.Hook.prototype.run(this, "afterControlInit", this);
        }
      } else {
        return this.showUneditable();
      }
    };
    a.prototype.setControlValue = function(a) {
      return this.control.value = a;
    };
    a.prototype.renderControl = function() {
      GridEdit.Utilities.prototype.setStyles(this.control, this.position());
      this.table.element.appendChild(this.control);
      return this.control.style.position = "absolute";
    };
    a.prototype.hideControl = function() {
      if (GridEdit.Hook.prototype.run(this, "beforeControlHide", this)) {
        return this.isBeingEdited() && this.control.parentNode.removeChild(this.control), this.table.openCell = null, GridEdit.Hook.prototype.run(this, "afterControlHide", this);
      }
    };
    a.prototype.applyControlBehavior = function() {
      var a = this;
      var b = this.table;
      return this.control.onkeydown = function(c) {
        switch(c.which) {
          case 13:
            return a.edit(this.value);
          case 9:
            return a.edit(this.value), b.moveTo(b.nextCell());
        }
      };
    };
    a.prototype.position = function() {
      var a = this.element.getBoundingClientRect();
      return {top:this.element.offsetTop, bottom:this.element.offsetTop + a.height, left:this.element.offsetLeft, right:this.element.offsetLeft + a.width, width:a.width, height:a.height};
    };
    a.prototype.reposition = function() {
      if (!this.table.mobile) {
        return GridEdit.Utilities.prototype.setStyles(this.control, this.position());
      }
    };
    a.prototype.next = function() {
      var a;
      return this.row.cells[this.index + 1] || (null != (a = this.row.below()) ? a.cells[0] : void 0);
    };
    a.prototype.previous = function() {
      var a;
      return this.row.cells[this.index - 1] || (null != (a = this.row.above()) ? a.cells[this.row.cells.length - 1] : void 0);
    };
    a.prototype.above = function() {
      var a;
      return null != (a = this.row.above()) ? a.cells[this.index] : void 0;
    };
    a.prototype.below = function() {
      var a;
      return null != (a = this.row.below()) ? a.cells[this.index] : void 0;
    };
    a.prototype.isBefore = function(a) {
      return a.address[0] === this.address[0] && a.address[1] > this.address[1];
    };
    a.prototype.isAfter = function(a) {
      return a.address[0] === this.address[0] && a.address[1] < this.address[1];
    };
    a.prototype.isAbove = function(a) {
      return a.address[0] > this.address[0] && a.address[1] === this.address[1];
    };
    a.prototype.isBelow = function(a) {
      return a.address[0] < this.address[0] && a.address[1] === this.address[1];
    };
    a.prototype.addClass = function(a) {
      return this.element.classList.add(a);
    };
    a.prototype.removeClass = function(a) {
      return this.element.classList.remove(a);
    };
    a.prototype.isBeingEdited = function() {
      return this.control ? null != this.control.parentNode : !1;
    };
    a.prototype.toggleActive = function() {
      return this.isActive() ? this.removeFromSelection() : this.makeActive(!1);
    };
    a.prototype.isVisible = function() {
      var a = this.position();
      return a.top >= this.table.topOffset && a.bottom <= window.innerHeight;
    };
    a.prototype.onReturnKeyPress = function() {
      return this.table.moveTo(this.table.belowCell());
    };
    a.prototype.onSpaceKeyPress = function() {
      return this.edit();
    };
    a.prototype.onKeyPress = function(a) {
      return this.showControl(a);
    };
    a.prototype.applyEventBehavior = function() {
      var a = this;
      var b = this.table;
      var c = null;
      this.element.onfocus = function(b) {
        return a.reposition();
      };
      if (b.mobile) {
        var g = null;
        this.element.ontouchstart = function(a) {
          g = a.changedTouches[0].clientY;
          GridEdit.Utilities.prototype.clearActiveCells(b);
          if (b.openCell) {
            return b.openCell.hideControl();
          }
        };
        return this.element.ontouchend = function(b) {
          var c = b.changedTouches[0].clientY;
          if (2 > b.changedTouches.length && c === g) {
            return b.preventDefault(), a.edit();
          }
        };
      }
      this.element.onclick = function(d) {
        var e, f, g, h;
        b.contextMenu.hideBorders();
        if (b.lastClickCell === a) {
          GridEdit.Hook.prototype.run(a, "onDblClick", a, d) && (b.lastClickCell = null, a.showControl(a.value()));
        } else {
          if (b.lastClickCell = a, clearInterval(c), c = setTimeout(function() {
            return b.lastClickCell = null;
          }, 1000), GridEdit.Hook.prototype.run(a, "onClick", a, d)) {
            var m = d.ctrlKey;
            var r = d.metaKey;
            var u = d.shiftKey;
            d = function(a) {
            };
            if (f <= g) {
              for (e = f = h = f; h <= g ? f <= g : f >= g; e = h <= g ? ++f : --f) {
                e = b.getCell(v, e), e.makeActive(!1);
              }
            } else {
              for (e = g = h = g; h <= f ? g <= f : g >= f; e = h <= f ? ++g : --g) {
                e = b.getCell(v, e), e.makeActive(!1);
              }
            }
            (m || r) && a.toggleActive();
            if (u) {
              var v = b.activeCells[0];
              r = v.address[0];
              f = v.address[1];
              m = a.address[0];
              g = a.address[1];
              if (r <= m) {
                for (v = u = r; r <= m ? u <= m : u >= m; v = r <= m ? ++u : --u) {
                  d(v);
                }
              } else {
                for (v = u = m; m <= r ? u <= r : u >= r; v = m <= r ? ++u : --u) {
                  d(v);
                }
              }
            }
          }
        }
        return !1;
      };
      this.element.onmousedown = function(c) {
        if (3 === c.which) {
          b.contextMenu.show(c.x, c.y, a);
        } else {
          return c.shiftKey || c.ctrlKey || c.metaKey || (b.state = "selecting", a.makeActive()), !1;
        }
      };
      this.element.onmouseover = function(c) {
        if ("selecting" === b.state) {
          return b.selectionEnd = a, b.setSelection();
        }
      };
      return this.element.onmouseup = function(c) {
        if (3 !== c.which && (b.selectionEnd = a, b.state = "ready", !c.metaKey && !c.ctrlKey)) {
          return b.setSelection();
        }
      };
    };
    return a;
  }();
  GridEdit.StringCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "string";
      this.initialize();
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Cell);
  GridEdit.NumberCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "number";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.focus = function() {
      if (this.table.mobile) {
        return this.control.focus();
      }
      var a = this.control;
      return setTimeout(function() {
        return a.focus();
      }, 0);
    };
    c.prototype.initControl = function() {
      this.control = document.createElement("input");
      return this.control.type = "number";
    };
    c.prototype.normalizeValue = function(a) {
      if (null === a || void 0 === a || "" === a) {
        return null;
      }
      a = Number(a);
      return isNaN(a) ? null : a;
    };
    c.prototype.formatValue = function(a) {
      return this.normalizeValue(a);
    };
    c.prototype.setValue = function(a) {
      return this.source[this.valueKey] = this.normalizeValue(a);
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.CheckBoxCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "checkbox";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initialize = function() {
      this.initEditable();
      this.initValueKey();
      this.initSource();
      this.initOriginalValue();
      this.initSourceValue();
      this.applyEventBehavior();
      GridEdit.Hook.prototype.initCellHooks(this);
      this.applyStyle();
      this.initNode();
      this.toggleable = this.editable;
      this.editable = !1;
      return this.renderValue();
    };
    c.prototype.initNode = function() {
      var a = document.createElement("div");
      a.style.width = "1em";
      a.style.margin = "auto";
      this.span = document.createElement("span");
      a.appendChild(this.span);
      return this.element.appendChild(a);
    };
    c.prototype.edit = function() {
      return !1;
    };
    c.prototype.initControl = function() {
      return this.toggle();
    };
    c.prototype.renderControl = function() {
      return GridEdit.Utilities.prototype.clearActiveCells(this.table);
    };
    c.prototype.isBeingEdited = function() {
      return !1;
    };
    c.prototype.toggle = function() {
      return this.toggleable ? (this.value(!this.value()), this.setValue(this.value())) : this.showUneditable();
    };
    c.prototype.renderValue = function() {
      var a = this.toggleable ? "" : "disabled";
      return this.value() ? this.table.theme.inputs.checkbox.checkedClassName ? this.span.className = this.table.theme.inputs.checkbox.checkedClassName : this.span.innerHTML = "<input type='checkbox' " + a + " checked />" : this.table.theme.inputs.checkbox.uncheckedClassName ? this.span.className = this.table.theme.inputs.checkbox.uncheckedClassName : this.span.innerHTML = "<input type='checkbox' " + a + " />";
    };
    c.prototype.applyEventBehavior = function() {
      c.__super__.applyEventBehavior.apply(this, arguments);
      var a = this;
      return this.element.onclick = function(b) {
        a.table.contextMenu.hideBorders();
        return a.toggle();
      };
    };
    c.prototype.onSpaceKeyPress = function() {
      return this.toggle();
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.DateCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "date";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      return this.element.appendChild(document.createTextNode(this.toDateString(this.originalValue)));
    };
    c.prototype.initControl = function() {
      this.control = this.toDate();
      try {
        if (this.originalValue) {
          return this.control.valueAsDate = new Date(this.originalValue);
        }
      } catch (e) {
        return this.control.value = this.toDateString(new Date(this.originalValue));
      }
    };
    c.prototype.formatValue = function(a) {
      if (0 < a.length) {
        return this.toDateString(Date.parse(a));
      }
      if (a instanceof Date) {
        return this.toDateString(a);
      }
      if (0 === a.length) {
        try {
          this.control.valueAsDate = null;
        } catch (f) {
          this.control.value = "";
        }
        return "";
      }
    };
    c.prototype.setValue = function(a) {
      this.source[this.valueKey] = this.toDateObject(a);
      return this.setControlValue();
    };
    c.prototype.setControlValue = function() {
      try {
        return this.control.valueAsDate = this.source[this.valueKey];
      } catch (e) {
        return this.control.value = this.source[this.valueKey];
      }
    };
    c.prototype.renderValue = function() {
      return this.element.textContent = this.col.format(this.toDateString(this.value()));
    };
    c.prototype.toDateObject = function(a) {
      null == a && (a = null);
      return a && "" !== a ? (a = a.split("-"), new Date(a[2], a[0] - 1, a[1])) : null;
    };
    c.prototype.toDateString = function(a) {
      null == a && (a = null);
      a = a && "" !== a ? new Date(a) : this.value() ? new Date(this.value()) : null;
      return a instanceof Date ? isNaN(a.getTime()) ? "" : ("0" + (a.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + a.getUTCDate()).slice(-2) + "-" + a.getUTCFullYear() : "";
    };
    c.prototype.toDate = function() {
      var a = document.createElement("input");
      a.type = "text";
      a.value = this.toDateString();
      return a;
    };
    c.prototype.toDateInputString = function(a) {
      var b;
      null == a && (a = null);
      a && "" !== a ? b = new Date(a) : this.value() ? b = new Date(this.value()) : null;
      return b instanceof Date ? b.getUTCFullYear() + "-" + ("0" + (b.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + b.getUTCDate()).slice(-2) : "";
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.HTMLCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "html";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      this.htmlContent = this.col.defaultValue || this.originalValue || "";
      return this.element.appendChild(this.toFragment());
    };
    c.prototype.setValue = function(a) {
      this.htmlContent = a;
      a = this.toFragment();
      this.element.innerHTML = "";
      return this.element.appendChild(a);
    };
    c.prototype.toFragment = function() {
      var a = document.createElement("div");
      var b = document.createDocumentFragment();
      a.innerHTML = this.htmlContent;
      b.appendChild(a.firstChild || document.createTextNode(""));
      return b;
    };
    c.prototype.renderValue = function() {
      return this.htmlContent;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.SelectCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "select";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initNode = function() {
      var a = document.createTextNode(this.originalValue);
      return this.element.appendChild(a);
    };
    c.prototype.setControlValue = function() {
      var a, b, c;
      this.control.innerHTML = "";
      var d = this.meta.choices;
      var l = [];
      var n = 0;
      for (b = d.length; n < b; n++) {
        var p = d[n];
        var q = document.createElement("option");
        if (p instanceof Array) {
          var m = a = 0;
          for (c = p.length; a < c; m = ++a) {
            var r = p[m];
            0 === m && (q.value = r);
            1 === m && (q.text = r);
          }
        } else {
          q.value = q.text = p;
        }
        this.value() === p && (q.selected = !0);
        l.push(this.control.add(q));
      }
      return l;
    };
    c.prototype.initControl = function() {
      var a;
      var b = this;
      this.control = a = document.createElement("select");
      this.meta.choices || console.log("There is not a 'choices' key in cell " + this.address + " and you specified that it was of type 'select'");
      this.setControlValue();
      a.classList.add(this.table.theme.inputs.select.className);
      return a.onchange = function(a) {
        return b.edit(a.target.value);
      };
    };
    c.prototype.select = function() {
      return !1;
    };
    c.prototype.onSpaceKeyPress = function() {
      this.renderControl();
      var a = this.control;
      return setTimeout(function() {
        var b = document.createEvent("MouseEvents");
        b.initMouseEvent("mousedown", !0, !0, window);
        return a.dispatchEvent(b);
      }, 0);
    };
    c.prototype.onKeyPress = function(a) {
      var b, c;
      this.onSpaceKeyPress();
      var d = new RegExp("^" + a, "i");
      a = this.control;
      var e = a.options;
      var n = [];
      var p = b = 0;
      for (c = e.length; b < c; p = ++b) {
        var q = e[p];
        if (d.test(q.value)) {
          a.selectedIndex = p;
          break;
        } else {
          n.push(void 0);
        }
      }
      return n;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.TextAreaCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "textarea";
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initControl = function() {
      var a = document.createElement("textarea");
      a.classList.add(this.table.theme.inputs.textarea.className);
      return this.control = a;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.DMNStringCell = function(b) {
    function c(a, b, d) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = d;
      this.initialize();
      this;
    }
    a(c, b);
    c.prototype.initControl = function() {
      var a = document.createElement(this.type);
      a.classList.add(this.table.theme.inputs.textarea.className);
      return this.control = a;
    };
    c.prototype.format = function(a) {
      a || (a = this.col.defaultValue);
      return a && a.op ? a.op + " " + a.expr : null;
    };
    c.prototype.initNode = function() {
      this.element.appendChild(document.createTextNode(this.format(this.originalValue)));
    };
    c.prototype.renderValue = function(a) {
      this.element.style.color = this.originalColor || "";
      return this.element.textContent = this.format(a);
    };
    c.prototype.setValue = function(a) {
      return this.source[this.valueKey] = a;
    };
    return c;
  }(GridEdit.Cell);
  GridEdit.GenericCell = function(b) {
    function c(a, b) {
      this.row = b;
      c.__super__.constructor.apply(this, arguments);
      this.type = "generic";
      this.initialize();
      this;
    }
    a(c, b);
    return c;
  }(GridEdit.Cell);
  GridEdit.HandleCell = function() {
    return function(a) {
      var b = this.row = a;
      var c = b.table;
      this.element = document.createElement("td");
      this.element.setAttribute("draggable", !0);
      this.element.className = c.theme.cells.handleClassName;
      a = document.createElement("div");
      a.innerHTML = "<span></span><span></span><span></span>";
      this.element.appendChild(a);
      this.element.onclick = function(a) {
        return b.table.selectRow(a, b.index);
      };
      this.element.ondragstart = function() {
        var a, d, e;
        b.cells[0].addToSelection();
        var l = new GridEdit.GridChange(c.activeCells);
        var n = a = d = l.lowRow;
        for (e = l.highRow; d <= e ? a <= e : a >= e; n = d <= e ? ++a : --a) {
          c.rows[n].select();
        }
        c.contextMenu.hideBorders();
        return c.draggingRow = l;
      };
      this.element.ondragend = function() {
        var a = c.draggingRow.lowRow;
        var b = c.draggingRow.highRow - c.draggingRow.lowRow + 1;
        var d = c.lastDragOver.index;
        var e = 0;
        0 === d ? c.lastDragOverIsBeforeFirstRow || 0 === a || e++ : a > d && e++;
        d += e;
        c.lastDragOver.element.style.borderBottom = c.lastDragOver.oldBorderBottom;
        c.lastDragOver.element.style.borderTop = c.lastDragOver.oldBorderTop;
        c.lastDragOver.element.style.borderTop = c.lastDragOver.oldBorderTop;
        c.lastDragOver = null;
        if (d !== a) {
          return c.moveRows(a, d, b, !0);
        }
      };
    };
  }();
}).call(this);
(function() {
  GridEdit.GridChange = function() {
    function a(a, c) {
      var b;
      this.cells = a;
      var e = "ge-blank" === c;
      this.changes = [];
      this.table = this.cells[0].col.table;
      this.borderStyle = this.table.theme.cells.selectionBorderStyle;
      this.highCol = this.highRow = 0;
      var f = this.cells;
      a = 0;
      for (b = f.length; a < b; a++) {
        var g = f[a];
        var h = g.address[0];
        var l = g.address[1];
        g = {row:h, col:l, value:e ? "" : c || g.value()};
        this.firstCell ? g.row < this.firstCell.row ? this.firstCell = g : g.row === this.firstCell.row && g.col < this.firstCell.col && (this.firstCell = g) : (this.firstCell = g, this.lowRow = g.row, this.lowCol = g.col);
        g.row > this.highRow && (this.highRow = g.row);
        g.col > this.highCol && (this.highCol = g.col);
        g.row < this.lowRow && (this.lowRow = g.row);
        g.col < this.lowCol && (this.lowCol = g.col);
        this.changes.push(g);
      }
      f = this.changes;
      a = 0;
      for (b = f.length; a < b; a++) {
        c = f[a], c.rowVector = c.row - this.firstCell.row, c.colVector = c.col - this.firstCell.col;
      }
      this.scattered = this.cells.length !== (this.highCol - this.lowCol + 1) * (this.highRow - this.lowRow + 1);
    }
    a.prototype.applyTo = function(a) {
      var b, d, e;
      var f = this.changes[0].value;
      if (a.scattered) {
        a.fill(f);
      } else {
        var g = this.width();
        f = this.height();
        var h = a.width();
        var l = a.height();
        if (h < g || l < f) {
          var n = a.firstCell.row;
          var p = a.firstCell.col;
          this.apply(n, p);
          return "copyGrid";
        }
        h = parseInt(h / g);
        l = parseInt(l / f);
        n = a.firstCell.row;
        p = a.firstCell.col;
        for (b = a = 0; 0 <= l ? a < l : a > l; b = 0 <= l ? ++a : --a) {
          b = n + b * f;
          var q = d = 0;
          for (e = h; 0 <= e ? d < e : d > e; q = 0 <= e ? ++d : --d) {
            q = p + q * g, this.apply(b, q);
          }
        }
      }
      return "pasteGrid";
    };
    a.prototype.copyValues = function() {
      var a, c;
      var d = this.firstCell.row;
      var e = this.firstCell.col;
      var f = this.changes;
      var g = [];
      var h = 0;
      for (c = f.length; h < c; h++) {
        var l = f[h];
        (a = this.table.getCell(d + l.rowVector, e + l.colVector)) && a.editable ? g.push(l.oldValue = a.value()) : g.push(void 0);
      }
      return g;
    };
    a.prototype.width = function() {
      return this.highCol - this.lowCol + 1;
    };
    a.prototype.height = function() {
      return this.highRow - this.lowRow + 1;
    };
    a.prototype.fill = function(a) {
      var b, d;
      var e = this.firstCell.row;
      var f = this.firstCell.col;
      var g = this.changes;
      var h = [];
      var l = 0;
      for (d = g.length; l < d; l++) {
        var n = g[l];
        (b = this.table.getCell(e + n.rowVector, f + n.colVector)) && b.editable ? (n.oldValue = b.value(), h.push(b.value(a, !1))) : h.push(n.oldValue = "");
      }
      return h;
    };
    a.prototype.apply = function(a, c) {
      var b, e;
      if (!1 === a || !1 === c) {
        a = this.firstCell.row, c = this.firstCell.col;
      }
      var f = this.changes;
      var g = [];
      var h = 0;
      for (e = f.length; h < e; h++) {
        var l = f[h];
        (b = this.table.getCell(a + l.rowVector, c + l.colVector)) && b.editable ? (l.oldValue = b.value(), g.push(b.value(l.value, !1))) : g.push(l.oldValue = "");
      }
      return g;
    };
    a.prototype.undo = function(a, c) {
      var b, e;
      if (!1 === a || !1 === c) {
        a = this.firstCell.row, c = this.firstCell.col;
      }
      var f = this.changes;
      var g = [];
      var h = 0;
      for (e = f.length; h < e; h++) {
        var l = f[h];
        (b = this.table.getCell(a + l.rowVector, c + l.colVector)) && b.editable ? g.push(b.value(l.oldValue, !1)) : g.push(void 0);
      }
      return g;
    };
    a.prototype.displayBorders = function() {
      var a;
      var c = this.cells;
      var d = [];
      var e = 0;
      for (a = c.length; e < a; e++) {
        var f = c[e];
        d.push(this.addBorder(f));
      }
      return d;
    };
    a.prototype.removeBorders = function() {
      var a;
      var c = this.cells;
      var d = [];
      var e = 0;
      for (a = c.length; e < a; e++) {
        var f = c[e];
        d.push(f.element.style.border = "");
      }
      return d;
    };
    a.prototype.addBorder = function(a) {
      var b = a.address[0];
      var d = a.address[1];
      if (this.scattered) {
        return a.element.style.border = this.borderStyle;
      }
      this.firstCell.row === this.highRow ? (a.element.style.borderTop = this.borderStyle, a.element.style.borderBottom = this.borderStyle) : b === this.lowRow ? a.element.style.borderTop = this.borderStyle : b === this.highRow && (a.element.style.borderBottom = this.borderStyle);
      if (this.firstCell.col === this.highCol) {
        return a.element.style.borderRight = this.borderStyle, a.element.style.borderLeft = this.borderStyle;
      }
      if (d === this.lowCol) {
        return a.element.style.borderLeft = this.borderStyle;
      }
      if (d === this.highCol) {
        return a.element.style.borderRight = this.borderStyle;
      }
    };
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Theme = function() {
    function a(a, c) {
      this.themeName = a;
      switch(this.themeName) {
        case "bootstrap":
          this.apply(this.bootstrap);
          break;
        default:
          this.themeName = "default", this.apply(this["default"]);
      }
      c && (this.themeName += "-custom", this.apply(c));
    }
    a.prototype.apply = function(a) {
      var b;
      var d = function(a, b) {
        var c;
        var e = [];
        for (c in b) {
          var f = b[c];
          "object" === typeof f ? (a[c] || (a[c] = {}), e.push(d(a[c], f))) : e.push(a[c] = f);
        }
        return e;
      };
      var e = [];
      for (b in a) {
        var f = a[b];
        "object" === typeof f ? (this[b] || (this[b] = {}), e.push(d(this[b], f))) : e.push(this[b] = f);
      }
      return e;
    };
    a.prototype["default"] = {bootstrap:!1, cells:{activeColor:"#F1F1F1", uneditableColor:"#FFBBB3", handleClassName:"handle", selectionBorderStyle:"2px solid blue"}, borders:{dragBorderStyle:"3px solid rgb(160, 195, 240)"}, inputs:{textarea:{className:"grid-edit"}, select:{className:"grid-edit"}, checkbox:{checkedClassName:!1, uncheckedClassName:!1}}};
    a.prototype.bootstrap = {bootstrap:!0, cells:{activeColor:"#F1F1F1", uneditableColor:"#FFBBB3", handleClassName:"handle", selectionBorderStyle:"2px solid blue"}, borders:{dragBorderStyle:"3px solid rgb(160, 195, 240)"}, inputs:{textarea:{className:"form-control"}, select:{className:"form-control"}, checkbox:{checkedClassName:"glyphicon glyphicon-check", uncheckedClassName:"glyphicon glyphicon-unchecked"}}};
    return a;
  }();
}).call(this);
(function() {
  GridEdit.Hook = function() {
    function a() {
    }
    a.prototype.run = function(a, c) {
      var b, e;
      if (a[c]) {
        var f = [];
        var g = b = 0;
        for (e = arguments.length; b < e; g = ++b) {
          var h = arguments[g];
          2 > g || f.push(h);
        }
        return !1 !== a[c].apply(a, f);
      }
      return !0;
    };
    a.prototype.initTableHooks = function(a) {
      var b = a.config;
      a.beforeMoveRow = b.beforeMoveRow;
      a.afterMoveRow = b.afterMoveRow;
      a.beforeMoveRows = b.beforeMoveRows;
      a.afterMoveRows = b.afterMoveRows;
      a.beforeAddRow = b.beforeAddRow;
      a.afterAddRow = b.afterAddRow;
      a.beforeAddRows = b.beforeAddRows;
      a.afterAddRows = b.afterAddRows;
      a.beforeRemoveRow = b.beforeRemoveRow;
      a.afterRemoveRow = b.afterRemoveRow;
      a.beforeRemoveRows = b.beforeRemoveRows;
      a.afterRemoveRows = b.afterRemoveRows;
      a.beforeInsertBelow = b.beforeInsertBelow;
      a.afterInsertBelow = b.afterInsertBelow;
      a.beforeInsertAbove = b.beforeInsertAbove;
      return a.afterInsertAbove = b.afterInsertAbove;
    };
    a.prototype.initContextMenuHooks = function(a) {
      var b = a.table.config;
      a.beforeContextMenuAction = b.beforeContextMenuAction;
      return a.afterContextMenuAction = b.afterContextMenuAction;
    };
    a.prototype.initCellHooks = function(a) {
      var b = a.table.config;
      a.beforeEdit = b.beforeEdit;
      a.afterEdit = b.afterEdit;
      a.beforeActivate = b.beforeCellActivate;
      a.afterActivate = b.afterCellActivate;
      a.beforeControlInit = b.beforeControlInit;
      a.afterControlInit = b.afterControlInit;
      a.beforeControlHide = b.beforeControlHide;
      a.afterControlHide = b.afterControlHide;
      a.beforeNavigateTo = b.beforeCellNavigateTo;
      a.onClick = b.onCellClick;
      return a.onDblClick = b.onCellDblClick;
    };
    return a;
  }();
}).call(this);
Polymer({is:"dmn-editor", properties:{regkey:{type:String}, namespace:{type:String}}, behaviors:[TranslationsBehavior, RegistryBehavior, DialogBehavior, LobiboxBehavior, StyleScopeBehavior], observers:["editValueChanged(editValue)"], attached:function() {
  this._registryAttributes = {subject:"decision", namespace:this.namespace};
  this._registryKey = "/decisions";
  this._currentRegistryName = null;
  this.cols = [];
  this.rows = [];
  var a = /Mac/.test(navigator.platform) ? "Cmd" : "Ctrl", a = new GridEdit({initialize:!0, cols:this.cols, rows:this.rows, tableClass:"dmnTable", element:this.$.gridedit, includeRowHandles:!0, includeContextMenu:!0, onCellClick:function(a) {
  }, contextMenuOrder:"undo redo insertInput insertOutput removeColumn removeRow".split(" "), contextMenuItems:{insertInput:{name:tr("dmn.insertInput"), shortCut:a + "+I", callback:this.insertInput.bind(this)}, insertOutput:{name:tr("dmn.insertOutput"), shortCut:a + "+O", callback:this.insertOutput.bind(this)}, removeColumn:{name:tr("dmn.removeColumn"), shortCut:a + "+R", callback:this.removeColumn.bind(this)}, removeRow:{name:tr("dmn.removeRow"), shortCut:a + "+K", callback:this.removeRow.bind(this)}}});
  a.addUndoAction("insert-column", function(a) {
    console.log("UndoAction:insert-column:", a);
    this.cols.splice(a.index, 1);
    this.gridRebuild();
  }.bind(this));
  a.addRedoAction("insert-column", function(a) {
    console.log("RedoAction:insert-column:", a);
    this.cols.splice(a.index, 0, a.col);
    this.gridRebuild();
  }.bind(this));
  a.addUndoAction("remove-column", function(a) {
    console.log("UndoAction:remove-column:", a);
    this.cols.splice(a.index, 0, a.col);
    this.gridRebuild();
  }.bind(this));
  a.addRedoAction("remove-column", function(a) {
    console.log("RedoAction:remove-column:", a);
    this.cols.splice(a.index, 1);
    this.gridRebuild();
  }.bind(this));
  this.gridedit = a;
  this.async(function() {
  }, 50);
}, onInputParamDialog:function(a) {
  this.$.dmnParamDialogId.close();
  this._insertInput(a.detail.index, a.detail.data);
}, addInput:function() {
  var a = _.filter(this.cols, function(b) {
    console.log("a:", a);
    return "input" == b.kind;
  }) || [];
  this.$.dmnParamDialogId.open("input", a.length);
}, insertInput:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index + 1;
  this.$.dmnParamDialogId.open("input", a);
}, _insertInput:function(a, b) {
  console.log("insertInput.index:", a + "/data:", b);
  var c = "dmn-" + b.type, d = {op:"list" == b.type ? "oneOf" : "=", expr:""};
  "boolean" == b.type && (c = "checkbox", d = !1);
  b = {defaultValue:d, kind:"input", label:"Input -> " + (b.label || b.name) + ":" + b.type, valueKey:b.name, type:c, editable:!0};
  this.gridedit.addToStack({type:"insert-column", index:a, col:b});
  this.cols.splice(a, 0, b);
  this.gridRebuild();
}, removeColumn:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index;
  var b = this.cols.splice(a, 1)[0];
  this.gridedit.addToStack({type:"remove-column", index:a, col:b});
  this.gridRebuild();
}, onOutputParamDialog:function(a) {
  this.$.dmnParamDialogId.close();
  this._insertOutput(a.detail.index, a.detail.data);
}, addOutput:function() {
  this.$.dmnParamDialogId.open("output", this.cols.length);
}, insertOutput:function(a) {
  a = this.gridedit.contextMenu.getUpperLeftPasteCell().index + 1;
  var b = _.filter(this.cols, function(a) {
    return "input" == a.kind;
  }).length || 0;
  a < b && (a = b);
  this.$.dmnParamDialogId.open("output", a);
}, _insertOutput:function(a, b) {
  console.log("insertOutput.index:", a + "/data:", b);
  b = {defaultValue:"", kind:"output", label:"Output -> " + (b.label || b.name) + ":" + b.type, valueKey:b.name, type:"string", exprType:b.type, editable:!0};
  this.gridedit.addToStack({type:"insert-column", index:a, col:b});
  this.cols.splice(a, 0, b);
  this.gridRebuild();
}, addRow:function() {
  this.gridedit.addRow(this.rows.length, !0);
}, removeRow:function() {
  var a = this.gridedit.activeCell();
  if (null != a) {
    if (1 < a.length) {
      for (var b = 0; b < a.length; b++) {
        this.gridedit.removeRow(a[b].row.index, !0);
      }
    } else {
      this.gridedit.removeRow(a.row.index, !0);
    }
  }
}, gridRebuild:function() {
  this.gridedit.repopulate();
  this.gridedit.rebuild({cols:this.cols});
  console.log("gridRebuild.data:", JSON.stringify(this.gridedit.data(), null, 2));
  this.refreshResize();
}, resetAll:function() {
  var a = this.gridedit.data();
  if (null != a) {
    for (var b = 0; b < a.length; b++) {
      this.gridedit.removeRow(0, !0);
    }
  }
}, doTest:function() {
  this.async(function() {
    var a = this.buildDecisionJson();
    0 < a.columns.conditions.length && this.$.dmnTestDialogId.open(a);
  }, 50);
}, getState:function() {
  var a = this.buildDecisionJson(), b = this.gridedit.data(), a = {decision:a, meta:{rows:b, cols:this.cols}};
  console.log("getState:", a);
  return a;
}, setState:function(a) {
  this.cols = a.meta.cols;
  a = a.meta.rows;
  for (var b = [], c = 0; c < a.length; c++) {
    for (var d = {}, e = 0; e < this.cols.length; e++) {
      d[this.cols[e].valueKey] = a[c][e];
    }
    b.push(d);
  }
  this.rows = b;
  this.gridedit.rebuild({initialize:!0, cols:this.cols, rows:this.rows});
  this.initDragTable();
}, getList:function(a) {
  return "['" + a.split(/,| /).join("','") + "']";
}, refreshResize:function() {
  var a = this.$.gridedit.querySelector("table.dmnTable");
  $(".rc-handle-container", $(this.$.gridedit)).remove();
  this.async(function() {
    $(a).resizableColumns({});
  }, 100);
}, initDragTable:function() {
  this.refreshResize();
}, buildValue:function(a, b, c) {
  if ("output" == a) {
    return c;
  }
  if ("boolean" == b.variableType) {
    return b.variableName + " ==  " + c;
  }
  a = "=" !== c.op ? c.op : "==";
  c = c.expr;
  return "date" == b.realType ? (console.log("Date.conv:", moment(c).valueOf()), b.variableName + " " + a + " " + moment(c).valueOf()) : "list" == b.variableType ? (b = this.getList(c) + ".contains(" + b.variableName + ")", console.log("List.conv:", b), "oneOf" == a ? b : "!" + b) : "string" == b.variableType && (c = "'" + c + "'", /^[a-z]/i.test(a)) ? b.variableName + "." + a + "(" + c + ")" : b.variableName + " " + a + " " + c;
}, buildDecisionJson:function() {
  var a = this.gridedit.data();
  console.log("doSave.cols:", JSON.stringify(this.cols, null, 2));
  console.log("doSave.data:", JSON.stringify(a, null, 2));
  var b = {}, c = [], d = [];
  b.conditions = c;
  b.actions = d;
  for (var e = 0; e < this.cols.length; e++) {
    var f = this.cols[e], g = {operation:"expr"};
    "checkbox" == f.type ? g.variableType = "boolean" : "dmn-date" == f.type ? (g.variableType = "long", g.realType = "date") : g.variableType = "input" == f.kind ? f.type.substring(4) : f.type;
    g.variableName = f.valueKey;
    g.data = [];
    "input" == f.kind ? c.push(g) : (g.variableType = f.exprType ? f.exprType : f.type, d.push(g));
    for (var h = 0; h < a.length; h++) {
      var l = this.buildValue(f.kind, g, a[h][e]);
      g.data.push(l);
    }
  }
  return {columns:b};
}, ready:function() {
}});
Polymer({is:"te-undo", behaviors:[TranslationsBehavior], attached:function() {
  null == this.undoStack && (this.facade = {update:this.update.bind(this)}, this.reset(), channel.subscribe("executeCommand", function(a) {
    this.handleExecuteCommand(a);
  }.bind(this)), channel.subscribe("doUndo", function(a) {
    this.doUndo();
  }.bind(this)), channel.subscribe("doRedo", function(a) {
    this.doRedo();
  }.bind(this)), channel.subscribe("resetUndo", function(a) {
    this.reset(a);
  }.bind(this)));
}, update:function() {
}, reset:function() {
  this.undoStack = [];
  this.redoStack = [];
}, handleExecuteCommand:function(a) {
  a.command && (this.undoStack.push(a.command), this.redoStack = [], a.command.execute(), this.publishState());
}, doUndo:function() {
  var a = this.undoStack.pop();
  a && (this.redoStack.push(a), a.rollback());
  this.publishState();
}, doRedo:function() {
  var a = this.redoStack.pop();
  a && (this.undoStack.push(a), a.execute());
  this.publishState();
}, publishState:function() {
  channel.publish("undoState", {canUndo:0 < this.undoStack.length, canRedo:0 < this.redoStack.length});
}});
ExecuteBehavior = {executeCommand:function(a) {
  channel.publish("executeCommand", {command:a});
}, redo:function(a) {
  channel.publish("doRedo", {});
}, undo:function(a) {
  channel.publish("doUndo", {});
}};
Polymer({is:"te-block", properties:{rightAlign:{type:Boolean, value:!1}, positionAbsolute:{type:Boolean, value:!1}, useHeight:{type:Boolean, value:!1}, whiteSpacesPreserve:{type:Boolean, value:!0}, helpTabId:{type:String, value:"0"}}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], ready:function() {
  $(this.$.allId).hover(this.focus.bind(this), this.blur.bind(this));
  this.blur();
}, attached:function() {
  this.getMdFields("customer");
  this.getMdFields("company");
  this.leftSide = this.querySelector("#leftSide");
  this.rightSide = this.querySelector("#rightSide");
}, getColStyle:function(a, b) {
  return "width:" + a + ";text-align:" + b + ";";
}, isMacroBlock:function(a) {
  return "macro_block" == this.blocktype;
}, isTableBlock:function(a) {
  return "table_block" == this.blocktype;
}, isImageBlock:function(a) {
  return "image_block" == this.blocktype;
}, setBlockType:function(a) {
  this.blocktype = a;
  "table_block" == a && (this.tableColumns = this.$.tableEditDialog.getState().columns);
  "macro_block" == a && this.async(function() {
    var a = this.$.macroEditDialog.getState();
    null == a.macroNum && (a.macroNum = 1, this.macroTitle = "Macro1", this.$.macroEditDialog.setState(a));
  }, 200);
}, setState:function(a) {
  this.blocktype = a.blocktype;
  "table_block" == this.blocktype ? (this.$.tableEditDialog.setState(a), this.tableColumns = a.columns) : "macro_block" == this.blocktype ? (this.macroTitle = "Macro" + a.macroNum, this.$.macroEditDialog.setState(a)) : "image_block" == this.blocktype ? this.async(function() {
    this.$.imageEditDialog.setState(a);
    this.querySelector("#imageId").src = a.croppedImage;
  }, 100) : (null == this.mde && (this.mde = this.createMde()), this.mde.value(a.markdown), this.$.contentId.innerHTML = this.mde.markdown(this.mde.value()), this.positionAbsolute = a.positionAbsolute, this.useHeight = a.useHeight, this.whiteSpacesPreserve = null == a.whiteSpacesPreserve || "preserve" == a.whiteSpacesPreserve, this.rightAlign = "right" == a.textAlign, $(this.$.contentId).css({textAlign:a.textAlign}));
}, getState:function() {
  var a = {};
  "table_block" == this.blocktype ? a = this.$.tableEditDialog.getState() : "macro_block" == this.blocktype ? a = this.$.macroEditDialog.getState() : "image_block" == this.blocktype ? a = this.$.imageEditDialog.getState() : this.mde && (a.markdown = this.mde.value(), a.html = this.mde.markdown(this.mde.value()), a.textAlign = this.rightAlign ? "right" : "left", a.positionAbsolute = this.positionAbsolute, a.useHeight = this.useHeight, a.whiteSpacesPreserve = this.whiteSpacesPreserve ? "preserve" : 
  "ignore-if-surrounding-linefeed");
  var b = {};
  b.left = this.offsetLeft;
  b.right = this.offsetLeft + this.offsetWidth;
  b.bottom = this.offsetTop + this.offsetHeight;
  b.top = this.offsetTop;
  b.width = this.offsetWidth;
  b.height = this.offsetHeight;
  a.boundingBox = b;
  a.blocktype = this.blocktype;
  return a;
}, closeMdeNOK:function() {
  this.mde.value(this.oldText);
  this.rightAlign = this.oldRightAlign;
  this.positionAbsolute = this.oldPositionAbsolute;
  this.useHeight = this.oldUseHeight;
  this.whiteSpacesPreserve = this.oldWhiteSpacesPreserve;
  this.destroyDialog(this.$.mdeDialog);
}, closeMdeOK:function() {
  this.destroyDialog(this.$.mdeDialog);
  this.$.contentId.innerHTML = this.mde.markdown(this.mde.value());
  var a = this, b = clone(this.mde.value()), c = clone(this.oldText), d = this.oldRightAlign ? "right" : "left", e = this.rightAlign ? "right" : "left";
  this.executeCommand({execute:function() {
    console.log("execute:", b);
    console.log("executeMD:", a.mde.markdown(b));
    a.mde.value(b);
    a.$.contentId.innerHTML = a.mde.markdown(b);
    $(a.$.contentId).css({textAlign:e});
  }, rollback:function() {
    console.log("rollback:", c);
    console.log("rollbackMD:", a.mde.markdown(c));
    a.mde.value(c);
    a.$.contentId.innerHTML = a.mde.markdown(c);
    $(a.$.contentId).css({textAlign:d});
  }});
}, closeTableEdit:function(a) {
  var b = this, c = clone(a.detail.state), d = clone(b.oldTableState);
  this.executeCommand({execute:function() {
    b.$.tableEditDialog.setState(c);
    b.tableColumns = c.columns;
  }, rollback:function() {
    b.$.tableEditDialog.setState(d);
    b.tableColumns = d.columns;
  }});
}, closeMacroEdit:function(a) {
  console.log("data:", a.detail.state);
  this.macroTitle = "Macro" + a.detail.state.macroNum;
}, closeImageEdit:function(a) {
  var b = this, c = clone(a.detail.state), d = clone(b.oldImageState), e = b.querySelector("#imageId"), f = b.parentNode.getBoundingClientRect();
  this.executeCommand({execute:function() {
    b.$.imageEditDialog.setState(c);
    e.src = c.croppedImage;
    var a = c.croppedHeight / c.croppedWidth, d = $(b).width() * a;
    $(b).height(d);
    b.setDim(f, b.getBoundingClientRect(), a);
  }, rollback:function() {
    b.$.imageEditDialog.setState(d);
    e.src = d.croppedImage;
    var a = d.croppedHeight / d.croppedWidth, a = $(b).width() * a;
    $(b).height(a);
  }});
}, setDim:function(a, b, c) {
  console.log("pBB:", clone(a));
  console.log("bBB:", clone(b));
  var d = b.bottom - a.top;
  var e = b.right - a.left - a.width;
  console.log("overWidth:", e);
  if (0 < e) {
    e = b.width - e;
    var f = e * c;
    $(this).width(e);
    $(this).height(f);
  }
  e = d - a.height;
  console.log("overHeight:", e);
  0 < e && (f = b.height - e, e = f / c, $(this).width(e), $(this).height(f));
}, getMdFields:function(a) {
}, tabSelected:function() {
}, close:function() {
  this.fire("blockclose", {id:this.id});
}, edit:function() {
  "table_block" == this.blocktype ? this.tedit() : "image_block" == this.blocktype ? this.iedit() : "macro_block" == this.blocktype ? this.macroedit() : this.medit();
}, tedit:function() {
  this.oldTableState = this.$.tableEditDialog.getState();
  this.$.tableEditDialog.open();
}, iedit:function() {
  this.$.imageEditDialog.open();
  this.async(function() {
    this.oldImageState = this.$.imageEditDialog.getOldState();
  }, 1000);
}, macroedit:function() {
  this.$.macroEditDialog.open();
  this.async(function() {
    this.oldMacroState = this.$.macroEditDialog.getOldState();
  }, 1000);
}, insertText:function(a) {
  a = a.currentTarget.dataset.name;
  var b = this.mde.codemirror;
  b.somethingSelected() ? b.replaceSelection(a) : b.replaceRange("${" + a + "}", b.getCursor());
}, medit:function() {
  null == this.mde && (this.mde = this.createMde());
  this.oldText = clone(this.mde.value());
  this.oldRightAlign = this.rightAlign;
  this.oldPositionAbsolute = this.positionAbsolute;
  this.oldUseHeight = this.useHeight;
  this.oldWhiteSpacesPreserve = this.whiteSpacesPreserve;
  console.log("oldText:", this.oldText);
  var a = this.querySelector(".gutter");
  this.openDialog(this.$.mdeDialog);
  this.async(function() {
    this.mde.value(this.oldText);
    null == a && this.splitDialog();
  }, 100);
}, createMde:function() {
  this.mde = new SimpleMDE({shortcuts:{drawTable:"Cmd-Alt-T"}, hideIcons:["link", "image", "side-by-side", "fullscreen"], showIcons:["undo", "redo", "table", "horizontal-rule"], insertTexts:{horizontalRule:["", "\n-----\n"], image:["![](http://", ")"], link:["[", "](http://)"], table:["", "\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n"]}, spellChecker:!1, element:this.$.mdeId});
  this.mde.codemirror.on("change", function() {
  }.bind(this));
  return this.mde;
}, splitDialog:function() {
  Split([this.leftSide, this.rightSide], {gutterSize:7, sizes:[60, 40], minSize:[300, 100]});
}, focus:function() {
  console.log("focus");
  $(this.$.handleId).show();
}, blur:function() {
  console.log("blur");
  $(this.$.handleId).hide();
}});
Polymer({is:"te-table", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], getId:function(a, b) {
  return a + b;
}, ready:function() {
  this.columns = [{id:"position", text:tr("te.position"), header1:tr("te.position.header"), header2:"", enabled:!0, width:"11%", align:"left"}, {id:"articleId", text:tr("te.articleId"), header1:tr("te.articleId.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"name", text:tr("te.name"), header1:tr("te.name.header"), header2:"", width:"34%", enabled:!1, align:"left"}, {id:"description", text:tr("te.description"), header1:tr("te.description.header"), header2:"", width:"34%", enabled:!0, 
  align:"left"}, {id:"amount", text:tr("te.amount"), header1:tr("te.amount.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"unit", text:tr("te.unit"), header1:tr("te.unit.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"retailPrice", text:tr("te.retailPrice"), header1:tr("te.retailPrice.header"), header2:"", width:"11%", enabled:!0, align:"left"}, {id:"total", text:tr("te.total"), header1:tr("te.total.header"), header2:"", width:"11%", enabled:!0, align:"left"}, 
  {id:"vat", text:tr("te.vat"), header1:tr("te.vat.header"), header2:"", width:"8%", enabled:!0, align:"left"}];
  this.filterEnabledColumns();
}, onTapColumnAdd:function(a) {
  var b = a.target.dataId;
  a = this.getColumnIndex(this.columns, b, a.target.dataCol);
  console.log("id(" + b + "):", a);
  this.$.columnDialogId.open(a);
}, onTapColumnDel:function(a) {
  a = this.getColumnIndex(this.columns, a.target.dataId, a.target.dataCol);
  this.splice("columns", a, 1);
  this.filterEnabledColumns();
}, columnAdd:function(a) {
  console.log("columnAdd:", a.detail);
  var b = a.detail.index;
  a = clone(a.detail.data);
  a.enabled = !0;
  a.align = "left";
  a.width = "10%";
  a.header2 = "";
  this.splice("columns", b + 1, 0, a);
  this.filterEnabledColumns();
}, closeNOK:function() {
  this.destroyDialog(this.$.tableDialog);
  this.columns = this.oldColumns;
  this.dataref = this.oldDataref;
  this.filterEnabledColumns();
}, closeOK:function() {
  this.destroyDialog(this.$.tableDialog);
  console.log("closeOK:", this.columns);
  this.fire("close-tableedit", {state:{columns:clone(this.columns)}});
}, getColStyle:function(a, b) {
  return "width:" + a + ";text-align:" + b + ";";
}, filterEnabledColumns:function() {
  var a = this.columns.filter(function(a) {
    return a.enabled;
  });
  this.enabledColumns = [];
  this.async(function() {
    this.enabledColumns = clone(a);
    console.log("enabledColumns:", this.enabledColumns);
  });
}, datarefChanged:function(a) {
  this.dataref = a.target.value;
}, header1Changed:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.header1 = a.target.value);
  });
  $(this.$.edittableHeaderId).children("th").each(function(c) {
    this.dataId == b && (this.querySelector("#h1").innerHTML = a.target.value);
  });
}, header2Changed:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.header2 = a.target.value);
  });
  $(this.$.edittableHeaderId).children("th").each(function(c) {
    this.dataId == b && (this.querySelector("#h2").innerHTML = a.target.value);
  });
}, alignChanged:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.align = a.target.value);
  });
  this.filterEnabledColumns();
  this.refreshResize();
}, checkboxChanged:function(a) {
  var b = a.target.dataId;
  this.columns.forEach(function(c) {
    c.id == b && (c.enabled = 1 == a.target.checked);
  });
  this.filterEnabledColumns();
  this.refreshResize();
}, refreshResize:function() {
  $(".rc-handle-container", $(this.$.tableDialog)).remove();
  this.async(function() {
    $(this.$.edittableId).resizableColumns({stop:this.storeWidth.bind(this)});
  }, 100);
}, moveToIndex:function(a, b) {
  var c = this.columns.findIndex(function(a) {
    return a.id == b;
  });
  if (a != c) {
    var d = this.columns, e = d[a];
    d[a] = d[c];
    d[c] = e;
  }
}, storeWidth:function(a) {
  var b = this;
  $(this.$.edittableHeaderId).children("th").each(function(a) {
    b.getColumn(b.columns, this.dataId).width = this.style.width;
  });
}, getColumn:function(a, b) {
  for (var c = 0; c < a.length; c++) {
    if (a[c].id == b) {
      return a[c];
    }
  }
  return null;
}, getColumnIndex:function(a, b, c) {
  for (var d = 0; d < a.length; d++) {
    if (a[d].id == b) {
      return d;
    }
  }
  return c;
}, getState:function() {
  return {meta:{dataref:this.dataref}, columns:clone(this.columns)};
}, setState:function(a) {
  a.meta && (this.dataref = a.meta.dataref);
  this.columns = a.columns || this.columns;
  this.filterEnabledColumns();
}, open:function(a) {
  this.filterEnabledColumns();
  this.oldColumns = clone(this.columns);
  this.oldDataref = clone(this.dataref);
  this.openDialog(this.$.tableDialog);
  var b = this;
  $(this.$.edittableId).dragtable({placeholder:"placeholder", helperCells:":not(.footerrow td)", stop:function() {
    $(b.$.edittableHeaderId).children("th").each(function(a, d, e) {
      b.moveToIndex(a, this.dataId);
    });
    b.filterEnabledColumns();
    b.refreshResize();
  }});
  this.refreshResize();
}});
Polymer({is:"te-image", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], ready:function() {
}, closeNOK:function() {
  console.log("closeNOK(old:", this.oldState);
  this.setState(this.oldState);
  this.async(function() {
    this.closeDialog(this.$.imageDialog);
    this.isOpen = !1;
  }, 250);
}, closeOK:function() {
  this.closeDialog(this.$.imageDialog);
  this.fire("close-imageedit", {state:this.getState()});
  this.isOpen = !1;
}, setCropperData:function(a) {
  var b = this.$.cropBoxId.getImage();
  null == a.imageData.width ? this.$.cropBoxId.reset() : (b.cropper("setCropBoxData", a.cropBoxData), b.cropper("setCanvasData", a.canvasData), b.cropper("setImageData", a.imageData), console.debug("setCropperData.state:", a));
}, refreshState:function() {
  var a = this.$.cropBoxId.getImage();
  null == this.currentState && (this.currentState = {});
  var b = a.cropper("getCroppedCanvas");
  console.trace("refreshState.canvas:", b);
  b && (this.currentState.croppedImage = b.toDataURL(), this.currentState.croppedWidth = b.width, this.currentState.croppedHeight = b.height);
  this.currentState.cropBoxData = a.cropper("getCropBoxData");
  this.currentState.canvasData = a.cropper("getCanvasData");
  this.currentState.imageData = a.cropper("getImageData");
  this.currentState.containerData = a.cropper("getContainerData");
  console.debug("refreshState.currentState:", this.currentState);
  return this.currentState;
}, cropperReady:function(a) {
  this.currentState.file = a.detail.event.target.src;
  this.currentState.fileId = a.detail.fileId;
  console.log("Ready.currentFileId:", this.currentState.fileId);
}, getState:function() {
  if (this.notAppliedState) {
    return this.notAppliedState;
  }
  this.$.cropBoxId.gotoEditTab();
  return this.refreshState();
}, setState:function(a) {
  this.isOpen ? this._setState(a) : this.notAppliedState = a;
}, _setState:function(a) {
  null == this.currentState && (this.currentState = {});
  a.file && (console.log("stateFile:", a.file.toString().substring(0, 64)), this.$.cropBoxId.replaceImage(a.fileId, a.file), this.currentState.fileId = a.fileId, this.currentState.file = a.file);
  this.async(function() {
    a.file && this.setCropperData(a);
  }, 150);
}, getOldState:function() {
  return this.oldState;
}, open:function(a) {
  this.isOpen = !0;
  this.openDialog(this.$.imageDialog);
  console.log("ImageDialog.open");
  this.async(function() {
    this.notAppliedState && (this._setState(this.notAppliedState), this.notAppliedState = null);
    this.async(function() {
      this.oldState = clone(this.getState());
    }, 200);
  }, 200);
}});
Polymer({is:"te-macro", properties:{}, behaviors:[DialogBehavior, ExecuteBehavior, TranslationsBehavior], observers:[], ready:function() {
  this.data = {};
}, closeNOK:function() {
  console.log("closeNOK(old:", this.oldState);
  this.setState(this.oldState);
  this.async(function() {
    this.closeDialog(this.$.macroDialog);
    this.isOpen = !1;
  }, 250);
}, closeOK:function() {
  this.closeDialog(this.$.macroDialog);
  this.fire("close-macroedit", {state:this.getState()});
  this.isOpen = !1;
}, getState:function() {
  return this.$.formId.getData();
}, setState:function(a) {
  return this.$.formId.setData(a);
}, getOldState:function() {
  return this.oldState;
}, onMacroChanged:function(a) {
  console.log(this.$.macroMenu.selectedItem);
}, open:function(a) {
  this.isOpen = !0;
  this.openDialog(this.$.macroDialog, 500);
  console.log("macroDialog.open");
  this.oldState = clone(this.getState());
}});
Polymer({is:"te-columndialog", behaviors:[DialogBehavior, TranslationsBehavior], onTap:function() {
  if (this.$.formId.validate()) {
    var a = this.$.formId.getData();
    this.fire("columndialog-ok", {index:this.index, data:a});
    this.destroyDialog(this.$.dialogId);
  }
}, close:function(a) {
  this.sd.parent().css("z-index", "inherit");
  this.destroyDialog(this.$.dialogId);
}, open:function(a) {
  this.index = a;
  this.$.formId.setData({});
  a = this.openDialog(this.$.dialogId, "inherit");
  a.parent().css("z-index", "555112");
  this.sd = a;
}});
Polymer({is:"te-paperarea", listeners:{blockclose:"blockclose"}, properties:{mainTabId:{type:String}, paperWidth:{type:String}, paperHeight:{type:String}, paperName:{type:String}}, behaviors:[TranslationsBehavior, ExecuteBehavior], isNotMacroPage:function(a) {
  return !a.startsWith("macro");
}, _createBlockFromState:function(a) {
  console.log("paperarea.setState(" + this.paperName + "," + i + "):", a);
  var b = a.boundingBox;
  this.createBlockFromState(a.blocktype, b.left, b.top, b.width, b.height).setState(a);
}, setState:function(a) {
  var b = a.absolute || a["static"];
  a = a.flow || [];
  for (var c = 0; c < b.length; c++) {
    this._createBlockFromState(b[c]);
  }
  for (c = 0; c < a.length; c++) {
    this._createBlockFromState(a[c]);
  }
}, getState:function() {
  for (var a = this.$.canvasId.querySelectorAll("te-block"), b = [], c = [], d = 0; d < a.length; d++) {
    var e = a[d].getState();
    !1 === e.positionAbsolute || "table_block" == e.blocktype || "additionalContent" == this.paperName || this.paperName.startsWith("macro") ? c.push(e) : b.push(e);
  }
  c.sort(function(a, b) {
    return a.boundingBox.top - b.boundingBox.top;
  });
  console.log("blockListFlow:", c);
  return {flow:c, absolute:b};
}, clear:function() {
  for (var a = this.$.canvasId.querySelectorAll("te-block"), b = 0; b < a.length; b++) {
    a[b].remove();
  }
}, setPaperSize:function() {
  if (null != this.dataPage1Form) {
    var a = this.$.canvasId, b = null, c = null;
    "page1Content" == this.paperName && (b = this.paperHeight - (this.dataPage1Form.topMargin + this.dataPage1Form.bottomMargin + this.dataPage1Form.headerHeight + this.dataPage1Form.footerHeight), c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "additionalContent" == this.paperName && (b = this.paperHeight - (this.dataPage1Form.topMargin + this.dataPage1Form.bottomMargin + this.dataPage1Form.headerHeight + this.dataPage1Form.footerHeight), c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro1" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro2" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "macro3" == this.paperName && (b = this.paperHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page1Header" == this.paperName && (b = this.dataPage1Form.headerHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page1Footer" == this.paperName && (b = this.dataPage1Form.footerHeight, c = this.paperWidth - (this.dataPage1Form.leftMargin + this.dataPage1Form.rightMargin));
    "page2Header" == this.paperName && (b = this.dataPage2Form.headerHeight, c = this.paperWidth - (this.dataPage2Form.leftMargin + this.dataPage2Form.rightMargin));
    "page2Footer" == this.paperName && (b = this.dataPage2Form.footerHeight, c = this.paperWidth - (this.dataPage2Form.leftMargin + this.dataPage2Form.rightMargin));
    a.style.height = b + "px";
    a.style.width = c + "px";
  }
}, moveBlocksInto:function() {
  for (var a, b = this.$.canvasId, c = b.querySelectorAll("te-block"), b = b.getBoundingClientRect(), d = 0; d < c.length; d++) {
    var e = c[d];
    a = e.getBoundingClientRect();
    var f = a.bottom - b.top, g = a.right - b.left - b.width;
    0 < g && (a = $(e).offset(), $(e).offset({left:a.left - g, top:a.top}));
    g = f - b.height;
    0 < g && (a = $(e).offset(), $(e).offset({left:a.left, top:a.top - (g + 2)}));
  }
}, closeMenu:function() {
  this.$.blockMenuId.close();
  var a = new MouseEvent("mouseup", {view:window, bubbles:!0, cancelable:!0});
  this.$.canvasId.dispatchEvent(a);
}, attached:function() {
  if (!this.atta) {
    this.atta = !0;
    channel.subscribe("globalSetupPage1", function(a) {
      this.dataPage1Form = a.setup;
    }.bind(this));
    channel.subscribe("globalSetupPage2", function(a) {
      this.dataPage2Form = a.setup;
    }.bind(this));
    channel.subscribe("mainTabChanged", function(a) {
      this.async(function() {
        this.setPaperSize();
        this.moveBlocksInto();
      }, 250);
    }.bind(this));
    channel.subscribe("scrollOffset", function(a) {
      if ("page1Content" == this.paperName || "additionalContent" == this.paperName) {
        var b = a.offset.y;
        this.debounce("xxx", function() {
          $(this.$.toolbarId).offset();
          this.$.toolbarId.style.top = b + "px";
        }, 10);
      }
    }.bind(this));
    this.zoom = 1;
    this.setZoom();
    var a = this;
    this.async(function() {
      this.rect = this.$.canvasId.getBoundingClientRect();
    }, 100);
    this.async(function() {
      $(".draggable").drag({start:function(b) {
        a.rect = a.$.canvasId.getBoundingClientRect();
        b.dataTransfer.effectAllowed = $.dnd.EFFECT_ALL;
        $(this).addClass("active");
        console.log("start:", b.currentTarget.dataset.block);
        b.dataTransfer.setData("text", b.currentTarget.dataset.block);
      }, end:function(b) {
        console.log("end:", b);
        $(this).removeClass("active");
        a.fire("enddrag", {});
        a.closeMenu();
      }});
      $(".droppable", this).drop({drop:function(b) {
        var c = b.dataTransfer.getData("text");
        $(this).removeClass("active");
        a.createBlock(c, b.originalEvent.clientY, b.originalEvent.clientX);
      }, over:function(a) {
        a.dataTransfer.dropEffect = $.dnd.EFFECT_COPY;
      }, enter:function(a) {
        console.log("enter:", a);
      }, leave:function(a) {
        console.log("leave:", a);
      }});
    }, 100);
  }
}, blockclose:function(a) {
  console.log("close:", a);
  var b = this, c = $("#" + a.detail.id, this);
  this.executeCommand({execute:function() {
    c.detach();
    b.makeBlockDraggable();
  }, rollback:function() {
    c.appendTo(b.$.canvasId, b);
    b.makeBlockDraggable();
  }});
}, createBlockFromState:function(a, b, c, d, e) {
  var f = document.createElement("te-block");
  f.id = "blockId" + this.getId();
  f.className += "block";
  f.setBlockType(a);
  $("#canvasId", this).append(f);
  $(f).css({top:c, left:b, height:e + "px", width:d + "px"});
  this.makeBlockDraggable();
  return f;
}, createBlock:function(a, b, c) {
  var d = document.createElement("te-block");
  d.id = "blockId" + this.getId();
  d.className += "block";
  d.setBlockType(a);
  var e = (c - 75 - this.rect.left) / this.zoom;
  0 > e && (e = 0);
  var f = "150px";
  "table_block" == a && (e = 0, f = "100%");
  "macro_block" == a && (e = 0, f = "100%");
  this.async(function() {
    $(d).css({top:(b - this.rect.top) / this.zoom, left:e, height:"70px", width:f});
    this.makeBlockDraggable();
    this.moveBlocksInto();
  }, 10);
  var g = this;
  this.executeCommand({execute:function() {
    $("#canvasId", g).append(d);
  }, rollback:function() {
    $(d).detach();
  }});
}, makeBlockDraggable:function() {
  var a = this;
  $(".block", this).draggable({start:function(a, c) {
    console.log("start:", c);
  }, stop:function(b, c) {
    console.log("stop:", c);
    var d = clone(c.originalPosition), e = clone(c.position), f = c.helper.attr("id");
    a.executeCommand({execute:function() {
      $("#" + f, a).css({top:e.top, left:e.left});
    }, rollback:function() {
      $("#" + f, a).css({top:d.top, left:d.left});
    }});
  }, containment:this.$.canvasId, handle:this.$.contentId, drag:function(a, c) {
  }.bind(this), scroll:!1});
  $(".block", this).resizable({start:function(a, c) {
    console.log("start:", c);
  }, stop:function(b, c) {
    console.log("resizable:", c);
    var d = clone(c.originalSize), e = clone(c.size), f = c.element.attr("id");
    a.executeCommand({execute:function() {
      $("#" + f, a).css({height:e.height, width:e.width});
    }, rollback:function() {
      $("#" + f, a).css({height:d.height, width:d.width});
    }});
  }, minHeight:15, minWidth:60, containment:this.$.canvasId});
}, getId:function() {
  null == this.idCounter ? this.idCounter = 1 : this.idCounter++;
  return this.idCounter;
}, zoomOutAction:function() {
  this.zoom -= 0.1;
  0.4 > this.zoom && (this.zoom = 0.4);
  this.setZoom();
}, zoomInAction:function() {
  this.zoom += 0.1;
  2 < this.zoom && (this.zoom = 2);
  this.setZoom();
}, zoom100Action:function() {
  this.zoom = 1;
  this.setZoom();
}, setZoom:function() {
  this.zoom = Number(this.zoom.toFixed(2));
  console.log("zoom:", this.zoom);
  this.$.canvasId.setAttribute("style", "zoom:" + this.zoom);
  this.setPaperSize();
  channel.publish("zoom", {name:this.paperName});
}});
Polymer({is:"template-editor", listeners:{}, properties:{mainTabId:{type:String, value:"0"}}, behaviors:[TranslationsBehavior, LobiboxBehavior, ExecuteBehavior], isAddContent:function(a) {
  return "1" == a;
}, setState:function(a) {
  console.log("te-editor.setState:", a);
  this.lockValueChangeEvent = !0;
  var b = this.mainTabId;
  this.mainTabId = "0";
  this.page1FormId.setData(a.page1);
  this.page2FormId.setData(a.page2);
  this.$.macro1Enabled.checked = a.macro1Enabled;
  this.$.macro2Enabled.checked = a.macro2Enabled;
  this.$.macro3Enabled.checked = a.macro3Enabled;
  this.$.headerAsPage1.checked = a.headerAsPage1;
  this.$.footerAsPage1.checked = a.footerAsPage1;
  this.$.paramAsPage1.checked = a.paramAsPage1;
  channel.publish("globalSetupPage1", {setup:clone(a.page1)});
  channel.publish("globalSetupPage2", {setup:clone(a.page2)});
  Object.keys(a.areas).forEach(function(b) {
    var c = this.querySelector("te-paperarea#" + b);
    this.mainTabId = c.parentNode.getAttribute("main-item-id");
    if (1 != a.headerAsPage1 || "page2Header" != b) {
      if (1 != a.footerAsPage1 || "page2Footer" != b) {
        c.setState(a.areas[b]), c.setPaperSize();
      }
    }
  }.bind(this));
  this.mainTabId = b;
  this.lockValueChangeEvent = !1;
}, getState:function() {
  for (var a = this.mainTabId, b = {areas:{}}, c = this.querySelectorAll("te-paperarea"), d = 0; d < c.length; d++) {
    var e = c[d];
    this.mainTabId = e.parentNode.getAttribute("main-item-id");
    b.areas[e.id] = e.getState();
  }
  this.$.headerAsPage1.checked && (b.areas.page2Header = b.areas.page1Header);
  this.$.footerAsPage1.checked && (b.areas.page2Footer = b.areas.page1Footer);
  b.page1 = this.page1FormId.getData();
  b.page2 = this.$.paramAsPage1.checked ? b.page1 : this.page2FormId.getData();
  this.mainTabId = a;
  b.macro1Enabled = this.$.macro1Enabled.checked;
  b.macro2Enabled = this.$.macro2Enabled.checked;
  b.macro3Enabled = this.$.macro3Enabled.checked;
  b.headerAsPage1 = this.$.headerAsPage1.checked;
  b.footerAsPage1 = this.$.footerAsPage1.checked;
  b.paramAsPage1 = this.$.paramAsPage1.checked;
  console.log("te-editor.getState:", b);
  return b;
}, clear:function() {
  this.lockValueChangeEvent = !0;
  for (var a = this.querySelectorAll("te-paperarea"), b = 0; b < a.length; b++) {
    a[b].clear();
  }
  this.setDefaultPaperSize(!1);
  this.lockValueChangeEvent = !1;
}, onTapClear:function() {
  var a = this, b = clone(this.getState());
  this.executeCommand({execute:function() {
    a.clear();
  }, rollback:function() {
    a.setState(b);
  }});
}, getFo:function(a) {
  a = {service:"simpl4", method:"dashboard.getBillPdf", parameter:{wawidoc:JSON.stringify(a)}, async:!0, context:this, failed:function(a) {
    console.error("getFo.failed:", a);
  }, completed:function(a) {
    console.debug("getFo:", a);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, mainTabSelected:function(a) {
  channel.publish("mainTabChanged", {selectedTab:(a.srcElement || a.target).selected});
  this.async(function() {
    this.updateScrollbar();
  }, 100);
}, attached:function() {
  this.page1FormId = this.querySelector("#page1FormId");
  this.page2FormId = this.querySelector("#page2FormId");
  window.addEventListener("resize", this.setScrollAreaHeight.bind(this));
  this._initScrollbar();
  this.canUndo = this.canRedo = !1;
  this.currentTemplateName = null;
  channel.subscribe("undoState", function(a) {
    this.canUndo = a.canUndo;
    this.canRedo = a.canRedo;
  }.bind(this));
  channel.subscribe("zoom", function(a) {
    this.updateScrollbar();
  }.bind(this));
  this.setDefaultPaperSize(!0);
}, setDefaultPaperSize:function(a) {
  this.dataPage1Form = {leftMargin:28, rightMargin:28, topMargin:28, bottomMargin:28, headerHeight:100, footerHeight:100};
  this.dataPage2Form = {leftMargin:28, rightMargin:28, topMargin:28, bottomMargin:28, headerHeight:100, footerHeight:100};
  this.$.headerAsPage1.checked = !0;
  this.$.footerAsPage1.checked = !0;
  this.$.paramAsPage1.checked = !0;
  this.$.macro1Enabled.checked = !1;
  this.$.macro2Enabled.checked = !1;
  this.$.macro2Enabled.checked = !1;
  a ? this.async(function() {
    channel.publish("globalSetupPage1", {setup:clone(this.dataPage1Form)});
    channel.publish("globalSetupPage2", {setup:clone(this.dataPage1Form)});
    this.async(function() {
      this.$.page1Content.setPaperSize();
      this.$.additionalContent.setPaperSize();
    }, 100);
  }, 100) : (channel.publish("globalSetupPage1", {setup:clone(this.dataPage1Form)}), channel.publish("globalSetupPage2", {setup:clone(this.dataPage1Form)}), this.$.page1Content.setPaperSize(), this.$.additionalContent.setPaperSize());
}, updateScrollbar:function() {
  this.setScrollAreaHeight();
  this.async(function() {
    this._scrollbar.scrollTo(0, 0);
    this._scrollbar.update(!0);
  }, 100);
}, onSetup1ValueChanged:function(a) {
  !this.lockValueChangeEvent && this.page1FormId.validate() && this.debounce("onSetup1ValueChanged", function() {
    var b = a.detail.name, c = this.page1FormId.getData(), d = clone(this.dataPage1Form), e = this.dataPage1Form[b], f = c[b];
    this.dataPage1Form[b] = c[b];
    var g = clone(this.dataPage1Form), h = this;
    this.executeCommand({execute:function() {
      channel.publish("globalSetupPage1", {setup:g});
      h.updateFormFieldWithLock(h.page1FormId, b, f);
    }, rollback:function() {
      channel.publish("globalSetupPage1", {setup:d});
      h.updateFormFieldWithLock(h.page1FormId, b, e);
    }});
  }, 1000);
}, onSetup2ValueChanged:function(a) {
  !this.lockValueChangeEvent && this.page2FormId.validate() && this.debounce("onSetup2ValueChanged", function() {
    var b = a.detail.name, c = clone(this.dataPage1Form), d = this.page2FormId.getData(), e = this.dataPage2Form[b], f = d[b];
    this.dataPage2Form[b] = d[b];
    var g = clone(this.dataPage1Form), h = this;
    this.executeCommand({execute:function() {
      channel.publish("globalSetupPage2", {setup:g});
      h.updateFormFieldWithLock(h.page2FormId, b, f);
    }, rollback:function() {
      channel.publish("globalSetupPage2", {setup:c});
      h.updateFormFieldWithLock(h.page2FormId, b, e);
    }});
  }, 1000);
}, updateFormFieldWithLock:function(a, b, c) {
  var d = [];
  d[b] = c;
  this.lockValueChangeEvent = !0;
  a.updateData(d, !0);
  this.lockValueChangeEvent = !1;
}, setScrollAreaHeight:function() {
  var a = window.innerHeight - 193;
  this.$.scrollId.style.height = a + 30 + "px";
  return a;
}, _initScrollbar:function() {
  var a = "ontouchstart" in window || 0 < navigator.msMaxTouchPoints;
  this._scrollbar = window.Scrollbar.init(this.$.scrollId, {speed:a ? 1 : 4, damping:a ? 0.1 : 0.05, renderByPixels:!0, overscrollEffect:"bounce", alwaysShowTracks:!0, overscrollEffectColor:"#87ceeb", thumbMinSize:10});
  this.setScrollAreaHeight();
  this.async(function() {
    this._scrollbar.update(!0);
  }, 100);
  this._scrollbar.addListener(function(a) {
    channel.publish("scrollOffset", {offset:a.offset});
  }.bind(this));
}, redoAction:function() {
  this.redo();
}, undoAction:function() {
  this.undo();
}, onTapSave:function() {
  this.debounce("onTapSave", function() {
    this._onTapSave();
  }, 250);
}, _onTapSave:function() {
  this.saveState(this.currentTemplateName, null);
}, onTapSaveUnder:function() {
  this.getState();
  var a = Lobibox.prompt("text", {height:200, title:tr("te.enter_name"), attrs:{pattern:"[A-Za-z0-9]{3,}", value:this.currentTemplateName}, callback:function(b, c, d) {
    console.log("callback:", a.getValue());
    _.isEmpty(a.getValue()) || this.saveState(a.getValue(), null);
  }.bind(this)});
}, saveState:function(a, b) {
  var c = b || this.getState();
  null == b && (this.currentTemplateName = a);
  a = {service:"registry", method:"set", parameter:{key:"/dashboard/template/" + a, attributes:{subject:"template"}, value:JSON.stringify(c)}, async:!0, context:this, failed:function(a) {
    console.error("saveTemplate:", a);
    null != a && this.notify(tr("error"), "error", 8000);
  }, completed:function(a) {
    this.notify(tr("te.template_saved"), "success", 8000);
  }};
  simpl4.util.Rpc.rpcAsync(a);
}, selectFromList:function(a, b, c, d) {
  var e = Lobibox.window({title:tr("te.select_template"), width:300, height:400, modal:!0, content:function() {
    return $(a);
  }, buttons:{select:{text:tr("button.select")}, close:{text:tr("button.cancel"), closeOnClick:!0}}, callback:function(a, g, h) {
    if ("select" === g && (a = a.$el[0].querySelector("#templateMenuId").selected, null != a)) {
      var f = clone(this.getState());
      this.currentTemplateName = c[a];
      var n = clone(JSON.parse(b[a]));
      if (d) {
        n.name = this.currentTemplateName, d(n);
      } else {
        var p = this;
        this.executeCommand({execute:function() {
          p.clear();
          p.setState(n);
        }, rollback:function() {
          p.clear();
          p.setState(f);
        }});
      }
      e.destroy();
    }
  }.bind(this)});
}, onTapLoad:function() {
  this.debounce("onTapLoad", function() {
    this._onTapLoad(null);
  }, 250);
}, _onTapLoad:function(a) {
  simpl4.util.Rpc.rpcAsync({service:"registry", method:"getAll", parameter:{attributes:{subject:"template"}}, async:!0, context:this, failed:function(a) {
    console.error("getTemplates:", a);
    this.notify(tr("error"), "error", 8000);
  }, completed:function(b) {
    console.log("getTemplates.ret:", b);
    var c = '<paper-menu id="templateMenuId">', d = [], e = [], f;
    for (f in b) {
      var g = b[f].key, g = g.substring(g.lastIndexOf("/") + 1), c = c + ('<paper-item style="min-height:24px; font-size:14px;">' + g + "</paper-item>");
      d.push(b[f].value);
      e.push(g);
    }
    this.selectFromList(c + "</paper-menu>", d, e, a);
  }});
}, onTapExport:function() {
  this._onTapLoad(function(a) {
    console.log("onTapExport:", a);
    var b = this.querySelector('input#tempId[type="file"]');
    b.onchange = function(b) {
      b = b.target.files[0];
      console.log("file:", b);
      var c = new Blob([JSON.stringify(a, null, 2)], {type:"text/json"});
      saveAs(c, b.name);
    }.bind(this);
    $(b).trigger("click");
  }.bind(this));
}, onTapImport:function() {
  var a = this, b = this.querySelector('input#tempId[type="file"]');
  b.onchange = function(b) {
    var c = b.target.files;
    console.log("files:", b);
    var e = new FileReader;
    e.onload = function(b) {
      return function(c) {
        c = -1 == b.name.lastIndexOf(".") ? b.name : b.name.substring(0, b.name.lastIndexOf("."));
        var d = JSON.parse(e.result);
        console.log("basename:", c);
        console.log("state:", d);
        a.saveState(c, d);
      };
    }(c[0]);
    e.readAsBinaryString(c[0]);
  }.bind(this);
  $(b).trigger("click");
}});
(function() {
  Polymer({is:"paper-collapse-item", properties:{header:String, icon:String, src:String, opened:Boolean, _toggleIcon:{type:String, computed:"_computeToggleIcon(opened)"}}, _toggleOpened:function(a) {
    this.opened = (a = this.$.contentId.children) && a.length ? !this.opened : !1;
  }, _computeToggleIcon:function(a) {
    return a ? "icons:expand-less" : "icons:expand-more";
  }});
})();
Polymer({is:"fade-in-slide-from-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(100%)", opacity:"0"}, {transform:"translateX(50%)", opacity:"0"}, {transform:"none", opacity:"1"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-out-slide-right-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none", opacity:"1"}, {transform:"translateX(50%)", opacity:"1"}, {transform:"translateX(100%)", opacity:"0"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-in-slide-from-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"translateX(-100%)", opacity:"0"}, {transform:"translateX(-50%)", opacity:"0"}, {transform:"none", opacity:"1"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
Polymer({is:"fade-out-slide-left-animation", behaviors:[Polymer.NeonAnimationBehavior], configure:function(a) {
  var b = a.node;
  this._effect = new KeyframeEffect(b, [{transform:"none", opacity:"1"}, {transform:"translateX(-50%)", opacity:"0"}, {transform:"translateX(-100%)", opacity:"0"}], this.timingFromConfig(a));
  a.transformOrigin ? this.setPrefixedProperty(b, "transformOrigin", a.transformOrigin) : this.setPrefixedProperty(b, "transformOrigin", "0 50%");
  return this._effect;
}});
window.Stepper = window.Stepper || {};
Stepper.StepLabelBehavior = {properties:{icon:{type:String, computed:"_computeIcon(saved, editable)"}, opened:{type:Boolean, reflectToAttribute:!0}, selectable:{type:Boolean, reflectToAttribute:!0}, editable:{type:Boolean, reflectToAttribute:!0}, label:{type:String, notify:!0}, optional:{type:Boolean, notify:!0}, saved:{type:Boolean, reflectToAttribute:!0}, index:{type:Number}, stepperData:{type:Object}}, _computeIcon:function(a, b) {
  return a ? b ? "editor:mode-edit" : "done" : "";
}, _computeIsIconBadge:function(a) {
  return 0 < a.length;
}};
Polymer({is:"step-horizontal-label", behaviors:[Stepper.StepLabelBehavior], properties:{alternativeLabel:{type:Boolean, value:!1, reflectToAttribute:!0}}});
Polymer({is:"step-vertical-label", properties:{canSkip:{type:Boolean}}, behaviors:[Stepper.StepLabelBehavior]});
Polymer({is:"paper-step", behaviors:[Polymer.IronValidatableBehavior, Polymer.NeonAnimatableBehavior, Polymer.PaperItemBehavior, Polymer.PaperRippleBehavior], properties:{saved:{type:Boolean, value:!1, notify:!0, readOnly:!0}, editable:{type:Boolean, value:!1}, index:{type:Number, notify:!0, readOnly:!0}, topPos:{type:Number, value:100}, _previousSaved:{type:Boolean, readOnly:!0}, optional:{type:Boolean, value:!1}, selectable:{type:Boolean, computed:"_computeSelectable(_stepperData.linear, saved, editable, _previousSaved)", 
reflectToAttribute:!0, notify:!0}, disabled:{computed:"_computeDisabled(selectable)"}, label:{type:String, value:""}, opened:{type:Boolean, value:!1, notify:!0}, animationConfig:{readOnly:!0}, entryAnimation:{readOnly:!0}, exitAnimation:{readOnly:!0}, vertical:{type:Boolean, readOnly:!0, reflectToAttribute:!0}, horizontalHigherEntryAnimation:{type:String}, horizontalHigherExitAnimation:{type:String}, horizontalLowerEntryAnimation:{type:String}, horizontalLowerExitAnimation:{type:String}, _alternativeLabel:{type:Boolean, 
readOnly:!0}, _optionalText:{type:Boolean, readOnly:!0}, _attrForPrimaryButtonText:{type:String, readOnly:!0}, _stepper:{type:Object, readOnly:!0}, _stepperData:{type:Object, readOnly:!0}, _canSkip:{type:Boolean, readOnly:!0}, _hasBackStep:{type:Boolean, readOnly:!0}}, listeners:{"paper-step-vertical-skip-tapped":"skip", "paper-step-vertical-back-tapped":"back", "paper-step-vertical-continue-tapped":"continue", tap:"_tapHandler"}, observers:["_toggleClassPosition(index, _stepperData.stepNumber, vertical)", 
"_updateSlideshowViewportTop(optional, _alternativeLabel, vertical)", "_verticalChange(vertical)", "_focusedChanged(receivedFocusFromKeyboard)", "_labelElementChanged(_labelElement)"], _focusedChanged:function(a) {
  if (a) {
    this.ensureRipple();
    var b = this._rippleContainer.$.badge.getBoundingClientRect();
    this._ripple.downAction({detail:{x:b.left + 12, y:b.top + 12}});
  }
  this.hasRipple() && (this._ripple.holdDown = a);
}, _tapHandler:function(a) {
  var b = Polymer.dom(a).rootTarget;
  b !== this && b !== this._rippleContainer && a.stopImmediatePropagation();
}, skip:function() {
  this._stepper.progress();
}, back:function() {
  this._stepper.back();
}, save:function() {
  return this.saved && !this.editable || !this.validate() ? !1 : (this.saved ? this.fire("paper-step-updated") : (this._setSaved(!0), this.fire("paper-step-saved")), !0);
}, continue:function() {
  return this.save() ? (this._stepper.progress(), !0) : !1;
}, _updateSlideshowViewportTop:function(a, b, c) {
  c || this.async(function() {
    this.$$("#slideshowViewport").style.top = this.topPos + "px";
    this.fire("step-horizontal-label-resize");
  }, 1);
}, _toggleClassPosition:function(a, b, c) {
  this.async(function() {
    var d = this.$$(c ? "#verticalStepLabel" : "#horizontalStepLabel");
    this.toggleClass("first-step", 1 == a, d);
    this.toggleClass("last-step", a == b, d);
  });
}, _updateAnimationConfig:function() {
  var a = this.$$("#contentWrapper");
  this._setAnimationConfig({"higher-step-entry":{node:a, name:this.horizontalHigherEntryAnimation}, "higher-step-exit":{node:a, name:this.horizontalHigherExitAnimation}, "lower-step-entry":{node:a, name:this.horizontalLowerEntryAnimation}, "lower-step-exit":{node:a, name:this.horizontalLowerExitAnimation}});
}, _verticalChange:function(a) {
  this.async(function() {
    Polymer.dom(this.$$(a ? "#paperStepWrapper" : "#contentWrapper")).appendChild(this.$$("content") || this.create("content"));
    this._ripple = !1;
    this._rippleContainer = this.$$(a ? "#verticalStepLabel" : "#horizontalStepLabel");
    a || this._updateAnimationConfig();
  }.bind(this));
}, _computeSelectable:function(a, b, c, d) {
  return (!a || d) && (!b || c) || c && b;
}, _computeDisabled:function(a) {
  return !a;
}, _choosePrimaryButtonText:function(a) {
  return this._stepperData[a];
}, ensureRipple:function(a) {
  if (!this.hasRipple()) {
    this._ripple = this._createRipple();
    this._ripple.noink = this.noink;
    var b = this._rippleContainer || this.root;
    b && Polymer.dom(b.root).appendChild(this._ripple);
    if (a) {
      var b = Polymer.dom(this._rippleContainer || this), c = Polymer.dom(a).rootTarget;
      b.deepContains(c) && this._ripple.uiDownAction(a);
    }
  }
}});
"use strict";
Polymer({is:"paper-stepper", behaviors:[Polymer.IronMenuBehavior, Polymer.NeonAnimationRunnerBehavior, Polymer.IronResizableBehavior], properties:{opened:{type:Boolean, computed:"_computeOpened(_selectedIndex)", observer:"_openedChanged", notify:!0, reflectToAttribute:!0}, alternativeLabel:{type:Boolean, value:!1}, vertical:{type:Boolean, value:!1, notify:!0, reflectToAttribute:!0}, backText:{type:String, value:"BACK"}, finishText:{type:String, value:"FINISH"}, continueText:{type:String, value:"CONTINUE"}, 
skipText:{type:String, value:"SKIP"}, optionalText:{type:String, value:"Optional"}, updateText:{type:String, value:"UPDATE"}, linear:{type:Boolean, value:!1}, completed:{type:Boolean, value:!1, notify:!0, computed:"_computeCompleted(stepNumber, savedStepNumber)"}, hasSkipButton:{type:Boolean, value:!1}, hasBackButton:{type:Boolean, value:!1}, hasFinishButton:{type:Boolean, value:!1}, stepNumber:{type:Number, notify:!0, computed:"_computeStepNumber(items.length)"}, savedStepNumber:{type:Number, notify:!0, 
readOnly:!0}, selectedAttribute:{value:"opened", readOnly:!0}, selectable:{value:"paper-step"}, mutli:{value:!1, readOnly:!0}, responsiveCheckFrequence:{type:Number, value:200}, animateInitialSelection:{type:Boolean, value:!1}, horizontalHigherEntryAnimation:{type:String, value:"fade-in-slide-from-right-animation"}, horizontalHigherExitAnimation:{type:String, value:"fade-out-slide-right-animation"}, horizontalLowerEntryAnimation:{type:String, value:"fade-in-slide-from-left-animation"}, horizontalLowerExitAnimation:{type:String, 
value:"fade-out-slide-left-animation"}, _skipStepIndex:{type:Number, computed:"_compute_skipStepIndex(_selectedIndex)"}, _canSkip:{type:Boolean, notify:!0, computed:"_isntNull(_skipStepIndex)"}, _backStepIndex:{type:Number, computed:"_compute_backStepIndex(_selectedIndex)"}, _hasBackStep:{type:Boolean, computed:"_isntNull(_backStepIndex)"}, _selectedIndex:{type:Number, observer:"_selectedIndexChanged", readOnly:!0, value:-1}, _attrForSelectedStepPrimaryButtonText:{type:String, computed:"_compute__attrForSelectedStepPrimaryButtonText(_selectedIndex, stepNumber)"}}, 
_previousAnimatedStep:null, _previousSelected:null, keyBindings:{left:"_onLeftKey", right:"_onRightKey"}, listeners:{"iron-items-changed":"_initializeSteps", "paper-step-saved":"_stepSaved", transitionend:"_transitionEnd", "step-horizontal-label-resize":"_updateStepperClosedMaxHeight", "iron-resize":"_resizeHandler", "neon-animation-finish":"_onNeonAnimationFinish"}, observers:["_forwardCanSkip(_canSkip, selectedItem)", "_forwardHasBackStep(_hasBackStep, selectedItem)", "_forwardVertical(vertical)", 
"_forwardAlternativeLabel(alternativeLabel)", "_forwardStepperData(linear, backText, optionalText, finishText, continueText, skipText, updateText, hasSkipButton, hasBackButton)"], attached:function() {
  this._responsiveCheck();
}, back:function() {
  this.selectIndex(this._backStepIndex);
}, continue:function() {
  this.selectedItem && this.selectedItem.save() && this.progress();
}, progress:function() {
  if (!this.stepNumber) {
    return !1;
  }
  if (this.completed) {
    return this.selected = null, !0;
  }
  for (var a = (this._selectedIndex + 1) % this.stepNumber; a != this._selectedIndex; a = (a + 1) % this.stepNumber) {
    if (this.items[a].selectable) {
      return this.selectIndex(a), this.fire("paper-stepper-progressed"), !0;
    }
  }
  return !1;
}, reset:function() {
  this._setSavedStepNumber(0);
  this.selected = null;
  this.items.length && (this.items.map(function(a) {
    a._setSaved(!1);
    a._set_previousSaved(!1);
  }), this.items[0]._set_previousSaved(!0));
}, get _isRTL() {
  return "rtl" === window.getComputedStyle(this).direction;
}, _onLeftKey:function(a) {
  this._isRTL ? this._focusNext() : this._focusPrevious();
  a.detail.keyboardEvent.preventDefault();
}, _onRightKey:function(a) {
  this._isRTL ? this._focusPrevious() : this._focusNext();
  a.detail.keyboardEvent.preventDefault();
}, _selectSelected:function(a) {
  if (a = this._valueToItem(this.selected)) {
    var b = a.selectable;
    if (void 0 == b) {
      return;
    }
    if (!b) {
      this._previousSelected && this._previousSelected.selectable && (this.selected = this._valueForItem(this._previousSelected));
      this._previousSelected = null;
      return;
    }
  }
  this._selection.select(a);
  this._previousSelected = a;
  this._set_selectedIndex(this.indexOf(a));
  this.fallbackSelection && this.items.length && void 0 === this._selection.get() && (this.selected = this.fallbackSelection);
}, _updateStepperClosedMaxHeight:function() {
  this.debounce("updateStepperClosedMaxHeight", function() {
    this.customStyle["--label-wrapper-height"] = this.$$("#content-wrapper").clientHeight + "px";
    this.updateStyles();
  });
}, _openedChanged:function(a, b) {
  this.vertical || void 0 == b || this.toggleClass("collapsing", !0);
}, _transitionEnd:function(a) {
  "max-height" == a.propertyName && this.toggleClass("collapsing", !1);
}, _computeOpened:function(a) {
  return 0 <= a;
}, _stepSaved:function(a) {
  (a = this.items[this.indexOf(a.target) + 1]) && a._set_previousSaved(!0);
  this._setSavedStepNumber(this.savedStepNumber + 1);
}, _forwardVertical:function(a) {
  this.stepNumber && this.items.map(function(b) {
    b._setVertical(a);
  });
  this.setAttribute("role", a ? "menu" : "menubar");
}, _forwardStepperData:function(a, b, c, d, e, f, g, h, l) {
  this.stepNumber && this.items.map(function(n) {
    n._set_stepperData({linear:a, backText:b, optionalText:c, finishText:d, continueText:e, skipText:f, updateText:g, hasSkipButton:h, hasBackButton:l, stepNumber:this.stepNumber});
  }.bind(this));
}, _forwardAlternativeLabel:function(a) {
  this.stepNumber && this.items.map(function(b) {
    b._set_alternativeLabel(a);
  });
}, _computeStepNumber:function(a) {
  return a;
}, _selectedIndexChanged:function(a, b) {
  if (!this.vertical && 0 <= a && 0 <= b) {
    var c = this.items[b], d = this.items[a];
    d.classList.contains("neon-animating") && this.cancelAnimation();
    this._previousAnimatedStep && this._previousAnimatedStep.classList.contains("neon-animating") && (this.cancelAnimation(), this.toggleClass("neon-animating", !1, this._previousAnimatedStep));
    a = 0 < a - b;
    this.animationConfig = {"new-step-entry":{animatable:d, type:a ? d.horizontalHigherEntryAnimation && "higher-step-entry" : d.horizontalLowerEntryAnimation && "lower-step-entry"}, "old-step-exit":{animatable:c, type:a ? c.horizontalLowerExitAnimation && "lower-step-exit" : c.horizontalHigherExitAnimation && "higher-step-exit"}};
    this.animationConfig["new-step-entry"].type && (this.playAnimation("new-step-entry", {step:d}), this.toggleClass("neon-animating", !0, d));
    this.animationConfig["old-step-exit"].type && (this.playAnimation("old-step-exit", {step:c}), this.toggleClass("neon-animating", !0, c));
    this._previousAnimatedStep = c;
  }
}, _onNeonAnimationFinish:function(a) {
  (a = a.detail.step) && this.toggleClass("neon-animating", !1, a);
}, _forwardCanSkip:function(a, b) {
  b._set_canSkip(a);
}, _forwardHasBackStep:function(a, b) {
  b._set_hasBackStep(a);
}, _compute__attrForSelectedStepPrimaryButtonText:function(a) {
  if (0 > a) {
    return null;
  }
  a = this.selectedItem.saved ? "updateText" : 1 == this.stepNumber - this.savedStepNumber ? "finishText" : "continueText";
  this.selectedItem._set_attrForPrimaryButtonText(a);
  return a;
}, _isLastStep:function(a, b, c) {
  return c ? !1 : 1 == this.stepNumber - this.savedStepNumber && a == b;
}, _initializeSteps:function() {
  var a = 0, b = {linear:this.linear, backText:this.backText, optionalText:this.optionalText, finishText:this.finishText, continueText:this.continueText, skipText:this.skipText, updateText:this.updateText, hasSkipButton:this.hasSkipButton, hasBackButton:this.hasBackButton, stepNumber:this.stepNumber};
  this.items.map(function(c, d) {
    this.horizontalHigherEntryAnimation && !c.horizontalHigherEntryAnimation && (c.horizontalHigherEntryAnimation = this.horizontalHigherEntryAnimation);
    this.horizontalHigherExitAnimation && !c.horizontalHigherExitAnimation && (c.horizontalHigherExitAnimation = this.horizontalHigherExitAnimation);
    this.horizontalLowerEntryAnimation && !c.horizontalLowerEntryAnimation && (c.horizontalLowerEntryAnimation = this.horizontalLowerEntryAnimation);
    this.horizontalLowerExitAnimation && !c.horizontalLowerExitAnimation && (c.horizontalLowerExitAnimation = this.horizontalLowerExitAnimation);
    c._setIndex(d + 1);
    c._set_stepper(this);
    c._setVertical(this.vertical);
    c._set_alternativeLabel(this.alternativeLabel);
    c._set_stepperData(b);
    c._set_previousSaved(!d);
    c.saved && a++;
  }.bind(this));
  this._setSavedStepNumber(a);
  this._updateSelected();
}, _compute_skipStepIndex:function(a) {
  if (0 <= a && !this.completed) {
    for (var b = (a + 1) % this.stepNumber; b != a; b = (b + 1) % this.stepNumber) {
      if (this.items[b].selectable && !this.items[b].saved) {
        return b;
      }
    }
  }
  return null;
}, _compute_backStepIndex:function(a) {
  if (0 <= a) {
    for (--a; 0 <= a; a--) {
      if (this.items[a].selectable) {
        return a;
      }
    }
  }
  return null;
}, _isntNull:function(a) {
  return null != a;
}, _computeCompleted:function(a, b) {
  return b == a ? (this.fire("paper-stepper-completed"), !0) : !1;
}, _choosePrimaryButtonText:function(a) {
  return this[a];
}, _resizeHandler:function() {
  this.debounce("paper-stepper-responsive-check", function() {
    this._responsiveCheck();
  }, this.responsiveCheckFrequence);
}, _responsiveCheck:function() {
  var a = this.$.verticalResponsiveWidth.clientWidth;
  a && (this.vertical = !(this.clientWidth > a));
}});
(function() {
  function a(a) {
    return a.match(/^(.*?)\/?([^\/]+\.[^\/]+)?$/)[1] + "/";
  }
  Polymer({is:"iron-component-page", properties:{src:{type:String, observer:"_srcChanged"}, docSrc:{type:String, observer:"_srcChanged"}, base:{type:String, value:function() {
    return this.ownerDocument.baseURI.replace(/\#.*$/, "");
  }}, active:{type:String, notify:!0, value:""}, view:{type:String, value:"docs", notify:!0}, transitive:{type:Boolean, value:!1}, docElements:{type:Array, notify:!0, readOnly:!0, value:function() {
    return [];
  }}, docBehaviors:{type:Array, notify:!0, readOnly:!0, value:function() {
    return [];
  }}, docDemos:{type:Array, notify:!0, readOnly:!0}, scrollMode:{type:String, value:"waterfall"}, _activeDescriptor:Object, _fragmentPrefix:String, catalog:{type:Boolean, value:!1, reflectToAttribute:!0}, version:String, _analyzer:{type:Object, observer:"_analyzerChanged"}, _hydroDesc:{type:Object, observer:"_detectAnalyzer"}, _ajaxDesc:{type:Object, observer:"_detectAnalyzer"}, _loading:{type:Boolean, observer:"_loadingChanged"}, _hydroLoading:{type:Boolean, observer:"_detectLoading"}, _ajaxLoading:{type:Boolean, 
  observer:"_detectLoading"}, _demoUrl:{type:String, value:""}, _srcUrl:String}, observers:["_updateFrameSrc(view, base)", "_activeChanged(active, _analyzer)"], attached:function() {
    this.catalog || (this._setActiveFromHash(), this.listen(window, "hashchange", "_setActiveFromHash"));
  }, detached:function() {
    this.catalog || this.unlisten(window, "hashchange", "_setActiveFromHash");
  }, ready:function() {
    var a = this._loadJson();
    a ? (this.docElements = a, this._loading = !1) : this.src || this.catalog || this._srcChanged();
  }, _getVisableElements:function(a) {
    for (var b = [], d = 0; d < a.length; d++) {
      var e = a[d];
      console.log("is:", e.is + " -> " + e.show);
      e.show && b.push({is:e.is});
    }
    return b;
  }, _loadJson:function() {
    var a = "";
    Array.prototype.forEach.call(Polymer.dom(this).childNodes, function(b) {
      a += b.textContent;
    });
    a = a.trim();
    if ("" === a) {
      return null;
    }
    try {
      var c = JSON.parse(a);
      return Array.isArray(c) ? c : [];
    } catch (d) {
      throw console.error("Failure when parsing JSON:", a, d), d;
    }
  }, _setActiveFromHash:function(a) {
  }, _srcChanged:function() {
    if (this.docSrc) {
      if (!this.$.ajax.lastRequest || this.docSrc !== this.$.ajax.lastRequest.url && this.docSrc !== this._lastDocSrc) {
        this._ajaxLoading = !0, this._activeDescriptor = this._ajaxDesc = null, this.$.ajax.generateRequest();
      }
      this._lastDocSrc = this.docSrc;
    } else {
      if (this.src) {
        var b = (new URL(this.src, this.base)).toString();
      } else {
        b = a(this.base), b = (new URL(b.match(/([^\/]*)\/$/)[1] + ".html", b)).toString();
      }
      var c = b.match(/([^\/\.]+)\.github\.io\/([^\/]+)\/?([^\/]*)$/);
      c && (b = "https://cdn.rawgit.com/" + c[1] + "/" + c[2] + "/master/" + c[3]);
      this._baseUrl = a(b);
      this._srcUrl = b;
      this._hydroLoading || this.$.analyzer.analyze();
    }
  }, _updateFrameSrc:function(a) {
    if (!a || 0 !== a.indexOf("demo:")) {
      return "about:blank";
    }
    a = a.split(":")[1];
    a = (new URL(a, this.base)).toString();
    var b = this;
    this._iframe && Polymer.dom(this.$.demo).removeChild(this._iframe);
    this._iframe = document.createElement("iframe");
    this._iframe.src = a;
    this._iframe.allowFullscreen = !0;
    this._iframe.style.height = "0%";
    this._iframe.addEventListener("load", function() {
      var a = b._iframe.contentWindow;
      a.HTMLImports ? a.HTMLImports.whenReady(function() {
        a.Polymer ? a.Polymer.RenderStatus.afterNextRender(b, function() {
          b._iframe.style.height = "100%";
        }) : b._iframe.style.height = "100%";
      }) : b._iframe.style.height = "100%";
    });
    Polymer.dom(this.$.demo).appendChild(this._iframe);
  }, _getDefaultActive:function() {
    function b(a) {
      for (var b, c = 0; c < a.length; c++) {
        if ((b = a[c]) && b.contentHref && 0 < b.contentHref.indexOf(d)) {
          return b;
        }
      }
      return null;
    }
    var c, d = (this._srcUrl || this.base).replace(a(this.base), "");
    return (c = b(this.docElements) || b(this.docBehaviors)) ? c.is : 0 < this.docElements.length ? this.docElements[0].is : 0 < this.docBehaviors.length ? this.docBehaviors[0].is : null;
  }, _findDescriptor:function(a) {
    if (!this._analyzer) {
      return null;
    }
    var b = this._analyzer.elementsByTagName[a];
    if (b) {
      return b;
    }
    for (b = 0; b < this._analyzer.behaviors.length; b++) {
      if (this._analyzer.behaviors[b].is === a) {
        return this._analyzer.behaviors[b];
      }
    }
    return null;
  }, _activeChanged:function(a, c) {
    if ("" === a) {
      this.active = this._getDefaultActive();
    } else {
      if (this.async(function() {
        this.$.active.value = a;
      }), c && c.elementsByTagName) {
        this.$.headerPanel.scroller.scrollTop = 0;
        if (this._activeDescriptor = this._findDescriptor(a)) {
          var b;
          c = this._activeDescriptor.demos;
          if (this.view && c && c.length) {
            var e = this.view.split(":");
            "demo" == e[0] && (e[1] && (b = c.some(function(a, b) {
              if (a.path == e[1]) {
                return !0;
              }
            })), b || (this.view = "demo:" + c[0].path, b = !0));
          }
          void 0 == !b && (this.view = "docs");
          this._activeDescriptor.is && !document.title && (document.title = this._activeDescriptor.is + " documentation");
          this._fragmentPrefix = this._activeDescriptor.is && !this.catalog ? this._activeDescriptor.is + ":" : "";
          this.$.viewer.scrollToAnchor(window.location.hash);
        }
        this._setDocDemos(this._activeDescriptor ? this._activeDescriptor.demos : []);
      }
    }
  }, _loadingChanged:function() {
    this.toggleClass("loaded", !this._loading);
  }, _detectLoading:function() {
    this._loading = this.docSrc ? this._ajaxLoading : this._hydroLoading;
  }, _analyzerChanged:function() {
    var a = this._analyzer;
    this._setDocElements(a && a.elements ? a.elements : []);
    this._setDocBehaviors(a && a.behaviors ? a.behaviors : []);
    this._findDescriptor(this.active) || (this.active = this._getDefaultActive());
  }, _detectAnalyzer:function() {
    this._analyzer = this.docSrc ? this._ajaxDesc : this._hydroDesc;
  }, _handleMenuItemSelected:function(a) {
    a.target && a.target.value && (this.active = a.target.value);
  }, _handleAjaxResponse:function(a, c) {
    this._ajaxLoading = !1;
    this._ajaxLastUrl = c.url;
    this._ajaxDesc = c.response;
  }, _handleError:function(a) {
    this.fire("iron-component-page-error", a.detail);
  }, _handleComponentSelectedEvent:function(a) {
    this._findDescriptor(a.detail) ? this.active = a.detail : console.warn("Could not navigate to ", a.detail);
  }, marshal:function() {
    var a = JSON.stringify(this.docElements || [], null, "  ");
    return "<" + this.is + ">\n" + a.replace(/</g, "&lt;").replace(/>/g, "&gt;") + "\n</" + this.is + ">";
  }, _demoView:function(a) {
    return "demo:" + a;
  }, _viewType:function(a) {
    return a ? a.split(":")[0] : null;
  }});
})();

